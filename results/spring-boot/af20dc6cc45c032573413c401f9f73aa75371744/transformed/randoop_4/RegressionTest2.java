import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest2 {

    public static boolean debug = false;

    @Test
    public void test1001() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1001");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file1 = explodedArchive0.root;
        java.io.File file2 = null;
        explodedArchive0.manifestFile = file2;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive4 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest5 = explodedArchive4.manifest;
        explodedArchive4.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive8 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest9 = explodedArchive8.manifest;
        explodedArchive8.recursive = false;
        java.util.jar.Manifest manifest12 = explodedArchive8.manifest;
        java.io.File file13 = explodedArchive8.manifestFile;
        java.io.File file14 = null;
        java.io.File file15 = explodedArchive8.getManifestFile(file14);
        explodedArchive4.manifestFile = file14;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive17 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest18 = explodedArchive17.manifest;
        explodedArchive17.recursive = false;
        java.util.jar.Manifest manifest21 = explodedArchive17.manifest;
        java.io.File file22 = explodedArchive17.manifestFile;
        java.io.File file23 = null;
        java.io.File file24 = explodedArchive17.getManifestFile(file23);
        explodedArchive4.manifestFile = file24;
        java.io.File file26 = explodedArchive0.getManifestFile(file24);
        boolean boolean27 = explodedArchive0.recursive;
        java.io.File file28 = explodedArchive0.root;
        // The following exception was thrown during execution in test generation
        try {
            java.util.jar.Manifest manifest29 = explodedArchive0.getManifest();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file15.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file15.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file24.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file24.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file26.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file26.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file28);
    }

    @Test
    public void test1002() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1002");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest1 = explodedArchive0.manifest;
        explodedArchive0.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive4 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest5 = explodedArchive4.manifest;
        explodedArchive4.recursive = false;
        java.util.jar.Manifest manifest8 = explodedArchive4.manifest;
        java.io.File file9 = explodedArchive4.manifestFile;
        java.io.File file10 = null;
        java.io.File file11 = explodedArchive4.getManifestFile(file10);
        explodedArchive0.manifestFile = file10;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive13 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest14 = explodedArchive13.manifest;
        explodedArchive13.recursive = false;
        java.util.jar.Manifest manifest17 = explodedArchive13.manifest;
        java.io.File file18 = explodedArchive13.manifestFile;
        java.io.File file19 = null;
        java.io.File file20 = explodedArchive13.getManifestFile(file19);
        explodedArchive0.manifestFile = file20;
        java.io.File file22 = explodedArchive0.manifestFile;
        java.util.jar.Manifest manifest23 = null;
        explodedArchive0.manifest = manifest23;
        java.io.File file25 = null;
        explodedArchive0.manifestFile = file25;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file11.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file11.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file20.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file20.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file22.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file22.toString(), "META-INF/MANIFEST.MF");
    }

    @Test
    public void test1003() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1003");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.lang.String str1 = explodedArchive0.toString();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive2 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file3 = explodedArchive2.root;
        java.io.File file4 = null;
        explodedArchive2.manifestFile = file4;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive6 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest7 = explodedArchive6.manifest;
        explodedArchive6.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive10 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest11 = explodedArchive10.manifest;
        explodedArchive10.recursive = false;
        java.util.jar.Manifest manifest14 = explodedArchive10.manifest;
        java.io.File file15 = explodedArchive10.manifestFile;
        java.io.File file16 = null;
        java.io.File file17 = explodedArchive10.getManifestFile(file16);
        explodedArchive6.manifestFile = file16;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive19 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest20 = explodedArchive19.manifest;
        explodedArchive19.recursive = false;
        java.util.jar.Manifest manifest23 = explodedArchive19.manifest;
        java.io.File file24 = explodedArchive19.manifestFile;
        java.io.File file25 = null;
        java.io.File file26 = explodedArchive19.getManifestFile(file25);
        explodedArchive6.manifestFile = file26;
        java.io.File file28 = explodedArchive2.getManifestFile(file26);
        java.io.File file29 = explodedArchive0.getManifestFile(file26);
        explodedArchive0.recursive = false;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str1 + "' != '" + "exploded archive" + "'", str1.equals("exploded archive"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file17.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file17.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file26.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file26.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file28.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file28.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file29.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file29.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
    }

    @Test
    public void test1004() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1004");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file1 = null;
        fileEntryIterator0.current = file1;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive3 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.lang.String str4 = explodedArchive3.toString();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive5 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file6 = explodedArchive5.root;
        java.io.File file7 = null;
        explodedArchive5.manifestFile = file7;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive9 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest10 = explodedArchive9.manifest;
        explodedArchive9.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive13 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest14 = explodedArchive13.manifest;
        explodedArchive13.recursive = false;
        java.util.jar.Manifest manifest17 = explodedArchive13.manifest;
        java.io.File file18 = explodedArchive13.manifestFile;
        java.io.File file19 = null;
        java.io.File file20 = explodedArchive13.getManifestFile(file19);
        explodedArchive9.manifestFile = file19;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive22 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest23 = explodedArchive22.manifest;
        explodedArchive22.recursive = false;
        java.util.jar.Manifest manifest26 = explodedArchive22.manifest;
        java.io.File file27 = explodedArchive22.manifestFile;
        java.io.File file28 = null;
        java.io.File file29 = explodedArchive22.getManifestFile(file28);
        explodedArchive9.manifestFile = file29;
        java.io.File file31 = explodedArchive5.getManifestFile(file29);
        java.io.File file32 = explodedArchive3.getManifestFile(file29);
        fileEntryIterator0.root = file29;
        boolean boolean34 = fileEntryIterator0.recursive;
        java.util.Comparator<java.io.File> fileComparator35 = fileEntryIterator0.entryComparator;
        java.io.File file36 = fileEntryIterator0.poll();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str4 + "' != '" + "exploded archive" + "'", str4.equals("exploded archive"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file20.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file20.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file29.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file29.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file31.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file31.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file32.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file32.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file36);
    }

    @Test
    public void test1005() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1005");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest1 = explodedArchive0.manifest;
        explodedArchive0.recursive = false;
        java.io.File file4 = null;
        explodedArchive0.root = file4;
        java.io.File file6 = explodedArchive0.root;
        java.util.jar.Manifest manifest7 = null;
        explodedArchive0.manifest = manifest7;
        explodedArchive0.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator11 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file12 = null;
        fileEntryIterator11.current = file12;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive14 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest15 = explodedArchive14.manifest;
        explodedArchive14.recursive = false;
        java.util.jar.Manifest manifest18 = explodedArchive14.manifest;
        java.io.File file19 = explodedArchive14.manifestFile;
        java.io.File file20 = null;
        java.io.File file21 = explodedArchive14.getManifestFile(file20);
        java.util.Iterator<java.io.File> fileItor22 = fileEntryIterator11.listFiles(file21);
        explodedArchive0.root = file21;
        java.io.File file24 = explodedArchive0.root;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file21.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file21.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file24.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file24.toString(), "META-INF/MANIFEST.MF");
    }

    @Test
    public void test1006() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1006");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.lang.String str1 = explodedArchive0.toString();
        explodedArchive0.recursive = true;
        java.io.File file4 = null;
        java.io.File file5 = explodedArchive0.getManifestFile(file4);
        java.io.File file6 = explodedArchive0.root;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator<org.springframework.boot.loader.archive.Archive.Entry> entryItor7 = explodedArchive0.iterator();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str1 + "' != '" + "exploded archive" + "'", str1.equals("exploded archive"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file5.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file5.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file6);
    }

    @Test
    public void test1007() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1007");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntry fileEntry0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntry();
        java.io.File file1 = fileEntry0.file;
        java.lang.String str2 = fileEntry0.name;
        fileEntry0.name = "";
        fileEntry0.name = "exploded archive";
        java.lang.String str7 = fileEntry0.getName();
        java.lang.String str8 = fileEntry0.getName();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str7 + "' != '" + "exploded archive" + "'", str7.equals("exploded archive"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str8 + "' != '" + "exploded archive" + "'", str8.equals("exploded archive"));
    }

    @Test
    public void test1008() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1008");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file1 = null;
        fileEntryIterator0.current = file1;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive3 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest4 = explodedArchive3.manifest;
        explodedArchive3.recursive = false;
        java.util.jar.Manifest manifest7 = explodedArchive3.manifest;
        java.io.File file8 = explodedArchive3.manifestFile;
        java.io.File file9 = null;
        java.io.File file10 = explodedArchive3.getManifestFile(file9);
        java.util.Iterator<java.io.File> fileItor11 = fileEntryIterator0.listFiles(file10);
        java.io.File file12 = fileEntryIterator0.root;
        java.io.File file13 = fileEntryIterator0.root;
        java.io.File file14 = fileEntryIterator0.current;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator15 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        boolean boolean16 = fileEntryIterator15.hasNext();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator17 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator18 = entryComparator17.reversed();
        java.util.Comparator<java.io.File> fileComparator19 = fileComparator18.reversed();
        fileEntryIterator15.entryComparator = fileComparator19;
        java.util.Comparator<java.io.File> fileComparator21 = fileEntryIterator15.entryComparator;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator22 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator23 = entryComparator22.reversed();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator24 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator25 = entryComparator24.reversed();
        java.util.Comparator<java.io.File> fileComparator26 = entryComparator22.thenComparing(fileComparator25);
        java.util.Comparator<java.io.File> fileComparator27 = fileComparator21.thenComparing(fileComparator25);
        fileEntryIterator0.entryComparator = fileComparator21;
        java.util.Deque<java.util.Iterator<java.io.File>> fileItorQueue29 = fileEntryIterator0.stack;
        java.io.File file30 = fileEntryIterator0.current;
        fileEntryIterator0.recursive = false;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItorQueue29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file30);
    }

    @Test
    public void test1009() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1009");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntry fileEntry0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntry();
        java.io.File file1 = fileEntry0.file;
        java.lang.String str2 = fileEntry0.name;
        java.io.File file3 = fileEntry0.file;
        java.io.File file4 = fileEntry0.file;
        java.lang.String str5 = fileEntry0.getName();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntry fileEntry6 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntry();
        java.lang.String str7 = fileEntry6.name;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator8 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file9 = null;
        fileEntryIterator8.current = file9;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive11 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.lang.String str12 = explodedArchive11.toString();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive13 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file14 = explodedArchive13.root;
        java.io.File file15 = null;
        explodedArchive13.manifestFile = file15;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive17 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest18 = explodedArchive17.manifest;
        explodedArchive17.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive21 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest22 = explodedArchive21.manifest;
        explodedArchive21.recursive = false;
        java.util.jar.Manifest manifest25 = explodedArchive21.manifest;
        java.io.File file26 = explodedArchive21.manifestFile;
        java.io.File file27 = null;
        java.io.File file28 = explodedArchive21.getManifestFile(file27);
        explodedArchive17.manifestFile = file27;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive30 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest31 = explodedArchive30.manifest;
        explodedArchive30.recursive = false;
        java.util.jar.Manifest manifest34 = explodedArchive30.manifest;
        java.io.File file35 = explodedArchive30.manifestFile;
        java.io.File file36 = null;
        java.io.File file37 = explodedArchive30.getManifestFile(file36);
        explodedArchive17.manifestFile = file37;
        java.io.File file39 = explodedArchive13.getManifestFile(file37);
        java.io.File file40 = explodedArchive11.getManifestFile(file37);
        fileEntryIterator8.root = file37;
        fileEntry6.file = file37;
        fileEntry0.file = file37;
        java.lang.String str44 = fileEntry0.name;
        java.lang.String str45 = fileEntry0.getName();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str12 + "' != '" + "exploded archive" + "'", str12.equals("exploded archive"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file28.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file28.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file37.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file37.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file39.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file39.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file40.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file40.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str45);
    }

    @Test
    public void test1010() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1010");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file1 = null;
        fileEntryIterator0.current = file1;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive3 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest4 = explodedArchive3.manifest;
        explodedArchive3.recursive = false;
        java.util.jar.Manifest manifest7 = explodedArchive3.manifest;
        java.io.File file8 = explodedArchive3.manifestFile;
        java.io.File file9 = null;
        java.io.File file10 = explodedArchive3.getManifestFile(file9);
        java.util.Iterator<java.io.File> fileItor11 = fileEntryIterator0.listFiles(file10);
        java.io.File file12 = fileEntryIterator0.root;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive13 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.lang.String str14 = explodedArchive13.toString();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive15 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file16 = explodedArchive15.root;
        java.io.File file17 = null;
        explodedArchive15.manifestFile = file17;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive19 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest20 = explodedArchive19.manifest;
        explodedArchive19.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive23 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest24 = explodedArchive23.manifest;
        explodedArchive23.recursive = false;
        java.util.jar.Manifest manifest27 = explodedArchive23.manifest;
        java.io.File file28 = explodedArchive23.manifestFile;
        java.io.File file29 = null;
        java.io.File file30 = explodedArchive23.getManifestFile(file29);
        explodedArchive19.manifestFile = file29;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive32 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest33 = explodedArchive32.manifest;
        explodedArchive32.recursive = false;
        java.util.jar.Manifest manifest36 = explodedArchive32.manifest;
        java.io.File file37 = explodedArchive32.manifestFile;
        java.io.File file38 = null;
        java.io.File file39 = explodedArchive32.getManifestFile(file38);
        explodedArchive19.manifestFile = file39;
        java.io.File file41 = explodedArchive15.getManifestFile(file39);
        java.io.File file42 = explodedArchive13.getManifestFile(file39);
        fileEntryIterator0.root = file39;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive44 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest45 = explodedArchive44.manifest;
        explodedArchive44.recursive = false;
        java.io.File file48 = null;
        explodedArchive44.root = file48;
        java.io.File file50 = explodedArchive44.manifestFile;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive51 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file52 = explodedArchive51.root;
        java.io.File file53 = null;
        explodedArchive51.manifestFile = file53;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive55 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest56 = explodedArchive55.manifest;
        explodedArchive55.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive59 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest60 = explodedArchive59.manifest;
        explodedArchive59.recursive = false;
        java.util.jar.Manifest manifest63 = explodedArchive59.manifest;
        java.io.File file64 = explodedArchive59.manifestFile;
        java.io.File file65 = null;
        java.io.File file66 = explodedArchive59.getManifestFile(file65);
        explodedArchive55.manifestFile = file65;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive68 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest69 = explodedArchive68.manifest;
        explodedArchive68.recursive = false;
        java.util.jar.Manifest manifest72 = explodedArchive68.manifest;
        java.io.File file73 = explodedArchive68.manifestFile;
        java.io.File file74 = null;
        java.io.File file75 = explodedArchive68.getManifestFile(file74);
        explodedArchive55.manifestFile = file75;
        java.io.File file77 = explodedArchive51.getManifestFile(file75);
        java.io.File file78 = explodedArchive44.getManifestFile(file75);
        fileEntryIterator0.root = file78;
        java.util.Deque<java.util.Iterator<java.io.File>> fileItorQueue80 = fileEntryIterator0.stack;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str14 + "' != '" + "exploded archive" + "'", str14.equals("exploded archive"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file30.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file30.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file39.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file39.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file41.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file41.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file42.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file42.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file66.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file66.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file73);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file75);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file75.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file75.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file77);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file77.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file77.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file78);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file78.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file78.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItorQueue80);
    }

    @Test
    public void test1011() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1011");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest1 = explodedArchive0.manifest;
        explodedArchive0.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive4 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest5 = explodedArchive4.manifest;
        explodedArchive4.recursive = false;
        java.util.jar.Manifest manifest8 = explodedArchive4.manifest;
        java.io.File file9 = explodedArchive4.manifestFile;
        java.io.File file10 = null;
        java.io.File file11 = explodedArchive4.getManifestFile(file10);
        explodedArchive0.manifestFile = file10;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive13 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest14 = explodedArchive13.manifest;
        explodedArchive13.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive17 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest18 = explodedArchive17.manifest;
        explodedArchive17.recursive = false;
        java.util.jar.Manifest manifest21 = explodedArchive17.manifest;
        java.io.File file22 = explodedArchive17.manifestFile;
        java.io.File file23 = null;
        java.io.File file24 = explodedArchive17.getManifestFile(file23);
        explodedArchive13.manifestFile = file23;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive26 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest27 = explodedArchive26.manifest;
        explodedArchive26.recursive = false;
        java.util.jar.Manifest manifest30 = explodedArchive26.manifest;
        java.io.File file31 = explodedArchive26.manifestFile;
        java.io.File file32 = null;
        java.io.File file33 = explodedArchive26.getManifestFile(file32);
        explodedArchive13.manifestFile = file33;
        explodedArchive0.root = file33;
        java.net.URL uRL36 = explodedArchive0.getUrl();
        explodedArchive0.recursive = false;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file11.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file11.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file24.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file24.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file33.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file33.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(uRL36);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(uRL36.toString(), "file:/server/study-execution/new-nimrod/nimrod-hunoroutput-test-dest/spring-boot/af20dc6cc45c032573413c401f9f73aa75371744/randoop_4/META-INF/MANIFEST.MF");
    }

    @Test
    public void test1012() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1012");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest1 = explodedArchive0.manifest;
        explodedArchive0.recursive = false;
        java.io.File file4 = null;
        explodedArchive0.root = file4;
        java.io.File file6 = explodedArchive0.root;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive7 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest8 = explodedArchive7.manifest;
        explodedArchive7.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive11 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest12 = explodedArchive11.manifest;
        explodedArchive11.recursive = false;
        java.util.jar.Manifest manifest15 = explodedArchive11.manifest;
        java.io.File file16 = explodedArchive11.manifestFile;
        java.io.File file17 = null;
        java.io.File file18 = explodedArchive11.getManifestFile(file17);
        explodedArchive7.manifestFile = file17;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive20 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest21 = explodedArchive20.manifest;
        explodedArchive20.recursive = false;
        java.util.jar.Manifest manifest24 = explodedArchive20.manifest;
        java.io.File file25 = explodedArchive20.manifestFile;
        java.io.File file26 = null;
        java.io.File file27 = explodedArchive20.getManifestFile(file26);
        explodedArchive7.manifestFile = file27;
        java.io.File file29 = explodedArchive0.getManifestFile(file27);
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntry fileEntry30 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntry();
        java.lang.String str31 = fileEntry30.name;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator32 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file33 = null;
        fileEntryIterator32.current = file33;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive35 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.lang.String str36 = explodedArchive35.toString();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive37 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file38 = explodedArchive37.root;
        java.io.File file39 = null;
        explodedArchive37.manifestFile = file39;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive41 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest42 = explodedArchive41.manifest;
        explodedArchive41.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive45 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest46 = explodedArchive45.manifest;
        explodedArchive45.recursive = false;
        java.util.jar.Manifest manifest49 = explodedArchive45.manifest;
        java.io.File file50 = explodedArchive45.manifestFile;
        java.io.File file51 = null;
        java.io.File file52 = explodedArchive45.getManifestFile(file51);
        explodedArchive41.manifestFile = file51;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive54 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest55 = explodedArchive54.manifest;
        explodedArchive54.recursive = false;
        java.util.jar.Manifest manifest58 = explodedArchive54.manifest;
        java.io.File file59 = explodedArchive54.manifestFile;
        java.io.File file60 = null;
        java.io.File file61 = explodedArchive54.getManifestFile(file60);
        explodedArchive41.manifestFile = file61;
        java.io.File file63 = explodedArchive37.getManifestFile(file61);
        java.io.File file64 = explodedArchive35.getManifestFile(file61);
        fileEntryIterator32.root = file61;
        fileEntry30.file = file61;
        java.io.File file67 = fileEntry30.file;
        explodedArchive0.root = file67;
        java.io.File file69 = explodedArchive0.manifestFile;
        java.util.Spliterator<org.springframework.boot.loader.archive.Archive.Entry> entrySpliterator70 = explodedArchive0.spliterator();
        explodedArchive0.recursive = true;
        java.util.jar.Manifest manifest73 = explodedArchive0.manifest;
        java.util.jar.Manifest manifest74 = explodedArchive0.manifest;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file18.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file18.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file27.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file27.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file29.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file29.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str36 + "' != '" + "exploded archive" + "'", str36.equals("exploded archive"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file52.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file52.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file61.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file61.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file63.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file63.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file64.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file64.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file67.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file67.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(entrySpliterator70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest73);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest74);
    }

    @Test
    public void test1013() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1013");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file1 = null;
        fileEntryIterator0.current = file1;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive3 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest4 = explodedArchive3.manifest;
        explodedArchive3.recursive = false;
        java.util.jar.Manifest manifest7 = explodedArchive3.manifest;
        java.io.File file8 = explodedArchive3.manifestFile;
        java.io.File file9 = null;
        java.io.File file10 = explodedArchive3.getManifestFile(file9);
        java.util.Iterator<java.io.File> fileItor11 = fileEntryIterator0.listFiles(file10);
        java.io.File file12 = fileEntryIterator0.root;
        java.io.File file13 = fileEntryIterator0.poll();
        java.util.Comparator<java.io.File> fileComparator14 = fileEntryIterator0.entryComparator;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator15 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        boolean boolean16 = fileEntryIterator15.hasNext();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator17 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator18 = entryComparator17.reversed();
        java.util.Comparator<java.io.File> fileComparator19 = fileComparator18.reversed();
        fileEntryIterator15.entryComparator = fileComparator19;
        java.util.Comparator<java.io.File> fileComparator21 = fileEntryIterator15.entryComparator;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator22 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator23 = entryComparator22.reversed();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator24 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator25 = entryComparator24.reversed();
        java.util.Comparator<java.io.File> fileComparator26 = entryComparator22.thenComparing(fileComparator25);
        java.util.Comparator<java.io.File> fileComparator27 = fileComparator21.thenComparing(fileComparator25);
        fileEntryIterator0.entryComparator = fileComparator27;
        // The following exception was thrown during execution in test generation
        try {
            fileEntryIterator0.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: remove");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator27);
    }

    @Test
    public void test1014() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1014");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file1 = explodedArchive0.root;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator2 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file3 = null;
        fileEntryIterator2.current = file3;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive5 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest6 = explodedArchive5.manifest;
        explodedArchive5.recursive = false;
        java.util.jar.Manifest manifest9 = explodedArchive5.manifest;
        java.io.File file10 = explodedArchive5.manifestFile;
        java.io.File file11 = null;
        java.io.File file12 = explodedArchive5.getManifestFile(file11);
        java.util.Iterator<java.io.File> fileItor13 = fileEntryIterator2.listFiles(file12);
        boolean boolean14 = fileEntryIterator2.hasNext();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator15 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator16 = entryComparator15.reversed();
        java.util.Comparator<java.io.File> fileComparator17 = entryComparator15.reversed();
        fileEntryIterator2.entryComparator = fileComparator17;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator19 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file20 = null;
        fileEntryIterator19.current = file20;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive22 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.lang.String str23 = explodedArchive22.toString();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive24 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file25 = explodedArchive24.root;
        java.io.File file26 = null;
        explodedArchive24.manifestFile = file26;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive28 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest29 = explodedArchive28.manifest;
        explodedArchive28.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive32 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest33 = explodedArchive32.manifest;
        explodedArchive32.recursive = false;
        java.util.jar.Manifest manifest36 = explodedArchive32.manifest;
        java.io.File file37 = explodedArchive32.manifestFile;
        java.io.File file38 = null;
        java.io.File file39 = explodedArchive32.getManifestFile(file38);
        explodedArchive28.manifestFile = file38;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive41 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest42 = explodedArchive41.manifest;
        explodedArchive41.recursive = false;
        java.util.jar.Manifest manifest45 = explodedArchive41.manifest;
        java.io.File file46 = explodedArchive41.manifestFile;
        java.io.File file47 = null;
        java.io.File file48 = explodedArchive41.getManifestFile(file47);
        explodedArchive28.manifestFile = file48;
        java.io.File file50 = explodedArchive24.getManifestFile(file48);
        java.io.File file51 = explodedArchive22.getManifestFile(file48);
        fileEntryIterator19.root = file48;
        fileEntryIterator2.current = file48;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive54 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file55 = explodedArchive54.root;
        java.io.File file56 = null;
        explodedArchive54.manifestFile = file56;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive58 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest59 = explodedArchive58.manifest;
        explodedArchive58.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive62 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest63 = explodedArchive62.manifest;
        explodedArchive62.recursive = false;
        java.util.jar.Manifest manifest66 = explodedArchive62.manifest;
        java.io.File file67 = explodedArchive62.manifestFile;
        java.io.File file68 = null;
        java.io.File file69 = explodedArchive62.getManifestFile(file68);
        explodedArchive58.manifestFile = file68;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive71 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest72 = explodedArchive71.manifest;
        explodedArchive71.recursive = false;
        java.util.jar.Manifest manifest75 = explodedArchive71.manifest;
        java.io.File file76 = explodedArchive71.manifestFile;
        java.io.File file77 = null;
        java.io.File file78 = explodedArchive71.getManifestFile(file77);
        explodedArchive58.manifestFile = file78;
        java.io.File file80 = explodedArchive54.getManifestFile(file78);
        fileEntryIterator2.root = file80;
        explodedArchive0.root = file80;
        java.lang.String str83 = explodedArchive0.toString();
        org.springframework.boot.loader.archive.Archive.EntryFilter entryFilter84 = null;
        java.util.List<org.springframework.boot.loader.archive.Archive> archiveList85 = explodedArchive0.getNestedArchives(entryFilter84);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file12.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file12.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str23 + "' != '" + "exploded archive" + "'", str23.equals("exploded archive"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file39.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file39.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file48.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file48.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file50.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file50.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file51.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file51.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file69.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file69.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest75);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file76);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file78);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file78.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file78.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file80);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file80.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file80.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertTrue("'" + str83 + "' != '" + "file:/server/study-execution/new-nimrod/nimrod-hunoroutput-test-dest/spring-boot/af20dc6cc45c032573413c401f9f73aa75371744/randoop_4/META-INF/MANIFEST.MF/META-INF/MANIFEST.MF" + "'", str83.equals("file:/server/study-execution/new-nimrod/nimrod-hunoroutput-test-dest/spring-boot/af20dc6cc45c032573413c401f9f73aa75371744/randoop_4/META-INF/MANIFEST.MF/META-INF/MANIFEST.MF"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(archiveList85);
    }

    @Test
    public void test1015() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1015");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest1 = explodedArchive0.manifest;
        java.util.jar.Manifest manifest2 = null;
        explodedArchive0.manifest = manifest2;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator4 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        boolean boolean5 = fileEntryIterator4.hasNext();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator6 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator7 = entryComparator6.reversed();
        java.util.Comparator<java.io.File> fileComparator8 = fileComparator7.reversed();
        fileEntryIterator4.entryComparator = fileComparator8;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive10 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file11 = explodedArchive10.root;
        java.io.File file12 = null;
        explodedArchive10.manifestFile = file12;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive14 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest15 = explodedArchive14.manifest;
        explodedArchive14.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive18 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest19 = explodedArchive18.manifest;
        explodedArchive18.recursive = false;
        java.util.jar.Manifest manifest22 = explodedArchive18.manifest;
        java.io.File file23 = explodedArchive18.manifestFile;
        java.io.File file24 = null;
        java.io.File file25 = explodedArchive18.getManifestFile(file24);
        explodedArchive14.manifestFile = file24;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive27 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest28 = explodedArchive27.manifest;
        explodedArchive27.recursive = false;
        java.util.jar.Manifest manifest31 = explodedArchive27.manifest;
        java.io.File file32 = explodedArchive27.manifestFile;
        java.io.File file33 = null;
        java.io.File file34 = explodedArchive27.getManifestFile(file33);
        explodedArchive14.manifestFile = file34;
        java.io.File file36 = explodedArchive10.getManifestFile(file34);
        java.util.Iterator<java.io.File> fileItor37 = fileEntryIterator4.listFiles(file36);
        java.io.File file38 = explodedArchive0.getManifestFile(file36);
        boolean boolean39 = explodedArchive0.recursive;
        org.springframework.boot.loader.archive.Archive.EntryFilter entryFilter40 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<org.springframework.boot.loader.archive.Archive> archiveList41 = explodedArchive0.getNestedArchives(entryFilter40);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file25.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file25.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file34.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file34.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file36.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file36.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file38.getParent(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file38.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
    }

    @Test
    public void test1016() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1016");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        boolean boolean1 = fileEntryIterator0.recursive;
        java.io.File file2 = fileEntryIterator0.current;
        boolean boolean3 = fileEntryIterator0.hasNext();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator4 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator5 = entryComparator4.reversed();
        java.util.Comparator<java.io.File> fileComparator6 = entryComparator4.reversed();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive7 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest8 = explodedArchive7.manifest;
        explodedArchive7.recursive = false;
        java.util.jar.Manifest manifest11 = explodedArchive7.manifest;
        java.io.File file12 = explodedArchive7.manifestFile;
        java.io.File file13 = null;
        java.io.File file14 = explodedArchive7.getManifestFile(file13);
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive15 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest16 = explodedArchive15.manifest;
        explodedArchive15.recursive = false;
        java.io.File file19 = null;
        explodedArchive15.root = file19;
        java.io.File file21 = explodedArchive15.root;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive22 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest23 = explodedArchive22.manifest;
        explodedArchive22.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive26 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest27 = explodedArchive26.manifest;
        explodedArchive26.recursive = false;
        java.util.jar.Manifest manifest30 = explodedArchive26.manifest;
        java.io.File file31 = explodedArchive26.manifestFile;
        java.io.File file32 = null;
        java.io.File file33 = explodedArchive26.getManifestFile(file32);
        explodedArchive22.manifestFile = file32;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive35 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest36 = explodedArchive35.manifest;
        explodedArchive35.recursive = false;
        java.util.jar.Manifest manifest39 = explodedArchive35.manifest;
        java.io.File file40 = explodedArchive35.manifestFile;
        java.io.File file41 = null;
        java.io.File file42 = explodedArchive35.getManifestFile(file41);
        explodedArchive22.manifestFile = file42;
        java.io.File file44 = explodedArchive15.getManifestFile(file42);
        int int45 = entryComparator4.compare(file14, file42);
        java.util.Iterator<java.io.File> fileItor46 = fileEntryIterator0.listFiles(file14);
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntry fileEntry47 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntry();
        java.io.File file48 = fileEntry47.getFile();
        java.io.File file49 = fileEntry47.getFile();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive50 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file51 = explodedArchive50.root;
        java.io.File file52 = null;
        explodedArchive50.manifestFile = file52;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive54 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest55 = explodedArchive54.manifest;
        explodedArchive54.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive58 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest59 = explodedArchive58.manifest;
        explodedArchive58.recursive = false;
        java.util.jar.Manifest manifest62 = explodedArchive58.manifest;
        java.io.File file63 = explodedArchive58.manifestFile;
        java.io.File file64 = null;
        java.io.File file65 = explodedArchive58.getManifestFile(file64);
        explodedArchive54.manifestFile = file64;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive67 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest68 = explodedArchive67.manifest;
        explodedArchive67.recursive = false;
        java.util.jar.Manifest manifest71 = explodedArchive67.manifest;
        java.io.File file72 = explodedArchive67.manifestFile;
        java.io.File file73 = null;
        java.io.File file74 = explodedArchive67.getManifestFile(file73);
        explodedArchive54.manifestFile = file74;
        java.io.File file76 = explodedArchive50.getManifestFile(file74);
        fileEntry47.file = file76;
        java.io.File file78 = fileEntry47.file;
        fileEntry47.name = "exploded archive";
        java.io.File file81 = fileEntry47.file;
        java.io.File file82 = fileEntry47.getFile();
        fileEntryIterator0.root = file82;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive84 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest85 = explodedArchive84.manifest;
        explodedArchive84.recursive = false;
        java.util.jar.Manifest manifest88 = explodedArchive84.manifest;
        java.io.File file89 = explodedArchive84.manifestFile;
        java.io.File file90 = null;
        java.io.File file91 = explodedArchive84.getManifestFile(file90);
        java.util.Iterator<java.io.File> fileItor92 = fileEntryIterator0.listFiles(file91);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file14.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file14.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file33.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file33.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file42.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file42.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file44.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file44.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file65.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file65.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file74.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file74.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file76);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file76.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file76.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file78);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file78.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file78.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file81);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file81.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file81.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file82);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file82.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file82.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest85);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest88);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file89);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file91);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file91.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file91.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor92);
    }

    @Test
    public void test1017() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1017");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file1 = explodedArchive0.root;
        java.io.File file2 = explodedArchive0.manifestFile;
        java.io.File file3 = explodedArchive0.root;
        java.util.jar.Manifest manifest4 = explodedArchive0.manifest;
        org.springframework.boot.loader.archive.Archive.EntryFilter entryFilter5 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<org.springframework.boot.loader.archive.Archive> archiveList6 = explodedArchive0.getNestedArchives(entryFilter5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest4);
    }

    @Test
    public void test1018() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1018");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest1 = explodedArchive0.manifest;
        java.util.jar.Manifest manifest2 = null;
        explodedArchive0.manifest = manifest2;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntry fileEntry4 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntry();
        java.lang.String str5 = fileEntry4.name;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator6 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file7 = null;
        fileEntryIterator6.current = file7;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive9 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest10 = explodedArchive9.manifest;
        explodedArchive9.recursive = false;
        java.util.jar.Manifest manifest13 = explodedArchive9.manifest;
        java.io.File file14 = explodedArchive9.manifestFile;
        java.io.File file15 = null;
        java.io.File file16 = explodedArchive9.getManifestFile(file15);
        java.util.Iterator<java.io.File> fileItor17 = fileEntryIterator6.listFiles(file16);
        java.io.File file18 = fileEntryIterator6.current;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator19 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file20 = null;
        fileEntryIterator19.current = file20;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive22 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest23 = explodedArchive22.manifest;
        explodedArchive22.recursive = false;
        java.util.jar.Manifest manifest26 = explodedArchive22.manifest;
        java.io.File file27 = explodedArchive22.manifestFile;
        java.io.File file28 = null;
        java.io.File file29 = explodedArchive22.getManifestFile(file28);
        java.util.Iterator<java.io.File> fileItor30 = fileEntryIterator19.listFiles(file29);
        java.util.ArrayDeque<java.util.Iterator<java.io.File>> fileItorQueue31 = new java.util.ArrayDeque<java.util.Iterator<java.io.File>>();
        boolean boolean32 = fileItorQueue31.add(fileItor30);
        fileEntryIterator6.stack = fileItorQueue31;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive34 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest35 = explodedArchive34.manifest;
        explodedArchive34.recursive = false;
        java.io.File file38 = null;
        explodedArchive34.root = file38;
        java.io.File file40 = explodedArchive34.root;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive41 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest42 = explodedArchive41.manifest;
        explodedArchive41.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive45 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest46 = explodedArchive45.manifest;
        explodedArchive45.recursive = false;
        java.util.jar.Manifest manifest49 = explodedArchive45.manifest;
        java.io.File file50 = explodedArchive45.manifestFile;
        java.io.File file51 = null;
        java.io.File file52 = explodedArchive45.getManifestFile(file51);
        explodedArchive41.manifestFile = file51;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive54 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest55 = explodedArchive54.manifest;
        explodedArchive54.recursive = false;
        java.util.jar.Manifest manifest58 = explodedArchive54.manifest;
        java.io.File file59 = explodedArchive54.manifestFile;
        java.io.File file60 = null;
        java.io.File file61 = explodedArchive54.getManifestFile(file60);
        explodedArchive41.manifestFile = file61;
        java.io.File file63 = explodedArchive34.getManifestFile(file61);
        fileEntryIterator6.root = file61;
        fileEntry4.file = file61;
        java.io.File file66 = explodedArchive0.getManifestFile(file61);
        java.util.jar.Manifest manifest67 = null;
        explodedArchive0.manifest = manifest67;
        boolean boolean69 = explodedArchive0.recursive;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file16.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file16.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file29.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file29.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file52.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file52.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file61.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file61.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file63.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file63.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file66.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file66.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
    }

    @Test
    public void test1019() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1019");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntry fileEntry0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntry();
        java.io.File file1 = fileEntry0.file;
        java.lang.String str2 = fileEntry0.name;
        fileEntry0.name = "";
        fileEntry0.name = "exploded archive";
        java.lang.String str7 = fileEntry0.getName();
        java.io.File file8 = fileEntry0.file;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str7 + "' != '" + "exploded archive" + "'", str7.equals("exploded archive"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file8);
    }

    @Test
    public void test1020() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1020");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest1 = explodedArchive0.manifest;
        explodedArchive0.recursive = false;
        java.util.jar.Manifest manifest4 = explodedArchive0.manifest;
        java.util.jar.Manifest manifest5 = null;
        explodedArchive0.manifest = manifest5;
        java.io.File file7 = explodedArchive0.root;
        org.springframework.boot.loader.archive.Archive.Entry entry8 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.springframework.boot.loader.archive.Archive archive9 = explodedArchive0.getNestedArchive(entry8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file7);
    }

    @Test
    public void test1021() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1021");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest1 = explodedArchive0.manifest;
        explodedArchive0.recursive = false;
        java.util.jar.Manifest manifest4 = explodedArchive0.manifest;
        java.util.jar.Manifest manifest5 = null;
        explodedArchive0.manifest = manifest5;
        java.io.File file7 = explodedArchive0.root;
        explodedArchive0.recursive = false;
        java.io.File file10 = null;
        explodedArchive0.manifestFile = file10;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file7);
    }

    @Test
    public void test1022() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1022");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest1 = explodedArchive0.manifest;
        java.util.jar.Manifest manifest2 = null;
        explodedArchive0.manifest = manifest2;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntry fileEntry4 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntry();
        java.lang.String str5 = fileEntry4.name;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator6 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file7 = null;
        fileEntryIterator6.current = file7;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive9 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest10 = explodedArchive9.manifest;
        explodedArchive9.recursive = false;
        java.util.jar.Manifest manifest13 = explodedArchive9.manifest;
        java.io.File file14 = explodedArchive9.manifestFile;
        java.io.File file15 = null;
        java.io.File file16 = explodedArchive9.getManifestFile(file15);
        java.util.Iterator<java.io.File> fileItor17 = fileEntryIterator6.listFiles(file16);
        java.io.File file18 = fileEntryIterator6.current;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator19 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file20 = null;
        fileEntryIterator19.current = file20;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive22 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest23 = explodedArchive22.manifest;
        explodedArchive22.recursive = false;
        java.util.jar.Manifest manifest26 = explodedArchive22.manifest;
        java.io.File file27 = explodedArchive22.manifestFile;
        java.io.File file28 = null;
        java.io.File file29 = explodedArchive22.getManifestFile(file28);
        java.util.Iterator<java.io.File> fileItor30 = fileEntryIterator19.listFiles(file29);
        java.util.ArrayDeque<java.util.Iterator<java.io.File>> fileItorQueue31 = new java.util.ArrayDeque<java.util.Iterator<java.io.File>>();
        boolean boolean32 = fileItorQueue31.add(fileItor30);
        fileEntryIterator6.stack = fileItorQueue31;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive34 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest35 = explodedArchive34.manifest;
        explodedArchive34.recursive = false;
        java.io.File file38 = null;
        explodedArchive34.root = file38;
        java.io.File file40 = explodedArchive34.root;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive41 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest42 = explodedArchive41.manifest;
        explodedArchive41.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive45 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest46 = explodedArchive45.manifest;
        explodedArchive45.recursive = false;
        java.util.jar.Manifest manifest49 = explodedArchive45.manifest;
        java.io.File file50 = explodedArchive45.manifestFile;
        java.io.File file51 = null;
        java.io.File file52 = explodedArchive45.getManifestFile(file51);
        explodedArchive41.manifestFile = file51;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive54 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest55 = explodedArchive54.manifest;
        explodedArchive54.recursive = false;
        java.util.jar.Manifest manifest58 = explodedArchive54.manifest;
        java.io.File file59 = explodedArchive54.manifestFile;
        java.io.File file60 = null;
        java.io.File file61 = explodedArchive54.getManifestFile(file60);
        explodedArchive41.manifestFile = file61;
        java.io.File file63 = explodedArchive34.getManifestFile(file61);
        fileEntryIterator6.root = file61;
        fileEntry4.file = file61;
        java.io.File file66 = explodedArchive0.getManifestFile(file61);
        java.util.jar.Manifest manifest67 = null;
        explodedArchive0.manifest = manifest67;
        java.io.File file69 = null;
        java.io.File file70 = explodedArchive0.getManifestFile(file69);
        java.io.File file71 = explodedArchive0.root;
        java.io.File file72 = explodedArchive0.manifestFile;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file16.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file16.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file29.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file29.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file52.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file52.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file61.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file61.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file63.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file63.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file66.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file66.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file70.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file70.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file72);
    }

    @Test
    public void test1023() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1023");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest1 = explodedArchive0.manifest;
        explodedArchive0.recursive = false;
        java.io.File file4 = null;
        explodedArchive0.root = file4;
        java.io.File file6 = explodedArchive0.manifestFile;
        java.io.File file7 = explodedArchive0.manifestFile;
        java.io.File file8 = explodedArchive0.manifestFile;
        explodedArchive0.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntry fileEntry11 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntry();
        java.lang.String str12 = fileEntry11.getName();
        java.io.File file13 = fileEntry11.getFile();
        java.lang.String str14 = fileEntry11.getName();
        java.lang.String str15 = fileEntry11.getName();
        java.lang.String str16 = fileEntry11.name;
        // The following exception was thrown during execution in test generation
        try {
            org.springframework.boot.loader.archive.Archive archive17 = explodedArchive0.getNestedArchive((org.springframework.boot.loader.archive.Archive.Entry) fileEntry11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str16);
    }

    @Test
    public void test1024() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1024");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file1 = explodedArchive0.root;
        java.io.File file2 = explodedArchive0.manifestFile;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntry fileEntry3 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntry();
        java.lang.String str4 = fileEntry3.getName();
        java.lang.String str5 = fileEntry3.getName();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator6 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator7 = entryComparator6.reversed();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive8 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file9 = explodedArchive8.root;
        java.io.File file10 = null;
        explodedArchive8.manifestFile = file10;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive12 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest13 = explodedArchive12.manifest;
        explodedArchive12.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive16 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest17 = explodedArchive16.manifest;
        explodedArchive16.recursive = false;
        java.util.jar.Manifest manifest20 = explodedArchive16.manifest;
        java.io.File file21 = explodedArchive16.manifestFile;
        java.io.File file22 = null;
        java.io.File file23 = explodedArchive16.getManifestFile(file22);
        explodedArchive12.manifestFile = file22;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive25 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest26 = explodedArchive25.manifest;
        explodedArchive25.recursive = false;
        java.util.jar.Manifest manifest29 = explodedArchive25.manifest;
        java.io.File file30 = explodedArchive25.manifestFile;
        java.io.File file31 = null;
        java.io.File file32 = explodedArchive25.getManifestFile(file31);
        explodedArchive12.manifestFile = file32;
        java.io.File file34 = explodedArchive8.getManifestFile(file32);
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive35 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest36 = explodedArchive35.manifest;
        explodedArchive35.recursive = false;
        java.io.File file39 = null;
        explodedArchive35.root = file39;
        java.io.File file41 = explodedArchive35.root;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive42 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest43 = explodedArchive42.manifest;
        explodedArchive42.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive46 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest47 = explodedArchive46.manifest;
        explodedArchive46.recursive = false;
        java.util.jar.Manifest manifest50 = explodedArchive46.manifest;
        java.io.File file51 = explodedArchive46.manifestFile;
        java.io.File file52 = null;
        java.io.File file53 = explodedArchive46.getManifestFile(file52);
        explodedArchive42.manifestFile = file52;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive55 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest56 = explodedArchive55.manifest;
        explodedArchive55.recursive = false;
        java.util.jar.Manifest manifest59 = explodedArchive55.manifest;
        java.io.File file60 = explodedArchive55.manifestFile;
        java.io.File file61 = null;
        java.io.File file62 = explodedArchive55.getManifestFile(file61);
        explodedArchive42.manifestFile = file62;
        java.io.File file64 = explodedArchive35.getManifestFile(file62);
        int int65 = entryComparator6.compare(file34, file62);
        fileEntry3.file = file62;
        java.io.File file67 = fileEntry3.getFile();
        explodedArchive0.root = file67;
        org.springframework.boot.loader.archive.Archive.EntryFilter entryFilter69 = null;
        java.util.List<org.springframework.boot.loader.archive.Archive> archiveList70 = explodedArchive0.getNestedArchives(entryFilter69);
        explodedArchive0.recursive = false;
        // The following exception was thrown during execution in test generation
        try {
            java.util.jar.Manifest manifest73 = explodedArchive0.getManifest();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file23.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file23.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file32.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file32.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file34.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file34.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file53.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file53.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file62.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file62.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file64.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file64.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 21 + "'", int65 == 21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file67.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file67.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(archiveList70);
    }

    @Test
    public void test1025() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1025");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        boolean boolean1 = fileEntryIterator0.recursive;
        java.io.File file2 = fileEntryIterator0.current;
        java.util.Deque<java.util.Iterator<java.io.File>> fileItorQueue3 = fileEntryIterator0.stack;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItorQueue3);
    }

    @Test
    public void test1026() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1026");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntry fileEntry0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntry();
        java.io.File file1 = fileEntry0.getFile();
        java.io.File file2 = fileEntry0.getFile();
        java.lang.String str3 = fileEntry0.name;
        fileEntry0.name = "";
        java.io.File file6 = fileEntry0.file;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive7 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest8 = explodedArchive7.manifest;
        explodedArchive7.recursive = false;
        java.util.jar.Manifest manifest11 = explodedArchive7.manifest;
        java.io.File file12 = explodedArchive7.manifestFile;
        java.io.File file13 = null;
        java.io.File file14 = explodedArchive7.getManifestFile(file13);
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive15 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest16 = explodedArchive15.manifest;
        explodedArchive15.recursive = false;
        java.io.File file19 = null;
        explodedArchive15.root = file19;
        java.io.File file21 = explodedArchive15.manifestFile;
        java.io.File file22 = explodedArchive15.manifestFile;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator23 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator24 = entryComparator23.reversed();
        java.util.Comparator<java.io.File> fileComparator25 = entryComparator23.reversed();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive26 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest27 = explodedArchive26.manifest;
        explodedArchive26.recursive = false;
        java.util.jar.Manifest manifest30 = explodedArchive26.manifest;
        java.io.File file31 = explodedArchive26.manifestFile;
        java.io.File file32 = null;
        java.io.File file33 = explodedArchive26.getManifestFile(file32);
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive34 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest35 = explodedArchive34.manifest;
        explodedArchive34.recursive = false;
        java.io.File file38 = null;
        explodedArchive34.root = file38;
        java.io.File file40 = explodedArchive34.root;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive41 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest42 = explodedArchive41.manifest;
        explodedArchive41.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive45 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest46 = explodedArchive45.manifest;
        explodedArchive45.recursive = false;
        java.util.jar.Manifest manifest49 = explodedArchive45.manifest;
        java.io.File file50 = explodedArchive45.manifestFile;
        java.io.File file51 = null;
        java.io.File file52 = explodedArchive45.getManifestFile(file51);
        explodedArchive41.manifestFile = file51;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive54 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest55 = explodedArchive54.manifest;
        explodedArchive54.recursive = false;
        java.util.jar.Manifest manifest58 = explodedArchive54.manifest;
        java.io.File file59 = explodedArchive54.manifestFile;
        java.io.File file60 = null;
        java.io.File file61 = explodedArchive54.getManifestFile(file60);
        explodedArchive41.manifestFile = file61;
        java.io.File file63 = explodedArchive34.getManifestFile(file61);
        int int64 = entryComparator23.compare(file33, file61);
        explodedArchive15.root = file61;
        java.io.File file66 = explodedArchive7.getManifestFile(file61);
        fileEntry0.file = file61;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file14.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file14.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file33.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file33.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file52.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file52.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file61.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file61.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file63.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file63.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file66.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file66.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
    }

    @Test
    public void test1027() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1027");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntry fileEntry0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntry();
        java.lang.String str1 = fileEntry0.name;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator2 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file3 = null;
        fileEntryIterator2.current = file3;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive5 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.lang.String str6 = explodedArchive5.toString();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive7 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file8 = explodedArchive7.root;
        java.io.File file9 = null;
        explodedArchive7.manifestFile = file9;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive11 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest12 = explodedArchive11.manifest;
        explodedArchive11.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive15 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest16 = explodedArchive15.manifest;
        explodedArchive15.recursive = false;
        java.util.jar.Manifest manifest19 = explodedArchive15.manifest;
        java.io.File file20 = explodedArchive15.manifestFile;
        java.io.File file21 = null;
        java.io.File file22 = explodedArchive15.getManifestFile(file21);
        explodedArchive11.manifestFile = file21;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive24 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest25 = explodedArchive24.manifest;
        explodedArchive24.recursive = false;
        java.util.jar.Manifest manifest28 = explodedArchive24.manifest;
        java.io.File file29 = explodedArchive24.manifestFile;
        java.io.File file30 = null;
        java.io.File file31 = explodedArchive24.getManifestFile(file30);
        explodedArchive11.manifestFile = file31;
        java.io.File file33 = explodedArchive7.getManifestFile(file31);
        java.io.File file34 = explodedArchive5.getManifestFile(file31);
        fileEntryIterator2.root = file31;
        fileEntry0.file = file31;
        java.io.File file37 = fileEntry0.file;
        fileEntry0.name = "hi!";
        fileEntry0.name = "hi!";
        java.lang.String str42 = fileEntry0.name;
        java.lang.String str43 = fileEntry0.name;
        fileEntry0.name = "exploded archive";
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "exploded archive" + "'", str6.equals("exploded archive"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file22.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file22.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file31.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file31.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file33.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file33.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file34.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file34.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file37.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file37.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str42 + "' != '" + "hi!" + "'", str42.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str43 + "' != '" + "hi!" + "'", str43.equals("hi!"));
    }

    @Test
    public void test1028() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1028");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file1 = null;
        fileEntryIterator0.current = file1;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive3 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest4 = explodedArchive3.manifest;
        explodedArchive3.recursive = false;
        java.util.jar.Manifest manifest7 = explodedArchive3.manifest;
        java.io.File file8 = explodedArchive3.manifestFile;
        java.io.File file9 = null;
        java.io.File file10 = explodedArchive3.getManifestFile(file9);
        java.util.Iterator<java.io.File> fileItor11 = fileEntryIterator0.listFiles(file10);
        java.io.File file12 = fileEntryIterator0.root;
        java.io.File file13 = fileEntryIterator0.root;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive14 = new org.springframework.boot.loader.archive.ExplodedArchive();
        boolean boolean15 = explodedArchive14.recursive;
        boolean boolean16 = explodedArchive14.recursive;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive17 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file18 = explodedArchive17.root;
        java.io.File file19 = null;
        explodedArchive17.manifestFile = file19;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive21 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest22 = explodedArchive21.manifest;
        explodedArchive21.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive25 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest26 = explodedArchive25.manifest;
        explodedArchive25.recursive = false;
        java.util.jar.Manifest manifest29 = explodedArchive25.manifest;
        java.io.File file30 = explodedArchive25.manifestFile;
        java.io.File file31 = null;
        java.io.File file32 = explodedArchive25.getManifestFile(file31);
        explodedArchive21.manifestFile = file31;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive34 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest35 = explodedArchive34.manifest;
        explodedArchive34.recursive = false;
        java.util.jar.Manifest manifest38 = explodedArchive34.manifest;
        java.io.File file39 = explodedArchive34.manifestFile;
        java.io.File file40 = null;
        java.io.File file41 = explodedArchive34.getManifestFile(file40);
        explodedArchive21.manifestFile = file41;
        java.io.File file43 = explodedArchive17.getManifestFile(file41);
        explodedArchive14.manifestFile = file41;
        fileEntryIterator0.current = file41;
        java.io.File file46 = fileEntryIterator0.current;
        java.io.File file47 = fileEntryIterator0.current;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file32.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file32.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file41.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file41.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file43.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file43.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file46.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file46.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file47.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file47.toString(), "META-INF/MANIFEST.MF");
    }

    @Test
    public void test1029() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1029");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntry fileEntry0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntry();
        java.lang.String str1 = fileEntry0.getName();
        java.io.File file2 = fileEntry0.getFile();
        java.lang.String str3 = fileEntry0.getName();
        java.lang.String str4 = fileEntry0.getName();
        java.lang.String str5 = fileEntry0.name;
        java.io.File file6 = fileEntry0.getFile();
        java.io.File file7 = fileEntry0.file;
        java.lang.String str8 = fileEntry0.getName();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str8);
    }

    @Test
    public void test1030() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1030");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest1 = explodedArchive0.manifest;
        explodedArchive0.recursive = false;
        java.io.File file4 = null;
        explodedArchive0.root = file4;
        java.io.File file6 = explodedArchive0.manifestFile;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive7 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file8 = explodedArchive7.root;
        java.io.File file9 = null;
        explodedArchive7.manifestFile = file9;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive11 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest12 = explodedArchive11.manifest;
        explodedArchive11.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive15 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest16 = explodedArchive15.manifest;
        explodedArchive15.recursive = false;
        java.util.jar.Manifest manifest19 = explodedArchive15.manifest;
        java.io.File file20 = explodedArchive15.manifestFile;
        java.io.File file21 = null;
        java.io.File file22 = explodedArchive15.getManifestFile(file21);
        explodedArchive11.manifestFile = file21;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive24 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest25 = explodedArchive24.manifest;
        explodedArchive24.recursive = false;
        java.util.jar.Manifest manifest28 = explodedArchive24.manifest;
        java.io.File file29 = explodedArchive24.manifestFile;
        java.io.File file30 = null;
        java.io.File file31 = explodedArchive24.getManifestFile(file30);
        explodedArchive11.manifestFile = file31;
        java.io.File file33 = explodedArchive7.getManifestFile(file31);
        java.io.File file34 = explodedArchive7.root;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator35 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        boolean boolean36 = fileEntryIterator35.hasNext();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator37 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator38 = entryComparator37.reversed();
        java.util.Comparator<java.io.File> fileComparator39 = fileComparator38.reversed();
        fileEntryIterator35.entryComparator = fileComparator39;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive41 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file42 = explodedArchive41.root;
        java.io.File file43 = null;
        explodedArchive41.manifestFile = file43;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive45 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest46 = explodedArchive45.manifest;
        explodedArchive45.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive49 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest50 = explodedArchive49.manifest;
        explodedArchive49.recursive = false;
        java.util.jar.Manifest manifest53 = explodedArchive49.manifest;
        java.io.File file54 = explodedArchive49.manifestFile;
        java.io.File file55 = null;
        java.io.File file56 = explodedArchive49.getManifestFile(file55);
        explodedArchive45.manifestFile = file55;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive58 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest59 = explodedArchive58.manifest;
        explodedArchive58.recursive = false;
        java.util.jar.Manifest manifest62 = explodedArchive58.manifest;
        java.io.File file63 = explodedArchive58.manifestFile;
        java.io.File file64 = null;
        java.io.File file65 = explodedArchive58.getManifestFile(file64);
        explodedArchive45.manifestFile = file65;
        java.io.File file67 = explodedArchive41.getManifestFile(file65);
        java.util.Iterator<java.io.File> fileItor68 = fileEntryIterator35.listFiles(file67);
        explodedArchive7.manifestFile = file67;
        java.io.File file70 = explodedArchive7.manifestFile;
        java.io.File file71 = explodedArchive0.getManifestFile(file70);
        java.io.File file72 = explodedArchive0.root;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file22.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file22.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file31.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file31.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file33.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file33.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file56.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file56.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file65.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file65.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file67.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file67.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file70.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file70.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file71.getParent(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file71.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file72);
    }

    @Test
    public void test1031() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1031");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file1 = null;
        fileEntryIterator0.current = file1;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive3 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.lang.String str4 = explodedArchive3.toString();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive5 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file6 = explodedArchive5.root;
        java.io.File file7 = null;
        explodedArchive5.manifestFile = file7;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive9 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest10 = explodedArchive9.manifest;
        explodedArchive9.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive13 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest14 = explodedArchive13.manifest;
        explodedArchive13.recursive = false;
        java.util.jar.Manifest manifest17 = explodedArchive13.manifest;
        java.io.File file18 = explodedArchive13.manifestFile;
        java.io.File file19 = null;
        java.io.File file20 = explodedArchive13.getManifestFile(file19);
        explodedArchive9.manifestFile = file19;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive22 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest23 = explodedArchive22.manifest;
        explodedArchive22.recursive = false;
        java.util.jar.Manifest manifest26 = explodedArchive22.manifest;
        java.io.File file27 = explodedArchive22.manifestFile;
        java.io.File file28 = null;
        java.io.File file29 = explodedArchive22.getManifestFile(file28);
        explodedArchive9.manifestFile = file29;
        java.io.File file31 = explodedArchive5.getManifestFile(file29);
        java.io.File file32 = explodedArchive3.getManifestFile(file29);
        fileEntryIterator0.root = file29;
        java.io.File file34 = fileEntryIterator0.poll();
        java.util.Comparator<java.io.File> fileComparator35 = fileEntryIterator0.entryComparator;
        java.util.Deque<java.util.Iterator<java.io.File>> fileItorQueue36 = fileEntryIterator0.stack;
        java.io.File file37 = fileEntryIterator0.current;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator38 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file39 = null;
        fileEntryIterator38.current = file39;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive41 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest42 = explodedArchive41.manifest;
        explodedArchive41.recursive = false;
        java.util.jar.Manifest manifest45 = explodedArchive41.manifest;
        java.io.File file46 = explodedArchive41.manifestFile;
        java.io.File file47 = null;
        java.io.File file48 = explodedArchive41.getManifestFile(file47);
        java.util.Iterator<java.io.File> fileItor49 = fileEntryIterator38.listFiles(file48);
        java.io.File file50 = fileEntryIterator38.root;
        java.io.File file51 = fileEntryIterator38.root;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator52 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file53 = null;
        fileEntryIterator52.current = file53;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive55 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest56 = explodedArchive55.manifest;
        explodedArchive55.recursive = false;
        java.util.jar.Manifest manifest59 = explodedArchive55.manifest;
        java.io.File file60 = explodedArchive55.manifestFile;
        java.io.File file61 = null;
        java.io.File file62 = explodedArchive55.getManifestFile(file61);
        java.util.Iterator<java.io.File> fileItor63 = fileEntryIterator52.listFiles(file62);
        java.util.ArrayDeque<java.util.Iterator<java.io.File>> fileItorQueue64 = new java.util.ArrayDeque<java.util.Iterator<java.io.File>>();
        boolean boolean65 = fileItorQueue64.add(fileItor63);
        fileEntryIterator38.stack = fileItorQueue64;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator67 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file68 = null;
        fileEntryIterator67.current = file68;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive70 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest71 = explodedArchive70.manifest;
        explodedArchive70.recursive = false;
        java.util.jar.Manifest manifest74 = explodedArchive70.manifest;
        java.io.File file75 = explodedArchive70.manifestFile;
        java.io.File file76 = null;
        java.io.File file77 = explodedArchive70.getManifestFile(file76);
        java.util.Iterator<java.io.File> fileItor78 = fileEntryIterator67.listFiles(file77);
        java.io.File file79 = fileEntryIterator67.root;
        java.io.File file80 = fileEntryIterator67.root;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator81 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file82 = null;
        fileEntryIterator81.current = file82;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive84 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest85 = explodedArchive84.manifest;
        explodedArchive84.recursive = false;
        java.util.jar.Manifest manifest88 = explodedArchive84.manifest;
        java.io.File file89 = explodedArchive84.manifestFile;
        java.io.File file90 = null;
        java.io.File file91 = explodedArchive84.getManifestFile(file90);
        java.util.Iterator<java.io.File> fileItor92 = fileEntryIterator81.listFiles(file91);
        java.util.ArrayDeque<java.util.Iterator<java.io.File>> fileItorQueue93 = new java.util.ArrayDeque<java.util.Iterator<java.io.File>>();
        boolean boolean94 = fileItorQueue93.add(fileItor92);
        fileEntryIterator67.stack = fileItorQueue93;
        fileEntryIterator38.stack = fileItorQueue93;
        boolean boolean97 = fileEntryIterator38.recursive;
        java.util.Deque<java.util.Iterator<java.io.File>> fileItorQueue98 = fileEntryIterator38.stack;
        fileEntryIterator0.stack = fileItorQueue98;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str4 + "' != '" + "exploded archive" + "'", str4.equals("exploded archive"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file20.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file20.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file29.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file29.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file31.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file31.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file32.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file32.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItorQueue36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file48.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file48.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file62.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file62.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file75);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file77);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file77.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file77.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor78);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file79);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file80);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest85);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest88);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file89);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file91);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file91.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file91.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor92);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + true + "'", boolean94 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItorQueue98);
    }

    @Test
    public void test1032() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1032");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest1 = explodedArchive0.manifest;
        explodedArchive0.recursive = false;
        java.io.File file4 = null;
        explodedArchive0.root = file4;
        java.io.File file6 = explodedArchive0.root;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive7 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest8 = explodedArchive7.manifest;
        explodedArchive7.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive11 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest12 = explodedArchive11.manifest;
        explodedArchive11.recursive = false;
        java.util.jar.Manifest manifest15 = explodedArchive11.manifest;
        java.io.File file16 = explodedArchive11.manifestFile;
        java.io.File file17 = null;
        java.io.File file18 = explodedArchive11.getManifestFile(file17);
        explodedArchive7.manifestFile = file17;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive20 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest21 = explodedArchive20.manifest;
        explodedArchive20.recursive = false;
        java.util.jar.Manifest manifest24 = explodedArchive20.manifest;
        java.io.File file25 = explodedArchive20.manifestFile;
        java.io.File file26 = null;
        java.io.File file27 = explodedArchive20.getManifestFile(file26);
        explodedArchive7.manifestFile = file27;
        java.io.File file29 = explodedArchive0.getManifestFile(file27);
        java.io.File file30 = explodedArchive0.root;
        java.util.jar.Manifest manifest31 = null;
        explodedArchive0.manifest = manifest31;
        boolean boolean33 = explodedArchive0.recursive;
        org.springframework.boot.loader.archive.Archive.EntryFilter entryFilter34 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<org.springframework.boot.loader.archive.Archive> archiveList35 = explodedArchive0.getNestedArchives(entryFilter34);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file18.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file18.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file27.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file27.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file29.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file29.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
    }

    @Test
    public void test1033() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1033");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator1 = entryComparator0.reversed();
        java.util.Comparator<java.io.File> fileComparator2 = entryComparator0.reversed();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator3 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        boolean boolean4 = fileEntryIterator3.hasNext();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator5 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator6 = entryComparator5.reversed();
        java.util.Comparator<java.io.File> fileComparator7 = fileComparator6.reversed();
        fileEntryIterator3.entryComparator = fileComparator7;
        java.util.Comparator<java.io.File> fileComparator9 = fileEntryIterator3.entryComparator;
        java.util.Comparator<java.io.File> fileComparator10 = entryComparator0.thenComparing(fileComparator9);
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator11 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file12 = null;
        fileEntryIterator11.current = file12;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive14 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest15 = explodedArchive14.manifest;
        explodedArchive14.recursive = false;
        java.util.jar.Manifest manifest18 = explodedArchive14.manifest;
        java.io.File file19 = explodedArchive14.manifestFile;
        java.io.File file20 = null;
        java.io.File file21 = explodedArchive14.getManifestFile(file20);
        java.util.Iterator<java.io.File> fileItor22 = fileEntryIterator11.listFiles(file21);
        java.io.File file23 = fileEntryIterator11.root;
        java.io.File file24 = fileEntryIterator11.poll();
        java.util.Comparator<java.io.File> fileComparator25 = fileEntryIterator11.entryComparator;
        java.util.Deque<java.util.Iterator<java.io.File>> fileItorQueue26 = fileEntryIterator11.stack;
        java.util.Deque<java.util.Iterator<java.io.File>> fileItorQueue27 = fileEntryIterator11.stack;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntry fileEntry28 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntry();
        java.lang.String str29 = fileEntry28.name;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator30 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file31 = null;
        fileEntryIterator30.current = file31;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive33 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.lang.String str34 = explodedArchive33.toString();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive35 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file36 = explodedArchive35.root;
        java.io.File file37 = null;
        explodedArchive35.manifestFile = file37;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive39 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest40 = explodedArchive39.manifest;
        explodedArchive39.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive43 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest44 = explodedArchive43.manifest;
        explodedArchive43.recursive = false;
        java.util.jar.Manifest manifest47 = explodedArchive43.manifest;
        java.io.File file48 = explodedArchive43.manifestFile;
        java.io.File file49 = null;
        java.io.File file50 = explodedArchive43.getManifestFile(file49);
        explodedArchive39.manifestFile = file49;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive52 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest53 = explodedArchive52.manifest;
        explodedArchive52.recursive = false;
        java.util.jar.Manifest manifest56 = explodedArchive52.manifest;
        java.io.File file57 = explodedArchive52.manifestFile;
        java.io.File file58 = null;
        java.io.File file59 = explodedArchive52.getManifestFile(file58);
        explodedArchive39.manifestFile = file59;
        java.io.File file61 = explodedArchive35.getManifestFile(file59);
        java.io.File file62 = explodedArchive33.getManifestFile(file59);
        fileEntryIterator30.root = file59;
        fileEntry28.file = file59;
        java.util.Iterator<java.io.File> fileItor65 = fileEntryIterator11.listFiles(file59);
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive66 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.lang.String str67 = explodedArchive66.toString();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive68 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file69 = explodedArchive68.root;
        java.io.File file70 = null;
        explodedArchive68.manifestFile = file70;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive72 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest73 = explodedArchive72.manifest;
        explodedArchive72.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive76 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest77 = explodedArchive76.manifest;
        explodedArchive76.recursive = false;
        java.util.jar.Manifest manifest80 = explodedArchive76.manifest;
        java.io.File file81 = explodedArchive76.manifestFile;
        java.io.File file82 = null;
        java.io.File file83 = explodedArchive76.getManifestFile(file82);
        explodedArchive72.manifestFile = file82;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive85 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest86 = explodedArchive85.manifest;
        explodedArchive85.recursive = false;
        java.util.jar.Manifest manifest89 = explodedArchive85.manifest;
        java.io.File file90 = explodedArchive85.manifestFile;
        java.io.File file91 = null;
        java.io.File file92 = explodedArchive85.getManifestFile(file91);
        explodedArchive72.manifestFile = file92;
        java.io.File file94 = explodedArchive68.getManifestFile(file92);
        java.io.File file95 = explodedArchive66.getManifestFile(file92);
        int int96 = entryComparator0.compare(file59, file95);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file21.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file21.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItorQueue26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItorQueue27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str34 + "' != '" + "exploded archive" + "'", str34.equals("exploded archive"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file50.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file50.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file59.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file59.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file61.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file61.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file62.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file62.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str67 + "' != '" + "exploded archive" + "'", str67.equals("exploded archive"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest73);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest77);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest80);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file81);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file83);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file83.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file83.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest86);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest89);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file90);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file92);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file92.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file92.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file94);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file94.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file94.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file95);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file95.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file95.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + (-21) + "'", int96 == (-21));
    }

    @Test
    public void test1034() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1034");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        boolean boolean1 = fileEntryIterator0.recursive;
        java.io.File file2 = fileEntryIterator0.current;
        boolean boolean3 = fileEntryIterator0.hasNext();
        boolean boolean4 = fileEntryIterator0.recursive;
        fileEntryIterator0.recursive = false;
        java.util.Comparator<java.io.File> fileComparator7 = fileEntryIterator0.entryComparator;
        java.io.File file8 = fileEntryIterator0.poll();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntry fileEntry9 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntry();
        java.lang.String str10 = fileEntry9.name;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator11 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file12 = null;
        fileEntryIterator11.current = file12;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive14 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.lang.String str15 = explodedArchive14.toString();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive16 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file17 = explodedArchive16.root;
        java.io.File file18 = null;
        explodedArchive16.manifestFile = file18;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive20 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest21 = explodedArchive20.manifest;
        explodedArchive20.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive24 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest25 = explodedArchive24.manifest;
        explodedArchive24.recursive = false;
        java.util.jar.Manifest manifest28 = explodedArchive24.manifest;
        java.io.File file29 = explodedArchive24.manifestFile;
        java.io.File file30 = null;
        java.io.File file31 = explodedArchive24.getManifestFile(file30);
        explodedArchive20.manifestFile = file30;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive33 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest34 = explodedArchive33.manifest;
        explodedArchive33.recursive = false;
        java.util.jar.Manifest manifest37 = explodedArchive33.manifest;
        java.io.File file38 = explodedArchive33.manifestFile;
        java.io.File file39 = null;
        java.io.File file40 = explodedArchive33.getManifestFile(file39);
        explodedArchive20.manifestFile = file40;
        java.io.File file42 = explodedArchive16.getManifestFile(file40);
        java.io.File file43 = explodedArchive14.getManifestFile(file40);
        fileEntryIterator11.root = file40;
        fileEntry9.file = file40;
        java.io.File file46 = fileEntry9.file;
        java.lang.String str47 = fileEntry9.name;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive48 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest49 = explodedArchive48.manifest;
        explodedArchive48.recursive = false;
        java.io.File file52 = null;
        explodedArchive48.root = file52;
        java.io.File file54 = explodedArchive48.manifestFile;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive55 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file56 = explodedArchive55.root;
        java.io.File file57 = null;
        explodedArchive55.manifestFile = file57;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive59 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest60 = explodedArchive59.manifest;
        explodedArchive59.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive63 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest64 = explodedArchive63.manifest;
        explodedArchive63.recursive = false;
        java.util.jar.Manifest manifest67 = explodedArchive63.manifest;
        java.io.File file68 = explodedArchive63.manifestFile;
        java.io.File file69 = null;
        java.io.File file70 = explodedArchive63.getManifestFile(file69);
        explodedArchive59.manifestFile = file69;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive72 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest73 = explodedArchive72.manifest;
        explodedArchive72.recursive = false;
        java.util.jar.Manifest manifest76 = explodedArchive72.manifest;
        java.io.File file77 = explodedArchive72.manifestFile;
        java.io.File file78 = null;
        java.io.File file79 = explodedArchive72.getManifestFile(file78);
        explodedArchive59.manifestFile = file79;
        java.io.File file81 = explodedArchive55.getManifestFile(file79);
        java.io.File file82 = explodedArchive48.getManifestFile(file79);
        fileEntry9.file = file79;
        fileEntryIterator0.current = file79;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str15 + "' != '" + "exploded archive" + "'", str15.equals("exploded archive"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file31.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file31.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file40.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file40.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file42.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file42.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file43.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file43.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file46.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file46.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file70.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file70.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest73);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest76);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file77);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file79);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file79.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file79.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file81);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file81.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file81.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file82);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file82.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file82.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
    }

    @Test
    public void test1035() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1035");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        boolean boolean1 = fileEntryIterator0.recursive;
        java.io.File file2 = fileEntryIterator0.current;
        boolean boolean3 = fileEntryIterator0.hasNext();
        boolean boolean4 = fileEntryIterator0.recursive;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator5 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator6 = entryComparator5.reversed();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator7 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator8 = entryComparator7.reversed();
        java.util.Comparator<java.io.File> fileComparator9 = entryComparator5.thenComparing(fileComparator8);
        fileEntryIterator0.entryComparator = fileComparator9;
        java.io.File file11 = fileEntryIterator0.current;
        fileEntryIterator0.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator14 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file15 = null;
        fileEntryIterator14.current = file15;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive17 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest18 = explodedArchive17.manifest;
        explodedArchive17.recursive = false;
        java.util.jar.Manifest manifest21 = explodedArchive17.manifest;
        java.io.File file22 = explodedArchive17.manifestFile;
        java.io.File file23 = null;
        java.io.File file24 = explodedArchive17.getManifestFile(file23);
        java.util.Iterator<java.io.File> fileItor25 = fileEntryIterator14.listFiles(file24);
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator26 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file27 = null;
        fileEntryIterator26.current = file27;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive29 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest30 = explodedArchive29.manifest;
        explodedArchive29.recursive = false;
        java.util.jar.Manifest manifest33 = explodedArchive29.manifest;
        java.io.File file34 = explodedArchive29.manifestFile;
        java.io.File file35 = null;
        java.io.File file36 = explodedArchive29.getManifestFile(file35);
        java.util.Iterator<java.io.File> fileItor37 = fileEntryIterator26.listFiles(file36);
        java.io.File file38 = fileEntryIterator26.current;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator39 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file40 = null;
        fileEntryIterator39.current = file40;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive42 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest43 = explodedArchive42.manifest;
        explodedArchive42.recursive = false;
        java.util.jar.Manifest manifest46 = explodedArchive42.manifest;
        java.io.File file47 = explodedArchive42.manifestFile;
        java.io.File file48 = null;
        java.io.File file49 = explodedArchive42.getManifestFile(file48);
        java.util.Iterator<java.io.File> fileItor50 = fileEntryIterator39.listFiles(file49);
        java.util.ArrayDeque<java.util.Iterator<java.io.File>> fileItorQueue51 = new java.util.ArrayDeque<java.util.Iterator<java.io.File>>();
        boolean boolean52 = fileItorQueue51.add(fileItor50);
        fileEntryIterator26.stack = fileItorQueue51;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive54 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest55 = explodedArchive54.manifest;
        explodedArchive54.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive58 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest59 = explodedArchive58.manifest;
        explodedArchive58.recursive = false;
        java.util.jar.Manifest manifest62 = explodedArchive58.manifest;
        java.io.File file63 = explodedArchive58.manifestFile;
        java.io.File file64 = null;
        java.io.File file65 = explodedArchive58.getManifestFile(file64);
        explodedArchive54.manifestFile = file64;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive67 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest68 = explodedArchive67.manifest;
        explodedArchive67.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive71 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest72 = explodedArchive71.manifest;
        explodedArchive71.recursive = false;
        java.util.jar.Manifest manifest75 = explodedArchive71.manifest;
        java.io.File file76 = explodedArchive71.manifestFile;
        java.io.File file77 = null;
        java.io.File file78 = explodedArchive71.getManifestFile(file77);
        explodedArchive67.manifestFile = file77;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive80 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest81 = explodedArchive80.manifest;
        explodedArchive80.recursive = false;
        java.util.jar.Manifest manifest84 = explodedArchive80.manifest;
        java.io.File file85 = explodedArchive80.manifestFile;
        java.io.File file86 = null;
        java.io.File file87 = explodedArchive80.getManifestFile(file86);
        explodedArchive67.manifestFile = file87;
        explodedArchive54.root = file87;
        java.util.Iterator<java.io.File> fileItor90 = fileEntryIterator26.listFiles(file87);
        java.util.Comparator<java.io.File> fileComparator91 = fileEntryIterator26.entryComparator;
        fileEntryIterator14.entryComparator = fileComparator91;
        fileEntryIterator0.entryComparator = fileComparator91;
        fileEntryIterator0.recursive = true;
        boolean boolean96 = fileEntryIterator0.hasNext();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file24.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file24.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file36.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file36.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file49.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file49.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file65.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file65.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest75);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file76);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file78);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file78.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file78.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest81);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest84);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file85);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file87);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file87.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file87.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor90);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator91);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
    }

    @Test
    public void test1036() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1036");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        boolean boolean1 = fileEntryIterator0.hasNext();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator2 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator3 = entryComparator2.reversed();
        java.util.Comparator<java.io.File> fileComparator4 = fileComparator3.reversed();
        fileEntryIterator0.entryComparator = fileComparator4;
        java.util.Comparator<java.io.File> fileComparator6 = fileEntryIterator0.entryComparator;
        java.io.File file7 = fileEntryIterator0.current;
        java.util.Comparator<java.io.File> fileComparator8 = fileEntryIterator0.entryComparator;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive9 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest10 = explodedArchive9.manifest;
        explodedArchive9.recursive = false;
        java.io.File file13 = null;
        explodedArchive9.root = file13;
        java.io.File file15 = explodedArchive9.root;
        java.util.jar.Manifest manifest16 = null;
        explodedArchive9.manifest = manifest16;
        explodedArchive9.recursive = false;
        java.util.jar.Manifest manifest20 = null;
        explodedArchive9.manifest = manifest20;
        java.lang.String str22 = explodedArchive9.toString();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive23 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.lang.String str24 = explodedArchive23.toString();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive25 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file26 = explodedArchive25.root;
        java.io.File file27 = null;
        explodedArchive25.manifestFile = file27;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive29 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest30 = explodedArchive29.manifest;
        explodedArchive29.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive33 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest34 = explodedArchive33.manifest;
        explodedArchive33.recursive = false;
        java.util.jar.Manifest manifest37 = explodedArchive33.manifest;
        java.io.File file38 = explodedArchive33.manifestFile;
        java.io.File file39 = null;
        java.io.File file40 = explodedArchive33.getManifestFile(file39);
        explodedArchive29.manifestFile = file39;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive42 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest43 = explodedArchive42.manifest;
        explodedArchive42.recursive = false;
        java.util.jar.Manifest manifest46 = explodedArchive42.manifest;
        java.io.File file47 = explodedArchive42.manifestFile;
        java.io.File file48 = null;
        java.io.File file49 = explodedArchive42.getManifestFile(file48);
        explodedArchive29.manifestFile = file49;
        java.io.File file51 = explodedArchive25.getManifestFile(file49);
        java.io.File file52 = explodedArchive23.getManifestFile(file49);
        java.io.File file53 = explodedArchive9.getManifestFile(file49);
        fileEntryIterator0.current = file53;
        java.io.File file55 = fileEntryIterator0.poll();
        boolean boolean56 = fileEntryIterator0.recursive;
        // The following exception was thrown during execution in test generation
        try {
            fileEntryIterator0.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: remove");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str22 + "' != '" + "exploded archive" + "'", str22.equals("exploded archive"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str24 + "' != '" + "exploded archive" + "'", str24.equals("exploded archive"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file40.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file40.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file49.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file49.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file51.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file51.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file52.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file52.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file53.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file53.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
    }

    @Test
    public void test1037() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1037");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file1 = null;
        fileEntryIterator0.current = file1;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive3 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest4 = explodedArchive3.manifest;
        explodedArchive3.recursive = false;
        java.util.jar.Manifest manifest7 = explodedArchive3.manifest;
        java.io.File file8 = explodedArchive3.manifestFile;
        java.io.File file9 = null;
        java.io.File file10 = explodedArchive3.getManifestFile(file9);
        java.util.Iterator<java.io.File> fileItor11 = fileEntryIterator0.listFiles(file10);
        java.io.File file12 = fileEntryIterator0.root;
        java.io.File file13 = fileEntryIterator0.root;
        java.util.Deque<java.util.Iterator<java.io.File>> fileItorQueue14 = fileEntryIterator0.stack;
        java.io.File file15 = fileEntryIterator0.current;
        java.io.File file16 = fileEntryIterator0.poll();
        java.util.Comparator<java.io.File> fileComparator17 = fileEntryIterator0.entryComparator;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive18 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest19 = explodedArchive18.manifest;
        explodedArchive18.recursive = false;
        java.util.jar.Manifest manifest22 = explodedArchive18.manifest;
        java.io.File file23 = explodedArchive18.manifestFile;
        java.io.File file24 = null;
        java.io.File file25 = explodedArchive18.getManifestFile(file24);
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive26 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest27 = explodedArchive26.manifest;
        explodedArchive26.recursive = false;
        java.io.File file30 = null;
        explodedArchive26.root = file30;
        java.io.File file32 = explodedArchive26.manifestFile;
        java.io.File file33 = explodedArchive26.manifestFile;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator34 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator35 = entryComparator34.reversed();
        java.util.Comparator<java.io.File> fileComparator36 = entryComparator34.reversed();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive37 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest38 = explodedArchive37.manifest;
        explodedArchive37.recursive = false;
        java.util.jar.Manifest manifest41 = explodedArchive37.manifest;
        java.io.File file42 = explodedArchive37.manifestFile;
        java.io.File file43 = null;
        java.io.File file44 = explodedArchive37.getManifestFile(file43);
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive45 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest46 = explodedArchive45.manifest;
        explodedArchive45.recursive = false;
        java.io.File file49 = null;
        explodedArchive45.root = file49;
        java.io.File file51 = explodedArchive45.root;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive52 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest53 = explodedArchive52.manifest;
        explodedArchive52.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive56 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest57 = explodedArchive56.manifest;
        explodedArchive56.recursive = false;
        java.util.jar.Manifest manifest60 = explodedArchive56.manifest;
        java.io.File file61 = explodedArchive56.manifestFile;
        java.io.File file62 = null;
        java.io.File file63 = explodedArchive56.getManifestFile(file62);
        explodedArchive52.manifestFile = file62;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive65 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest66 = explodedArchive65.manifest;
        explodedArchive65.recursive = false;
        java.util.jar.Manifest manifest69 = explodedArchive65.manifest;
        java.io.File file70 = explodedArchive65.manifestFile;
        java.io.File file71 = null;
        java.io.File file72 = explodedArchive65.getManifestFile(file71);
        explodedArchive52.manifestFile = file72;
        java.io.File file74 = explodedArchive45.getManifestFile(file72);
        int int75 = entryComparator34.compare(file44, file72);
        explodedArchive26.root = file72;
        java.io.File file77 = explodedArchive18.getManifestFile(file72);
        fileEntryIterator0.current = file77;
        java.util.Comparator<java.io.File> fileComparator79 = fileEntryIterator0.entryComparator;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItorQueue14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file25.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file25.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file44.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file44.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file63.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file63.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file72.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file72.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file74.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file74.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file77);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file77.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file77.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator79);
    }

    @Test
    public void test1038() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1038");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file1 = null;
        fileEntryIterator0.current = file1;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive3 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest4 = explodedArchive3.manifest;
        explodedArchive3.recursive = false;
        java.util.jar.Manifest manifest7 = explodedArchive3.manifest;
        java.io.File file8 = explodedArchive3.manifestFile;
        java.io.File file9 = null;
        java.io.File file10 = explodedArchive3.getManifestFile(file9);
        java.util.Iterator<java.io.File> fileItor11 = fileEntryIterator0.listFiles(file10);
        java.io.File file12 = fileEntryIterator0.root;
        java.io.File file13 = fileEntryIterator0.poll();
        java.util.Comparator<java.io.File> fileComparator14 = fileEntryIterator0.entryComparator;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator15 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        boolean boolean16 = fileEntryIterator15.hasNext();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator17 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator18 = entryComparator17.reversed();
        java.util.Comparator<java.io.File> fileComparator19 = fileComparator18.reversed();
        fileEntryIterator15.entryComparator = fileComparator19;
        java.util.Comparator<java.io.File> fileComparator21 = fileEntryIterator15.entryComparator;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator22 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator23 = entryComparator22.reversed();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator24 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator25 = entryComparator24.reversed();
        java.util.Comparator<java.io.File> fileComparator26 = entryComparator22.thenComparing(fileComparator25);
        java.util.Comparator<java.io.File> fileComparator27 = fileComparator21.thenComparing(fileComparator25);
        fileEntryIterator0.entryComparator = fileComparator27;
        java.io.File file29 = fileEntryIterator0.root;
        boolean boolean30 = fileEntryIterator0.recursive;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator31 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file32 = null;
        fileEntryIterator31.current = file32;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive34 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest35 = explodedArchive34.manifest;
        explodedArchive34.recursive = false;
        java.util.jar.Manifest manifest38 = explodedArchive34.manifest;
        java.io.File file39 = explodedArchive34.manifestFile;
        java.io.File file40 = null;
        java.io.File file41 = explodedArchive34.getManifestFile(file40);
        java.util.Iterator<java.io.File> fileItor42 = fileEntryIterator31.listFiles(file41);
        java.io.File file43 = fileEntryIterator31.current;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator44 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file45 = null;
        fileEntryIterator44.current = file45;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive47 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest48 = explodedArchive47.manifest;
        explodedArchive47.recursive = false;
        java.util.jar.Manifest manifest51 = explodedArchive47.manifest;
        java.io.File file52 = explodedArchive47.manifestFile;
        java.io.File file53 = null;
        java.io.File file54 = explodedArchive47.getManifestFile(file53);
        java.util.Iterator<java.io.File> fileItor55 = fileEntryIterator44.listFiles(file54);
        java.util.ArrayDeque<java.util.Iterator<java.io.File>> fileItorQueue56 = new java.util.ArrayDeque<java.util.Iterator<java.io.File>>();
        boolean boolean57 = fileItorQueue56.add(fileItor55);
        fileEntryIterator31.stack = fileItorQueue56;
        java.util.Deque<java.util.Iterator<java.io.File>> fileItorQueue59 = fileEntryIterator31.stack;
        java.util.Deque<java.util.Iterator<java.io.File>> fileItorQueue60 = fileEntryIterator31.stack;
        fileEntryIterator0.stack = fileItorQueue60;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file41.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file41.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file54.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file54.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItorQueue59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItorQueue60);
    }

    @Test
    public void test1039() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1039");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file1 = null;
        fileEntryIterator0.current = file1;
        fileEntryIterator0.recursive = true;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator5 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator6 = entryComparator5.reversed();
        java.util.Comparator<java.io.File> fileComparator7 = entryComparator5.reversed();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive8 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest9 = explodedArchive8.manifest;
        explodedArchive8.recursive = false;
        java.util.jar.Manifest manifest12 = explodedArchive8.manifest;
        java.io.File file13 = explodedArchive8.manifestFile;
        java.io.File file14 = null;
        java.io.File file15 = explodedArchive8.getManifestFile(file14);
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive16 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest17 = explodedArchive16.manifest;
        explodedArchive16.recursive = false;
        java.io.File file20 = null;
        explodedArchive16.root = file20;
        java.io.File file22 = explodedArchive16.root;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive23 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest24 = explodedArchive23.manifest;
        explodedArchive23.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive27 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest28 = explodedArchive27.manifest;
        explodedArchive27.recursive = false;
        java.util.jar.Manifest manifest31 = explodedArchive27.manifest;
        java.io.File file32 = explodedArchive27.manifestFile;
        java.io.File file33 = null;
        java.io.File file34 = explodedArchive27.getManifestFile(file33);
        explodedArchive23.manifestFile = file33;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive36 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest37 = explodedArchive36.manifest;
        explodedArchive36.recursive = false;
        java.util.jar.Manifest manifest40 = explodedArchive36.manifest;
        java.io.File file41 = explodedArchive36.manifestFile;
        java.io.File file42 = null;
        java.io.File file43 = explodedArchive36.getManifestFile(file42);
        explodedArchive23.manifestFile = file43;
        java.io.File file45 = explodedArchive16.getManifestFile(file43);
        int int46 = entryComparator5.compare(file15, file43);
        java.util.Iterator<java.io.File> fileItor47 = fileEntryIterator0.listFiles(file15);
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator48 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        boolean boolean49 = fileEntryIterator48.hasNext();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator50 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator51 = entryComparator50.reversed();
        java.util.Comparator<java.io.File> fileComparator52 = fileComparator51.reversed();
        fileEntryIterator48.entryComparator = fileComparator52;
        java.util.Comparator<java.io.File> fileComparator54 = fileEntryIterator48.entryComparator;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator55 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator56 = entryComparator55.reversed();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator57 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator58 = entryComparator57.reversed();
        java.util.Comparator<java.io.File> fileComparator59 = entryComparator55.thenComparing(fileComparator58);
        java.util.Comparator<java.io.File> fileComparator60 = fileComparator54.thenComparing(fileComparator58);
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator61 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator62 = entryComparator61.reversed();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator63 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator64 = entryComparator63.reversed();
        java.util.Comparator<java.io.File> fileComparator65 = entryComparator61.thenComparing(fileComparator64);
        java.util.Comparator<java.io.File> fileComparator66 = fileComparator58.thenComparing(fileComparator64);
        fileEntryIterator0.entryComparator = fileComparator64;
        java.util.Comparator<java.io.File> fileComparator68 = fileEntryIterator0.entryComparator;
        java.io.File file69 = fileEntryIterator0.root;
        boolean boolean70 = fileEntryIterator0.recursive;
        java.util.Comparator<java.io.File> fileComparator71 = fileEntryIterator0.entryComparator;
        java.io.File file72 = fileEntryIterator0.poll();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file15.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file15.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file34.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file34.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file43.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file43.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file45.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file45.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file72);
    }

    @Test
    public void test1040() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1040");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest1 = explodedArchive0.manifest;
        explodedArchive0.recursive = false;
        java.io.File file4 = null;
        explodedArchive0.root = file4;
        java.io.File file6 = explodedArchive0.manifestFile;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive7 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file8 = explodedArchive7.root;
        java.io.File file9 = null;
        explodedArchive7.manifestFile = file9;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive11 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest12 = explodedArchive11.manifest;
        explodedArchive11.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive15 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest16 = explodedArchive15.manifest;
        explodedArchive15.recursive = false;
        java.util.jar.Manifest manifest19 = explodedArchive15.manifest;
        java.io.File file20 = explodedArchive15.manifestFile;
        java.io.File file21 = null;
        java.io.File file22 = explodedArchive15.getManifestFile(file21);
        explodedArchive11.manifestFile = file21;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive24 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest25 = explodedArchive24.manifest;
        explodedArchive24.recursive = false;
        java.util.jar.Manifest manifest28 = explodedArchive24.manifest;
        java.io.File file29 = explodedArchive24.manifestFile;
        java.io.File file30 = null;
        java.io.File file31 = explodedArchive24.getManifestFile(file30);
        explodedArchive11.manifestFile = file31;
        java.io.File file33 = explodedArchive7.getManifestFile(file31);
        java.io.File file34 = explodedArchive7.root;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator35 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        boolean boolean36 = fileEntryIterator35.hasNext();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator37 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator38 = entryComparator37.reversed();
        java.util.Comparator<java.io.File> fileComparator39 = fileComparator38.reversed();
        fileEntryIterator35.entryComparator = fileComparator39;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive41 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file42 = explodedArchive41.root;
        java.io.File file43 = null;
        explodedArchive41.manifestFile = file43;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive45 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest46 = explodedArchive45.manifest;
        explodedArchive45.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive49 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest50 = explodedArchive49.manifest;
        explodedArchive49.recursive = false;
        java.util.jar.Manifest manifest53 = explodedArchive49.manifest;
        java.io.File file54 = explodedArchive49.manifestFile;
        java.io.File file55 = null;
        java.io.File file56 = explodedArchive49.getManifestFile(file55);
        explodedArchive45.manifestFile = file55;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive58 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest59 = explodedArchive58.manifest;
        explodedArchive58.recursive = false;
        java.util.jar.Manifest manifest62 = explodedArchive58.manifest;
        java.io.File file63 = explodedArchive58.manifestFile;
        java.io.File file64 = null;
        java.io.File file65 = explodedArchive58.getManifestFile(file64);
        explodedArchive45.manifestFile = file65;
        java.io.File file67 = explodedArchive41.getManifestFile(file65);
        java.util.Iterator<java.io.File> fileItor68 = fileEntryIterator35.listFiles(file67);
        explodedArchive7.manifestFile = file67;
        java.io.File file70 = explodedArchive7.manifestFile;
        java.io.File file71 = explodedArchive0.getManifestFile(file70);
        boolean boolean72 = explodedArchive0.recursive;
        java.util.jar.Manifest manifest73 = null;
        explodedArchive0.manifest = manifest73;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file22.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file22.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file31.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file31.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file33.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file33.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file56.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file56.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file65.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file65.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file67.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file67.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file70.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file70.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file71.getParent(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file71.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
    }

    @Test
    public void test1041() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1041");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest1 = explodedArchive0.manifest;
        explodedArchive0.recursive = false;
        java.util.jar.Manifest manifest4 = explodedArchive0.manifest;
        java.util.jar.Manifest manifest5 = null;
        explodedArchive0.manifest = manifest5;
        java.lang.String str7 = explodedArchive0.toString();
        java.io.File file8 = explodedArchive0.root;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str7 + "' != '" + "exploded archive" + "'", str7.equals("exploded archive"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file8);
    }

    @Test
    public void test1042() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1042");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest1 = explodedArchive0.manifest;
        explodedArchive0.recursive = false;
        java.io.File file4 = null;
        explodedArchive0.root = file4;
        java.io.File file6 = explodedArchive0.root;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive7 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest8 = explodedArchive7.manifest;
        explodedArchive7.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive11 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest12 = explodedArchive11.manifest;
        explodedArchive11.recursive = false;
        java.util.jar.Manifest manifest15 = explodedArchive11.manifest;
        java.io.File file16 = explodedArchive11.manifestFile;
        java.io.File file17 = null;
        java.io.File file18 = explodedArchive11.getManifestFile(file17);
        explodedArchive7.manifestFile = file17;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive20 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest21 = explodedArchive20.manifest;
        explodedArchive20.recursive = false;
        java.util.jar.Manifest manifest24 = explodedArchive20.manifest;
        java.io.File file25 = explodedArchive20.manifestFile;
        java.io.File file26 = null;
        java.io.File file27 = explodedArchive20.getManifestFile(file26);
        explodedArchive7.manifestFile = file27;
        java.io.File file29 = explodedArchive0.getManifestFile(file27);
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntry fileEntry30 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntry();
        java.lang.String str31 = fileEntry30.name;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator32 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file33 = null;
        fileEntryIterator32.current = file33;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive35 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.lang.String str36 = explodedArchive35.toString();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive37 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file38 = explodedArchive37.root;
        java.io.File file39 = null;
        explodedArchive37.manifestFile = file39;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive41 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest42 = explodedArchive41.manifest;
        explodedArchive41.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive45 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest46 = explodedArchive45.manifest;
        explodedArchive45.recursive = false;
        java.util.jar.Manifest manifest49 = explodedArchive45.manifest;
        java.io.File file50 = explodedArchive45.manifestFile;
        java.io.File file51 = null;
        java.io.File file52 = explodedArchive45.getManifestFile(file51);
        explodedArchive41.manifestFile = file51;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive54 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest55 = explodedArchive54.manifest;
        explodedArchive54.recursive = false;
        java.util.jar.Manifest manifest58 = explodedArchive54.manifest;
        java.io.File file59 = explodedArchive54.manifestFile;
        java.io.File file60 = null;
        java.io.File file61 = explodedArchive54.getManifestFile(file60);
        explodedArchive41.manifestFile = file61;
        java.io.File file63 = explodedArchive37.getManifestFile(file61);
        java.io.File file64 = explodedArchive35.getManifestFile(file61);
        fileEntryIterator32.root = file61;
        fileEntry30.file = file61;
        java.io.File file67 = fileEntry30.file;
        explodedArchive0.root = file67;
        java.util.jar.Manifest manifest69 = null;
        explodedArchive0.manifest = manifest69;
        boolean boolean71 = explodedArchive0.recursive;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file18.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file18.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file27.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file27.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file29.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file29.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str36 + "' != '" + "exploded archive" + "'", str36.equals("exploded archive"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file52.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file52.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file61.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file61.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file63.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file63.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file64.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file64.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file67.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file67.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
    }

    @Test
    public void test1043() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1043");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        boolean boolean1 = fileEntryIterator0.hasNext();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator2 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator3 = entryComparator2.reversed();
        java.util.Comparator<java.io.File> fileComparator4 = fileComparator3.reversed();
        fileEntryIterator0.entryComparator = fileComparator4;
        java.util.Comparator<java.io.File> fileComparator6 = fileEntryIterator0.entryComparator;
        java.io.File file7 = fileEntryIterator0.current;
        boolean boolean8 = fileEntryIterator0.hasNext();
        boolean boolean9 = fileEntryIterator0.recursive;
        java.io.File file10 = fileEntryIterator0.root;
        boolean boolean11 = fileEntryIterator0.recursive;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test1044() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1044");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file1 = null;
        fileEntryIterator0.current = file1;
        fileEntryIterator0.recursive = true;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator5 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file6 = null;
        fileEntryIterator5.current = file6;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive8 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest9 = explodedArchive8.manifest;
        explodedArchive8.recursive = false;
        java.util.jar.Manifest manifest12 = explodedArchive8.manifest;
        java.io.File file13 = explodedArchive8.manifestFile;
        java.io.File file14 = null;
        java.io.File file15 = explodedArchive8.getManifestFile(file14);
        java.util.Iterator<java.io.File> fileItor16 = fileEntryIterator5.listFiles(file15);
        java.io.File file17 = fileEntryIterator5.root;
        java.io.File file18 = fileEntryIterator5.root;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator19 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file20 = null;
        fileEntryIterator19.current = file20;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive22 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest23 = explodedArchive22.manifest;
        explodedArchive22.recursive = false;
        java.util.jar.Manifest manifest26 = explodedArchive22.manifest;
        java.io.File file27 = explodedArchive22.manifestFile;
        java.io.File file28 = null;
        java.io.File file29 = explodedArchive22.getManifestFile(file28);
        java.util.Iterator<java.io.File> fileItor30 = fileEntryIterator19.listFiles(file29);
        java.util.ArrayDeque<java.util.Iterator<java.io.File>> fileItorQueue31 = new java.util.ArrayDeque<java.util.Iterator<java.io.File>>();
        boolean boolean32 = fileItorQueue31.add(fileItor30);
        fileEntryIterator5.stack = fileItorQueue31;
        java.util.Deque<java.util.Iterator<java.io.File>> fileItorQueue34 = fileEntryIterator5.stack;
        fileEntryIterator0.stack = fileItorQueue34;
        java.util.Comparator<java.io.File> fileComparator36 = fileEntryIterator0.entryComparator;
        // The following exception was thrown during execution in test generation
        try {
            org.springframework.boot.loader.archive.Archive.Entry entry37 = fileEntryIterator0.next();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file15.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file15.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file29.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file29.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItorQueue34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator36);
    }

    @Test
    public void test1045() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1045");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntry fileEntry0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntry();
        java.io.File file1 = fileEntry0.file;
        java.lang.String str2 = fileEntry0.name;
        java.io.File file3 = fileEntry0.file;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive4 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file5 = explodedArchive4.root;
        java.io.File file6 = explodedArchive4.manifestFile;
        java.util.jar.Manifest manifest7 = null;
        explodedArchive4.manifest = manifest7;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator9 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file10 = null;
        fileEntryIterator9.current = file10;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive12 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.lang.String str13 = explodedArchive12.toString();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive14 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file15 = explodedArchive14.root;
        java.io.File file16 = null;
        explodedArchive14.manifestFile = file16;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive18 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest19 = explodedArchive18.manifest;
        explodedArchive18.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive22 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest23 = explodedArchive22.manifest;
        explodedArchive22.recursive = false;
        java.util.jar.Manifest manifest26 = explodedArchive22.manifest;
        java.io.File file27 = explodedArchive22.manifestFile;
        java.io.File file28 = null;
        java.io.File file29 = explodedArchive22.getManifestFile(file28);
        explodedArchive18.manifestFile = file28;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive31 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest32 = explodedArchive31.manifest;
        explodedArchive31.recursive = false;
        java.util.jar.Manifest manifest35 = explodedArchive31.manifest;
        java.io.File file36 = explodedArchive31.manifestFile;
        java.io.File file37 = null;
        java.io.File file38 = explodedArchive31.getManifestFile(file37);
        explodedArchive18.manifestFile = file38;
        java.io.File file40 = explodedArchive14.getManifestFile(file38);
        java.io.File file41 = explodedArchive12.getManifestFile(file38);
        fileEntryIterator9.root = file38;
        java.io.File file43 = explodedArchive4.getManifestFile(file38);
        fileEntry0.file = file38;
        // The following exception was thrown during execution in test generation
        try {
            org.springframework.boot.loader.archive.ExplodedArchive explodedArchive46 = new org.springframework.boot.loader.archive.ExplodedArchive(file38, true);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid source folder META-INF/MANIFEST.MF");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str13 + "' != '" + "exploded archive" + "'", str13.equals("exploded archive"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file29.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file29.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file38.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file38.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file40.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file40.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file41.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file41.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file43.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file43.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
    }

    @Test
    public void test1046() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1046");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntry fileEntry0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntry();
        java.io.File file1 = fileEntry0.file;
        java.lang.String str2 = fileEntry0.name;
        java.io.File file3 = fileEntry0.file;
        java.io.File file4 = fileEntry0.file;
        java.lang.String str5 = fileEntry0.name;
        java.lang.String str6 = fileEntry0.getName();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntry fileEntry7 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntry();
        java.io.File file8 = fileEntry7.getFile();
        java.io.File file9 = fileEntry7.getFile();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive10 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file11 = explodedArchive10.root;
        java.io.File file12 = null;
        explodedArchive10.manifestFile = file12;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive14 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest15 = explodedArchive14.manifest;
        explodedArchive14.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive18 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest19 = explodedArchive18.manifest;
        explodedArchive18.recursive = false;
        java.util.jar.Manifest manifest22 = explodedArchive18.manifest;
        java.io.File file23 = explodedArchive18.manifestFile;
        java.io.File file24 = null;
        java.io.File file25 = explodedArchive18.getManifestFile(file24);
        explodedArchive14.manifestFile = file24;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive27 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest28 = explodedArchive27.manifest;
        explodedArchive27.recursive = false;
        java.util.jar.Manifest manifest31 = explodedArchive27.manifest;
        java.io.File file32 = explodedArchive27.manifestFile;
        java.io.File file33 = null;
        java.io.File file34 = explodedArchive27.getManifestFile(file33);
        explodedArchive14.manifestFile = file34;
        java.io.File file36 = explodedArchive10.getManifestFile(file34);
        fileEntry7.file = file36;
        java.io.File file38 = fileEntry7.file;
        fileEntry7.name = "exploded archive";
        java.io.File file41 = fileEntry7.file;
        java.io.File file42 = fileEntry7.getFile();
        java.io.File file43 = fileEntry7.file;
        fileEntry0.file = file43;
        java.io.File file45 = fileEntry0.getFile();
        // The following exception was thrown during execution in test generation
        try {
            org.springframework.boot.loader.archive.ExplodedArchive explodedArchive46 = new org.springframework.boot.loader.archive.ExplodedArchive(file45);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid source folder META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file25.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file25.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file34.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file34.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file36.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file36.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file38.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file38.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file41.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file41.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file42.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file42.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file43.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file43.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file45.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file45.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
    }

    @Test
    public void test1047() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1047");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest1 = explodedArchive0.manifest;
        explodedArchive0.recursive = false;
        java.util.jar.Manifest manifest4 = explodedArchive0.manifest;
        java.io.File file5 = explodedArchive0.manifestFile;
        java.io.File file6 = null;
        java.io.File file7 = explodedArchive0.getManifestFile(file6);
        java.util.jar.Manifest manifest8 = explodedArchive0.manifest;
        java.io.File file9 = explodedArchive0.root;
        java.lang.String str10 = explodedArchive0.toString();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive11 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file12 = explodedArchive11.root;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator13 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file14 = null;
        fileEntryIterator13.current = file14;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive16 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest17 = explodedArchive16.manifest;
        explodedArchive16.recursive = false;
        java.util.jar.Manifest manifest20 = explodedArchive16.manifest;
        java.io.File file21 = explodedArchive16.manifestFile;
        java.io.File file22 = null;
        java.io.File file23 = explodedArchive16.getManifestFile(file22);
        java.util.Iterator<java.io.File> fileItor24 = fileEntryIterator13.listFiles(file23);
        boolean boolean25 = fileEntryIterator13.hasNext();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator26 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator27 = entryComparator26.reversed();
        java.util.Comparator<java.io.File> fileComparator28 = entryComparator26.reversed();
        fileEntryIterator13.entryComparator = fileComparator28;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator30 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file31 = null;
        fileEntryIterator30.current = file31;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive33 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.lang.String str34 = explodedArchive33.toString();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive35 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file36 = explodedArchive35.root;
        java.io.File file37 = null;
        explodedArchive35.manifestFile = file37;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive39 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest40 = explodedArchive39.manifest;
        explodedArchive39.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive43 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest44 = explodedArchive43.manifest;
        explodedArchive43.recursive = false;
        java.util.jar.Manifest manifest47 = explodedArchive43.manifest;
        java.io.File file48 = explodedArchive43.manifestFile;
        java.io.File file49 = null;
        java.io.File file50 = explodedArchive43.getManifestFile(file49);
        explodedArchive39.manifestFile = file49;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive52 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest53 = explodedArchive52.manifest;
        explodedArchive52.recursive = false;
        java.util.jar.Manifest manifest56 = explodedArchive52.manifest;
        java.io.File file57 = explodedArchive52.manifestFile;
        java.io.File file58 = null;
        java.io.File file59 = explodedArchive52.getManifestFile(file58);
        explodedArchive39.manifestFile = file59;
        java.io.File file61 = explodedArchive35.getManifestFile(file59);
        java.io.File file62 = explodedArchive33.getManifestFile(file59);
        fileEntryIterator30.root = file59;
        fileEntryIterator13.current = file59;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive65 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file66 = explodedArchive65.root;
        java.io.File file67 = null;
        explodedArchive65.manifestFile = file67;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive69 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest70 = explodedArchive69.manifest;
        explodedArchive69.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive73 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest74 = explodedArchive73.manifest;
        explodedArchive73.recursive = false;
        java.util.jar.Manifest manifest77 = explodedArchive73.manifest;
        java.io.File file78 = explodedArchive73.manifestFile;
        java.io.File file79 = null;
        java.io.File file80 = explodedArchive73.getManifestFile(file79);
        explodedArchive69.manifestFile = file79;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive82 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest83 = explodedArchive82.manifest;
        explodedArchive82.recursive = false;
        java.util.jar.Manifest manifest86 = explodedArchive82.manifest;
        java.io.File file87 = explodedArchive82.manifestFile;
        java.io.File file88 = null;
        java.io.File file89 = explodedArchive82.getManifestFile(file88);
        explodedArchive69.manifestFile = file89;
        java.io.File file91 = explodedArchive65.getManifestFile(file89);
        fileEntryIterator13.root = file91;
        explodedArchive11.root = file91;
        explodedArchive0.manifestFile = file91;
        explodedArchive0.recursive = true;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file7.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file7.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str10 + "' != '" + "exploded archive" + "'", str10.equals("exploded archive"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file23.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file23.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str34 + "' != '" + "exploded archive" + "'", str34.equals("exploded archive"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file50.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file50.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file59.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file59.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file61.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file61.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file62.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file62.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest77);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file78);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file80);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file80.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file80.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest83);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest86);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file87);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file89);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file89.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file89.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file91);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file91.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file91.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
    }

    @Test
    public void test1048() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1048");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntry fileEntry0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntry();
        java.lang.String str1 = fileEntry0.name;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator2 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file3 = null;
        fileEntryIterator2.current = file3;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive5 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.lang.String str6 = explodedArchive5.toString();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive7 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file8 = explodedArchive7.root;
        java.io.File file9 = null;
        explodedArchive7.manifestFile = file9;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive11 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest12 = explodedArchive11.manifest;
        explodedArchive11.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive15 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest16 = explodedArchive15.manifest;
        explodedArchive15.recursive = false;
        java.util.jar.Manifest manifest19 = explodedArchive15.manifest;
        java.io.File file20 = explodedArchive15.manifestFile;
        java.io.File file21 = null;
        java.io.File file22 = explodedArchive15.getManifestFile(file21);
        explodedArchive11.manifestFile = file21;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive24 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest25 = explodedArchive24.manifest;
        explodedArchive24.recursive = false;
        java.util.jar.Manifest manifest28 = explodedArchive24.manifest;
        java.io.File file29 = explodedArchive24.manifestFile;
        java.io.File file30 = null;
        java.io.File file31 = explodedArchive24.getManifestFile(file30);
        explodedArchive11.manifestFile = file31;
        java.io.File file33 = explodedArchive7.getManifestFile(file31);
        java.io.File file34 = explodedArchive5.getManifestFile(file31);
        fileEntryIterator2.root = file31;
        fileEntry0.file = file31;
        java.io.File file37 = fileEntry0.getFile();
        java.io.File file38 = fileEntry0.file;
        java.io.File file39 = fileEntry0.getFile();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "exploded archive" + "'", str6.equals("exploded archive"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file22.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file22.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file31.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file31.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file33.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file33.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file34.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file34.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file37.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file37.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file38.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file38.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file39.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file39.toString(), "META-INF/MANIFEST.MF");
    }

    @Test
    public void test1049() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1049");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file1 = null;
        fileEntryIterator0.current = file1;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive3 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest4 = explodedArchive3.manifest;
        explodedArchive3.recursive = false;
        java.util.jar.Manifest manifest7 = explodedArchive3.manifest;
        java.io.File file8 = explodedArchive3.manifestFile;
        java.io.File file9 = null;
        java.io.File file10 = explodedArchive3.getManifestFile(file9);
        java.util.Iterator<java.io.File> fileItor11 = fileEntryIterator0.listFiles(file10);
        java.io.File file12 = fileEntryIterator0.current;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator13 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file14 = null;
        fileEntryIterator13.current = file14;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive16 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest17 = explodedArchive16.manifest;
        explodedArchive16.recursive = false;
        java.util.jar.Manifest manifest20 = explodedArchive16.manifest;
        java.io.File file21 = explodedArchive16.manifestFile;
        java.io.File file22 = null;
        java.io.File file23 = explodedArchive16.getManifestFile(file22);
        java.util.Iterator<java.io.File> fileItor24 = fileEntryIterator13.listFiles(file23);
        java.util.ArrayDeque<java.util.Iterator<java.io.File>> fileItorQueue25 = new java.util.ArrayDeque<java.util.Iterator<java.io.File>>();
        boolean boolean26 = fileItorQueue25.add(fileItor24);
        fileEntryIterator0.stack = fileItorQueue25;
        java.util.Deque<java.util.Iterator<java.io.File>> fileItorQueue28 = fileEntryIterator0.stack;
        boolean boolean29 = fileEntryIterator0.recursive;
        fileEntryIterator0.recursive = true;
        boolean boolean32 = fileEntryIterator0.hasNext();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file23.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file23.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItorQueue28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
    }

    @Test
    public void test1050() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1050");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        boolean boolean1 = fileEntryIterator0.hasNext();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator2 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator3 = entryComparator2.reversed();
        java.util.Comparator<java.io.File> fileComparator4 = fileComparator3.reversed();
        fileEntryIterator0.entryComparator = fileComparator4;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive6 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file7 = explodedArchive6.root;
        java.io.File file8 = null;
        explodedArchive6.manifestFile = file8;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive10 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest11 = explodedArchive10.manifest;
        explodedArchive10.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive14 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest15 = explodedArchive14.manifest;
        explodedArchive14.recursive = false;
        java.util.jar.Manifest manifest18 = explodedArchive14.manifest;
        java.io.File file19 = explodedArchive14.manifestFile;
        java.io.File file20 = null;
        java.io.File file21 = explodedArchive14.getManifestFile(file20);
        explodedArchive10.manifestFile = file20;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive23 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest24 = explodedArchive23.manifest;
        explodedArchive23.recursive = false;
        java.util.jar.Manifest manifest27 = explodedArchive23.manifest;
        java.io.File file28 = explodedArchive23.manifestFile;
        java.io.File file29 = null;
        java.io.File file30 = explodedArchive23.getManifestFile(file29);
        explodedArchive10.manifestFile = file30;
        java.io.File file32 = explodedArchive6.getManifestFile(file30);
        java.util.Iterator<java.io.File> fileItor33 = fileEntryIterator0.listFiles(file32);
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntry fileEntry34 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntry();
        java.lang.String str35 = fileEntry34.name;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator36 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file37 = null;
        fileEntryIterator36.current = file37;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive39 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.lang.String str40 = explodedArchive39.toString();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive41 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file42 = explodedArchive41.root;
        java.io.File file43 = null;
        explodedArchive41.manifestFile = file43;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive45 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest46 = explodedArchive45.manifest;
        explodedArchive45.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive49 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest50 = explodedArchive49.manifest;
        explodedArchive49.recursive = false;
        java.util.jar.Manifest manifest53 = explodedArchive49.manifest;
        java.io.File file54 = explodedArchive49.manifestFile;
        java.io.File file55 = null;
        java.io.File file56 = explodedArchive49.getManifestFile(file55);
        explodedArchive45.manifestFile = file55;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive58 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest59 = explodedArchive58.manifest;
        explodedArchive58.recursive = false;
        java.util.jar.Manifest manifest62 = explodedArchive58.manifest;
        java.io.File file63 = explodedArchive58.manifestFile;
        java.io.File file64 = null;
        java.io.File file65 = explodedArchive58.getManifestFile(file64);
        explodedArchive45.manifestFile = file65;
        java.io.File file67 = explodedArchive41.getManifestFile(file65);
        java.io.File file68 = explodedArchive39.getManifestFile(file65);
        fileEntryIterator36.root = file65;
        fileEntry34.file = file65;
        java.io.File file71 = fileEntry34.getFile();
        java.io.File file72 = fileEntry34.getFile();
        java.util.Iterator<java.io.File> fileItor73 = fileEntryIterator0.listFiles(file72);
        java.util.Comparator<java.io.File> fileComparator74 = fileEntryIterator0.entryComparator;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator75 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file76 = null;
        fileEntryIterator75.current = file76;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive78 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest79 = explodedArchive78.manifest;
        explodedArchive78.recursive = false;
        java.util.jar.Manifest manifest82 = explodedArchive78.manifest;
        java.io.File file83 = explodedArchive78.manifestFile;
        java.io.File file84 = null;
        java.io.File file85 = explodedArchive78.getManifestFile(file84);
        java.util.Iterator<java.io.File> fileItor86 = fileEntryIterator75.listFiles(file85);
        java.io.File file87 = fileEntryIterator75.root;
        java.io.File file88 = fileEntryIterator75.poll();
        java.util.Comparator<java.io.File> fileComparator89 = fileEntryIterator75.entryComparator;
        java.util.Deque<java.util.Iterator<java.io.File>> fileItorQueue90 = fileEntryIterator75.stack;
        java.util.Deque<java.util.Iterator<java.io.File>> fileItorQueue91 = fileEntryIterator75.stack;
        fileEntryIterator0.stack = fileItorQueue91;
        // The following exception was thrown during execution in test generation
        try {
            fileEntryIterator0.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: remove");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file21.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file21.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file30.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file30.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file32.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file32.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str40 + "' != '" + "exploded archive" + "'", str40.equals("exploded archive"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file56.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file56.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file65.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file65.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file67.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file67.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file68.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file68.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file71.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file71.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file72.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file72.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor73);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest79);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest82);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file83);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file85);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file85.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file85.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor86);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file87);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file88);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator89);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItorQueue90);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItorQueue91);
    }

    @Test
    public void test1051() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1051");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file1 = null;
        fileEntryIterator0.current = file1;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive3 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest4 = explodedArchive3.manifest;
        explodedArchive3.recursive = false;
        java.util.jar.Manifest manifest7 = explodedArchive3.manifest;
        java.io.File file8 = explodedArchive3.manifestFile;
        java.io.File file9 = null;
        java.io.File file10 = explodedArchive3.getManifestFile(file9);
        java.util.Iterator<java.io.File> fileItor11 = fileEntryIterator0.listFiles(file10);
        java.io.File file12 = fileEntryIterator0.root;
        java.io.File file13 = fileEntryIterator0.root;
        java.io.File file14 = fileEntryIterator0.current;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator15 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        boolean boolean16 = fileEntryIterator15.hasNext();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator17 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator18 = entryComparator17.reversed();
        java.util.Comparator<java.io.File> fileComparator19 = fileComparator18.reversed();
        fileEntryIterator15.entryComparator = fileComparator19;
        java.util.Comparator<java.io.File> fileComparator21 = fileEntryIterator15.entryComparator;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator22 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator23 = entryComparator22.reversed();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator24 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator25 = entryComparator24.reversed();
        java.util.Comparator<java.io.File> fileComparator26 = entryComparator22.thenComparing(fileComparator25);
        java.util.Comparator<java.io.File> fileComparator27 = fileComparator21.thenComparing(fileComparator25);
        fileEntryIterator0.entryComparator = fileComparator21;
        boolean boolean29 = fileEntryIterator0.hasNext();
        java.util.Comparator<java.io.File> fileComparator30 = fileEntryIterator0.entryComparator;
        java.util.Comparator<java.io.File> fileComparator31 = fileEntryIterator0.entryComparator;
        java.lang.Class<?> wildcardClass32 = fileComparator31.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass32);
    }

    @Test
    public void test1052() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1052");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntry fileEntry0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntry();
        java.io.File file1 = fileEntry0.getFile();
        java.io.File file2 = fileEntry0.getFile();
        java.lang.String str3 = fileEntry0.name;
        fileEntry0.name = "hi!";
        java.io.File file6 = fileEntry0.getFile();
        fileEntry0.name = "hi!";
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file6);
    }

    @Test
    public void test1053() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1053");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        boolean boolean1 = explodedArchive0.recursive;
        java.lang.String str2 = explodedArchive0.toString();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator3 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file4 = null;
        fileEntryIterator3.current = file4;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive6 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest7 = explodedArchive6.manifest;
        explodedArchive6.recursive = false;
        java.util.jar.Manifest manifest10 = explodedArchive6.manifest;
        java.io.File file11 = explodedArchive6.manifestFile;
        java.io.File file12 = null;
        java.io.File file13 = explodedArchive6.getManifestFile(file12);
        java.util.Iterator<java.io.File> fileItor14 = fileEntryIterator3.listFiles(file13);
        java.io.File file15 = fileEntryIterator3.current;
        boolean boolean16 = fileEntryIterator3.recursive;
        java.io.File file17 = fileEntryIterator3.poll();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator18 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file19 = null;
        fileEntryIterator18.current = file19;
        fileEntryIterator18.recursive = true;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator23 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator24 = entryComparator23.reversed();
        java.util.Comparator<java.io.File> fileComparator25 = entryComparator23.reversed();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive26 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest27 = explodedArchive26.manifest;
        explodedArchive26.recursive = false;
        java.util.jar.Manifest manifest30 = explodedArchive26.manifest;
        java.io.File file31 = explodedArchive26.manifestFile;
        java.io.File file32 = null;
        java.io.File file33 = explodedArchive26.getManifestFile(file32);
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive34 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest35 = explodedArchive34.manifest;
        explodedArchive34.recursive = false;
        java.io.File file38 = null;
        explodedArchive34.root = file38;
        java.io.File file40 = explodedArchive34.root;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive41 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest42 = explodedArchive41.manifest;
        explodedArchive41.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive45 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest46 = explodedArchive45.manifest;
        explodedArchive45.recursive = false;
        java.util.jar.Manifest manifest49 = explodedArchive45.manifest;
        java.io.File file50 = explodedArchive45.manifestFile;
        java.io.File file51 = null;
        java.io.File file52 = explodedArchive45.getManifestFile(file51);
        explodedArchive41.manifestFile = file51;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive54 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest55 = explodedArchive54.manifest;
        explodedArchive54.recursive = false;
        java.util.jar.Manifest manifest58 = explodedArchive54.manifest;
        java.io.File file59 = explodedArchive54.manifestFile;
        java.io.File file60 = null;
        java.io.File file61 = explodedArchive54.getManifestFile(file60);
        explodedArchive41.manifestFile = file61;
        java.io.File file63 = explodedArchive34.getManifestFile(file61);
        int int64 = entryComparator23.compare(file33, file61);
        java.util.Iterator<java.io.File> fileItor65 = fileEntryIterator18.listFiles(file33);
        fileEntryIterator3.current = file33;
        explodedArchive0.root = file33;
        java.util.jar.Manifest manifest68 = explodedArchive0.manifest;
        java.io.File file69 = explodedArchive0.manifestFile;
        java.lang.String str70 = explodedArchive0.toString();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str2 + "' != '" + "exploded archive" + "'", str2.equals("exploded archive"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file13.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file13.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file33.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file33.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file52.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file52.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file61.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file61.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file63.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file63.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file69);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertTrue("'" + str70 + "' != '" + "file:/server/study-execution/new-nimrod/nimrod-hunoroutput-test-dest/spring-boot/af20dc6cc45c032573413c401f9f73aa75371744/randoop_4/META-INF/MANIFEST.MF" + "'", str70.equals("file:/server/study-execution/new-nimrod/nimrod-hunoroutput-test-dest/spring-boot/af20dc6cc45c032573413c401f9f73aa75371744/randoop_4/META-INF/MANIFEST.MF"));
    }

    @Test
    public void test1054() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1054");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest1 = explodedArchive0.manifest;
        explodedArchive0.recursive = false;
        java.io.File file4 = null;
        explodedArchive0.root = file4;
        java.io.File file6 = explodedArchive0.root;
        java.util.jar.Manifest manifest7 = null;
        explodedArchive0.manifest = manifest7;
        explodedArchive0.recursive = false;
        java.util.jar.Manifest manifest11 = null;
        explodedArchive0.manifest = manifest11;
        java.lang.String str13 = explodedArchive0.toString();
        java.lang.String str14 = explodedArchive0.toString();
        org.springframework.boot.loader.archive.Archive.EntryFilter entryFilter15 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<org.springframework.boot.loader.archive.Archive> archiveList16 = explodedArchive0.getNestedArchives(entryFilter15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str13 + "' != '" + "exploded archive" + "'", str13.equals("exploded archive"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str14 + "' != '" + "exploded archive" + "'", str14.equals("exploded archive"));
    }

    @Test
    public void test1055() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1055");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntry fileEntry0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntry();
        java.lang.String str1 = fileEntry0.getName();
        java.io.File file2 = fileEntry0.getFile();
        java.io.File file3 = fileEntry0.file;
        fileEntry0.name = "exploded archive";
        java.io.File file6 = fileEntry0.getFile();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file6);
    }

    @Test
    public void test1056() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1056");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest1 = explodedArchive0.manifest;
        java.util.jar.Manifest manifest2 = null;
        explodedArchive0.manifest = manifest2;
        java.io.File file4 = explodedArchive0.root;
        java.util.jar.Manifest manifest5 = null;
        explodedArchive0.manifest = manifest5;
        java.util.jar.Manifest manifest7 = null;
        explodedArchive0.manifest = manifest7;
        java.lang.String str9 = explodedArchive0.toString();
        // The following exception was thrown during execution in test generation
        try {
            java.util.jar.Manifest manifest10 = explodedArchive0.getManifest();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str9 + "' != '" + "exploded archive" + "'", str9.equals("exploded archive"));
    }

    @Test
    public void test1057() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1057");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest1 = explodedArchive0.manifest;
        explodedArchive0.recursive = false;
        java.util.jar.Manifest manifest4 = explodedArchive0.manifest;
        java.io.File file5 = explodedArchive0.manifestFile;
        java.io.File file6 = null;
        java.io.File file7 = explodedArchive0.getManifestFile(file6);
        java.io.File file8 = explodedArchive0.root;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator9 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file10 = null;
        fileEntryIterator9.current = file10;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive12 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest13 = explodedArchive12.manifest;
        explodedArchive12.recursive = false;
        java.util.jar.Manifest manifest16 = explodedArchive12.manifest;
        java.io.File file17 = explodedArchive12.manifestFile;
        java.io.File file18 = null;
        java.io.File file19 = explodedArchive12.getManifestFile(file18);
        java.util.Iterator<java.io.File> fileItor20 = fileEntryIterator9.listFiles(file19);
        java.io.File file21 = fileEntryIterator9.root;
        java.io.File file22 = fileEntryIterator9.root;
        java.util.Deque<java.util.Iterator<java.io.File>> fileItorQueue23 = fileEntryIterator9.stack;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator24 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator25 = entryComparator24.reversed();
        java.util.Comparator<java.io.File> fileComparator26 = entryComparator24.reversed();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive27 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest28 = explodedArchive27.manifest;
        explodedArchive27.recursive = false;
        java.util.jar.Manifest manifest31 = explodedArchive27.manifest;
        java.io.File file32 = explodedArchive27.manifestFile;
        java.io.File file33 = null;
        java.io.File file34 = explodedArchive27.getManifestFile(file33);
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive35 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest36 = explodedArchive35.manifest;
        explodedArchive35.recursive = false;
        java.io.File file39 = null;
        explodedArchive35.root = file39;
        java.io.File file41 = explodedArchive35.root;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive42 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest43 = explodedArchive42.manifest;
        explodedArchive42.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive46 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest47 = explodedArchive46.manifest;
        explodedArchive46.recursive = false;
        java.util.jar.Manifest manifest50 = explodedArchive46.manifest;
        java.io.File file51 = explodedArchive46.manifestFile;
        java.io.File file52 = null;
        java.io.File file53 = explodedArchive46.getManifestFile(file52);
        explodedArchive42.manifestFile = file52;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive55 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest56 = explodedArchive55.manifest;
        explodedArchive55.recursive = false;
        java.util.jar.Manifest manifest59 = explodedArchive55.manifest;
        java.io.File file60 = explodedArchive55.manifestFile;
        java.io.File file61 = null;
        java.io.File file62 = explodedArchive55.getManifestFile(file61);
        explodedArchive42.manifestFile = file62;
        java.io.File file64 = explodedArchive35.getManifestFile(file62);
        int int65 = entryComparator24.compare(file34, file62);
        fileEntryIterator9.root = file34;
        explodedArchive0.manifestFile = file34;
        java.util.jar.Manifest manifest68 = explodedArchive0.getManifest();
        java.io.File file69 = null;
        java.io.File file70 = explodedArchive0.getManifestFile(file69);
        // The following exception was thrown during execution in test generation
        try {
            org.springframework.boot.loader.archive.ExplodedArchive explodedArchive71 = new org.springframework.boot.loader.archive.ExplodedArchive(file70);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid source folder META-INF/MANIFEST.MF");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file7.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file7.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file19.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file19.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItorQueue23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file34.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file34.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file53.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file53.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file62.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file62.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file64.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file64.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file70.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file70.toString(), "META-INF/MANIFEST.MF");
    }

    @Test
    public void test1058() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1058");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file1 = null;
        fileEntryIterator0.current = file1;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive3 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest4 = explodedArchive3.manifest;
        explodedArchive3.recursive = false;
        java.util.jar.Manifest manifest7 = explodedArchive3.manifest;
        java.io.File file8 = explodedArchive3.manifestFile;
        java.io.File file9 = null;
        java.io.File file10 = explodedArchive3.getManifestFile(file9);
        java.util.Iterator<java.io.File> fileItor11 = fileEntryIterator0.listFiles(file10);
        java.io.File file12 = fileEntryIterator0.root;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive13 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.lang.String str14 = explodedArchive13.toString();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive15 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file16 = explodedArchive15.root;
        java.io.File file17 = null;
        explodedArchive15.manifestFile = file17;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive19 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest20 = explodedArchive19.manifest;
        explodedArchive19.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive23 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest24 = explodedArchive23.manifest;
        explodedArchive23.recursive = false;
        java.util.jar.Manifest manifest27 = explodedArchive23.manifest;
        java.io.File file28 = explodedArchive23.manifestFile;
        java.io.File file29 = null;
        java.io.File file30 = explodedArchive23.getManifestFile(file29);
        explodedArchive19.manifestFile = file29;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive32 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest33 = explodedArchive32.manifest;
        explodedArchive32.recursive = false;
        java.util.jar.Manifest manifest36 = explodedArchive32.manifest;
        java.io.File file37 = explodedArchive32.manifestFile;
        java.io.File file38 = null;
        java.io.File file39 = explodedArchive32.getManifestFile(file38);
        explodedArchive19.manifestFile = file39;
        java.io.File file41 = explodedArchive15.getManifestFile(file39);
        java.io.File file42 = explodedArchive13.getManifestFile(file39);
        fileEntryIterator0.root = file39;
        fileEntryIterator0.recursive = true;
        java.util.Deque<java.util.Iterator<java.io.File>> fileItorQueue46 = fileEntryIterator0.stack;
        boolean boolean47 = fileEntryIterator0.recursive;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str14 + "' != '" + "exploded archive" + "'", str14.equals("exploded archive"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file30.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file30.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file39.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file39.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file41.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file41.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file42.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file42.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItorQueue46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
    }

    @Test
    public void test1059() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1059");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file1 = null;
        fileEntryIterator0.current = file1;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive3 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest4 = explodedArchive3.manifest;
        explodedArchive3.recursive = false;
        java.util.jar.Manifest manifest7 = explodedArchive3.manifest;
        java.io.File file8 = explodedArchive3.manifestFile;
        java.io.File file9 = null;
        java.io.File file10 = explodedArchive3.getManifestFile(file9);
        java.util.Iterator<java.io.File> fileItor11 = fileEntryIterator0.listFiles(file10);
        java.util.Comparator<java.io.File> fileComparator12 = fileEntryIterator0.entryComparator;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator13 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file14 = null;
        fileEntryIterator13.current = file14;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive16 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest17 = explodedArchive16.manifest;
        explodedArchive16.recursive = false;
        java.util.jar.Manifest manifest20 = explodedArchive16.manifest;
        java.io.File file21 = explodedArchive16.manifestFile;
        java.io.File file22 = null;
        java.io.File file23 = explodedArchive16.getManifestFile(file22);
        java.util.Iterator<java.io.File> fileItor24 = fileEntryIterator13.listFiles(file23);
        java.io.File file25 = fileEntryIterator13.current;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator26 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file27 = null;
        fileEntryIterator26.current = file27;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive29 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest30 = explodedArchive29.manifest;
        explodedArchive29.recursive = false;
        java.util.jar.Manifest manifest33 = explodedArchive29.manifest;
        java.io.File file34 = explodedArchive29.manifestFile;
        java.io.File file35 = null;
        java.io.File file36 = explodedArchive29.getManifestFile(file35);
        java.util.Iterator<java.io.File> fileItor37 = fileEntryIterator26.listFiles(file36);
        java.io.File file38 = fileEntryIterator26.current;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator39 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file40 = null;
        fileEntryIterator39.current = file40;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive42 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest43 = explodedArchive42.manifest;
        explodedArchive42.recursive = false;
        java.util.jar.Manifest manifest46 = explodedArchive42.manifest;
        java.io.File file47 = explodedArchive42.manifestFile;
        java.io.File file48 = null;
        java.io.File file49 = explodedArchive42.getManifestFile(file48);
        java.util.Iterator<java.io.File> fileItor50 = fileEntryIterator39.listFiles(file49);
        java.util.ArrayDeque<java.util.Iterator<java.io.File>> fileItorQueue51 = new java.util.ArrayDeque<java.util.Iterator<java.io.File>>();
        boolean boolean52 = fileItorQueue51.add(fileItor50);
        fileEntryIterator26.stack = fileItorQueue51;
        fileEntryIterator13.stack = fileItorQueue51;
        fileEntryIterator0.stack = fileItorQueue51;
        boolean boolean56 = fileEntryIterator0.hasNext();
        java.io.File file57 = fileEntryIterator0.poll();
        java.util.Deque<java.util.Iterator<java.io.File>> fileItorQueue58 = fileEntryIterator0.stack;
        boolean boolean59 = fileEntryIterator0.hasNext();
        java.io.File file60 = fileEntryIterator0.poll();
        // The following exception was thrown during execution in test generation
        try {
            org.springframework.boot.loader.archive.Archive.Entry entry61 = fileEntryIterator0.next();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file23.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file23.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file36.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file36.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file49.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file49.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItorQueue58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file60);
    }

    @Test
    public void test1060() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1060");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file1 = null;
        fileEntryIterator0.current = file1;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive3 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest4 = explodedArchive3.manifest;
        explodedArchive3.recursive = false;
        java.util.jar.Manifest manifest7 = explodedArchive3.manifest;
        java.io.File file8 = explodedArchive3.manifestFile;
        java.io.File file9 = null;
        java.io.File file10 = explodedArchive3.getManifestFile(file9);
        java.util.Iterator<java.io.File> fileItor11 = fileEntryIterator0.listFiles(file10);
        boolean boolean12 = fileEntryIterator0.hasNext();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator13 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator14 = entryComparator13.reversed();
        java.util.Comparator<java.io.File> fileComparator15 = entryComparator13.reversed();
        fileEntryIterator0.entryComparator = entryComparator13;
        boolean boolean17 = fileEntryIterator0.hasNext();
        java.util.Deque<java.util.Iterator<java.io.File>> fileItorQueue18 = fileEntryIterator0.stack;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItorQueue18);
    }

    @Test
    public void test1061() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1061");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntry fileEntry0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntry();
        java.io.File file1 = fileEntry0.getFile();
        java.io.File file2 = fileEntry0.getFile();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive3 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file4 = explodedArchive3.root;
        java.io.File file5 = null;
        explodedArchive3.manifestFile = file5;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive7 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest8 = explodedArchive7.manifest;
        explodedArchive7.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive11 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest12 = explodedArchive11.manifest;
        explodedArchive11.recursive = false;
        java.util.jar.Manifest manifest15 = explodedArchive11.manifest;
        java.io.File file16 = explodedArchive11.manifestFile;
        java.io.File file17 = null;
        java.io.File file18 = explodedArchive11.getManifestFile(file17);
        explodedArchive7.manifestFile = file17;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive20 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest21 = explodedArchive20.manifest;
        explodedArchive20.recursive = false;
        java.util.jar.Manifest manifest24 = explodedArchive20.manifest;
        java.io.File file25 = explodedArchive20.manifestFile;
        java.io.File file26 = null;
        java.io.File file27 = explodedArchive20.getManifestFile(file26);
        explodedArchive7.manifestFile = file27;
        java.io.File file29 = explodedArchive3.getManifestFile(file27);
        fileEntry0.file = file29;
        java.io.File file31 = fileEntry0.file;
        fileEntry0.name = "exploded archive";
        java.io.File file34 = fileEntry0.file;
        java.io.File file35 = fileEntry0.getFile();
        java.io.File file36 = fileEntry0.file;
        java.lang.String str37 = fileEntry0.name;
        java.io.File file38 = fileEntry0.getFile();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file18.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file18.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file27.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file27.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file29.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file29.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file31.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file31.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file34.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file34.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file35.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file35.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file36.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file36.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str37 + "' != '" + "exploded archive" + "'", str37.equals("exploded archive"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file38.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file38.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
    }

    @Test
    public void test1062() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1062");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntry fileEntry0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntry();
        java.io.File file1 = fileEntry0.file;
        java.lang.String str2 = fileEntry0.name;
        java.io.File file3 = fileEntry0.file;
        java.io.File file4 = fileEntry0.file;
        fileEntry0.name = "file:/server/study-execution/new-nimrod/nimrod-hunoroutput-test-dest/spring-boot/af20dc6cc45c032573413c401f9f73aa75371744/randoop_4/META-INF/MANIFEST.MF";
        java.lang.String str7 = fileEntry0.getName();
        java.lang.String str8 = fileEntry0.name;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str7 + "' != '" + "file:/server/study-execution/new-nimrod/nimrod-hunoroutput-test-dest/spring-boot/af20dc6cc45c032573413c401f9f73aa75371744/randoop_4/META-INF/MANIFEST.MF" + "'", str7.equals("file:/server/study-execution/new-nimrod/nimrod-hunoroutput-test-dest/spring-boot/af20dc6cc45c032573413c401f9f73aa75371744/randoop_4/META-INF/MANIFEST.MF"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str8 + "' != '" + "file:/server/study-execution/new-nimrod/nimrod-hunoroutput-test-dest/spring-boot/af20dc6cc45c032573413c401f9f73aa75371744/randoop_4/META-INF/MANIFEST.MF" + "'", str8.equals("file:/server/study-execution/new-nimrod/nimrod-hunoroutput-test-dest/spring-boot/af20dc6cc45c032573413c401f9f73aa75371744/randoop_4/META-INF/MANIFEST.MF"));
    }

    @Test
    public void test1063() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1063");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file1 = null;
        fileEntryIterator0.current = file1;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive3 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest4 = explodedArchive3.manifest;
        explodedArchive3.recursive = false;
        java.util.jar.Manifest manifest7 = explodedArchive3.manifest;
        java.io.File file8 = explodedArchive3.manifestFile;
        java.io.File file9 = null;
        java.io.File file10 = explodedArchive3.getManifestFile(file9);
        java.util.Iterator<java.io.File> fileItor11 = fileEntryIterator0.listFiles(file10);
        java.io.File file12 = fileEntryIterator0.current;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator13 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file14 = null;
        fileEntryIterator13.current = file14;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive16 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest17 = explodedArchive16.manifest;
        explodedArchive16.recursive = false;
        java.util.jar.Manifest manifest20 = explodedArchive16.manifest;
        java.io.File file21 = explodedArchive16.manifestFile;
        java.io.File file22 = null;
        java.io.File file23 = explodedArchive16.getManifestFile(file22);
        java.util.Iterator<java.io.File> fileItor24 = fileEntryIterator13.listFiles(file23);
        java.util.ArrayDeque<java.util.Iterator<java.io.File>> fileItorQueue25 = new java.util.ArrayDeque<java.util.Iterator<java.io.File>>();
        boolean boolean26 = fileItorQueue25.add(fileItor24);
        fileEntryIterator0.stack = fileItorQueue25;
        java.util.Deque<java.util.Iterator<java.io.File>> fileItorQueue28 = fileEntryIterator0.stack;
        boolean boolean29 = fileEntryIterator0.recursive;
        java.util.Comparator<java.io.File> fileComparator30 = fileEntryIterator0.entryComparator;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator31 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        boolean boolean32 = fileEntryIterator31.hasNext();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator33 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator34 = entryComparator33.reversed();
        java.util.Comparator<java.io.File> fileComparator35 = fileComparator34.reversed();
        fileEntryIterator31.entryComparator = fileComparator35;
        java.util.Comparator<java.io.File> fileComparator37 = fileEntryIterator31.entryComparator;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator38 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator39 = entryComparator38.reversed();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator40 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator41 = entryComparator40.reversed();
        java.util.Comparator<java.io.File> fileComparator42 = entryComparator38.thenComparing(fileComparator41);
        java.util.Comparator<java.io.File> fileComparator43 = fileComparator37.thenComparing(fileComparator41);
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator44 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator45 = entryComparator44.reversed();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator46 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator47 = entryComparator46.reversed();
        java.util.Comparator<java.io.File> fileComparator48 = entryComparator44.thenComparing(fileComparator47);
        java.util.Comparator<java.io.File> fileComparator49 = fileComparator43.thenComparing((java.util.Comparator<java.io.File>) entryComparator44);
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator50 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        boolean boolean51 = fileEntryIterator50.hasNext();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator52 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator53 = entryComparator52.reversed();
        java.util.Comparator<java.io.File> fileComparator54 = fileComparator53.reversed();
        fileEntryIterator50.entryComparator = fileComparator54;
        java.util.Comparator<java.io.File> fileComparator56 = fileComparator43.thenComparing(fileComparator54);
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator57 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        boolean boolean58 = fileEntryIterator57.hasNext();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator59 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator60 = entryComparator59.reversed();
        java.util.Comparator<java.io.File> fileComparator61 = fileComparator60.reversed();
        fileEntryIterator57.entryComparator = fileComparator61;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator63 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        boolean boolean64 = fileEntryIterator63.hasNext();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator65 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator66 = entryComparator65.reversed();
        java.util.Comparator<java.io.File> fileComparator67 = fileComparator66.reversed();
        fileEntryIterator63.entryComparator = fileComparator67;
        java.util.Comparator<java.io.File> fileComparator69 = fileEntryIterator63.entryComparator;
        java.util.Comparator<java.io.File> fileComparator70 = fileComparator61.thenComparing(fileComparator69);
        java.util.Comparator<java.io.File> fileComparator71 = fileComparator56.thenComparing(fileComparator70);
        java.util.Comparator<java.io.File> fileComparator72 = fileComparator30.thenComparing(fileComparator70);
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator73 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        boolean boolean74 = fileEntryIterator73.recursive;
        java.io.File file75 = fileEntryIterator73.current;
        boolean boolean76 = fileEntryIterator73.hasNext();
        boolean boolean77 = fileEntryIterator73.recursive;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator78 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator79 = entryComparator78.reversed();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator80 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator81 = entryComparator80.reversed();
        java.util.Comparator<java.io.File> fileComparator82 = entryComparator78.thenComparing(fileComparator81);
        fileEntryIterator73.entryComparator = fileComparator82;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator84 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator85 = entryComparator84.reversed();
        java.util.Comparator<java.io.File> fileComparator86 = entryComparator84.reversed();
        java.util.Comparator<java.io.File> fileComparator87 = fileComparator82.thenComparing(fileComparator86);
        java.util.Comparator<java.io.File> fileComparator88 = fileComparator30.thenComparing(fileComparator87);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file23.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file23.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItorQueue28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file75);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator79);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator81);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator82);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator85);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator86);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator87);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator88);
    }

    @Test
    public void test1064() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1064");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest1 = explodedArchive0.manifest;
        java.util.jar.Manifest manifest2 = null;
        explodedArchive0.manifest = manifest2;
        java.io.File file4 = explodedArchive0.root;
        java.lang.String str5 = explodedArchive0.toString();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive6 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file7 = explodedArchive6.root;
        java.io.File file8 = explodedArchive6.manifestFile;
        java.util.jar.Manifest manifest9 = null;
        explodedArchive6.manifest = manifest9;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator11 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file12 = null;
        fileEntryIterator11.current = file12;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive14 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.lang.String str15 = explodedArchive14.toString();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive16 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file17 = explodedArchive16.root;
        java.io.File file18 = null;
        explodedArchive16.manifestFile = file18;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive20 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest21 = explodedArchive20.manifest;
        explodedArchive20.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive24 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest25 = explodedArchive24.manifest;
        explodedArchive24.recursive = false;
        java.util.jar.Manifest manifest28 = explodedArchive24.manifest;
        java.io.File file29 = explodedArchive24.manifestFile;
        java.io.File file30 = null;
        java.io.File file31 = explodedArchive24.getManifestFile(file30);
        explodedArchive20.manifestFile = file30;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive33 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest34 = explodedArchive33.manifest;
        explodedArchive33.recursive = false;
        java.util.jar.Manifest manifest37 = explodedArchive33.manifest;
        java.io.File file38 = explodedArchive33.manifestFile;
        java.io.File file39 = null;
        java.io.File file40 = explodedArchive33.getManifestFile(file39);
        explodedArchive20.manifestFile = file40;
        java.io.File file42 = explodedArchive16.getManifestFile(file40);
        java.io.File file43 = explodedArchive14.getManifestFile(file40);
        fileEntryIterator11.root = file40;
        java.io.File file45 = explodedArchive6.getManifestFile(file40);
        explodedArchive0.manifestFile = file45;
        java.io.File file47 = explodedArchive0.manifestFile;
        java.lang.String str48 = explodedArchive0.toString();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "exploded archive" + "'", str5.equals("exploded archive"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str15 + "' != '" + "exploded archive" + "'", str15.equals("exploded archive"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file31.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file31.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file40.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file40.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file42.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file42.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file43.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file43.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file45.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file45.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file47.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file47.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str48 + "' != '" + "exploded archive" + "'", str48.equals("exploded archive"));
    }

    @Test
    public void test1065() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1065");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntry fileEntry0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntry();
        java.lang.String str1 = fileEntry0.getName();
        java.lang.String str2 = fileEntry0.getName();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator3 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator4 = entryComparator3.reversed();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive5 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file6 = explodedArchive5.root;
        java.io.File file7 = null;
        explodedArchive5.manifestFile = file7;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive9 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest10 = explodedArchive9.manifest;
        explodedArchive9.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive13 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest14 = explodedArchive13.manifest;
        explodedArchive13.recursive = false;
        java.util.jar.Manifest manifest17 = explodedArchive13.manifest;
        java.io.File file18 = explodedArchive13.manifestFile;
        java.io.File file19 = null;
        java.io.File file20 = explodedArchive13.getManifestFile(file19);
        explodedArchive9.manifestFile = file19;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive22 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest23 = explodedArchive22.manifest;
        explodedArchive22.recursive = false;
        java.util.jar.Manifest manifest26 = explodedArchive22.manifest;
        java.io.File file27 = explodedArchive22.manifestFile;
        java.io.File file28 = null;
        java.io.File file29 = explodedArchive22.getManifestFile(file28);
        explodedArchive9.manifestFile = file29;
        java.io.File file31 = explodedArchive5.getManifestFile(file29);
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive32 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest33 = explodedArchive32.manifest;
        explodedArchive32.recursive = false;
        java.io.File file36 = null;
        explodedArchive32.root = file36;
        java.io.File file38 = explodedArchive32.root;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive39 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest40 = explodedArchive39.manifest;
        explodedArchive39.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive43 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest44 = explodedArchive43.manifest;
        explodedArchive43.recursive = false;
        java.util.jar.Manifest manifest47 = explodedArchive43.manifest;
        java.io.File file48 = explodedArchive43.manifestFile;
        java.io.File file49 = null;
        java.io.File file50 = explodedArchive43.getManifestFile(file49);
        explodedArchive39.manifestFile = file49;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive52 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest53 = explodedArchive52.manifest;
        explodedArchive52.recursive = false;
        java.util.jar.Manifest manifest56 = explodedArchive52.manifest;
        java.io.File file57 = explodedArchive52.manifestFile;
        java.io.File file58 = null;
        java.io.File file59 = explodedArchive52.getManifestFile(file58);
        explodedArchive39.manifestFile = file59;
        java.io.File file61 = explodedArchive32.getManifestFile(file59);
        int int62 = entryComparator3.compare(file31, file59);
        fileEntry0.file = file59;
        java.lang.String str64 = fileEntry0.name;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file20.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file20.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file29.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file29.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file31.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file31.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file50.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file50.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file59.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file59.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file61.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file61.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 21 + "'", int62 == 21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str64);
    }

    @Test
    public void test1066() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1066");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest1 = explodedArchive0.manifest;
        java.util.jar.Manifest manifest2 = null;
        explodedArchive0.manifest = manifest2;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator4 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        boolean boolean5 = fileEntryIterator4.hasNext();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator6 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator7 = entryComparator6.reversed();
        java.util.Comparator<java.io.File> fileComparator8 = fileComparator7.reversed();
        fileEntryIterator4.entryComparator = fileComparator8;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive10 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file11 = explodedArchive10.root;
        java.io.File file12 = null;
        explodedArchive10.manifestFile = file12;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive14 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest15 = explodedArchive14.manifest;
        explodedArchive14.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive18 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest19 = explodedArchive18.manifest;
        explodedArchive18.recursive = false;
        java.util.jar.Manifest manifest22 = explodedArchive18.manifest;
        java.io.File file23 = explodedArchive18.manifestFile;
        java.io.File file24 = null;
        java.io.File file25 = explodedArchive18.getManifestFile(file24);
        explodedArchive14.manifestFile = file24;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive27 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest28 = explodedArchive27.manifest;
        explodedArchive27.recursive = false;
        java.util.jar.Manifest manifest31 = explodedArchive27.manifest;
        java.io.File file32 = explodedArchive27.manifestFile;
        java.io.File file33 = null;
        java.io.File file34 = explodedArchive27.getManifestFile(file33);
        explodedArchive14.manifestFile = file34;
        java.io.File file36 = explodedArchive10.getManifestFile(file34);
        java.util.Iterator<java.io.File> fileItor37 = fileEntryIterator4.listFiles(file36);
        java.io.File file38 = explodedArchive0.getManifestFile(file36);
        java.lang.String str39 = explodedArchive0.toString();
        explodedArchive0.recursive = true;
        explodedArchive0.recursive = true;
        java.io.File file44 = explodedArchive0.manifestFile;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file25.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file25.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file34.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file34.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file36.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file36.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file38.getParent(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file38.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str39 + "' != '" + "exploded archive" + "'", str39.equals("exploded archive"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file44);
    }

    @Test
    public void test1067() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1067");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest1 = explodedArchive0.manifest;
        explodedArchive0.recursive = false;
        java.io.File file4 = null;
        explodedArchive0.root = file4;
        java.io.File file6 = explodedArchive0.root;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive7 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest8 = explodedArchive7.manifest;
        explodedArchive7.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive11 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest12 = explodedArchive11.manifest;
        explodedArchive11.recursive = false;
        java.util.jar.Manifest manifest15 = explodedArchive11.manifest;
        java.io.File file16 = explodedArchive11.manifestFile;
        java.io.File file17 = null;
        java.io.File file18 = explodedArchive11.getManifestFile(file17);
        explodedArchive7.manifestFile = file17;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive20 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest21 = explodedArchive20.manifest;
        explodedArchive20.recursive = false;
        java.util.jar.Manifest manifest24 = explodedArchive20.manifest;
        java.io.File file25 = explodedArchive20.manifestFile;
        java.io.File file26 = null;
        java.io.File file27 = explodedArchive20.getManifestFile(file26);
        explodedArchive7.manifestFile = file27;
        java.io.File file29 = explodedArchive0.getManifestFile(file27);
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntry fileEntry30 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntry();
        java.lang.String str31 = fileEntry30.name;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator32 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file33 = null;
        fileEntryIterator32.current = file33;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive35 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.lang.String str36 = explodedArchive35.toString();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive37 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file38 = explodedArchive37.root;
        java.io.File file39 = null;
        explodedArchive37.manifestFile = file39;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive41 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest42 = explodedArchive41.manifest;
        explodedArchive41.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive45 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest46 = explodedArchive45.manifest;
        explodedArchive45.recursive = false;
        java.util.jar.Manifest manifest49 = explodedArchive45.manifest;
        java.io.File file50 = explodedArchive45.manifestFile;
        java.io.File file51 = null;
        java.io.File file52 = explodedArchive45.getManifestFile(file51);
        explodedArchive41.manifestFile = file51;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive54 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest55 = explodedArchive54.manifest;
        explodedArchive54.recursive = false;
        java.util.jar.Manifest manifest58 = explodedArchive54.manifest;
        java.io.File file59 = explodedArchive54.manifestFile;
        java.io.File file60 = null;
        java.io.File file61 = explodedArchive54.getManifestFile(file60);
        explodedArchive41.manifestFile = file61;
        java.io.File file63 = explodedArchive37.getManifestFile(file61);
        java.io.File file64 = explodedArchive35.getManifestFile(file61);
        fileEntryIterator32.root = file61;
        fileEntry30.file = file61;
        java.io.File file67 = fileEntry30.file;
        explodedArchive0.root = file67;
        java.io.File file69 = explodedArchive0.manifestFile;
        java.util.Spliterator<org.springframework.boot.loader.archive.Archive.Entry> entrySpliterator70 = explodedArchive0.spliterator();
        java.lang.String str71 = explodedArchive0.toString();
        java.util.Spliterator<org.springframework.boot.loader.archive.Archive.Entry> entrySpliterator72 = explodedArchive0.spliterator();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file18.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file18.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file27.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file27.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file29.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file29.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str36 + "' != '" + "exploded archive" + "'", str36.equals("exploded archive"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file52.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file52.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file61.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file61.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file63.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file63.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file64.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file64.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file67.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file67.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(entrySpliterator70);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertTrue("'" + str71 + "' != '" + "file:/server/study-execution/new-nimrod/nimrod-hunoroutput-test-dest/spring-boot/af20dc6cc45c032573413c401f9f73aa75371744/randoop_4/META-INF/MANIFEST.MF" + "'", str71.equals("file:/server/study-execution/new-nimrod/nimrod-hunoroutput-test-dest/spring-boot/af20dc6cc45c032573413c401f9f73aa75371744/randoop_4/META-INF/MANIFEST.MF"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(entrySpliterator72);
    }

    @Test
    public void test1068() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1068");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file1 = null;
        fileEntryIterator0.current = file1;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive3 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.lang.String str4 = explodedArchive3.toString();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive5 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file6 = explodedArchive5.root;
        java.io.File file7 = null;
        explodedArchive5.manifestFile = file7;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive9 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest10 = explodedArchive9.manifest;
        explodedArchive9.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive13 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest14 = explodedArchive13.manifest;
        explodedArchive13.recursive = false;
        java.util.jar.Manifest manifest17 = explodedArchive13.manifest;
        java.io.File file18 = explodedArchive13.manifestFile;
        java.io.File file19 = null;
        java.io.File file20 = explodedArchive13.getManifestFile(file19);
        explodedArchive9.manifestFile = file19;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive22 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest23 = explodedArchive22.manifest;
        explodedArchive22.recursive = false;
        java.util.jar.Manifest manifest26 = explodedArchive22.manifest;
        java.io.File file27 = explodedArchive22.manifestFile;
        java.io.File file28 = null;
        java.io.File file29 = explodedArchive22.getManifestFile(file28);
        explodedArchive9.manifestFile = file29;
        java.io.File file31 = explodedArchive5.getManifestFile(file29);
        java.io.File file32 = explodedArchive3.getManifestFile(file29);
        fileEntryIterator0.root = file29;
        boolean boolean34 = fileEntryIterator0.recursive;
        fileEntryIterator0.recursive = true;
        boolean boolean37 = fileEntryIterator0.hasNext();
        java.io.File file38 = fileEntryIterator0.poll();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str4 + "' != '" + "exploded archive" + "'", str4.equals("exploded archive"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file20.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file20.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file29.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file29.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file31.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file31.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file32.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file32.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file38);
    }

    @Test
    public void test1069() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1069");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest1 = explodedArchive0.manifest;
        java.util.jar.Manifest manifest2 = null;
        explodedArchive0.manifest = manifest2;
        java.io.File file4 = explodedArchive0.root;
        explodedArchive0.recursive = false;
        java.io.File file7 = explodedArchive0.manifestFile;
        java.lang.String str8 = explodedArchive0.toString();
        boolean boolean9 = explodedArchive0.recursive;
        java.io.File file10 = explodedArchive0.manifestFile;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str8 + "' != '" + "exploded archive" + "'", str8.equals("exploded archive"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file10);
    }

    @Test
    public void test1070() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1070");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file1 = null;
        fileEntryIterator0.current = file1;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive3 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest4 = explodedArchive3.manifest;
        explodedArchive3.recursive = false;
        java.util.jar.Manifest manifest7 = explodedArchive3.manifest;
        java.io.File file8 = explodedArchive3.manifestFile;
        java.io.File file9 = null;
        java.io.File file10 = explodedArchive3.getManifestFile(file9);
        java.util.Iterator<java.io.File> fileItor11 = fileEntryIterator0.listFiles(file10);
        boolean boolean12 = fileEntryIterator0.hasNext();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator13 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        boolean boolean14 = fileEntryIterator13.recursive;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator15 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        boolean boolean16 = fileEntryIterator15.hasNext();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator17 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator18 = entryComparator17.reversed();
        java.util.Comparator<java.io.File> fileComparator19 = fileComparator18.reversed();
        fileEntryIterator15.entryComparator = fileComparator19;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive21 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file22 = explodedArchive21.root;
        java.io.File file23 = null;
        explodedArchive21.manifestFile = file23;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive25 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest26 = explodedArchive25.manifest;
        explodedArchive25.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive29 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest30 = explodedArchive29.manifest;
        explodedArchive29.recursive = false;
        java.util.jar.Manifest manifest33 = explodedArchive29.manifest;
        java.io.File file34 = explodedArchive29.manifestFile;
        java.io.File file35 = null;
        java.io.File file36 = explodedArchive29.getManifestFile(file35);
        explodedArchive25.manifestFile = file35;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive38 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest39 = explodedArchive38.manifest;
        explodedArchive38.recursive = false;
        java.util.jar.Manifest manifest42 = explodedArchive38.manifest;
        java.io.File file43 = explodedArchive38.manifestFile;
        java.io.File file44 = null;
        java.io.File file45 = explodedArchive38.getManifestFile(file44);
        explodedArchive25.manifestFile = file45;
        java.io.File file47 = explodedArchive21.getManifestFile(file45);
        java.util.Iterator<java.io.File> fileItor48 = fileEntryIterator15.listFiles(file47);
        fileEntryIterator13.root = file47;
        fileEntryIterator0.current = file47;
        // The following exception was thrown during execution in test generation
        try {
            org.springframework.boot.loader.archive.Archive.Entry entry51 = fileEntryIterator0.next();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file36.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file36.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file45.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file45.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file47.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file47.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor48);
    }

    @Test
    public void test1071() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1071");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file1 = null;
        fileEntryIterator0.current = file1;
        fileEntryIterator0.recursive = true;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator5 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file6 = null;
        fileEntryIterator5.current = file6;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive8 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest9 = explodedArchive8.manifest;
        explodedArchive8.recursive = false;
        java.util.jar.Manifest manifest12 = explodedArchive8.manifest;
        java.io.File file13 = explodedArchive8.manifestFile;
        java.io.File file14 = null;
        java.io.File file15 = explodedArchive8.getManifestFile(file14);
        java.util.Iterator<java.io.File> fileItor16 = fileEntryIterator5.listFiles(file15);
        java.io.File file17 = fileEntryIterator5.root;
        java.io.File file18 = fileEntryIterator5.root;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator19 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file20 = null;
        fileEntryIterator19.current = file20;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive22 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest23 = explodedArchive22.manifest;
        explodedArchive22.recursive = false;
        java.util.jar.Manifest manifest26 = explodedArchive22.manifest;
        java.io.File file27 = explodedArchive22.manifestFile;
        java.io.File file28 = null;
        java.io.File file29 = explodedArchive22.getManifestFile(file28);
        java.util.Iterator<java.io.File> fileItor30 = fileEntryIterator19.listFiles(file29);
        java.util.ArrayDeque<java.util.Iterator<java.io.File>> fileItorQueue31 = new java.util.ArrayDeque<java.util.Iterator<java.io.File>>();
        boolean boolean32 = fileItorQueue31.add(fileItor30);
        fileEntryIterator5.stack = fileItorQueue31;
        java.util.Deque<java.util.Iterator<java.io.File>> fileItorQueue34 = fileEntryIterator5.stack;
        fileEntryIterator0.stack = fileItorQueue34;
        boolean boolean36 = fileEntryIterator0.recursive;
        java.io.File file37 = fileEntryIterator0.poll();
        // The following exception was thrown during execution in test generation
        try {
            org.springframework.boot.loader.archive.Archive.Entry entry38 = fileEntryIterator0.next();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file15.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file15.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file29.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file29.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItorQueue34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file37);
    }

    @Test
    public void test1072() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1072");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file1 = null;
        fileEntryIterator0.current = file1;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive3 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest4 = explodedArchive3.manifest;
        explodedArchive3.recursive = false;
        java.util.jar.Manifest manifest7 = explodedArchive3.manifest;
        java.io.File file8 = explodedArchive3.manifestFile;
        java.io.File file9 = null;
        java.io.File file10 = explodedArchive3.getManifestFile(file9);
        java.util.Iterator<java.io.File> fileItor11 = fileEntryIterator0.listFiles(file10);
        java.io.File file12 = fileEntryIterator0.root;
        java.io.File file13 = fileEntryIterator0.poll();
        java.util.Comparator<java.io.File> fileComparator14 = fileEntryIterator0.entryComparator;
        // The following exception was thrown during execution in test generation
        try {
            org.springframework.boot.loader.archive.Archive.Entry entry15 = fileEntryIterator0.next();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator14);
    }

    @Test
    public void test1073() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1073");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest1 = explodedArchive0.manifest;
        explodedArchive0.recursive = false;
        java.io.File file4 = null;
        explodedArchive0.root = file4;
        java.io.File file6 = explodedArchive0.root;
        java.util.jar.Manifest manifest7 = null;
        explodedArchive0.manifest = manifest7;
        explodedArchive0.recursive = false;
        java.util.jar.Manifest manifest11 = null;
        explodedArchive0.manifest = manifest11;
        boolean boolean13 = explodedArchive0.recursive;
        boolean boolean14 = explodedArchive0.recursive;
        java.util.jar.Manifest manifest15 = null;
        explodedArchive0.manifest = manifest15;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test1074() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1074");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        boolean boolean1 = fileEntryIterator0.hasNext();
        java.io.File file2 = fileEntryIterator0.root;
        boolean boolean3 = fileEntryIterator0.hasNext();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator4 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator5 = entryComparator4.reversed();
        java.util.Comparator<java.io.File> fileComparator6 = entryComparator4.reversed();
        fileEntryIterator0.entryComparator = entryComparator4;
        java.util.Comparator<java.io.File> fileComparator8 = entryComparator4.reversed();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator8);
    }

    @Test
    public void test1075() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1075");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file1 = null;
        fileEntryIterator0.current = file1;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive3 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest4 = explodedArchive3.manifest;
        explodedArchive3.recursive = false;
        java.util.jar.Manifest manifest7 = explodedArchive3.manifest;
        java.io.File file8 = explodedArchive3.manifestFile;
        java.io.File file9 = null;
        java.io.File file10 = explodedArchive3.getManifestFile(file9);
        java.util.Iterator<java.io.File> fileItor11 = fileEntryIterator0.listFiles(file10);
        java.io.File file12 = fileEntryIterator0.root;
        java.io.File file13 = fileEntryIterator0.poll();
        fileEntryIterator0.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator16 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file17 = null;
        fileEntryIterator16.current = file17;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive19 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest20 = explodedArchive19.manifest;
        explodedArchive19.recursive = false;
        java.util.jar.Manifest manifest23 = explodedArchive19.manifest;
        java.io.File file24 = explodedArchive19.manifestFile;
        java.io.File file25 = null;
        java.io.File file26 = explodedArchive19.getManifestFile(file25);
        java.util.Iterator<java.io.File> fileItor27 = fileEntryIterator16.listFiles(file26);
        java.io.File file28 = fileEntryIterator16.root;
        java.io.File file29 = fileEntryIterator16.poll();
        java.util.Comparator<java.io.File> fileComparator30 = fileEntryIterator16.entryComparator;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator31 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        boolean boolean32 = fileEntryIterator31.hasNext();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator33 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator34 = entryComparator33.reversed();
        java.util.Comparator<java.io.File> fileComparator35 = fileComparator34.reversed();
        fileEntryIterator31.entryComparator = fileComparator35;
        java.util.Comparator<java.io.File> fileComparator37 = fileEntryIterator31.entryComparator;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator38 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator39 = entryComparator38.reversed();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator40 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator41 = entryComparator40.reversed();
        java.util.Comparator<java.io.File> fileComparator42 = entryComparator38.thenComparing(fileComparator41);
        java.util.Comparator<java.io.File> fileComparator43 = fileComparator37.thenComparing(fileComparator41);
        fileEntryIterator16.entryComparator = fileComparator43;
        java.io.File file45 = fileEntryIterator16.root;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator46 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file47 = null;
        fileEntryIterator46.current = file47;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive49 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest50 = explodedArchive49.manifest;
        explodedArchive49.recursive = false;
        java.util.jar.Manifest manifest53 = explodedArchive49.manifest;
        java.io.File file54 = explodedArchive49.manifestFile;
        java.io.File file55 = null;
        java.io.File file56 = explodedArchive49.getManifestFile(file55);
        java.util.Iterator<java.io.File> fileItor57 = fileEntryIterator46.listFiles(file56);
        boolean boolean58 = fileEntryIterator46.hasNext();
        java.util.Comparator<java.io.File> fileComparator59 = fileEntryIterator46.entryComparator;
        fileEntryIterator16.entryComparator = fileComparator59;
        fileEntryIterator0.entryComparator = fileComparator59;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file26.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file26.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file56.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file56.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator59);
    }

    @Test
    public void test1076() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1076");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        boolean boolean1 = fileEntryIterator0.recursive;
        java.io.File file2 = fileEntryIterator0.current;
        boolean boolean3 = fileEntryIterator0.hasNext();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator4 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file5 = null;
        fileEntryIterator4.current = file5;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive7 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest8 = explodedArchive7.manifest;
        explodedArchive7.recursive = false;
        java.util.jar.Manifest manifest11 = explodedArchive7.manifest;
        java.io.File file12 = explodedArchive7.manifestFile;
        java.io.File file13 = null;
        java.io.File file14 = explodedArchive7.getManifestFile(file13);
        java.util.Iterator<java.io.File> fileItor15 = fileEntryIterator4.listFiles(file14);
        java.io.File file16 = fileEntryIterator4.root;
        java.io.File file17 = fileEntryIterator4.root;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator18 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file19 = null;
        fileEntryIterator18.current = file19;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive21 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest22 = explodedArchive21.manifest;
        explodedArchive21.recursive = false;
        java.util.jar.Manifest manifest25 = explodedArchive21.manifest;
        java.io.File file26 = explodedArchive21.manifestFile;
        java.io.File file27 = null;
        java.io.File file28 = explodedArchive21.getManifestFile(file27);
        java.util.Iterator<java.io.File> fileItor29 = fileEntryIterator18.listFiles(file28);
        java.util.ArrayDeque<java.util.Iterator<java.io.File>> fileItorQueue30 = new java.util.ArrayDeque<java.util.Iterator<java.io.File>>();
        boolean boolean31 = fileItorQueue30.add(fileItor29);
        fileEntryIterator4.stack = fileItorQueue30;
        fileEntryIterator0.stack = fileItorQueue30;
        boolean boolean34 = fileEntryIterator0.recursive;
        java.util.Deque<java.util.Iterator<java.io.File>> fileItorQueue35 = fileEntryIterator0.stack;
        boolean boolean36 = fileEntryIterator0.recursive;
        // The following exception was thrown during execution in test generation
        try {
            fileEntryIterator0.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: remove");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file14.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file14.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file28.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file28.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItorQueue35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
    }

    @Test
    public void test1077() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1077");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file1 = null;
        fileEntryIterator0.current = file1;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive3 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest4 = explodedArchive3.manifest;
        explodedArchive3.recursive = false;
        java.util.jar.Manifest manifest7 = explodedArchive3.manifest;
        java.io.File file8 = explodedArchive3.manifestFile;
        java.io.File file9 = null;
        java.io.File file10 = explodedArchive3.getManifestFile(file9);
        java.util.Iterator<java.io.File> fileItor11 = fileEntryIterator0.listFiles(file10);
        java.io.File file12 = fileEntryIterator0.root;
        java.io.File file13 = fileEntryIterator0.root;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive14 = new org.springframework.boot.loader.archive.ExplodedArchive();
        boolean boolean15 = explodedArchive14.recursive;
        boolean boolean16 = explodedArchive14.recursive;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive17 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file18 = explodedArchive17.root;
        java.io.File file19 = null;
        explodedArchive17.manifestFile = file19;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive21 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest22 = explodedArchive21.manifest;
        explodedArchive21.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive25 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest26 = explodedArchive25.manifest;
        explodedArchive25.recursive = false;
        java.util.jar.Manifest manifest29 = explodedArchive25.manifest;
        java.io.File file30 = explodedArchive25.manifestFile;
        java.io.File file31 = null;
        java.io.File file32 = explodedArchive25.getManifestFile(file31);
        explodedArchive21.manifestFile = file31;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive34 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest35 = explodedArchive34.manifest;
        explodedArchive34.recursive = false;
        java.util.jar.Manifest manifest38 = explodedArchive34.manifest;
        java.io.File file39 = explodedArchive34.manifestFile;
        java.io.File file40 = null;
        java.io.File file41 = explodedArchive34.getManifestFile(file40);
        explodedArchive21.manifestFile = file41;
        java.io.File file43 = explodedArchive17.getManifestFile(file41);
        explodedArchive14.manifestFile = file41;
        fileEntryIterator0.current = file41;
        java.io.File file46 = fileEntryIterator0.current;
        // The following exception was thrown during execution in test generation
        try {
            org.springframework.boot.loader.archive.ExplodedArchive explodedArchive48 = new org.springframework.boot.loader.archive.ExplodedArchive(file46, true);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid source folder META-INF/MANIFEST.MF");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file32.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file32.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file41.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file41.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file43.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file43.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file46.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file46.toString(), "META-INF/MANIFEST.MF");
    }

    @Test
    public void test1078() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1078");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file1 = null;
        fileEntryIterator0.current = file1;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive3 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest4 = explodedArchive3.manifest;
        explodedArchive3.recursive = false;
        java.util.jar.Manifest manifest7 = explodedArchive3.manifest;
        java.io.File file8 = explodedArchive3.manifestFile;
        java.io.File file9 = null;
        java.io.File file10 = explodedArchive3.getManifestFile(file9);
        java.util.Iterator<java.io.File> fileItor11 = fileEntryIterator0.listFiles(file10);
        java.util.Comparator<java.io.File> fileComparator12 = fileEntryIterator0.entryComparator;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator13 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file14 = null;
        fileEntryIterator13.current = file14;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive16 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest17 = explodedArchive16.manifest;
        explodedArchive16.recursive = false;
        java.util.jar.Manifest manifest20 = explodedArchive16.manifest;
        java.io.File file21 = explodedArchive16.manifestFile;
        java.io.File file22 = null;
        java.io.File file23 = explodedArchive16.getManifestFile(file22);
        java.util.Iterator<java.io.File> fileItor24 = fileEntryIterator13.listFiles(file23);
        java.io.File file25 = fileEntryIterator13.current;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator26 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file27 = null;
        fileEntryIterator26.current = file27;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive29 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest30 = explodedArchive29.manifest;
        explodedArchive29.recursive = false;
        java.util.jar.Manifest manifest33 = explodedArchive29.manifest;
        java.io.File file34 = explodedArchive29.manifestFile;
        java.io.File file35 = null;
        java.io.File file36 = explodedArchive29.getManifestFile(file35);
        java.util.Iterator<java.io.File> fileItor37 = fileEntryIterator26.listFiles(file36);
        java.io.File file38 = fileEntryIterator26.current;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator39 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file40 = null;
        fileEntryIterator39.current = file40;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive42 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest43 = explodedArchive42.manifest;
        explodedArchive42.recursive = false;
        java.util.jar.Manifest manifest46 = explodedArchive42.manifest;
        java.io.File file47 = explodedArchive42.manifestFile;
        java.io.File file48 = null;
        java.io.File file49 = explodedArchive42.getManifestFile(file48);
        java.util.Iterator<java.io.File> fileItor50 = fileEntryIterator39.listFiles(file49);
        java.util.ArrayDeque<java.util.Iterator<java.io.File>> fileItorQueue51 = new java.util.ArrayDeque<java.util.Iterator<java.io.File>>();
        boolean boolean52 = fileItorQueue51.add(fileItor50);
        fileEntryIterator26.stack = fileItorQueue51;
        fileEntryIterator13.stack = fileItorQueue51;
        fileEntryIterator0.stack = fileItorQueue51;
        java.io.File file56 = fileEntryIterator0.current;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator57 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file58 = null;
        fileEntryIterator57.current = file58;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive60 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.lang.String str61 = explodedArchive60.toString();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive62 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file63 = explodedArchive62.root;
        java.io.File file64 = null;
        explodedArchive62.manifestFile = file64;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive66 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest67 = explodedArchive66.manifest;
        explodedArchive66.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive70 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest71 = explodedArchive70.manifest;
        explodedArchive70.recursive = false;
        java.util.jar.Manifest manifest74 = explodedArchive70.manifest;
        java.io.File file75 = explodedArchive70.manifestFile;
        java.io.File file76 = null;
        java.io.File file77 = explodedArchive70.getManifestFile(file76);
        explodedArchive66.manifestFile = file76;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive79 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest80 = explodedArchive79.manifest;
        explodedArchive79.recursive = false;
        java.util.jar.Manifest manifest83 = explodedArchive79.manifest;
        java.io.File file84 = explodedArchive79.manifestFile;
        java.io.File file85 = null;
        java.io.File file86 = explodedArchive79.getManifestFile(file85);
        explodedArchive66.manifestFile = file86;
        java.io.File file88 = explodedArchive62.getManifestFile(file86);
        java.io.File file89 = explodedArchive60.getManifestFile(file86);
        fileEntryIterator57.root = file86;
        java.io.File file91 = fileEntryIterator57.root;
        fileEntryIterator0.current = file91;
        fileEntryIterator0.recursive = false;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file23.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file23.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file36.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file36.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file49.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file49.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str61 + "' != '" + "exploded archive" + "'", str61.equals("exploded archive"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file75);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file77);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file77.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file77.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest80);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest83);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file84);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file86);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file86.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file86.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file88);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file88.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file88.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file89);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file89.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file89.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file91);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file91.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file91.toString(), "META-INF/MANIFEST.MF");
    }

    @Test
    public void test1079() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1079");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file1 = null;
        fileEntryIterator0.current = file1;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive3 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest4 = explodedArchive3.manifest;
        explodedArchive3.recursive = false;
        java.util.jar.Manifest manifest7 = explodedArchive3.manifest;
        java.io.File file8 = explodedArchive3.manifestFile;
        java.io.File file9 = null;
        java.io.File file10 = explodedArchive3.getManifestFile(file9);
        java.util.Iterator<java.io.File> fileItor11 = fileEntryIterator0.listFiles(file10);
        boolean boolean12 = fileEntryIterator0.hasNext();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator13 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator14 = entryComparator13.reversed();
        java.util.Comparator<java.io.File> fileComparator15 = entryComparator13.reversed();
        fileEntryIterator0.entryComparator = fileComparator15;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator17 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file18 = null;
        fileEntryIterator17.current = file18;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive20 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest21 = explodedArchive20.manifest;
        explodedArchive20.recursive = false;
        java.util.jar.Manifest manifest24 = explodedArchive20.manifest;
        java.io.File file25 = explodedArchive20.manifestFile;
        java.io.File file26 = null;
        java.io.File file27 = explodedArchive20.getManifestFile(file26);
        java.util.Iterator<java.io.File> fileItor28 = fileEntryIterator17.listFiles(file27);
        java.util.Comparator<java.io.File> fileComparator29 = fileEntryIterator17.entryComparator;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator30 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file31 = null;
        fileEntryIterator30.current = file31;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive33 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest34 = explodedArchive33.manifest;
        explodedArchive33.recursive = false;
        java.util.jar.Manifest manifest37 = explodedArchive33.manifest;
        java.io.File file38 = explodedArchive33.manifestFile;
        java.io.File file39 = null;
        java.io.File file40 = explodedArchive33.getManifestFile(file39);
        java.util.Iterator<java.io.File> fileItor41 = fileEntryIterator30.listFiles(file40);
        java.io.File file42 = fileEntryIterator30.current;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator43 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file44 = null;
        fileEntryIterator43.current = file44;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive46 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest47 = explodedArchive46.manifest;
        explodedArchive46.recursive = false;
        java.util.jar.Manifest manifest50 = explodedArchive46.manifest;
        java.io.File file51 = explodedArchive46.manifestFile;
        java.io.File file52 = null;
        java.io.File file53 = explodedArchive46.getManifestFile(file52);
        java.util.Iterator<java.io.File> fileItor54 = fileEntryIterator43.listFiles(file53);
        java.io.File file55 = fileEntryIterator43.current;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator56 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file57 = null;
        fileEntryIterator56.current = file57;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive59 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest60 = explodedArchive59.manifest;
        explodedArchive59.recursive = false;
        java.util.jar.Manifest manifest63 = explodedArchive59.manifest;
        java.io.File file64 = explodedArchive59.manifestFile;
        java.io.File file65 = null;
        java.io.File file66 = explodedArchive59.getManifestFile(file65);
        java.util.Iterator<java.io.File> fileItor67 = fileEntryIterator56.listFiles(file66);
        java.util.ArrayDeque<java.util.Iterator<java.io.File>> fileItorQueue68 = new java.util.ArrayDeque<java.util.Iterator<java.io.File>>();
        boolean boolean69 = fileItorQueue68.add(fileItor67);
        fileEntryIterator43.stack = fileItorQueue68;
        fileEntryIterator30.stack = fileItorQueue68;
        fileEntryIterator17.stack = fileItorQueue68;
        fileEntryIterator0.stack = fileItorQueue68;
        java.util.Comparator<java.io.File> fileComparator74 = fileEntryIterator0.entryComparator;
        java.io.File file75 = fileEntryIterator0.root;
        java.util.Comparator<java.io.File> fileComparator76 = fileEntryIterator0.entryComparator;
        fileEntryIterator0.recursive = false;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file27.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file27.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file40.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file40.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file53.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file53.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file66.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file66.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file75);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator76);
    }

    @Test
    public void test1080() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1080");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest1 = explodedArchive0.manifest;
        explodedArchive0.recursive = false;
        java.util.jar.Manifest manifest4 = explodedArchive0.manifest;
        java.io.File file5 = explodedArchive0.manifestFile;
        java.io.File file6 = explodedArchive0.root;
        explodedArchive0.recursive = true;
        boolean boolean9 = explodedArchive0.recursive;
        java.util.jar.Manifest manifest10 = explodedArchive0.manifest;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive11 = new org.springframework.boot.loader.archive.ExplodedArchive();
        boolean boolean12 = explodedArchive11.recursive;
        java.lang.String str13 = explodedArchive11.toString();
        boolean boolean14 = explodedArchive11.recursive;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntry fileEntry15 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntry();
        java.lang.String str16 = fileEntry15.name;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator17 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file18 = null;
        fileEntryIterator17.current = file18;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive20 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest21 = explodedArchive20.manifest;
        explodedArchive20.recursive = false;
        java.util.jar.Manifest manifest24 = explodedArchive20.manifest;
        java.io.File file25 = explodedArchive20.manifestFile;
        java.io.File file26 = null;
        java.io.File file27 = explodedArchive20.getManifestFile(file26);
        java.util.Iterator<java.io.File> fileItor28 = fileEntryIterator17.listFiles(file27);
        java.io.File file29 = fileEntryIterator17.current;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator30 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file31 = null;
        fileEntryIterator30.current = file31;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive33 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest34 = explodedArchive33.manifest;
        explodedArchive33.recursive = false;
        java.util.jar.Manifest manifest37 = explodedArchive33.manifest;
        java.io.File file38 = explodedArchive33.manifestFile;
        java.io.File file39 = null;
        java.io.File file40 = explodedArchive33.getManifestFile(file39);
        java.util.Iterator<java.io.File> fileItor41 = fileEntryIterator30.listFiles(file40);
        java.util.ArrayDeque<java.util.Iterator<java.io.File>> fileItorQueue42 = new java.util.ArrayDeque<java.util.Iterator<java.io.File>>();
        boolean boolean43 = fileItorQueue42.add(fileItor41);
        fileEntryIterator17.stack = fileItorQueue42;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive45 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest46 = explodedArchive45.manifest;
        explodedArchive45.recursive = false;
        java.io.File file49 = null;
        explodedArchive45.root = file49;
        java.io.File file51 = explodedArchive45.root;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive52 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest53 = explodedArchive52.manifest;
        explodedArchive52.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive56 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest57 = explodedArchive56.manifest;
        explodedArchive56.recursive = false;
        java.util.jar.Manifest manifest60 = explodedArchive56.manifest;
        java.io.File file61 = explodedArchive56.manifestFile;
        java.io.File file62 = null;
        java.io.File file63 = explodedArchive56.getManifestFile(file62);
        explodedArchive52.manifestFile = file62;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive65 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest66 = explodedArchive65.manifest;
        explodedArchive65.recursive = false;
        java.util.jar.Manifest manifest69 = explodedArchive65.manifest;
        java.io.File file70 = explodedArchive65.manifestFile;
        java.io.File file71 = null;
        java.io.File file72 = explodedArchive65.getManifestFile(file71);
        explodedArchive52.manifestFile = file72;
        java.io.File file74 = explodedArchive45.getManifestFile(file72);
        fileEntryIterator17.root = file72;
        fileEntry15.file = file72;
        boolean boolean77 = fileEntry15.isDirectory();
        boolean boolean78 = fileEntry15.isDirectory();
        java.io.File file79 = fileEntry15.file;
        java.io.File file80 = fileEntry15.getFile();
        explodedArchive11.root = file80;
        explodedArchive0.root = file80;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str13 + "' != '" + "exploded archive" + "'", str13.equals("exploded archive"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file27.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file27.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file40.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file40.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file63.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file63.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file72.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file72.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file74.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file74.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file79);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file79.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file79.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file80);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file80.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file80.toString(), "META-INF/MANIFEST.MF");
    }

    @Test
    public void test1081() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1081");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntry fileEntry0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntry();
        java.io.File file1 = fileEntry0.file;
        java.lang.String str2 = fileEntry0.name;
        java.lang.String str3 = fileEntry0.name;
        fileEntry0.name = "file:/server/study-execution/new-nimrod/nimrod-hunoroutput-test-dest/spring-boot/af20dc6cc45c032573413c401f9f73aa75371744/randoop_4/META-INF/MANIFEST.MF/META-INF/MANIFEST.MF";
        java.io.File file6 = fileEntry0.getFile();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file6);
    }

    @Test
    public void test1082() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1082");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntry fileEntry0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntry();
        java.lang.String str1 = fileEntry0.name;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator2 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file3 = null;
        fileEntryIterator2.current = file3;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive5 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest6 = explodedArchive5.manifest;
        explodedArchive5.recursive = false;
        java.util.jar.Manifest manifest9 = explodedArchive5.manifest;
        java.io.File file10 = explodedArchive5.manifestFile;
        java.io.File file11 = null;
        java.io.File file12 = explodedArchive5.getManifestFile(file11);
        java.util.Iterator<java.io.File> fileItor13 = fileEntryIterator2.listFiles(file12);
        java.io.File file14 = fileEntryIterator2.current;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator15 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file16 = null;
        fileEntryIterator15.current = file16;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive18 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest19 = explodedArchive18.manifest;
        explodedArchive18.recursive = false;
        java.util.jar.Manifest manifest22 = explodedArchive18.manifest;
        java.io.File file23 = explodedArchive18.manifestFile;
        java.io.File file24 = null;
        java.io.File file25 = explodedArchive18.getManifestFile(file24);
        java.util.Iterator<java.io.File> fileItor26 = fileEntryIterator15.listFiles(file25);
        java.util.ArrayDeque<java.util.Iterator<java.io.File>> fileItorQueue27 = new java.util.ArrayDeque<java.util.Iterator<java.io.File>>();
        boolean boolean28 = fileItorQueue27.add(fileItor26);
        fileEntryIterator2.stack = fileItorQueue27;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive30 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest31 = explodedArchive30.manifest;
        explodedArchive30.recursive = false;
        java.io.File file34 = null;
        explodedArchive30.root = file34;
        java.io.File file36 = explodedArchive30.root;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive37 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest38 = explodedArchive37.manifest;
        explodedArchive37.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive41 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest42 = explodedArchive41.manifest;
        explodedArchive41.recursive = false;
        java.util.jar.Manifest manifest45 = explodedArchive41.manifest;
        java.io.File file46 = explodedArchive41.manifestFile;
        java.io.File file47 = null;
        java.io.File file48 = explodedArchive41.getManifestFile(file47);
        explodedArchive37.manifestFile = file47;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive50 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest51 = explodedArchive50.manifest;
        explodedArchive50.recursive = false;
        java.util.jar.Manifest manifest54 = explodedArchive50.manifest;
        java.io.File file55 = explodedArchive50.manifestFile;
        java.io.File file56 = null;
        java.io.File file57 = explodedArchive50.getManifestFile(file56);
        explodedArchive37.manifestFile = file57;
        java.io.File file59 = explodedArchive30.getManifestFile(file57);
        fileEntryIterator2.root = file57;
        fileEntry0.file = file57;
        boolean boolean62 = fileEntry0.isDirectory();
        java.io.File file63 = fileEntry0.getFile();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file12.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file12.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file25.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file25.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file48.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file48.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file57.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file57.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file59.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file59.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file63.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file63.toString(), "META-INF/MANIFEST.MF");
    }

    @Test
    public void test1083() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1083");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntry fileEntry0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntry();
        java.lang.String str1 = fileEntry0.getName();
        java.io.File file2 = fileEntry0.getFile();
        java.io.File file3 = fileEntry0.file;
        fileEntry0.name = "file:/server/study-execution/new-nimrod/nimrod-hunoroutput-test-dest/spring-boot/af20dc6cc45c032573413c401f9f73aa75371744/randoop_4/META-INF/MANIFEST.MF";
        java.io.File file6 = fileEntry0.getFile();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file6);
    }

    @Test
    public void test1084() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1084");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest1 = explodedArchive0.manifest;
        explodedArchive0.recursive = false;
        java.io.File file4 = null;
        explodedArchive0.root = file4;
        java.io.File file6 = explodedArchive0.manifestFile;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive7 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file8 = explodedArchive7.root;
        java.io.File file9 = null;
        explodedArchive7.manifestFile = file9;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive11 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest12 = explodedArchive11.manifest;
        explodedArchive11.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive15 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest16 = explodedArchive15.manifest;
        explodedArchive15.recursive = false;
        java.util.jar.Manifest manifest19 = explodedArchive15.manifest;
        java.io.File file20 = explodedArchive15.manifestFile;
        java.io.File file21 = null;
        java.io.File file22 = explodedArchive15.getManifestFile(file21);
        explodedArchive11.manifestFile = file21;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive24 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest25 = explodedArchive24.manifest;
        explodedArchive24.recursive = false;
        java.util.jar.Manifest manifest28 = explodedArchive24.manifest;
        java.io.File file29 = explodedArchive24.manifestFile;
        java.io.File file30 = null;
        java.io.File file31 = explodedArchive24.getManifestFile(file30);
        explodedArchive11.manifestFile = file31;
        java.io.File file33 = explodedArchive7.getManifestFile(file31);
        java.io.File file34 = explodedArchive7.root;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator35 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        boolean boolean36 = fileEntryIterator35.hasNext();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator37 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator38 = entryComparator37.reversed();
        java.util.Comparator<java.io.File> fileComparator39 = fileComparator38.reversed();
        fileEntryIterator35.entryComparator = fileComparator39;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive41 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file42 = explodedArchive41.root;
        java.io.File file43 = null;
        explodedArchive41.manifestFile = file43;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive45 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest46 = explodedArchive45.manifest;
        explodedArchive45.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive49 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest50 = explodedArchive49.manifest;
        explodedArchive49.recursive = false;
        java.util.jar.Manifest manifest53 = explodedArchive49.manifest;
        java.io.File file54 = explodedArchive49.manifestFile;
        java.io.File file55 = null;
        java.io.File file56 = explodedArchive49.getManifestFile(file55);
        explodedArchive45.manifestFile = file55;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive58 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest59 = explodedArchive58.manifest;
        explodedArchive58.recursive = false;
        java.util.jar.Manifest manifest62 = explodedArchive58.manifest;
        java.io.File file63 = explodedArchive58.manifestFile;
        java.io.File file64 = null;
        java.io.File file65 = explodedArchive58.getManifestFile(file64);
        explodedArchive45.manifestFile = file65;
        java.io.File file67 = explodedArchive41.getManifestFile(file65);
        java.util.Iterator<java.io.File> fileItor68 = fileEntryIterator35.listFiles(file67);
        explodedArchive7.manifestFile = file67;
        java.io.File file70 = explodedArchive7.manifestFile;
        java.io.File file71 = explodedArchive0.getManifestFile(file70);
        boolean boolean72 = explodedArchive0.recursive;
        // The following exception was thrown during execution in test generation
        try {
            java.util.jar.Manifest manifest73 = explodedArchive0.getManifest();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file22.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file22.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file31.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file31.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file33.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file33.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file56.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file56.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file65.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file65.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file67.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file67.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file70.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file70.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file71.getParent(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file71.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
    }

    @Test
    public void test1085() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1085");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest1 = explodedArchive0.manifest;
        explodedArchive0.recursive = false;
        java.io.File file4 = null;
        explodedArchive0.root = file4;
        java.io.File file6 = explodedArchive0.root;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive7 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest8 = explodedArchive7.manifest;
        explodedArchive7.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive11 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest12 = explodedArchive11.manifest;
        explodedArchive11.recursive = false;
        java.util.jar.Manifest manifest15 = explodedArchive11.manifest;
        java.io.File file16 = explodedArchive11.manifestFile;
        java.io.File file17 = null;
        java.io.File file18 = explodedArchive11.getManifestFile(file17);
        explodedArchive7.manifestFile = file17;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive20 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest21 = explodedArchive20.manifest;
        explodedArchive20.recursive = false;
        java.util.jar.Manifest manifest24 = explodedArchive20.manifest;
        java.io.File file25 = explodedArchive20.manifestFile;
        java.io.File file26 = null;
        java.io.File file27 = explodedArchive20.getManifestFile(file26);
        explodedArchive7.manifestFile = file27;
        java.io.File file29 = explodedArchive0.getManifestFile(file27);
        java.io.File file30 = explodedArchive0.manifestFile;
        java.io.File file31 = explodedArchive0.root;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file18.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file18.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file27.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file27.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file29.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file29.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file31);
    }

    @Test
    public void test1086() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1086");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        boolean boolean1 = fileEntryIterator0.hasNext();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator2 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator3 = entryComparator2.reversed();
        java.util.Comparator<java.io.File> fileComparator4 = fileComparator3.reversed();
        fileEntryIterator0.entryComparator = fileComparator4;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive6 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file7 = explodedArchive6.root;
        java.io.File file8 = null;
        explodedArchive6.manifestFile = file8;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive10 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest11 = explodedArchive10.manifest;
        explodedArchive10.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive14 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest15 = explodedArchive14.manifest;
        explodedArchive14.recursive = false;
        java.util.jar.Manifest manifest18 = explodedArchive14.manifest;
        java.io.File file19 = explodedArchive14.manifestFile;
        java.io.File file20 = null;
        java.io.File file21 = explodedArchive14.getManifestFile(file20);
        explodedArchive10.manifestFile = file20;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive23 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest24 = explodedArchive23.manifest;
        explodedArchive23.recursive = false;
        java.util.jar.Manifest manifest27 = explodedArchive23.manifest;
        java.io.File file28 = explodedArchive23.manifestFile;
        java.io.File file29 = null;
        java.io.File file30 = explodedArchive23.getManifestFile(file29);
        explodedArchive10.manifestFile = file30;
        java.io.File file32 = explodedArchive6.getManifestFile(file30);
        java.util.Iterator<java.io.File> fileItor33 = fileEntryIterator0.listFiles(file32);
        boolean boolean34 = fileEntryIterator0.recursive;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator35 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator36 = entryComparator35.reversed();
        java.util.Comparator<java.io.File> fileComparator37 = entryComparator35.reversed();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive38 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest39 = explodedArchive38.manifest;
        explodedArchive38.recursive = false;
        java.util.jar.Manifest manifest42 = explodedArchive38.manifest;
        java.io.File file43 = explodedArchive38.manifestFile;
        java.io.File file44 = null;
        java.io.File file45 = explodedArchive38.getManifestFile(file44);
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive46 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest47 = explodedArchive46.manifest;
        explodedArchive46.recursive = false;
        java.io.File file50 = null;
        explodedArchive46.root = file50;
        java.io.File file52 = explodedArchive46.root;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive53 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest54 = explodedArchive53.manifest;
        explodedArchive53.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive57 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest58 = explodedArchive57.manifest;
        explodedArchive57.recursive = false;
        java.util.jar.Manifest manifest61 = explodedArchive57.manifest;
        java.io.File file62 = explodedArchive57.manifestFile;
        java.io.File file63 = null;
        java.io.File file64 = explodedArchive57.getManifestFile(file63);
        explodedArchive53.manifestFile = file63;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive66 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest67 = explodedArchive66.manifest;
        explodedArchive66.recursive = false;
        java.util.jar.Manifest manifest70 = explodedArchive66.manifest;
        java.io.File file71 = explodedArchive66.manifestFile;
        java.io.File file72 = null;
        java.io.File file73 = explodedArchive66.getManifestFile(file72);
        explodedArchive53.manifestFile = file73;
        java.io.File file75 = explodedArchive46.getManifestFile(file73);
        int int76 = entryComparator35.compare(file45, file73);
        java.util.Iterator<java.io.File> fileItor77 = fileEntryIterator0.listFiles(file45);
        fileEntryIterator0.recursive = false;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file21.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file21.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file30.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file30.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file32.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file32.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file45.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file45.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file64.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file64.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file73);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file73.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file73.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file75);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file75.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file75.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor77);
    }

    @Test
    public void test1087() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1087");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest1 = explodedArchive0.manifest;
        java.util.jar.Manifest manifest2 = null;
        explodedArchive0.manifest = manifest2;
        java.io.File file4 = explodedArchive0.root;
        explodedArchive0.recursive = false;
        java.io.File file7 = explodedArchive0.manifestFile;
        java.lang.String str8 = explodedArchive0.toString();
        boolean boolean9 = explodedArchive0.recursive;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator10 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file11 = null;
        fileEntryIterator10.current = file11;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive13 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest14 = explodedArchive13.manifest;
        explodedArchive13.recursive = false;
        java.util.jar.Manifest manifest17 = explodedArchive13.manifest;
        java.io.File file18 = explodedArchive13.manifestFile;
        java.io.File file19 = null;
        java.io.File file20 = explodedArchive13.getManifestFile(file19);
        java.util.Iterator<java.io.File> fileItor21 = fileEntryIterator10.listFiles(file20);
        java.io.File file22 = fileEntryIterator10.root;
        java.io.File file23 = fileEntryIterator10.poll();
        java.util.Comparator<java.io.File> fileComparator24 = fileEntryIterator10.entryComparator;
        java.util.Deque<java.util.Iterator<java.io.File>> fileItorQueue25 = fileEntryIterator10.stack;
        java.util.Deque<java.util.Iterator<java.io.File>> fileItorQueue26 = fileEntryIterator10.stack;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntry fileEntry27 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntry();
        java.lang.String str28 = fileEntry27.name;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator29 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file30 = null;
        fileEntryIterator29.current = file30;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive32 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.lang.String str33 = explodedArchive32.toString();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive34 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file35 = explodedArchive34.root;
        java.io.File file36 = null;
        explodedArchive34.manifestFile = file36;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive38 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest39 = explodedArchive38.manifest;
        explodedArchive38.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive42 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest43 = explodedArchive42.manifest;
        explodedArchive42.recursive = false;
        java.util.jar.Manifest manifest46 = explodedArchive42.manifest;
        java.io.File file47 = explodedArchive42.manifestFile;
        java.io.File file48 = null;
        java.io.File file49 = explodedArchive42.getManifestFile(file48);
        explodedArchive38.manifestFile = file48;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive51 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest52 = explodedArchive51.manifest;
        explodedArchive51.recursive = false;
        java.util.jar.Manifest manifest55 = explodedArchive51.manifest;
        java.io.File file56 = explodedArchive51.manifestFile;
        java.io.File file57 = null;
        java.io.File file58 = explodedArchive51.getManifestFile(file57);
        explodedArchive38.manifestFile = file58;
        java.io.File file60 = explodedArchive34.getManifestFile(file58);
        java.io.File file61 = explodedArchive32.getManifestFile(file58);
        fileEntryIterator29.root = file58;
        fileEntry27.file = file58;
        java.util.Iterator<java.io.File> fileItor64 = fileEntryIterator10.listFiles(file58);
        explodedArchive0.root = file58;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str8 + "' != '" + "exploded archive" + "'", str8.equals("exploded archive"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file20.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file20.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItorQueue25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItorQueue26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str33 + "' != '" + "exploded archive" + "'", str33.equals("exploded archive"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file49.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file49.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file58.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file58.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file60.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file60.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file61.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file61.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor64);
    }

    @Test
    public void test1088() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1088");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntry fileEntry0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntry();
        java.io.File file1 = fileEntry0.getFile();
        java.io.File file2 = fileEntry0.getFile();
        java.lang.String str3 = fileEntry0.name;
        java.io.File file4 = fileEntry0.getFile();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator5 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file6 = null;
        fileEntryIterator5.current = file6;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive8 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest9 = explodedArchive8.manifest;
        explodedArchive8.recursive = false;
        java.util.jar.Manifest manifest12 = explodedArchive8.manifest;
        java.io.File file13 = explodedArchive8.manifestFile;
        java.io.File file14 = null;
        java.io.File file15 = explodedArchive8.getManifestFile(file14);
        java.util.Iterator<java.io.File> fileItor16 = fileEntryIterator5.listFiles(file15);
        java.io.File file17 = fileEntryIterator5.current;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator18 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file19 = null;
        fileEntryIterator18.current = file19;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive21 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest22 = explodedArchive21.manifest;
        explodedArchive21.recursive = false;
        java.util.jar.Manifest manifest25 = explodedArchive21.manifest;
        java.io.File file26 = explodedArchive21.manifestFile;
        java.io.File file27 = null;
        java.io.File file28 = explodedArchive21.getManifestFile(file27);
        java.util.Iterator<java.io.File> fileItor29 = fileEntryIterator18.listFiles(file28);
        java.util.ArrayDeque<java.util.Iterator<java.io.File>> fileItorQueue30 = new java.util.ArrayDeque<java.util.Iterator<java.io.File>>();
        boolean boolean31 = fileItorQueue30.add(fileItor29);
        fileEntryIterator5.stack = fileItorQueue30;
        java.util.Deque<java.util.Iterator<java.io.File>> fileItorQueue33 = fileEntryIterator5.stack;
        boolean boolean34 = fileEntryIterator5.recursive;
        java.util.Comparator<java.io.File> fileComparator35 = fileEntryIterator5.entryComparator;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntry fileEntry36 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntry();
        java.io.File file37 = fileEntry36.file;
        java.lang.String str38 = fileEntry36.name;
        java.io.File file39 = fileEntry36.file;
        java.io.File file40 = fileEntry36.file;
        java.lang.String str41 = fileEntry36.name;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive42 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.lang.String str43 = explodedArchive42.toString();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive44 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file45 = explodedArchive44.root;
        java.io.File file46 = null;
        explodedArchive44.manifestFile = file46;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive48 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest49 = explodedArchive48.manifest;
        explodedArchive48.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive52 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest53 = explodedArchive52.manifest;
        explodedArchive52.recursive = false;
        java.util.jar.Manifest manifest56 = explodedArchive52.manifest;
        java.io.File file57 = explodedArchive52.manifestFile;
        java.io.File file58 = null;
        java.io.File file59 = explodedArchive52.getManifestFile(file58);
        explodedArchive48.manifestFile = file58;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive61 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest62 = explodedArchive61.manifest;
        explodedArchive61.recursive = false;
        java.util.jar.Manifest manifest65 = explodedArchive61.manifest;
        java.io.File file66 = explodedArchive61.manifestFile;
        java.io.File file67 = null;
        java.io.File file68 = explodedArchive61.getManifestFile(file67);
        explodedArchive48.manifestFile = file68;
        java.io.File file70 = explodedArchive44.getManifestFile(file68);
        java.io.File file71 = explodedArchive42.getManifestFile(file68);
        fileEntry36.file = file68;
        fileEntryIterator5.current = file68;
        fileEntry0.file = file68;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file15.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file15.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file28.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file28.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItorQueue33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str43 + "' != '" + "exploded archive" + "'", str43.equals("exploded archive"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file59.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file59.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file68.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file68.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file70.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file70.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file71.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file71.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
    }

    @Test
    public void test1089() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1089");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file1 = null;
        fileEntryIterator0.current = file1;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive3 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest4 = explodedArchive3.manifest;
        explodedArchive3.recursive = false;
        java.util.jar.Manifest manifest7 = explodedArchive3.manifest;
        java.io.File file8 = explodedArchive3.manifestFile;
        java.io.File file9 = null;
        java.io.File file10 = explodedArchive3.getManifestFile(file9);
        java.util.Iterator<java.io.File> fileItor11 = fileEntryIterator0.listFiles(file10);
        java.io.File file12 = fileEntryIterator0.root;
        java.io.File file13 = fileEntryIterator0.poll();
        java.util.Comparator<java.io.File> fileComparator14 = fileEntryIterator0.entryComparator;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator15 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        boolean boolean16 = fileEntryIterator15.hasNext();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator17 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator18 = entryComparator17.reversed();
        java.util.Comparator<java.io.File> fileComparator19 = fileComparator18.reversed();
        fileEntryIterator15.entryComparator = fileComparator19;
        java.util.Comparator<java.io.File> fileComparator21 = fileEntryIterator15.entryComparator;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator22 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator23 = entryComparator22.reversed();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator24 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator25 = entryComparator24.reversed();
        java.util.Comparator<java.io.File> fileComparator26 = entryComparator22.thenComparing(fileComparator25);
        java.util.Comparator<java.io.File> fileComparator27 = fileComparator21.thenComparing(fileComparator25);
        fileEntryIterator0.entryComparator = fileComparator27;
        java.io.File file29 = fileEntryIterator0.root;
        java.util.Deque<java.util.Iterator<java.io.File>> fileItorQueue30 = fileEntryIterator0.stack;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator31 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        boolean boolean32 = fileEntryIterator31.recursive;
        java.io.File file33 = fileEntryIterator31.current;
        boolean boolean34 = fileEntryIterator31.hasNext();
        boolean boolean35 = fileEntryIterator31.recursive;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator36 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator37 = entryComparator36.reversed();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator38 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator39 = entryComparator38.reversed();
        java.util.Comparator<java.io.File> fileComparator40 = entryComparator36.thenComparing(fileComparator39);
        fileEntryIterator31.entryComparator = fileComparator40;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator42 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator43 = entryComparator42.reversed();
        java.util.Comparator<java.io.File> fileComparator44 = entryComparator42.reversed();
        java.util.Comparator<java.io.File> fileComparator45 = fileComparator40.thenComparing(fileComparator44);
        java.util.Comparator<java.io.File> fileComparator46 = fileComparator45.reversed();
        fileEntryIterator0.entryComparator = fileComparator45;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItorQueue30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator46);
    }

    @Test
    public void test1090() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1090");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file1 = explodedArchive0.root;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive2 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest3 = explodedArchive2.manifest;
        explodedArchive2.recursive = false;
        java.util.jar.Manifest manifest6 = explodedArchive2.manifest;
        java.io.File file7 = explodedArchive2.manifestFile;
        java.io.File file8 = null;
        java.io.File file9 = explodedArchive2.getManifestFile(file8);
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator10 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file11 = null;
        fileEntryIterator10.current = file11;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive13 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.lang.String str14 = explodedArchive13.toString();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive15 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file16 = explodedArchive15.root;
        java.io.File file17 = null;
        explodedArchive15.manifestFile = file17;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive19 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest20 = explodedArchive19.manifest;
        explodedArchive19.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive23 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest24 = explodedArchive23.manifest;
        explodedArchive23.recursive = false;
        java.util.jar.Manifest manifest27 = explodedArchive23.manifest;
        java.io.File file28 = explodedArchive23.manifestFile;
        java.io.File file29 = null;
        java.io.File file30 = explodedArchive23.getManifestFile(file29);
        explodedArchive19.manifestFile = file29;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive32 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest33 = explodedArchive32.manifest;
        explodedArchive32.recursive = false;
        java.util.jar.Manifest manifest36 = explodedArchive32.manifest;
        java.io.File file37 = explodedArchive32.manifestFile;
        java.io.File file38 = null;
        java.io.File file39 = explodedArchive32.getManifestFile(file38);
        explodedArchive19.manifestFile = file39;
        java.io.File file41 = explodedArchive15.getManifestFile(file39);
        java.io.File file42 = explodedArchive13.getManifestFile(file39);
        fileEntryIterator10.root = file39;
        explodedArchive2.root = file39;
        java.io.File file45 = explodedArchive0.getManifestFile(file39);
        boolean boolean46 = explodedArchive0.recursive;
        explodedArchive0.recursive = true;
        java.util.jar.Manifest manifest49 = explodedArchive0.manifest;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive50 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest51 = explodedArchive50.manifest;
        java.util.jar.Manifest manifest52 = null;
        explodedArchive50.manifest = manifest52;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator54 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        boolean boolean55 = fileEntryIterator54.hasNext();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator56 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator57 = entryComparator56.reversed();
        java.util.Comparator<java.io.File> fileComparator58 = fileComparator57.reversed();
        fileEntryIterator54.entryComparator = fileComparator58;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive60 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file61 = explodedArchive60.root;
        java.io.File file62 = null;
        explodedArchive60.manifestFile = file62;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive64 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest65 = explodedArchive64.manifest;
        explodedArchive64.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive68 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest69 = explodedArchive68.manifest;
        explodedArchive68.recursive = false;
        java.util.jar.Manifest manifest72 = explodedArchive68.manifest;
        java.io.File file73 = explodedArchive68.manifestFile;
        java.io.File file74 = null;
        java.io.File file75 = explodedArchive68.getManifestFile(file74);
        explodedArchive64.manifestFile = file74;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive77 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest78 = explodedArchive77.manifest;
        explodedArchive77.recursive = false;
        java.util.jar.Manifest manifest81 = explodedArchive77.manifest;
        java.io.File file82 = explodedArchive77.manifestFile;
        java.io.File file83 = null;
        java.io.File file84 = explodedArchive77.getManifestFile(file83);
        explodedArchive64.manifestFile = file84;
        java.io.File file86 = explodedArchive60.getManifestFile(file84);
        java.util.Iterator<java.io.File> fileItor87 = fileEntryIterator54.listFiles(file86);
        java.io.File file88 = explodedArchive50.getManifestFile(file86);
        explodedArchive0.manifestFile = file88;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file9.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file9.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str14 + "' != '" + "exploded archive" + "'", str14.equals("exploded archive"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file30.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file30.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file39.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file39.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file41.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file41.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file42.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file42.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file45.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file45.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file73);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file75);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file75.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file75.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest78);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest81);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file82);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file84);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file84.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file84.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file86);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file86.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file86.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor87);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file88);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file88.getParent(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file88.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
    }

    @Test
    public void test1091() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1091");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest1 = explodedArchive0.manifest;
        explodedArchive0.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive4 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest5 = explodedArchive4.manifest;
        explodedArchive4.recursive = false;
        java.util.jar.Manifest manifest8 = explodedArchive4.manifest;
        java.io.File file9 = explodedArchive4.manifestFile;
        java.io.File file10 = null;
        java.io.File file11 = explodedArchive4.getManifestFile(file10);
        explodedArchive0.manifestFile = file10;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive13 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest14 = explodedArchive13.manifest;
        explodedArchive13.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive17 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest18 = explodedArchive17.manifest;
        explodedArchive17.recursive = false;
        java.util.jar.Manifest manifest21 = explodedArchive17.manifest;
        java.io.File file22 = explodedArchive17.manifestFile;
        java.io.File file23 = null;
        java.io.File file24 = explodedArchive17.getManifestFile(file23);
        explodedArchive13.manifestFile = file23;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive26 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest27 = explodedArchive26.manifest;
        explodedArchive26.recursive = false;
        java.util.jar.Manifest manifest30 = explodedArchive26.manifest;
        java.io.File file31 = explodedArchive26.manifestFile;
        java.io.File file32 = null;
        java.io.File file33 = explodedArchive26.getManifestFile(file32);
        explodedArchive13.manifestFile = file33;
        explodedArchive0.root = file33;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntry fileEntry36 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntry();
        java.io.File file37 = fileEntry36.getFile();
        java.io.File file38 = fileEntry36.getFile();
        java.lang.String str39 = fileEntry36.name;
        java.io.File file40 = fileEntry36.getFile();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator41 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file42 = null;
        fileEntryIterator41.current = file42;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive44 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest45 = explodedArchive44.manifest;
        explodedArchive44.recursive = false;
        java.util.jar.Manifest manifest48 = explodedArchive44.manifest;
        java.io.File file49 = explodedArchive44.manifestFile;
        java.io.File file50 = null;
        java.io.File file51 = explodedArchive44.getManifestFile(file50);
        java.util.Iterator<java.io.File> fileItor52 = fileEntryIterator41.listFiles(file51);
        fileEntry36.file = file51;
        explodedArchive0.root = file51;
        java.io.File file55 = null;
        explodedArchive0.manifestFile = file55;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file11.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file11.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file24.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file24.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file33.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file33.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file51.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file51.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor52);
    }

    @Test
    public void test1092() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1092");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntry fileEntry0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntry();
        java.lang.String str1 = fileEntry0.name;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator2 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file3 = null;
        fileEntryIterator2.current = file3;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive5 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.lang.String str6 = explodedArchive5.toString();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive7 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file8 = explodedArchive7.root;
        java.io.File file9 = null;
        explodedArchive7.manifestFile = file9;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive11 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest12 = explodedArchive11.manifest;
        explodedArchive11.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive15 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest16 = explodedArchive15.manifest;
        explodedArchive15.recursive = false;
        java.util.jar.Manifest manifest19 = explodedArchive15.manifest;
        java.io.File file20 = explodedArchive15.manifestFile;
        java.io.File file21 = null;
        java.io.File file22 = explodedArchive15.getManifestFile(file21);
        explodedArchive11.manifestFile = file21;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive24 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest25 = explodedArchive24.manifest;
        explodedArchive24.recursive = false;
        java.util.jar.Manifest manifest28 = explodedArchive24.manifest;
        java.io.File file29 = explodedArchive24.manifestFile;
        java.io.File file30 = null;
        java.io.File file31 = explodedArchive24.getManifestFile(file30);
        explodedArchive11.manifestFile = file31;
        java.io.File file33 = explodedArchive7.getManifestFile(file31);
        java.io.File file34 = explodedArchive5.getManifestFile(file31);
        fileEntryIterator2.root = file31;
        fileEntry0.file = file31;
        java.io.File file37 = fileEntry0.file;
        boolean boolean38 = fileEntry0.isDirectory();
        fileEntry0.name = "exploded archive";
        java.io.File file41 = fileEntry0.getFile();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "exploded archive" + "'", str6.equals("exploded archive"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file22.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file22.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file31.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file31.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file33.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file33.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file34.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file34.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file37.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file37.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file41.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file41.toString(), "META-INF/MANIFEST.MF");
    }

    @Test
    public void test1093() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1093");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntry fileEntry0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntry();
        java.lang.String str1 = fileEntry0.name;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator2 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file3 = null;
        fileEntryIterator2.current = file3;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive5 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.lang.String str6 = explodedArchive5.toString();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive7 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file8 = explodedArchive7.root;
        java.io.File file9 = null;
        explodedArchive7.manifestFile = file9;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive11 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest12 = explodedArchive11.manifest;
        explodedArchive11.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive15 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest16 = explodedArchive15.manifest;
        explodedArchive15.recursive = false;
        java.util.jar.Manifest manifest19 = explodedArchive15.manifest;
        java.io.File file20 = explodedArchive15.manifestFile;
        java.io.File file21 = null;
        java.io.File file22 = explodedArchive15.getManifestFile(file21);
        explodedArchive11.manifestFile = file21;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive24 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest25 = explodedArchive24.manifest;
        explodedArchive24.recursive = false;
        java.util.jar.Manifest manifest28 = explodedArchive24.manifest;
        java.io.File file29 = explodedArchive24.manifestFile;
        java.io.File file30 = null;
        java.io.File file31 = explodedArchive24.getManifestFile(file30);
        explodedArchive11.manifestFile = file31;
        java.io.File file33 = explodedArchive7.getManifestFile(file31);
        java.io.File file34 = explodedArchive5.getManifestFile(file31);
        fileEntryIterator2.root = file31;
        fileEntry0.file = file31;
        java.io.File file37 = fileEntry0.getFile();
        java.io.File file38 = fileEntry0.getFile();
        fileEntry0.name = "";
        boolean boolean41 = fileEntry0.isDirectory();
        java.io.File file42 = fileEntry0.file;
        java.io.File file43 = fileEntry0.getFile();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "exploded archive" + "'", str6.equals("exploded archive"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file22.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file22.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file31.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file31.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file33.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file33.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file34.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file34.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file37.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file37.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file38.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file38.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file42.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file42.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file43.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file43.toString(), "META-INF/MANIFEST.MF");
    }

    @Test
    public void test1094() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1094");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        boolean boolean1 = fileEntryIterator0.recursive;
        java.io.File file2 = fileEntryIterator0.current;
        boolean boolean3 = fileEntryIterator0.hasNext();
        boolean boolean4 = fileEntryIterator0.recursive;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator5 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator6 = entryComparator5.reversed();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator7 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator8 = entryComparator7.reversed();
        java.util.Comparator<java.io.File> fileComparator9 = entryComparator5.thenComparing(fileComparator8);
        fileEntryIterator0.entryComparator = fileComparator9;
        java.io.File file11 = fileEntryIterator0.current;
        fileEntryIterator0.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator14 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file15 = null;
        fileEntryIterator14.current = file15;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive17 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest18 = explodedArchive17.manifest;
        explodedArchive17.recursive = false;
        java.util.jar.Manifest manifest21 = explodedArchive17.manifest;
        java.io.File file22 = explodedArchive17.manifestFile;
        java.io.File file23 = null;
        java.io.File file24 = explodedArchive17.getManifestFile(file23);
        java.util.Iterator<java.io.File> fileItor25 = fileEntryIterator14.listFiles(file24);
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator26 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file27 = null;
        fileEntryIterator26.current = file27;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive29 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest30 = explodedArchive29.manifest;
        explodedArchive29.recursive = false;
        java.util.jar.Manifest manifest33 = explodedArchive29.manifest;
        java.io.File file34 = explodedArchive29.manifestFile;
        java.io.File file35 = null;
        java.io.File file36 = explodedArchive29.getManifestFile(file35);
        java.util.Iterator<java.io.File> fileItor37 = fileEntryIterator26.listFiles(file36);
        java.io.File file38 = fileEntryIterator26.current;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator39 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file40 = null;
        fileEntryIterator39.current = file40;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive42 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest43 = explodedArchive42.manifest;
        explodedArchive42.recursive = false;
        java.util.jar.Manifest manifest46 = explodedArchive42.manifest;
        java.io.File file47 = explodedArchive42.manifestFile;
        java.io.File file48 = null;
        java.io.File file49 = explodedArchive42.getManifestFile(file48);
        java.util.Iterator<java.io.File> fileItor50 = fileEntryIterator39.listFiles(file49);
        java.util.ArrayDeque<java.util.Iterator<java.io.File>> fileItorQueue51 = new java.util.ArrayDeque<java.util.Iterator<java.io.File>>();
        boolean boolean52 = fileItorQueue51.add(fileItor50);
        fileEntryIterator26.stack = fileItorQueue51;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive54 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest55 = explodedArchive54.manifest;
        explodedArchive54.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive58 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest59 = explodedArchive58.manifest;
        explodedArchive58.recursive = false;
        java.util.jar.Manifest manifest62 = explodedArchive58.manifest;
        java.io.File file63 = explodedArchive58.manifestFile;
        java.io.File file64 = null;
        java.io.File file65 = explodedArchive58.getManifestFile(file64);
        explodedArchive54.manifestFile = file64;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive67 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest68 = explodedArchive67.manifest;
        explodedArchive67.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive71 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest72 = explodedArchive71.manifest;
        explodedArchive71.recursive = false;
        java.util.jar.Manifest manifest75 = explodedArchive71.manifest;
        java.io.File file76 = explodedArchive71.manifestFile;
        java.io.File file77 = null;
        java.io.File file78 = explodedArchive71.getManifestFile(file77);
        explodedArchive67.manifestFile = file77;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive80 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest81 = explodedArchive80.manifest;
        explodedArchive80.recursive = false;
        java.util.jar.Manifest manifest84 = explodedArchive80.manifest;
        java.io.File file85 = explodedArchive80.manifestFile;
        java.io.File file86 = null;
        java.io.File file87 = explodedArchive80.getManifestFile(file86);
        explodedArchive67.manifestFile = file87;
        explodedArchive54.root = file87;
        java.util.Iterator<java.io.File> fileItor90 = fileEntryIterator26.listFiles(file87);
        java.util.Comparator<java.io.File> fileComparator91 = fileEntryIterator26.entryComparator;
        fileEntryIterator14.entryComparator = fileComparator91;
        fileEntryIterator0.entryComparator = fileComparator91;
        fileEntryIterator0.recursive = true;
        boolean boolean96 = fileEntryIterator0.recursive;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file24.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file24.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file36.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file36.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file49.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file49.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file65.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file65.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest75);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file76);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file78);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file78.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file78.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest81);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest84);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file85);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file87);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file87.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file87.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor90);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator91);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + true + "'", boolean96 == true);
    }

    @Test
    public void test1095() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1095");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest1 = explodedArchive0.manifest;
        explodedArchive0.recursive = false;
        java.io.File file4 = null;
        explodedArchive0.root = file4;
        java.io.File file6 = explodedArchive0.root;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive7 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest8 = explodedArchive7.manifest;
        explodedArchive7.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive11 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest12 = explodedArchive11.manifest;
        explodedArchive11.recursive = false;
        java.util.jar.Manifest manifest15 = explodedArchive11.manifest;
        java.io.File file16 = explodedArchive11.manifestFile;
        java.io.File file17 = null;
        java.io.File file18 = explodedArchive11.getManifestFile(file17);
        explodedArchive7.manifestFile = file17;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive20 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest21 = explodedArchive20.manifest;
        explodedArchive20.recursive = false;
        java.util.jar.Manifest manifest24 = explodedArchive20.manifest;
        java.io.File file25 = explodedArchive20.manifestFile;
        java.io.File file26 = null;
        java.io.File file27 = explodedArchive20.getManifestFile(file26);
        explodedArchive7.manifestFile = file27;
        java.io.File file29 = explodedArchive0.getManifestFile(file27);
        boolean boolean30 = explodedArchive0.recursive;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator<org.springframework.boot.loader.archive.Archive.Entry> entryItor31 = explodedArchive0.iterator();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file18.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file18.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file27.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file27.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file29.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file29.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
    }

    @Test
    public void test1096() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1096");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntry fileEntry0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntry();
        java.io.File file1 = fileEntry0.file;
        java.lang.String str2 = fileEntry0.name;
        java.io.File file3 = fileEntry0.file;
        java.io.File file4 = fileEntry0.file;
        java.lang.String str5 = fileEntry0.getName();
        java.lang.String str6 = fileEntry0.name;
        java.io.File file7 = fileEntry0.file;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file7);
    }

    @Test
    public void test1097() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1097");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntry fileEntry0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntry();
        java.lang.String str1 = fileEntry0.getName();
        java.io.File file2 = fileEntry0.getFile();
        java.io.File file3 = fileEntry0.file;
        java.io.File file4 = fileEntry0.getFile();
        java.io.File file5 = fileEntry0.getFile();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file5);
    }

    @Test
    public void test1098() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1098");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator1 = entryComparator0.reversed();
        java.util.Comparator<java.io.File> fileComparator2 = entryComparator0.reversed();
        java.util.Comparator<java.io.File> fileComparator3 = entryComparator0.reversed();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator3);
    }

    @Test
    public void test1099() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1099");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest1 = explodedArchive0.manifest;
        java.util.jar.Manifest manifest2 = null;
        explodedArchive0.manifest = manifest2;
        java.io.File file4 = explodedArchive0.root;
        java.lang.String str5 = explodedArchive0.toString();
        boolean boolean6 = explodedArchive0.recursive;
        explodedArchive0.recursive = true;
        explodedArchive0.recursive = false;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "exploded archive" + "'", str5.equals("exploded archive"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test1100() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1100");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest1 = explodedArchive0.manifest;
        explodedArchive0.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive4 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest5 = explodedArchive4.manifest;
        explodedArchive4.recursive = false;
        java.util.jar.Manifest manifest8 = explodedArchive4.manifest;
        java.io.File file9 = explodedArchive4.manifestFile;
        java.io.File file10 = null;
        java.io.File file11 = explodedArchive4.getManifestFile(file10);
        explodedArchive0.manifestFile = file10;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive13 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest14 = explodedArchive13.manifest;
        explodedArchive13.recursive = false;
        java.util.jar.Manifest manifest17 = explodedArchive13.manifest;
        java.io.File file18 = explodedArchive13.manifestFile;
        java.io.File file19 = null;
        java.io.File file20 = explodedArchive13.getManifestFile(file19);
        explodedArchive0.manifestFile = file20;
        boolean boolean22 = explodedArchive0.recursive;
        explodedArchive0.recursive = false;
        boolean boolean25 = explodedArchive0.recursive;
        java.util.jar.Manifest manifest26 = explodedArchive0.manifest;
        java.util.jar.Manifest manifest27 = explodedArchive0.manifest;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Spliterator<org.springframework.boot.loader.archive.Archive.Entry> entrySpliterator28 = explodedArchive0.spliterator();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file11.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file11.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file20.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file20.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest27);
    }

    @Test
    public void test1101() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1101");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest1 = explodedArchive0.manifest;
        explodedArchive0.recursive = false;
        java.util.jar.Manifest manifest4 = explodedArchive0.manifest;
        java.io.File file5 = explodedArchive0.manifestFile;
        java.io.File file6 = explodedArchive0.root;
        java.lang.String str7 = explodedArchive0.toString();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator8 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        boolean boolean9 = fileEntryIterator8.hasNext();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator10 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator11 = entryComparator10.reversed();
        java.util.Comparator<java.io.File> fileComparator12 = fileComparator11.reversed();
        fileEntryIterator8.entryComparator = fileComparator12;
        java.util.Comparator<java.io.File> fileComparator14 = fileEntryIterator8.entryComparator;
        boolean boolean15 = fileEntryIterator8.hasNext();
        java.util.Comparator<java.io.File> fileComparator16 = fileEntryIterator8.entryComparator;
        boolean boolean17 = fileEntryIterator8.recursive;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive18 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest19 = explodedArchive18.manifest;
        explodedArchive18.recursive = false;
        java.util.jar.Manifest manifest22 = explodedArchive18.manifest;
        java.util.jar.Manifest manifest23 = null;
        explodedArchive18.manifest = manifest23;
        java.io.File file25 = explodedArchive18.root;
        java.io.File file26 = null;
        java.io.File file27 = explodedArchive18.getManifestFile(file26);
        fileEntryIterator8.current = file27;
        explodedArchive0.manifestFile = file27;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str7 + "' != '" + "exploded archive" + "'", str7.equals("exploded archive"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file27.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file27.toString(), "META-INF/MANIFEST.MF");
    }

    @Test
    public void test1102() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1102");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest1 = explodedArchive0.manifest;
        explodedArchive0.recursive = false;
        java.io.File file4 = null;
        explodedArchive0.root = file4;
        java.io.File file6 = explodedArchive0.root;
        java.util.jar.Manifest manifest7 = null;
        explodedArchive0.manifest = manifest7;
        explodedArchive0.recursive = false;
        java.io.File file11 = explodedArchive0.manifestFile;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file11);
    }

    @Test
    public void test1103() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1103");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.lang.String str1 = explodedArchive0.toString();
        java.io.File file2 = explodedArchive0.root;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator3 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file4 = null;
        fileEntryIterator3.current = file4;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive6 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest7 = explodedArchive6.manifest;
        explodedArchive6.recursive = false;
        java.util.jar.Manifest manifest10 = explodedArchive6.manifest;
        java.io.File file11 = explodedArchive6.manifestFile;
        java.io.File file12 = null;
        java.io.File file13 = explodedArchive6.getManifestFile(file12);
        java.util.Iterator<java.io.File> fileItor14 = fileEntryIterator3.listFiles(file13);
        java.io.File file15 = fileEntryIterator3.current;
        boolean boolean16 = fileEntryIterator3.recursive;
        java.io.File file17 = fileEntryIterator3.poll();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator18 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file19 = null;
        fileEntryIterator18.current = file19;
        fileEntryIterator18.recursive = true;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator23 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator24 = entryComparator23.reversed();
        java.util.Comparator<java.io.File> fileComparator25 = entryComparator23.reversed();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive26 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest27 = explodedArchive26.manifest;
        explodedArchive26.recursive = false;
        java.util.jar.Manifest manifest30 = explodedArchive26.manifest;
        java.io.File file31 = explodedArchive26.manifestFile;
        java.io.File file32 = null;
        java.io.File file33 = explodedArchive26.getManifestFile(file32);
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive34 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest35 = explodedArchive34.manifest;
        explodedArchive34.recursive = false;
        java.io.File file38 = null;
        explodedArchive34.root = file38;
        java.io.File file40 = explodedArchive34.root;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive41 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest42 = explodedArchive41.manifest;
        explodedArchive41.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive45 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest46 = explodedArchive45.manifest;
        explodedArchive45.recursive = false;
        java.util.jar.Manifest manifest49 = explodedArchive45.manifest;
        java.io.File file50 = explodedArchive45.manifestFile;
        java.io.File file51 = null;
        java.io.File file52 = explodedArchive45.getManifestFile(file51);
        explodedArchive41.manifestFile = file51;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive54 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest55 = explodedArchive54.manifest;
        explodedArchive54.recursive = false;
        java.util.jar.Manifest manifest58 = explodedArchive54.manifest;
        java.io.File file59 = explodedArchive54.manifestFile;
        java.io.File file60 = null;
        java.io.File file61 = explodedArchive54.getManifestFile(file60);
        explodedArchive41.manifestFile = file61;
        java.io.File file63 = explodedArchive34.getManifestFile(file61);
        int int64 = entryComparator23.compare(file33, file61);
        java.util.Iterator<java.io.File> fileItor65 = fileEntryIterator18.listFiles(file33);
        fileEntryIterator3.current = file33;
        java.io.File file67 = explodedArchive0.getManifestFile(file33);
        // The following exception was thrown during execution in test generation
        try {
            org.springframework.boot.loader.archive.ExplodedArchive explodedArchive68 = new org.springframework.boot.loader.archive.ExplodedArchive(file33);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid source folder META-INF/MANIFEST.MF");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str1 + "' != '" + "exploded archive" + "'", str1.equals("exploded archive"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file13.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file13.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file33.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file33.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file52.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file52.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file61.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file61.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file63.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file63.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file67.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file67.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
    }

    @Test
    public void test1104() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1104");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file1 = null;
        fileEntryIterator0.current = file1;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive3 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest4 = explodedArchive3.manifest;
        explodedArchive3.recursive = false;
        java.util.jar.Manifest manifest7 = explodedArchive3.manifest;
        java.io.File file8 = explodedArchive3.manifestFile;
        java.io.File file9 = null;
        java.io.File file10 = explodedArchive3.getManifestFile(file9);
        java.util.Iterator<java.io.File> fileItor11 = fileEntryIterator0.listFiles(file10);
        java.io.File file12 = fileEntryIterator0.current;
        java.util.Deque<java.util.Iterator<java.io.File>> fileItorQueue13 = fileEntryIterator0.stack;
        java.util.Comparator<java.io.File> fileComparator14 = fileEntryIterator0.entryComparator;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntry fileEntry15 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntry();
        java.io.File file16 = fileEntry15.file;
        java.lang.String str17 = fileEntry15.name;
        java.io.File file18 = fileEntry15.file;
        java.lang.String str19 = fileEntry15.getName();
        fileEntry15.name = "";
        java.io.File file22 = fileEntry15.getFile();
        fileEntry15.name = "file:/server/study-execution/new-nimrod/nimrod-hunoroutput-test-dest/spring-boot/af20dc6cc45c032573413c401f9f73aa75371744/randoop_4/META-INF/MANIFEST.MF/META-INF/MANIFEST.MF";
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator25 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file26 = null;
        fileEntryIterator25.current = file26;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive28 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest29 = explodedArchive28.manifest;
        explodedArchive28.recursive = false;
        java.util.jar.Manifest manifest32 = explodedArchive28.manifest;
        java.io.File file33 = explodedArchive28.manifestFile;
        java.io.File file34 = null;
        java.io.File file35 = explodedArchive28.getManifestFile(file34);
        java.util.Iterator<java.io.File> fileItor36 = fileEntryIterator25.listFiles(file35);
        java.io.File file37 = fileEntryIterator25.current;
        boolean boolean38 = fileEntryIterator25.recursive;
        java.io.File file39 = fileEntryIterator25.poll();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator40 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file41 = null;
        fileEntryIterator40.current = file41;
        fileEntryIterator40.recursive = true;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator45 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator46 = entryComparator45.reversed();
        java.util.Comparator<java.io.File> fileComparator47 = entryComparator45.reversed();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive48 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest49 = explodedArchive48.manifest;
        explodedArchive48.recursive = false;
        java.util.jar.Manifest manifest52 = explodedArchive48.manifest;
        java.io.File file53 = explodedArchive48.manifestFile;
        java.io.File file54 = null;
        java.io.File file55 = explodedArchive48.getManifestFile(file54);
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive56 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest57 = explodedArchive56.manifest;
        explodedArchive56.recursive = false;
        java.io.File file60 = null;
        explodedArchive56.root = file60;
        java.io.File file62 = explodedArchive56.root;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive63 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest64 = explodedArchive63.manifest;
        explodedArchive63.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive67 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest68 = explodedArchive67.manifest;
        explodedArchive67.recursive = false;
        java.util.jar.Manifest manifest71 = explodedArchive67.manifest;
        java.io.File file72 = explodedArchive67.manifestFile;
        java.io.File file73 = null;
        java.io.File file74 = explodedArchive67.getManifestFile(file73);
        explodedArchive63.manifestFile = file73;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive76 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest77 = explodedArchive76.manifest;
        explodedArchive76.recursive = false;
        java.util.jar.Manifest manifest80 = explodedArchive76.manifest;
        java.io.File file81 = explodedArchive76.manifestFile;
        java.io.File file82 = null;
        java.io.File file83 = explodedArchive76.getManifestFile(file82);
        explodedArchive63.manifestFile = file83;
        java.io.File file85 = explodedArchive56.getManifestFile(file83);
        int int86 = entryComparator45.compare(file55, file83);
        java.util.Iterator<java.io.File> fileItor87 = fileEntryIterator40.listFiles(file55);
        fileEntryIterator25.current = file55;
        fileEntry15.file = file55;
        java.util.Iterator<java.io.File> fileItor90 = fileEntryIterator0.listFiles(file55);
        boolean boolean91 = fileEntryIterator0.hasNext();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItorQueue13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file35.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file35.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file55.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file55.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file74.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file74.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest77);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest80);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file81);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file83);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file83.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file83.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file85);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file85.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file85.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor87);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor90);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
    }

    @Test
    public void test1105() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1105");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest1 = explodedArchive0.manifest;
        explodedArchive0.recursive = false;
        java.io.File file4 = null;
        explodedArchive0.root = file4;
        java.io.File file6 = explodedArchive0.root;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive7 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest8 = explodedArchive7.manifest;
        explodedArchive7.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive11 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest12 = explodedArchive11.manifest;
        explodedArchive11.recursive = false;
        java.util.jar.Manifest manifest15 = explodedArchive11.manifest;
        java.io.File file16 = explodedArchive11.manifestFile;
        java.io.File file17 = null;
        java.io.File file18 = explodedArchive11.getManifestFile(file17);
        explodedArchive7.manifestFile = file17;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive20 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest21 = explodedArchive20.manifest;
        explodedArchive20.recursive = false;
        java.util.jar.Manifest manifest24 = explodedArchive20.manifest;
        java.io.File file25 = explodedArchive20.manifestFile;
        java.io.File file26 = null;
        java.io.File file27 = explodedArchive20.getManifestFile(file26);
        explodedArchive7.manifestFile = file27;
        java.io.File file29 = explodedArchive0.getManifestFile(file27);
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntry fileEntry30 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntry();
        java.lang.String str31 = fileEntry30.name;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator32 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file33 = null;
        fileEntryIterator32.current = file33;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive35 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.lang.String str36 = explodedArchive35.toString();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive37 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file38 = explodedArchive37.root;
        java.io.File file39 = null;
        explodedArchive37.manifestFile = file39;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive41 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest42 = explodedArchive41.manifest;
        explodedArchive41.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive45 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest46 = explodedArchive45.manifest;
        explodedArchive45.recursive = false;
        java.util.jar.Manifest manifest49 = explodedArchive45.manifest;
        java.io.File file50 = explodedArchive45.manifestFile;
        java.io.File file51 = null;
        java.io.File file52 = explodedArchive45.getManifestFile(file51);
        explodedArchive41.manifestFile = file51;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive54 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest55 = explodedArchive54.manifest;
        explodedArchive54.recursive = false;
        java.util.jar.Manifest manifest58 = explodedArchive54.manifest;
        java.io.File file59 = explodedArchive54.manifestFile;
        java.io.File file60 = null;
        java.io.File file61 = explodedArchive54.getManifestFile(file60);
        explodedArchive41.manifestFile = file61;
        java.io.File file63 = explodedArchive37.getManifestFile(file61);
        java.io.File file64 = explodedArchive35.getManifestFile(file61);
        fileEntryIterator32.root = file61;
        fileEntry30.file = file61;
        java.io.File file67 = fileEntry30.file;
        explodedArchive0.root = file67;
        java.util.Spliterator<org.springframework.boot.loader.archive.Archive.Entry> entrySpliterator69 = explodedArchive0.spliterator();
        java.lang.String str70 = explodedArchive0.toString();
        // The following exception was thrown during execution in test generation
        try {
            java.util.jar.Manifest manifest71 = explodedArchive0.getManifest();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file18.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file18.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file27.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file27.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file29.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file29.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str36 + "' != '" + "exploded archive" + "'", str36.equals("exploded archive"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file52.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file52.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file61.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file61.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file63.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file63.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file64.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file64.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file67.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file67.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(entrySpliterator69);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertTrue("'" + str70 + "' != '" + "file:/server/study-execution/new-nimrod/nimrod-hunoroutput-test-dest/spring-boot/af20dc6cc45c032573413c401f9f73aa75371744/randoop_4/META-INF/MANIFEST.MF" + "'", str70.equals("file:/server/study-execution/new-nimrod/nimrod-hunoroutput-test-dest/spring-boot/af20dc6cc45c032573413c401f9f73aa75371744/randoop_4/META-INF/MANIFEST.MF"));
    }

    @Test
    public void test1106() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1106");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntry fileEntry0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntry();
        java.lang.String str1 = fileEntry0.getName();
        java.lang.String str2 = fileEntry0.getName();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator3 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator4 = entryComparator3.reversed();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive5 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file6 = explodedArchive5.root;
        java.io.File file7 = null;
        explodedArchive5.manifestFile = file7;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive9 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest10 = explodedArchive9.manifest;
        explodedArchive9.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive13 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest14 = explodedArchive13.manifest;
        explodedArchive13.recursive = false;
        java.util.jar.Manifest manifest17 = explodedArchive13.manifest;
        java.io.File file18 = explodedArchive13.manifestFile;
        java.io.File file19 = null;
        java.io.File file20 = explodedArchive13.getManifestFile(file19);
        explodedArchive9.manifestFile = file19;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive22 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest23 = explodedArchive22.manifest;
        explodedArchive22.recursive = false;
        java.util.jar.Manifest manifest26 = explodedArchive22.manifest;
        java.io.File file27 = explodedArchive22.manifestFile;
        java.io.File file28 = null;
        java.io.File file29 = explodedArchive22.getManifestFile(file28);
        explodedArchive9.manifestFile = file29;
        java.io.File file31 = explodedArchive5.getManifestFile(file29);
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive32 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest33 = explodedArchive32.manifest;
        explodedArchive32.recursive = false;
        java.io.File file36 = null;
        explodedArchive32.root = file36;
        java.io.File file38 = explodedArchive32.root;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive39 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest40 = explodedArchive39.manifest;
        explodedArchive39.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive43 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest44 = explodedArchive43.manifest;
        explodedArchive43.recursive = false;
        java.util.jar.Manifest manifest47 = explodedArchive43.manifest;
        java.io.File file48 = explodedArchive43.manifestFile;
        java.io.File file49 = null;
        java.io.File file50 = explodedArchive43.getManifestFile(file49);
        explodedArchive39.manifestFile = file49;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive52 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest53 = explodedArchive52.manifest;
        explodedArchive52.recursive = false;
        java.util.jar.Manifest manifest56 = explodedArchive52.manifest;
        java.io.File file57 = explodedArchive52.manifestFile;
        java.io.File file58 = null;
        java.io.File file59 = explodedArchive52.getManifestFile(file58);
        explodedArchive39.manifestFile = file59;
        java.io.File file61 = explodedArchive32.getManifestFile(file59);
        int int62 = entryComparator3.compare(file31, file59);
        fileEntry0.file = file59;
        boolean boolean64 = fileEntry0.isDirectory();
        java.lang.String str65 = fileEntry0.getName();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file20.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file20.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file29.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file29.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file31.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file31.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file50.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file50.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file59.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file59.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file61.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file61.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 21 + "'", int62 == 21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str65);
    }

    @Test
    public void test1107() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1107");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntry fileEntry0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntry();
        java.lang.String str1 = fileEntry0.name;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator2 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file3 = null;
        fileEntryIterator2.current = file3;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive5 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.lang.String str6 = explodedArchive5.toString();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive7 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file8 = explodedArchive7.root;
        java.io.File file9 = null;
        explodedArchive7.manifestFile = file9;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive11 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest12 = explodedArchive11.manifest;
        explodedArchive11.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive15 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest16 = explodedArchive15.manifest;
        explodedArchive15.recursive = false;
        java.util.jar.Manifest manifest19 = explodedArchive15.manifest;
        java.io.File file20 = explodedArchive15.manifestFile;
        java.io.File file21 = null;
        java.io.File file22 = explodedArchive15.getManifestFile(file21);
        explodedArchive11.manifestFile = file21;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive24 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest25 = explodedArchive24.manifest;
        explodedArchive24.recursive = false;
        java.util.jar.Manifest manifest28 = explodedArchive24.manifest;
        java.io.File file29 = explodedArchive24.manifestFile;
        java.io.File file30 = null;
        java.io.File file31 = explodedArchive24.getManifestFile(file30);
        explodedArchive11.manifestFile = file31;
        java.io.File file33 = explodedArchive7.getManifestFile(file31);
        java.io.File file34 = explodedArchive5.getManifestFile(file31);
        fileEntryIterator2.root = file31;
        fileEntry0.file = file31;
        java.io.File file37 = fileEntry0.getFile();
        java.io.File file38 = fileEntry0.getFile();
        fileEntry0.name = "";
        fileEntry0.name = "file:/server/study-execution/new-nimrod/nimrod-hunoroutput-test-dest/spring-boot/af20dc6cc45c032573413c401f9f73aa75371744/randoop_4/META-INF/MANIFEST.MF";
        fileEntry0.name = "hi!";
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "exploded archive" + "'", str6.equals("exploded archive"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file22.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file22.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file31.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file31.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file33.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file33.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file34.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file34.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file37.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file37.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file38.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file38.toString(), "META-INF/MANIFEST.MF");
    }

    @Test
    public void test1108() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1108");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file1 = explodedArchive0.root;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive2 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest3 = explodedArchive2.manifest;
        explodedArchive2.recursive = false;
        java.util.jar.Manifest manifest6 = explodedArchive2.manifest;
        java.io.File file7 = explodedArchive2.manifestFile;
        java.io.File file8 = null;
        java.io.File file9 = explodedArchive2.getManifestFile(file8);
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator10 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file11 = null;
        fileEntryIterator10.current = file11;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive13 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.lang.String str14 = explodedArchive13.toString();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive15 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file16 = explodedArchive15.root;
        java.io.File file17 = null;
        explodedArchive15.manifestFile = file17;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive19 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest20 = explodedArchive19.manifest;
        explodedArchive19.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive23 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest24 = explodedArchive23.manifest;
        explodedArchive23.recursive = false;
        java.util.jar.Manifest manifest27 = explodedArchive23.manifest;
        java.io.File file28 = explodedArchive23.manifestFile;
        java.io.File file29 = null;
        java.io.File file30 = explodedArchive23.getManifestFile(file29);
        explodedArchive19.manifestFile = file29;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive32 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest33 = explodedArchive32.manifest;
        explodedArchive32.recursive = false;
        java.util.jar.Manifest manifest36 = explodedArchive32.manifest;
        java.io.File file37 = explodedArchive32.manifestFile;
        java.io.File file38 = null;
        java.io.File file39 = explodedArchive32.getManifestFile(file38);
        explodedArchive19.manifestFile = file39;
        java.io.File file41 = explodedArchive15.getManifestFile(file39);
        java.io.File file42 = explodedArchive13.getManifestFile(file39);
        fileEntryIterator10.root = file39;
        explodedArchive2.root = file39;
        java.io.File file45 = explodedArchive0.getManifestFile(file39);
        boolean boolean46 = explodedArchive0.recursive;
        explodedArchive0.recursive = true;
        java.io.File file49 = null;
        explodedArchive0.manifestFile = file49;
        java.io.File file51 = explodedArchive0.manifestFile;
        java.lang.String str52 = explodedArchive0.toString();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file9.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file9.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str14 + "' != '" + "exploded archive" + "'", str14.equals("exploded archive"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file30.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file30.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file39.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file39.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file41.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file41.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file42.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file42.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file45.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file45.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str52 + "' != '" + "exploded archive" + "'", str52.equals("exploded archive"));
    }

    @Test
    public void test1109() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1109");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntry fileEntry0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntry();
        java.io.File file1 = fileEntry0.file;
        java.lang.String str2 = fileEntry0.name;
        fileEntry0.name = "";
        fileEntry0.name = "exploded archive";
        java.lang.String str7 = fileEntry0.name;
        java.lang.Class<?> wildcardClass8 = fileEntry0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str7 + "' != '" + "exploded archive" + "'", str7.equals("exploded archive"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test1110() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1110");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest1 = explodedArchive0.manifest;
        explodedArchive0.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive4 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest5 = explodedArchive4.manifest;
        explodedArchive4.recursive = false;
        java.util.jar.Manifest manifest8 = explodedArchive4.manifest;
        java.io.File file9 = explodedArchive4.manifestFile;
        java.io.File file10 = null;
        java.io.File file11 = explodedArchive4.getManifestFile(file10);
        explodedArchive0.manifestFile = file10;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive13 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest14 = explodedArchive13.manifest;
        explodedArchive13.recursive = false;
        java.util.jar.Manifest manifest17 = explodedArchive13.manifest;
        java.io.File file18 = explodedArchive13.manifestFile;
        java.io.File file19 = null;
        java.io.File file20 = explodedArchive13.getManifestFile(file19);
        explodedArchive0.manifestFile = file20;
        boolean boolean22 = explodedArchive0.recursive;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive23 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest24 = explodedArchive23.manifest;
        java.util.jar.Manifest manifest25 = null;
        explodedArchive23.manifest = manifest25;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntry fileEntry27 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntry();
        java.lang.String str28 = fileEntry27.name;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator29 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file30 = null;
        fileEntryIterator29.current = file30;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive32 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest33 = explodedArchive32.manifest;
        explodedArchive32.recursive = false;
        java.util.jar.Manifest manifest36 = explodedArchive32.manifest;
        java.io.File file37 = explodedArchive32.manifestFile;
        java.io.File file38 = null;
        java.io.File file39 = explodedArchive32.getManifestFile(file38);
        java.util.Iterator<java.io.File> fileItor40 = fileEntryIterator29.listFiles(file39);
        java.io.File file41 = fileEntryIterator29.current;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator42 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file43 = null;
        fileEntryIterator42.current = file43;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive45 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest46 = explodedArchive45.manifest;
        explodedArchive45.recursive = false;
        java.util.jar.Manifest manifest49 = explodedArchive45.manifest;
        java.io.File file50 = explodedArchive45.manifestFile;
        java.io.File file51 = null;
        java.io.File file52 = explodedArchive45.getManifestFile(file51);
        java.util.Iterator<java.io.File> fileItor53 = fileEntryIterator42.listFiles(file52);
        java.util.ArrayDeque<java.util.Iterator<java.io.File>> fileItorQueue54 = new java.util.ArrayDeque<java.util.Iterator<java.io.File>>();
        boolean boolean55 = fileItorQueue54.add(fileItor53);
        fileEntryIterator29.stack = fileItorQueue54;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive57 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest58 = explodedArchive57.manifest;
        explodedArchive57.recursive = false;
        java.io.File file61 = null;
        explodedArchive57.root = file61;
        java.io.File file63 = explodedArchive57.root;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive64 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest65 = explodedArchive64.manifest;
        explodedArchive64.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive68 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest69 = explodedArchive68.manifest;
        explodedArchive68.recursive = false;
        java.util.jar.Manifest manifest72 = explodedArchive68.manifest;
        java.io.File file73 = explodedArchive68.manifestFile;
        java.io.File file74 = null;
        java.io.File file75 = explodedArchive68.getManifestFile(file74);
        explodedArchive64.manifestFile = file74;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive77 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest78 = explodedArchive77.manifest;
        explodedArchive77.recursive = false;
        java.util.jar.Manifest manifest81 = explodedArchive77.manifest;
        java.io.File file82 = explodedArchive77.manifestFile;
        java.io.File file83 = null;
        java.io.File file84 = explodedArchive77.getManifestFile(file83);
        explodedArchive64.manifestFile = file84;
        java.io.File file86 = explodedArchive57.getManifestFile(file84);
        fileEntryIterator29.root = file84;
        fileEntry27.file = file84;
        java.io.File file89 = explodedArchive23.getManifestFile(file84);
        explodedArchive0.manifestFile = file84;
        java.lang.String str91 = explodedArchive0.toString();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Spliterator<org.springframework.boot.loader.archive.Archive.Entry> entrySpliterator92 = explodedArchive0.spliterator();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file11.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file11.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file20.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file20.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file39.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file39.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file52.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file52.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file73);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file75);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file75.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file75.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest78);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest81);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file82);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file84);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file84.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file84.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file86);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file86.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file86.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file89);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file89.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file89.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str91 + "' != '" + "exploded archive" + "'", str91.equals("exploded archive"));
    }

    @Test
    public void test1111() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1111");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file1 = null;
        fileEntryIterator0.current = file1;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive3 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest4 = explodedArchive3.manifest;
        explodedArchive3.recursive = false;
        java.util.jar.Manifest manifest7 = explodedArchive3.manifest;
        java.io.File file8 = explodedArchive3.manifestFile;
        java.io.File file9 = null;
        java.io.File file10 = explodedArchive3.getManifestFile(file9);
        java.util.Iterator<java.io.File> fileItor11 = fileEntryIterator0.listFiles(file10);
        boolean boolean12 = fileEntryIterator0.recursive;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive13 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest14 = explodedArchive13.manifest;
        explodedArchive13.recursive = false;
        java.util.jar.Manifest manifest17 = explodedArchive13.manifest;
        java.io.File file18 = explodedArchive13.manifestFile;
        java.io.File file19 = null;
        java.io.File file20 = explodedArchive13.getManifestFile(file19);
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive21 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest22 = explodedArchive21.manifest;
        explodedArchive21.recursive = false;
        java.io.File file25 = null;
        explodedArchive21.root = file25;
        java.io.File file27 = explodedArchive21.manifestFile;
        java.io.File file28 = explodedArchive21.manifestFile;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator29 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator30 = entryComparator29.reversed();
        java.util.Comparator<java.io.File> fileComparator31 = entryComparator29.reversed();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive32 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest33 = explodedArchive32.manifest;
        explodedArchive32.recursive = false;
        java.util.jar.Manifest manifest36 = explodedArchive32.manifest;
        java.io.File file37 = explodedArchive32.manifestFile;
        java.io.File file38 = null;
        java.io.File file39 = explodedArchive32.getManifestFile(file38);
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive40 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest41 = explodedArchive40.manifest;
        explodedArchive40.recursive = false;
        java.io.File file44 = null;
        explodedArchive40.root = file44;
        java.io.File file46 = explodedArchive40.root;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive47 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest48 = explodedArchive47.manifest;
        explodedArchive47.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive51 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest52 = explodedArchive51.manifest;
        explodedArchive51.recursive = false;
        java.util.jar.Manifest manifest55 = explodedArchive51.manifest;
        java.io.File file56 = explodedArchive51.manifestFile;
        java.io.File file57 = null;
        java.io.File file58 = explodedArchive51.getManifestFile(file57);
        explodedArchive47.manifestFile = file57;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive60 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest61 = explodedArchive60.manifest;
        explodedArchive60.recursive = false;
        java.util.jar.Manifest manifest64 = explodedArchive60.manifest;
        java.io.File file65 = explodedArchive60.manifestFile;
        java.io.File file66 = null;
        java.io.File file67 = explodedArchive60.getManifestFile(file66);
        explodedArchive47.manifestFile = file67;
        java.io.File file69 = explodedArchive40.getManifestFile(file67);
        int int70 = entryComparator29.compare(file39, file67);
        explodedArchive21.root = file67;
        java.io.File file72 = explodedArchive13.getManifestFile(file67);
        java.util.Iterator<java.io.File> fileItor73 = fileEntryIterator0.listFiles(file72);
        java.lang.Class<?> wildcardClass74 = fileEntryIterator0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file20.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file20.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file39.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file39.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file58.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file58.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file67.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file67.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file69.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file69.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file72.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file72.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor73);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass74);
    }

    @Test
    public void test1112() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1112");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file1 = explodedArchive0.root;
        java.io.File file2 = null;
        explodedArchive0.manifestFile = file2;
        java.io.File file4 = explodedArchive0.root;
        boolean boolean5 = explodedArchive0.recursive;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive6 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest7 = explodedArchive6.manifest;
        explodedArchive6.recursive = false;
        java.io.File file10 = null;
        explodedArchive6.root = file10;
        java.io.File file12 = explodedArchive6.root;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive13 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest14 = explodedArchive13.manifest;
        explodedArchive13.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive17 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest18 = explodedArchive17.manifest;
        explodedArchive17.recursive = false;
        java.util.jar.Manifest manifest21 = explodedArchive17.manifest;
        java.io.File file22 = explodedArchive17.manifestFile;
        java.io.File file23 = null;
        java.io.File file24 = explodedArchive17.getManifestFile(file23);
        explodedArchive13.manifestFile = file23;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive26 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest27 = explodedArchive26.manifest;
        explodedArchive26.recursive = false;
        java.util.jar.Manifest manifest30 = explodedArchive26.manifest;
        java.io.File file31 = explodedArchive26.manifestFile;
        java.io.File file32 = null;
        java.io.File file33 = explodedArchive26.getManifestFile(file32);
        explodedArchive13.manifestFile = file33;
        java.io.File file35 = explodedArchive6.getManifestFile(file33);
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntry fileEntry36 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntry();
        java.lang.String str37 = fileEntry36.name;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator38 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file39 = null;
        fileEntryIterator38.current = file39;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive41 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.lang.String str42 = explodedArchive41.toString();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive43 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file44 = explodedArchive43.root;
        java.io.File file45 = null;
        explodedArchive43.manifestFile = file45;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive47 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest48 = explodedArchive47.manifest;
        explodedArchive47.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive51 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest52 = explodedArchive51.manifest;
        explodedArchive51.recursive = false;
        java.util.jar.Manifest manifest55 = explodedArchive51.manifest;
        java.io.File file56 = explodedArchive51.manifestFile;
        java.io.File file57 = null;
        java.io.File file58 = explodedArchive51.getManifestFile(file57);
        explodedArchive47.manifestFile = file57;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive60 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest61 = explodedArchive60.manifest;
        explodedArchive60.recursive = false;
        java.util.jar.Manifest manifest64 = explodedArchive60.manifest;
        java.io.File file65 = explodedArchive60.manifestFile;
        java.io.File file66 = null;
        java.io.File file67 = explodedArchive60.getManifestFile(file66);
        explodedArchive47.manifestFile = file67;
        java.io.File file69 = explodedArchive43.getManifestFile(file67);
        java.io.File file70 = explodedArchive41.getManifestFile(file67);
        fileEntryIterator38.root = file67;
        fileEntry36.file = file67;
        java.io.File file73 = fileEntry36.file;
        explodedArchive6.root = file73;
        java.io.File file75 = explodedArchive6.manifestFile;
        java.io.File file76 = explodedArchive6.root;
        explodedArchive0.manifestFile = file76;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator<org.springframework.boot.loader.archive.Archive.Entry> entryItor78 = explodedArchive0.iterator();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file24.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file24.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file33.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file33.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file35.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file35.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str42 + "' != '" + "exploded archive" + "'", str42.equals("exploded archive"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file58.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file58.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file67.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file67.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file69.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file69.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file70.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file70.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file73);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file73.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file73.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file75);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file76);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file76.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file76.toString(), "META-INF/MANIFEST.MF");
    }

    @Test
    public void test1113() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1113");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file1 = explodedArchive0.root;
        java.io.File file2 = explodedArchive0.manifestFile;
        java.util.jar.Manifest manifest3 = null;
        explodedArchive0.manifest = manifest3;
        explodedArchive0.recursive = true;
        java.util.jar.Manifest manifest7 = explodedArchive0.manifest;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest7);
    }

    @Test
    public void test1114() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1114");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest1 = explodedArchive0.manifest;
        explodedArchive0.recursive = false;
        java.io.File file4 = null;
        explodedArchive0.root = file4;
        java.io.File file6 = explodedArchive0.root;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive7 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest8 = explodedArchive7.manifest;
        explodedArchive7.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive11 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest12 = explodedArchive11.manifest;
        explodedArchive11.recursive = false;
        java.util.jar.Manifest manifest15 = explodedArchive11.manifest;
        java.io.File file16 = explodedArchive11.manifestFile;
        java.io.File file17 = null;
        java.io.File file18 = explodedArchive11.getManifestFile(file17);
        explodedArchive7.manifestFile = file17;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive20 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest21 = explodedArchive20.manifest;
        explodedArchive20.recursive = false;
        java.util.jar.Manifest manifest24 = explodedArchive20.manifest;
        java.io.File file25 = explodedArchive20.manifestFile;
        java.io.File file26 = null;
        java.io.File file27 = explodedArchive20.getManifestFile(file26);
        explodedArchive7.manifestFile = file27;
        java.io.File file29 = explodedArchive0.getManifestFile(file27);
        boolean boolean30 = explodedArchive0.recursive;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntry fileEntry31 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntry();
        java.lang.String str32 = fileEntry31.name;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator33 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file34 = null;
        fileEntryIterator33.current = file34;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive36 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.lang.String str37 = explodedArchive36.toString();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive38 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file39 = explodedArchive38.root;
        java.io.File file40 = null;
        explodedArchive38.manifestFile = file40;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive42 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest43 = explodedArchive42.manifest;
        explodedArchive42.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive46 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest47 = explodedArchive46.manifest;
        explodedArchive46.recursive = false;
        java.util.jar.Manifest manifest50 = explodedArchive46.manifest;
        java.io.File file51 = explodedArchive46.manifestFile;
        java.io.File file52 = null;
        java.io.File file53 = explodedArchive46.getManifestFile(file52);
        explodedArchive42.manifestFile = file52;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive55 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest56 = explodedArchive55.manifest;
        explodedArchive55.recursive = false;
        java.util.jar.Manifest manifest59 = explodedArchive55.manifest;
        java.io.File file60 = explodedArchive55.manifestFile;
        java.io.File file61 = null;
        java.io.File file62 = explodedArchive55.getManifestFile(file61);
        explodedArchive42.manifestFile = file62;
        java.io.File file64 = explodedArchive38.getManifestFile(file62);
        java.io.File file65 = explodedArchive36.getManifestFile(file62);
        fileEntryIterator33.root = file62;
        fileEntry31.file = file62;
        java.io.File file68 = explodedArchive0.getManifestFile(file62);
        // The following exception was thrown during execution in test generation
        try {
            java.util.jar.Manifest manifest69 = explodedArchive0.getManifest();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file18.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file18.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file27.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file27.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file29.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file29.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str37 + "' != '" + "exploded archive" + "'", str37.equals("exploded archive"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file53.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file53.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file62.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file62.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file64.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file64.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file65.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file65.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file68.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file68.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
    }

    @Test
    public void test1115() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1115");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest1 = explodedArchive0.manifest;
        java.util.jar.Manifest manifest2 = null;
        explodedArchive0.manifest = manifest2;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator4 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        boolean boolean5 = fileEntryIterator4.hasNext();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator6 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator7 = entryComparator6.reversed();
        java.util.Comparator<java.io.File> fileComparator8 = fileComparator7.reversed();
        fileEntryIterator4.entryComparator = fileComparator8;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive10 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file11 = explodedArchive10.root;
        java.io.File file12 = null;
        explodedArchive10.manifestFile = file12;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive14 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest15 = explodedArchive14.manifest;
        explodedArchive14.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive18 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest19 = explodedArchive18.manifest;
        explodedArchive18.recursive = false;
        java.util.jar.Manifest manifest22 = explodedArchive18.manifest;
        java.io.File file23 = explodedArchive18.manifestFile;
        java.io.File file24 = null;
        java.io.File file25 = explodedArchive18.getManifestFile(file24);
        explodedArchive14.manifestFile = file24;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive27 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest28 = explodedArchive27.manifest;
        explodedArchive27.recursive = false;
        java.util.jar.Manifest manifest31 = explodedArchive27.manifest;
        java.io.File file32 = explodedArchive27.manifestFile;
        java.io.File file33 = null;
        java.io.File file34 = explodedArchive27.getManifestFile(file33);
        explodedArchive14.manifestFile = file34;
        java.io.File file36 = explodedArchive10.getManifestFile(file34);
        java.util.Iterator<java.io.File> fileItor37 = fileEntryIterator4.listFiles(file36);
        java.io.File file38 = explodedArchive0.getManifestFile(file36);
        java.lang.String str39 = explodedArchive0.toString();
        java.util.jar.Manifest manifest40 = null;
        explodedArchive0.manifest = manifest40;
        java.lang.String str42 = explodedArchive0.toString();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file25.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file25.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file34.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file34.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file36.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file36.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file38.getParent(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file38.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str39 + "' != '" + "exploded archive" + "'", str39.equals("exploded archive"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str42 + "' != '" + "exploded archive" + "'", str42.equals("exploded archive"));
    }

    @Test
    public void test1116() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1116");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file1 = null;
        fileEntryIterator0.current = file1;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive3 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest4 = explodedArchive3.manifest;
        explodedArchive3.recursive = false;
        java.util.jar.Manifest manifest7 = explodedArchive3.manifest;
        java.io.File file8 = explodedArchive3.manifestFile;
        java.io.File file9 = null;
        java.io.File file10 = explodedArchive3.getManifestFile(file9);
        java.util.Iterator<java.io.File> fileItor11 = fileEntryIterator0.listFiles(file10);
        java.io.File file12 = fileEntryIterator0.current;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator13 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file14 = null;
        fileEntryIterator13.current = file14;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive16 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest17 = explodedArchive16.manifest;
        explodedArchive16.recursive = false;
        java.util.jar.Manifest manifest20 = explodedArchive16.manifest;
        java.io.File file21 = explodedArchive16.manifestFile;
        java.io.File file22 = null;
        java.io.File file23 = explodedArchive16.getManifestFile(file22);
        java.util.Iterator<java.io.File> fileItor24 = fileEntryIterator13.listFiles(file23);
        java.util.ArrayDeque<java.util.Iterator<java.io.File>> fileItorQueue25 = new java.util.ArrayDeque<java.util.Iterator<java.io.File>>();
        boolean boolean26 = fileItorQueue25.add(fileItor24);
        fileEntryIterator0.stack = fileItorQueue25;
        boolean boolean28 = fileEntryIterator0.recursive;
        boolean boolean29 = fileEntryIterator0.hasNext();
        // The following exception was thrown during execution in test generation
        try {
            fileEntryIterator0.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: remove");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file23.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file23.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
    }

    @Test
    public void test1117() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1117");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest1 = explodedArchive0.manifest;
        explodedArchive0.recursive = false;
        java.io.File file4 = null;
        explodedArchive0.root = file4;
        java.io.File file6 = explodedArchive0.root;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive7 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest8 = explodedArchive7.manifest;
        explodedArchive7.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive11 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest12 = explodedArchive11.manifest;
        explodedArchive11.recursive = false;
        java.util.jar.Manifest manifest15 = explodedArchive11.manifest;
        java.io.File file16 = explodedArchive11.manifestFile;
        java.io.File file17 = null;
        java.io.File file18 = explodedArchive11.getManifestFile(file17);
        explodedArchive7.manifestFile = file17;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive20 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest21 = explodedArchive20.manifest;
        explodedArchive20.recursive = false;
        java.util.jar.Manifest manifest24 = explodedArchive20.manifest;
        java.io.File file25 = explodedArchive20.manifestFile;
        java.io.File file26 = null;
        java.io.File file27 = explodedArchive20.getManifestFile(file26);
        explodedArchive7.manifestFile = file27;
        java.io.File file29 = explodedArchive0.getManifestFile(file27);
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntry fileEntry30 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntry();
        java.lang.String str31 = fileEntry30.name;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator32 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file33 = null;
        fileEntryIterator32.current = file33;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive35 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.lang.String str36 = explodedArchive35.toString();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive37 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file38 = explodedArchive37.root;
        java.io.File file39 = null;
        explodedArchive37.manifestFile = file39;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive41 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest42 = explodedArchive41.manifest;
        explodedArchive41.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive45 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest46 = explodedArchive45.manifest;
        explodedArchive45.recursive = false;
        java.util.jar.Manifest manifest49 = explodedArchive45.manifest;
        java.io.File file50 = explodedArchive45.manifestFile;
        java.io.File file51 = null;
        java.io.File file52 = explodedArchive45.getManifestFile(file51);
        explodedArchive41.manifestFile = file51;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive54 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest55 = explodedArchive54.manifest;
        explodedArchive54.recursive = false;
        java.util.jar.Manifest manifest58 = explodedArchive54.manifest;
        java.io.File file59 = explodedArchive54.manifestFile;
        java.io.File file60 = null;
        java.io.File file61 = explodedArchive54.getManifestFile(file60);
        explodedArchive41.manifestFile = file61;
        java.io.File file63 = explodedArchive37.getManifestFile(file61);
        java.io.File file64 = explodedArchive35.getManifestFile(file61);
        fileEntryIterator32.root = file61;
        fileEntry30.file = file61;
        java.io.File file67 = fileEntry30.file;
        explodedArchive0.root = file67;
        java.io.File file69 = explodedArchive0.manifestFile;
        // The following exception was thrown during execution in test generation
        try {
            java.util.jar.Manifest manifest70 = explodedArchive0.getManifest();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file18.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file18.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file27.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file27.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file29.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file29.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str36 + "' != '" + "exploded archive" + "'", str36.equals("exploded archive"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file52.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file52.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file61.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file61.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file63.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file63.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file64.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file64.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file67.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file67.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file69);
    }

    @Test
    public void test1118() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1118");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file1 = null;
        fileEntryIterator0.current = file1;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive3 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest4 = explodedArchive3.manifest;
        explodedArchive3.recursive = false;
        java.util.jar.Manifest manifest7 = explodedArchive3.manifest;
        java.io.File file8 = explodedArchive3.manifestFile;
        java.io.File file9 = null;
        java.io.File file10 = explodedArchive3.getManifestFile(file9);
        java.util.Iterator<java.io.File> fileItor11 = fileEntryIterator0.listFiles(file10);
        java.io.File file12 = fileEntryIterator0.root;
        java.io.File file13 = fileEntryIterator0.poll();
        java.util.Comparator<java.io.File> fileComparator14 = fileEntryIterator0.entryComparator;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator15 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        boolean boolean16 = fileEntryIterator15.hasNext();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator17 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator18 = entryComparator17.reversed();
        java.util.Comparator<java.io.File> fileComparator19 = fileComparator18.reversed();
        fileEntryIterator15.entryComparator = fileComparator19;
        java.util.Comparator<java.io.File> fileComparator21 = fileEntryIterator15.entryComparator;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator22 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator23 = entryComparator22.reversed();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator24 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator25 = entryComparator24.reversed();
        java.util.Comparator<java.io.File> fileComparator26 = entryComparator22.thenComparing(fileComparator25);
        java.util.Comparator<java.io.File> fileComparator27 = fileComparator21.thenComparing(fileComparator25);
        fileEntryIterator0.entryComparator = fileComparator27;
        java.io.File file29 = fileEntryIterator0.root;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator30 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file31 = null;
        fileEntryIterator30.current = file31;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive33 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest34 = explodedArchive33.manifest;
        explodedArchive33.recursive = false;
        java.util.jar.Manifest manifest37 = explodedArchive33.manifest;
        java.io.File file38 = explodedArchive33.manifestFile;
        java.io.File file39 = null;
        java.io.File file40 = explodedArchive33.getManifestFile(file39);
        java.util.Iterator<java.io.File> fileItor41 = fileEntryIterator30.listFiles(file40);
        boolean boolean42 = fileEntryIterator30.hasNext();
        java.util.Comparator<java.io.File> fileComparator43 = fileEntryIterator30.entryComparator;
        fileEntryIterator0.entryComparator = fileComparator43;
        java.io.File file45 = fileEntryIterator0.root;
        boolean boolean46 = fileEntryIterator0.hasNext();
        boolean boolean47 = fileEntryIterator0.recursive;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file40.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file40.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
    }

    @Test
    public void test1119() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1119");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest1 = explodedArchive0.manifest;
        explodedArchive0.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive4 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest5 = explodedArchive4.manifest;
        explodedArchive4.recursive = false;
        java.util.jar.Manifest manifest8 = explodedArchive4.manifest;
        java.io.File file9 = explodedArchive4.manifestFile;
        java.io.File file10 = null;
        java.io.File file11 = explodedArchive4.getManifestFile(file10);
        explodedArchive0.manifestFile = file10;
        java.util.jar.Manifest manifest13 = null;
        explodedArchive0.manifest = manifest13;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive15 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.lang.String str16 = explodedArchive15.toString();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive17 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file18 = explodedArchive17.root;
        java.io.File file19 = null;
        explodedArchive17.manifestFile = file19;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive21 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest22 = explodedArchive21.manifest;
        explodedArchive21.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive25 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest26 = explodedArchive25.manifest;
        explodedArchive25.recursive = false;
        java.util.jar.Manifest manifest29 = explodedArchive25.manifest;
        java.io.File file30 = explodedArchive25.manifestFile;
        java.io.File file31 = null;
        java.io.File file32 = explodedArchive25.getManifestFile(file31);
        explodedArchive21.manifestFile = file31;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive34 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest35 = explodedArchive34.manifest;
        explodedArchive34.recursive = false;
        java.util.jar.Manifest manifest38 = explodedArchive34.manifest;
        java.io.File file39 = explodedArchive34.manifestFile;
        java.io.File file40 = null;
        java.io.File file41 = explodedArchive34.getManifestFile(file40);
        explodedArchive21.manifestFile = file41;
        java.io.File file43 = explodedArchive17.getManifestFile(file41);
        java.io.File file44 = explodedArchive15.getManifestFile(file41);
        java.io.File file45 = null;
        java.io.File file46 = explodedArchive15.getManifestFile(file45);
        java.io.File file47 = explodedArchive0.getManifestFile(file45);
        java.util.jar.Manifest manifest48 = null;
        explodedArchive0.manifest = manifest48;
        boolean boolean50 = explodedArchive0.recursive;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator<org.springframework.boot.loader.archive.Archive.Entry> entryItor51 = explodedArchive0.iterator();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file11.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file11.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str16 + "' != '" + "exploded archive" + "'", str16.equals("exploded archive"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file32.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file32.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file41.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file41.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file43.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file43.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file44.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file44.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file46.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file46.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file47.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file47.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
    }

    @Test
    public void test1120() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1120");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest1 = explodedArchive0.manifest;
        explodedArchive0.recursive = false;
        java.util.jar.Manifest manifest4 = explodedArchive0.manifest;
        java.io.File file5 = explodedArchive0.manifestFile;
        java.io.File file6 = explodedArchive0.root;
        explodedArchive0.recursive = true;
        boolean boolean9 = explodedArchive0.recursive;
        java.util.jar.Manifest manifest10 = explodedArchive0.manifest;
        java.util.jar.Manifest manifest11 = null;
        explodedArchive0.manifest = manifest11;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator13 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        boolean boolean14 = fileEntryIterator13.hasNext();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator15 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator16 = entryComparator15.reversed();
        java.util.Comparator<java.io.File> fileComparator17 = fileComparator16.reversed();
        fileEntryIterator13.entryComparator = fileComparator17;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive19 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file20 = explodedArchive19.root;
        java.io.File file21 = null;
        explodedArchive19.manifestFile = file21;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive23 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest24 = explodedArchive23.manifest;
        explodedArchive23.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive27 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest28 = explodedArchive27.manifest;
        explodedArchive27.recursive = false;
        java.util.jar.Manifest manifest31 = explodedArchive27.manifest;
        java.io.File file32 = explodedArchive27.manifestFile;
        java.io.File file33 = null;
        java.io.File file34 = explodedArchive27.getManifestFile(file33);
        explodedArchive23.manifestFile = file33;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive36 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest37 = explodedArchive36.manifest;
        explodedArchive36.recursive = false;
        java.util.jar.Manifest manifest40 = explodedArchive36.manifest;
        java.io.File file41 = explodedArchive36.manifestFile;
        java.io.File file42 = null;
        java.io.File file43 = explodedArchive36.getManifestFile(file42);
        explodedArchive23.manifestFile = file43;
        java.io.File file45 = explodedArchive19.getManifestFile(file43);
        java.util.Iterator<java.io.File> fileItor46 = fileEntryIterator13.listFiles(file45);
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntry fileEntry47 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntry();
        java.lang.String str48 = fileEntry47.name;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator49 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file50 = null;
        fileEntryIterator49.current = file50;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive52 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.lang.String str53 = explodedArchive52.toString();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive54 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file55 = explodedArchive54.root;
        java.io.File file56 = null;
        explodedArchive54.manifestFile = file56;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive58 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest59 = explodedArchive58.manifest;
        explodedArchive58.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive62 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest63 = explodedArchive62.manifest;
        explodedArchive62.recursive = false;
        java.util.jar.Manifest manifest66 = explodedArchive62.manifest;
        java.io.File file67 = explodedArchive62.manifestFile;
        java.io.File file68 = null;
        java.io.File file69 = explodedArchive62.getManifestFile(file68);
        explodedArchive58.manifestFile = file68;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive71 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest72 = explodedArchive71.manifest;
        explodedArchive71.recursive = false;
        java.util.jar.Manifest manifest75 = explodedArchive71.manifest;
        java.io.File file76 = explodedArchive71.manifestFile;
        java.io.File file77 = null;
        java.io.File file78 = explodedArchive71.getManifestFile(file77);
        explodedArchive58.manifestFile = file78;
        java.io.File file80 = explodedArchive54.getManifestFile(file78);
        java.io.File file81 = explodedArchive52.getManifestFile(file78);
        fileEntryIterator49.root = file78;
        fileEntry47.file = file78;
        java.io.File file84 = fileEntry47.getFile();
        java.io.File file85 = fileEntry47.getFile();
        java.util.Iterator<java.io.File> fileItor86 = fileEntryIterator13.listFiles(file85);
        explodedArchive0.root = file85;
        // The following exception was thrown during execution in test generation
        try {
            java.util.jar.Manifest manifest88 = explodedArchive0.getManifest();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file34.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file34.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file43.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file43.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file45.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file45.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str53 + "' != '" + "exploded archive" + "'", str53.equals("exploded archive"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file69.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file69.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest75);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file76);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file78);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file78.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file78.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file80);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file80.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file80.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file81);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file81.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file81.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file84);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file84.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file84.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file85);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file85.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file85.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor86);
    }

    @Test
    public void test1121() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1121");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file1 = null;
        fileEntryIterator0.current = file1;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive3 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest4 = explodedArchive3.manifest;
        explodedArchive3.recursive = false;
        java.util.jar.Manifest manifest7 = explodedArchive3.manifest;
        java.io.File file8 = explodedArchive3.manifestFile;
        java.io.File file9 = null;
        java.io.File file10 = explodedArchive3.getManifestFile(file9);
        java.util.Iterator<java.io.File> fileItor11 = fileEntryIterator0.listFiles(file10);
        java.io.File file12 = fileEntryIterator0.root;
        java.io.File file13 = fileEntryIterator0.root;
        java.util.Deque<java.util.Iterator<java.io.File>> fileItorQueue14 = fileEntryIterator0.stack;
        java.io.File file15 = fileEntryIterator0.root;
        java.util.Comparator<java.io.File> fileComparator16 = fileEntryIterator0.entryComparator;
        java.util.Comparator<java.io.File> fileComparator17 = fileComparator16.reversed();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItorQueue14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator17);
    }

    @Test
    public void test1122() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1122");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest1 = explodedArchive0.manifest;
        java.util.jar.Manifest manifest2 = null;
        explodedArchive0.manifest = manifest2;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive4 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest5 = explodedArchive4.manifest;
        explodedArchive4.recursive = false;
        java.util.jar.Manifest manifest8 = explodedArchive4.manifest;
        java.io.File file9 = explodedArchive4.manifestFile;
        java.io.File file10 = null;
        java.io.File file11 = explodedArchive4.getManifestFile(file10);
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator12 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file13 = null;
        fileEntryIterator12.current = file13;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive15 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.lang.String str16 = explodedArchive15.toString();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive17 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file18 = explodedArchive17.root;
        java.io.File file19 = null;
        explodedArchive17.manifestFile = file19;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive21 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest22 = explodedArchive21.manifest;
        explodedArchive21.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive25 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest26 = explodedArchive25.manifest;
        explodedArchive25.recursive = false;
        java.util.jar.Manifest manifest29 = explodedArchive25.manifest;
        java.io.File file30 = explodedArchive25.manifestFile;
        java.io.File file31 = null;
        java.io.File file32 = explodedArchive25.getManifestFile(file31);
        explodedArchive21.manifestFile = file31;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive34 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest35 = explodedArchive34.manifest;
        explodedArchive34.recursive = false;
        java.util.jar.Manifest manifest38 = explodedArchive34.manifest;
        java.io.File file39 = explodedArchive34.manifestFile;
        java.io.File file40 = null;
        java.io.File file41 = explodedArchive34.getManifestFile(file40);
        explodedArchive21.manifestFile = file41;
        java.io.File file43 = explodedArchive17.getManifestFile(file41);
        java.io.File file44 = explodedArchive15.getManifestFile(file41);
        fileEntryIterator12.root = file41;
        explodedArchive4.root = file41;
        explodedArchive0.root = file41;
        java.util.Iterator<org.springframework.boot.loader.archive.Archive.Entry> entryItor48 = explodedArchive0.iterator();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file11.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file11.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str16 + "' != '" + "exploded archive" + "'", str16.equals("exploded archive"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file32.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file32.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file41.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file41.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file43.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file43.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file44.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file44.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(entryItor48);
    }

    @Test
    public void test1123() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1123");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file1 = explodedArchive0.root;
        java.io.File file2 = null;
        explodedArchive0.manifestFile = file2;
        java.io.File file4 = explodedArchive0.root;
        java.util.jar.Manifest manifest5 = null;
        explodedArchive0.manifest = manifest5;
        java.lang.String str7 = explodedArchive0.toString();
        java.util.jar.Manifest manifest8 = null;
        explodedArchive0.manifest = manifest8;
        // The following exception was thrown during execution in test generation
        try {
            java.net.URL uRL10 = explodedArchive0.getUrl();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str7 + "' != '" + "exploded archive" + "'", str7.equals("exploded archive"));
    }

    @Test
    public void test1124() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1124");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest1 = explodedArchive0.manifest;
        explodedArchive0.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive4 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest5 = explodedArchive4.manifest;
        explodedArchive4.recursive = false;
        java.util.jar.Manifest manifest8 = explodedArchive4.manifest;
        java.io.File file9 = explodedArchive4.manifestFile;
        java.io.File file10 = null;
        java.io.File file11 = explodedArchive4.getManifestFile(file10);
        explodedArchive0.manifestFile = file10;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive13 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest14 = explodedArchive13.manifest;
        explodedArchive13.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive17 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest18 = explodedArchive17.manifest;
        explodedArchive17.recursive = false;
        java.util.jar.Manifest manifest21 = explodedArchive17.manifest;
        java.io.File file22 = explodedArchive17.manifestFile;
        java.io.File file23 = null;
        java.io.File file24 = explodedArchive17.getManifestFile(file23);
        explodedArchive13.manifestFile = file23;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive26 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest27 = explodedArchive26.manifest;
        explodedArchive26.recursive = false;
        java.util.jar.Manifest manifest30 = explodedArchive26.manifest;
        java.io.File file31 = explodedArchive26.manifestFile;
        java.io.File file32 = null;
        java.io.File file33 = explodedArchive26.getManifestFile(file32);
        explodedArchive13.manifestFile = file33;
        explodedArchive0.root = file33;
        java.net.URL uRL36 = explodedArchive0.getUrl();
        java.net.URL uRL37 = explodedArchive0.getUrl();
        java.io.File file38 = null;
        java.io.File file39 = explodedArchive0.getManifestFile(file38);
        java.util.Spliterator<org.springframework.boot.loader.archive.Archive.Entry> entrySpliterator40 = explodedArchive0.spliterator();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntry fileEntry41 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntry();
        java.lang.String str42 = fileEntry41.name;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator43 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file44 = null;
        fileEntryIterator43.current = file44;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive46 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.lang.String str47 = explodedArchive46.toString();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive48 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file49 = explodedArchive48.root;
        java.io.File file50 = null;
        explodedArchive48.manifestFile = file50;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive52 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest53 = explodedArchive52.manifest;
        explodedArchive52.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive56 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest57 = explodedArchive56.manifest;
        explodedArchive56.recursive = false;
        java.util.jar.Manifest manifest60 = explodedArchive56.manifest;
        java.io.File file61 = explodedArchive56.manifestFile;
        java.io.File file62 = null;
        java.io.File file63 = explodedArchive56.getManifestFile(file62);
        explodedArchive52.manifestFile = file62;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive65 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest66 = explodedArchive65.manifest;
        explodedArchive65.recursive = false;
        java.util.jar.Manifest manifest69 = explodedArchive65.manifest;
        java.io.File file70 = explodedArchive65.manifestFile;
        java.io.File file71 = null;
        java.io.File file72 = explodedArchive65.getManifestFile(file71);
        explodedArchive52.manifestFile = file72;
        java.io.File file74 = explodedArchive48.getManifestFile(file72);
        java.io.File file75 = explodedArchive46.getManifestFile(file72);
        fileEntryIterator43.root = file72;
        fileEntry41.file = file72;
        java.io.File file78 = fileEntry41.file;
        fileEntry41.name = "hi!";
        // The following exception was thrown during execution in test generation
        try {
            org.springframework.boot.loader.archive.Archive archive81 = explodedArchive0.getNestedArchive((org.springframework.boot.loader.archive.Archive.Entry) fileEntry41);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: File must exist");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file11.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file11.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file24.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file24.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file33.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file33.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(uRL36);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(uRL36.toString(), "file:/server/study-execution/new-nimrod/nimrod-hunoroutput-test-dest/spring-boot/af20dc6cc45c032573413c401f9f73aa75371744/randoop_4/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(uRL37);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(uRL37.toString(), "file:/server/study-execution/new-nimrod/nimrod-hunoroutput-test-dest/spring-boot/af20dc6cc45c032573413c401f9f73aa75371744/randoop_4/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file39.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file39.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(entrySpliterator40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str47 + "' != '" + "exploded archive" + "'", str47.equals("exploded archive"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file63.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file63.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file72.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file72.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file74.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file74.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file75);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file75.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file75.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file78);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file78.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file78.toString(), "META-INF/MANIFEST.MF");
    }

    @Test
    public void test1125() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1125");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file1 = explodedArchive0.root;
        java.io.File file2 = null;
        explodedArchive0.manifestFile = file2;
        java.io.File file4 = explodedArchive0.root;
        java.lang.String str5 = explodedArchive0.toString();
        java.util.jar.Manifest manifest6 = null;
        explodedArchive0.manifest = manifest6;
        java.io.File file8 = explodedArchive0.root;
        boolean boolean9 = explodedArchive0.recursive;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive10 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest11 = explodedArchive10.manifest;
        explodedArchive10.recursive = false;
        java.io.File file14 = null;
        explodedArchive10.root = file14;
        java.io.File file16 = explodedArchive10.manifestFile;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive17 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file18 = explodedArchive17.root;
        java.io.File file19 = null;
        explodedArchive17.manifestFile = file19;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive21 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest22 = explodedArchive21.manifest;
        explodedArchive21.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive25 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest26 = explodedArchive25.manifest;
        explodedArchive25.recursive = false;
        java.util.jar.Manifest manifest29 = explodedArchive25.manifest;
        java.io.File file30 = explodedArchive25.manifestFile;
        java.io.File file31 = null;
        java.io.File file32 = explodedArchive25.getManifestFile(file31);
        explodedArchive21.manifestFile = file31;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive34 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest35 = explodedArchive34.manifest;
        explodedArchive34.recursive = false;
        java.util.jar.Manifest manifest38 = explodedArchive34.manifest;
        java.io.File file39 = explodedArchive34.manifestFile;
        java.io.File file40 = null;
        java.io.File file41 = explodedArchive34.getManifestFile(file40);
        explodedArchive21.manifestFile = file41;
        java.io.File file43 = explodedArchive17.getManifestFile(file41);
        java.io.File file44 = explodedArchive17.root;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator45 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        boolean boolean46 = fileEntryIterator45.hasNext();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator47 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator48 = entryComparator47.reversed();
        java.util.Comparator<java.io.File> fileComparator49 = fileComparator48.reversed();
        fileEntryIterator45.entryComparator = fileComparator49;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive51 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file52 = explodedArchive51.root;
        java.io.File file53 = null;
        explodedArchive51.manifestFile = file53;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive55 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest56 = explodedArchive55.manifest;
        explodedArchive55.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive59 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest60 = explodedArchive59.manifest;
        explodedArchive59.recursive = false;
        java.util.jar.Manifest manifest63 = explodedArchive59.manifest;
        java.io.File file64 = explodedArchive59.manifestFile;
        java.io.File file65 = null;
        java.io.File file66 = explodedArchive59.getManifestFile(file65);
        explodedArchive55.manifestFile = file65;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive68 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest69 = explodedArchive68.manifest;
        explodedArchive68.recursive = false;
        java.util.jar.Manifest manifest72 = explodedArchive68.manifest;
        java.io.File file73 = explodedArchive68.manifestFile;
        java.io.File file74 = null;
        java.io.File file75 = explodedArchive68.getManifestFile(file74);
        explodedArchive55.manifestFile = file75;
        java.io.File file77 = explodedArchive51.getManifestFile(file75);
        java.util.Iterator<java.io.File> fileItor78 = fileEntryIterator45.listFiles(file77);
        explodedArchive17.manifestFile = file77;
        java.io.File file80 = explodedArchive17.manifestFile;
        java.io.File file81 = explodedArchive10.getManifestFile(file80);
        java.io.File file82 = explodedArchive0.getManifestFile(file81);
        java.lang.String str83 = explodedArchive0.toString();
        java.util.jar.Manifest manifest84 = explodedArchive0.manifest;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "exploded archive" + "'", str5.equals("exploded archive"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file32.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file32.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file41.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file41.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file43.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file43.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file66.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file66.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file73);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file75);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file75.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file75.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file77);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file77.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file77.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor78);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file80);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file80.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file80.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file81);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file81.getParent(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file81.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file82);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file82.getParent(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF/META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file82.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF/META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str83 + "' != '" + "exploded archive" + "'", str83.equals("exploded archive"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest84);
    }

    @Test
    public void test1126() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1126");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file1 = explodedArchive0.root;
        java.io.File file2 = null;
        explodedArchive0.manifestFile = file2;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive4 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest5 = explodedArchive4.manifest;
        explodedArchive4.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive8 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest9 = explodedArchive8.manifest;
        explodedArchive8.recursive = false;
        java.util.jar.Manifest manifest12 = explodedArchive8.manifest;
        java.io.File file13 = explodedArchive8.manifestFile;
        java.io.File file14 = null;
        java.io.File file15 = explodedArchive8.getManifestFile(file14);
        explodedArchive4.manifestFile = file14;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive17 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest18 = explodedArchive17.manifest;
        explodedArchive17.recursive = false;
        java.util.jar.Manifest manifest21 = explodedArchive17.manifest;
        java.io.File file22 = explodedArchive17.manifestFile;
        java.io.File file23 = null;
        java.io.File file24 = explodedArchive17.getManifestFile(file23);
        explodedArchive4.manifestFile = file24;
        java.io.File file26 = explodedArchive0.getManifestFile(file24);
        java.util.jar.Manifest manifest27 = null;
        explodedArchive0.manifest = manifest27;
        java.io.File file29 = explodedArchive0.root;
        explodedArchive0.recursive = false;
        boolean boolean32 = explodedArchive0.recursive;
        boolean boolean33 = explodedArchive0.recursive;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file15.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file15.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file24.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file24.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file26.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file26.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
    }

    @Test
    public void test1127() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1127");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest1 = explodedArchive0.manifest;
        explodedArchive0.recursive = false;
        java.io.File file4 = null;
        explodedArchive0.root = file4;
        java.io.File file6 = explodedArchive0.root;
        java.util.jar.Manifest manifest7 = null;
        explodedArchive0.manifest = manifest7;
        java.util.jar.Manifest manifest9 = null;
        explodedArchive0.manifest = manifest9;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator11 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file12 = null;
        fileEntryIterator11.current = file12;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive14 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest15 = explodedArchive14.manifest;
        explodedArchive14.recursive = false;
        java.util.jar.Manifest manifest18 = explodedArchive14.manifest;
        java.io.File file19 = explodedArchive14.manifestFile;
        java.io.File file20 = null;
        java.io.File file21 = explodedArchive14.getManifestFile(file20);
        java.util.Iterator<java.io.File> fileItor22 = fileEntryIterator11.listFiles(file21);
        java.io.File file23 = fileEntryIterator11.root;
        java.io.File file24 = fileEntryIterator11.root;
        java.util.Deque<java.util.Iterator<java.io.File>> fileItorQueue25 = fileEntryIterator11.stack;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive26 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.lang.String str27 = explodedArchive26.toString();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive28 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file29 = explodedArchive28.root;
        java.io.File file30 = null;
        explodedArchive28.manifestFile = file30;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive32 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest33 = explodedArchive32.manifest;
        explodedArchive32.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive36 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest37 = explodedArchive36.manifest;
        explodedArchive36.recursive = false;
        java.util.jar.Manifest manifest40 = explodedArchive36.manifest;
        java.io.File file41 = explodedArchive36.manifestFile;
        java.io.File file42 = null;
        java.io.File file43 = explodedArchive36.getManifestFile(file42);
        explodedArchive32.manifestFile = file42;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive45 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest46 = explodedArchive45.manifest;
        explodedArchive45.recursive = false;
        java.util.jar.Manifest manifest49 = explodedArchive45.manifest;
        java.io.File file50 = explodedArchive45.manifestFile;
        java.io.File file51 = null;
        java.io.File file52 = explodedArchive45.getManifestFile(file51);
        explodedArchive32.manifestFile = file52;
        java.io.File file54 = explodedArchive28.getManifestFile(file52);
        java.io.File file55 = explodedArchive26.getManifestFile(file52);
        fileEntryIterator11.current = file52;
        explodedArchive0.manifestFile = file52;
        java.util.jar.Manifest manifest58 = explodedArchive0.getManifest();
        java.lang.String str59 = explodedArchive0.toString();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file21.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file21.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItorQueue25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str27 + "' != '" + "exploded archive" + "'", str27.equals("exploded archive"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file43.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file43.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file52.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file52.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file54.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file54.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file55.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file55.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str59 + "' != '" + "exploded archive" + "'", str59.equals("exploded archive"));
    }

    @Test
    public void test1128() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1128");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file1 = explodedArchive0.root;
        java.io.File file2 = null;
        explodedArchive0.manifestFile = file2;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive4 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest5 = explodedArchive4.manifest;
        explodedArchive4.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive8 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest9 = explodedArchive8.manifest;
        explodedArchive8.recursive = false;
        java.util.jar.Manifest manifest12 = explodedArchive8.manifest;
        java.io.File file13 = explodedArchive8.manifestFile;
        java.io.File file14 = null;
        java.io.File file15 = explodedArchive8.getManifestFile(file14);
        explodedArchive4.manifestFile = file14;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive17 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest18 = explodedArchive17.manifest;
        explodedArchive17.recursive = false;
        java.util.jar.Manifest manifest21 = explodedArchive17.manifest;
        java.io.File file22 = explodedArchive17.manifestFile;
        java.io.File file23 = null;
        java.io.File file24 = explodedArchive17.getManifestFile(file23);
        explodedArchive4.manifestFile = file24;
        java.io.File file26 = explodedArchive0.getManifestFile(file24);
        java.io.File file27 = explodedArchive0.root;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator28 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        boolean boolean29 = fileEntryIterator28.hasNext();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator30 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator31 = entryComparator30.reversed();
        java.util.Comparator<java.io.File> fileComparator32 = fileComparator31.reversed();
        fileEntryIterator28.entryComparator = fileComparator32;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive34 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file35 = explodedArchive34.root;
        java.io.File file36 = null;
        explodedArchive34.manifestFile = file36;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive38 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest39 = explodedArchive38.manifest;
        explodedArchive38.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive42 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest43 = explodedArchive42.manifest;
        explodedArchive42.recursive = false;
        java.util.jar.Manifest manifest46 = explodedArchive42.manifest;
        java.io.File file47 = explodedArchive42.manifestFile;
        java.io.File file48 = null;
        java.io.File file49 = explodedArchive42.getManifestFile(file48);
        explodedArchive38.manifestFile = file48;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive51 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest52 = explodedArchive51.manifest;
        explodedArchive51.recursive = false;
        java.util.jar.Manifest manifest55 = explodedArchive51.manifest;
        java.io.File file56 = explodedArchive51.manifestFile;
        java.io.File file57 = null;
        java.io.File file58 = explodedArchive51.getManifestFile(file57);
        explodedArchive38.manifestFile = file58;
        java.io.File file60 = explodedArchive34.getManifestFile(file58);
        java.util.Iterator<java.io.File> fileItor61 = fileEntryIterator28.listFiles(file60);
        explodedArchive0.manifestFile = file60;
        java.io.File file63 = explodedArchive0.root;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive64 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.lang.String str65 = explodedArchive64.toString();
        explodedArchive64.recursive = true;
        java.io.File file68 = null;
        java.io.File file69 = explodedArchive64.getManifestFile(file68);
        explodedArchive0.manifestFile = file69;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file15.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file15.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file24.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file24.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file26.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file26.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file49.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file49.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file58.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file58.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file60.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file60.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str65 + "' != '" + "exploded archive" + "'", str65.equals("exploded archive"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file69.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file69.toString(), "META-INF/MANIFEST.MF");
    }

    @Test
    public void test1129() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1129");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest1 = explodedArchive0.manifest;
        explodedArchive0.recursive = false;
        java.io.File file4 = null;
        explodedArchive0.root = file4;
        java.io.File file6 = explodedArchive0.root;
        java.util.jar.Manifest manifest7 = null;
        explodedArchive0.manifest = manifest7;
        explodedArchive0.recursive = false;
        java.util.jar.Manifest manifest11 = null;
        explodedArchive0.manifest = manifest11;
        boolean boolean13 = explodedArchive0.recursive;
        java.util.jar.Manifest manifest14 = explodedArchive0.manifest;
        explodedArchive0.recursive = false;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest14);
    }

    @Test
    public void test1130() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1130");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file1 = null;
        fileEntryIterator0.current = file1;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive3 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest4 = explodedArchive3.manifest;
        explodedArchive3.recursive = false;
        java.util.jar.Manifest manifest7 = explodedArchive3.manifest;
        java.io.File file8 = explodedArchive3.manifestFile;
        java.io.File file9 = null;
        java.io.File file10 = explodedArchive3.getManifestFile(file9);
        java.util.Iterator<java.io.File> fileItor11 = fileEntryIterator0.listFiles(file10);
        boolean boolean12 = fileEntryIterator0.hasNext();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator13 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        boolean boolean14 = fileEntryIterator13.recursive;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator15 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        boolean boolean16 = fileEntryIterator15.hasNext();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator17 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator18 = entryComparator17.reversed();
        java.util.Comparator<java.io.File> fileComparator19 = fileComparator18.reversed();
        fileEntryIterator15.entryComparator = fileComparator19;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive21 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file22 = explodedArchive21.root;
        java.io.File file23 = null;
        explodedArchive21.manifestFile = file23;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive25 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest26 = explodedArchive25.manifest;
        explodedArchive25.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive29 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest30 = explodedArchive29.manifest;
        explodedArchive29.recursive = false;
        java.util.jar.Manifest manifest33 = explodedArchive29.manifest;
        java.io.File file34 = explodedArchive29.manifestFile;
        java.io.File file35 = null;
        java.io.File file36 = explodedArchive29.getManifestFile(file35);
        explodedArchive25.manifestFile = file35;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive38 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest39 = explodedArchive38.manifest;
        explodedArchive38.recursive = false;
        java.util.jar.Manifest manifest42 = explodedArchive38.manifest;
        java.io.File file43 = explodedArchive38.manifestFile;
        java.io.File file44 = null;
        java.io.File file45 = explodedArchive38.getManifestFile(file44);
        explodedArchive25.manifestFile = file45;
        java.io.File file47 = explodedArchive21.getManifestFile(file45);
        java.util.Iterator<java.io.File> fileItor48 = fileEntryIterator15.listFiles(file47);
        fileEntryIterator13.root = file47;
        fileEntryIterator0.current = file47;
        java.io.File file51 = fileEntryIterator0.poll();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file36.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file36.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file45.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file45.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file47.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file47.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file51);
    }

    @Test
    public void test1131() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1131");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file1 = null;
        fileEntryIterator0.current = file1;
        fileEntryIterator0.recursive = true;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator5 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file6 = null;
        fileEntryIterator5.current = file6;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive8 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest9 = explodedArchive8.manifest;
        explodedArchive8.recursive = false;
        java.util.jar.Manifest manifest12 = explodedArchive8.manifest;
        java.io.File file13 = explodedArchive8.manifestFile;
        java.io.File file14 = null;
        java.io.File file15 = explodedArchive8.getManifestFile(file14);
        java.util.Iterator<java.io.File> fileItor16 = fileEntryIterator5.listFiles(file15);
        java.io.File file17 = fileEntryIterator5.root;
        java.io.File file18 = fileEntryIterator5.root;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator19 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file20 = null;
        fileEntryIterator19.current = file20;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive22 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest23 = explodedArchive22.manifest;
        explodedArchive22.recursive = false;
        java.util.jar.Manifest manifest26 = explodedArchive22.manifest;
        java.io.File file27 = explodedArchive22.manifestFile;
        java.io.File file28 = null;
        java.io.File file29 = explodedArchive22.getManifestFile(file28);
        java.util.Iterator<java.io.File> fileItor30 = fileEntryIterator19.listFiles(file29);
        java.util.ArrayDeque<java.util.Iterator<java.io.File>> fileItorQueue31 = new java.util.ArrayDeque<java.util.Iterator<java.io.File>>();
        boolean boolean32 = fileItorQueue31.add(fileItor30);
        fileEntryIterator5.stack = fileItorQueue31;
        java.util.Deque<java.util.Iterator<java.io.File>> fileItorQueue34 = fileEntryIterator5.stack;
        fileEntryIterator0.stack = fileItorQueue34;
        java.util.Comparator<java.io.File> fileComparator36 = fileEntryIterator0.entryComparator;
        java.io.File file37 = fileEntryIterator0.current;
        boolean boolean38 = fileEntryIterator0.hasNext();
        java.io.File file39 = fileEntryIterator0.poll();
        java.io.File file40 = fileEntryIterator0.current;
        boolean boolean41 = fileEntryIterator0.recursive;
        fileEntryIterator0.recursive = false;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file15.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file15.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file29.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file29.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItorQueue34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
    }

    @Test
    public void test1132() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1132");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        boolean boolean1 = explodedArchive0.recursive;
        explodedArchive0.recursive = true;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive4 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file5 = explodedArchive4.root;
        java.io.File file6 = null;
        explodedArchive4.manifestFile = file6;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive8 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest9 = explodedArchive8.manifest;
        explodedArchive8.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive12 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest13 = explodedArchive12.manifest;
        explodedArchive12.recursive = false;
        java.util.jar.Manifest manifest16 = explodedArchive12.manifest;
        java.io.File file17 = explodedArchive12.manifestFile;
        java.io.File file18 = null;
        java.io.File file19 = explodedArchive12.getManifestFile(file18);
        explodedArchive8.manifestFile = file18;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive21 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest22 = explodedArchive21.manifest;
        explodedArchive21.recursive = false;
        java.util.jar.Manifest manifest25 = explodedArchive21.manifest;
        java.io.File file26 = explodedArchive21.manifestFile;
        java.io.File file27 = null;
        java.io.File file28 = explodedArchive21.getManifestFile(file27);
        explodedArchive8.manifestFile = file28;
        java.io.File file30 = explodedArchive4.getManifestFile(file28);
        java.io.File file31 = explodedArchive4.root;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator32 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        boolean boolean33 = fileEntryIterator32.hasNext();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator34 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator35 = entryComparator34.reversed();
        java.util.Comparator<java.io.File> fileComparator36 = fileComparator35.reversed();
        fileEntryIterator32.entryComparator = fileComparator36;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive38 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file39 = explodedArchive38.root;
        java.io.File file40 = null;
        explodedArchive38.manifestFile = file40;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive42 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest43 = explodedArchive42.manifest;
        explodedArchive42.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive46 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest47 = explodedArchive46.manifest;
        explodedArchive46.recursive = false;
        java.util.jar.Manifest manifest50 = explodedArchive46.manifest;
        java.io.File file51 = explodedArchive46.manifestFile;
        java.io.File file52 = null;
        java.io.File file53 = explodedArchive46.getManifestFile(file52);
        explodedArchive42.manifestFile = file52;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive55 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest56 = explodedArchive55.manifest;
        explodedArchive55.recursive = false;
        java.util.jar.Manifest manifest59 = explodedArchive55.manifest;
        java.io.File file60 = explodedArchive55.manifestFile;
        java.io.File file61 = null;
        java.io.File file62 = explodedArchive55.getManifestFile(file61);
        explodedArchive42.manifestFile = file62;
        java.io.File file64 = explodedArchive38.getManifestFile(file62);
        java.util.Iterator<java.io.File> fileItor65 = fileEntryIterator32.listFiles(file64);
        explodedArchive4.manifestFile = file64;
        java.io.File file67 = explodedArchive4.manifestFile;
        explodedArchive0.manifestFile = file67;
        java.util.jar.Manifest manifest69 = explodedArchive0.manifest;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file19.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file19.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file28.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file28.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file30.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file30.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file53.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file53.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file62.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file62.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file64.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file64.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file67.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file67.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest69);
    }

    @Test
    public void test1133() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1133");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest1 = explodedArchive0.manifest;
        explodedArchive0.recursive = false;
        java.io.File file4 = null;
        explodedArchive0.root = file4;
        java.io.File file6 = explodedArchive0.root;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive7 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest8 = explodedArchive7.manifest;
        explodedArchive7.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive11 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest12 = explodedArchive11.manifest;
        explodedArchive11.recursive = false;
        java.util.jar.Manifest manifest15 = explodedArchive11.manifest;
        java.io.File file16 = explodedArchive11.manifestFile;
        java.io.File file17 = null;
        java.io.File file18 = explodedArchive11.getManifestFile(file17);
        explodedArchive7.manifestFile = file17;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive20 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest21 = explodedArchive20.manifest;
        explodedArchive20.recursive = false;
        java.util.jar.Manifest manifest24 = explodedArchive20.manifest;
        java.io.File file25 = explodedArchive20.manifestFile;
        java.io.File file26 = null;
        java.io.File file27 = explodedArchive20.getManifestFile(file26);
        explodedArchive7.manifestFile = file27;
        java.io.File file29 = explodedArchive0.getManifestFile(file27);
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntry fileEntry30 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntry();
        java.lang.String str31 = fileEntry30.name;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator32 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file33 = null;
        fileEntryIterator32.current = file33;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive35 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.lang.String str36 = explodedArchive35.toString();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive37 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file38 = explodedArchive37.root;
        java.io.File file39 = null;
        explodedArchive37.manifestFile = file39;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive41 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest42 = explodedArchive41.manifest;
        explodedArchive41.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive45 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest46 = explodedArchive45.manifest;
        explodedArchive45.recursive = false;
        java.util.jar.Manifest manifest49 = explodedArchive45.manifest;
        java.io.File file50 = explodedArchive45.manifestFile;
        java.io.File file51 = null;
        java.io.File file52 = explodedArchive45.getManifestFile(file51);
        explodedArchive41.manifestFile = file51;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive54 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest55 = explodedArchive54.manifest;
        explodedArchive54.recursive = false;
        java.util.jar.Manifest manifest58 = explodedArchive54.manifest;
        java.io.File file59 = explodedArchive54.manifestFile;
        java.io.File file60 = null;
        java.io.File file61 = explodedArchive54.getManifestFile(file60);
        explodedArchive41.manifestFile = file61;
        java.io.File file63 = explodedArchive37.getManifestFile(file61);
        java.io.File file64 = explodedArchive35.getManifestFile(file61);
        fileEntryIterator32.root = file61;
        fileEntry30.file = file61;
        java.io.File file67 = fileEntry30.file;
        explodedArchive0.root = file67;
        java.io.File file69 = explodedArchive0.manifestFile;
        java.util.Spliterator<org.springframework.boot.loader.archive.Archive.Entry> entrySpliterator70 = explodedArchive0.spliterator();
        java.lang.String str71 = explodedArchive0.toString();
        java.lang.String str72 = explodedArchive0.toString();
        java.lang.String str73 = explodedArchive0.toString();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file18.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file18.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file27.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file27.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file29.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file29.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str36 + "' != '" + "exploded archive" + "'", str36.equals("exploded archive"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file52.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file52.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file61.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file61.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file63.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file63.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file64.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file64.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file67.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file67.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(entrySpliterator70);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertTrue("'" + str71 + "' != '" + "file:/server/study-execution/new-nimrod/nimrod-hunoroutput-test-dest/spring-boot/af20dc6cc45c032573413c401f9f73aa75371744/randoop_4/META-INF/MANIFEST.MF" + "'", str71.equals("file:/server/study-execution/new-nimrod/nimrod-hunoroutput-test-dest/spring-boot/af20dc6cc45c032573413c401f9f73aa75371744/randoop_4/META-INF/MANIFEST.MF"));
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertTrue("'" + str72 + "' != '" + "file:/server/study-execution/new-nimrod/nimrod-hunoroutput-test-dest/spring-boot/af20dc6cc45c032573413c401f9f73aa75371744/randoop_4/META-INF/MANIFEST.MF" + "'", str72.equals("file:/server/study-execution/new-nimrod/nimrod-hunoroutput-test-dest/spring-boot/af20dc6cc45c032573413c401f9f73aa75371744/randoop_4/META-INF/MANIFEST.MF"));
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertTrue("'" + str73 + "' != '" + "file:/server/study-execution/new-nimrod/nimrod-hunoroutput-test-dest/spring-boot/af20dc6cc45c032573413c401f9f73aa75371744/randoop_4/META-INF/MANIFEST.MF" + "'", str73.equals("file:/server/study-execution/new-nimrod/nimrod-hunoroutput-test-dest/spring-boot/af20dc6cc45c032573413c401f9f73aa75371744/randoop_4/META-INF/MANIFEST.MF"));
    }

    @Test
    public void test1134() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1134");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntry fileEntry0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntry();
        java.io.File file1 = fileEntry0.file;
        java.lang.String str2 = fileEntry0.name;
        java.io.File file3 = fileEntry0.file;
        java.lang.String str4 = fileEntry0.getName();
        java.io.File file5 = fileEntry0.file;
        fileEntry0.name = "";
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file5);
    }

    @Test
    public void test1135() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1135");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        boolean boolean1 = fileEntryIterator0.recursive;
        java.io.File file2 = fileEntryIterator0.current;
        boolean boolean3 = fileEntryIterator0.hasNext();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator4 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file5 = null;
        fileEntryIterator4.current = file5;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive7 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest8 = explodedArchive7.manifest;
        explodedArchive7.recursive = false;
        java.util.jar.Manifest manifest11 = explodedArchive7.manifest;
        java.io.File file12 = explodedArchive7.manifestFile;
        java.io.File file13 = null;
        java.io.File file14 = explodedArchive7.getManifestFile(file13);
        java.util.Iterator<java.io.File> fileItor15 = fileEntryIterator4.listFiles(file14);
        java.io.File file16 = fileEntryIterator4.root;
        java.io.File file17 = fileEntryIterator4.root;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator18 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file19 = null;
        fileEntryIterator18.current = file19;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive21 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest22 = explodedArchive21.manifest;
        explodedArchive21.recursive = false;
        java.util.jar.Manifest manifest25 = explodedArchive21.manifest;
        java.io.File file26 = explodedArchive21.manifestFile;
        java.io.File file27 = null;
        java.io.File file28 = explodedArchive21.getManifestFile(file27);
        java.util.Iterator<java.io.File> fileItor29 = fileEntryIterator18.listFiles(file28);
        java.util.ArrayDeque<java.util.Iterator<java.io.File>> fileItorQueue30 = new java.util.ArrayDeque<java.util.Iterator<java.io.File>>();
        boolean boolean31 = fileItorQueue30.add(fileItor29);
        fileEntryIterator4.stack = fileItorQueue30;
        fileEntryIterator0.stack = fileItorQueue30;
        java.io.File file34 = fileEntryIterator0.poll();
        java.util.Deque<java.util.Iterator<java.io.File>> fileItorQueue35 = fileEntryIterator0.stack;
        java.io.File file36 = fileEntryIterator0.poll();
        java.util.Comparator<java.io.File> fileComparator37 = fileEntryIterator0.entryComparator;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file14.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file14.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file28.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file28.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItorQueue35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator37);
    }

    @Test
    public void test1136() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1136");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file1 = null;
        fileEntryIterator0.current = file1;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive3 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest4 = explodedArchive3.manifest;
        explodedArchive3.recursive = false;
        java.util.jar.Manifest manifest7 = explodedArchive3.manifest;
        java.io.File file8 = explodedArchive3.manifestFile;
        java.io.File file9 = null;
        java.io.File file10 = explodedArchive3.getManifestFile(file9);
        java.util.Iterator<java.io.File> fileItor11 = fileEntryIterator0.listFiles(file10);
        java.io.File file12 = fileEntryIterator0.root;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive13 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.lang.String str14 = explodedArchive13.toString();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive15 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file16 = explodedArchive15.root;
        java.io.File file17 = null;
        explodedArchive15.manifestFile = file17;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive19 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest20 = explodedArchive19.manifest;
        explodedArchive19.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive23 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest24 = explodedArchive23.manifest;
        explodedArchive23.recursive = false;
        java.util.jar.Manifest manifest27 = explodedArchive23.manifest;
        java.io.File file28 = explodedArchive23.manifestFile;
        java.io.File file29 = null;
        java.io.File file30 = explodedArchive23.getManifestFile(file29);
        explodedArchive19.manifestFile = file29;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive32 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest33 = explodedArchive32.manifest;
        explodedArchive32.recursive = false;
        java.util.jar.Manifest manifest36 = explodedArchive32.manifest;
        java.io.File file37 = explodedArchive32.manifestFile;
        java.io.File file38 = null;
        java.io.File file39 = explodedArchive32.getManifestFile(file38);
        explodedArchive19.manifestFile = file39;
        java.io.File file41 = explodedArchive15.getManifestFile(file39);
        java.io.File file42 = explodedArchive13.getManifestFile(file39);
        fileEntryIterator0.root = file39;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive44 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest45 = explodedArchive44.manifest;
        explodedArchive44.recursive = false;
        java.io.File file48 = null;
        explodedArchive44.root = file48;
        java.io.File file50 = explodedArchive44.manifestFile;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive51 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file52 = explodedArchive51.root;
        java.io.File file53 = null;
        explodedArchive51.manifestFile = file53;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive55 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest56 = explodedArchive55.manifest;
        explodedArchive55.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive59 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest60 = explodedArchive59.manifest;
        explodedArchive59.recursive = false;
        java.util.jar.Manifest manifest63 = explodedArchive59.manifest;
        java.io.File file64 = explodedArchive59.manifestFile;
        java.io.File file65 = null;
        java.io.File file66 = explodedArchive59.getManifestFile(file65);
        explodedArchive55.manifestFile = file65;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive68 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest69 = explodedArchive68.manifest;
        explodedArchive68.recursive = false;
        java.util.jar.Manifest manifest72 = explodedArchive68.manifest;
        java.io.File file73 = explodedArchive68.manifestFile;
        java.io.File file74 = null;
        java.io.File file75 = explodedArchive68.getManifestFile(file74);
        explodedArchive55.manifestFile = file75;
        java.io.File file77 = explodedArchive51.getManifestFile(file75);
        java.io.File file78 = explodedArchive44.getManifestFile(file75);
        fileEntryIterator0.root = file78;
        java.io.File file80 = fileEntryIterator0.poll();
        boolean boolean81 = fileEntryIterator0.recursive;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str14 + "' != '" + "exploded archive" + "'", str14.equals("exploded archive"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file30.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file30.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file39.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file39.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file41.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file41.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file42.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file42.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file66.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file66.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file73);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file75);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file75.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file75.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file77);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file77.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file77.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file78);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file78.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file78.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file80);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
    }

    @Test
    public void test1137() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1137");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest1 = explodedArchive0.manifest;
        java.util.jar.Manifest manifest2 = null;
        explodedArchive0.manifest = manifest2;
        java.io.File file4 = explodedArchive0.root;
        java.lang.String str5 = explodedArchive0.toString();
        boolean boolean6 = explodedArchive0.recursive;
        // The following exception was thrown during execution in test generation
        try {
            java.net.URL uRL7 = explodedArchive0.getUrl();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "exploded archive" + "'", str5.equals("exploded archive"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test1138() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1138");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        boolean boolean1 = fileEntryIterator0.hasNext();
        java.io.File file2 = fileEntryIterator0.root;
        boolean boolean3 = fileEntryIterator0.hasNext();
        java.util.Comparator<java.io.File> fileComparator4 = fileEntryIterator0.entryComparator;
        java.io.File file5 = fileEntryIterator0.current;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator6 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        boolean boolean7 = fileEntryIterator6.hasNext();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator8 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator9 = entryComparator8.reversed();
        java.util.Comparator<java.io.File> fileComparator10 = fileComparator9.reversed();
        fileEntryIterator6.entryComparator = fileComparator10;
        java.util.Comparator<java.io.File> fileComparator12 = fileEntryIterator6.entryComparator;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator13 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator14 = entryComparator13.reversed();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator15 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator16 = entryComparator15.reversed();
        java.util.Comparator<java.io.File> fileComparator17 = entryComparator13.thenComparing(fileComparator16);
        java.util.Comparator<java.io.File> fileComparator18 = fileComparator12.thenComparing(fileComparator16);
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator19 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator20 = entryComparator19.reversed();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator21 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator22 = entryComparator21.reversed();
        java.util.Comparator<java.io.File> fileComparator23 = entryComparator19.thenComparing(fileComparator22);
        java.util.Comparator<java.io.File> fileComparator24 = fileComparator18.thenComparing((java.util.Comparator<java.io.File>) entryComparator19);
        fileEntryIterator0.entryComparator = fileComparator24;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator26 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file27 = null;
        fileEntryIterator26.current = file27;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive29 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest30 = explodedArchive29.manifest;
        explodedArchive29.recursive = false;
        java.util.jar.Manifest manifest33 = explodedArchive29.manifest;
        java.io.File file34 = explodedArchive29.manifestFile;
        java.io.File file35 = null;
        java.io.File file36 = explodedArchive29.getManifestFile(file35);
        java.util.Iterator<java.io.File> fileItor37 = fileEntryIterator26.listFiles(file36);
        java.io.File file38 = fileEntryIterator26.root;
        java.io.File file39 = fileEntryIterator26.root;
        java.util.Deque<java.util.Iterator<java.io.File>> fileItorQueue40 = fileEntryIterator26.stack;
        java.io.File file41 = fileEntryIterator26.current;
        java.io.File file42 = fileEntryIterator26.root;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntry fileEntry43 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntry();
        java.io.File file44 = fileEntry43.file;
        java.lang.String str45 = fileEntry43.name;
        java.io.File file46 = fileEntry43.file;
        java.io.File file47 = fileEntry43.file;
        java.lang.String str48 = fileEntry43.getName();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntry fileEntry49 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntry();
        java.lang.String str50 = fileEntry49.name;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator51 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file52 = null;
        fileEntryIterator51.current = file52;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive54 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.lang.String str55 = explodedArchive54.toString();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive56 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file57 = explodedArchive56.root;
        java.io.File file58 = null;
        explodedArchive56.manifestFile = file58;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive60 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest61 = explodedArchive60.manifest;
        explodedArchive60.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive64 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest65 = explodedArchive64.manifest;
        explodedArchive64.recursive = false;
        java.util.jar.Manifest manifest68 = explodedArchive64.manifest;
        java.io.File file69 = explodedArchive64.manifestFile;
        java.io.File file70 = null;
        java.io.File file71 = explodedArchive64.getManifestFile(file70);
        explodedArchive60.manifestFile = file70;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive73 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest74 = explodedArchive73.manifest;
        explodedArchive73.recursive = false;
        java.util.jar.Manifest manifest77 = explodedArchive73.manifest;
        java.io.File file78 = explodedArchive73.manifestFile;
        java.io.File file79 = null;
        java.io.File file80 = explodedArchive73.getManifestFile(file79);
        explodedArchive60.manifestFile = file80;
        java.io.File file82 = explodedArchive56.getManifestFile(file80);
        java.io.File file83 = explodedArchive54.getManifestFile(file80);
        fileEntryIterator51.root = file80;
        fileEntry49.file = file80;
        fileEntry43.file = file80;
        fileEntryIterator26.root = file80;
        java.util.Deque<java.util.Iterator<java.io.File>> fileItorQueue88 = fileEntryIterator26.stack;
        fileEntryIterator0.stack = fileItorQueue88;
        // The following exception was thrown during execution in test generation
        try {
            fileEntryIterator0.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: remove");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file36.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file36.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItorQueue40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str55 + "' != '" + "exploded archive" + "'", str55.equals("exploded archive"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file71.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file71.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest77);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file78);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file80);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file80.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file80.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file82);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file82.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file82.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file83);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file83.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file83.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItorQueue88);
    }

    @Test
    public void test1139() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1139");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntry fileEntry0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntry();
        java.io.File file1 = fileEntry0.getFile();
        java.io.File file2 = fileEntry0.getFile();
        java.lang.String str3 = fileEntry0.name;
        java.io.File file4 = fileEntry0.getFile();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator5 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file6 = null;
        fileEntryIterator5.current = file6;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive8 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest9 = explodedArchive8.manifest;
        explodedArchive8.recursive = false;
        java.util.jar.Manifest manifest12 = explodedArchive8.manifest;
        java.io.File file13 = explodedArchive8.manifestFile;
        java.io.File file14 = null;
        java.io.File file15 = explodedArchive8.getManifestFile(file14);
        java.util.Iterator<java.io.File> fileItor16 = fileEntryIterator5.listFiles(file15);
        fileEntry0.file = file15;
        // The following exception was thrown during execution in test generation
        try {
            org.springframework.boot.loader.archive.ExplodedArchive explodedArchive19 = new org.springframework.boot.loader.archive.ExplodedArchive(file15, false);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid source folder META-INF/MANIFEST.MF");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file15.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file15.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor16);
    }

    @Test
    public void test1140() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1140");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file1 = null;
        fileEntryIterator0.current = file1;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive3 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.lang.String str4 = explodedArchive3.toString();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive5 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file6 = explodedArchive5.root;
        java.io.File file7 = null;
        explodedArchive5.manifestFile = file7;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive9 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest10 = explodedArchive9.manifest;
        explodedArchive9.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive13 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest14 = explodedArchive13.manifest;
        explodedArchive13.recursive = false;
        java.util.jar.Manifest manifest17 = explodedArchive13.manifest;
        java.io.File file18 = explodedArchive13.manifestFile;
        java.io.File file19 = null;
        java.io.File file20 = explodedArchive13.getManifestFile(file19);
        explodedArchive9.manifestFile = file19;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive22 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest23 = explodedArchive22.manifest;
        explodedArchive22.recursive = false;
        java.util.jar.Manifest manifest26 = explodedArchive22.manifest;
        java.io.File file27 = explodedArchive22.manifestFile;
        java.io.File file28 = null;
        java.io.File file29 = explodedArchive22.getManifestFile(file28);
        explodedArchive9.manifestFile = file29;
        java.io.File file31 = explodedArchive5.getManifestFile(file29);
        java.io.File file32 = explodedArchive3.getManifestFile(file29);
        fileEntryIterator0.root = file29;
        java.io.File file34 = fileEntryIterator0.poll();
        java.io.File file35 = fileEntryIterator0.poll();
        java.util.Deque<java.util.Iterator<java.io.File>> fileItorQueue36 = fileEntryIterator0.stack;
        boolean boolean37 = fileEntryIterator0.recursive;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntry fileEntry38 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntry();
        java.io.File file39 = fileEntry38.getFile();
        java.io.File file40 = fileEntry38.getFile();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive41 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file42 = explodedArchive41.root;
        java.io.File file43 = null;
        explodedArchive41.manifestFile = file43;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive45 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest46 = explodedArchive45.manifest;
        explodedArchive45.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive49 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest50 = explodedArchive49.manifest;
        explodedArchive49.recursive = false;
        java.util.jar.Manifest manifest53 = explodedArchive49.manifest;
        java.io.File file54 = explodedArchive49.manifestFile;
        java.io.File file55 = null;
        java.io.File file56 = explodedArchive49.getManifestFile(file55);
        explodedArchive45.manifestFile = file55;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive58 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest59 = explodedArchive58.manifest;
        explodedArchive58.recursive = false;
        java.util.jar.Manifest manifest62 = explodedArchive58.manifest;
        java.io.File file63 = explodedArchive58.manifestFile;
        java.io.File file64 = null;
        java.io.File file65 = explodedArchive58.getManifestFile(file64);
        explodedArchive45.manifestFile = file65;
        java.io.File file67 = explodedArchive41.getManifestFile(file65);
        fileEntry38.file = file67;
        fileEntry38.name = "";
        java.io.File file71 = fileEntry38.getFile();
        java.io.File file72 = fileEntry38.getFile();
        fileEntryIterator0.root = file72;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str4 + "' != '" + "exploded archive" + "'", str4.equals("exploded archive"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file20.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file20.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file29.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file29.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file31.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file31.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file32.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file32.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItorQueue36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file56.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file56.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file65.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file65.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file67.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file67.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file71.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file71.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file72.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file72.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
    }

    @Test
    public void test1141() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1141");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file1 = explodedArchive0.root;
        java.io.File file2 = explodedArchive0.manifestFile;
        java.io.File file3 = explodedArchive0.manifestFile;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntry fileEntry4 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntry();
        java.io.File file5 = fileEntry4.getFile();
        java.io.File file6 = fileEntry4.getFile();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive7 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file8 = explodedArchive7.root;
        java.io.File file9 = null;
        explodedArchive7.manifestFile = file9;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive11 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest12 = explodedArchive11.manifest;
        explodedArchive11.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive15 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest16 = explodedArchive15.manifest;
        explodedArchive15.recursive = false;
        java.util.jar.Manifest manifest19 = explodedArchive15.manifest;
        java.io.File file20 = explodedArchive15.manifestFile;
        java.io.File file21 = null;
        java.io.File file22 = explodedArchive15.getManifestFile(file21);
        explodedArchive11.manifestFile = file21;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive24 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest25 = explodedArchive24.manifest;
        explodedArchive24.recursive = false;
        java.util.jar.Manifest manifest28 = explodedArchive24.manifest;
        java.io.File file29 = explodedArchive24.manifestFile;
        java.io.File file30 = null;
        java.io.File file31 = explodedArchive24.getManifestFile(file30);
        explodedArchive11.manifestFile = file31;
        java.io.File file33 = explodedArchive7.getManifestFile(file31);
        fileEntry4.file = file33;
        explodedArchive0.root = file33;
        java.net.URL uRL36 = explodedArchive0.getUrl();
        explodedArchive0.recursive = false;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file22.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file22.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file31.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file31.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file33.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file33.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(uRL36);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(uRL36.toString(), "file:/server/study-execution/new-nimrod/nimrod-hunoroutput-test-dest/spring-boot/af20dc6cc45c032573413c401f9f73aa75371744/randoop_4/META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
    }

    @Test
    public void test1142() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1142");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file1 = explodedArchive0.root;
        java.io.File file2 = null;
        explodedArchive0.manifestFile = file2;
        java.io.File file4 = explodedArchive0.root;
        java.lang.String str5 = explodedArchive0.toString();
        java.util.jar.Manifest manifest6 = null;
        explodedArchive0.manifest = manifest6;
        java.io.File file8 = explodedArchive0.root;
        boolean boolean9 = explodedArchive0.recursive;
        java.io.File file10 = explodedArchive0.manifestFile;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "exploded archive" + "'", str5.equals("exploded archive"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file10);
    }

    @Test
    public void test1143() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1143");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest1 = explodedArchive0.manifest;
        explodedArchive0.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive4 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest5 = explodedArchive4.manifest;
        explodedArchive4.recursive = false;
        java.util.jar.Manifest manifest8 = explodedArchive4.manifest;
        java.io.File file9 = explodedArchive4.manifestFile;
        java.io.File file10 = null;
        java.io.File file11 = explodedArchive4.getManifestFile(file10);
        explodedArchive0.manifestFile = file10;
        java.util.jar.Manifest manifest13 = null;
        explodedArchive0.manifest = manifest13;
        java.util.jar.Manifest manifest15 = explodedArchive0.manifest;
        java.io.File file16 = null;
        java.io.File file17 = explodedArchive0.getManifestFile(file16);
        java.io.File file18 = null;
        explodedArchive0.manifestFile = file18;
        java.io.File file20 = explodedArchive0.root;
        // The following exception was thrown during execution in test generation
        try {
            java.net.URL uRL21 = explodedArchive0.getUrl();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file11.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file11.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file17.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file17.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file20);
    }

    @Test
    public void test1144() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1144");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file1 = null;
        fileEntryIterator0.current = file1;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive3 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest4 = explodedArchive3.manifest;
        explodedArchive3.recursive = false;
        java.util.jar.Manifest manifest7 = explodedArchive3.manifest;
        java.io.File file8 = explodedArchive3.manifestFile;
        java.io.File file9 = null;
        java.io.File file10 = explodedArchive3.getManifestFile(file9);
        java.util.Iterator<java.io.File> fileItor11 = fileEntryIterator0.listFiles(file10);
        boolean boolean12 = fileEntryIterator0.hasNext();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator13 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator14 = entryComparator13.reversed();
        java.util.Comparator<java.io.File> fileComparator15 = entryComparator13.reversed();
        fileEntryIterator0.entryComparator = fileComparator15;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator17 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file18 = null;
        fileEntryIterator17.current = file18;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive20 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest21 = explodedArchive20.manifest;
        explodedArchive20.recursive = false;
        java.util.jar.Manifest manifest24 = explodedArchive20.manifest;
        java.io.File file25 = explodedArchive20.manifestFile;
        java.io.File file26 = null;
        java.io.File file27 = explodedArchive20.getManifestFile(file26);
        java.util.Iterator<java.io.File> fileItor28 = fileEntryIterator17.listFiles(file27);
        java.util.Comparator<java.io.File> fileComparator29 = fileEntryIterator17.entryComparator;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator30 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file31 = null;
        fileEntryIterator30.current = file31;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive33 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest34 = explodedArchive33.manifest;
        explodedArchive33.recursive = false;
        java.util.jar.Manifest manifest37 = explodedArchive33.manifest;
        java.io.File file38 = explodedArchive33.manifestFile;
        java.io.File file39 = null;
        java.io.File file40 = explodedArchive33.getManifestFile(file39);
        java.util.Iterator<java.io.File> fileItor41 = fileEntryIterator30.listFiles(file40);
        java.io.File file42 = fileEntryIterator30.current;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator43 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file44 = null;
        fileEntryIterator43.current = file44;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive46 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest47 = explodedArchive46.manifest;
        explodedArchive46.recursive = false;
        java.util.jar.Manifest manifest50 = explodedArchive46.manifest;
        java.io.File file51 = explodedArchive46.manifestFile;
        java.io.File file52 = null;
        java.io.File file53 = explodedArchive46.getManifestFile(file52);
        java.util.Iterator<java.io.File> fileItor54 = fileEntryIterator43.listFiles(file53);
        java.io.File file55 = fileEntryIterator43.current;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator56 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file57 = null;
        fileEntryIterator56.current = file57;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive59 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest60 = explodedArchive59.manifest;
        explodedArchive59.recursive = false;
        java.util.jar.Manifest manifest63 = explodedArchive59.manifest;
        java.io.File file64 = explodedArchive59.manifestFile;
        java.io.File file65 = null;
        java.io.File file66 = explodedArchive59.getManifestFile(file65);
        java.util.Iterator<java.io.File> fileItor67 = fileEntryIterator56.listFiles(file66);
        java.util.ArrayDeque<java.util.Iterator<java.io.File>> fileItorQueue68 = new java.util.ArrayDeque<java.util.Iterator<java.io.File>>();
        boolean boolean69 = fileItorQueue68.add(fileItor67);
        fileEntryIterator43.stack = fileItorQueue68;
        fileEntryIterator30.stack = fileItorQueue68;
        fileEntryIterator17.stack = fileItorQueue68;
        fileEntryIterator0.stack = fileItorQueue68;
        java.util.Comparator<java.io.File> fileComparator74 = fileEntryIterator0.entryComparator;
        java.io.File file75 = fileEntryIterator0.root;
        java.util.Comparator<java.io.File> fileComparator76 = fileEntryIterator0.entryComparator;
        java.util.Comparator<java.io.File> fileComparator77 = fileEntryIterator0.entryComparator;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file27.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file27.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file40.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file40.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file53.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file53.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file66.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file66.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file75);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator76);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator77);
    }

    @Test
    public void test1145() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1145");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        boolean boolean1 = fileEntryIterator0.hasNext();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator2 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator3 = entryComparator2.reversed();
        java.util.Comparator<java.io.File> fileComparator4 = fileComparator3.reversed();
        fileEntryIterator0.entryComparator = fileComparator4;
        java.util.Comparator<java.io.File> fileComparator6 = fileEntryIterator0.entryComparator;
        boolean boolean7 = fileEntryIterator0.hasNext();
        java.util.Comparator<java.io.File> fileComparator8 = fileEntryIterator0.entryComparator;
        java.util.Comparator<java.io.File> fileComparator9 = fileEntryIterator0.entryComparator;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator9);
    }

    @Test
    public void test1146() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1146");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.lang.String str1 = explodedArchive0.toString();
        explodedArchive0.recursive = true;
        java.io.File file4 = null;
        java.io.File file5 = explodedArchive0.getManifestFile(file4);
        java.io.File file6 = explodedArchive0.root;
        explodedArchive0.recursive = false;
        // The following exception was thrown during execution in test generation
        try {
            java.net.URL uRL9 = explodedArchive0.getUrl();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str1 + "' != '" + "exploded archive" + "'", str1.equals("exploded archive"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file5.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file5.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file6);
    }

    @Test
    public void test1147() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1147");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        boolean boolean1 = fileEntryIterator0.hasNext();
        java.io.File file2 = fileEntryIterator0.root;
        java.io.File file3 = fileEntryIterator0.current;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator4 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file5 = null;
        fileEntryIterator4.current = file5;
        fileEntryIterator4.recursive = true;
        java.util.Deque<java.util.Iterator<java.io.File>> fileItorQueue9 = fileEntryIterator4.stack;
        fileEntryIterator0.stack = fileItorQueue9;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntry fileEntry11 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntry();
        java.io.File file12 = fileEntry11.file;
        java.lang.String str13 = fileEntry11.name;
        java.io.File file14 = fileEntry11.file;
        java.io.File file15 = fileEntry11.file;
        java.lang.String str16 = fileEntry11.getName();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntry fileEntry17 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntry();
        java.lang.String str18 = fileEntry17.name;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator19 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file20 = null;
        fileEntryIterator19.current = file20;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive22 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.lang.String str23 = explodedArchive22.toString();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive24 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file25 = explodedArchive24.root;
        java.io.File file26 = null;
        explodedArchive24.manifestFile = file26;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive28 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest29 = explodedArchive28.manifest;
        explodedArchive28.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive32 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest33 = explodedArchive32.manifest;
        explodedArchive32.recursive = false;
        java.util.jar.Manifest manifest36 = explodedArchive32.manifest;
        java.io.File file37 = explodedArchive32.manifestFile;
        java.io.File file38 = null;
        java.io.File file39 = explodedArchive32.getManifestFile(file38);
        explodedArchive28.manifestFile = file38;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive41 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest42 = explodedArchive41.manifest;
        explodedArchive41.recursive = false;
        java.util.jar.Manifest manifest45 = explodedArchive41.manifest;
        java.io.File file46 = explodedArchive41.manifestFile;
        java.io.File file47 = null;
        java.io.File file48 = explodedArchive41.getManifestFile(file47);
        explodedArchive28.manifestFile = file48;
        java.io.File file50 = explodedArchive24.getManifestFile(file48);
        java.io.File file51 = explodedArchive22.getManifestFile(file48);
        fileEntryIterator19.root = file48;
        fileEntry17.file = file48;
        fileEntry11.file = file48;
        fileEntry11.name = "exploded archive";
        boolean boolean57 = fileEntry11.isDirectory();
        java.io.File file58 = fileEntry11.getFile();
        fileEntryIterator0.current = file58;
        // The following exception was thrown during execution in test generation
        try {
            fileEntryIterator0.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: remove");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItorQueue9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str23 + "' != '" + "exploded archive" + "'", str23.equals("exploded archive"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file39.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file39.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file48.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file48.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file50.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file50.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file51.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file51.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file58.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file58.toString(), "META-INF/MANIFEST.MF");
    }

    @Test
    public void test1148() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1148");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file1 = null;
        fileEntryIterator0.current = file1;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive3 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest4 = explodedArchive3.manifest;
        explodedArchive3.recursive = false;
        java.util.jar.Manifest manifest7 = explodedArchive3.manifest;
        java.io.File file8 = explodedArchive3.manifestFile;
        java.io.File file9 = null;
        java.io.File file10 = explodedArchive3.getManifestFile(file9);
        java.util.Iterator<java.io.File> fileItor11 = fileEntryIterator0.listFiles(file10);
        java.io.File file12 = fileEntryIterator0.root;
        java.io.File file13 = fileEntryIterator0.root;
        java.util.Deque<java.util.Iterator<java.io.File>> fileItorQueue14 = fileEntryIterator0.stack;
        java.io.File file15 = fileEntryIterator0.current;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive16 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.lang.String str17 = explodedArchive16.toString();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive18 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file19 = explodedArchive18.root;
        java.io.File file20 = null;
        explodedArchive18.manifestFile = file20;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive22 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest23 = explodedArchive22.manifest;
        explodedArchive22.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive26 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest27 = explodedArchive26.manifest;
        explodedArchive26.recursive = false;
        java.util.jar.Manifest manifest30 = explodedArchive26.manifest;
        java.io.File file31 = explodedArchive26.manifestFile;
        java.io.File file32 = null;
        java.io.File file33 = explodedArchive26.getManifestFile(file32);
        explodedArchive22.manifestFile = file32;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive35 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest36 = explodedArchive35.manifest;
        explodedArchive35.recursive = false;
        java.util.jar.Manifest manifest39 = explodedArchive35.manifest;
        java.io.File file40 = explodedArchive35.manifestFile;
        java.io.File file41 = null;
        java.io.File file42 = explodedArchive35.getManifestFile(file41);
        explodedArchive22.manifestFile = file42;
        java.io.File file44 = explodedArchive18.getManifestFile(file42);
        java.io.File file45 = explodedArchive16.getManifestFile(file42);
        fileEntryIterator0.root = file45;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator47 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file48 = null;
        fileEntryIterator47.current = file48;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive50 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest51 = explodedArchive50.manifest;
        explodedArchive50.recursive = false;
        java.util.jar.Manifest manifest54 = explodedArchive50.manifest;
        java.io.File file55 = explodedArchive50.manifestFile;
        java.io.File file56 = null;
        java.io.File file57 = explodedArchive50.getManifestFile(file56);
        java.util.Iterator<java.io.File> fileItor58 = fileEntryIterator47.listFiles(file57);
        java.io.File file59 = fileEntryIterator47.root;
        java.io.File file60 = fileEntryIterator47.root;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator61 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file62 = null;
        fileEntryIterator61.current = file62;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive64 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest65 = explodedArchive64.manifest;
        explodedArchive64.recursive = false;
        java.util.jar.Manifest manifest68 = explodedArchive64.manifest;
        java.io.File file69 = explodedArchive64.manifestFile;
        java.io.File file70 = null;
        java.io.File file71 = explodedArchive64.getManifestFile(file70);
        java.util.Iterator<java.io.File> fileItor72 = fileEntryIterator61.listFiles(file71);
        java.util.ArrayDeque<java.util.Iterator<java.io.File>> fileItorQueue73 = new java.util.ArrayDeque<java.util.Iterator<java.io.File>>();
        boolean boolean74 = fileItorQueue73.add(fileItor72);
        fileEntryIterator47.stack = fileItorQueue73;
        java.util.Comparator<java.io.File> fileComparator76 = fileEntryIterator47.entryComparator;
        java.util.Deque<java.util.Iterator<java.io.File>> fileItorQueue77 = fileEntryIterator47.stack;
        fileEntryIterator0.stack = fileItorQueue77;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItorQueue14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str17 + "' != '" + "exploded archive" + "'", str17.equals("exploded archive"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file33.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file33.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file42.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file42.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file44.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file44.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file45.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file45.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file57.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file57.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file71.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file71.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator76);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItorQueue77);
    }

    @Test
    public void test1149() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1149");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file1 = explodedArchive0.root;
        java.io.File file2 = null;
        explodedArchive0.manifestFile = file2;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive4 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest5 = explodedArchive4.manifest;
        explodedArchive4.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive8 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest9 = explodedArchive8.manifest;
        explodedArchive8.recursive = false;
        java.util.jar.Manifest manifest12 = explodedArchive8.manifest;
        java.io.File file13 = explodedArchive8.manifestFile;
        java.io.File file14 = null;
        java.io.File file15 = explodedArchive8.getManifestFile(file14);
        explodedArchive4.manifestFile = file14;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive17 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest18 = explodedArchive17.manifest;
        explodedArchive17.recursive = false;
        java.util.jar.Manifest manifest21 = explodedArchive17.manifest;
        java.io.File file22 = explodedArchive17.manifestFile;
        java.io.File file23 = null;
        java.io.File file24 = explodedArchive17.getManifestFile(file23);
        explodedArchive4.manifestFile = file24;
        java.io.File file26 = explodedArchive0.getManifestFile(file24);
        java.util.jar.Manifest manifest27 = null;
        explodedArchive0.manifest = manifest27;
        java.io.File file29 = explodedArchive0.root;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator30 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file31 = null;
        fileEntryIterator30.current = file31;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive33 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest34 = explodedArchive33.manifest;
        explodedArchive33.recursive = false;
        java.util.jar.Manifest manifest37 = explodedArchive33.manifest;
        java.io.File file38 = explodedArchive33.manifestFile;
        java.io.File file39 = null;
        java.io.File file40 = explodedArchive33.getManifestFile(file39);
        java.util.Iterator<java.io.File> fileItor41 = fileEntryIterator30.listFiles(file40);
        boolean boolean42 = fileEntryIterator30.hasNext();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator43 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator44 = entryComparator43.reversed();
        java.util.Comparator<java.io.File> fileComparator45 = entryComparator43.reversed();
        fileEntryIterator30.entryComparator = fileComparator45;
        java.io.File file47 = fileEntryIterator30.root;
        boolean boolean48 = fileEntryIterator30.recursive;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator49 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file50 = null;
        fileEntryIterator49.current = file50;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive52 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest53 = explodedArchive52.manifest;
        explodedArchive52.recursive = false;
        java.util.jar.Manifest manifest56 = explodedArchive52.manifest;
        java.io.File file57 = explodedArchive52.manifestFile;
        java.io.File file58 = null;
        java.io.File file59 = explodedArchive52.getManifestFile(file58);
        java.util.Iterator<java.io.File> fileItor60 = fileEntryIterator49.listFiles(file59);
        java.io.File file61 = fileEntryIterator49.root;
        java.io.File file62 = fileEntryIterator49.root;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive63 = new org.springframework.boot.loader.archive.ExplodedArchive();
        boolean boolean64 = explodedArchive63.recursive;
        boolean boolean65 = explodedArchive63.recursive;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive66 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file67 = explodedArchive66.root;
        java.io.File file68 = null;
        explodedArchive66.manifestFile = file68;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive70 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest71 = explodedArchive70.manifest;
        explodedArchive70.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive74 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest75 = explodedArchive74.manifest;
        explodedArchive74.recursive = false;
        java.util.jar.Manifest manifest78 = explodedArchive74.manifest;
        java.io.File file79 = explodedArchive74.manifestFile;
        java.io.File file80 = null;
        java.io.File file81 = explodedArchive74.getManifestFile(file80);
        explodedArchive70.manifestFile = file80;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive83 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest84 = explodedArchive83.manifest;
        explodedArchive83.recursive = false;
        java.util.jar.Manifest manifest87 = explodedArchive83.manifest;
        java.io.File file88 = explodedArchive83.manifestFile;
        java.io.File file89 = null;
        java.io.File file90 = explodedArchive83.getManifestFile(file89);
        explodedArchive70.manifestFile = file90;
        java.io.File file92 = explodedArchive66.getManifestFile(file90);
        explodedArchive63.manifestFile = file90;
        fileEntryIterator49.current = file90;
        java.util.Iterator<java.io.File> fileItor95 = fileEntryIterator30.listFiles(file90);
        java.io.File file96 = explodedArchive0.getManifestFile(file90);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file15.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file15.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file24.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file24.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file26.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file26.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file40.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file40.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file59.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file59.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest75);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest78);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file79);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file81);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file81.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file81.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest84);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest87);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file88);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file90);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file90.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file90.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file92);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file92.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file92.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor95);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file96);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file96.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file96.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
    }

    @Test
    public void test1150() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1150");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest1 = explodedArchive0.manifest;
        explodedArchive0.recursive = false;
        java.util.jar.Manifest manifest4 = explodedArchive0.manifest;
        java.io.File file5 = explodedArchive0.manifestFile;
        java.io.File file6 = null;
        java.io.File file7 = explodedArchive0.getManifestFile(file6);
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator8 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file9 = null;
        fileEntryIterator8.current = file9;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive11 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.lang.String str12 = explodedArchive11.toString();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive13 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file14 = explodedArchive13.root;
        java.io.File file15 = null;
        explodedArchive13.manifestFile = file15;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive17 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest18 = explodedArchive17.manifest;
        explodedArchive17.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive21 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest22 = explodedArchive21.manifest;
        explodedArchive21.recursive = false;
        java.util.jar.Manifest manifest25 = explodedArchive21.manifest;
        java.io.File file26 = explodedArchive21.manifestFile;
        java.io.File file27 = null;
        java.io.File file28 = explodedArchive21.getManifestFile(file27);
        explodedArchive17.manifestFile = file27;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive30 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest31 = explodedArchive30.manifest;
        explodedArchive30.recursive = false;
        java.util.jar.Manifest manifest34 = explodedArchive30.manifest;
        java.io.File file35 = explodedArchive30.manifestFile;
        java.io.File file36 = null;
        java.io.File file37 = explodedArchive30.getManifestFile(file36);
        explodedArchive17.manifestFile = file37;
        java.io.File file39 = explodedArchive13.getManifestFile(file37);
        java.io.File file40 = explodedArchive11.getManifestFile(file37);
        fileEntryIterator8.root = file37;
        explodedArchive0.root = file37;
        explodedArchive0.recursive = false;
        java.io.File file45 = explodedArchive0.manifestFile;
        boolean boolean46 = explodedArchive0.recursive;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file7.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file7.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str12 + "' != '" + "exploded archive" + "'", str12.equals("exploded archive"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file28.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file28.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file37.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file37.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file39.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file39.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file40.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file40.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
    }

    @Test
    public void test1151() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1151");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        boolean boolean1 = fileEntryIterator0.hasNext();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator2 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator3 = entryComparator2.reversed();
        java.util.Comparator<java.io.File> fileComparator4 = fileComparator3.reversed();
        fileEntryIterator0.entryComparator = fileComparator4;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive6 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file7 = explodedArchive6.root;
        java.io.File file8 = null;
        explodedArchive6.manifestFile = file8;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive10 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest11 = explodedArchive10.manifest;
        explodedArchive10.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive14 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest15 = explodedArchive14.manifest;
        explodedArchive14.recursive = false;
        java.util.jar.Manifest manifest18 = explodedArchive14.manifest;
        java.io.File file19 = explodedArchive14.manifestFile;
        java.io.File file20 = null;
        java.io.File file21 = explodedArchive14.getManifestFile(file20);
        explodedArchive10.manifestFile = file20;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive23 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest24 = explodedArchive23.manifest;
        explodedArchive23.recursive = false;
        java.util.jar.Manifest manifest27 = explodedArchive23.manifest;
        java.io.File file28 = explodedArchive23.manifestFile;
        java.io.File file29 = null;
        java.io.File file30 = explodedArchive23.getManifestFile(file29);
        explodedArchive10.manifestFile = file30;
        java.io.File file32 = explodedArchive6.getManifestFile(file30);
        java.util.Iterator<java.io.File> fileItor33 = fileEntryIterator0.listFiles(file32);
        boolean boolean34 = fileEntryIterator0.recursive;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator35 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator36 = entryComparator35.reversed();
        java.util.Comparator<java.io.File> fileComparator37 = entryComparator35.reversed();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive38 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest39 = explodedArchive38.manifest;
        explodedArchive38.recursive = false;
        java.util.jar.Manifest manifest42 = explodedArchive38.manifest;
        java.io.File file43 = explodedArchive38.manifestFile;
        java.io.File file44 = null;
        java.io.File file45 = explodedArchive38.getManifestFile(file44);
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive46 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest47 = explodedArchive46.manifest;
        explodedArchive46.recursive = false;
        java.io.File file50 = null;
        explodedArchive46.root = file50;
        java.io.File file52 = explodedArchive46.root;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive53 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest54 = explodedArchive53.manifest;
        explodedArchive53.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive57 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest58 = explodedArchive57.manifest;
        explodedArchive57.recursive = false;
        java.util.jar.Manifest manifest61 = explodedArchive57.manifest;
        java.io.File file62 = explodedArchive57.manifestFile;
        java.io.File file63 = null;
        java.io.File file64 = explodedArchive57.getManifestFile(file63);
        explodedArchive53.manifestFile = file63;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive66 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest67 = explodedArchive66.manifest;
        explodedArchive66.recursive = false;
        java.util.jar.Manifest manifest70 = explodedArchive66.manifest;
        java.io.File file71 = explodedArchive66.manifestFile;
        java.io.File file72 = null;
        java.io.File file73 = explodedArchive66.getManifestFile(file72);
        explodedArchive53.manifestFile = file73;
        java.io.File file75 = explodedArchive46.getManifestFile(file73);
        int int76 = entryComparator35.compare(file45, file73);
        java.util.Iterator<java.io.File> fileItor77 = fileEntryIterator0.listFiles(file45);
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator78 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        boolean boolean79 = fileEntryIterator78.recursive;
        java.io.File file80 = fileEntryIterator78.current;
        boolean boolean81 = fileEntryIterator78.hasNext();
        boolean boolean82 = fileEntryIterator78.recursive;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator83 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator84 = entryComparator83.reversed();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator85 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator86 = entryComparator85.reversed();
        java.util.Comparator<java.io.File> fileComparator87 = entryComparator83.thenComparing(fileComparator86);
        fileEntryIterator78.entryComparator = fileComparator87;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator89 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator90 = entryComparator89.reversed();
        java.util.Comparator<java.io.File> fileComparator91 = entryComparator89.reversed();
        java.util.Comparator<java.io.File> fileComparator92 = fileComparator87.thenComparing(fileComparator91);
        fileEntryIterator0.entryComparator = fileComparator87;
        fileEntryIterator0.recursive = true;
        fileEntryIterator0.recursive = true;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file21.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file21.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file30.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file30.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file32.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file32.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file45.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file45.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file64.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file64.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file73);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file73.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file73.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file75);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file75.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file75.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor77);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file80);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator84);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator86);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator87);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator90);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator91);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator92);
    }

    @Test
    public void test1152() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1152");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file1 = null;
        fileEntryIterator0.current = file1;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive3 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest4 = explodedArchive3.manifest;
        explodedArchive3.recursive = false;
        java.util.jar.Manifest manifest7 = explodedArchive3.manifest;
        java.io.File file8 = explodedArchive3.manifestFile;
        java.io.File file9 = null;
        java.io.File file10 = explodedArchive3.getManifestFile(file9);
        java.util.Iterator<java.io.File> fileItor11 = fileEntryIterator0.listFiles(file10);
        java.io.File file12 = fileEntryIterator0.current;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator13 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file14 = null;
        fileEntryIterator13.current = file14;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive16 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest17 = explodedArchive16.manifest;
        explodedArchive16.recursive = false;
        java.util.jar.Manifest manifest20 = explodedArchive16.manifest;
        java.io.File file21 = explodedArchive16.manifestFile;
        java.io.File file22 = null;
        java.io.File file23 = explodedArchive16.getManifestFile(file22);
        java.util.Iterator<java.io.File> fileItor24 = fileEntryIterator13.listFiles(file23);
        java.util.ArrayDeque<java.util.Iterator<java.io.File>> fileItorQueue25 = new java.util.ArrayDeque<java.util.Iterator<java.io.File>>();
        boolean boolean26 = fileItorQueue25.add(fileItor24);
        fileEntryIterator0.stack = fileItorQueue25;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive28 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest29 = explodedArchive28.manifest;
        explodedArchive28.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive32 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest33 = explodedArchive32.manifest;
        explodedArchive32.recursive = false;
        java.util.jar.Manifest manifest36 = explodedArchive32.manifest;
        java.io.File file37 = explodedArchive32.manifestFile;
        java.io.File file38 = null;
        java.io.File file39 = explodedArchive32.getManifestFile(file38);
        explodedArchive28.manifestFile = file38;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive41 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest42 = explodedArchive41.manifest;
        explodedArchive41.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive45 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest46 = explodedArchive45.manifest;
        explodedArchive45.recursive = false;
        java.util.jar.Manifest manifest49 = explodedArchive45.manifest;
        java.io.File file50 = explodedArchive45.manifestFile;
        java.io.File file51 = null;
        java.io.File file52 = explodedArchive45.getManifestFile(file51);
        explodedArchive41.manifestFile = file51;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive54 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest55 = explodedArchive54.manifest;
        explodedArchive54.recursive = false;
        java.util.jar.Manifest manifest58 = explodedArchive54.manifest;
        java.io.File file59 = explodedArchive54.manifestFile;
        java.io.File file60 = null;
        java.io.File file61 = explodedArchive54.getManifestFile(file60);
        explodedArchive41.manifestFile = file61;
        explodedArchive28.root = file61;
        java.util.Iterator<java.io.File> fileItor64 = fileEntryIterator0.listFiles(file61);
        java.util.Comparator<java.io.File> fileComparator65 = fileEntryIterator0.entryComparator;
        java.util.Deque<java.util.Iterator<java.io.File>> fileItorQueue66 = fileEntryIterator0.stack;
        java.io.File file67 = fileEntryIterator0.current;
        boolean boolean68 = fileEntryIterator0.recursive;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file23.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file23.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file39.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file39.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file52.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file52.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file61.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file61.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItorQueue66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
    }

    @Test
    public void test1153() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1153");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file1 = null;
        fileEntryIterator0.current = file1;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive3 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest4 = explodedArchive3.manifest;
        explodedArchive3.recursive = false;
        java.util.jar.Manifest manifest7 = explodedArchive3.manifest;
        java.io.File file8 = explodedArchive3.manifestFile;
        java.io.File file9 = null;
        java.io.File file10 = explodedArchive3.getManifestFile(file9);
        java.util.Iterator<java.io.File> fileItor11 = fileEntryIterator0.listFiles(file10);
        boolean boolean12 = fileEntryIterator0.hasNext();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator13 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator14 = entryComparator13.reversed();
        java.util.Comparator<java.io.File> fileComparator15 = entryComparator13.reversed();
        fileEntryIterator0.entryComparator = fileComparator15;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator17 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file18 = null;
        fileEntryIterator17.current = file18;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive20 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.lang.String str21 = explodedArchive20.toString();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive22 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file23 = explodedArchive22.root;
        java.io.File file24 = null;
        explodedArchive22.manifestFile = file24;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive26 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest27 = explodedArchive26.manifest;
        explodedArchive26.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive30 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest31 = explodedArchive30.manifest;
        explodedArchive30.recursive = false;
        java.util.jar.Manifest manifest34 = explodedArchive30.manifest;
        java.io.File file35 = explodedArchive30.manifestFile;
        java.io.File file36 = null;
        java.io.File file37 = explodedArchive30.getManifestFile(file36);
        explodedArchive26.manifestFile = file36;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive39 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest40 = explodedArchive39.manifest;
        explodedArchive39.recursive = false;
        java.util.jar.Manifest manifest43 = explodedArchive39.manifest;
        java.io.File file44 = explodedArchive39.manifestFile;
        java.io.File file45 = null;
        java.io.File file46 = explodedArchive39.getManifestFile(file45);
        explodedArchive26.manifestFile = file46;
        java.io.File file48 = explodedArchive22.getManifestFile(file46);
        java.io.File file49 = explodedArchive20.getManifestFile(file46);
        fileEntryIterator17.root = file46;
        fileEntryIterator0.current = file46;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive52 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file53 = explodedArchive52.root;
        java.io.File file54 = null;
        explodedArchive52.manifestFile = file54;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive56 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest57 = explodedArchive56.manifest;
        explodedArchive56.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive60 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest61 = explodedArchive60.manifest;
        explodedArchive60.recursive = false;
        java.util.jar.Manifest manifest64 = explodedArchive60.manifest;
        java.io.File file65 = explodedArchive60.manifestFile;
        java.io.File file66 = null;
        java.io.File file67 = explodedArchive60.getManifestFile(file66);
        explodedArchive56.manifestFile = file66;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive69 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest70 = explodedArchive69.manifest;
        explodedArchive69.recursive = false;
        java.util.jar.Manifest manifest73 = explodedArchive69.manifest;
        java.io.File file74 = explodedArchive69.manifestFile;
        java.io.File file75 = null;
        java.io.File file76 = explodedArchive69.getManifestFile(file75);
        explodedArchive56.manifestFile = file76;
        java.io.File file78 = explodedArchive52.getManifestFile(file76);
        fileEntryIterator0.root = file78;
        java.util.Comparator<java.io.File> fileComparator80 = fileEntryIterator0.entryComparator;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator81 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file82 = null;
        fileEntryIterator81.current = file82;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive84 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest85 = explodedArchive84.manifest;
        explodedArchive84.recursive = false;
        java.util.jar.Manifest manifest88 = explodedArchive84.manifest;
        java.io.File file89 = explodedArchive84.manifestFile;
        java.io.File file90 = null;
        java.io.File file91 = explodedArchive84.getManifestFile(file90);
        java.util.Iterator<java.io.File> fileItor92 = fileEntryIterator81.listFiles(file91);
        boolean boolean93 = fileEntryIterator81.hasNext();
        java.util.Comparator<java.io.File> fileComparator94 = fileEntryIterator81.entryComparator;
        java.util.Deque<java.util.Iterator<java.io.File>> fileItorQueue95 = fileEntryIterator81.stack;
        fileEntryIterator0.stack = fileItorQueue95;
        java.io.File file97 = fileEntryIterator0.current;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str21 + "' != '" + "exploded archive" + "'", str21.equals("exploded archive"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file37.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file37.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file46.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file46.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file48.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file48.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file49.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file49.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file67.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file67.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest73);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file76);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file76.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file76.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file78);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file78.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file78.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator80);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest85);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest88);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file89);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file91);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file91.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file91.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor92);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator94);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItorQueue95);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file97);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file97.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file97.toString(), "META-INF/MANIFEST.MF");
    }

    @Test
    public void test1154() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1154");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.lang.String str1 = explodedArchive0.toString();
        explodedArchive0.recursive = true;
        java.io.File file4 = null;
        java.io.File file5 = explodedArchive0.getManifestFile(file4);
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive6 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.lang.String str7 = explodedArchive6.toString();
        java.io.File file8 = explodedArchive6.root;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator9 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file10 = null;
        fileEntryIterator9.current = file10;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive12 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest13 = explodedArchive12.manifest;
        explodedArchive12.recursive = false;
        java.util.jar.Manifest manifest16 = explodedArchive12.manifest;
        java.io.File file17 = explodedArchive12.manifestFile;
        java.io.File file18 = null;
        java.io.File file19 = explodedArchive12.getManifestFile(file18);
        java.util.Iterator<java.io.File> fileItor20 = fileEntryIterator9.listFiles(file19);
        java.io.File file21 = fileEntryIterator9.current;
        boolean boolean22 = fileEntryIterator9.recursive;
        java.io.File file23 = fileEntryIterator9.poll();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator24 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file25 = null;
        fileEntryIterator24.current = file25;
        fileEntryIterator24.recursive = true;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator29 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator30 = entryComparator29.reversed();
        java.util.Comparator<java.io.File> fileComparator31 = entryComparator29.reversed();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive32 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest33 = explodedArchive32.manifest;
        explodedArchive32.recursive = false;
        java.util.jar.Manifest manifest36 = explodedArchive32.manifest;
        java.io.File file37 = explodedArchive32.manifestFile;
        java.io.File file38 = null;
        java.io.File file39 = explodedArchive32.getManifestFile(file38);
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive40 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest41 = explodedArchive40.manifest;
        explodedArchive40.recursive = false;
        java.io.File file44 = null;
        explodedArchive40.root = file44;
        java.io.File file46 = explodedArchive40.root;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive47 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest48 = explodedArchive47.manifest;
        explodedArchive47.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive51 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest52 = explodedArchive51.manifest;
        explodedArchive51.recursive = false;
        java.util.jar.Manifest manifest55 = explodedArchive51.manifest;
        java.io.File file56 = explodedArchive51.manifestFile;
        java.io.File file57 = null;
        java.io.File file58 = explodedArchive51.getManifestFile(file57);
        explodedArchive47.manifestFile = file57;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive60 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest61 = explodedArchive60.manifest;
        explodedArchive60.recursive = false;
        java.util.jar.Manifest manifest64 = explodedArchive60.manifest;
        java.io.File file65 = explodedArchive60.manifestFile;
        java.io.File file66 = null;
        java.io.File file67 = explodedArchive60.getManifestFile(file66);
        explodedArchive47.manifestFile = file67;
        java.io.File file69 = explodedArchive40.getManifestFile(file67);
        int int70 = entryComparator29.compare(file39, file67);
        java.util.Iterator<java.io.File> fileItor71 = fileEntryIterator24.listFiles(file39);
        fileEntryIterator9.current = file39;
        java.io.File file73 = explodedArchive6.getManifestFile(file39);
        explodedArchive0.manifestFile = file73;
        boolean boolean75 = explodedArchive0.recursive;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str1 + "' != '" + "exploded archive" + "'", str1.equals("exploded archive"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file5.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file5.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str7 + "' != '" + "exploded archive" + "'", str7.equals("exploded archive"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file19.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file19.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file39.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file39.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file58.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file58.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file67.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file67.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file69.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file69.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file73);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file73.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file73.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
    }

    @Test
    public void test1155() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1155");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        boolean boolean1 = fileEntryIterator0.hasNext();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator2 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator3 = entryComparator2.reversed();
        java.util.Comparator<java.io.File> fileComparator4 = fileComparator3.reversed();
        fileEntryIterator0.entryComparator = fileComparator4;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntry fileEntry6 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntry();
        java.io.File file7 = fileEntry6.getFile();
        java.io.File file8 = fileEntry6.getFile();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive9 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file10 = explodedArchive9.root;
        java.io.File file11 = null;
        explodedArchive9.manifestFile = file11;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive13 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest14 = explodedArchive13.manifest;
        explodedArchive13.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive17 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest18 = explodedArchive17.manifest;
        explodedArchive17.recursive = false;
        java.util.jar.Manifest manifest21 = explodedArchive17.manifest;
        java.io.File file22 = explodedArchive17.manifestFile;
        java.io.File file23 = null;
        java.io.File file24 = explodedArchive17.getManifestFile(file23);
        explodedArchive13.manifestFile = file23;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive26 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest27 = explodedArchive26.manifest;
        explodedArchive26.recursive = false;
        java.util.jar.Manifest manifest30 = explodedArchive26.manifest;
        java.io.File file31 = explodedArchive26.manifestFile;
        java.io.File file32 = null;
        java.io.File file33 = explodedArchive26.getManifestFile(file32);
        explodedArchive13.manifestFile = file33;
        java.io.File file35 = explodedArchive9.getManifestFile(file33);
        fileEntry6.file = file35;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator37 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        boolean boolean38 = fileEntryIterator37.recursive;
        java.io.File file39 = fileEntryIterator37.current;
        boolean boolean40 = fileEntryIterator37.hasNext();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator41 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator42 = entryComparator41.reversed();
        java.util.Comparator<java.io.File> fileComparator43 = entryComparator41.reversed();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive44 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest45 = explodedArchive44.manifest;
        explodedArchive44.recursive = false;
        java.util.jar.Manifest manifest48 = explodedArchive44.manifest;
        java.io.File file49 = explodedArchive44.manifestFile;
        java.io.File file50 = null;
        java.io.File file51 = explodedArchive44.getManifestFile(file50);
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive52 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest53 = explodedArchive52.manifest;
        explodedArchive52.recursive = false;
        java.io.File file56 = null;
        explodedArchive52.root = file56;
        java.io.File file58 = explodedArchive52.root;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive59 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest60 = explodedArchive59.manifest;
        explodedArchive59.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive63 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest64 = explodedArchive63.manifest;
        explodedArchive63.recursive = false;
        java.util.jar.Manifest manifest67 = explodedArchive63.manifest;
        java.io.File file68 = explodedArchive63.manifestFile;
        java.io.File file69 = null;
        java.io.File file70 = explodedArchive63.getManifestFile(file69);
        explodedArchive59.manifestFile = file69;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive72 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest73 = explodedArchive72.manifest;
        explodedArchive72.recursive = false;
        java.util.jar.Manifest manifest76 = explodedArchive72.manifest;
        java.io.File file77 = explodedArchive72.manifestFile;
        java.io.File file78 = null;
        java.io.File file79 = explodedArchive72.getManifestFile(file78);
        explodedArchive59.manifestFile = file79;
        java.io.File file81 = explodedArchive52.getManifestFile(file79);
        int int82 = entryComparator41.compare(file51, file79);
        java.util.Iterator<java.io.File> fileItor83 = fileEntryIterator37.listFiles(file51);
        fileEntry6.file = file51;
        fileEntryIterator0.current = file51;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file24.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file24.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file33.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file33.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file35.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file35.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file51.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file51.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file70.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file70.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest73);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest76);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file77);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file79);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file79.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file79.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file81);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file81.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file81.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor83);
    }

    @Test
    public void test1156() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1156");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest1 = explodedArchive0.manifest;
        java.util.jar.Manifest manifest2 = null;
        explodedArchive0.manifest = manifest2;
        java.io.File file4 = explodedArchive0.root;
        java.lang.String str5 = explodedArchive0.toString();
        boolean boolean6 = explodedArchive0.recursive;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive7 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest8 = explodedArchive7.manifest;
        explodedArchive7.recursive = false;
        java.io.File file11 = null;
        explodedArchive7.root = file11;
        java.io.File file13 = explodedArchive7.root;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive14 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest15 = explodedArchive14.manifest;
        explodedArchive14.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive18 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest19 = explodedArchive18.manifest;
        explodedArchive18.recursive = false;
        java.util.jar.Manifest manifest22 = explodedArchive18.manifest;
        java.io.File file23 = explodedArchive18.manifestFile;
        java.io.File file24 = null;
        java.io.File file25 = explodedArchive18.getManifestFile(file24);
        explodedArchive14.manifestFile = file24;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive27 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest28 = explodedArchive27.manifest;
        explodedArchive27.recursive = false;
        java.util.jar.Manifest manifest31 = explodedArchive27.manifest;
        java.io.File file32 = explodedArchive27.manifestFile;
        java.io.File file33 = null;
        java.io.File file34 = explodedArchive27.getManifestFile(file33);
        explodedArchive14.manifestFile = file34;
        java.io.File file36 = explodedArchive7.getManifestFile(file34);
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntry fileEntry37 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntry();
        java.lang.String str38 = fileEntry37.name;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator39 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file40 = null;
        fileEntryIterator39.current = file40;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive42 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.lang.String str43 = explodedArchive42.toString();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive44 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file45 = explodedArchive44.root;
        java.io.File file46 = null;
        explodedArchive44.manifestFile = file46;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive48 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest49 = explodedArchive48.manifest;
        explodedArchive48.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive52 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest53 = explodedArchive52.manifest;
        explodedArchive52.recursive = false;
        java.util.jar.Manifest manifest56 = explodedArchive52.manifest;
        java.io.File file57 = explodedArchive52.manifestFile;
        java.io.File file58 = null;
        java.io.File file59 = explodedArchive52.getManifestFile(file58);
        explodedArchive48.manifestFile = file58;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive61 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest62 = explodedArchive61.manifest;
        explodedArchive61.recursive = false;
        java.util.jar.Manifest manifest65 = explodedArchive61.manifest;
        java.io.File file66 = explodedArchive61.manifestFile;
        java.io.File file67 = null;
        java.io.File file68 = explodedArchive61.getManifestFile(file67);
        explodedArchive48.manifestFile = file68;
        java.io.File file70 = explodedArchive44.getManifestFile(file68);
        java.io.File file71 = explodedArchive42.getManifestFile(file68);
        fileEntryIterator39.root = file68;
        fileEntry37.file = file68;
        java.io.File file74 = fileEntry37.file;
        explodedArchive7.root = file74;
        java.io.File file76 = explodedArchive7.manifestFile;
        java.util.Spliterator<org.springframework.boot.loader.archive.Archive.Entry> entrySpliterator77 = explodedArchive7.spliterator();
        explodedArchive7.recursive = false;
        java.io.File file80 = explodedArchive7.root;
        java.io.File file81 = explodedArchive0.getManifestFile(file80);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "exploded archive" + "'", str5.equals("exploded archive"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file25.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file25.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file34.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file34.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file36.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file36.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str43 + "' != '" + "exploded archive" + "'", str43.equals("exploded archive"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file59.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file59.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file68.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file68.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file70.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file70.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file71.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file71.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file74.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file74.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file76);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(entrySpliterator77);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file80);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file80.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file80.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file81);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file81.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file81.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
    }

    @Test
    public void test1157() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1157");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        boolean boolean1 = fileEntryIterator0.recursive;
        java.io.File file2 = fileEntryIterator0.current;
        boolean boolean3 = fileEntryIterator0.hasNext();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive4 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest5 = explodedArchive4.manifest;
        explodedArchive4.recursive = false;
        java.util.jar.Manifest manifest8 = explodedArchive4.manifest;
        java.io.File file9 = explodedArchive4.manifestFile;
        java.io.File file10 = explodedArchive4.root;
        explodedArchive4.recursive = true;
        boolean boolean13 = explodedArchive4.recursive;
        java.util.jar.Manifest manifest14 = explodedArchive4.manifest;
        java.util.jar.Manifest manifest15 = null;
        explodedArchive4.manifest = manifest15;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator17 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        boolean boolean18 = fileEntryIterator17.hasNext();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator19 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator20 = entryComparator19.reversed();
        java.util.Comparator<java.io.File> fileComparator21 = fileComparator20.reversed();
        fileEntryIterator17.entryComparator = fileComparator21;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive23 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file24 = explodedArchive23.root;
        java.io.File file25 = null;
        explodedArchive23.manifestFile = file25;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive27 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest28 = explodedArchive27.manifest;
        explodedArchive27.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive31 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest32 = explodedArchive31.manifest;
        explodedArchive31.recursive = false;
        java.util.jar.Manifest manifest35 = explodedArchive31.manifest;
        java.io.File file36 = explodedArchive31.manifestFile;
        java.io.File file37 = null;
        java.io.File file38 = explodedArchive31.getManifestFile(file37);
        explodedArchive27.manifestFile = file37;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive40 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest41 = explodedArchive40.manifest;
        explodedArchive40.recursive = false;
        java.util.jar.Manifest manifest44 = explodedArchive40.manifest;
        java.io.File file45 = explodedArchive40.manifestFile;
        java.io.File file46 = null;
        java.io.File file47 = explodedArchive40.getManifestFile(file46);
        explodedArchive27.manifestFile = file47;
        java.io.File file49 = explodedArchive23.getManifestFile(file47);
        java.util.Iterator<java.io.File> fileItor50 = fileEntryIterator17.listFiles(file49);
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntry fileEntry51 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntry();
        java.lang.String str52 = fileEntry51.name;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator53 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file54 = null;
        fileEntryIterator53.current = file54;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive56 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.lang.String str57 = explodedArchive56.toString();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive58 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file59 = explodedArchive58.root;
        java.io.File file60 = null;
        explodedArchive58.manifestFile = file60;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive62 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest63 = explodedArchive62.manifest;
        explodedArchive62.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive66 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest67 = explodedArchive66.manifest;
        explodedArchive66.recursive = false;
        java.util.jar.Manifest manifest70 = explodedArchive66.manifest;
        java.io.File file71 = explodedArchive66.manifestFile;
        java.io.File file72 = null;
        java.io.File file73 = explodedArchive66.getManifestFile(file72);
        explodedArchive62.manifestFile = file72;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive75 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest76 = explodedArchive75.manifest;
        explodedArchive75.recursive = false;
        java.util.jar.Manifest manifest79 = explodedArchive75.manifest;
        java.io.File file80 = explodedArchive75.manifestFile;
        java.io.File file81 = null;
        java.io.File file82 = explodedArchive75.getManifestFile(file81);
        explodedArchive62.manifestFile = file82;
        java.io.File file84 = explodedArchive58.getManifestFile(file82);
        java.io.File file85 = explodedArchive56.getManifestFile(file82);
        fileEntryIterator53.root = file82;
        fileEntry51.file = file82;
        java.io.File file88 = fileEntry51.getFile();
        java.io.File file89 = fileEntry51.getFile();
        java.util.Iterator<java.io.File> fileItor90 = fileEntryIterator17.listFiles(file89);
        explodedArchive4.root = file89;
        fileEntryIterator0.root = file89;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file38.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file38.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file47.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file47.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file49.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file49.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str57 + "' != '" + "exploded archive" + "'", str57.equals("exploded archive"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file73);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file73.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file73.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest76);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest79);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file80);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file82);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file82.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file82.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file84);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file84.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file84.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file85);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file85.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file85.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file88);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file88.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file88.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file89);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file89.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file89.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor90);
    }

    @Test
    public void test1158() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1158");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest1 = explodedArchive0.manifest;
        java.util.jar.Manifest manifest2 = null;
        explodedArchive0.manifest = manifest2;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator4 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        boolean boolean5 = fileEntryIterator4.hasNext();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator6 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator7 = entryComparator6.reversed();
        java.util.Comparator<java.io.File> fileComparator8 = fileComparator7.reversed();
        fileEntryIterator4.entryComparator = fileComparator8;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive10 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file11 = explodedArchive10.root;
        java.io.File file12 = null;
        explodedArchive10.manifestFile = file12;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive14 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest15 = explodedArchive14.manifest;
        explodedArchive14.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive18 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest19 = explodedArchive18.manifest;
        explodedArchive18.recursive = false;
        java.util.jar.Manifest manifest22 = explodedArchive18.manifest;
        java.io.File file23 = explodedArchive18.manifestFile;
        java.io.File file24 = null;
        java.io.File file25 = explodedArchive18.getManifestFile(file24);
        explodedArchive14.manifestFile = file24;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive27 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest28 = explodedArchive27.manifest;
        explodedArchive27.recursive = false;
        java.util.jar.Manifest manifest31 = explodedArchive27.manifest;
        java.io.File file32 = explodedArchive27.manifestFile;
        java.io.File file33 = null;
        java.io.File file34 = explodedArchive27.getManifestFile(file33);
        explodedArchive14.manifestFile = file34;
        java.io.File file36 = explodedArchive10.getManifestFile(file34);
        java.util.Iterator<java.io.File> fileItor37 = fileEntryIterator4.listFiles(file36);
        java.io.File file38 = explodedArchive0.getManifestFile(file36);
        java.util.jar.Manifest manifest39 = explodedArchive0.manifest;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file25.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file25.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file34.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file34.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file36.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file36.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file38.getParent(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file38.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest39);
    }

    @Test
    public void test1159() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1159");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        boolean boolean1 = fileEntryIterator0.recursive;
        java.io.File file2 = fileEntryIterator0.current;
        boolean boolean3 = fileEntryIterator0.hasNext();
        boolean boolean4 = fileEntryIterator0.recursive;
        fileEntryIterator0.recursive = false;
        java.util.Comparator<java.io.File> fileComparator7 = fileEntryIterator0.entryComparator;
        java.io.File file8 = fileEntryIterator0.poll();
        java.io.File file9 = fileEntryIterator0.current;
        boolean boolean10 = fileEntryIterator0.recursive;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test1160() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1160");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest1 = explodedArchive0.manifest;
        explodedArchive0.recursive = false;
        java.io.File file4 = null;
        explodedArchive0.root = file4;
        java.io.File file6 = explodedArchive0.root;
        java.util.jar.Manifest manifest7 = null;
        explodedArchive0.manifest = manifest7;
        explodedArchive0.recursive = false;
        java.util.jar.Manifest manifest11 = null;
        explodedArchive0.manifest = manifest11;
        java.lang.String str13 = explodedArchive0.toString();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive14 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.lang.String str15 = explodedArchive14.toString();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive16 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file17 = explodedArchive16.root;
        java.io.File file18 = null;
        explodedArchive16.manifestFile = file18;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive20 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest21 = explodedArchive20.manifest;
        explodedArchive20.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive24 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest25 = explodedArchive24.manifest;
        explodedArchive24.recursive = false;
        java.util.jar.Manifest manifest28 = explodedArchive24.manifest;
        java.io.File file29 = explodedArchive24.manifestFile;
        java.io.File file30 = null;
        java.io.File file31 = explodedArchive24.getManifestFile(file30);
        explodedArchive20.manifestFile = file30;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive33 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest34 = explodedArchive33.manifest;
        explodedArchive33.recursive = false;
        java.util.jar.Manifest manifest37 = explodedArchive33.manifest;
        java.io.File file38 = explodedArchive33.manifestFile;
        java.io.File file39 = null;
        java.io.File file40 = explodedArchive33.getManifestFile(file39);
        explodedArchive20.manifestFile = file40;
        java.io.File file42 = explodedArchive16.getManifestFile(file40);
        java.io.File file43 = explodedArchive14.getManifestFile(file40);
        java.io.File file44 = explodedArchive0.getManifestFile(file40);
        java.io.File file45 = explodedArchive0.root;
        java.io.File file46 = explodedArchive0.root;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str13 + "' != '" + "exploded archive" + "'", str13.equals("exploded archive"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str15 + "' != '" + "exploded archive" + "'", str15.equals("exploded archive"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file31.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file31.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file40.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file40.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file42.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file42.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file43.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file43.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file44.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file44.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file46);
    }

    @Test
    public void test1161() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1161");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.lang.String str1 = explodedArchive0.toString();
        java.io.File file2 = explodedArchive0.root;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator3 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file4 = null;
        fileEntryIterator3.current = file4;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive6 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest7 = explodedArchive6.manifest;
        explodedArchive6.recursive = false;
        java.util.jar.Manifest manifest10 = explodedArchive6.manifest;
        java.io.File file11 = explodedArchive6.manifestFile;
        java.io.File file12 = null;
        java.io.File file13 = explodedArchive6.getManifestFile(file12);
        java.util.Iterator<java.io.File> fileItor14 = fileEntryIterator3.listFiles(file13);
        java.io.File file15 = fileEntryIterator3.current;
        boolean boolean16 = fileEntryIterator3.recursive;
        java.io.File file17 = fileEntryIterator3.poll();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator18 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file19 = null;
        fileEntryIterator18.current = file19;
        fileEntryIterator18.recursive = true;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator23 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator24 = entryComparator23.reversed();
        java.util.Comparator<java.io.File> fileComparator25 = entryComparator23.reversed();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive26 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest27 = explodedArchive26.manifest;
        explodedArchive26.recursive = false;
        java.util.jar.Manifest manifest30 = explodedArchive26.manifest;
        java.io.File file31 = explodedArchive26.manifestFile;
        java.io.File file32 = null;
        java.io.File file33 = explodedArchive26.getManifestFile(file32);
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive34 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest35 = explodedArchive34.manifest;
        explodedArchive34.recursive = false;
        java.io.File file38 = null;
        explodedArchive34.root = file38;
        java.io.File file40 = explodedArchive34.root;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive41 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest42 = explodedArchive41.manifest;
        explodedArchive41.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive45 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest46 = explodedArchive45.manifest;
        explodedArchive45.recursive = false;
        java.util.jar.Manifest manifest49 = explodedArchive45.manifest;
        java.io.File file50 = explodedArchive45.manifestFile;
        java.io.File file51 = null;
        java.io.File file52 = explodedArchive45.getManifestFile(file51);
        explodedArchive41.manifestFile = file51;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive54 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest55 = explodedArchive54.manifest;
        explodedArchive54.recursive = false;
        java.util.jar.Manifest manifest58 = explodedArchive54.manifest;
        java.io.File file59 = explodedArchive54.manifestFile;
        java.io.File file60 = null;
        java.io.File file61 = explodedArchive54.getManifestFile(file60);
        explodedArchive41.manifestFile = file61;
        java.io.File file63 = explodedArchive34.getManifestFile(file61);
        int int64 = entryComparator23.compare(file33, file61);
        java.util.Iterator<java.io.File> fileItor65 = fileEntryIterator18.listFiles(file33);
        fileEntryIterator3.current = file33;
        java.io.File file67 = explodedArchive0.getManifestFile(file33);
        java.io.File file68 = explodedArchive0.manifestFile;
        java.io.File file69 = explodedArchive0.root;
        java.io.File file70 = explodedArchive0.manifestFile;
        explodedArchive0.recursive = true;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str1 + "' != '" + "exploded archive" + "'", str1.equals("exploded archive"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file13.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file13.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file33.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file33.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file52.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file52.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file61.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file61.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file63.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file63.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file67.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file67.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file70);
    }

    @Test
    public void test1162() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1162");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntry fileEntry0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntry();
        java.lang.String str1 = fileEntry0.name;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator2 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file3 = null;
        fileEntryIterator2.current = file3;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive5 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest6 = explodedArchive5.manifest;
        explodedArchive5.recursive = false;
        java.util.jar.Manifest manifest9 = explodedArchive5.manifest;
        java.io.File file10 = explodedArchive5.manifestFile;
        java.io.File file11 = null;
        java.io.File file12 = explodedArchive5.getManifestFile(file11);
        java.util.Iterator<java.io.File> fileItor13 = fileEntryIterator2.listFiles(file12);
        java.io.File file14 = fileEntryIterator2.current;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator15 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file16 = null;
        fileEntryIterator15.current = file16;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive18 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest19 = explodedArchive18.manifest;
        explodedArchive18.recursive = false;
        java.util.jar.Manifest manifest22 = explodedArchive18.manifest;
        java.io.File file23 = explodedArchive18.manifestFile;
        java.io.File file24 = null;
        java.io.File file25 = explodedArchive18.getManifestFile(file24);
        java.util.Iterator<java.io.File> fileItor26 = fileEntryIterator15.listFiles(file25);
        java.util.ArrayDeque<java.util.Iterator<java.io.File>> fileItorQueue27 = new java.util.ArrayDeque<java.util.Iterator<java.io.File>>();
        boolean boolean28 = fileItorQueue27.add(fileItor26);
        fileEntryIterator2.stack = fileItorQueue27;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive30 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest31 = explodedArchive30.manifest;
        explodedArchive30.recursive = false;
        java.io.File file34 = null;
        explodedArchive30.root = file34;
        java.io.File file36 = explodedArchive30.root;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive37 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest38 = explodedArchive37.manifest;
        explodedArchive37.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive41 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest42 = explodedArchive41.manifest;
        explodedArchive41.recursive = false;
        java.util.jar.Manifest manifest45 = explodedArchive41.manifest;
        java.io.File file46 = explodedArchive41.manifestFile;
        java.io.File file47 = null;
        java.io.File file48 = explodedArchive41.getManifestFile(file47);
        explodedArchive37.manifestFile = file47;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive50 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest51 = explodedArchive50.manifest;
        explodedArchive50.recursive = false;
        java.util.jar.Manifest manifest54 = explodedArchive50.manifest;
        java.io.File file55 = explodedArchive50.manifestFile;
        java.io.File file56 = null;
        java.io.File file57 = explodedArchive50.getManifestFile(file56);
        explodedArchive37.manifestFile = file57;
        java.io.File file59 = explodedArchive30.getManifestFile(file57);
        fileEntryIterator2.root = file57;
        fileEntry0.file = file57;
        boolean boolean62 = fileEntry0.isDirectory();
        boolean boolean63 = fileEntry0.isDirectory();
        java.io.File file64 = fileEntry0.file;
        java.io.File file65 = fileEntry0.file;
        java.lang.String str66 = fileEntry0.getName();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file12.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file12.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file25.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file25.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file48.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file48.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file57.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file57.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file59.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file59.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file64.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file64.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file65.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file65.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str66);
    }

    @Test
    public void test1163() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1163");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntry fileEntry0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntry();
        java.lang.String str1 = fileEntry0.getName();
        java.lang.String str2 = fileEntry0.getName();
        java.lang.String str3 = fileEntry0.name;
        java.io.File file4 = fileEntry0.file;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator5 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        boolean boolean6 = fileEntryIterator5.hasNext();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator7 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator8 = entryComparator7.reversed();
        java.util.Comparator<java.io.File> fileComparator9 = fileComparator8.reversed();
        fileEntryIterator5.entryComparator = fileComparator9;
        java.util.Comparator<java.io.File> fileComparator11 = fileEntryIterator5.entryComparator;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator12 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        boolean boolean13 = fileEntryIterator12.recursive;
        java.io.File file14 = fileEntryIterator12.current;
        boolean boolean15 = fileEntryIterator12.hasNext();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator16 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator17 = entryComparator16.reversed();
        java.util.Comparator<java.io.File> fileComparator18 = entryComparator16.reversed();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive19 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest20 = explodedArchive19.manifest;
        explodedArchive19.recursive = false;
        java.util.jar.Manifest manifest23 = explodedArchive19.manifest;
        java.io.File file24 = explodedArchive19.manifestFile;
        java.io.File file25 = null;
        java.io.File file26 = explodedArchive19.getManifestFile(file25);
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive27 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest28 = explodedArchive27.manifest;
        explodedArchive27.recursive = false;
        java.io.File file31 = null;
        explodedArchive27.root = file31;
        java.io.File file33 = explodedArchive27.root;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive34 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest35 = explodedArchive34.manifest;
        explodedArchive34.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive38 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest39 = explodedArchive38.manifest;
        explodedArchive38.recursive = false;
        java.util.jar.Manifest manifest42 = explodedArchive38.manifest;
        java.io.File file43 = explodedArchive38.manifestFile;
        java.io.File file44 = null;
        java.io.File file45 = explodedArchive38.getManifestFile(file44);
        explodedArchive34.manifestFile = file44;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive47 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest48 = explodedArchive47.manifest;
        explodedArchive47.recursive = false;
        java.util.jar.Manifest manifest51 = explodedArchive47.manifest;
        java.io.File file52 = explodedArchive47.manifestFile;
        java.io.File file53 = null;
        java.io.File file54 = explodedArchive47.getManifestFile(file53);
        explodedArchive34.manifestFile = file54;
        java.io.File file56 = explodedArchive27.getManifestFile(file54);
        int int57 = entryComparator16.compare(file26, file54);
        java.util.Iterator<java.io.File> fileItor58 = fileEntryIterator12.listFiles(file26);
        java.util.Deque<java.util.Iterator<java.io.File>> fileItorQueue59 = fileEntryIterator12.stack;
        fileEntryIterator5.stack = fileItorQueue59;
        java.io.File file61 = fileEntryIterator5.root;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive62 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file63 = explodedArchive62.root;
        java.io.File file64 = null;
        explodedArchive62.manifestFile = file64;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive66 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest67 = explodedArchive66.manifest;
        explodedArchive66.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive70 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest71 = explodedArchive70.manifest;
        explodedArchive70.recursive = false;
        java.util.jar.Manifest manifest74 = explodedArchive70.manifest;
        java.io.File file75 = explodedArchive70.manifestFile;
        java.io.File file76 = null;
        java.io.File file77 = explodedArchive70.getManifestFile(file76);
        explodedArchive66.manifestFile = file76;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive79 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest80 = explodedArchive79.manifest;
        explodedArchive79.recursive = false;
        java.util.jar.Manifest manifest83 = explodedArchive79.manifest;
        java.io.File file84 = explodedArchive79.manifestFile;
        java.io.File file85 = null;
        java.io.File file86 = explodedArchive79.getManifestFile(file85);
        explodedArchive66.manifestFile = file86;
        java.io.File file88 = explodedArchive62.getManifestFile(file86);
        java.util.Iterator<java.io.File> fileItor89 = fileEntryIterator5.listFiles(file86);
        fileEntry0.file = file86;
        java.lang.String str91 = fileEntry0.getName();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file26.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file26.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file45.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file45.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file54.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file54.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file56.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file56.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItorQueue59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file75);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file77);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file77.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file77.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest80);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest83);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file84);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file86);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file86.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file86.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file88);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file88.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file88.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor89);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str91);
    }

    @Test
    public void test1164() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1164");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntry fileEntry0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntry();
        java.io.File file1 = fileEntry0.file;
        java.lang.String str2 = fileEntry0.name;
        fileEntry0.name = "";
        java.io.File file5 = fileEntry0.file;
        fileEntry0.name = "file:/server/study-execution/new-nimrod/nimrod-hunoroutput-test-dest/spring-boot/af20dc6cc45c032573413c401f9f73aa75371744/randoop_4/META-INF/MANIFEST.MF/META-INF/MANIFEST.MF";
        fileEntry0.name = "hi!";
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file5);
    }

    @Test
    public void test1165() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1165");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        boolean boolean1 = fileEntryIterator0.hasNext();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator2 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator3 = entryComparator2.reversed();
        java.util.Comparator<java.io.File> fileComparator4 = fileComparator3.reversed();
        fileEntryIterator0.entryComparator = fileComparator4;
        boolean boolean6 = fileEntryIterator0.hasNext();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test1166() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1166");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest1 = explodedArchive0.manifest;
        explodedArchive0.recursive = false;
        java.io.File file4 = null;
        explodedArchive0.root = file4;
        java.io.File file6 = explodedArchive0.manifestFile;
        java.io.File file7 = explodedArchive0.manifestFile;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator8 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator9 = entryComparator8.reversed();
        java.util.Comparator<java.io.File> fileComparator10 = entryComparator8.reversed();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive11 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest12 = explodedArchive11.manifest;
        explodedArchive11.recursive = false;
        java.util.jar.Manifest manifest15 = explodedArchive11.manifest;
        java.io.File file16 = explodedArchive11.manifestFile;
        java.io.File file17 = null;
        java.io.File file18 = explodedArchive11.getManifestFile(file17);
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive19 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest20 = explodedArchive19.manifest;
        explodedArchive19.recursive = false;
        java.io.File file23 = null;
        explodedArchive19.root = file23;
        java.io.File file25 = explodedArchive19.root;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive26 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest27 = explodedArchive26.manifest;
        explodedArchive26.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive30 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest31 = explodedArchive30.manifest;
        explodedArchive30.recursive = false;
        java.util.jar.Manifest manifest34 = explodedArchive30.manifest;
        java.io.File file35 = explodedArchive30.manifestFile;
        java.io.File file36 = null;
        java.io.File file37 = explodedArchive30.getManifestFile(file36);
        explodedArchive26.manifestFile = file36;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive39 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest40 = explodedArchive39.manifest;
        explodedArchive39.recursive = false;
        java.util.jar.Manifest manifest43 = explodedArchive39.manifest;
        java.io.File file44 = explodedArchive39.manifestFile;
        java.io.File file45 = null;
        java.io.File file46 = explodedArchive39.getManifestFile(file45);
        explodedArchive26.manifestFile = file46;
        java.io.File file48 = explodedArchive19.getManifestFile(file46);
        int int49 = entryComparator8.compare(file18, file46);
        explodedArchive0.root = file46;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntry fileEntry51 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntry();
        java.io.File file52 = fileEntry51.getFile();
        java.io.File file53 = fileEntry51.getFile();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive54 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file55 = explodedArchive54.root;
        java.io.File file56 = null;
        explodedArchive54.manifestFile = file56;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive58 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest59 = explodedArchive58.manifest;
        explodedArchive58.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive62 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest63 = explodedArchive62.manifest;
        explodedArchive62.recursive = false;
        java.util.jar.Manifest manifest66 = explodedArchive62.manifest;
        java.io.File file67 = explodedArchive62.manifestFile;
        java.io.File file68 = null;
        java.io.File file69 = explodedArchive62.getManifestFile(file68);
        explodedArchive58.manifestFile = file68;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive71 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest72 = explodedArchive71.manifest;
        explodedArchive71.recursive = false;
        java.util.jar.Manifest manifest75 = explodedArchive71.manifest;
        java.io.File file76 = explodedArchive71.manifestFile;
        java.io.File file77 = null;
        java.io.File file78 = explodedArchive71.getManifestFile(file77);
        explodedArchive58.manifestFile = file78;
        java.io.File file80 = explodedArchive54.getManifestFile(file78);
        fileEntry51.file = file80;
        java.io.File file82 = fileEntry51.file;
        fileEntry51.name = "exploded archive";
        java.io.File file85 = fileEntry51.file;
        explodedArchive0.root = file85;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file18.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file18.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file37.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file37.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file46.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file46.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file48.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file48.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file69.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file69.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest75);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file76);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file78);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file78.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file78.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file80);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file80.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file80.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file82);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file82.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file82.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file85);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file85.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file85.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
    }

    @Test
    public void test1167() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1167");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.lang.String str1 = explodedArchive0.toString();
        explodedArchive0.recursive = true;
        java.io.File file4 = null;
        java.io.File file5 = explodedArchive0.getManifestFile(file4);
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive6 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.lang.String str7 = explodedArchive6.toString();
        java.io.File file8 = explodedArchive6.root;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator9 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file10 = null;
        fileEntryIterator9.current = file10;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive12 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest13 = explodedArchive12.manifest;
        explodedArchive12.recursive = false;
        java.util.jar.Manifest manifest16 = explodedArchive12.manifest;
        java.io.File file17 = explodedArchive12.manifestFile;
        java.io.File file18 = null;
        java.io.File file19 = explodedArchive12.getManifestFile(file18);
        java.util.Iterator<java.io.File> fileItor20 = fileEntryIterator9.listFiles(file19);
        java.io.File file21 = fileEntryIterator9.current;
        boolean boolean22 = fileEntryIterator9.recursive;
        java.io.File file23 = fileEntryIterator9.poll();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator24 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file25 = null;
        fileEntryIterator24.current = file25;
        fileEntryIterator24.recursive = true;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator29 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator30 = entryComparator29.reversed();
        java.util.Comparator<java.io.File> fileComparator31 = entryComparator29.reversed();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive32 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest33 = explodedArchive32.manifest;
        explodedArchive32.recursive = false;
        java.util.jar.Manifest manifest36 = explodedArchive32.manifest;
        java.io.File file37 = explodedArchive32.manifestFile;
        java.io.File file38 = null;
        java.io.File file39 = explodedArchive32.getManifestFile(file38);
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive40 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest41 = explodedArchive40.manifest;
        explodedArchive40.recursive = false;
        java.io.File file44 = null;
        explodedArchive40.root = file44;
        java.io.File file46 = explodedArchive40.root;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive47 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest48 = explodedArchive47.manifest;
        explodedArchive47.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive51 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest52 = explodedArchive51.manifest;
        explodedArchive51.recursive = false;
        java.util.jar.Manifest manifest55 = explodedArchive51.manifest;
        java.io.File file56 = explodedArchive51.manifestFile;
        java.io.File file57 = null;
        java.io.File file58 = explodedArchive51.getManifestFile(file57);
        explodedArchive47.manifestFile = file57;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive60 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest61 = explodedArchive60.manifest;
        explodedArchive60.recursive = false;
        java.util.jar.Manifest manifest64 = explodedArchive60.manifest;
        java.io.File file65 = explodedArchive60.manifestFile;
        java.io.File file66 = null;
        java.io.File file67 = explodedArchive60.getManifestFile(file66);
        explodedArchive47.manifestFile = file67;
        java.io.File file69 = explodedArchive40.getManifestFile(file67);
        int int70 = entryComparator29.compare(file39, file67);
        java.util.Iterator<java.io.File> fileItor71 = fileEntryIterator24.listFiles(file39);
        fileEntryIterator9.current = file39;
        java.io.File file73 = explodedArchive6.getManifestFile(file39);
        explodedArchive0.manifestFile = file73;
        java.util.jar.Manifest manifest75 = explodedArchive0.manifest;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str1 + "' != '" + "exploded archive" + "'", str1.equals("exploded archive"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file5.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file5.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str7 + "' != '" + "exploded archive" + "'", str7.equals("exploded archive"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file19.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file19.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file39.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file39.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file58.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file58.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file67.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file67.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file69.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file69.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file73);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file73.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file73.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest75);
    }

    @Test
    public void test1168() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1168");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest1 = explodedArchive0.manifest;
        explodedArchive0.recursive = false;
        java.io.File file4 = null;
        explodedArchive0.root = file4;
        java.io.File file6 = explodedArchive0.manifestFile;
        java.lang.String str7 = explodedArchive0.toString();
        java.io.File file8 = explodedArchive0.root;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str7 + "' != '" + "exploded archive" + "'", str7.equals("exploded archive"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file8);
    }

    @Test
    public void test1169() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1169");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file1 = null;
        fileEntryIterator0.current = file1;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive3 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest4 = explodedArchive3.manifest;
        explodedArchive3.recursive = false;
        java.util.jar.Manifest manifest7 = explodedArchive3.manifest;
        java.io.File file8 = explodedArchive3.manifestFile;
        java.io.File file9 = null;
        java.io.File file10 = explodedArchive3.getManifestFile(file9);
        java.util.Iterator<java.io.File> fileItor11 = fileEntryIterator0.listFiles(file10);
        boolean boolean12 = fileEntryIterator0.hasNext();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator13 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator14 = entryComparator13.reversed();
        java.util.Comparator<java.io.File> fileComparator15 = entryComparator13.reversed();
        fileEntryIterator0.entryComparator = fileComparator15;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator17 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file18 = null;
        fileEntryIterator17.current = file18;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive20 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest21 = explodedArchive20.manifest;
        explodedArchive20.recursive = false;
        java.util.jar.Manifest manifest24 = explodedArchive20.manifest;
        java.io.File file25 = explodedArchive20.manifestFile;
        java.io.File file26 = null;
        java.io.File file27 = explodedArchive20.getManifestFile(file26);
        java.util.Iterator<java.io.File> fileItor28 = fileEntryIterator17.listFiles(file27);
        java.util.Comparator<java.io.File> fileComparator29 = fileEntryIterator17.entryComparator;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator30 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file31 = null;
        fileEntryIterator30.current = file31;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive33 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest34 = explodedArchive33.manifest;
        explodedArchive33.recursive = false;
        java.util.jar.Manifest manifest37 = explodedArchive33.manifest;
        java.io.File file38 = explodedArchive33.manifestFile;
        java.io.File file39 = null;
        java.io.File file40 = explodedArchive33.getManifestFile(file39);
        java.util.Iterator<java.io.File> fileItor41 = fileEntryIterator30.listFiles(file40);
        java.io.File file42 = fileEntryIterator30.current;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator43 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file44 = null;
        fileEntryIterator43.current = file44;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive46 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest47 = explodedArchive46.manifest;
        explodedArchive46.recursive = false;
        java.util.jar.Manifest manifest50 = explodedArchive46.manifest;
        java.io.File file51 = explodedArchive46.manifestFile;
        java.io.File file52 = null;
        java.io.File file53 = explodedArchive46.getManifestFile(file52);
        java.util.Iterator<java.io.File> fileItor54 = fileEntryIterator43.listFiles(file53);
        java.io.File file55 = fileEntryIterator43.current;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator56 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file57 = null;
        fileEntryIterator56.current = file57;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive59 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest60 = explodedArchive59.manifest;
        explodedArchive59.recursive = false;
        java.util.jar.Manifest manifest63 = explodedArchive59.manifest;
        java.io.File file64 = explodedArchive59.manifestFile;
        java.io.File file65 = null;
        java.io.File file66 = explodedArchive59.getManifestFile(file65);
        java.util.Iterator<java.io.File> fileItor67 = fileEntryIterator56.listFiles(file66);
        java.util.ArrayDeque<java.util.Iterator<java.io.File>> fileItorQueue68 = new java.util.ArrayDeque<java.util.Iterator<java.io.File>>();
        boolean boolean69 = fileItorQueue68.add(fileItor67);
        fileEntryIterator43.stack = fileItorQueue68;
        fileEntryIterator30.stack = fileItorQueue68;
        fileEntryIterator17.stack = fileItorQueue68;
        fileEntryIterator0.stack = fileItorQueue68;
        java.util.Comparator<java.io.File> fileComparator74 = fileEntryIterator0.entryComparator;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator75 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator76 = entryComparator75.reversed();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator77 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator78 = entryComparator77.reversed();
        java.util.Comparator<java.io.File> fileComparator79 = entryComparator75.thenComparing(fileComparator78);
        java.util.Comparator<java.io.File> fileComparator80 = fileComparator74.thenComparing(fileComparator78);
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator81 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator82 = entryComparator81.reversed();
        java.util.Comparator<java.io.File> fileComparator83 = fileComparator74.thenComparing((java.util.Comparator<java.io.File>) entryComparator81);
        java.util.Comparator<java.io.File> fileComparator84 = fileComparator83.reversed();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file27.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file27.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file40.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file40.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file53.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file53.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file66.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file66.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator76);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator78);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator79);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator80);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator82);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator83);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator84);
    }

    @Test
    public void test1170() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1170");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file1 = null;
        fileEntryIterator0.current = file1;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive3 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest4 = explodedArchive3.manifest;
        explodedArchive3.recursive = false;
        java.util.jar.Manifest manifest7 = explodedArchive3.manifest;
        java.io.File file8 = explodedArchive3.manifestFile;
        java.io.File file9 = null;
        java.io.File file10 = explodedArchive3.getManifestFile(file9);
        java.util.Iterator<java.io.File> fileItor11 = fileEntryIterator0.listFiles(file10);
        boolean boolean12 = fileEntryIterator0.hasNext();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator13 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator14 = entryComparator13.reversed();
        java.util.Comparator<java.io.File> fileComparator15 = entryComparator13.reversed();
        fileEntryIterator0.entryComparator = entryComparator13;
        boolean boolean17 = fileEntryIterator0.hasNext();
        fileEntryIterator0.recursive = true;
        fileEntryIterator0.recursive = true;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test1171() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1171");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file1 = null;
        fileEntryIterator0.current = file1;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive3 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest4 = explodedArchive3.manifest;
        explodedArchive3.recursive = false;
        java.util.jar.Manifest manifest7 = explodedArchive3.manifest;
        java.io.File file8 = explodedArchive3.manifestFile;
        java.io.File file9 = null;
        java.io.File file10 = explodedArchive3.getManifestFile(file9);
        java.util.Iterator<java.io.File> fileItor11 = fileEntryIterator0.listFiles(file10);
        boolean boolean12 = fileEntryIterator0.hasNext();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator13 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator14 = entryComparator13.reversed();
        java.util.Comparator<java.io.File> fileComparator15 = entryComparator13.reversed();
        fileEntryIterator0.entryComparator = fileComparator15;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator17 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file18 = null;
        fileEntryIterator17.current = file18;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive20 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.lang.String str21 = explodedArchive20.toString();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive22 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file23 = explodedArchive22.root;
        java.io.File file24 = null;
        explodedArchive22.manifestFile = file24;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive26 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest27 = explodedArchive26.manifest;
        explodedArchive26.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive30 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest31 = explodedArchive30.manifest;
        explodedArchive30.recursive = false;
        java.util.jar.Manifest manifest34 = explodedArchive30.manifest;
        java.io.File file35 = explodedArchive30.manifestFile;
        java.io.File file36 = null;
        java.io.File file37 = explodedArchive30.getManifestFile(file36);
        explodedArchive26.manifestFile = file36;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive39 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest40 = explodedArchive39.manifest;
        explodedArchive39.recursive = false;
        java.util.jar.Manifest manifest43 = explodedArchive39.manifest;
        java.io.File file44 = explodedArchive39.manifestFile;
        java.io.File file45 = null;
        java.io.File file46 = explodedArchive39.getManifestFile(file45);
        explodedArchive26.manifestFile = file46;
        java.io.File file48 = explodedArchive22.getManifestFile(file46);
        java.io.File file49 = explodedArchive20.getManifestFile(file46);
        fileEntryIterator17.root = file46;
        fileEntryIterator0.current = file46;
        java.util.Deque<java.util.Iterator<java.io.File>> fileItorQueue52 = fileEntryIterator0.stack;
        // The following exception was thrown during execution in test generation
        try {
            fileEntryIterator0.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: remove");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str21 + "' != '" + "exploded archive" + "'", str21.equals("exploded archive"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file37.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file37.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file46.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file46.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file48.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file48.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file49.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file49.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItorQueue52);
    }

    @Test
    public void test1172() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1172");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        boolean boolean1 = fileEntryIterator0.hasNext();
        java.io.File file2 = fileEntryIterator0.root;
        boolean boolean3 = fileEntryIterator0.hasNext();
        java.io.File file4 = fileEntryIterator0.poll();
        // The following exception was thrown during execution in test generation
        try {
            org.springframework.boot.loader.archive.Archive.Entry entry5 = fileEntryIterator0.next();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file4);
    }

    @Test
    public void test1173() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1173");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file1 = null;
        fileEntryIterator0.current = file1;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive3 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.lang.String str4 = explodedArchive3.toString();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive5 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file6 = explodedArchive5.root;
        java.io.File file7 = null;
        explodedArchive5.manifestFile = file7;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive9 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest10 = explodedArchive9.manifest;
        explodedArchive9.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive13 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest14 = explodedArchive13.manifest;
        explodedArchive13.recursive = false;
        java.util.jar.Manifest manifest17 = explodedArchive13.manifest;
        java.io.File file18 = explodedArchive13.manifestFile;
        java.io.File file19 = null;
        java.io.File file20 = explodedArchive13.getManifestFile(file19);
        explodedArchive9.manifestFile = file19;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive22 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest23 = explodedArchive22.manifest;
        explodedArchive22.recursive = false;
        java.util.jar.Manifest manifest26 = explodedArchive22.manifest;
        java.io.File file27 = explodedArchive22.manifestFile;
        java.io.File file28 = null;
        java.io.File file29 = explodedArchive22.getManifestFile(file28);
        explodedArchive9.manifestFile = file29;
        java.io.File file31 = explodedArchive5.getManifestFile(file29);
        java.io.File file32 = explodedArchive3.getManifestFile(file29);
        fileEntryIterator0.root = file29;
        boolean boolean34 = fileEntryIterator0.recursive;
        fileEntryIterator0.recursive = true;
        boolean boolean37 = fileEntryIterator0.hasNext();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive38 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest39 = explodedArchive38.manifest;
        explodedArchive38.recursive = false;
        java.util.jar.Manifest manifest42 = explodedArchive38.manifest;
        java.io.File file43 = explodedArchive38.manifestFile;
        java.io.File file44 = explodedArchive38.root;
        explodedArchive38.recursive = true;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntry fileEntry47 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntry();
        java.io.File file48 = fileEntry47.file;
        java.lang.String str49 = fileEntry47.name;
        java.io.File file50 = fileEntry47.file;
        java.io.File file51 = fileEntry47.file;
        java.lang.String str52 = fileEntry47.name;
        java.lang.String str53 = fileEntry47.getName();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntry fileEntry54 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntry();
        java.io.File file55 = fileEntry54.getFile();
        java.io.File file56 = fileEntry54.getFile();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive57 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file58 = explodedArchive57.root;
        java.io.File file59 = null;
        explodedArchive57.manifestFile = file59;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive61 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest62 = explodedArchive61.manifest;
        explodedArchive61.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive65 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest66 = explodedArchive65.manifest;
        explodedArchive65.recursive = false;
        java.util.jar.Manifest manifest69 = explodedArchive65.manifest;
        java.io.File file70 = explodedArchive65.manifestFile;
        java.io.File file71 = null;
        java.io.File file72 = explodedArchive65.getManifestFile(file71);
        explodedArchive61.manifestFile = file71;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive74 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest75 = explodedArchive74.manifest;
        explodedArchive74.recursive = false;
        java.util.jar.Manifest manifest78 = explodedArchive74.manifest;
        java.io.File file79 = explodedArchive74.manifestFile;
        java.io.File file80 = null;
        java.io.File file81 = explodedArchive74.getManifestFile(file80);
        explodedArchive61.manifestFile = file81;
        java.io.File file83 = explodedArchive57.getManifestFile(file81);
        fileEntry54.file = file83;
        java.io.File file85 = fileEntry54.file;
        fileEntry54.name = "exploded archive";
        java.io.File file88 = fileEntry54.file;
        java.io.File file89 = fileEntry54.getFile();
        java.io.File file90 = fileEntry54.file;
        fileEntry47.file = file90;
        explodedArchive38.manifestFile = file90;
        java.util.Iterator<java.io.File> fileItor93 = fileEntryIterator0.listFiles(file90);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str4 + "' != '" + "exploded archive" + "'", str4.equals("exploded archive"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file20.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file20.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file29.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file29.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file31.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file31.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file32.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file32.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file72.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file72.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest75);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest78);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file79);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file81);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file81.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file81.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file83);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file83.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file83.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file85);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file85.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file85.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file88);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file88.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file88.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file89);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file89.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file89.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file90);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file90.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file90.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor93);
    }

    @Test
    public void test1174() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1174");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file1 = null;
        fileEntryIterator0.current = file1;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive3 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest4 = explodedArchive3.manifest;
        explodedArchive3.recursive = false;
        java.util.jar.Manifest manifest7 = explodedArchive3.manifest;
        java.io.File file8 = explodedArchive3.manifestFile;
        java.io.File file9 = null;
        java.io.File file10 = explodedArchive3.getManifestFile(file9);
        java.util.Iterator<java.io.File> fileItor11 = fileEntryIterator0.listFiles(file10);
        java.io.File file12 = fileEntryIterator0.root;
        java.io.File file13 = fileEntryIterator0.current;
        fileEntryIterator0.recursive = true;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator16 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        boolean boolean17 = fileEntryIterator16.hasNext();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator18 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator19 = entryComparator18.reversed();
        java.util.Comparator<java.io.File> fileComparator20 = fileComparator19.reversed();
        fileEntryIterator16.entryComparator = fileComparator20;
        java.util.Comparator<java.io.File> fileComparator22 = fileEntryIterator16.entryComparator;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator23 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator24 = entryComparator23.reversed();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator25 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator26 = entryComparator25.reversed();
        java.util.Comparator<java.io.File> fileComparator27 = entryComparator23.thenComparing(fileComparator26);
        java.util.Comparator<java.io.File> fileComparator28 = fileComparator22.thenComparing(fileComparator26);
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator29 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator30 = entryComparator29.reversed();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator31 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator32 = entryComparator31.reversed();
        java.util.Comparator<java.io.File> fileComparator33 = entryComparator29.thenComparing(fileComparator32);
        java.util.Comparator<java.io.File> fileComparator34 = fileComparator26.thenComparing(fileComparator32);
        fileEntryIterator0.entryComparator = fileComparator26;
        java.util.Comparator<java.io.File> fileComparator36 = fileEntryIterator0.entryComparator;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator36);
    }

    @Test
    public void test1175() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1175");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest1 = explodedArchive0.manifest;
        explodedArchive0.recursive = false;
        java.io.File file4 = null;
        explodedArchive0.root = file4;
        java.io.File file6 = explodedArchive0.manifestFile;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive7 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file8 = explodedArchive7.root;
        java.io.File file9 = null;
        explodedArchive7.manifestFile = file9;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive11 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest12 = explodedArchive11.manifest;
        explodedArchive11.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive15 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest16 = explodedArchive15.manifest;
        explodedArchive15.recursive = false;
        java.util.jar.Manifest manifest19 = explodedArchive15.manifest;
        java.io.File file20 = explodedArchive15.manifestFile;
        java.io.File file21 = null;
        java.io.File file22 = explodedArchive15.getManifestFile(file21);
        explodedArchive11.manifestFile = file21;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive24 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest25 = explodedArchive24.manifest;
        explodedArchive24.recursive = false;
        java.util.jar.Manifest manifest28 = explodedArchive24.manifest;
        java.io.File file29 = explodedArchive24.manifestFile;
        java.io.File file30 = null;
        java.io.File file31 = explodedArchive24.getManifestFile(file30);
        explodedArchive11.manifestFile = file31;
        java.io.File file33 = explodedArchive7.getManifestFile(file31);
        java.io.File file34 = explodedArchive0.getManifestFile(file31);
        java.lang.String str35 = explodedArchive0.toString();
        java.util.jar.Manifest manifest36 = null;
        explodedArchive0.manifest = manifest36;
        // The following exception was thrown during execution in test generation
        try {
            java.util.jar.Manifest manifest38 = explodedArchive0.getManifest();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file22.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file22.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file31.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file31.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file33.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file33.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file34.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file34.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str35 + "' != '" + "exploded archive" + "'", str35.equals("exploded archive"));
    }

    @Test
    public void test1176() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1176");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntry fileEntry0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntry();
        java.io.File file1 = fileEntry0.file;
        java.lang.String str2 = fileEntry0.name;
        java.io.File file3 = fileEntry0.file;
        java.io.File file4 = fileEntry0.file;
        java.lang.String str5 = fileEntry0.getName();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntry fileEntry6 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntry();
        java.lang.String str7 = fileEntry6.name;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator8 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file9 = null;
        fileEntryIterator8.current = file9;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive11 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.lang.String str12 = explodedArchive11.toString();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive13 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file14 = explodedArchive13.root;
        java.io.File file15 = null;
        explodedArchive13.manifestFile = file15;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive17 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest18 = explodedArchive17.manifest;
        explodedArchive17.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive21 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest22 = explodedArchive21.manifest;
        explodedArchive21.recursive = false;
        java.util.jar.Manifest manifest25 = explodedArchive21.manifest;
        java.io.File file26 = explodedArchive21.manifestFile;
        java.io.File file27 = null;
        java.io.File file28 = explodedArchive21.getManifestFile(file27);
        explodedArchive17.manifestFile = file27;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive30 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest31 = explodedArchive30.manifest;
        explodedArchive30.recursive = false;
        java.util.jar.Manifest manifest34 = explodedArchive30.manifest;
        java.io.File file35 = explodedArchive30.manifestFile;
        java.io.File file36 = null;
        java.io.File file37 = explodedArchive30.getManifestFile(file36);
        explodedArchive17.manifestFile = file37;
        java.io.File file39 = explodedArchive13.getManifestFile(file37);
        java.io.File file40 = explodedArchive11.getManifestFile(file37);
        fileEntryIterator8.root = file37;
        fileEntry6.file = file37;
        fileEntry0.file = file37;
        java.lang.String str44 = fileEntry0.name;
        java.io.File file45 = fileEntry0.getFile();
        boolean boolean46 = fileEntry0.isDirectory();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str12 + "' != '" + "exploded archive" + "'", str12.equals("exploded archive"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file28.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file28.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file37.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file37.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file39.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file39.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file40.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file40.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file45.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file45.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
    }

    @Test
    public void test1177() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1177");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest1 = explodedArchive0.manifest;
        explodedArchive0.recursive = false;
        java.io.File file4 = null;
        explodedArchive0.root = file4;
        java.io.File file6 = explodedArchive0.manifestFile;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive7 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file8 = explodedArchive7.root;
        java.io.File file9 = null;
        explodedArchive7.manifestFile = file9;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive11 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest12 = explodedArchive11.manifest;
        explodedArchive11.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive15 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest16 = explodedArchive15.manifest;
        explodedArchive15.recursive = false;
        java.util.jar.Manifest manifest19 = explodedArchive15.manifest;
        java.io.File file20 = explodedArchive15.manifestFile;
        java.io.File file21 = null;
        java.io.File file22 = explodedArchive15.getManifestFile(file21);
        explodedArchive11.manifestFile = file21;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive24 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest25 = explodedArchive24.manifest;
        explodedArchive24.recursive = false;
        java.util.jar.Manifest manifest28 = explodedArchive24.manifest;
        java.io.File file29 = explodedArchive24.manifestFile;
        java.io.File file30 = null;
        java.io.File file31 = explodedArchive24.getManifestFile(file30);
        explodedArchive11.manifestFile = file31;
        java.io.File file33 = explodedArchive7.getManifestFile(file31);
        java.io.File file34 = explodedArchive7.root;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator35 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        boolean boolean36 = fileEntryIterator35.hasNext();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator37 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator38 = entryComparator37.reversed();
        java.util.Comparator<java.io.File> fileComparator39 = fileComparator38.reversed();
        fileEntryIterator35.entryComparator = fileComparator39;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive41 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file42 = explodedArchive41.root;
        java.io.File file43 = null;
        explodedArchive41.manifestFile = file43;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive45 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest46 = explodedArchive45.manifest;
        explodedArchive45.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive49 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest50 = explodedArchive49.manifest;
        explodedArchive49.recursive = false;
        java.util.jar.Manifest manifest53 = explodedArchive49.manifest;
        java.io.File file54 = explodedArchive49.manifestFile;
        java.io.File file55 = null;
        java.io.File file56 = explodedArchive49.getManifestFile(file55);
        explodedArchive45.manifestFile = file55;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive58 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest59 = explodedArchive58.manifest;
        explodedArchive58.recursive = false;
        java.util.jar.Manifest manifest62 = explodedArchive58.manifest;
        java.io.File file63 = explodedArchive58.manifestFile;
        java.io.File file64 = null;
        java.io.File file65 = explodedArchive58.getManifestFile(file64);
        explodedArchive45.manifestFile = file65;
        java.io.File file67 = explodedArchive41.getManifestFile(file65);
        java.util.Iterator<java.io.File> fileItor68 = fileEntryIterator35.listFiles(file67);
        explodedArchive7.manifestFile = file67;
        java.io.File file70 = explodedArchive7.manifestFile;
        java.io.File file71 = explodedArchive0.getManifestFile(file70);
        explodedArchive0.recursive = true;
        java.util.jar.Manifest manifest74 = null;
        explodedArchive0.manifest = manifest74;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file22.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file22.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file31.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file31.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file33.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file33.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file56.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file56.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file65.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file65.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file67.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file67.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file70.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file70.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file71.getParent(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file71.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
    }

    @Test
    public void test1178() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1178");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator1 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file2 = null;
        fileEntryIterator1.current = file2;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive4 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.lang.String str5 = explodedArchive4.toString();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive6 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file7 = explodedArchive6.root;
        java.io.File file8 = null;
        explodedArchive6.manifestFile = file8;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive10 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest11 = explodedArchive10.manifest;
        explodedArchive10.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive14 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest15 = explodedArchive14.manifest;
        explodedArchive14.recursive = false;
        java.util.jar.Manifest manifest18 = explodedArchive14.manifest;
        java.io.File file19 = explodedArchive14.manifestFile;
        java.io.File file20 = null;
        java.io.File file21 = explodedArchive14.getManifestFile(file20);
        explodedArchive10.manifestFile = file20;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive23 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest24 = explodedArchive23.manifest;
        explodedArchive23.recursive = false;
        java.util.jar.Manifest manifest27 = explodedArchive23.manifest;
        java.io.File file28 = explodedArchive23.manifestFile;
        java.io.File file29 = null;
        java.io.File file30 = explodedArchive23.getManifestFile(file29);
        explodedArchive10.manifestFile = file30;
        java.io.File file32 = explodedArchive6.getManifestFile(file30);
        java.io.File file33 = explodedArchive4.getManifestFile(file30);
        fileEntryIterator1.root = file30;
        java.io.File file35 = fileEntryIterator1.poll();
        java.io.File file36 = fileEntryIterator1.poll();
        java.util.Deque<java.util.Iterator<java.io.File>> fileItorQueue37 = fileEntryIterator1.stack;
        fileEntryIterator0.stack = fileItorQueue37;
        boolean boolean39 = fileEntryIterator0.recursive;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "exploded archive" + "'", str5.equals("exploded archive"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file21.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file21.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file30.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file30.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file32.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file32.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file33.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file33.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItorQueue37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
    }

    @Test
    public void test1179() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1179");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        boolean boolean1 = fileEntryIterator0.recursive;
        java.io.File file2 = fileEntryIterator0.current;
        boolean boolean3 = fileEntryIterator0.hasNext();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator4 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file5 = null;
        fileEntryIterator4.current = file5;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive7 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest8 = explodedArchive7.manifest;
        explodedArchive7.recursive = false;
        java.util.jar.Manifest manifest11 = explodedArchive7.manifest;
        java.io.File file12 = explodedArchive7.manifestFile;
        java.io.File file13 = null;
        java.io.File file14 = explodedArchive7.getManifestFile(file13);
        java.util.Iterator<java.io.File> fileItor15 = fileEntryIterator4.listFiles(file14);
        java.io.File file16 = fileEntryIterator4.root;
        java.io.File file17 = fileEntryIterator4.root;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator18 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file19 = null;
        fileEntryIterator18.current = file19;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive21 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest22 = explodedArchive21.manifest;
        explodedArchive21.recursive = false;
        java.util.jar.Manifest manifest25 = explodedArchive21.manifest;
        java.io.File file26 = explodedArchive21.manifestFile;
        java.io.File file27 = null;
        java.io.File file28 = explodedArchive21.getManifestFile(file27);
        java.util.Iterator<java.io.File> fileItor29 = fileEntryIterator18.listFiles(file28);
        java.util.ArrayDeque<java.util.Iterator<java.io.File>> fileItorQueue30 = new java.util.ArrayDeque<java.util.Iterator<java.io.File>>();
        boolean boolean31 = fileItorQueue30.add(fileItor29);
        fileEntryIterator4.stack = fileItorQueue30;
        fileEntryIterator0.stack = fileItorQueue30;
        boolean boolean34 = fileEntryIterator0.recursive;
        java.util.Deque<java.util.Iterator<java.io.File>> fileItorQueue35 = fileEntryIterator0.stack;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator36 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator37 = entryComparator36.reversed();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator38 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator39 = entryComparator38.reversed();
        java.util.Comparator<java.io.File> fileComparator40 = entryComparator36.thenComparing(fileComparator39);
        fileEntryIterator0.entryComparator = fileComparator40;
        java.util.Comparator<java.io.File> fileComparator42 = fileEntryIterator0.entryComparator;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file14.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file14.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file28.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file28.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItorQueue35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator42);
    }

    @Test
    public void test1180() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1180");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntry fileEntry0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntry();
        java.lang.String str1 = fileEntry0.getName();
        java.io.File file2 = fileEntry0.getFile();
        java.io.File file3 = fileEntry0.file;
        fileEntry0.name = "exploded archive";
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator6 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file7 = null;
        fileEntryIterator6.current = file7;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive9 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest10 = explodedArchive9.manifest;
        explodedArchive9.recursive = false;
        java.util.jar.Manifest manifest13 = explodedArchive9.manifest;
        java.io.File file14 = explodedArchive9.manifestFile;
        java.io.File file15 = null;
        java.io.File file16 = explodedArchive9.getManifestFile(file15);
        java.util.Iterator<java.io.File> fileItor17 = fileEntryIterator6.listFiles(file16);
        java.io.File file18 = fileEntryIterator6.root;
        java.io.File file19 = fileEntryIterator6.root;
        java.util.Deque<java.util.Iterator<java.io.File>> fileItorQueue20 = fileEntryIterator6.stack;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator21 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator22 = entryComparator21.reversed();
        java.util.Comparator<java.io.File> fileComparator23 = entryComparator21.reversed();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive24 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest25 = explodedArchive24.manifest;
        explodedArchive24.recursive = false;
        java.util.jar.Manifest manifest28 = explodedArchive24.manifest;
        java.io.File file29 = explodedArchive24.manifestFile;
        java.io.File file30 = null;
        java.io.File file31 = explodedArchive24.getManifestFile(file30);
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive32 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest33 = explodedArchive32.manifest;
        explodedArchive32.recursive = false;
        java.io.File file36 = null;
        explodedArchive32.root = file36;
        java.io.File file38 = explodedArchive32.root;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive39 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest40 = explodedArchive39.manifest;
        explodedArchive39.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive43 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest44 = explodedArchive43.manifest;
        explodedArchive43.recursive = false;
        java.util.jar.Manifest manifest47 = explodedArchive43.manifest;
        java.io.File file48 = explodedArchive43.manifestFile;
        java.io.File file49 = null;
        java.io.File file50 = explodedArchive43.getManifestFile(file49);
        explodedArchive39.manifestFile = file49;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive52 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest53 = explodedArchive52.manifest;
        explodedArchive52.recursive = false;
        java.util.jar.Manifest manifest56 = explodedArchive52.manifest;
        java.io.File file57 = explodedArchive52.manifestFile;
        java.io.File file58 = null;
        java.io.File file59 = explodedArchive52.getManifestFile(file58);
        explodedArchive39.manifestFile = file59;
        java.io.File file61 = explodedArchive32.getManifestFile(file59);
        int int62 = entryComparator21.compare(file31, file59);
        fileEntryIterator6.root = file31;
        fileEntry0.file = file31;
        java.io.File file65 = fileEntry0.getFile();
        boolean boolean66 = fileEntry0.isDirectory();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file16.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file16.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItorQueue20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file31.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file31.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file50.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file50.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file59.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file59.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file61.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file61.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file65.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file65.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
    }

    @Test
    public void test1181() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1181");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntry fileEntry0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntry();
        java.io.File file1 = fileEntry0.getFile();
        java.io.File file2 = fileEntry0.getFile();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive3 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file4 = explodedArchive3.root;
        java.io.File file5 = null;
        explodedArchive3.manifestFile = file5;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive7 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest8 = explodedArchive7.manifest;
        explodedArchive7.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive11 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest12 = explodedArchive11.manifest;
        explodedArchive11.recursive = false;
        java.util.jar.Manifest manifest15 = explodedArchive11.manifest;
        java.io.File file16 = explodedArchive11.manifestFile;
        java.io.File file17 = null;
        java.io.File file18 = explodedArchive11.getManifestFile(file17);
        explodedArchive7.manifestFile = file17;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive20 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest21 = explodedArchive20.manifest;
        explodedArchive20.recursive = false;
        java.util.jar.Manifest manifest24 = explodedArchive20.manifest;
        java.io.File file25 = explodedArchive20.manifestFile;
        java.io.File file26 = null;
        java.io.File file27 = explodedArchive20.getManifestFile(file26);
        explodedArchive7.manifestFile = file27;
        java.io.File file29 = explodedArchive3.getManifestFile(file27);
        fileEntry0.file = file29;
        java.io.File file31 = fileEntry0.file;
        fileEntry0.name = "exploded archive";
        java.io.File file34 = fileEntry0.file;
        java.io.File file35 = fileEntry0.getFile();
        java.io.File file36 = fileEntry0.file;
        java.lang.String str37 = fileEntry0.getName();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive38 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest39 = explodedArchive38.manifest;
        java.util.jar.Manifest manifest40 = null;
        explodedArchive38.manifest = manifest40;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator42 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        boolean boolean43 = fileEntryIterator42.hasNext();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator44 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator45 = entryComparator44.reversed();
        java.util.Comparator<java.io.File> fileComparator46 = fileComparator45.reversed();
        fileEntryIterator42.entryComparator = fileComparator46;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive48 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file49 = explodedArchive48.root;
        java.io.File file50 = null;
        explodedArchive48.manifestFile = file50;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive52 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest53 = explodedArchive52.manifest;
        explodedArchive52.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive56 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest57 = explodedArchive56.manifest;
        explodedArchive56.recursive = false;
        java.util.jar.Manifest manifest60 = explodedArchive56.manifest;
        java.io.File file61 = explodedArchive56.manifestFile;
        java.io.File file62 = null;
        java.io.File file63 = explodedArchive56.getManifestFile(file62);
        explodedArchive52.manifestFile = file62;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive65 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest66 = explodedArchive65.manifest;
        explodedArchive65.recursive = false;
        java.util.jar.Manifest manifest69 = explodedArchive65.manifest;
        java.io.File file70 = explodedArchive65.manifestFile;
        java.io.File file71 = null;
        java.io.File file72 = explodedArchive65.getManifestFile(file71);
        explodedArchive52.manifestFile = file72;
        java.io.File file74 = explodedArchive48.getManifestFile(file72);
        java.util.Iterator<java.io.File> fileItor75 = fileEntryIterator42.listFiles(file74);
        java.io.File file76 = explodedArchive38.getManifestFile(file74);
        fileEntry0.file = file74;
        fileEntry0.name = "exploded archive";
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file18.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file18.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file27.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file27.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file29.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file29.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file31.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file31.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file34.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file34.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file35.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file35.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file36.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file36.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str37 + "' != '" + "exploded archive" + "'", str37.equals("exploded archive"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file63.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file63.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file72.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file72.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file74.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file74.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor75);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file76);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file76.getParent(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file76.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
    }

    @Test
    public void test1182() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1182");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file1 = null;
        fileEntryIterator0.current = file1;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive3 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.lang.String str4 = explodedArchive3.toString();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive5 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file6 = explodedArchive5.root;
        java.io.File file7 = null;
        explodedArchive5.manifestFile = file7;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive9 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest10 = explodedArchive9.manifest;
        explodedArchive9.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive13 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest14 = explodedArchive13.manifest;
        explodedArchive13.recursive = false;
        java.util.jar.Manifest manifest17 = explodedArchive13.manifest;
        java.io.File file18 = explodedArchive13.manifestFile;
        java.io.File file19 = null;
        java.io.File file20 = explodedArchive13.getManifestFile(file19);
        explodedArchive9.manifestFile = file19;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive22 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest23 = explodedArchive22.manifest;
        explodedArchive22.recursive = false;
        java.util.jar.Manifest manifest26 = explodedArchive22.manifest;
        java.io.File file27 = explodedArchive22.manifestFile;
        java.io.File file28 = null;
        java.io.File file29 = explodedArchive22.getManifestFile(file28);
        explodedArchive9.manifestFile = file29;
        java.io.File file31 = explodedArchive5.getManifestFile(file29);
        java.io.File file32 = explodedArchive3.getManifestFile(file29);
        fileEntryIterator0.root = file29;
        java.io.File file34 = fileEntryIterator0.poll();
        java.io.File file35 = null;
        fileEntryIterator0.current = file35;
        java.util.Deque<java.util.Iterator<java.io.File>> fileItorQueue37 = fileEntryIterator0.stack;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str4 + "' != '" + "exploded archive" + "'", str4.equals("exploded archive"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file20.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file20.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file29.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file29.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file31.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file31.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file32.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file32.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItorQueue37);
    }

    @Test
    public void test1183() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1183");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest1 = explodedArchive0.manifest;
        explodedArchive0.recursive = false;
        java.io.File file4 = null;
        explodedArchive0.root = file4;
        java.io.File file6 = explodedArchive0.manifestFile;
        java.io.File file7 = explodedArchive0.manifestFile;
        java.io.File file8 = explodedArchive0.manifestFile;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntry fileEntry9 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntry();
        java.io.File file10 = fileEntry9.getFile();
        java.io.File file11 = fileEntry9.getFile();
        java.lang.String str12 = fileEntry9.name;
        fileEntry9.name = "";
        java.io.File file15 = fileEntry9.file;
        java.io.File file16 = fileEntry9.file;
        java.lang.String str17 = fileEntry9.name;
        java.lang.String str18 = fileEntry9.getName();
        // The following exception was thrown during execution in test generation
        try {
            org.springframework.boot.loader.archive.Archive archive19 = explodedArchive0.getNestedArchive((org.springframework.boot.loader.archive.Archive.Entry) fileEntry9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str17 + "' != '" + "" + "'", str17.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str18 + "' != '" + "" + "'", str18.equals(""));
    }

    @Test
    public void test1184() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1184");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntry fileEntry0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntry();
        java.io.File file1 = fileEntry0.file;
        java.lang.String str2 = fileEntry0.name;
        java.io.File file3 = fileEntry0.file;
        java.io.File file4 = fileEntry0.file;
        java.lang.String str5 = fileEntry0.name;
        fileEntry0.name = "exploded archive";
        java.io.File file8 = fileEntry0.getFile();
        java.io.File file9 = fileEntry0.file;
        java.lang.String str10 = fileEntry0.name;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str10 + "' != '" + "exploded archive" + "'", str10.equals("exploded archive"));
    }

    @Test
    public void test1185() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1185");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file1 = null;
        fileEntryIterator0.current = file1;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive3 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest4 = explodedArchive3.manifest;
        explodedArchive3.recursive = false;
        java.util.jar.Manifest manifest7 = explodedArchive3.manifest;
        java.io.File file8 = explodedArchive3.manifestFile;
        java.io.File file9 = null;
        java.io.File file10 = explodedArchive3.getManifestFile(file9);
        java.util.Iterator<java.io.File> fileItor11 = fileEntryIterator0.listFiles(file10);
        java.io.File file12 = fileEntryIterator0.root;
        java.io.File file13 = fileEntryIterator0.poll();
        java.util.Comparator<java.io.File> fileComparator14 = fileEntryIterator0.entryComparator;
        java.util.Comparator<java.io.File> fileComparator15 = fileEntryIterator0.entryComparator;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator16 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        boolean boolean17 = fileEntryIterator16.hasNext();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator18 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator19 = entryComparator18.reversed();
        java.util.Comparator<java.io.File> fileComparator20 = fileComparator19.reversed();
        fileEntryIterator16.entryComparator = fileComparator20;
        java.util.Comparator<java.io.File> fileComparator22 = fileEntryIterator16.entryComparator;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator23 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator24 = entryComparator23.reversed();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator25 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator26 = entryComparator25.reversed();
        java.util.Comparator<java.io.File> fileComparator27 = entryComparator23.thenComparing(fileComparator26);
        java.util.Comparator<java.io.File> fileComparator28 = fileComparator22.thenComparing(fileComparator26);
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator29 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator30 = entryComparator29.reversed();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator31 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator32 = entryComparator31.reversed();
        java.util.Comparator<java.io.File> fileComparator33 = entryComparator29.thenComparing(fileComparator32);
        java.util.Comparator<java.io.File> fileComparator34 = fileComparator28.thenComparing((java.util.Comparator<java.io.File>) entryComparator29);
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator35 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        boolean boolean36 = fileEntryIterator35.hasNext();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator37 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator38 = entryComparator37.reversed();
        java.util.Comparator<java.io.File> fileComparator39 = fileComparator38.reversed();
        fileEntryIterator35.entryComparator = fileComparator39;
        java.util.Comparator<java.io.File> fileComparator41 = fileComparator28.thenComparing(fileComparator39);
        java.util.Comparator<java.io.File> fileComparator42 = fileComparator39.reversed();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator43 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator44 = entryComparator43.reversed();
        java.util.Comparator<java.io.File> fileComparator45 = fileComparator44.reversed();
        java.util.Comparator<java.io.File> fileComparator46 = fileComparator42.thenComparing(fileComparator45);
        java.util.Comparator<java.io.File> fileComparator47 = fileComparator45.reversed();
        fileEntryIterator0.entryComparator = fileComparator47;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator47);
    }

    @Test
    public void test1186() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1186");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        boolean boolean1 = fileEntryIterator0.hasNext();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator2 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator3 = entryComparator2.reversed();
        java.util.Comparator<java.io.File> fileComparator4 = fileComparator3.reversed();
        fileEntryIterator0.entryComparator = fileComparator4;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive6 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file7 = explodedArchive6.root;
        java.io.File file8 = null;
        explodedArchive6.manifestFile = file8;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive10 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest11 = explodedArchive10.manifest;
        explodedArchive10.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive14 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest15 = explodedArchive14.manifest;
        explodedArchive14.recursive = false;
        java.util.jar.Manifest manifest18 = explodedArchive14.manifest;
        java.io.File file19 = explodedArchive14.manifestFile;
        java.io.File file20 = null;
        java.io.File file21 = explodedArchive14.getManifestFile(file20);
        explodedArchive10.manifestFile = file20;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive23 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest24 = explodedArchive23.manifest;
        explodedArchive23.recursive = false;
        java.util.jar.Manifest manifest27 = explodedArchive23.manifest;
        java.io.File file28 = explodedArchive23.manifestFile;
        java.io.File file29 = null;
        java.io.File file30 = explodedArchive23.getManifestFile(file29);
        explodedArchive10.manifestFile = file30;
        java.io.File file32 = explodedArchive6.getManifestFile(file30);
        java.util.Iterator<java.io.File> fileItor33 = fileEntryIterator0.listFiles(file32);
        boolean boolean34 = fileEntryIterator0.recursive;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator35 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator36 = entryComparator35.reversed();
        java.util.Comparator<java.io.File> fileComparator37 = entryComparator35.reversed();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive38 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest39 = explodedArchive38.manifest;
        explodedArchive38.recursive = false;
        java.util.jar.Manifest manifest42 = explodedArchive38.manifest;
        java.io.File file43 = explodedArchive38.manifestFile;
        java.io.File file44 = null;
        java.io.File file45 = explodedArchive38.getManifestFile(file44);
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive46 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest47 = explodedArchive46.manifest;
        explodedArchive46.recursive = false;
        java.io.File file50 = null;
        explodedArchive46.root = file50;
        java.io.File file52 = explodedArchive46.root;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive53 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest54 = explodedArchive53.manifest;
        explodedArchive53.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive57 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest58 = explodedArchive57.manifest;
        explodedArchive57.recursive = false;
        java.util.jar.Manifest manifest61 = explodedArchive57.manifest;
        java.io.File file62 = explodedArchive57.manifestFile;
        java.io.File file63 = null;
        java.io.File file64 = explodedArchive57.getManifestFile(file63);
        explodedArchive53.manifestFile = file63;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive66 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest67 = explodedArchive66.manifest;
        explodedArchive66.recursive = false;
        java.util.jar.Manifest manifest70 = explodedArchive66.manifest;
        java.io.File file71 = explodedArchive66.manifestFile;
        java.io.File file72 = null;
        java.io.File file73 = explodedArchive66.getManifestFile(file72);
        explodedArchive53.manifestFile = file73;
        java.io.File file75 = explodedArchive46.getManifestFile(file73);
        int int76 = entryComparator35.compare(file45, file73);
        java.util.Iterator<java.io.File> fileItor77 = fileEntryIterator0.listFiles(file45);
        java.util.Deque<java.util.Iterator<java.io.File>> fileItorQueue78 = null;
        fileEntryIterator0.stack = fileItorQueue78;
        java.io.File file80 = fileEntryIterator0.current;
        java.util.Comparator<java.io.File> fileComparator81 = fileEntryIterator0.entryComparator;
        // The following exception was thrown during execution in test generation
        try {
            fileEntryIterator0.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: remove");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file21.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file21.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file30.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file30.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file32.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file32.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file45.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file45.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file64.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file64.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file73);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file73.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file73.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file75);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file75.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file75.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor77);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file80);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator81);
    }

    @Test
    public void test1187() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1187");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file1 = null;
        fileEntryIterator0.current = file1;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive3 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest4 = explodedArchive3.manifest;
        explodedArchive3.recursive = false;
        java.util.jar.Manifest manifest7 = explodedArchive3.manifest;
        java.io.File file8 = explodedArchive3.manifestFile;
        java.io.File file9 = null;
        java.io.File file10 = explodedArchive3.getManifestFile(file9);
        java.util.Iterator<java.io.File> fileItor11 = fileEntryIterator0.listFiles(file10);
        boolean boolean12 = fileEntryIterator0.hasNext();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator13 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator14 = entryComparator13.reversed();
        java.util.Comparator<java.io.File> fileComparator15 = entryComparator13.reversed();
        fileEntryIterator0.entryComparator = fileComparator15;
        java.io.File file17 = fileEntryIterator0.root;
        boolean boolean18 = fileEntryIterator0.recursive;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator19 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file20 = null;
        fileEntryIterator19.current = file20;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive22 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest23 = explodedArchive22.manifest;
        explodedArchive22.recursive = false;
        java.util.jar.Manifest manifest26 = explodedArchive22.manifest;
        java.io.File file27 = explodedArchive22.manifestFile;
        java.io.File file28 = null;
        java.io.File file29 = explodedArchive22.getManifestFile(file28);
        java.util.Iterator<java.io.File> fileItor30 = fileEntryIterator19.listFiles(file29);
        java.io.File file31 = fileEntryIterator19.root;
        java.io.File file32 = fileEntryIterator19.root;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive33 = new org.springframework.boot.loader.archive.ExplodedArchive();
        boolean boolean34 = explodedArchive33.recursive;
        boolean boolean35 = explodedArchive33.recursive;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive36 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file37 = explodedArchive36.root;
        java.io.File file38 = null;
        explodedArchive36.manifestFile = file38;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive40 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest41 = explodedArchive40.manifest;
        explodedArchive40.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive44 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest45 = explodedArchive44.manifest;
        explodedArchive44.recursive = false;
        java.util.jar.Manifest manifest48 = explodedArchive44.manifest;
        java.io.File file49 = explodedArchive44.manifestFile;
        java.io.File file50 = null;
        java.io.File file51 = explodedArchive44.getManifestFile(file50);
        explodedArchive40.manifestFile = file50;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive53 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest54 = explodedArchive53.manifest;
        explodedArchive53.recursive = false;
        java.util.jar.Manifest manifest57 = explodedArchive53.manifest;
        java.io.File file58 = explodedArchive53.manifestFile;
        java.io.File file59 = null;
        java.io.File file60 = explodedArchive53.getManifestFile(file59);
        explodedArchive40.manifestFile = file60;
        java.io.File file62 = explodedArchive36.getManifestFile(file60);
        explodedArchive33.manifestFile = file60;
        fileEntryIterator19.current = file60;
        java.util.Iterator<java.io.File> fileItor65 = fileEntryIterator0.listFiles(file60);
        // The following exception was thrown during execution in test generation
        try {
            org.springframework.boot.loader.archive.ExplodedArchive explodedArchive66 = new org.springframework.boot.loader.archive.ExplodedArchive(file60);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid source folder META-INF/MANIFEST.MF");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file29.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file29.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file51.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file51.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file60.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file60.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file62.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file62.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor65);
    }

    @Test
    public void test1188() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1188");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntry fileEntry0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntry();
        java.lang.String str1 = fileEntry0.getName();
        java.io.File file2 = fileEntry0.getFile();
        java.io.File file3 = fileEntry0.file;
        fileEntry0.name = "exploded archive";
        java.io.File file6 = fileEntry0.file;
        java.io.File file7 = fileEntry0.getFile();
        java.lang.String str8 = fileEntry0.getName();
        java.io.File file9 = fileEntry0.getFile();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str8 + "' != '" + "exploded archive" + "'", str8.equals("exploded archive"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file9);
    }

    @Test
    public void test1189() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1189");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest1 = explodedArchive0.manifest;
        java.util.jar.Manifest manifest2 = null;
        explodedArchive0.manifest = manifest2;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive4 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest5 = explodedArchive4.manifest;
        explodedArchive4.recursive = false;
        java.util.jar.Manifest manifest8 = explodedArchive4.manifest;
        java.io.File file9 = explodedArchive4.manifestFile;
        java.io.File file10 = null;
        java.io.File file11 = explodedArchive4.getManifestFile(file10);
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator12 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file13 = null;
        fileEntryIterator12.current = file13;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive15 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.lang.String str16 = explodedArchive15.toString();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive17 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file18 = explodedArchive17.root;
        java.io.File file19 = null;
        explodedArchive17.manifestFile = file19;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive21 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest22 = explodedArchive21.manifest;
        explodedArchive21.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive25 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest26 = explodedArchive25.manifest;
        explodedArchive25.recursive = false;
        java.util.jar.Manifest manifest29 = explodedArchive25.manifest;
        java.io.File file30 = explodedArchive25.manifestFile;
        java.io.File file31 = null;
        java.io.File file32 = explodedArchive25.getManifestFile(file31);
        explodedArchive21.manifestFile = file31;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive34 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest35 = explodedArchive34.manifest;
        explodedArchive34.recursive = false;
        java.util.jar.Manifest manifest38 = explodedArchive34.manifest;
        java.io.File file39 = explodedArchive34.manifestFile;
        java.io.File file40 = null;
        java.io.File file41 = explodedArchive34.getManifestFile(file40);
        explodedArchive21.manifestFile = file41;
        java.io.File file43 = explodedArchive17.getManifestFile(file41);
        java.io.File file44 = explodedArchive15.getManifestFile(file41);
        fileEntryIterator12.root = file41;
        explodedArchive4.root = file41;
        explodedArchive0.root = file41;
        java.util.jar.Manifest manifest48 = explodedArchive0.manifest;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file11.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file11.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str16 + "' != '" + "exploded archive" + "'", str16.equals("exploded archive"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file32.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file32.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file41.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file41.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file43.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file43.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file44.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file44.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest48);
    }

    @Test
    public void test1190() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1190");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file1 = explodedArchive0.root;
        java.io.File file2 = explodedArchive0.manifestFile;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntry fileEntry3 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntry();
        java.lang.String str4 = fileEntry3.getName();
        java.lang.String str5 = fileEntry3.getName();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator6 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator7 = entryComparator6.reversed();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive8 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file9 = explodedArchive8.root;
        java.io.File file10 = null;
        explodedArchive8.manifestFile = file10;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive12 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest13 = explodedArchive12.manifest;
        explodedArchive12.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive16 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest17 = explodedArchive16.manifest;
        explodedArchive16.recursive = false;
        java.util.jar.Manifest manifest20 = explodedArchive16.manifest;
        java.io.File file21 = explodedArchive16.manifestFile;
        java.io.File file22 = null;
        java.io.File file23 = explodedArchive16.getManifestFile(file22);
        explodedArchive12.manifestFile = file22;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive25 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest26 = explodedArchive25.manifest;
        explodedArchive25.recursive = false;
        java.util.jar.Manifest manifest29 = explodedArchive25.manifest;
        java.io.File file30 = explodedArchive25.manifestFile;
        java.io.File file31 = null;
        java.io.File file32 = explodedArchive25.getManifestFile(file31);
        explodedArchive12.manifestFile = file32;
        java.io.File file34 = explodedArchive8.getManifestFile(file32);
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive35 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest36 = explodedArchive35.manifest;
        explodedArchive35.recursive = false;
        java.io.File file39 = null;
        explodedArchive35.root = file39;
        java.io.File file41 = explodedArchive35.root;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive42 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest43 = explodedArchive42.manifest;
        explodedArchive42.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive46 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest47 = explodedArchive46.manifest;
        explodedArchive46.recursive = false;
        java.util.jar.Manifest manifest50 = explodedArchive46.manifest;
        java.io.File file51 = explodedArchive46.manifestFile;
        java.io.File file52 = null;
        java.io.File file53 = explodedArchive46.getManifestFile(file52);
        explodedArchive42.manifestFile = file52;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive55 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest56 = explodedArchive55.manifest;
        explodedArchive55.recursive = false;
        java.util.jar.Manifest manifest59 = explodedArchive55.manifest;
        java.io.File file60 = explodedArchive55.manifestFile;
        java.io.File file61 = null;
        java.io.File file62 = explodedArchive55.getManifestFile(file61);
        explodedArchive42.manifestFile = file62;
        java.io.File file64 = explodedArchive35.getManifestFile(file62);
        int int65 = entryComparator6.compare(file34, file62);
        fileEntry3.file = file62;
        java.io.File file67 = fileEntry3.getFile();
        explodedArchive0.root = file67;
        org.springframework.boot.loader.archive.Archive.EntryFilter entryFilter69 = null;
        java.util.List<org.springframework.boot.loader.archive.Archive> archiveList70 = explodedArchive0.getNestedArchives(entryFilter69);
        java.util.jar.Manifest manifest71 = null;
        explodedArchive0.manifest = manifest71;
        java.util.Iterator<org.springframework.boot.loader.archive.Archive.Entry> entryItor73 = explodedArchive0.iterator();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file23.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file23.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file32.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file32.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file34.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file34.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file53.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file53.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file62.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file62.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file64.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file64.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 21 + "'", int65 == 21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file67.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file67.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(archiveList70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(entryItor73);
    }

    @Test
    public void test1191() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1191");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file1 = null;
        fileEntryIterator0.current = file1;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive3 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest4 = explodedArchive3.manifest;
        explodedArchive3.recursive = false;
        java.util.jar.Manifest manifest7 = explodedArchive3.manifest;
        java.io.File file8 = explodedArchive3.manifestFile;
        java.io.File file9 = null;
        java.io.File file10 = explodedArchive3.getManifestFile(file9);
        java.util.Iterator<java.io.File> fileItor11 = fileEntryIterator0.listFiles(file10);
        java.io.File file12 = fileEntryIterator0.root;
        java.io.File file13 = fileEntryIterator0.poll();
        java.io.File file14 = fileEntryIterator0.poll();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator15 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        boolean boolean16 = fileEntryIterator15.hasNext();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator17 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator18 = entryComparator17.reversed();
        java.util.Comparator<java.io.File> fileComparator19 = fileComparator18.reversed();
        fileEntryIterator15.entryComparator = fileComparator19;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive21 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file22 = explodedArchive21.root;
        java.io.File file23 = null;
        explodedArchive21.manifestFile = file23;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive25 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest26 = explodedArchive25.manifest;
        explodedArchive25.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive29 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest30 = explodedArchive29.manifest;
        explodedArchive29.recursive = false;
        java.util.jar.Manifest manifest33 = explodedArchive29.manifest;
        java.io.File file34 = explodedArchive29.manifestFile;
        java.io.File file35 = null;
        java.io.File file36 = explodedArchive29.getManifestFile(file35);
        explodedArchive25.manifestFile = file35;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive38 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest39 = explodedArchive38.manifest;
        explodedArchive38.recursive = false;
        java.util.jar.Manifest manifest42 = explodedArchive38.manifest;
        java.io.File file43 = explodedArchive38.manifestFile;
        java.io.File file44 = null;
        java.io.File file45 = explodedArchive38.getManifestFile(file44);
        explodedArchive25.manifestFile = file45;
        java.io.File file47 = explodedArchive21.getManifestFile(file45);
        java.util.Iterator<java.io.File> fileItor48 = fileEntryIterator15.listFiles(file47);
        boolean boolean49 = fileEntryIterator15.recursive;
        java.util.Deque<java.util.Iterator<java.io.File>> fileItorQueue50 = fileEntryIterator15.stack;
        fileEntryIterator0.stack = fileItorQueue50;
        // The following exception was thrown during execution in test generation
        try {
            fileEntryIterator0.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: remove");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file36.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file36.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file45.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file45.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file47.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file47.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItorQueue50);
    }

    @Test
    public void test1192() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1192");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file1 = null;
        fileEntryIterator0.current = file1;
        fileEntryIterator0.recursive = true;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator5 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file6 = null;
        fileEntryIterator5.current = file6;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive8 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest9 = explodedArchive8.manifest;
        explodedArchive8.recursive = false;
        java.util.jar.Manifest manifest12 = explodedArchive8.manifest;
        java.io.File file13 = explodedArchive8.manifestFile;
        java.io.File file14 = null;
        java.io.File file15 = explodedArchive8.getManifestFile(file14);
        java.util.Iterator<java.io.File> fileItor16 = fileEntryIterator5.listFiles(file15);
        java.io.File file17 = fileEntryIterator5.root;
        java.io.File file18 = fileEntryIterator5.root;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator19 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file20 = null;
        fileEntryIterator19.current = file20;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive22 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest23 = explodedArchive22.manifest;
        explodedArchive22.recursive = false;
        java.util.jar.Manifest manifest26 = explodedArchive22.manifest;
        java.io.File file27 = explodedArchive22.manifestFile;
        java.io.File file28 = null;
        java.io.File file29 = explodedArchive22.getManifestFile(file28);
        java.util.Iterator<java.io.File> fileItor30 = fileEntryIterator19.listFiles(file29);
        java.util.ArrayDeque<java.util.Iterator<java.io.File>> fileItorQueue31 = new java.util.ArrayDeque<java.util.Iterator<java.io.File>>();
        boolean boolean32 = fileItorQueue31.add(fileItor30);
        fileEntryIterator5.stack = fileItorQueue31;
        java.util.Deque<java.util.Iterator<java.io.File>> fileItorQueue34 = fileEntryIterator5.stack;
        fileEntryIterator0.stack = fileItorQueue34;
        java.util.Comparator<java.io.File> fileComparator36 = fileEntryIterator0.entryComparator;
        java.io.File file37 = fileEntryIterator0.current;
        boolean boolean38 = fileEntryIterator0.hasNext();
        java.io.File file39 = fileEntryIterator0.root;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file15.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file15.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file29.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file29.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItorQueue34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file39);
    }

    @Test
    public void test1193() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1193");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file1 = null;
        fileEntryIterator0.current = file1;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive3 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest4 = explodedArchive3.manifest;
        explodedArchive3.recursive = false;
        java.util.jar.Manifest manifest7 = explodedArchive3.manifest;
        java.io.File file8 = explodedArchive3.manifestFile;
        java.io.File file9 = null;
        java.io.File file10 = explodedArchive3.getManifestFile(file9);
        java.util.Iterator<java.io.File> fileItor11 = fileEntryIterator0.listFiles(file10);
        java.io.File file12 = fileEntryIterator0.current;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator13 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file14 = null;
        fileEntryIterator13.current = file14;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive16 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest17 = explodedArchive16.manifest;
        explodedArchive16.recursive = false;
        java.util.jar.Manifest manifest20 = explodedArchive16.manifest;
        java.io.File file21 = explodedArchive16.manifestFile;
        java.io.File file22 = null;
        java.io.File file23 = explodedArchive16.getManifestFile(file22);
        java.util.Iterator<java.io.File> fileItor24 = fileEntryIterator13.listFiles(file23);
        java.util.ArrayDeque<java.util.Iterator<java.io.File>> fileItorQueue25 = new java.util.ArrayDeque<java.util.Iterator<java.io.File>>();
        boolean boolean26 = fileItorQueue25.add(fileItor24);
        fileEntryIterator0.stack = fileItorQueue25;
        java.util.Deque<java.util.Iterator<java.io.File>> fileItorQueue28 = fileEntryIterator0.stack;
        boolean boolean29 = fileEntryIterator0.recursive;
        java.util.Comparator<java.io.File> fileComparator30 = fileEntryIterator0.entryComparator;
        java.util.Comparator<java.io.File> fileComparator31 = fileComparator30.reversed();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file23.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file23.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItorQueue28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator31);
    }

    @Test
    public void test1194() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1194");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntry fileEntry0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntry();
        java.lang.String str1 = fileEntry0.name;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator2 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file3 = null;
        fileEntryIterator2.current = file3;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive5 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest6 = explodedArchive5.manifest;
        explodedArchive5.recursive = false;
        java.util.jar.Manifest manifest9 = explodedArchive5.manifest;
        java.io.File file10 = explodedArchive5.manifestFile;
        java.io.File file11 = null;
        java.io.File file12 = explodedArchive5.getManifestFile(file11);
        java.util.Iterator<java.io.File> fileItor13 = fileEntryIterator2.listFiles(file12);
        java.io.File file14 = fileEntryIterator2.current;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator15 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file16 = null;
        fileEntryIterator15.current = file16;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive18 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest19 = explodedArchive18.manifest;
        explodedArchive18.recursive = false;
        java.util.jar.Manifest manifest22 = explodedArchive18.manifest;
        java.io.File file23 = explodedArchive18.manifestFile;
        java.io.File file24 = null;
        java.io.File file25 = explodedArchive18.getManifestFile(file24);
        java.util.Iterator<java.io.File> fileItor26 = fileEntryIterator15.listFiles(file25);
        java.util.ArrayDeque<java.util.Iterator<java.io.File>> fileItorQueue27 = new java.util.ArrayDeque<java.util.Iterator<java.io.File>>();
        boolean boolean28 = fileItorQueue27.add(fileItor26);
        fileEntryIterator2.stack = fileItorQueue27;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive30 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest31 = explodedArchive30.manifest;
        explodedArchive30.recursive = false;
        java.io.File file34 = null;
        explodedArchive30.root = file34;
        java.io.File file36 = explodedArchive30.root;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive37 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest38 = explodedArchive37.manifest;
        explodedArchive37.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive41 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest42 = explodedArchive41.manifest;
        explodedArchive41.recursive = false;
        java.util.jar.Manifest manifest45 = explodedArchive41.manifest;
        java.io.File file46 = explodedArchive41.manifestFile;
        java.io.File file47 = null;
        java.io.File file48 = explodedArchive41.getManifestFile(file47);
        explodedArchive37.manifestFile = file47;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive50 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest51 = explodedArchive50.manifest;
        explodedArchive50.recursive = false;
        java.util.jar.Manifest manifest54 = explodedArchive50.manifest;
        java.io.File file55 = explodedArchive50.manifestFile;
        java.io.File file56 = null;
        java.io.File file57 = explodedArchive50.getManifestFile(file56);
        explodedArchive37.manifestFile = file57;
        java.io.File file59 = explodedArchive30.getManifestFile(file57);
        fileEntryIterator2.root = file57;
        fileEntry0.file = file57;
        boolean boolean62 = fileEntry0.isDirectory();
        boolean boolean63 = fileEntry0.isDirectory();
        java.io.File file64 = fileEntry0.file;
        java.lang.String str65 = fileEntry0.getName();
        java.io.File file66 = fileEntry0.file;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file12.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file12.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file25.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file25.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file48.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file48.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file57.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file57.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file59.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file59.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file64.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file64.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file66.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file66.toString(), "META-INF/MANIFEST.MF");
    }

    @Test
    public void test1195() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1195");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest1 = explodedArchive0.manifest;
        explodedArchive0.recursive = false;
        java.io.File file4 = null;
        explodedArchive0.root = file4;
        java.io.File file6 = explodedArchive0.root;
        java.util.jar.Manifest manifest7 = null;
        explodedArchive0.manifest = manifest7;
        explodedArchive0.recursive = false;
        java.util.jar.Manifest manifest11 = null;
        explodedArchive0.manifest = manifest11;
        java.lang.String str13 = explodedArchive0.toString();
        java.lang.String str14 = explodedArchive0.toString();
        java.util.jar.Manifest manifest15 = explodedArchive0.manifest;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive16 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest17 = explodedArchive16.manifest;
        explodedArchive16.recursive = false;
        java.io.File file20 = null;
        explodedArchive16.root = file20;
        java.io.File file22 = explodedArchive16.root;
        java.util.jar.Manifest manifest23 = null;
        explodedArchive16.manifest = manifest23;
        explodedArchive16.recursive = false;
        java.util.jar.Manifest manifest27 = null;
        explodedArchive16.manifest = manifest27;
        java.util.jar.Manifest manifest29 = null;
        explodedArchive16.manifest = manifest29;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive31 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.lang.String str32 = explodedArchive31.toString();
        java.io.File file33 = explodedArchive31.root;
        java.io.File file34 = explodedArchive31.root;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntry fileEntry35 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntry();
        java.lang.String str36 = fileEntry35.getName();
        java.io.File file37 = fileEntry35.getFile();
        java.lang.String str38 = fileEntry35.getName();
        java.lang.String str39 = fileEntry35.getName();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator40 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        boolean boolean41 = fileEntryIterator40.recursive;
        java.io.File file42 = fileEntryIterator40.current;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator43 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file44 = null;
        fileEntryIterator43.current = file44;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive46 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest47 = explodedArchive46.manifest;
        explodedArchive46.recursive = false;
        java.util.jar.Manifest manifest50 = explodedArchive46.manifest;
        java.io.File file51 = explodedArchive46.manifestFile;
        java.io.File file52 = null;
        java.io.File file53 = explodedArchive46.getManifestFile(file52);
        java.util.Iterator<java.io.File> fileItor54 = fileEntryIterator43.listFiles(file53);
        java.io.File file55 = fileEntryIterator43.root;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive56 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.lang.String str57 = explodedArchive56.toString();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive58 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file59 = explodedArchive58.root;
        java.io.File file60 = null;
        explodedArchive58.manifestFile = file60;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive62 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest63 = explodedArchive62.manifest;
        explodedArchive62.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive66 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest67 = explodedArchive66.manifest;
        explodedArchive66.recursive = false;
        java.util.jar.Manifest manifest70 = explodedArchive66.manifest;
        java.io.File file71 = explodedArchive66.manifestFile;
        java.io.File file72 = null;
        java.io.File file73 = explodedArchive66.getManifestFile(file72);
        explodedArchive62.manifestFile = file72;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive75 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest76 = explodedArchive75.manifest;
        explodedArchive75.recursive = false;
        java.util.jar.Manifest manifest79 = explodedArchive75.manifest;
        java.io.File file80 = explodedArchive75.manifestFile;
        java.io.File file81 = null;
        java.io.File file82 = explodedArchive75.getManifestFile(file81);
        explodedArchive62.manifestFile = file82;
        java.io.File file84 = explodedArchive58.getManifestFile(file82);
        java.io.File file85 = explodedArchive56.getManifestFile(file82);
        fileEntryIterator43.root = file82;
        java.util.Iterator<java.io.File> fileItor87 = fileEntryIterator40.listFiles(file82);
        fileEntry35.file = file82;
        explodedArchive31.manifestFile = file82;
        explodedArchive16.manifestFile = file82;
        explodedArchive0.manifestFile = file82;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str13 + "' != '" + "exploded archive" + "'", str13.equals("exploded archive"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str14 + "' != '" + "exploded archive" + "'", str14.equals("exploded archive"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str32 + "' != '" + "exploded archive" + "'", str32.equals("exploded archive"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file53.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file53.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str57 + "' != '" + "exploded archive" + "'", str57.equals("exploded archive"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file73);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file73.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file73.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest76);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest79);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file80);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file82);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file82.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file82.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file84);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file84.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file84.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file85);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file85.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file85.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor87);
    }

    @Test
    public void test1196() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1196");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest1 = explodedArchive0.manifest;
        java.util.jar.Manifest manifest2 = null;
        explodedArchive0.manifest = manifest2;
        java.io.File file4 = explodedArchive0.root;
        java.lang.String str5 = explodedArchive0.toString();
        boolean boolean6 = explodedArchive0.recursive;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator7 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file8 = null;
        fileEntryIterator7.current = file8;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive10 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest11 = explodedArchive10.manifest;
        explodedArchive10.recursive = false;
        java.util.jar.Manifest manifest14 = explodedArchive10.manifest;
        java.io.File file15 = explodedArchive10.manifestFile;
        java.io.File file16 = null;
        java.io.File file17 = explodedArchive10.getManifestFile(file16);
        java.util.Iterator<java.io.File> fileItor18 = fileEntryIterator7.listFiles(file17);
        java.io.File file19 = fileEntryIterator7.current;
        java.util.Deque<java.util.Iterator<java.io.File>> fileItorQueue20 = fileEntryIterator7.stack;
        java.util.Comparator<java.io.File> fileComparator21 = fileEntryIterator7.entryComparator;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntry fileEntry22 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntry();
        java.io.File file23 = fileEntry22.file;
        java.lang.String str24 = fileEntry22.name;
        java.io.File file25 = fileEntry22.file;
        java.lang.String str26 = fileEntry22.getName();
        fileEntry22.name = "";
        java.io.File file29 = fileEntry22.getFile();
        fileEntry22.name = "file:/server/study-execution/new-nimrod/nimrod-hunoroutput-test-dest/spring-boot/af20dc6cc45c032573413c401f9f73aa75371744/randoop_4/META-INF/MANIFEST.MF/META-INF/MANIFEST.MF";
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator32 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file33 = null;
        fileEntryIterator32.current = file33;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive35 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest36 = explodedArchive35.manifest;
        explodedArchive35.recursive = false;
        java.util.jar.Manifest manifest39 = explodedArchive35.manifest;
        java.io.File file40 = explodedArchive35.manifestFile;
        java.io.File file41 = null;
        java.io.File file42 = explodedArchive35.getManifestFile(file41);
        java.util.Iterator<java.io.File> fileItor43 = fileEntryIterator32.listFiles(file42);
        java.io.File file44 = fileEntryIterator32.current;
        boolean boolean45 = fileEntryIterator32.recursive;
        java.io.File file46 = fileEntryIterator32.poll();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator47 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file48 = null;
        fileEntryIterator47.current = file48;
        fileEntryIterator47.recursive = true;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator52 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator53 = entryComparator52.reversed();
        java.util.Comparator<java.io.File> fileComparator54 = entryComparator52.reversed();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive55 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest56 = explodedArchive55.manifest;
        explodedArchive55.recursive = false;
        java.util.jar.Manifest manifest59 = explodedArchive55.manifest;
        java.io.File file60 = explodedArchive55.manifestFile;
        java.io.File file61 = null;
        java.io.File file62 = explodedArchive55.getManifestFile(file61);
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive63 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest64 = explodedArchive63.manifest;
        explodedArchive63.recursive = false;
        java.io.File file67 = null;
        explodedArchive63.root = file67;
        java.io.File file69 = explodedArchive63.root;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive70 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest71 = explodedArchive70.manifest;
        explodedArchive70.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive74 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest75 = explodedArchive74.manifest;
        explodedArchive74.recursive = false;
        java.util.jar.Manifest manifest78 = explodedArchive74.manifest;
        java.io.File file79 = explodedArchive74.manifestFile;
        java.io.File file80 = null;
        java.io.File file81 = explodedArchive74.getManifestFile(file80);
        explodedArchive70.manifestFile = file80;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive83 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest84 = explodedArchive83.manifest;
        explodedArchive83.recursive = false;
        java.util.jar.Manifest manifest87 = explodedArchive83.manifest;
        java.io.File file88 = explodedArchive83.manifestFile;
        java.io.File file89 = null;
        java.io.File file90 = explodedArchive83.getManifestFile(file89);
        explodedArchive70.manifestFile = file90;
        java.io.File file92 = explodedArchive63.getManifestFile(file90);
        int int93 = entryComparator52.compare(file62, file90);
        java.util.Iterator<java.io.File> fileItor94 = fileEntryIterator47.listFiles(file62);
        fileEntryIterator32.current = file62;
        fileEntry22.file = file62;
        java.util.Iterator<java.io.File> fileItor97 = fileEntryIterator7.listFiles(file62);
        explodedArchive0.root = file62;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "exploded archive" + "'", str5.equals("exploded archive"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file17.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file17.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItorQueue20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file42.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file42.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file62.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file62.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest75);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest78);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file79);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file81);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file81.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file81.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest84);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest87);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file88);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file90);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file90.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file90.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file92);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file92.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file92.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 0 + "'", int93 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor94);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor97);
    }

    @Test
    public void test1197() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1197");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file1 = explodedArchive0.root;
        java.io.File file2 = explodedArchive0.manifestFile;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntry fileEntry3 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntry();
        java.lang.String str4 = fileEntry3.getName();
        java.lang.String str5 = fileEntry3.getName();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator6 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator7 = entryComparator6.reversed();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive8 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file9 = explodedArchive8.root;
        java.io.File file10 = null;
        explodedArchive8.manifestFile = file10;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive12 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest13 = explodedArchive12.manifest;
        explodedArchive12.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive16 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest17 = explodedArchive16.manifest;
        explodedArchive16.recursive = false;
        java.util.jar.Manifest manifest20 = explodedArchive16.manifest;
        java.io.File file21 = explodedArchive16.manifestFile;
        java.io.File file22 = null;
        java.io.File file23 = explodedArchive16.getManifestFile(file22);
        explodedArchive12.manifestFile = file22;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive25 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest26 = explodedArchive25.manifest;
        explodedArchive25.recursive = false;
        java.util.jar.Manifest manifest29 = explodedArchive25.manifest;
        java.io.File file30 = explodedArchive25.manifestFile;
        java.io.File file31 = null;
        java.io.File file32 = explodedArchive25.getManifestFile(file31);
        explodedArchive12.manifestFile = file32;
        java.io.File file34 = explodedArchive8.getManifestFile(file32);
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive35 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest36 = explodedArchive35.manifest;
        explodedArchive35.recursive = false;
        java.io.File file39 = null;
        explodedArchive35.root = file39;
        java.io.File file41 = explodedArchive35.root;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive42 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest43 = explodedArchive42.manifest;
        explodedArchive42.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive46 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest47 = explodedArchive46.manifest;
        explodedArchive46.recursive = false;
        java.util.jar.Manifest manifest50 = explodedArchive46.manifest;
        java.io.File file51 = explodedArchive46.manifestFile;
        java.io.File file52 = null;
        java.io.File file53 = explodedArchive46.getManifestFile(file52);
        explodedArchive42.manifestFile = file52;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive55 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest56 = explodedArchive55.manifest;
        explodedArchive55.recursive = false;
        java.util.jar.Manifest manifest59 = explodedArchive55.manifest;
        java.io.File file60 = explodedArchive55.manifestFile;
        java.io.File file61 = null;
        java.io.File file62 = explodedArchive55.getManifestFile(file61);
        explodedArchive42.manifestFile = file62;
        java.io.File file64 = explodedArchive35.getManifestFile(file62);
        int int65 = entryComparator6.compare(file34, file62);
        fileEntry3.file = file62;
        java.io.File file67 = fileEntry3.getFile();
        explodedArchive0.root = file67;
        org.springframework.boot.loader.archive.Archive.EntryFilter entryFilter69 = null;
        java.util.List<org.springframework.boot.loader.archive.Archive> archiveList70 = explodedArchive0.getNestedArchives(entryFilter69);
        java.util.jar.Manifest manifest71 = null;
        explodedArchive0.manifest = manifest71;
        java.io.File file73 = explodedArchive0.manifestFile;
        // The following exception was thrown during execution in test generation
        try {
            java.util.jar.Manifest manifest74 = explodedArchive0.getManifest();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file23.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file23.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file32.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file32.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file34.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file34.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file53.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file53.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file62.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file62.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file64.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file64.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 21 + "'", int65 == 21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file67.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file67.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(archiveList70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file73);
    }

    @Test
    public void test1198() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1198");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file1 = null;
        fileEntryIterator0.current = file1;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive3 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest4 = explodedArchive3.manifest;
        explodedArchive3.recursive = false;
        java.util.jar.Manifest manifest7 = explodedArchive3.manifest;
        java.io.File file8 = explodedArchive3.manifestFile;
        java.io.File file9 = null;
        java.io.File file10 = explodedArchive3.getManifestFile(file9);
        java.util.Iterator<java.io.File> fileItor11 = fileEntryIterator0.listFiles(file10);
        java.util.Comparator<java.io.File> fileComparator12 = fileEntryIterator0.entryComparator;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator13 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file14 = null;
        fileEntryIterator13.current = file14;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive16 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest17 = explodedArchive16.manifest;
        explodedArchive16.recursive = false;
        java.util.jar.Manifest manifest20 = explodedArchive16.manifest;
        java.io.File file21 = explodedArchive16.manifestFile;
        java.io.File file22 = null;
        java.io.File file23 = explodedArchive16.getManifestFile(file22);
        java.util.Iterator<java.io.File> fileItor24 = fileEntryIterator13.listFiles(file23);
        java.io.File file25 = fileEntryIterator13.current;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator26 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file27 = null;
        fileEntryIterator26.current = file27;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive29 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest30 = explodedArchive29.manifest;
        explodedArchive29.recursive = false;
        java.util.jar.Manifest manifest33 = explodedArchive29.manifest;
        java.io.File file34 = explodedArchive29.manifestFile;
        java.io.File file35 = null;
        java.io.File file36 = explodedArchive29.getManifestFile(file35);
        java.util.Iterator<java.io.File> fileItor37 = fileEntryIterator26.listFiles(file36);
        java.io.File file38 = fileEntryIterator26.current;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator39 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file40 = null;
        fileEntryIterator39.current = file40;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive42 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest43 = explodedArchive42.manifest;
        explodedArchive42.recursive = false;
        java.util.jar.Manifest manifest46 = explodedArchive42.manifest;
        java.io.File file47 = explodedArchive42.manifestFile;
        java.io.File file48 = null;
        java.io.File file49 = explodedArchive42.getManifestFile(file48);
        java.util.Iterator<java.io.File> fileItor50 = fileEntryIterator39.listFiles(file49);
        java.util.ArrayDeque<java.util.Iterator<java.io.File>> fileItorQueue51 = new java.util.ArrayDeque<java.util.Iterator<java.io.File>>();
        boolean boolean52 = fileItorQueue51.add(fileItor50);
        fileEntryIterator26.stack = fileItorQueue51;
        fileEntryIterator13.stack = fileItorQueue51;
        fileEntryIterator0.stack = fileItorQueue51;
        boolean boolean56 = fileEntryIterator0.hasNext();
        java.io.File file57 = fileEntryIterator0.poll();
        java.util.Deque<java.util.Iterator<java.io.File>> fileItorQueue58 = fileEntryIterator0.stack;
        boolean boolean59 = fileEntryIterator0.hasNext();
        java.io.File file60 = fileEntryIterator0.poll();
        boolean boolean61 = fileEntryIterator0.hasNext();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file23.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file23.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file36.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file36.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file49.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file49.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItorQueue58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
    }

    @Test
    public void test1199() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1199");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file1 = explodedArchive0.root;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive2 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest3 = explodedArchive2.manifest;
        explodedArchive2.recursive = false;
        java.util.jar.Manifest manifest6 = explodedArchive2.manifest;
        java.io.File file7 = explodedArchive2.manifestFile;
        java.io.File file8 = null;
        java.io.File file9 = explodedArchive2.getManifestFile(file8);
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator10 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file11 = null;
        fileEntryIterator10.current = file11;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive13 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.lang.String str14 = explodedArchive13.toString();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive15 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file16 = explodedArchive15.root;
        java.io.File file17 = null;
        explodedArchive15.manifestFile = file17;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive19 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest20 = explodedArchive19.manifest;
        explodedArchive19.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive23 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest24 = explodedArchive23.manifest;
        explodedArchive23.recursive = false;
        java.util.jar.Manifest manifest27 = explodedArchive23.manifest;
        java.io.File file28 = explodedArchive23.manifestFile;
        java.io.File file29 = null;
        java.io.File file30 = explodedArchive23.getManifestFile(file29);
        explodedArchive19.manifestFile = file29;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive32 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest33 = explodedArchive32.manifest;
        explodedArchive32.recursive = false;
        java.util.jar.Manifest manifest36 = explodedArchive32.manifest;
        java.io.File file37 = explodedArchive32.manifestFile;
        java.io.File file38 = null;
        java.io.File file39 = explodedArchive32.getManifestFile(file38);
        explodedArchive19.manifestFile = file39;
        java.io.File file41 = explodedArchive15.getManifestFile(file39);
        java.io.File file42 = explodedArchive13.getManifestFile(file39);
        fileEntryIterator10.root = file39;
        explodedArchive2.root = file39;
        java.io.File file45 = explodedArchive0.getManifestFile(file39);
        java.util.jar.Manifest manifest46 = null;
        explodedArchive0.manifest = manifest46;
        java.lang.String str48 = explodedArchive0.toString();
        java.io.File file49 = explodedArchive0.manifestFile;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file9.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file9.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str14 + "' != '" + "exploded archive" + "'", str14.equals("exploded archive"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file30.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file30.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file39.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file39.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file41.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file41.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file42.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file42.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file45.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file45.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str48 + "' != '" + "exploded archive" + "'", str48.equals("exploded archive"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file49);
    }

    @Test
    public void test1200() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1200");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest1 = explodedArchive0.manifest;
        java.util.jar.Manifest manifest2 = null;
        explodedArchive0.manifest = manifest2;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator4 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        boolean boolean5 = fileEntryIterator4.hasNext();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator6 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator7 = entryComparator6.reversed();
        java.util.Comparator<java.io.File> fileComparator8 = fileComparator7.reversed();
        fileEntryIterator4.entryComparator = fileComparator8;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive10 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file11 = explodedArchive10.root;
        java.io.File file12 = null;
        explodedArchive10.manifestFile = file12;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive14 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest15 = explodedArchive14.manifest;
        explodedArchive14.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive18 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest19 = explodedArchive18.manifest;
        explodedArchive18.recursive = false;
        java.util.jar.Manifest manifest22 = explodedArchive18.manifest;
        java.io.File file23 = explodedArchive18.manifestFile;
        java.io.File file24 = null;
        java.io.File file25 = explodedArchive18.getManifestFile(file24);
        explodedArchive14.manifestFile = file24;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive27 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest28 = explodedArchive27.manifest;
        explodedArchive27.recursive = false;
        java.util.jar.Manifest manifest31 = explodedArchive27.manifest;
        java.io.File file32 = explodedArchive27.manifestFile;
        java.io.File file33 = null;
        java.io.File file34 = explodedArchive27.getManifestFile(file33);
        explodedArchive14.manifestFile = file34;
        java.io.File file36 = explodedArchive10.getManifestFile(file34);
        java.util.Iterator<java.io.File> fileItor37 = fileEntryIterator4.listFiles(file36);
        java.io.File file38 = explodedArchive0.getManifestFile(file36);
        java.lang.String str39 = explodedArchive0.toString();
        java.io.File file40 = explodedArchive0.root;
        org.springframework.boot.loader.archive.Archive.EntryFilter entryFilter41 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<org.springframework.boot.loader.archive.Archive> archiveList42 = explodedArchive0.getNestedArchives(entryFilter41);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file25.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file25.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file34.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file34.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file36.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file36.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file38.getParent(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file38.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str39 + "' != '" + "exploded archive" + "'", str39.equals("exploded archive"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file40);
    }

    @Test
    public void test1201() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1201");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        boolean boolean1 = fileEntryIterator0.hasNext();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator2 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator3 = entryComparator2.reversed();
        java.util.Comparator<java.io.File> fileComparator4 = fileComparator3.reversed();
        fileEntryIterator0.entryComparator = fileComparator4;
        java.util.Comparator<java.io.File> fileComparator6 = fileEntryIterator0.entryComparator;
        java.io.File file7 = fileEntryIterator0.current;
        java.util.Comparator<java.io.File> fileComparator8 = fileEntryIterator0.entryComparator;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive9 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest10 = explodedArchive9.manifest;
        explodedArchive9.recursive = false;
        java.io.File file13 = null;
        explodedArchive9.root = file13;
        java.io.File file15 = explodedArchive9.root;
        java.util.jar.Manifest manifest16 = null;
        explodedArchive9.manifest = manifest16;
        explodedArchive9.recursive = false;
        java.util.jar.Manifest manifest20 = null;
        explodedArchive9.manifest = manifest20;
        java.lang.String str22 = explodedArchive9.toString();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive23 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.lang.String str24 = explodedArchive23.toString();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive25 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file26 = explodedArchive25.root;
        java.io.File file27 = null;
        explodedArchive25.manifestFile = file27;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive29 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest30 = explodedArchive29.manifest;
        explodedArchive29.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive33 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest34 = explodedArchive33.manifest;
        explodedArchive33.recursive = false;
        java.util.jar.Manifest manifest37 = explodedArchive33.manifest;
        java.io.File file38 = explodedArchive33.manifestFile;
        java.io.File file39 = null;
        java.io.File file40 = explodedArchive33.getManifestFile(file39);
        explodedArchive29.manifestFile = file39;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive42 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest43 = explodedArchive42.manifest;
        explodedArchive42.recursive = false;
        java.util.jar.Manifest manifest46 = explodedArchive42.manifest;
        java.io.File file47 = explodedArchive42.manifestFile;
        java.io.File file48 = null;
        java.io.File file49 = explodedArchive42.getManifestFile(file48);
        explodedArchive29.manifestFile = file49;
        java.io.File file51 = explodedArchive25.getManifestFile(file49);
        java.io.File file52 = explodedArchive23.getManifestFile(file49);
        java.io.File file53 = explodedArchive9.getManifestFile(file49);
        fileEntryIterator0.current = file53;
        java.io.File file55 = fileEntryIterator0.poll();
        java.io.File file56 = fileEntryIterator0.current;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str22 + "' != '" + "exploded archive" + "'", str22.equals("exploded archive"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str24 + "' != '" + "exploded archive" + "'", str24.equals("exploded archive"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file40.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file40.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file49.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file49.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file51.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file51.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file52.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file52.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file53.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file53.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file56.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file56.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
    }

    @Test
    public void test1202() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1202");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest1 = explodedArchive0.manifest;
        explodedArchive0.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive4 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest5 = explodedArchive4.manifest;
        explodedArchive4.recursive = false;
        java.util.jar.Manifest manifest8 = explodedArchive4.manifest;
        java.io.File file9 = explodedArchive4.manifestFile;
        java.io.File file10 = null;
        java.io.File file11 = explodedArchive4.getManifestFile(file10);
        explodedArchive0.manifestFile = file10;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive13 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest14 = explodedArchive13.manifest;
        explodedArchive13.recursive = false;
        java.util.jar.Manifest manifest17 = explodedArchive13.manifest;
        java.io.File file18 = explodedArchive13.manifestFile;
        java.io.File file19 = null;
        java.io.File file20 = explodedArchive13.getManifestFile(file19);
        explodedArchive0.manifestFile = file20;
        boolean boolean22 = explodedArchive0.recursive;
        java.io.File file23 = explodedArchive0.root;
        java.util.jar.Manifest manifest24 = explodedArchive0.getManifest();
        explodedArchive0.recursive = true;
        boolean boolean27 = explodedArchive0.recursive;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive28 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest29 = explodedArchive28.manifest;
        explodedArchive28.recursive = false;
        java.io.File file32 = null;
        explodedArchive28.root = file32;
        boolean boolean34 = explodedArchive28.recursive;
        java.lang.String str35 = explodedArchive28.toString();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntry fileEntry36 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntry();
        java.lang.String str37 = fileEntry36.getName();
        java.io.File file38 = fileEntry36.getFile();
        java.lang.String str39 = fileEntry36.getName();
        java.io.File file40 = fileEntry36.getFile();
        java.lang.String str41 = fileEntry36.name;
        java.lang.String str42 = fileEntry36.name;
        java.lang.String str43 = fileEntry36.getName();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive44 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file45 = explodedArchive44.root;
        java.io.File file46 = null;
        explodedArchive44.manifestFile = file46;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive48 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest49 = explodedArchive48.manifest;
        explodedArchive48.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive52 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest53 = explodedArchive52.manifest;
        explodedArchive52.recursive = false;
        java.util.jar.Manifest manifest56 = explodedArchive52.manifest;
        java.io.File file57 = explodedArchive52.manifestFile;
        java.io.File file58 = null;
        java.io.File file59 = explodedArchive52.getManifestFile(file58);
        explodedArchive48.manifestFile = file58;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive61 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest62 = explodedArchive61.manifest;
        explodedArchive61.recursive = false;
        java.util.jar.Manifest manifest65 = explodedArchive61.manifest;
        java.io.File file66 = explodedArchive61.manifestFile;
        java.io.File file67 = null;
        java.io.File file68 = explodedArchive61.getManifestFile(file67);
        explodedArchive48.manifestFile = file68;
        java.io.File file70 = explodedArchive44.getManifestFile(file68);
        fileEntry36.file = file70;
        java.io.File file72 = fileEntry36.file;
        java.io.File file73 = explodedArchive28.getManifestFile(file72);
        explodedArchive0.root = file72;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file11.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file11.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file20.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file20.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str35 + "' != '" + "exploded archive" + "'", str35.equals("exploded archive"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file59.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file59.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file68.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file68.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file70.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file70.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file72.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file72.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file73);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file73.getParent(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file73.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
    }

    @Test
    public void test1203() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1203");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        boolean boolean1 = fileEntryIterator0.hasNext();
        java.io.File file2 = fileEntryIterator0.root;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator3 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file4 = null;
        fileEntryIterator3.current = file4;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive6 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest7 = explodedArchive6.manifest;
        explodedArchive6.recursive = false;
        java.util.jar.Manifest manifest10 = explodedArchive6.manifest;
        java.io.File file11 = explodedArchive6.manifestFile;
        java.io.File file12 = null;
        java.io.File file13 = explodedArchive6.getManifestFile(file12);
        java.util.Iterator<java.io.File> fileItor14 = fileEntryIterator3.listFiles(file13);
        java.io.File file15 = fileEntryIterator3.current;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator16 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file17 = null;
        fileEntryIterator16.current = file17;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive19 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest20 = explodedArchive19.manifest;
        explodedArchive19.recursive = false;
        java.util.jar.Manifest manifest23 = explodedArchive19.manifest;
        java.io.File file24 = explodedArchive19.manifestFile;
        java.io.File file25 = null;
        java.io.File file26 = explodedArchive19.getManifestFile(file25);
        java.util.Iterator<java.io.File> fileItor27 = fileEntryIterator16.listFiles(file26);
        java.util.ArrayDeque<java.util.Iterator<java.io.File>> fileItorQueue28 = new java.util.ArrayDeque<java.util.Iterator<java.io.File>>();
        boolean boolean29 = fileItorQueue28.add(fileItor27);
        fileEntryIterator3.stack = fileItorQueue28;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive31 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest32 = explodedArchive31.manifest;
        explodedArchive31.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive35 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest36 = explodedArchive35.manifest;
        explodedArchive35.recursive = false;
        java.util.jar.Manifest manifest39 = explodedArchive35.manifest;
        java.io.File file40 = explodedArchive35.manifestFile;
        java.io.File file41 = null;
        java.io.File file42 = explodedArchive35.getManifestFile(file41);
        explodedArchive31.manifestFile = file41;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive44 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest45 = explodedArchive44.manifest;
        explodedArchive44.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive48 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest49 = explodedArchive48.manifest;
        explodedArchive48.recursive = false;
        java.util.jar.Manifest manifest52 = explodedArchive48.manifest;
        java.io.File file53 = explodedArchive48.manifestFile;
        java.io.File file54 = null;
        java.io.File file55 = explodedArchive48.getManifestFile(file54);
        explodedArchive44.manifestFile = file54;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive57 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest58 = explodedArchive57.manifest;
        explodedArchive57.recursive = false;
        java.util.jar.Manifest manifest61 = explodedArchive57.manifest;
        java.io.File file62 = explodedArchive57.manifestFile;
        java.io.File file63 = null;
        java.io.File file64 = explodedArchive57.getManifestFile(file63);
        explodedArchive44.manifestFile = file64;
        explodedArchive31.root = file64;
        java.util.Iterator<java.io.File> fileItor67 = fileEntryIterator3.listFiles(file64);
        java.util.Comparator<java.io.File> fileComparator68 = fileEntryIterator3.entryComparator;
        fileEntryIterator0.entryComparator = fileComparator68;
        fileEntryIterator0.recursive = false;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file13.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file13.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file26.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file26.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file42.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file42.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file55.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file55.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file64.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file64.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator68);
    }

    @Test
    public void test1204() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1204");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.lang.String str1 = explodedArchive0.toString();
        explodedArchive0.recursive = true;
        java.io.File file4 = explodedArchive0.manifestFile;
        java.io.File file5 = explodedArchive0.manifestFile;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str1 + "' != '" + "exploded archive" + "'", str1.equals("exploded archive"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file5);
    }

    @Test
    public void test1205() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1205");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntry fileEntry0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntry();
        java.lang.String str1 = fileEntry0.getName();
        java.io.File file2 = fileEntry0.getFile();
        java.lang.String str3 = fileEntry0.getName();
        java.lang.String str4 = fileEntry0.getName();
        java.io.File file5 = fileEntry0.file;
        fileEntry0.name = "file:/server/study-execution/new-nimrod/nimrod-hunoroutput-test-dest/spring-boot/af20dc6cc45c032573413c401f9f73aa75371744/randoop_4/META-INF/MANIFEST.MF";
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file5);
    }

    @Test
    public void test1206() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1206");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file1 = explodedArchive0.root;
        explodedArchive0.recursive = false;
        java.lang.String str4 = explodedArchive0.toString();
        java.util.jar.Manifest manifest5 = null;
        explodedArchive0.manifest = manifest5;
        org.springframework.boot.loader.archive.Archive.EntryFilter entryFilter7 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<org.springframework.boot.loader.archive.Archive> archiveList8 = explodedArchive0.getNestedArchives(entryFilter7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str4 + "' != '" + "exploded archive" + "'", str4.equals("exploded archive"));
    }

    @Test
    public void test1207() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1207");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntry fileEntry0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntry();
        java.io.File file1 = fileEntry0.file;
        java.lang.String str2 = fileEntry0.name;
        java.io.File file3 = fileEntry0.file;
        java.io.File file4 = fileEntry0.file;
        java.lang.String str5 = fileEntry0.getName();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntry fileEntry6 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntry();
        java.lang.String str7 = fileEntry6.name;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator8 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file9 = null;
        fileEntryIterator8.current = file9;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive11 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.lang.String str12 = explodedArchive11.toString();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive13 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file14 = explodedArchive13.root;
        java.io.File file15 = null;
        explodedArchive13.manifestFile = file15;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive17 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest18 = explodedArchive17.manifest;
        explodedArchive17.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive21 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest22 = explodedArchive21.manifest;
        explodedArchive21.recursive = false;
        java.util.jar.Manifest manifest25 = explodedArchive21.manifest;
        java.io.File file26 = explodedArchive21.manifestFile;
        java.io.File file27 = null;
        java.io.File file28 = explodedArchive21.getManifestFile(file27);
        explodedArchive17.manifestFile = file27;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive30 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest31 = explodedArchive30.manifest;
        explodedArchive30.recursive = false;
        java.util.jar.Manifest manifest34 = explodedArchive30.manifest;
        java.io.File file35 = explodedArchive30.manifestFile;
        java.io.File file36 = null;
        java.io.File file37 = explodedArchive30.getManifestFile(file36);
        explodedArchive17.manifestFile = file37;
        java.io.File file39 = explodedArchive13.getManifestFile(file37);
        java.io.File file40 = explodedArchive11.getManifestFile(file37);
        fileEntryIterator8.root = file37;
        fileEntry6.file = file37;
        fileEntry0.file = file37;
        java.lang.String str44 = fileEntry0.name;
        java.lang.String str45 = fileEntry0.name;
        java.io.File file46 = fileEntry0.file;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str12 + "' != '" + "exploded archive" + "'", str12.equals("exploded archive"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file28.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file28.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file37.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file37.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file39.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file39.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file40.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file40.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file46.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file46.toString(), "META-INF/MANIFEST.MF");
    }

    @Test
    public void test1208() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1208");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest1 = explodedArchive0.manifest;
        explodedArchive0.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive4 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest5 = explodedArchive4.manifest;
        explodedArchive4.recursive = false;
        java.util.jar.Manifest manifest8 = explodedArchive4.manifest;
        java.io.File file9 = explodedArchive4.manifestFile;
        java.io.File file10 = null;
        java.io.File file11 = explodedArchive4.getManifestFile(file10);
        explodedArchive0.manifestFile = file10;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive13 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest14 = explodedArchive13.manifest;
        explodedArchive13.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive17 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest18 = explodedArchive17.manifest;
        explodedArchive17.recursive = false;
        java.util.jar.Manifest manifest21 = explodedArchive17.manifest;
        java.io.File file22 = explodedArchive17.manifestFile;
        java.io.File file23 = null;
        java.io.File file24 = explodedArchive17.getManifestFile(file23);
        explodedArchive13.manifestFile = file23;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive26 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest27 = explodedArchive26.manifest;
        explodedArchive26.recursive = false;
        java.util.jar.Manifest manifest30 = explodedArchive26.manifest;
        java.io.File file31 = explodedArchive26.manifestFile;
        java.io.File file32 = null;
        java.io.File file33 = explodedArchive26.getManifestFile(file32);
        explodedArchive13.manifestFile = file33;
        explodedArchive0.root = file33;
        java.net.URL uRL36 = explodedArchive0.getUrl();
        java.net.URL uRL37 = explodedArchive0.getUrl();
        boolean boolean38 = explodedArchive0.recursive;
        java.util.Spliterator<org.springframework.boot.loader.archive.Archive.Entry> entrySpliterator39 = explodedArchive0.spliterator();
        org.springframework.boot.loader.archive.Archive.EntryFilter entryFilter40 = null;
        java.util.List<org.springframework.boot.loader.archive.Archive> archiveList41 = explodedArchive0.getNestedArchives(entryFilter40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file11.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file11.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file24.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file24.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file33.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file33.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(uRL36);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(uRL36.toString(), "file:/server/study-execution/new-nimrod/nimrod-hunoroutput-test-dest/spring-boot/af20dc6cc45c032573413c401f9f73aa75371744/randoop_4/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(uRL37);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(uRL37.toString(), "file:/server/study-execution/new-nimrod/nimrod-hunoroutput-test-dest/spring-boot/af20dc6cc45c032573413c401f9f73aa75371744/randoop_4/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(entrySpliterator39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(archiveList41);
    }

    @Test
    public void test1209() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1209");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest1 = explodedArchive0.manifest;
        explodedArchive0.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive4 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest5 = explodedArchive4.manifest;
        explodedArchive4.recursive = false;
        java.util.jar.Manifest manifest8 = explodedArchive4.manifest;
        java.io.File file9 = explodedArchive4.manifestFile;
        java.io.File file10 = null;
        java.io.File file11 = explodedArchive4.getManifestFile(file10);
        explodedArchive0.manifestFile = file10;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive13 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest14 = explodedArchive13.manifest;
        explodedArchive13.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive17 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest18 = explodedArchive17.manifest;
        explodedArchive17.recursive = false;
        java.util.jar.Manifest manifest21 = explodedArchive17.manifest;
        java.io.File file22 = explodedArchive17.manifestFile;
        java.io.File file23 = null;
        java.io.File file24 = explodedArchive17.getManifestFile(file23);
        explodedArchive13.manifestFile = file23;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive26 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest27 = explodedArchive26.manifest;
        explodedArchive26.recursive = false;
        java.util.jar.Manifest manifest30 = explodedArchive26.manifest;
        java.io.File file31 = explodedArchive26.manifestFile;
        java.io.File file32 = null;
        java.io.File file33 = explodedArchive26.getManifestFile(file32);
        explodedArchive13.manifestFile = file33;
        explodedArchive0.root = file33;
        java.net.URL uRL36 = explodedArchive0.getUrl();
        java.util.jar.Manifest manifest37 = explodedArchive0.manifest;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator38 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file39 = null;
        fileEntryIterator38.current = file39;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive41 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest42 = explodedArchive41.manifest;
        explodedArchive41.recursive = false;
        java.util.jar.Manifest manifest45 = explodedArchive41.manifest;
        java.io.File file46 = explodedArchive41.manifestFile;
        java.io.File file47 = null;
        java.io.File file48 = explodedArchive41.getManifestFile(file47);
        java.util.Iterator<java.io.File> fileItor49 = fileEntryIterator38.listFiles(file48);
        java.io.File file50 = fileEntryIterator38.root;
        java.io.File file51 = fileEntryIterator38.root;
        java.util.Deque<java.util.Iterator<java.io.File>> fileItorQueue52 = fileEntryIterator38.stack;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator53 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator54 = entryComparator53.reversed();
        java.util.Comparator<java.io.File> fileComparator55 = entryComparator53.reversed();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive56 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest57 = explodedArchive56.manifest;
        explodedArchive56.recursive = false;
        java.util.jar.Manifest manifest60 = explodedArchive56.manifest;
        java.io.File file61 = explodedArchive56.manifestFile;
        java.io.File file62 = null;
        java.io.File file63 = explodedArchive56.getManifestFile(file62);
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive64 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest65 = explodedArchive64.manifest;
        explodedArchive64.recursive = false;
        java.io.File file68 = null;
        explodedArchive64.root = file68;
        java.io.File file70 = explodedArchive64.root;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive71 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest72 = explodedArchive71.manifest;
        explodedArchive71.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive75 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest76 = explodedArchive75.manifest;
        explodedArchive75.recursive = false;
        java.util.jar.Manifest manifest79 = explodedArchive75.manifest;
        java.io.File file80 = explodedArchive75.manifestFile;
        java.io.File file81 = null;
        java.io.File file82 = explodedArchive75.getManifestFile(file81);
        explodedArchive71.manifestFile = file81;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive84 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest85 = explodedArchive84.manifest;
        explodedArchive84.recursive = false;
        java.util.jar.Manifest manifest88 = explodedArchive84.manifest;
        java.io.File file89 = explodedArchive84.manifestFile;
        java.io.File file90 = null;
        java.io.File file91 = explodedArchive84.getManifestFile(file90);
        explodedArchive71.manifestFile = file91;
        java.io.File file93 = explodedArchive64.getManifestFile(file91);
        int int94 = entryComparator53.compare(file63, file91);
        fileEntryIterator38.root = file63;
        java.io.File file96 = explodedArchive0.getManifestFile(file63);
        // The following exception was thrown during execution in test generation
        try {
            java.util.jar.Manifest manifest97 = explodedArchive0.getManifest();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file11.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file11.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file24.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file24.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file33.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file33.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(uRL36);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(uRL36.toString(), "file:/server/study-execution/new-nimrod/nimrod-hunoroutput-test-dest/spring-boot/af20dc6cc45c032573413c401f9f73aa75371744/randoop_4/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file48.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file48.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItorQueue52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file63.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file63.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest76);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest79);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file80);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file82);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file82.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file82.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest85);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest88);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file89);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file91);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file91.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file91.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file93);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file93.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file93.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 0 + "'", int94 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file96);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file96.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file96.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
    }

    @Test
    public void test1210() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1210");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest1 = explodedArchive0.manifest;
        java.util.jar.Manifest manifest2 = null;
        explodedArchive0.manifest = manifest2;
        java.io.File file4 = explodedArchive0.root;
        java.util.jar.Manifest manifest5 = null;
        explodedArchive0.manifest = manifest5;
        java.util.jar.Manifest manifest7 = null;
        explodedArchive0.manifest = manifest7;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator<org.springframework.boot.loader.archive.Archive.Entry> entryItor9 = explodedArchive0.iterator();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file4);
    }

    @Test
    public void test1211() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1211");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file1 = null;
        fileEntryIterator0.current = file1;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive3 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest4 = explodedArchive3.manifest;
        explodedArchive3.recursive = false;
        java.util.jar.Manifest manifest7 = explodedArchive3.manifest;
        java.io.File file8 = explodedArchive3.manifestFile;
        java.io.File file9 = null;
        java.io.File file10 = explodedArchive3.getManifestFile(file9);
        java.util.Iterator<java.io.File> fileItor11 = fileEntryIterator0.listFiles(file10);
        java.util.Comparator<java.io.File> fileComparator12 = fileEntryIterator0.entryComparator;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator13 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file14 = null;
        fileEntryIterator13.current = file14;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive16 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest17 = explodedArchive16.manifest;
        explodedArchive16.recursive = false;
        java.util.jar.Manifest manifest20 = explodedArchive16.manifest;
        java.io.File file21 = explodedArchive16.manifestFile;
        java.io.File file22 = null;
        java.io.File file23 = explodedArchive16.getManifestFile(file22);
        java.util.Iterator<java.io.File> fileItor24 = fileEntryIterator13.listFiles(file23);
        java.io.File file25 = fileEntryIterator13.current;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator26 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file27 = null;
        fileEntryIterator26.current = file27;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive29 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest30 = explodedArchive29.manifest;
        explodedArchive29.recursive = false;
        java.util.jar.Manifest manifest33 = explodedArchive29.manifest;
        java.io.File file34 = explodedArchive29.manifestFile;
        java.io.File file35 = null;
        java.io.File file36 = explodedArchive29.getManifestFile(file35);
        java.util.Iterator<java.io.File> fileItor37 = fileEntryIterator26.listFiles(file36);
        java.io.File file38 = fileEntryIterator26.current;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator39 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file40 = null;
        fileEntryIterator39.current = file40;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive42 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest43 = explodedArchive42.manifest;
        explodedArchive42.recursive = false;
        java.util.jar.Manifest manifest46 = explodedArchive42.manifest;
        java.io.File file47 = explodedArchive42.manifestFile;
        java.io.File file48 = null;
        java.io.File file49 = explodedArchive42.getManifestFile(file48);
        java.util.Iterator<java.io.File> fileItor50 = fileEntryIterator39.listFiles(file49);
        java.util.ArrayDeque<java.util.Iterator<java.io.File>> fileItorQueue51 = new java.util.ArrayDeque<java.util.Iterator<java.io.File>>();
        boolean boolean52 = fileItorQueue51.add(fileItor50);
        fileEntryIterator26.stack = fileItorQueue51;
        fileEntryIterator13.stack = fileItorQueue51;
        fileEntryIterator0.stack = fileItorQueue51;
        boolean boolean56 = fileEntryIterator0.hasNext();
        java.io.File file57 = fileEntryIterator0.poll();
        java.util.Deque<java.util.Iterator<java.io.File>> fileItorQueue58 = fileEntryIterator0.stack;
        // The following exception was thrown during execution in test generation
        try {
            fileEntryIterator0.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: remove");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file23.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file23.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file36.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file36.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file49.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file49.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItorQueue58);
    }

    @Test
    public void test1212() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1212");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file1 = null;
        fileEntryIterator0.current = file1;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive3 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.lang.String str4 = explodedArchive3.toString();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive5 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file6 = explodedArchive5.root;
        java.io.File file7 = null;
        explodedArchive5.manifestFile = file7;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive9 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest10 = explodedArchive9.manifest;
        explodedArchive9.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive13 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest14 = explodedArchive13.manifest;
        explodedArchive13.recursive = false;
        java.util.jar.Manifest manifest17 = explodedArchive13.manifest;
        java.io.File file18 = explodedArchive13.manifestFile;
        java.io.File file19 = null;
        java.io.File file20 = explodedArchive13.getManifestFile(file19);
        explodedArchive9.manifestFile = file19;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive22 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest23 = explodedArchive22.manifest;
        explodedArchive22.recursive = false;
        java.util.jar.Manifest manifest26 = explodedArchive22.manifest;
        java.io.File file27 = explodedArchive22.manifestFile;
        java.io.File file28 = null;
        java.io.File file29 = explodedArchive22.getManifestFile(file28);
        explodedArchive9.manifestFile = file29;
        java.io.File file31 = explodedArchive5.getManifestFile(file29);
        java.io.File file32 = explodedArchive3.getManifestFile(file29);
        fileEntryIterator0.root = file29;
        java.io.File file34 = fileEntryIterator0.poll();
        java.io.File file35 = fileEntryIterator0.root;
        boolean boolean36 = fileEntryIterator0.recursive;
        java.io.File file37 = fileEntryIterator0.poll();
        java.util.Deque<java.util.Iterator<java.io.File>> fileItorQueue38 = fileEntryIterator0.stack;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive39 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest40 = explodedArchive39.manifest;
        explodedArchive39.recursive = false;
        java.util.jar.Manifest manifest43 = explodedArchive39.manifest;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive44 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.lang.String str45 = explodedArchive44.toString();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive46 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file47 = explodedArchive46.root;
        java.io.File file48 = null;
        explodedArchive46.manifestFile = file48;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive50 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest51 = explodedArchive50.manifest;
        explodedArchive50.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive54 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest55 = explodedArchive54.manifest;
        explodedArchive54.recursive = false;
        java.util.jar.Manifest manifest58 = explodedArchive54.manifest;
        java.io.File file59 = explodedArchive54.manifestFile;
        java.io.File file60 = null;
        java.io.File file61 = explodedArchive54.getManifestFile(file60);
        explodedArchive50.manifestFile = file60;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive63 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest64 = explodedArchive63.manifest;
        explodedArchive63.recursive = false;
        java.util.jar.Manifest manifest67 = explodedArchive63.manifest;
        java.io.File file68 = explodedArchive63.manifestFile;
        java.io.File file69 = null;
        java.io.File file70 = explodedArchive63.getManifestFile(file69);
        explodedArchive50.manifestFile = file70;
        java.io.File file72 = explodedArchive46.getManifestFile(file70);
        java.io.File file73 = explodedArchive44.getManifestFile(file70);
        explodedArchive39.root = file70;
        fileEntryIterator0.current = file70;
        boolean boolean76 = fileEntryIterator0.hasNext();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str4 + "' != '" + "exploded archive" + "'", str4.equals("exploded archive"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file20.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file20.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file29.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file29.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file31.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file31.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file32.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file32.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file35.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file35.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItorQueue38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str45 + "' != '" + "exploded archive" + "'", str45.equals("exploded archive"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file61.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file61.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file70.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file70.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file72.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file72.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file73);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file73.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file73.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
    }

    @Test
    public void test1213() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1213");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntry fileEntry0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntry();
        java.lang.String str1 = fileEntry0.name;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator2 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file3 = null;
        fileEntryIterator2.current = file3;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive5 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.lang.String str6 = explodedArchive5.toString();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive7 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file8 = explodedArchive7.root;
        java.io.File file9 = null;
        explodedArchive7.manifestFile = file9;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive11 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest12 = explodedArchive11.manifest;
        explodedArchive11.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive15 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest16 = explodedArchive15.manifest;
        explodedArchive15.recursive = false;
        java.util.jar.Manifest manifest19 = explodedArchive15.manifest;
        java.io.File file20 = explodedArchive15.manifestFile;
        java.io.File file21 = null;
        java.io.File file22 = explodedArchive15.getManifestFile(file21);
        explodedArchive11.manifestFile = file21;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive24 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest25 = explodedArchive24.manifest;
        explodedArchive24.recursive = false;
        java.util.jar.Manifest manifest28 = explodedArchive24.manifest;
        java.io.File file29 = explodedArchive24.manifestFile;
        java.io.File file30 = null;
        java.io.File file31 = explodedArchive24.getManifestFile(file30);
        explodedArchive11.manifestFile = file31;
        java.io.File file33 = explodedArchive7.getManifestFile(file31);
        java.io.File file34 = explodedArchive5.getManifestFile(file31);
        fileEntryIterator2.root = file31;
        fileEntry0.file = file31;
        java.io.File file37 = fileEntry0.file;
        fileEntry0.name = "hi!";
        boolean boolean40 = fileEntry0.isDirectory();
        java.lang.String str41 = fileEntry0.getName();
        java.io.File file42 = fileEntry0.getFile();
        java.lang.String str43 = fileEntry0.name;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "exploded archive" + "'", str6.equals("exploded archive"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file22.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file22.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file31.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file31.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file33.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file33.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file34.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file34.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file37.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file37.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str41 + "' != '" + "hi!" + "'", str41.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file42.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file42.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str43 + "' != '" + "hi!" + "'", str43.equals("hi!"));
    }

    @Test
    public void test1214() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1214");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        boolean boolean1 = fileEntryIterator0.hasNext();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator2 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator3 = entryComparator2.reversed();
        java.util.Comparator<java.io.File> fileComparator4 = fileComparator3.reversed();
        fileEntryIterator0.entryComparator = fileComparator4;
        java.util.Comparator<java.io.File> fileComparator6 = fileEntryIterator0.entryComparator;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator7 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator8 = entryComparator7.reversed();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator9 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator10 = entryComparator9.reversed();
        java.util.Comparator<java.io.File> fileComparator11 = entryComparator7.thenComparing(fileComparator10);
        java.util.Comparator<java.io.File> fileComparator12 = fileComparator6.thenComparing(fileComparator10);
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator13 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator14 = entryComparator13.reversed();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator15 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator16 = entryComparator15.reversed();
        java.util.Comparator<java.io.File> fileComparator17 = entryComparator13.thenComparing(fileComparator16);
        java.util.Comparator<java.io.File> fileComparator18 = fileComparator12.thenComparing((java.util.Comparator<java.io.File>) entryComparator13);
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator19 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        boolean boolean20 = fileEntryIterator19.hasNext();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator21 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator22 = entryComparator21.reversed();
        java.util.Comparator<java.io.File> fileComparator23 = fileComparator22.reversed();
        fileEntryIterator19.entryComparator = fileComparator23;
        java.util.Comparator<java.io.File> fileComparator25 = fileComparator12.thenComparing(fileComparator23);
        java.util.Comparator<java.io.File> fileComparator26 = fileComparator25.reversed();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator26);
    }
}
