/*
 * This file was automatically generated by EvoSuite
 * Thu Apr 30 00:23:22 GMT 2020
 */

package org.springframework.boot.loader.archive;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.net.URI;
import java.net.URL;
import java.util.Comparator;
import java.util.Iterator;
import java.util.List;
import java.util.NoSuchElementException;
import java.util.function.Consumer;
import java.util.function.ToLongFunction;
import java.util.jar.Attributes;
import java.util.jar.Manifest;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import org.springframework.boot.loader.archive.Archive;
import org.springframework.boot.loader.archive.ExplodedArchive;
import org.springframework.boot.loader.archive.JarFileArchive;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ExplodedArchive_ESTest extends ExplodedArchive_ESTest_scaffolding {

  @Test(timeout = 11000)
  public void test00()  throws Throwable  {
      String string0 = "-spring-boot-libs-";
      MockFile mockFile0 = new MockFile(string0, string0);
      ExplodedArchive explodedArchive0 = null;
      try {
        explodedArchive0 = new ExplodedArchive(mockFile0);
      } catch(IllegalArgumentException e) {
         //
         // Invalid source folder /server/study-execution/new-nimrod/nimrod-hunoroutput-test-dest/spring-boot/af20dc6cc45c032573413c401f9f73aa75371744/evosuite_6/-spring-boot-libs-/-spring-boot-libs-
         //
         verifyException("org.springframework.boot.loader.archive.ExplodedArchive", e);
      }
  }

  @Test(timeout = 11000)
  public void test01()  throws Throwable  {
      ExplodedArchive explodedArchive0 = new ExplodedArchive();
      String string0 = explodedArchive0.toString();
      File file0 = MockFile.createTempFile(string0, string0, explodedArchive0.manifestFile);
      ExplodedArchive.FileEntry explodedArchive_FileEntry0 = new ExplodedArchive.FileEntry(string0, file0);
      try { 
        explodedArchive0.getNestedArchive(explodedArchive_FileEntry0);
      } catch(FileNotFoundException e) {
         //
         // /tmp/exploded archive0exploded archive (Arquivo ou diret\u00F3rio n\u00E3o encontrado)
         //
         verifyException("java.util.zip.ZipFile", e);
      }
  }

  @Test(timeout = 11000)
  public void test02()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      String string0 = "riHb#_(P(";
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp/foo.bar");
      String string1 = "::n\"HZxf:~I`32Wy";
      boolean boolean0 = FileSystemHandling.appendLineToFile(evoSuiteFile0, string1);
      boolean boolean1 = true;
      ExplodedArchive explodedArchive0 = null;
      try {
        explodedArchive0 = new ExplodedArchive(mockFile0);
      } catch(IllegalArgumentException e) {
         //
         // Invalid source folder /tmp/foo.bar
         //
         verifyException("org.springframework.boot.loader.archive.ExplodedArchive", e);
      }
  }

  @Test(timeout = 11000)
  public void test03()  throws Throwable  {
      ExplodedArchive.FileEntryIterator explodedArchive_FileEntryIterator0 = new ExplodedArchive.FileEntryIterator();
      // Undeclared exception!
      try { 
        explodedArchive_FileEntryIterator0.next();
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springframework.boot.loader.archive.ExplodedArchive$FileEntryIterator", e);
      }
  }

  @Test(timeout = 11000)
  public void test04()  throws Throwable  {
      String string0 = "";
      MockFile mockFile0 = new MockFile(string0, string0);
      String string1 = mockFile0.getCanonicalPath();
      boolean boolean0 = mockFile0.setReadOnly();
      File file0 = mockFile0.getCanonicalFile();
      ExplodedArchive explodedArchive0 = new ExplodedArchive(mockFile0, boolean0);
      MockFile mockFile1 = new MockFile(string0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      explodedArchive0.forEach(consumer0);
      Manifest manifest0 = explodedArchive0.getManifest();
      Manifest manifest1 = null;
      try {
        manifest1 = new Manifest(explodedArchive0.manifest);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.jar.Manifest", e);
      }
  }

  @Test(timeout = 11000)
  public void test05()  throws Throwable  {
      ExplodedArchive.FileEntry explodedArchive_FileEntry0 = new ExplodedArchive.FileEntry();
      // Undeclared exception!
      try { 
        explodedArchive_FileEntry0.isDirectory();
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springframework.boot.loader.archive.ExplodedArchive$FileEntry", e);
      }
  }

  @Test(timeout = 11000)
  public void test06()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp/foo.bar/9?W7ufkIM^GAqUwc0riHb#_(P(");
      boolean boolean0 = FileSystemHandling.createFolder(evoSuiteFile0);
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      String string0 = "9?W7ufkIM^GAqUwc";
      boolean boolean1 = mockFile0.setWritable(boolean0);
      ExplodedArchive explodedArchive0 = new ExplodedArchive(mockFile0);
      Archive.EntryFilter archive_EntryFilter0 = mock(Archive.EntryFilter.class, new ViolatedAssumptionAnswer());
      doReturn(boolean0).when(archive_EntryFilter0).matches(any(org.springframework.boot.loader.archive.Archive.Entry.class));
      List<Archive> list0 = explodedArchive0.getNestedArchives(archive_EntryFilter0);
      ExplodedArchive.FileEntry explodedArchive_FileEntry0 = new ExplodedArchive.FileEntry(string0, explodedArchive0.manifestFile);
      ExplodedArchive.SKIPPED_NAMES = explodedArchive0.SKIPPED_NAMES;
      explodedArchive_FileEntry0.name = string0;
      String string1 = explodedArchive_FileEntry0.getName();
      boolean boolean2 = false;
      ExplodedArchive.FileEntryIterator explodedArchive_FileEntryIterator0 = new ExplodedArchive.FileEntryIterator(mockFile0, boolean2);
      boolean boolean3 = mockFile0.mkdir();
      Iterator<File> iterator0 = explodedArchive_FileEntryIterator0.listFiles(mockFile0);
      String string2 = explodedArchive_FileEntry0.getName();
      Archive.Entry archive_Entry0 = explodedArchive_FileEntryIterator0.next();
      // Undeclared exception!
      try { 
        explodedArchive_FileEntryIterator0.remove();
      } catch(UnsupportedOperationException e) {
         //
         // remove
         //
         verifyException("org.springframework.boot.loader.archive.ExplodedArchive$FileEntryIterator", e);
      }
  }

  @Test(timeout = 11000)
  public void test07()  throws Throwable  {
      ExplodedArchive explodedArchive0 = new ExplodedArchive();
      String string0 = "6m*2/";
      String string1 = "exploded aBrchive";
      String string2 = "h|LT)<{C<2a&5~";
      MockFile mockFile0 = new MockFile(explodedArchive0.root, string2);
      explodedArchive0.root = (File) mockFile0;
      File file0 = MockFile.createTempFile(string0, string1, explodedArchive0.root);
      explodedArchive0.manifestFile = file0;
      Manifest manifest0 = explodedArchive0.getManifest();
      String string3 = explodedArchive0.toString();
      Manifest manifest1 = explodedArchive0.getManifest();
      boolean boolean0 = true;
      ExplodedArchive.FileEntryIterator explodedArchive_FileEntryIterator0 = new ExplodedArchive.FileEntryIterator(file0, boolean0);
      // Undeclared exception!
      try { 
        explodedArchive_FileEntryIterator0.next();
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springframework.boot.loader.archive.ExplodedArchive$FileEntryIterator", e);
      }
  }

  @Test(timeout = 11000)
  public void test08()  throws Throwable  {
      ExplodedArchive.FileEntryIterator explodedArchive_FileEntryIterator0 = new ExplodedArchive.FileEntryIterator();
      File file0 = explodedArchive_FileEntryIterator0.poll();
      String string0 = "qhsh+";
      File file1 = MockFile.createTempFile(string0, string0, explodedArchive_FileEntryIterator0.current);
      ExplodedArchive.FileEntryIterator explodedArchive_FileEntryIterator1 = new ExplodedArchive.FileEntryIterator(file1, explodedArchive_FileEntryIterator0.recursive);
  }

  @Test(timeout = 11000)
  public void test09()  throws Throwable  {
      ExplodedArchive.FileEntryIterator.EntryComparator explodedArchive_FileEntryIterator_EntryComparator0 = new ExplodedArchive.FileEntryIterator.EntryComparator();
  }

  @Test(timeout = 11000)
  public void test10()  throws Throwable  {
      ExplodedArchive explodedArchive0 = new ExplodedArchive();
      // Undeclared exception!
      try { 
        explodedArchive0.iterator();
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springframework.boot.loader.archive.ExplodedArchive$FileEntryIterator", e);
      }
  }

  @Test(timeout = 11000)
  public void test11()  throws Throwable  {
      String string0 = "X7\"veXh-)Z-vf";
      String string1 = "(F,$jW";
      File file0 = MockFile.createTempFile(string0, string1);
      ExplodedArchive explodedArchive0 = null;
      try {
        explodedArchive0 = new ExplodedArchive(file0);
      } catch(IllegalArgumentException e) {
         //
         // Invalid source folder /tmp/X7\"veXh-)Z-vf0(F,$jW
         //
         verifyException("org.springframework.boot.loader.archive.ExplodedArchive", e);
      }
  }

  @Test(timeout = 11000)
  public void test12()  throws Throwable  {
      String string0 = "META-INF/MANIFEST.MF";
      MockFile mockFile0 = new MockFile(string0);
      ExplodedArchive.FileEntry explodedArchive_FileEntry0 = new ExplodedArchive.FileEntry(string0, mockFile0);
      explodedArchive_FileEntry0.name = string0;
      File file0 = mockFile0.getAbsoluteFile();
      boolean boolean0 = false;
      ExplodedArchive.FileEntryIterator explodedArchive_FileEntryIterator0 = new ExplodedArchive.FileEntryIterator(explodedArchive_FileEntry0.file, boolean0);
      explodedArchive_FileEntryIterator0.root = (File) mockFile0;
      boolean boolean1 = explodedArchive_FileEntryIterator0.hasNext();
      ExplodedArchive explodedArchive0 = new ExplodedArchive();
      // Undeclared exception!
      try { 
        explodedArchive0.getUrl();
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springframework.boot.loader.archive.ExplodedArchive", e);
      }
  }

  @Test(timeout = 11000)
  public void test13()  throws Throwable  {
      String string0 = "Kc%*UWt";
      String string1 = "";
      File file0 = null;
      File file1 = MockFile.createTempFile(string0, string1, file0);
      ExplodedArchive explodedArchive0 = null;
      try {
        explodedArchive0 = new ExplodedArchive(file1);
      } catch(IllegalArgumentException e) {
         //
         // Invalid source folder /tmp/Kc%*UWt0
         //
         verifyException("org.springframework.boot.loader.archive.ExplodedArchive", e);
      }
  }

  @Test(timeout = 11000)
  public void test14()  throws Throwable  {
      String string0 = "Bz`;!}Eh6>B";
      String string1 = ":1aI85`8O#7{";
      String string2 = "NyFkF(dq'?[4/!q0";
      MockFile mockFile0 = new MockFile(string1, string2);
      File file0 = MockFile.createTempFile(string0, string0, (File) mockFile0);
      MockFile mockFile1 = new MockFile(file0, string0);
      boolean boolean0 = true;
      ExplodedArchive.FileEntryIterator explodedArchive_FileEntryIterator0 = new ExplodedArchive.FileEntryIterator(mockFile1, boolean0);
      // Undeclared exception!
      try { 
        explodedArchive_FileEntryIterator0.remove();
      } catch(UnsupportedOperationException e) {
         //
         // remove
         //
         verifyException("org.springframework.boot.loader.archive.ExplodedArchive$FileEntryIterator", e);
      }
  }

  @Test(timeout = 11000)
  public void test15()  throws Throwable  {
      ExplodedArchive.FileEntry explodedArchive_FileEntry0 = new ExplodedArchive.FileEntry();
      ExplodedArchive explodedArchive0 = new ExplodedArchive();
      Archive.EntryFilter archive_EntryFilter0 = mock(Archive.EntryFilter.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        explodedArchive0.getNestedArchives(archive_EntryFilter0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springframework.boot.loader.archive.ExplodedArchive$FileEntryIterator", e);
      }
  }

  @Test(timeout = 11000)
  public void test16()  throws Throwable  {
      ExplodedArchive explodedArchive0 = new ExplodedArchive();
      // Undeclared exception!
      try { 
        explodedArchive0.getManifest();
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springframework.boot.loader.archive.ExplodedArchive", e);
      }
  }

  @Test(timeout = 11000)
  public void test17()  throws Throwable  {
      String string0 = "}4##";
      String string1 = "irYI\\$B*oL(/U";
      File file0 = MockFile.createTempFile(string1, string1);
      ExplodedArchive.FileEntry explodedArchive_FileEntry0 = new ExplodedArchive.FileEntry(string0, file0);
      String string2 = explodedArchive_FileEntry0.getName();
  }

  @Test(timeout = 11000)
  public void test18()  throws Throwable  {
      File file0 = null;
      ExplodedArchive explodedArchive0 = null;
      try {
        explodedArchive0 = new ExplodedArchive(file0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springframework.boot.loader.archive.ExplodedArchive", e);
      }
  }

  @Test(timeout = 11000)
  public void test19()  throws Throwable  {
      String string0 = "wA_+C(M;";
      File file0 = MockFile.createTempFile(string0, string0);
      boolean boolean0 = true;
      ExplodedArchive.FileEntryIterator explodedArchive_FileEntryIterator0 = new ExplodedArchive.FileEntryIterator(file0, boolean0);
      ExplodedArchive.FileEntryIterator explodedArchive_FileEntryIterator1 = new ExplodedArchive.FileEntryIterator();
      explodedArchive_FileEntryIterator0.current = file0;
      explodedArchive_FileEntryIterator1.root = explodedArchive_FileEntryIterator0.root;
      String string1 = "O";
      ExplodedArchive.FileEntry explodedArchive_FileEntry0 = new ExplodedArchive.FileEntry(string1, file0);
      boolean boolean1 = explodedArchive_FileEntry0.isDirectory();
      String string2 = "d";
      explodedArchive_FileEntry0.name = string2;
      Iterator<File> iterator0 = explodedArchive_FileEntryIterator1.listFiles(file0);
      String string3 = "o)F%K6\"8NY,";
      explodedArchive_FileEntry0.name = string3;
      ExplodedArchive.FileEntryIterator explodedArchive_FileEntryIterator2 = new ExplodedArchive.FileEntryIterator(explodedArchive_FileEntry0.file, explodedArchive_FileEntryIterator0.recursive);
      String string4 = explodedArchive_FileEntry0.getName();
      String string5 = explodedArchive_FileEntry0.getName();
      ExplodedArchive explodedArchive0 = new ExplodedArchive();
      explodedArchive0.root = explodedArchive_FileEntryIterator2.current;
      // Undeclared exception!
      try { 
        explodedArchive0.getManifest();
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springframework.boot.loader.archive.ExplodedArchive", e);
      }
  }

  @Test(timeout = 11000)
  public void test20()  throws Throwable  {
      ExplodedArchive.FileEntryIterator explodedArchive_FileEntryIterator0 = new ExplodedArchive.FileEntryIterator();
      ExplodedArchive.FileEntryIterator.EntryComparator explodedArchive_FileEntryIterator_EntryComparator0 = new ExplodedArchive.FileEntryIterator.EntryComparator();
      // Undeclared exception!
      try { 
        explodedArchive_FileEntryIterator_EntryComparator0.compare(explodedArchive_FileEntryIterator0.root, explodedArchive_FileEntryIterator0.root);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springframework.boot.loader.archive.ExplodedArchive$FileEntryIterator$EntryComparator", e);
      }
  }

  @Test(timeout = 11000)
  public void test21()  throws Throwable  {
      String string0 = "";
      MockFile mockFile0 = new MockFile(string0);
      ExplodedArchive explodedArchive0 = new ExplodedArchive(mockFile0);
      URL uRL0 = explodedArchive0.getUrl();
  }

  @Test(timeout = 11000)
  public void test22()  throws Throwable  {
      ExplodedArchive explodedArchive0 = new ExplodedArchive();
      String string0 = "6m*2/";
      String string1 = "exploded archive";
      String string2 = "h|LT)<{C<2a&5~";
      String string3 = "Unable to open root Jar file '";
      MockFile mockFile0 = new MockFile(string2, string3);
      explodedArchive0.root = (File) mockFile0;
      File file0 = MockFile.createTempFile(string0, string1, explodedArchive0.root);
      explodedArchive0.manifestFile = file0;
      Iterator<Archive.Entry> iterator0 = explodedArchive0.iterator();
      Iterator<Archive.Entry> iterator1 = explodedArchive0.iterator();
      String string4 = explodedArchive0.toString();
      Manifest manifest0 = explodedArchive0.getManifest();
      ExplodedArchive.FileEntry explodedArchive_FileEntry0 = new ExplodedArchive.FileEntry();
      explodedArchive_FileEntry0.file = explodedArchive0.manifestFile;
      boolean boolean0 = explodedArchive_FileEntry0.isDirectory();
      String string5 = explodedArchive_FileEntry0.getName();
  }

  @Test(timeout = 11000)
  public void test23()  throws Throwable  {
      String string0 = "";
      MockFile mockFile0 = new MockFile(string0);
      File file0 = mockFile0.getAbsoluteFile();
      boolean boolean0 = true;
      ExplodedArchive explodedArchive0 = new ExplodedArchive(mockFile0, boolean0);
      ExplodedArchive.FileEntryIterator.EntryComparator explodedArchive_FileEntryIterator_EntryComparator0 = new ExplodedArchive.FileEntryIterator.EntryComparator();
      Comparator<String> comparator0 = Comparator.reverseOrder();
      explodedArchive0.manifestFile = (File) mockFile0;
      boolean boolean1 = mockFile0.createNewFile();
      int int0 = explodedArchive_FileEntryIterator_EntryComparator0.compare(explodedArchive0.manifestFile, (File) mockFile0);
      boolean boolean2 = true;
      ExplodedArchive.FileEntryIterator explodedArchive_FileEntryIterator0 = new ExplodedArchive.FileEntryIterator(mockFile0, boolean2);
      explodedArchive_FileEntryIterator0.recursive = explodedArchive0.recursive;
      explodedArchive_FileEntryIterator0.current = explodedArchive0.root;
      File file1 = explodedArchive_FileEntryIterator0.poll();
      String string1 = explodedArchive0.toString();
      try { 
        explodedArchive0.getManifest();
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 11000)
  public void test24()  throws Throwable  {
      String string0 = "a";
      MockFile mockFile0 = new MockFile(string0);
      boolean boolean0 = mockFile0.createNewFile();
      boolean boolean1 = false;
      boolean boolean2 = mockFile0.setExecutable(boolean1);
      ExplodedArchive explodedArchive0 = null;
      try {
        explodedArchive0 = new ExplodedArchive(mockFile0, boolean1);
      } catch(IllegalArgumentException e) {
         //
         // Invalid source folder a
         //
         verifyException("org.springframework.boot.loader.archive.ExplodedArchive", e);
      }
  }

  @Test(timeout = 11000)
  public void test25()  throws Throwable  {
      ExplodedArchive explodedArchive0 = new ExplodedArchive();
      String string0 = "file://";
      ExplodedArchive.FileEntry explodedArchive_FileEntry0 = new ExplodedArchive.FileEntry(string0, explodedArchive0.manifestFile);
      String string1 = explodedArchive_FileEntry0.getName();
      // Undeclared exception!
      try { 
        explodedArchive0.iterator();
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springframework.boot.loader.archive.ExplodedArchive$FileEntryIterator", e);
      }
  }

  @Test(timeout = 11000)
  public void test26()  throws Throwable  {
      ExplodedArchive explodedArchive0 = new ExplodedArchive();
      String string0 = ">Kx'`1i}jz";
      String string1 = explodedArchive0.toString();
      ExplodedArchive.FileEntry explodedArchive_FileEntry0 = new ExplodedArchive.FileEntry(string0, explodedArchive0.manifestFile);
      // Undeclared exception!
      try { 
        explodedArchive_FileEntry0.isDirectory();
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springframework.boot.loader.archive.ExplodedArchive$FileEntry", e);
      }
  }

  @Test(timeout = 11000)
  public void test27()  throws Throwable  {
      ExplodedArchive explodedArchive0 = new ExplodedArchive();
      String string0 = "N3q6_xpX$:9':U";
      String string1 = "org.springframework.boot.loader.archive.ExplodedArchive$FileEntryIterator$EntryComparator";
      File file0 = MockFile.createTempFile(string0, string1, explodedArchive0.root);
      File file1 = explodedArchive0.getManifestFile(file0);
  }

  @Test(timeout = 11000)
  public void test28()  throws Throwable  {
      String string0 = "mtnH7%dK>@xFAw-`)q";
      String string1 = "D>6w@\\!>YfmE ";
      MockFile mockFile0 = new MockFile(string0, string1);
      File file0 = MockFile.createTempFile(string0, string0, (File) mockFile0);
      ExplodedArchive.FileEntry explodedArchive_FileEntry0 = new ExplodedArchive.FileEntry(string0, file0);
      File file1 = explodedArchive_FileEntry0.getFile();
  }

  @Test(timeout = 11000)
  public void test29()  throws Throwable  {
      String string0 = "6M(Ra?X07HzU";
      MockFile mockFile0 = new MockFile(string0);
      boolean boolean0 = false;
      ExplodedArchive.FileEntryIterator explodedArchive_FileEntryIterator0 = new ExplodedArchive.FileEntryIterator(mockFile0, boolean0);
      // Undeclared exception!
      try { 
        explodedArchive_FileEntryIterator0.next();
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springframework.boot.loader.archive.ExplodedArchive$FileEntryIterator", e);
      }
  }

  @Test(timeout = 11000)
  public void test30()  throws Throwable  {
      ExplodedArchive.FileEntry explodedArchive_FileEntry0 = new ExplodedArchive.FileEntry();
      String string0 = "4*!u";
      File file0 = null;
      explodedArchive_FileEntry0.file = file0;
      explodedArchive_FileEntry0.name = string0;
      String string1 = explodedArchive_FileEntry0.getName();
      ExplodedArchive explodedArchive0 = new ExplodedArchive();
      // Undeclared exception!
      try { 
        explodedArchive0.getUrl();
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springframework.boot.loader.archive.ExplodedArchive", e);
      }
  }

  @Test(timeout = 11000)
  public void test31()  throws Throwable  {
      ExplodedArchive.FileEntry explodedArchive_FileEntry0 = new ExplodedArchive.FileEntry();
      boolean boolean0 = false;
      ExplodedArchive explodedArchive0 = null;
      try {
        explodedArchive0 = new ExplodedArchive(explodedArchive_FileEntry0.file, boolean0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springframework.boot.loader.archive.ExplodedArchive", e);
      }
  }

  @Test(timeout = 11000)
  public void test32()  throws Throwable  {
      String string0 = "#'.Z!eU";
      MockFile mockFile0 = new MockFile(string0, string0);
      boolean boolean0 = false;
      ExplodedArchive.FileEntryIterator explodedArchive_FileEntryIterator0 = new ExplodedArchive.FileEntryIterator(mockFile0, boolean0);
      MockFile mockFile1 = new MockFile(explodedArchive_FileEntryIterator0.current, string0);
      Iterator<File> iterator0 = explodedArchive_FileEntryIterator0.listFiles(mockFile1);
  }

  @Test(timeout = 11000)
  public void test33()  throws Throwable  {
      File file0 = null;
      String string0 = "";
      MockFile mockFile0 = new MockFile(file0, string0);
      boolean boolean0 = true;
      ExplodedArchive explodedArchive0 = new ExplodedArchive(mockFile0, boolean0);
      MockFile mockFile1 = new MockFile(explodedArchive0.root, string0);
      explodedArchive0.manifestFile = (File) mockFile1;
      File file1 = explodedArchive0.getManifestFile(file0);
      URL uRL0 = explodedArchive0.getUrl();
      ExplodedArchive.FileEntryIterator.EntryComparator explodedArchive_FileEntryIterator_EntryComparator0 = new ExplodedArchive.FileEntryIterator.EntryComparator();
      MockFile mockFile2 = new MockFile(string0, string0);
      // Undeclared exception!
      try { 
        explodedArchive_FileEntryIterator_EntryComparator0.compare((File) mockFile2, file0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springframework.boot.loader.archive.ExplodedArchive$FileEntryIterator$EntryComparator", e);
      }
  }

  @Test(timeout = 11000)
  public void test34()  throws Throwable  {
      String string0 = null;
      String string1 = "";
      MockFile mockFile0 = new MockFile(string0, string1);
      ExplodedArchive explodedArchive0 = new ExplodedArchive(mockFile0);
      ExplodedArchive.FileEntry explodedArchive_FileEntry0 = new ExplodedArchive.FileEntry();
      // Undeclared exception!
      try { 
        explodedArchive0.getNestedArchive(explodedArchive_FileEntry0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springframework.boot.loader.archive.ExplodedArchive", e);
      }
  }

  @Test(timeout = 11000)
  public void test35()  throws Throwable  {
      ExplodedArchive explodedArchive0 = new ExplodedArchive();
      String string0 = explodedArchive0.toString();
      String string1 = explodedArchive0.toString();
      ExplodedArchive.FileEntry explodedArchive_FileEntry0 = new ExplodedArchive.FileEntry();
      // Undeclared exception!
      try { 
        explodedArchive0.getNestedArchive(explodedArchive_FileEntry0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springframework.boot.loader.archive.ExplodedArchive", e);
      }
  }

  @Test(timeout = 11000)
  public void test36()  throws Throwable  {
      String string0 = "";
      String string1 = "!fxdz)0%!G9#6*?";
      MockFile mockFile0 = new MockFile(string0);
      File file0 = MockFile.createTempFile(string1, string1, (File) mockFile0);
      MockFile mockFile1 = new MockFile(file0, string1);
      ExplodedArchive.FileEntry explodedArchive_FileEntry0 = new ExplodedArchive.FileEntry(string0, mockFile1);
      boolean boolean0 = mockFile0.mkdirs();
      explodedArchive_FileEntry0.file = (File) mockFile0;
      boolean boolean1 = true;
      String string2 = null;
      explodedArchive_FileEntry0.name = string2;
      ExplodedArchive explodedArchive0 = new ExplodedArchive(explodedArchive_FileEntry0.file, boolean1);
      boolean boolean2 = mockFile1.delete();
      Archive archive0 = explodedArchive0.getNestedArchive(explodedArchive_FileEntry0);
      Archive archive1 = explodedArchive0.getNestedArchive(explodedArchive_FileEntry0);
      File file1 = mockFile0.getAbsoluteFile();
      File file2 = explodedArchive_FileEntry0.getFile();
      boolean boolean3 = false;
      explodedArchive0.root = (File) mockFile1;
      ExplodedArchive.FileEntryIterator explodedArchive_FileEntryIterator0 = new ExplodedArchive.FileEntryIterator(explodedArchive0.root, boolean3);
      // Undeclared exception!
      try { 
        explodedArchive_FileEntryIterator0.next();
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springframework.boot.loader.archive.ExplodedArchive$FileEntryIterator", e);
      }
  }

  @Test(timeout = 11000)
  public void test37()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      String string0 = "9?W7ufkIM^GAqUwc";
      String string1 = "riHb#_(P(";
      File file0 = mockFile0.getCanonicalFile();
      File file1 = MockFile.createTempFile(string0, string1, (File) mockFile0);
      boolean boolean0 = true;
      boolean boolean1 = mockFile0.setWritable(boolean0);
      ExplodedArchive explodedArchive0 = new ExplodedArchive(mockFile0);
      Archive.EntryFilter archive_EntryFilter0 = mock(Archive.EntryFilter.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(archive_EntryFilter0).matches(any(org.springframework.boot.loader.archive.Archive.Entry.class));
      List<Archive> list0 = explodedArchive0.getNestedArchives(archive_EntryFilter0);
      String string2 = "L6J";
      ExplodedArchive.FileEntry explodedArchive_FileEntry0 = new ExplodedArchive.FileEntry(string2, explodedArchive0.manifestFile);
      String string3 = "";
      explodedArchive_FileEntry0.name = string2;
      explodedArchive_FileEntry0.name = string3;
      explodedArchive_FileEntry0.name = string2;
      String string4 = explodedArchive_FileEntry0.getName();
      boolean boolean2 = false;
      ExplodedArchive.FileEntryIterator explodedArchive_FileEntryIterator0 = new ExplodedArchive.FileEntryIterator(file0, boolean2);
      Iterator<File> iterator0 = explodedArchive_FileEntryIterator0.listFiles(file0);
      String string5 = explodedArchive_FileEntry0.getName();
      // Undeclared exception!
      try { 
        explodedArchive_FileEntryIterator0.remove();
      } catch(UnsupportedOperationException e) {
         //
         // remove
         //
         verifyException("org.springframework.boot.loader.archive.ExplodedArchive$FileEntryIterator", e);
      }
  }

  @Test(timeout = 11000)
  public void test38()  throws Throwable  {
      String string0 = "-spring-boot-libs-";
      String string1 = ".jar";
      String string2 = "c[ktZ,V";
      String string3 = "org.springframework.boot.loader.jar.JarEntry";
      MockFile mockFile0 = new MockFile(string2, string3);
      MockFile mockFile1 = new MockFile(mockFile0, string0);
      File file0 = MockFile.createTempFile(string0, string1, (File) mockFile1);
      boolean boolean0 = mockFile0.setReadOnly();
      boolean boolean1 = true;
      ExplodedArchive.FileEntryIterator explodedArchive_FileEntryIterator0 = new ExplodedArchive.FileEntryIterator(file0, boolean1);
      explodedArchive_FileEntryIterator0.current = (File) mockFile1;
      Iterator<File> iterator0 = explodedArchive_FileEntryIterator0.listFiles(file0);
      ExplodedArchive explodedArchive0 = new ExplodedArchive();
      // Undeclared exception!
      try { 
        explodedArchive_FileEntryIterator0.next();
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 11000)
  public void test39()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      String string0 = "9?W7ufkIM^GAqUwc";
      String string1 = "riHb#_(P(";
      File file0 = mockFile0.getCanonicalFile();
      File file1 = MockFile.createTempFile(string0, string1, (File) mockFile0);
      boolean boolean0 = true;
      boolean boolean1 = mockFile0.setWritable(boolean0);
      ExplodedArchive explodedArchive0 = new ExplodedArchive(mockFile0);
      Archive.EntryFilter archive_EntryFilter0 = mock(Archive.EntryFilter.class, new ViolatedAssumptionAnswer());
      doReturn(boolean0).when(archive_EntryFilter0).matches(any(org.springframework.boot.loader.archive.Archive.Entry.class));
      try { 
        explodedArchive0.getNestedArchives(archive_EntryFilter0);
      } catch(FileNotFoundException e) {
         //
         // /tmp/foo.bar/9?W7ufkIM^GAqUwc0riHb#_(P( (Arquivo ou diret\u00F3rio n\u00E3o encontrado)
         //
         verifyException("java.util.zip.ZipFile", e);
      }
  }

  @Test(timeout = 11000)
  public void test40()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      String string0 = "3l*lMlEMT";
      String string1 = "Unable to find fallback handler";
      File file0 = MockFile.createTempFile(string0, string1, (File) mockFile0);
      boolean boolean0 = true;
      ExplodedArchive.FileEntryIterator explodedArchive_FileEntryIterator0 = new ExplodedArchive.FileEntryIterator(mockFile0, boolean0);
      Iterator<File> iterator0 = explodedArchive_FileEntryIterator0.listFiles(mockFile0);
      Iterator<File> iterator1 = explodedArchive_FileEntryIterator0.listFiles(mockFile0);
      Archive.Entry archive_Entry0 = explodedArchive_FileEntryIterator0.next();
      String string2 = "J~Q:";
      MockFile mockFile1 = new MockFile(string2);
      ExplodedArchive.FileEntryIterator explodedArchive_FileEntryIterator1 = new ExplodedArchive.FileEntryIterator(mockFile1, boolean0);
      MockFile mockFile2 = new MockFile(explodedArchive_FileEntryIterator0.current, string2);
      boolean boolean1 = true;
      boolean boolean2 = true;
      explodedArchive_FileEntryIterator0.recursive = boolean2;
      boolean boolean3 = mockFile2.setReadable(explodedArchive_FileEntryIterator1.recursive, boolean1);
      ExplodedArchive.FileEntryIterator explodedArchive_FileEntryIterator2 = new ExplodedArchive.FileEntryIterator(mockFile2, boolean0);
  }

  @Test(timeout = 11000)
  public void test41()  throws Throwable  {
      String string0 = "6m*2";
      String string1 = "kv`";
      MockFile mockFile0 = new MockFile(string0, string1);
      String string2 = mockFile0.getAbsolutePath();
      File file0 = MockFile.createTempFile(string0, string0, (File) mockFile0);
      File file1 = MockFile.createTempFile(string1, string0);
      boolean boolean0 = false;
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean1 = FileSystemHandling.createFolder(evoSuiteFile0);
      ExplodedArchive.FileEntryIterator explodedArchive_FileEntryIterator0 = new ExplodedArchive.FileEntryIterator(file0, boolean0);
      String string3 = "KeY+b3`dXbFzhdl";
      String string4 = "java.io.tmpdir";
      File file2 = explodedArchive_FileEntryIterator0.poll();
      File file3 = MockFile.createTempFile(string3, string4);
      boolean boolean2 = false;
      ExplodedArchive.FileEntryIterator explodedArchive_FileEntryIterator1 = new ExplodedArchive.FileEntryIterator(file3, boolean2);
      ExplodedArchive explodedArchive0 = new ExplodedArchive();
      String string5 = null;
      ExplodedArchive.FileEntry explodedArchive_FileEntry0 = new ExplodedArchive.FileEntry(string5, explodedArchive_FileEntryIterator0.root);
      try { 
        explodedArchive0.getNestedArchive(explodedArchive_FileEntry0);
      } catch(FileNotFoundException e) {
         //
         // /server/study-execution/new-nimrod/nimrod-hunoroutput-test-dest/spring-boot/af20dc6cc45c032573413c401f9f73aa75371744/evosuite_6/6m*2/kv`/6m*206m*2 (Arquivo ou diret\u00F3rio n\u00E3o encontrado)
         //
         verifyException("java.util.zip.ZipFile", e);
      }
  }

  @Test(timeout = 11000)
  public void test42()  throws Throwable  {
      String string0 = "";
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      MockFile mockFile0 = new MockFile(string0, string0);
      Archive.EntryFilter archive_EntryFilter0 = mock(Archive.EntryFilter.class, new ViolatedAssumptionAnswer());
      ExplodedArchive.FileEntryIterator explodedArchive_FileEntryIterator0 = new ExplodedArchive.FileEntryIterator(mockFile0, boolean0);
      Archive.Entry archive_Entry0 = explodedArchive_FileEntryIterator0.next();
  }

  @Test(timeout = 11000)
  public void test43()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp/foo.bar/9?W7ufkIM^GAqUwc0riHb#_(P(");
      boolean boolean0 = FileSystemHandling.createFolder(evoSuiteFile0);
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      String string0 = "9?W7ufkIM^GAqUwc";
      String string1 = "riHb#_(P(";
      File file0 = mockFile0.getCanonicalFile();
      File file1 = MockFile.createTempFile(string0, string1, (File) mockFile0);
      boolean boolean1 = true;
      boolean boolean2 = mockFile0.setWritable(boolean1);
      ExplodedArchive explodedArchive0 = new ExplodedArchive(mockFile0);
      Archive.EntryFilter archive_EntryFilter0 = mock(Archive.EntryFilter.class, new ViolatedAssumptionAnswer());
      doReturn(boolean1, false).when(archive_EntryFilter0).matches(any(org.springframework.boot.loader.archive.Archive.Entry.class));
      List<Archive> list0 = explodedArchive0.getNestedArchives(archive_EntryFilter0);
      String string2 = "L6J";
      ExplodedArchive.FileEntry explodedArchive_FileEntry0 = new ExplodedArchive.FileEntry(string2, explodedArchive0.manifestFile);
      String string3 = "";
      explodedArchive_FileEntry0.name = string2;
      explodedArchive_FileEntry0.name = string3;
      explodedArchive_FileEntry0.name = string2;
      String string4 = explodedArchive_FileEntry0.getName();
      boolean boolean3 = false;
      ExplodedArchive.FileEntryIterator explodedArchive_FileEntryIterator0 = new ExplodedArchive.FileEntryIterator(file0, boolean3);
      boolean boolean4 = file0.mkdir();
      Iterator<File> iterator0 = explodedArchive_FileEntryIterator0.listFiles(file0);
      String string5 = explodedArchive_FileEntry0.getName();
      // Undeclared exception!
      try { 
        explodedArchive_FileEntryIterator0.remove();
      } catch(UnsupportedOperationException e) {
         //
         // remove
         //
         verifyException("org.springframework.boot.loader.archive.ExplodedArchive$FileEntryIterator", e);
      }
  }

  @Test(timeout = 11000)
  public void test44()  throws Throwable  {
      String string0 = null;
      String string1 = "";
      MockFile mockFile0 = new MockFile(string0, string1);
      ExplodedArchive explodedArchive0 = new ExplodedArchive(mockFile0);
      ExplodedArchive.FileEntry explodedArchive_FileEntry0 = new ExplodedArchive.FileEntry(string0, explodedArchive0.manifestFile);
      explodedArchive0.root = (File) mockFile0;
      // Undeclared exception!
      try { 
        explodedArchive0.getNestedArchive(explodedArchive_FileEntry0);
      } catch(IllegalArgumentException e) {
         //
         // File must exist
         //
         verifyException("org.springframework.boot.loader.data.RandomAccessDataFile", e);
      }
  }

  @Test(timeout = 11000)
  public void test45()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("h|LT)<{C<2a&5~/Unable to open root Jar file '/6m*2/0exploded archive");
      String string0 = "exploded archive";
      boolean boolean0 = FileSystemHandling.appendLineToFile(evoSuiteFile0, string0);
      ExplodedArchive explodedArchive0 = new ExplodedArchive();
      String string1 = "6m*2/";
      String string2 = "exploded archive";
      String string3 = "h|LT)<{C<2a&5~";
      String string4 = "Unable to open root Jar file '";
      MockFile mockFile0 = new MockFile(string3, string4);
      explodedArchive0.root = (File) mockFile0;
      File file0 = MockFile.createTempFile(string1, string2, explodedArchive0.root);
      explodedArchive0.manifestFile = file0;
      Iterator<Archive.Entry> iterator0 = explodedArchive0.iterator();
      long long0 = 1180L;
      boolean boolean1 = mockFile0.setLastModified(long0);
      String string5 = explodedArchive0.toString();
      try { 
        explodedArchive0.getManifest();
      } catch(IOException e) {
         //
         // invalid header field
         //
         verifyException("java.util.jar.Attributes", e);
      }
  }
}
