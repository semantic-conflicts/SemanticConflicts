/*
 * This file was automatically generated by EvoSuite
 * Thu Apr 30 00:35:23 GMT 2020
 */

package org.springframework.boot.loader.archive;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.net.URI;
import java.net.URL;
import java.nio.file.Path;
import java.util.Comparator;
import java.util.Deque;
import java.util.Iterator;
import java.util.List;
import java.util.NoSuchElementException;
import java.util.Spliterator;
import java.util.function.Consumer;
import java.util.function.Function;
import java.util.function.ToDoubleFunction;
import java.util.jar.Manifest;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import org.springframework.boot.loader.archive.Archive;
import org.springframework.boot.loader.archive.ExplodedArchive;
import org.springframework.boot.loader.jar.JarFile;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ExplodedArchive_ESTest extends ExplodedArchive_ESTest_scaffolding {

  @Test(timeout = 11000)
  public void test00()  throws Throwable  {
      ExplodedArchive explodedArchive0 = new ExplodedArchive();
      String string0 = explodedArchive0.toString();
      File file0 = null;
      MockFile mockFile0 = new MockFile(string0, string0);
      ExplodedArchive.FileEntryIterator explodedArchive_FileEntryIterator0 = new ExplodedArchive.FileEntryIterator();
      // Undeclared exception!
      try { 
        explodedArchive_FileEntryIterator0.remove();
      } catch(UnsupportedOperationException e) {
         //
         // remove
         //
         verifyException("org.springframework.boot.loader.archive.ExplodedArchive$FileEntryIterator", e);
      }
  }

  @Test(timeout = 11000)
  public void test01()  throws Throwable  {
      String string0 = "M{)NtnVK(w5K3mZkW-";
      File file0 = MockFile.createTempFile(string0, string0);
      boolean boolean0 = true;
      ExplodedArchive.FileEntryIterator explodedArchive_FileEntryIterator0 = new ExplodedArchive.FileEntryIterator(file0, boolean0);
      // Undeclared exception!
      try { 
        explodedArchive_FileEntryIterator0.next();
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springframework.boot.loader.archive.ExplodedArchive$FileEntryIterator", e);
      }
  }

  @Test(timeout = 11000)
  public void test02()  throws Throwable  {
      ExplodedArchive explodedArchive0 = new ExplodedArchive();
      String string0 = "]'=H=b?8XeC";
      MockFile mockFile0 = new MockFile(string0);
      explodedArchive0.manifestFile = (File) mockFile0;
      explodedArchive0.root = (File) mockFile0;
      String string1 = "";
      ExplodedArchive.FileEntry explodedArchive_FileEntry0 = new ExplodedArchive.FileEntry(string1, explodedArchive0.root);
      boolean boolean0 = explodedArchive_FileEntry0.isDirectory();
      boolean boolean1 = mockFile0.mkdirs();
      String string2 = explodedArchive0.toString();
      try { 
        explodedArchive0.getManifest();
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 11000)
  public void test03()  throws Throwable  {
      String string0 = "";
      String string1 = "org.springframework.boot.loader.archive.ExplodedArchive$FileEntry";
      MockFile mockFile0 = new MockFile(string0, string1);
      boolean boolean0 = false;
      ExplodedArchive explodedArchive0 = null;
      try {
        explodedArchive0 = new ExplodedArchive(mockFile0, boolean0);
      } catch(IllegalArgumentException e) {
         //
         // Invalid source folder /org.springframework.boot.loader.archive.ExplodedArchive$FileEntry
         //
         verifyException("org.springframework.boot.loader.archive.ExplodedArchive", e);
      }
  }

  @Test(timeout = 11000)
  public void test04()  throws Throwable  {
      String string0 = "";
      MockFile mockFile0 = new MockFile(string0, string0);
      ExplodedArchive explodedArchive0 = new ExplodedArchive(mockFile0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Manifest manifest0 = null;
      String string1 = explodedArchive0.toString();
      MockFile mockFile1 = new MockFile(string0);
      Manifest manifest1 = explodedArchive0.getManifest();
      Comparator<String> comparator0 = Comparator.naturalOrder();
      ExplodedArchive.FileEntry explodedArchive_FileEntry0 = new ExplodedArchive.FileEntry();
      explodedArchive_FileEntry0.file = explodedArchive0.root;
      String string2 = explodedArchive_FileEntry0.getName();
      Iterator<Archive.Entry> iterator0 = explodedArchive0.iterator();
      Archive archive0 = explodedArchive0.getNestedArchive(explodedArchive_FileEntry0);
      Archive.EntryFilter archive_EntryFilter0 = mock(Archive.EntryFilter.class, new ViolatedAssumptionAnswer());
      doReturn(((ExplodedArchive) archive0).recursive, explodedArchive0.recursive, explodedArchive0.recursive, explodedArchive0.recursive, explodedArchive0.recursive).when(archive_EntryFilter0).matches(any(org.springframework.boot.loader.archive.Archive.Entry.class));
      List<Archive> list0 = archive0.getNestedArchives(archive_EntryFilter0);
  }

  @Test(timeout = 11000)
  public void test05()  throws Throwable  {
      String string0 = "t|u";
      MockFile mockFile0 = new MockFile(string0);
      MockFile mockFile1 = new MockFile(mockFile0, string0);
      File file0 = MockFile.createTempFile(string0, string0, (File) mockFile1);
      ExplodedArchive explodedArchive0 = null;
      try {
        explodedArchive0 = new ExplodedArchive(file0);
      } catch(IllegalArgumentException e) {
         //
         // Invalid source folder /server/study-execution/new-nimrod/nimrod-hunoroutput-test-dest/spring-boot/af20dc6cc45c032573413c401f9f73aa75371744/evosuite_10/t|u/t|u/t|u0t|u
         //
         verifyException("org.springframework.boot.loader.archive.ExplodedArchive", e);
      }
  }

  @Test(timeout = 11000)
  public void test06()  throws Throwable  {
      String string0 = "";
      MockFile mockFile0 = new MockFile(string0, string0);
      String string1 = "~THL";
      File file0 = MockFile.createTempFile(string1, string0);
      boolean boolean0 = false;
      ExplodedArchive explodedArchive0 = new ExplodedArchive(mockFile0, boolean0);
      boolean boolean1 = true;
      boolean boolean2 = true;
      Archive.EntryFilter archive_EntryFilter0 = mock(Archive.EntryFilter.class, new ViolatedAssumptionAnswer());
      doReturn(boolean0, explodedArchive0.recursive, boolean0, boolean1).when(archive_EntryFilter0).matches(any(org.springframework.boot.loader.archive.Archive.Entry.class));
      boolean boolean3 = mockFile0.mkdir();
      try { 
        explodedArchive0.getNestedArchives(archive_EntryFilter0);
      } catch(FileNotFoundException e) {
         //
         // /tmp/~THL0 (Arquivo ou diret\u00F3rio n\u00E3o encontrado)
         //
         verifyException("java.util.zip.ZipFile", e);
      }
  }

  @Test(timeout = 11000)
  public void test07()  throws Throwable  {
      ExplodedArchive.FileEntry explodedArchive_FileEntry0 = new ExplodedArchive.FileEntry();
      String string0 = explodedArchive_FileEntry0.getName();
  }

  @Test(timeout = 11000)
  public void test08()  throws Throwable  {
      ExplodedArchive.FileEntryIterator explodedArchive_FileEntryIterator0 = new ExplodedArchive.FileEntryIterator();
      File file0 = explodedArchive_FileEntryIterator0.poll();
  }

  @Test(timeout = 11000)
  public void test09()  throws Throwable  {
      ExplodedArchive explodedArchive0 = new ExplodedArchive();
      Archive.EntryFilter archive_EntryFilter0 = null;
      // Undeclared exception!
      try { 
        explodedArchive0.getNestedArchives(archive_EntryFilter0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springframework.boot.loader.archive.ExplodedArchive$FileEntryIterator", e);
      }
  }

  @Test(timeout = 11000)
  public void test10()  throws Throwable  {
      String string0 = "";
      MockFile mockFile0 = new MockFile(string0);
      boolean boolean0 = false;
      ExplodedArchive.FileEntryIterator explodedArchive_FileEntryIterator0 = new ExplodedArchive.FileEntryIterator(mockFile0, boolean0);
      Iterator<File> iterator0 = explodedArchive_FileEntryIterator0.listFiles(mockFile0);
  }

  @Test(timeout = 11000)
  public void test11()  throws Throwable  {
      String string0 = "JAR entry ";
      String string1 = "";
      File file0 = MockFile.createTempFile(string0, string1);
      boolean boolean0 = false;
      ExplodedArchive.FileEntryIterator explodedArchive_FileEntryIterator0 = new ExplodedArchive.FileEntryIterator(file0, boolean0);
      Iterator<File> iterator0 = explodedArchive_FileEntryIterator0.listFiles(file0);
  }

  @Test(timeout = 11000)
  public void test12()  throws Throwable  {
      ExplodedArchive explodedArchive0 = new ExplodedArchive();
      ExplodedArchive.FileEntry explodedArchive_FileEntry0 = new ExplodedArchive.FileEntry();
      // Undeclared exception!
      try { 
        explodedArchive0.getNestedArchive(explodedArchive_FileEntry0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springframework.boot.loader.archive.ExplodedArchive", e);
      }
  }

  @Test(timeout = 11000)
  public void test13()  throws Throwable  {
      ExplodedArchive.FileEntryIterator.EntryComparator explodedArchive_FileEntryIterator_EntryComparator0 = new ExplodedArchive.FileEntryIterator.EntryComparator();
      File file0 = null;
      // Undeclared exception!
      try { 
        explodedArchive_FileEntryIterator_EntryComparator0.compare(file0, file0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springframework.boot.loader.archive.ExplodedArchive$FileEntryIterator$EntryComparator", e);
      }
  }

  @Test(timeout = 11000)
  public void test14()  throws Throwable  {
      String string0 = "";
      MockFile mockFile0 = new MockFile(string0, string0);
      MockFile mockFile1 = new MockFile(mockFile0, string0);
      boolean boolean0 = true;
      boolean boolean1 = false;
      boolean boolean2 = mockFile1.setWritable(boolean0, boolean1);
      boolean boolean3 = mockFile1.setExecutable(boolean0, boolean1);
      boolean boolean4 = false;
      File file0 = mockFile0.getAbsoluteFile();
      boolean boolean5 = mockFile0.setReadOnly();
      ExplodedArchive.FileEntryIterator explodedArchive_FileEntryIterator0 = new ExplodedArchive.FileEntryIterator(mockFile1, boolean4);
      URI uRI0 = mockFile1.toURI();
      // Undeclared exception!
      try { 
        explodedArchive_FileEntryIterator0.remove();
      } catch(UnsupportedOperationException e) {
         //
         // remove
         //
         verifyException("org.springframework.boot.loader.archive.ExplodedArchive$FileEntryIterator", e);
      }
  }

  @Test(timeout = 11000)
  public void test15()  throws Throwable  {
      String string0 = "=/4g0#V06Ap]O6o-";
      String string1 = "";
      MockFile mockFile0 = new MockFile(string0);
      File file0 = MockFile.createTempFile(string0, string1, (File) mockFile0);
      boolean boolean0 = true;
      ExplodedArchive.FileEntryIterator explodedArchive_FileEntryIterator0 = new ExplodedArchive.FileEntryIterator(file0, boolean0);
      // Undeclared exception!
      try { 
        explodedArchive_FileEntryIterator0.next();
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springframework.boot.loader.archive.ExplodedArchive$FileEntryIterator", e);
      }
  }

  @Test(timeout = 11000)
  public void test16()  throws Throwable  {
      ExplodedArchive.FileEntry explodedArchive_FileEntry0 = new ExplodedArchive.FileEntry();
      String string0 = "jZ}(";
      explodedArchive_FileEntry0.name = string0;
      File file0 = explodedArchive_FileEntry0.getFile();
      ExplodedArchive explodedArchive0 = null;
      try {
        explodedArchive0 = new ExplodedArchive(explodedArchive_FileEntry0.file);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springframework.boot.loader.archive.ExplodedArchive", e);
      }
  }

  @Test(timeout = 11000)
  public void test17()  throws Throwable  {
      String string0 = null;
      String string1 = "Zv'";
      MockFile mockFile0 = new MockFile(string0, string1);
      boolean boolean0 = true;
      ExplodedArchive explodedArchive0 = null;
      try {
        explodedArchive0 = new ExplodedArchive(mockFile0, boolean0);
      } catch(IllegalArgumentException e) {
         //
         // Invalid source folder Zv'
         //
         verifyException("org.springframework.boot.loader.archive.ExplodedArchive", e);
      }
  }

  @Test(timeout = 11000)
  public void test18()  throws Throwable  {
      String string0 = "~\"A";
      String string1 = "";
      MockFile mockFile0 = new MockFile(string0, string1);
      ExplodedArchive.FileEntry explodedArchive_FileEntry0 = new ExplodedArchive.FileEntry(string0, mockFile0);
  }

  @Test(timeout = 11000)
  public void test19()  throws Throwable  {
      ExplodedArchive.FileEntryIterator explodedArchive_FileEntryIterator0 = new ExplodedArchive.FileEntryIterator();
      boolean boolean0 = explodedArchive_FileEntryIterator0.hasNext();
  }

  @Test(timeout = 11000)
  public void test20()  throws Throwable  {
      String string0 = "";
      MockFile mockFile0 = new MockFile(string0);
      ExplodedArchive explodedArchive0 = new ExplodedArchive(mockFile0);
      URL uRL0 = explodedArchive0.getUrl();
      URL uRL1 = mockFile0.toURL();
      boolean boolean0 = mockFile0.setExecutable(explodedArchive0.recursive);
      String string1 = mockFile0.getAbsolutePath();
      explodedArchive0.manifestFile = (File) mockFile0;
      Archive.EntryFilter archive_EntryFilter0 = mock(Archive.EntryFilter.class, new ViolatedAssumptionAnswer());
      MockFile mockFile1 = new MockFile(string0);
      explodedArchive0.manifestFile = (File) mockFile1;
      File file0 = explodedArchive0.getManifestFile(mockFile0);
      List<Archive> list0 = explodedArchive0.getNestedArchives(archive_EntryFilter0);
      File file1 = explodedArchive0.getManifestFile(mockFile0);
      String string2 = "";
      ExplodedArchive.FileEntry explodedArchive_FileEntry0 = new ExplodedArchive.FileEntry(string2, mockFile1);
      String string3 = "org.springframework.boot.loader.jar.Handler";
      explodedArchive_FileEntry0.name = string3;
      boolean boolean1 = mockFile1.createNewFile();
      Archive archive0 = explodedArchive0.getNestedArchive(explodedArchive_FileEntry0);
      ExplodedArchive.FileEntryIterator.EntryComparator explodedArchive_FileEntryIterator_EntryComparator0 = new ExplodedArchive.FileEntryIterator.EntryComparator();
      Comparator<String> comparator0 = Comparator.naturalOrder();
      int int0 = explodedArchive_FileEntryIterator_EntryComparator0.compare(explodedArchive0.manifestFile, (File) mockFile0);
      File file2 = explodedArchive0.getManifestFile(mockFile1);
      boolean boolean2 = false;
      ExplodedArchive.FileEntryIterator explodedArchive_FileEntryIterator0 = new ExplodedArchive.FileEntryIterator(explodedArchive0.root, boolean2);
      // Undeclared exception!
      try { 
        explodedArchive_FileEntryIterator0.remove();
      } catch(UnsupportedOperationException e) {
         //
         // remove
         //
         verifyException("org.springframework.boot.loader.archive.ExplodedArchive$FileEntryIterator", e);
      }
  }

  @Test(timeout = 11000)
  public void test21()  throws Throwable  {
      String string0 = "k)^I6";
      MockFile mockFile0 = new MockFile(string0);
      File file0 = mockFile0.getAbsoluteFile();
      boolean boolean0 = mockFile0.mkdirs();
      ExplodedArchive explodedArchive0 = new ExplodedArchive(mockFile0);
      URL uRL0 = explodedArchive0.getUrl();
      Archive.EntryFilter archive_EntryFilter0 = mock(Archive.EntryFilter.class, new ViolatedAssumptionAnswer());
      List<Archive> list0 = explodedArchive0.getNestedArchives(archive_EntryFilter0);
      File file1 = mockFile0.getCanonicalFile();
      ExplodedArchive.FileEntry explodedArchive_FileEntry0 = new ExplodedArchive.FileEntry();
      String string1 = explodedArchive_FileEntry0.getName();
      ExplodedArchive.FileEntryIterator.EntryComparator explodedArchive_FileEntryIterator_EntryComparator0 = new ExplodedArchive.FileEntryIterator.EntryComparator();
      int int0 = explodedArchive_FileEntryIterator_EntryComparator0.compare((File) mockFile0, (File) mockFile0);
      ExplodedArchive.FileEntryIterator explodedArchive_FileEntryIterator0 = new ExplodedArchive.FileEntryIterator();
      explodedArchive_FileEntryIterator0.current = file1;
      // Undeclared exception!
      try { 
        explodedArchive_FileEntryIterator0.next();
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springframework.boot.loader.archive.ExplodedArchive$FileEntryIterator", e);
      }
  }

  @Test(timeout = 11000)
  public void test22()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      ExplodedArchive explodedArchive0 = null;
      try {
        explodedArchive0 = new ExplodedArchive(mockFile0);
      } catch(IllegalArgumentException e) {
         //
         // Invalid source folder /tmp/foo.bar
         //
         verifyException("org.springframework.boot.loader.archive.ExplodedArchive", e);
      }
  }

  @Test(timeout = 11000)
  public void test23()  throws Throwable  {
      String string0 = "";
      MockFile mockFile0 = new MockFile(string0, string0);
      boolean boolean0 = false;
      ExplodedArchive explodedArchive0 = new ExplodedArchive(mockFile0, boolean0);
      Manifest manifest0 = explodedArchive0.getManifest();
  }

  @Test(timeout = 11000)
  public void test24()  throws Throwable  {
      String string0 = "";
      MockFile mockFile0 = new MockFile(string0);
      boolean boolean0 = mockFile0.createNewFile();
      boolean boolean1 = true;
      boolean boolean2 = mockFile0.setWritable(boolean1);
      ExplodedArchive explodedArchive0 = new ExplodedArchive(mockFile0);
      ExplodedArchive.FileEntry explodedArchive_FileEntry0 = new ExplodedArchive.FileEntry();
      explodedArchive_FileEntry0.file = explodedArchive0.root;
      explodedArchive0.manifestFile = (File) mockFile0;
      String string1 = "'";
      explodedArchive_FileEntry0.file = (File) mockFile0;
      explodedArchive_FileEntry0.name = string1;
      String string2 = explodedArchive_FileEntry0.getName();
      Archive.EntryFilter archive_EntryFilter0 = mock(Archive.EntryFilter.class, new ViolatedAssumptionAnswer());
      List<Archive> list0 = explodedArchive0.getNestedArchives(archive_EntryFilter0);
      String string3 = explodedArchive0.toString();
      try { 
        explodedArchive0.getManifest();
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 11000)
  public void test25()  throws Throwable  {
      String string0 = "META-INF";
      String string1 = "";
      File file0 = null;
      String string2 = "";
      MockFile mockFile0 = new MockFile(file0, string2);
      File file1 = MockFile.createTempFile(string0, string1, (File) mockFile0);
      ExplodedArchive.FileEntry explodedArchive_FileEntry0 = new ExplodedArchive.FileEntry(string0, file1);
      boolean boolean0 = explodedArchive_FileEntry0.isDirectory();
  }

  @Test(timeout = 11000)
  public void test26()  throws Throwable  {
      ExplodedArchive.FileEntry explodedArchive_FileEntry0 = new ExplodedArchive.FileEntry();
      boolean boolean0 = true;
      ExplodedArchive explodedArchive0 = null;
      try {
        explodedArchive0 = new ExplodedArchive(explodedArchive_FileEntry0.file, boolean0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springframework.boot.loader.archive.ExplodedArchive", e);
      }
  }

  @Test(timeout = 11000)
  public void test27()  throws Throwable  {
      File file0 = null;
      ExplodedArchive explodedArchive0 = null;
      try {
        explodedArchive0 = new ExplodedArchive(file0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springframework.boot.loader.archive.ExplodedArchive", e);
      }
  }

  @Test(timeout = 11000)
  public void test28()  throws Throwable  {
      ExplodedArchive explodedArchive0 = new ExplodedArchive();
      ExplodedArchive.FileEntry explodedArchive_FileEntry0 = new ExplodedArchive.FileEntry();
      String string0 = null;
      explodedArchive_FileEntry0.name = string0;
      // Undeclared exception!
      try { 
        explodedArchive0.getNestedArchive(explodedArchive_FileEntry0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springframework.boot.loader.archive.ExplodedArchive", e);
      }
  }

  @Test(timeout = 11000)
  public void test29()  throws Throwable  {
      ExplodedArchive explodedArchive0 = new ExplodedArchive();
      // Undeclared exception!
      try { 
        explodedArchive0.iterator();
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springframework.boot.loader.archive.ExplodedArchive$FileEntryIterator", e);
      }
  }

  @Test(timeout = 11000)
  public void test30()  throws Throwable  {
      String string0 = "remove";
      String string1 = "META-INF";
      MockFile mockFile0 = new MockFile(string0, string1);
      boolean boolean0 = false;
      ExplodedArchive explodedArchive0 = null;
      try {
        explodedArchive0 = new ExplodedArchive(mockFile0, boolean0);
      } catch(IllegalArgumentException e) {
         //
         // Invalid source folder /server/study-execution/new-nimrod/nimrod-hunoroutput-test-dest/spring-boot/af20dc6cc45c032573413c401f9f73aa75371744/evosuite_10/remove/META-INF
         //
         verifyException("org.springframework.boot.loader.archive.ExplodedArchive", e);
      }
  }

  @Test(timeout = 11000)
  public void test31()  throws Throwable  {
      String string0 = "~~s}fU?yW,wI;;+d";
      MockFile mockFile0 = new MockFile(string0);
      Path path0 = mockFile0.toPath();
      boolean boolean0 = mockFile0.createNewFile();
      boolean boolean1 = true;
      ExplodedArchive.FileEntryIterator explodedArchive_FileEntryIterator0 = new ExplodedArchive.FileEntryIterator(mockFile0, boolean1);
      ExplodedArchive explodedArchive0 = new ExplodedArchive();
      explodedArchive0.root = explodedArchive_FileEntryIterator0.root;
      File file0 = explodedArchive0.getManifestFile(mockFile0);
      ExplodedArchive.FileEntryIterator.EntryComparator explodedArchive_FileEntryIterator_EntryComparator0 = new ExplodedArchive.FileEntryIterator.EntryComparator();
      int int0 = explodedArchive_FileEntryIterator_EntryComparator0.compare(file0, (File) mockFile0);
      String string1 = explodedArchive0.toString();
      Iterator<File> iterator0 = explodedArchive_FileEntryIterator0.listFiles(explodedArchive0.root);
      String string2 = "";
      ExplodedArchive.FileEntry explodedArchive_FileEntry0 = new ExplodedArchive.FileEntry(string2, explodedArchive0.root);
      File file1 = explodedArchive_FileEntry0.getFile();
      // Undeclared exception!
      try { 
        explodedArchive0.getManifest();
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springframework.boot.loader.archive.ExplodedArchive", e);
      }
  }

  @Test(timeout = 11000)
  public void test32()  throws Throwable  {
      ExplodedArchive.FileEntryIterator explodedArchive_FileEntryIterator0 = new ExplodedArchive.FileEntryIterator();
      String string0 = "";
      MockFile mockFile0 = new MockFile(string0, string0);
      Iterator<File> iterator0 = explodedArchive_FileEntryIterator0.listFiles(mockFile0);
  }

  @Test(timeout = 11000)
  public void test33()  throws Throwable  {
      String string0 = "";
      MockFile mockFile0 = new MockFile(string0);
      String string1 = "~THL";
      File file0 = MockFile.createTempFile(string1, string0);
      boolean boolean0 = false;
      ExplodedArchive explodedArchive0 = new ExplodedArchive(mockFile0, boolean0);
      Archive.EntryFilter archive_EntryFilter0 = mock(Archive.EntryFilter.class, new ViolatedAssumptionAnswer());
      boolean boolean1 = mockFile0.mkdir();
      List<Archive> list0 = explodedArchive0.getNestedArchives(archive_EntryFilter0);
      Manifest manifest0 = explodedArchive0.getManifest();
      Iterator<Archive.Entry> iterator0 = explodedArchive0.iterator();
      ExplodedArchive.FileEntryIterator explodedArchive_FileEntryIterator0 = new ExplodedArchive.FileEntryIterator();
      String string2 = "";
      MockFile mockFile1 = new MockFile(string1, string2);
      explodedArchive_FileEntryIterator0.root = (File) mockFile1;
      explodedArchive_FileEntryIterator0.current = (File) mockFile0;
      boolean boolean2 = explodedArchive_FileEntryIterator0.hasNext();
      ExplodedArchive.FileEntry explodedArchive_FileEntry0 = new ExplodedArchive.FileEntry();
      String string3 = explodedArchive_FileEntry0.getName();
  }

  @Test(timeout = 11000)
  public void test34()  throws Throwable  {
      ExplodedArchive explodedArchive0 = new ExplodedArchive();
      String string0 = " V";
      MockFile mockFile0 = new MockFile(string0, string0);
      // Undeclared exception!
      try { 
        explodedArchive0.getUrl();
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springframework.boot.loader.archive.ExplodedArchive", e);
      }
  }

  @Test(timeout = 11000)
  public void test35()  throws Throwable  {
      String string0 = "";
      MockFile mockFile0 = new MockFile(string0, string0);
      ExplodedArchive explodedArchive0 = new ExplodedArchive(mockFile0);
      ExplodedArchive.FileEntry explodedArchive_FileEntry0 = new ExplodedArchive.FileEntry(string0, mockFile0);
      Archive archive0 = explodedArchive0.getNestedArchive(explodedArchive_FileEntry0);
  }

  @Test(timeout = 11000)
  public void test36()  throws Throwable  {
      boolean boolean0 = true;
      ExplodedArchive explodedArchive0 = new ExplodedArchive();
      ExplodedArchive.FileEntryIterator.EntryComparator explodedArchive_FileEntryIterator_EntryComparator0 = new ExplodedArchive.FileEntryIterator.EntryComparator();
      String string0 = explodedArchive0.toString();
      String string1 = "";
      ExplodedArchive.FileEntry explodedArchive_FileEntry0 = new ExplodedArchive.FileEntry(string1, explodedArchive0.root);
      File file0 = explodedArchive_FileEntry0.getFile();
      // Undeclared exception!
      try { 
        explodedArchive0.getManifest();
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springframework.boot.loader.archive.ExplodedArchive", e);
      }
  }

  @Test(timeout = 11000)
  public void test37()  throws Throwable  {
      String string0 = "o&VoTPOoTRI@}NVEb";
      String string1 = "";
      String string2 = "WhE9;EP^jH(B'+";
      MockFile mockFile0 = new MockFile(string2);
      File file0 = MockFile.createTempFile(string0, string1, (File) mockFile0);
      MockFile mockFile1 = new MockFile(file0, string1);
      boolean boolean0 = false;
      boolean boolean1 = mockFile1.setWritable(boolean0);
      ExplodedArchive.FileEntry explodedArchive_FileEntry0 = new ExplodedArchive.FileEntry(string0, mockFile1);
      ExplodedArchive.FileEntryIterator.EntryComparator explodedArchive_FileEntryIterator_EntryComparator0 = new ExplodedArchive.FileEntryIterator.EntryComparator();
      boolean boolean2 = false;
      ExplodedArchive explodedArchive0 = new ExplodedArchive(mockFile0, boolean2);
      File file1 = MockFile.createTempFile(explodedArchive_FileEntry0.name, string1);
      boolean boolean3 = mockFile1.setReadOnly();
      try { 
        explodedArchive0.getNestedArchive(explodedArchive_FileEntry0);
      } catch(FileNotFoundException e) {
         //
         // /server/study-execution/new-nimrod/nimrod-hunoroutput-test-dest/spring-boot/af20dc6cc45c032573413c401f9f73aa75371744/evosuite_10/WhE9;EP^jH(B'+/o&VoTPOoTRI@}NVEb0 (Arquivo ou diret\u00F3rio n\u00E3o encontrado)
         //
         verifyException("java.util.zip.ZipFile", e);
      }
  }

  @Test(timeout = 11000)
  public void test38()  throws Throwable  {
      String string0 = "";
      MockFile mockFile0 = new MockFile(string0, string0);
      ExplodedArchive explodedArchive0 = new ExplodedArchive(mockFile0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      explodedArchive0.forEach(consumer0);
      URL uRL0 = explodedArchive0.getUrl();
      Manifest manifest0 = null;
      explodedArchive0.manifest = manifest0;
      String string1 = explodedArchive0.toString();
      File file0 = explodedArchive0.getManifestFile(mockFile0);
      ExplodedArchive.FileEntryIterator.EntryComparator explodedArchive_FileEntryIterator_EntryComparator0 = new ExplodedArchive.FileEntryIterator.EntryComparator();
      Manifest manifest1 = explodedArchive0.getManifest();
      Comparator<String> comparator0 = Comparator.naturalOrder();
      Comparator<String> comparator1 = Comparator.naturalOrder();
      int int0 = explodedArchive_FileEntryIterator_EntryComparator0.compare(explodedArchive0.manifestFile, (File) mockFile0);
      ExplodedArchive.FileEntry explodedArchive_FileEntry0 = new ExplodedArchive.FileEntry();
      File file1 = explodedArchive_FileEntry0.getFile();
      String string2 = explodedArchive_FileEntry0.getName();
      Iterator<Archive.Entry> iterator0 = explodedArchive0.iterator();
      // Undeclared exception!
      try { 
        explodedArchive0.getNestedArchive(explodedArchive_FileEntry0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springframework.boot.loader.archive.ExplodedArchive", e);
      }
  }

  @Test(timeout = 11000)
  public void test39()  throws Throwable  {
      ExplodedArchive.FileEntry explodedArchive_FileEntry0 = new ExplodedArchive.FileEntry();
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      explodedArchive_FileEntry0.file = (File) mockFile0;
      File file0 = explodedArchive_FileEntry0.getFile();
      ExplodedArchive explodedArchive0 = new ExplodedArchive();
      // Undeclared exception!
      try { 
        explodedArchive0.getNestedArchive(explodedArchive_FileEntry0);
      } catch(IllegalArgumentException e) {
         //
         // File must exist
         //
         verifyException("org.springframework.boot.loader.data.RandomAccessDataFile", e);
      }
  }

  @Test(timeout = 11000)
  public void test40()  throws Throwable  {
      String string0 = "tmp";
      String string1 = "JAR entry ";
      File file0 = MockFile.createTempFile(string0, string1);
      boolean boolean0 = true;
      ExplodedArchive.FileEntryIterator explodedArchive_FileEntryIterator0 = new ExplodedArchive.FileEntryIterator(file0, boolean0);
      explodedArchive_FileEntryIterator0.current = file0;
      Archive.Entry archive_Entry0 = explodedArchive_FileEntryIterator0.next();
      ExplodedArchive explodedArchive0 = null;
      try {
        explodedArchive0 = new ExplodedArchive(explodedArchive_FileEntryIterator0.current);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springframework.boot.loader.archive.ExplodedArchive", e);
      }
  }

  @Test(timeout = 11000)
  public void test41()  throws Throwable  {
      ExplodedArchive explodedArchive0 = new ExplodedArchive();
      String string0 = "]'=H=b?8XeC";
      String string1 = "n7R>;:,b-gg3U{N";
      MockFile mockFile0 = new MockFile(string0);
      explodedArchive0.manifestFile = (File) mockFile0;
      MockFile mockFile1 = new MockFile(string0);
      explodedArchive0.root = (File) mockFile1;
      Archive.EntryFilter archive_EntryFilter0 = mock(Archive.EntryFilter.class, new ViolatedAssumptionAnswer());
      List<Archive> list0 = explodedArchive0.getNestedArchives(archive_EntryFilter0);
      Archive.EntryFilter archive_EntryFilter1 = mock(Archive.EntryFilter.class, new ViolatedAssumptionAnswer());
      List<Archive> list1 = explodedArchive0.getNestedArchives(archive_EntryFilter1);
      String string2 = "";
      ExplodedArchive.FileEntry explodedArchive_FileEntry0 = new ExplodedArchive.FileEntry(string2, explodedArchive0.root);
      boolean boolean0 = explodedArchive_FileEntry0.isDirectory();
      boolean boolean1 = mockFile0.mkdirs();
      String string3 = "8+ cFv1_S9F#";
      File file0 = MockFile.createTempFile(string1, string3);
      String string4 = explodedArchive0.toString();
      Archive.EntryFilter archive_EntryFilter2 = mock(Archive.EntryFilter.class, new ViolatedAssumptionAnswer());
      List<Archive> list2 = explodedArchive0.getNestedArchives(archive_EntryFilter2);
      try { 
        explodedArchive0.getManifest();
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 11000)
  public void test42()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("]'=H=b?8XeC");
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte)29;
      byteArray0[0] = byte0;
      byte byte1 = (byte)56;
      byteArray0[1] = byte1;
      boolean boolean0 = FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      ExplodedArchive explodedArchive0 = new ExplodedArchive();
      String string0 = "]'=H=b?8XeC";
      String string1 = "n7R>;:,b-gg3U{N";
      MockFile mockFile0 = new MockFile(string0);
      explodedArchive0.manifestFile = (File) mockFile0;
      MockFile mockFile1 = new MockFile(string0);
      explodedArchive0.root = (File) mockFile1;
      Archive.EntryFilter archive_EntryFilter0 = mock(Archive.EntryFilter.class, new ViolatedAssumptionAnswer());
      List<Archive> list0 = explodedArchive0.getNestedArchives(archive_EntryFilter0);
      Archive.EntryFilter archive_EntryFilter1 = mock(Archive.EntryFilter.class, new ViolatedAssumptionAnswer());
      List<Archive> list1 = explodedArchive0.getNestedArchives(archive_EntryFilter1);
      String string2 = "";
      ExplodedArchive.FileEntry explodedArchive_FileEntry0 = new ExplodedArchive.FileEntry(string2, explodedArchive0.root);
      boolean boolean1 = explodedArchive_FileEntry0.isDirectory();
      boolean boolean2 = mockFile0.mkdirs();
      explodedArchive0.manifestFile = (File) mockFile0;
      String string3 = "8+ cFv1_S9F#";
      File file0 = MockFile.createTempFile(string1, string3);
      String string4 = explodedArchive0.toString();
      Archive.EntryFilter archive_EntryFilter2 = mock(Archive.EntryFilter.class, new ViolatedAssumptionAnswer());
      List<Archive> list2 = explodedArchive0.getNestedArchives(archive_EntryFilter2);
      explodedArchive_FileEntry0.file = explodedArchive0.manifestFile;
      Manifest manifest0 = explodedArchive0.getManifest();
      String string5 = explodedArchive0.toString();
      Archive.EntryFilter archive_EntryFilter3 = mock(Archive.EntryFilter.class, new ViolatedAssumptionAnswer());
      List<Archive> list3 = explodedArchive0.getNestedArchives(archive_EntryFilter3);
      boolean boolean3 = false;
      ExplodedArchive.FileEntryIterator explodedArchive_FileEntryIterator0 = new ExplodedArchive.FileEntryIterator(explodedArchive0.root, boolean3);
      // Undeclared exception!
      try { 
        explodedArchive_FileEntryIterator0.next();
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springframework.boot.loader.archive.ExplodedArchive$FileEntryIterator", e);
      }
  }

  @Test(timeout = 11000)
  public void test43()  throws Throwable  {
      String string0 = "";
      MockFile mockFile0 = new MockFile(string0, string0);
      ExplodedArchive explodedArchive0 = new ExplodedArchive(mockFile0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      explodedArchive0.forEach(consumer0);
      URL uRL0 = explodedArchive0.getUrl();
      Manifest manifest0 = null;
      explodedArchive0.manifest = manifest0;
      String string1 = explodedArchive0.toString();
      MockFile mockFile1 = new MockFile(string0);
      ExplodedArchive.FileEntryIterator.EntryComparator explodedArchive_FileEntryIterator_EntryComparator0 = new ExplodedArchive.FileEntryIterator.EntryComparator();
      Manifest manifest1 = explodedArchive0.getManifest();
      Comparator<String> comparator0 = Comparator.naturalOrder();
      Comparator<String> comparator1 = Comparator.naturalOrder();
      URI uRI0 = mockFile0.toURI();
      int int0 = explodedArchive_FileEntryIterator_EntryComparator0.compare(explodedArchive0.manifestFile, (File) mockFile0);
      ExplodedArchive.FileEntry explodedArchive_FileEntry0 = new ExplodedArchive.FileEntry();
      boolean boolean0 = mockFile0.setReadOnly();
      File file0 = explodedArchive_FileEntry0.getFile();
      explodedArchive_FileEntry0.file = explodedArchive0.root;
      String string2 = explodedArchive_FileEntry0.getName();
      Iterator<Archive.Entry> iterator0 = explodedArchive0.iterator();
      Manifest manifest2 = explodedArchive0.getManifest();
      Archive archive0 = explodedArchive0.getNestedArchive(explodedArchive_FileEntry0);
      Archive.EntryFilter archive_EntryFilter0 = mock(Archive.EntryFilter.class, new ViolatedAssumptionAnswer());
      doReturn(false, false, false, false, false).when(archive_EntryFilter0).matches(any(org.springframework.boot.loader.archive.Archive.Entry.class));
      List<Archive> list0 = archive0.getNestedArchives(archive_EntryFilter0);
  }

  @Test(timeout = 11000)
  public void test44()  throws Throwable  {
      String string0 = "";
      MockFile mockFile0 = new MockFile(string0, string0);
      ExplodedArchive explodedArchive0 = new ExplodedArchive(mockFile0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      explodedArchive0.forEach(consumer0);
      URL uRL0 = explodedArchive0.getUrl();
      Manifest manifest0 = null;
      explodedArchive0.manifest = manifest0;
      String string1 = explodedArchive0.toString();
      MockFile mockFile1 = new MockFile(string0);
      ExplodedArchive.FileEntryIterator.EntryComparator explodedArchive_FileEntryIterator_EntryComparator0 = new ExplodedArchive.FileEntryIterator.EntryComparator();
      Manifest manifest1 = explodedArchive0.getManifest();
      Comparator<String> comparator0 = Comparator.naturalOrder();
      Comparator<String> comparator1 = Comparator.naturalOrder();
      URI uRI0 = mockFile0.toURI();
      int int0 = explodedArchive_FileEntryIterator_EntryComparator0.compare(explodedArchive0.manifestFile, (File) mockFile0);
      ExplodedArchive.FileEntry explodedArchive_FileEntry0 = new ExplodedArchive.FileEntry();
      boolean boolean0 = mockFile0.setReadOnly();
      File file0 = explodedArchive_FileEntry0.getFile();
      explodedArchive_FileEntry0.file = explodedArchive0.root;
      String string2 = explodedArchive_FileEntry0.getName();
      Iterator<Archive.Entry> iterator0 = explodedArchive0.iterator();
      Manifest manifest2 = explodedArchive0.getManifest();
      Archive archive0 = explodedArchive0.getNestedArchive(explodedArchive_FileEntry0);
      boolean boolean1 = false;
      Archive.EntryFilter archive_EntryFilter0 = mock(Archive.EntryFilter.class, new ViolatedAssumptionAnswer());
      doReturn(((ExplodedArchive) archive0).recursive, boolean1, explodedArchive0.recursive, boolean1, boolean0).when(archive_EntryFilter0).matches(any(org.springframework.boot.loader.archive.Archive.Entry.class));
      List<Archive> list0 = archive0.getNestedArchives(archive_EntryFilter0);
  }

  @Test(timeout = 11000)
  public void test45()  throws Throwable  {
      String string0 = "";
      MockFile mockFile0 = new MockFile(string0, string0);
      String string1 = "~THL";
      File file0 = MockFile.createTempFile(string1, string0);
      boolean boolean0 = false;
      ExplodedArchive explodedArchive0 = new ExplodedArchive(mockFile0, boolean0);
      boolean boolean1 = true;
      boolean boolean2 = true;
      Archive.EntryFilter archive_EntryFilter0 = mock(Archive.EntryFilter.class, new ViolatedAssumptionAnswer());
      doReturn(explodedArchive0.recursive, boolean1, boolean2, boolean0, boolean1).when(archive_EntryFilter0).matches(any(org.springframework.boot.loader.archive.Archive.Entry.class));
      boolean boolean3 = mockFile0.mkdir();
      try { 
        explodedArchive0.getNestedArchives(archive_EntryFilter0);
      } catch(FileNotFoundException e) {
         //
         // /tmp/~THL0 (Arquivo ou diret\u00F3rio n\u00E3o encontrado)
         //
         verifyException("java.util.zip.ZipFile", e);
      }
  }

  @Test(timeout = 11000)
  public void test46()  throws Throwable  {
      String string0 = "";
      MockFile mockFile0 = new MockFile(string0, string0);
      ExplodedArchive explodedArchive0 = new ExplodedArchive(mockFile0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = false;
      explodedArchive0.recursive = boolean0;
      explodedArchive0.forEach(consumer0);
      URL uRL0 = explodedArchive0.getUrl();
      Manifest manifest0 = null;
      explodedArchive0.manifest = manifest0;
      String string1 = explodedArchive0.toString();
      MockFile mockFile1 = new MockFile(string0);
      ExplodedArchive.FileEntryIterator.EntryComparator explodedArchive_FileEntryIterator_EntryComparator0 = new ExplodedArchive.FileEntryIterator.EntryComparator();
      Manifest manifest1 = explodedArchive0.getManifest();
      Comparator<String> comparator0 = Comparator.naturalOrder();
      Comparator<String> comparator1 = Comparator.naturalOrder();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/META-INF/MANIFEST.MF");
      boolean boolean1 = FileSystemHandling.appendLineToFile(evoSuiteFile0, string1);
      URI uRI0 = mockFile0.toURI();
      int int0 = explodedArchive_FileEntryIterator_EntryComparator0.compare(explodedArchive0.manifestFile, (File) mockFile0);
      ExplodedArchive.FileEntry explodedArchive_FileEntry0 = new ExplodedArchive.FileEntry();
      boolean boolean2 = mockFile0.setReadOnly();
      explodedArchive_FileEntry0.file = explodedArchive0.root;
      String string2 = explodedArchive_FileEntry0.getName();
      Iterator<Archive.Entry> iterator0 = explodedArchive0.iterator();
      try { 
        explodedArchive0.getManifest();
      } catch(IOException e) {
         //
         // invalid header field
         //
         verifyException("java.util.jar.Attributes", e);
      }
  }
}
