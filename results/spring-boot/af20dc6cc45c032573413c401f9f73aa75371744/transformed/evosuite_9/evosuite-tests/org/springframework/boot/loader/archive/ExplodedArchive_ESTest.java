/*
 * This file was automatically generated by EvoSuite
 * Thu Apr 30 00:33:47 GMT 2020
 */

package org.springframework.boot.loader.archive;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.net.URI;
import java.net.URL;
import java.nio.file.Path;
import java.util.Comparator;
import java.util.Iterator;
import java.util.List;
import java.util.Locale;
import java.util.NoSuchElementException;
import java.util.Set;
import java.util.Spliterator;
import java.util.function.Consumer;
import java.util.function.ToDoubleFunction;
import java.util.function.ToLongFunction;
import java.util.jar.Manifest;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import org.springframework.boot.loader.archive.Archive;
import org.springframework.boot.loader.archive.ExplodedArchive;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ExplodedArchive_ESTest extends ExplodedArchive_ESTest_scaffolding {

  @Test(timeout = 11000)
  public void test00()  throws Throwable  {
      ExplodedArchive.FileEntry explodedArchive_FileEntry0 = new ExplodedArchive.FileEntry();
      String string0 = explodedArchive_FileEntry0.getName();
  }

  @Test(timeout = 11000)
  public void test01()  throws Throwable  {
      String string0 = "";
      MockFile mockFile0 = new MockFile(string0);
      ExplodedArchive.FileEntry explodedArchive_FileEntry0 = new ExplodedArchive.FileEntry(string0, mockFile0);
      String string1 = "PVl%oT+Hg-dqt^#0zVA";
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("META-INF/MANIFEST.MF");
      byte[] byteArray0 = new byte[5];
      byte byte0 = (byte) (-66);
      byteArray0[1] = byte0;
      byte byte1 = (byte) (-41);
      byteArray0[3] = byte1;
      byte byte2 = (byte)50;
      boolean boolean0 = FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      String string2 = "org.springframework.boot.loader.archive.JarFileArchive";
      explodedArchive_FileEntry0.file = (File) mockFile0;
      String string3 = explodedArchive_FileEntry0.getName();
      boolean boolean1 = mockFile0.renameTo(explodedArchive_FileEntry0.file);
      boolean boolean2 = explodedArchive_FileEntry0.isDirectory();
      ExplodedArchive explodedArchive0 = new ExplodedArchive(mockFile0, boolean2);
      Manifest manifest0 = explodedArchive0.getManifest();
      File file0 = explodedArchive0.getManifestFile(explodedArchive_FileEntry0.file);
      Manifest manifest1 = explodedArchive0.getManifest();
      Archive archive0 = explodedArchive0.getNestedArchive(explodedArchive_FileEntry0);
      Iterator<Archive.Entry> iterator0 = ((ExplodedArchive) archive0).iterator();
      Manifest manifest2 = explodedArchive0.getManifest();
      Iterator<Archive.Entry> iterator1 = explodedArchive0.iterator();
  }

  @Test(timeout = 11000)
  public void test02()  throws Throwable  {
      String string0 = "";
      MockFile mockFile0 = new MockFile(string0);
      ExplodedArchive.FileEntry explodedArchive_FileEntry0 = new ExplodedArchive.FileEntry(string0, mockFile0);
      String string1 = "PVl%oT+Hg-dqt^#0zVA";
      byte byte0 = (byte)94;
      byte byte1 = (byte) (-41);
      String string2 = "org.springframework.boot.loader.archive.JarFileArchive";
      explodedArchive_FileEntry0.file = (File) mockFile0;
      String string3 = explodedArchive_FileEntry0.getName();
      boolean boolean0 = explodedArchive_FileEntry0.isDirectory();
      ExplodedArchive explodedArchive0 = new ExplodedArchive(mockFile0, boolean0);
      File file0 = explodedArchive0.getManifestFile(explodedArchive_FileEntry0.file);
      Manifest manifest0 = explodedArchive0.getManifest();
      Manifest manifest1 = explodedArchive0.getManifest();
      Archive archive0 = explodedArchive0.getNestedArchive(explodedArchive_FileEntry0);
      Iterator<Archive.Entry> iterator0 = explodedArchive0.iterator();
      ExplodedArchive.FileEntryIterator explodedArchive_FileEntryIterator0 = new ExplodedArchive.FileEntryIterator();
      // Undeclared exception!
      try { 
        explodedArchive_FileEntryIterator0.remove();
      } catch(UnsupportedOperationException e) {
         //
         // remove
         //
         verifyException("org.springframework.boot.loader.archive.ExplodedArchive$FileEntryIterator", e);
      }
  }

  @Test(timeout = 11000)
  public void test03()  throws Throwable  {
      String string0 = "";
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/server");
      String string1 = "\"_X:-}?GAr\\A1^>k<0y#.Lo$";
      MockFile mockFile0 = new MockFile(string0, string0);
      boolean boolean0 = false;
      ExplodedArchive.FileEntryIterator explodedArchive_FileEntryIterator0 = new ExplodedArchive.FileEntryIterator(mockFile0, boolean0);
      File file0 = explodedArchive_FileEntryIterator0.poll();
      boolean boolean1 = FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      String string2 = "a4U#uZ7EQ";
      Archive.Entry archive_Entry0 = explodedArchive_FileEntryIterator0.next();
      File file1 = explodedArchive_FileEntryIterator0.poll();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      String string3 = "\"0~jbS}lLF65--#@%*M";
      mockFile0.deleteOnExit();
      String string4 = "org.springframework.boot.loader.jar.JarFile$JarFileType";
      boolean boolean2 = archive_Entry0.isDirectory();
      ExplodedArchive.FileEntryIterator.EntryComparator explodedArchive_FileEntryIterator_EntryComparator0 = new ExplodedArchive.FileEntryIterator.EntryComparator();
  }

  @Test(timeout = 11000)
  public void test04()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("q)`!<;q\\z]+A");
      byte byte0 = (byte) (-2);
      byte byte1 = (byte)13;
      byte byte2 = (byte)63;
      byte byte3 = (byte) (-112);
      byte byte4 = (byte)2;
      byte byte5 = (byte)1;
      byte byte6 = (byte)2;
      boolean boolean0 = FileSystemHandling.createFolder(evoSuiteFile0);
      String string0 = "q)`!<;q\\z]+A";
      boolean boolean1 = true;
      String string1 = "";
      MockFile mockFile0 = new MockFile(string1);
      boolean boolean2 = mockFile0.mkdir();
      ExplodedArchive explodedArchive0 = new ExplodedArchive(mockFile0);
      Locale locale0 = Locale.TAIWAN;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      ExplodedArchive.SKIPPED_NAMES = set0;
      Archive.EntryFilter archive_EntryFilter0 = mock(Archive.EntryFilter.class, new ViolatedAssumptionAnswer());
      doReturn(boolean0).when(archive_EntryFilter0).matches(any(org.springframework.boot.loader.archive.Archive.Entry.class));
      List<Archive> list0 = explodedArchive0.getNestedArchives(archive_EntryFilter0);
      ExplodedArchive.FileEntryIterator explodedArchive_FileEntryIterator0 = new ExplodedArchive.FileEntryIterator();
      // Undeclared exception!
      try { 
        explodedArchive_FileEntryIterator0.next();
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springframework.boot.loader.archive.ExplodedArchive$FileEntryIterator", e);
      }
  }

  @Test(timeout = 11000)
  public void test05()  throws Throwable  {
      String string0 = "q)`!<;q\\z]+A";
      MockFile mockFile0 = new MockFile(string0);
      boolean boolean0 = true;
      ExplodedArchive explodedArchive0 = null;
      try {
        explodedArchive0 = new ExplodedArchive(mockFile0, boolean0);
      } catch(IllegalArgumentException e) {
         //
         // Invalid source folder q)`!<;q\\z]+A
         //
         verifyException("org.springframework.boot.loader.archive.ExplodedArchive", e);
      }
  }

  @Test(timeout = 11000)
  public void test06()  throws Throwable  {
      String string0 = "org.springframework.boot.loader.jar.Handler";
      File file0 = MockFile.createTempFile(string0, string0);
      ExplodedArchive explodedArchive0 = null;
      try {
        explodedArchive0 = new ExplodedArchive(file0);
      } catch(IllegalArgumentException e) {
         //
         // Invalid source folder /tmp/org.springframework.boot.loader.jar.Handler0org.springframework.boot.loader.jar.Handler
         //
         verifyException("org.springframework.boot.loader.archive.ExplodedArchive", e);
      }
  }

  @Test(timeout = 11000)
  public void test07()  throws Throwable  {
      String string0 = "F";
      MockFile mockFile0 = new MockFile(string0, string0);
      MockFile mockFile1 = new MockFile(string0, string0);
      String string1 = mockFile1.getAbsolutePath();
      ExplodedArchive.FileEntry explodedArchive_FileEntry0 = new ExplodedArchive.FileEntry(string0, mockFile1);
      String string2 = "org.springframework.boot.loader.PropertiesLauncher$ArchiveEntryFilter";
      explodedArchive_FileEntry0.name = string2;
      File file0 = explodedArchive_FileEntry0.getFile();
      ExplodedArchive explodedArchive0 = new ExplodedArchive();
      File file1 = explodedArchive0.getManifestFile(mockFile0);
      String string3 = explodedArchive0.toString();
      boolean boolean0 = explodedArchive_FileEntry0.isDirectory();
      // Undeclared exception!
      try { 
        explodedArchive0.getNestedArchive(explodedArchive_FileEntry0);
      } catch(IllegalArgumentException e) {
         //
         // File must exist
         //
         verifyException("org.springframework.boot.loader.data.RandomAccessDataFile", e);
      }
  }

  @Test(timeout = 11000)
  public void test08()  throws Throwable  {
      String string0 = "org.springframeork.boot.loader.PropertiesLauncher$ArchiveEntryFilter";
      MockFile mockFile0 = new MockFile(string0);
      boolean boolean0 = false;
      ExplodedArchive.FileEntryIterator explodedArchive_FileEntryIterator0 = new ExplodedArchive.FileEntryIterator(mockFile0, boolean0);
  }

  @Test(timeout = 11000)
  public void test09()  throws Throwable  {
      ExplodedArchive explodedArchive0 = new ExplodedArchive();
      // Undeclared exception!
      try { 
        explodedArchive0.iterator();
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springframework.boot.loader.archive.ExplodedArchive$FileEntryIterator", e);
      }
  }

  @Test(timeout = 11000)
  public void test10()  throws Throwable  {
      String string0 = "d\\O7?~2M";
      File file0 = MockFile.createTempFile(string0, string0);
      boolean boolean0 = true;
      ExplodedArchive.FileEntryIterator explodedArchive_FileEntryIterator0 = new ExplodedArchive.FileEntryIterator(file0, boolean0);
      ExplodedArchive explodedArchive0 = new ExplodedArchive();
  }

  @Test(timeout = 11000)
  public void test11()  throws Throwable  {
      ExplodedArchive.FileEntryIterator explodedArchive_FileEntryIterator0 = new ExplodedArchive.FileEntryIterator();
      // Undeclared exception!
      try { 
        explodedArchive_FileEntryIterator0.remove();
      } catch(UnsupportedOperationException e) {
         //
         // remove
         //
         verifyException("org.springframework.boot.loader.archive.ExplodedArchive$FileEntryIterator", e);
      }
  }

  @Test(timeout = 11000)
  public void test12()  throws Throwable  {
      String string0 = "Lo0|_X`A`Q\\nYZUU--";
      String string1 = "";
      File file0 = MockFile.createTempFile(string0, string1);
      boolean boolean0 = true;
      ExplodedArchive explodedArchive0 = null;
      try {
        explodedArchive0 = new ExplodedArchive(file0, boolean0);
      } catch(IllegalArgumentException e) {
         //
         // Invalid source folder /tmp/Lo0|_X`A`Q\\nYZUU--0
         //
         verifyException("org.springframework.boot.loader.archive.ExplodedArchive", e);
      }
  }

  @Test(timeout = 11000)
  public void test13()  throws Throwable  {
      ExplodedArchive.FileEntryIterator.EntryComparator explodedArchive_FileEntryIterator_EntryComparator0 = new ExplodedArchive.FileEntryIterator.EntryComparator();
      String string0 = "org.springframework.boot.loader.PropertiesLauncher$ArchiveEntryFilter";
      MockFile mockFile0 = new MockFile(string0);
      boolean boolean0 = false;
      ExplodedArchive.FileEntryIterator explodedArchive_FileEntryIterator0 = new ExplodedArchive.FileEntryIterator(mockFile0, boolean0);
      File file0 = explodedArchive_FileEntryIterator0.poll();
  }

  @Test(timeout = 11000)
  public void test14()  throws Throwable  {
      ExplodedArchive.FileEntry explodedArchive_FileEntry0 = new ExplodedArchive.FileEntry();
      // Undeclared exception!
      try { 
        explodedArchive_FileEntry0.isDirectory();
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springframework.boot.loader.archive.ExplodedArchive$FileEntry", e);
      }
  }

  @Test(timeout = 11000)
  public void test15()  throws Throwable  {
      ExplodedArchive explodedArchive0 = new ExplodedArchive();
      Archive.EntryFilter archive_EntryFilter0 = null;
      // Undeclared exception!
      try { 
        explodedArchive0.getNestedArchives(archive_EntryFilter0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springframework.boot.loader.archive.ExplodedArchive$FileEntryIterator", e);
      }
  }

  @Test(timeout = 11000)
  public void test16()  throws Throwable  {
      String string0 = "1l%vr6+=\"q6!F1@q";
      MockFile mockFile0 = new MockFile(string0);
      File file0 = MockFile.createTempFile(string0, string0, (File) mockFile0);
      ExplodedArchive.FileEntry explodedArchive_FileEntry0 = new ExplodedArchive.FileEntry(string0, file0);
  }

  @Test(timeout = 11000)
  public void test17()  throws Throwable  {
      ExplodedArchive.FileEntryIterator.EntryComparator explodedArchive_FileEntryIterator_EntryComparator0 = new ExplodedArchive.FileEntryIterator.EntryComparator();
      ExplodedArchive explodedArchive0 = new ExplodedArchive();
      String string0 = "";
      MockFile mockFile0 = new MockFile(string0);
      ExplodedArchive.FileEntry explodedArchive_FileEntry0 = new ExplodedArchive.FileEntry(string0, mockFile0);
      Archive archive0 = explodedArchive0.getNestedArchive(explodedArchive_FileEntry0);
  }

  @Test(timeout = 11000)
  public void test18()  throws Throwable  {
      String string0 = "=?)EkLRaDq{Gk6nM";
      MockFile mockFile0 = new MockFile(string0, string0);
      boolean boolean0 = mockFile0.createNewFile();
      boolean boolean1 = false;
      ExplodedArchive.FileEntryIterator explodedArchive_FileEntryIterator0 = new ExplodedArchive.FileEntryIterator(mockFile0, boolean1);
      // Undeclared exception!
      try { 
        explodedArchive_FileEntryIterator0.next();
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springframework.boot.loader.archive.ExplodedArchive$FileEntryIterator", e);
      }
  }

  @Test(timeout = 11000)
  public void test19()  throws Throwable  {
      String string0 = "^Qt:_ u#6gQ5";
      MockFile mockFile0 = new MockFile(string0);
      boolean boolean0 = mockFile0.setReadOnly();
      ExplodedArchive.FileEntry explodedArchive_FileEntry0 = new ExplodedArchive.FileEntry(string0, mockFile0);
      String string1 = "=jp!L*mppQ@/<n";
      explodedArchive_FileEntry0.name = string1;
      MockFile mockFile1 = new MockFile(explodedArchive_FileEntry0.name);
      explodedArchive_FileEntry0.file = (File) mockFile0;
      explodedArchive_FileEntry0.name = string0;
      explodedArchive_FileEntry0.file = (File) mockFile1;
      explodedArchive_FileEntry0.file = (File) mockFile0;
      boolean boolean1 = explodedArchive_FileEntry0.isDirectory();
      ExplodedArchive explodedArchive0 = new ExplodedArchive();
      URI uRI0 = null;
      Archive.EntryFilter archive_EntryFilter0 = mock(Archive.EntryFilter.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        explodedArchive0.getNestedArchives(archive_EntryFilter0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springframework.boot.loader.archive.ExplodedArchive$FileEntryIterator", e);
      }
  }

  @Test(timeout = 11000)
  public void test20()  throws Throwable  {
      File file0 = null;
      ExplodedArchive explodedArchive0 = null;
      try {
        explodedArchive0 = new ExplodedArchive(file0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springframework.boot.loader.archive.ExplodedArchive", e);
      }
  }

  @Test(timeout = 11000)
  public void test21()  throws Throwable  {
      String string0 = "Y3s+MOHuj_x/N4c";
      MockFile mockFile0 = new MockFile(string0);
      boolean boolean0 = mockFile0.mkdirs();
      ExplodedArchive explodedArchive0 = new ExplodedArchive(mockFile0);
      explodedArchive0.recursive = boolean0;
      ExplodedArchive.FileEntryIterator explodedArchive_FileEntryIterator0 = new ExplodedArchive.FileEntryIterator();
      Iterator<File> iterator0 = explodedArchive_FileEntryIterator0.listFiles(explodedArchive0.root);
      File file0 = explodedArchive_FileEntryIterator0.poll();
      boolean boolean1 = explodedArchive_FileEntryIterator0.hasNext();
      String string1 = "qDe-VW=xv\\W;:nR)]";
      ExplodedArchive.FileEntry explodedArchive_FileEntry0 = new ExplodedArchive.FileEntry(string1, explodedArchive0.manifestFile);
      File file1 = explodedArchive_FileEntry0.getFile();
  }

  @Test(timeout = 11000)
  public void test22()  throws Throwable  {
      File file0 = null;
      boolean boolean0 = false;
      ExplodedArchive explodedArchive0 = null;
      try {
        explodedArchive0 = new ExplodedArchive(file0, boolean0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springframework.boot.loader.archive.ExplodedArchive", e);
      }
  }

  @Test(timeout = 11000)
  public void test23()  throws Throwable  {
      ExplodedArchive.FileEntryIterator.EntryComparator explodedArchive_FileEntryIterator_EntryComparator0 = new ExplodedArchive.FileEntryIterator.EntryComparator();
      File file0 = null;
      // Undeclared exception!
      try { 
        explodedArchive_FileEntryIterator_EntryComparator0.compare(file0, file0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springframework.boot.loader.archive.ExplodedArchive$FileEntryIterator$EntryComparator", e);
      }
  }

  @Test(timeout = 11000)
  public void test24()  throws Throwable  {
      String string0 = "";
      String string1 = "";
      MockFile mockFile0 = new MockFile(string0, string1);
      boolean boolean0 = false;
      boolean boolean1 = true;
      boolean boolean2 = true;
      boolean boolean3 = mockFile0.setReadable(boolean1, boolean2);
      boolean boolean4 = true;
      boolean boolean5 = mockFile0.setExecutable(boolean4, boolean0);
      ExplodedArchive.FileEntryIterator explodedArchive_FileEntryIterator0 = new ExplodedArchive.FileEntryIterator(mockFile0, boolean0);
      Iterator<File> iterator0 = explodedArchive_FileEntryIterator0.listFiles(mockFile0);
      ExplodedArchive explodedArchive0 = new ExplodedArchive();
      // Undeclared exception!
      try { 
        explodedArchive0.getManifest();
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springframework.boot.loader.archive.ExplodedArchive", e);
      }
  }

  @Test(timeout = 11000)
  public void test25()  throws Throwable  {
      String string0 = "";
      MockFile mockFile0 = new MockFile(string0);
      URI uRI0 = mockFile0.toURI();
      boolean boolean0 = true;
      ExplodedArchive explodedArchive0 = new ExplodedArchive(mockFile0, boolean0);
      ExplodedArchive.FileEntry explodedArchive_FileEntry0 = new ExplodedArchive.FileEntry(string0, mockFile0);
      String string1 = explodedArchive_FileEntry0.getName();
  }

  @Test(timeout = 11000)
  public void test26()  throws Throwable  {
      ExplodedArchive explodedArchive0 = new ExplodedArchive();
      String string0 = explodedArchive0.toString();
  }

  @Test(timeout = 11000)
  public void test27()  throws Throwable  {
      ExplodedArchive explodedArchive0 = new ExplodedArchive();
      // Undeclared exception!
      try { 
        explodedArchive0.getUrl();
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springframework.boot.loader.archive.ExplodedArchive", e);
      }
  }

  @Test(timeout = 11000)
  public void test28()  throws Throwable  {
      ExplodedArchive explodedArchive0 = new ExplodedArchive();
      // Undeclared exception!
      try { 
        explodedArchive0.getManifest();
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springframework.boot.loader.archive.ExplodedArchive", e);
      }
  }

  @Test(timeout = 11000)
  public void test29()  throws Throwable  {
      ExplodedArchive explodedArchive0 = new ExplodedArchive();
      String string0 = "9q+~\\N";
      String string1 = ";67VIRJU";
      File file0 = MockFile.createTempFile(string0, string1);
      explodedArchive0.root = file0;
      String string2 = explodedArchive0.toString();
  }

  @Test(timeout = 11000)
  public void test30()  throws Throwable  {
      String string0 = "q%^p";
      MockFile mockFile0 = new MockFile(string0);
      boolean boolean0 = mockFile0.mkdirs();
      boolean boolean1 = false;
      ExplodedArchive explodedArchive0 = new ExplodedArchive(mockFile0, boolean1);
      Spliterator<Archive.Entry> spliterator0 = explodedArchive0.spliterator();
      URL uRL0 = explodedArchive0.getUrl();
      boolean boolean2 = false;
      mockFile0.deleteOnExit();
      Manifest manifest0 = new Manifest();
      explodedArchive0.manifest = manifest0;
      Path path0 = mockFile0.toPath();
      ExplodedArchive.FileEntry explodedArchive_FileEntry0 = new ExplodedArchive.FileEntry();
      File file0 = explodedArchive_FileEntry0.getFile();
      // Undeclared exception!
      try { 
        explodedArchive_FileEntry0.isDirectory();
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springframework.boot.loader.archive.ExplodedArchive$FileEntry", e);
      }
  }

  @Test(timeout = 11000)
  public void test31()  throws Throwable  {
      File file0 = null;
      String string0 = "org.springframework.boot.loader";
      MockFile mockFile0 = new MockFile(file0, string0);
      boolean boolean0 = false;
      boolean boolean1 = false;
      boolean boolean2 = mockFile0.setReadable(boolean0, boolean1);
      ExplodedArchive explodedArchive0 = null;
      try {
        explodedArchive0 = new ExplodedArchive(mockFile0);
      } catch(IllegalArgumentException e) {
         //
         // Invalid source folder org.springframework.boot.loader
         //
         verifyException("org.springframework.boot.loader.archive.ExplodedArchive", e);
      }
  }

  @Test(timeout = 11000)
  public void test32()  throws Throwable  {
      String string0 = "";
      MockFile mockFile0 = new MockFile(string0);
      ExplodedArchive.FileEntry explodedArchive_FileEntry0 = new ExplodedArchive.FileEntry(string0, mockFile0);
      String string1 = "PVl%oT+Hg-dqt^#0zVA";
      String string2 = "org.springframework.boot.loader.archive.JarFileArchive";
      explodedArchive_FileEntry0.name = string2;
      explodedArchive_FileEntry0.name = string1;
      explodedArchive_FileEntry0.file = (File) mockFile0;
      String string3 = explodedArchive_FileEntry0.getName();
      boolean boolean0 = mockFile0.renameTo(explodedArchive_FileEntry0.file);
      boolean boolean1 = explodedArchive_FileEntry0.isDirectory();
      ExplodedArchive explodedArchive0 = new ExplodedArchive(mockFile0, boolean1);
      Manifest manifest0 = explodedArchive0.getManifest();
      File file0 = explodedArchive0.getManifestFile(explodedArchive_FileEntry0.file);
      Manifest manifest1 = explodedArchive0.getManifest();
      Manifest manifest2 = explodedArchive0.getManifest();
      Archive archive0 = explodedArchive0.getNestedArchive(explodedArchive_FileEntry0);
      Iterator<Archive.Entry> iterator0 = explodedArchive0.iterator();
      Manifest manifest3 = explodedArchive0.getManifest();
      Iterator<Archive.Entry> iterator1 = explodedArchive0.iterator();
      ExplodedArchive.FileEntryIterator explodedArchive_FileEntryIterator0 = new ExplodedArchive.FileEntryIterator();
      // Undeclared exception!
      try { 
        explodedArchive_FileEntryIterator0.remove();
      } catch(UnsupportedOperationException e) {
         //
         // remove
         //
         verifyException("org.springframework.boot.loader.archive.ExplodedArchive$FileEntryIterator", e);
      }
  }

  @Test(timeout = 11000)
  public void test33()  throws Throwable  {
      ExplodedArchive explodedArchive0 = new ExplodedArchive();
      String string0 = "-Cn%cuK*{";
      String string1 = "";
      MockFile mockFile0 = new MockFile(string0, string1);
      String string2 = "Ne*f|*xj=Q&[iFyL";
      File file0 = MockFile.createTempFile(string2, string0);
      explodedArchive0.root = (File) mockFile0;
      String string3 = explodedArchive0.toString();
      URL uRL0 = explodedArchive0.getUrl();
      Archive.EntryFilter archive_EntryFilter0 = mock(Archive.EntryFilter.class, new ViolatedAssumptionAnswer());
      List<Archive> list0 = explodedArchive0.getNestedArchives(archive_EntryFilter0);
      ExplodedArchive.FileEntry explodedArchive_FileEntry0 = new ExplodedArchive.FileEntry(string1, explodedArchive0.root);
      // Undeclared exception!
      try { 
        explodedArchive0.getNestedArchive(explodedArchive_FileEntry0);
      } catch(IllegalArgumentException e) {
         //
         // File must exist
         //
         verifyException("org.springframework.boot.loader.data.RandomAccessDataFile", e);
      }
  }

  @Test(timeout = 11000)
  public void test34()  throws Throwable  {
      ExplodedArchive.FileEntryIterator explodedArchive_FileEntryIterator0 = new ExplodedArchive.FileEntryIterator();
      String string0 = "File must exist";
      MockFile mockFile0 = new MockFile(explodedArchive_FileEntryIterator0.current, string0);
      boolean boolean0 = mockFile0.mkdirs();
      boolean boolean1 = mockFile0.setWritable(explodedArchive_FileEntryIterator0.recursive);
      Iterator<File> iterator0 = explodedArchive_FileEntryIterator0.listFiles(mockFile0);
      ExplodedArchive.FileEntry explodedArchive_FileEntry0 = new ExplodedArchive.FileEntry();
      String string1 = "";
      explodedArchive_FileEntry0.name = string1;
      String string2 = explodedArchive_FileEntry0.getName();
      ExplodedArchive explodedArchive0 = null;
      try {
        explodedArchive0 = new ExplodedArchive(explodedArchive_FileEntryIterator0.current);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springframework.boot.loader.archive.ExplodedArchive", e);
      }
  }

  @Test(timeout = 11000)
  public void test35()  throws Throwable  {
      ExplodedArchive explodedArchive0 = new ExplodedArchive();
      Archive.EntryFilter archive_EntryFilter0 = mock(Archive.EntryFilter.class, new ViolatedAssumptionAnswer());
      String string0 = "@0P~Qn;";
      ExplodedArchive.FileEntry explodedArchive_FileEntry0 = new ExplodedArchive.FileEntry(string0, explodedArchive0.manifestFile);
      // Undeclared exception!
      try { 
        explodedArchive0.getNestedArchive(explodedArchive_FileEntry0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springframework.boot.loader.archive.ExplodedArchive", e);
      }
  }

  @Test(timeout = 11000)
  public void test36()  throws Throwable  {
      String string0 = "v9~\"HnLp$).t o]t1";
      MockFile mockFile0 = new MockFile(string0);
      ExplodedArchive.FileEntry explodedArchive_FileEntry0 = new ExplodedArchive.FileEntry(string0, mockFile0);
      explodedArchive_FileEntry0.name = string0;
      explodedArchive_FileEntry0.file = (File) mockFile0;
      String string1 = "";
      explodedArchive_FileEntry0.name = string1;
      String string2 = explodedArchive_FileEntry0.getName();
      ExplodedArchive explodedArchive0 = new ExplodedArchive();
      // Undeclared exception!
      try { 
        explodedArchive0.getNestedArchive(explodedArchive_FileEntry0);
      } catch(IllegalArgumentException e) {
         //
         // File must exist
         //
         verifyException("org.springframework.boot.loader.data.RandomAccessDataFile", e);
      }
  }

  @Test(timeout = 11000)
  public void test37()  throws Throwable  {
      ExplodedArchive explodedArchive0 = new ExplodedArchive();
      String string0 = "LX0~Zmk]WyORty0";
      MockFile mockFile0 = new MockFile(string0);
      File file0 = explodedArchive0.getManifestFile(mockFile0);
  }

  @Test(timeout = 11000)
  public void test38()  throws Throwable  {
      ExplodedArchive.FileEntryIterator explodedArchive_FileEntryIterator0 = new ExplodedArchive.FileEntryIterator();
      String string0 = "5N";
      URI uRI0 = MockURI.URI(string0);
      URI uRI1 = MockURI.relativize(uRI0, uRI0);
      URI uRI2 = MockURI.normalize(uRI1);
      MockFile mockFile0 = new MockFile(string0, string0);
      explodedArchive_FileEntryIterator0.current = (File) mockFile0;
      boolean boolean0 = true;
      explodedArchive_FileEntryIterator0.recursive = boolean0;
      boolean boolean1 = explodedArchive_FileEntryIterator0.hasNext();
      // Undeclared exception!
      try { 
        explodedArchive_FileEntryIterator0.next();
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springframework.boot.loader.archive.ExplodedArchive$FileEntryIterator", e);
      }
  }

  @Test(timeout = 11000)
  public void test39()  throws Throwable  {
      String string0 = "pNfu%(QAX9O ";
      String string1 = "vIoj s/#b(+";
      File file0 = MockFile.createTempFile(string0, string1);
      ExplodedArchive.FileEntry explodedArchive_FileEntry0 = new ExplodedArchive.FileEntry(string0, file0);
      File file1 = explodedArchive_FileEntry0.getFile();
      ExplodedArchive.FileEntryIterator explodedArchive_FileEntryIterator0 = new ExplodedArchive.FileEntryIterator();
      ExplodedArchive explodedArchive0 = new ExplodedArchive();
      try { 
        explodedArchive0.getNestedArchive(explodedArchive_FileEntry0);
      } catch(FileNotFoundException e) {
         //
         // /tmp/pNfu%(QAX9O 0vIoj s/#b(+ (Arquivo ou diret\u00F3rio n\u00E3o encontrado)
         //
         verifyException("java.util.zip.ZipFile", e);
      }
  }

  @Test(timeout = 11000)
  public void test40()  throws Throwable  {
      String string0 = "";
      String string1 = "rX,i8";
      String string2 = "*T'&j()r";
      URI uRI0 = null;
      MockFile mockFile0 = new MockFile(string2);
      File file0 = MockFile.createTempFile(string1, string2, (File) mockFile0);
      ExplodedArchive.FileEntry explodedArchive_FileEntry0 = new ExplodedArchive.FileEntry(string0, file0);
      String string3 = explodedArchive_FileEntry0.getName();
      boolean boolean0 = true;
      ExplodedArchive.FileEntryIterator explodedArchive_FileEntryIterator0 = new ExplodedArchive.FileEntryIterator(mockFile0, boolean0);
      Archive.Entry archive_Entry0 = explodedArchive_FileEntryIterator0.next();
      String string4 = "$jV<il<[-(p2DRp:";
      ExplodedArchive.FileEntry explodedArchive_FileEntry1 = new ExplodedArchive.FileEntry(string4, explodedArchive_FileEntry0.file);
      ExplodedArchive.FileEntry explodedArchive_FileEntry2 = new ExplodedArchive.FileEntry();
      ExplodedArchive explodedArchive0 = new ExplodedArchive();
      try { 
        explodedArchive0.getNestedArchive(archive_Entry0);
      } catch(FileNotFoundException e) {
         //
         // /server/study-execution/new-nimrod/nimrod-hunoroutput-test-dest/spring-boot/af20dc6cc45c032573413c401f9f73aa75371744/evosuite_9/*T'&j()r/rX,i80*T'&j()r (Arquivo ou diret\u00F3rio n\u00E3o encontrado)
         //
         verifyException("java.util.zip.ZipFile", e);
      }
  }

  @Test(timeout = 11000)
  public void test41()  throws Throwable  {
      String string0 = "";
      MockFile mockFile0 = new MockFile(string0);
      ExplodedArchive.FileEntry explodedArchive_FileEntry0 = new ExplodedArchive.FileEntry(string0, mockFile0);
      String string1 = "PVl%oT+Hg-dqt^#0zVA";
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("META-INF/MANIFEST.MF");
      byte[] byteArray0 = new byte[5];
      byte byte0 = (byte)9;
      byteArray0[0] = byte0;
      byte byte1 = (byte) (-66);
      byteArray0[1] = byte1;
      byte byte2 = (byte) (-82);
      byteArray0[2] = byte2;
      byte byte3 = (byte) (-41);
      byteArray0[3] = byte3;
      byte byte4 = (byte)50;
      byteArray0[4] = byte4;
      boolean boolean0 = FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      String string2 = "org.springframework.boot.loader.archive.JarFileArchive";
      explodedArchive_FileEntry0.name = string2;
      explodedArchive_FileEntry0.name = string1;
      explodedArchive_FileEntry0.file = (File) mockFile0;
      String string3 = explodedArchive_FileEntry0.getName();
      boolean boolean1 = mockFile0.renameTo(explodedArchive_FileEntry0.file);
      boolean boolean2 = explodedArchive_FileEntry0.isDirectory();
      ExplodedArchive explodedArchive0 = new ExplodedArchive(mockFile0, boolean2);
      Manifest manifest0 = explodedArchive0.getManifest();
      File file0 = explodedArchive0.getManifestFile(explodedArchive_FileEntry0.file);
      Manifest manifest1 = explodedArchive0.getManifest();
      Manifest manifest2 = explodedArchive0.getManifest();
      Archive archive0 = explodedArchive0.getNestedArchive(explodedArchive_FileEntry0);
      Iterator<Archive.Entry> iterator0 = explodedArchive0.iterator();
      Manifest manifest3 = explodedArchive0.getManifest();
      Iterator<Archive.Entry> iterator1 = explodedArchive0.iterator();
      ExplodedArchive.FileEntryIterator explodedArchive_FileEntryIterator0 = new ExplodedArchive.FileEntryIterator();
      // Undeclared exception!
      try { 
        explodedArchive_FileEntryIterator0.remove();
      } catch(UnsupportedOperationException e) {
         //
         // remove
         //
         verifyException("org.springframework.boot.loader.archive.ExplodedArchive$FileEntryIterator", e);
      }
  }

  @Test(timeout = 11000)
  public void test42()  throws Throwable  {
      String string0 = "";
      MockFile mockFile0 = new MockFile(string0, string0);
      boolean boolean0 = true;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ExplodedArchive.FileEntryIterator explodedArchive_FileEntryIterator0 = new ExplodedArchive.FileEntryIterator(mockFile0, boolean0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/");
      Archive.Entry archive_Entry0 = explodedArchive_FileEntryIterator0.next();
      boolean boolean1 = FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      String string1 = "a4U#uZ7EQ";
      // Undeclared exception!
      try { 
        MockFile.createTempFile(string0, string1, explodedArchive_FileEntryIterator0.current);
      } catch(IllegalArgumentException e) {
         //
         // Prefix string too short
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 11000)
  public void test43()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("q)`!<;q\\z]+A");
      byte[] byteArray0 = new byte[8];
      byte byte0 = (byte)0;
      byteArray0[0] = byte0;
      byte byte1 = (byte)42;
      byteArray0[1] = byte1;
      byte byte2 = (byte)13;
      byteArray0[2] = byte2;
      byte byte3 = (byte)63;
      byteArray0[3] = byte3;
      byte byte4 = (byte) (-112);
      byteArray0[4] = byte4;
      byte byte5 = (byte)2;
      byteArray0[5] = byte5;
      byte byte6 = (byte)1;
      byteArray0[6] = byte6;
      byte byte7 = (byte)2;
      byteArray0[7] = byte7;
      boolean boolean0 = FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      String string0 = "q)`!<;q\\z]+A";
      boolean boolean1 = true;
      String string1 = "";
      MockFile mockFile0 = new MockFile(string1);
      ExplodedArchive explodedArchive0 = new ExplodedArchive(mockFile0);
      Archive.EntryFilter archive_EntryFilter0 = mock(Archive.EntryFilter.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(archive_EntryFilter0).matches(any(org.springframework.boot.loader.archive.Archive.Entry.class));
      List<Archive> list0 = explodedArchive0.getNestedArchives(archive_EntryFilter0);
  }

  @Test(timeout = 11000)
  public void test44()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("q)`!<;q\\z]+A");
      byte[] byteArray0 = new byte[8];
      byte byte0 = (byte)0;
      byteArray0[0] = byte0;
      byte byte1 = (byte)42;
      byteArray0[1] = byte1;
      byte byte2 = (byte)13;
      byteArray0[2] = byte2;
      byte byte3 = (byte)63;
      byteArray0[3] = byte3;
      byte byte4 = (byte) (-112);
      byteArray0[4] = byte4;
      byte byte5 = (byte)2;
      byteArray0[5] = byte5;
      byte byte6 = (byte)1;
      byteArray0[6] = byte6;
      byte byte7 = (byte)2;
      byteArray0[7] = byte7;
      boolean boolean0 = FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      String string0 = "q)`!<;q\\z]+A";
      boolean boolean1 = true;
      String string1 = "";
      MockFile mockFile0 = new MockFile(string1);
      ExplodedArchive explodedArchive0 = new ExplodedArchive(mockFile0);
      Archive.EntryFilter archive_EntryFilter0 = mock(Archive.EntryFilter.class, new ViolatedAssumptionAnswer());
      doReturn(boolean1).when(archive_EntryFilter0).matches(any(org.springframework.boot.loader.archive.Archive.Entry.class));
      try { 
        explodedArchive0.getNestedArchives(archive_EntryFilter0);
      } catch(FileNotFoundException e) {
         //
         // /server/study-execution/new-nimrod/nimrod-hunoroutput-test-dest/spring-boot/af20dc6cc45c032573413c401f9f73aa75371744/evosuite_9/q)`!<;q\\z]+A (Arquivo ou diret\u00F3rio n\u00E3o encontrado)
         //
         verifyException("java.util.zip.ZipFile", e);
      }
  }

  @Test(timeout = 11000)
  public void test45()  throws Throwable  {
      String string0 = "";
      MockFile mockFile0 = new MockFile(string0, string0);
      boolean boolean0 = false;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ExplodedArchive.FileEntryIterator explodedArchive_FileEntryIterator0 = new ExplodedArchive.FileEntryIterator(mockFile0, boolean0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/");
      Archive.Entry archive_Entry0 = explodedArchive_FileEntryIterator0.next();
      boolean boolean1 = FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      String string1 = "a4U#uZ7EQ";
      // Undeclared exception!
      try { 
        MockFile.createTempFile(string0, string1, explodedArchive_FileEntryIterator0.current);
      } catch(IllegalArgumentException e) {
         //
         // Prefix string too short
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 11000)
  public void test46()  throws Throwable  {
      String string0 = "";
      MockFile mockFile0 = new MockFile(string0);
      ExplodedArchive.FileEntry explodedArchive_FileEntry0 = new ExplodedArchive.FileEntry(string0, mockFile0);
      String string1 = "PVl%oT+Hg-dqt^#0zVA";
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("META-INF/MANIFEST.MF");
      byte[] byteArray0 = new byte[5];
      byte byte0 = (byte)9;
      byteArray0[0] = byte0;
      byte byte1 = (byte) (-66);
      byteArray0[1] = byte1;
      byte byte2 = (byte) (-82);
      byteArray0[2] = byte2;
      byte byte3 = (byte) (-41);
      byteArray0[3] = byte3;
      byte byte4 = (byte)13;
      byteArray0[4] = byte4;
      boolean boolean0 = FileSystemHandling.createFolder(evoSuiteFile0);
      String string2 = "org.springframework.boot.loader.archive.JarFileArchive";
      explodedArchive_FileEntry0.name = string2;
      explodedArchive_FileEntry0.name = string1;
      explodedArchive_FileEntry0.file = (File) mockFile0;
      String string3 = explodedArchive_FileEntry0.getName();
      boolean boolean1 = mockFile0.renameTo(explodedArchive_FileEntry0.file);
      boolean boolean2 = explodedArchive_FileEntry0.isDirectory();
      ExplodedArchive explodedArchive0 = new ExplodedArchive(mockFile0, boolean2);
      try { 
        explodedArchive0.getManifest();
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 11000)
  public void test47()  throws Throwable  {
      String string0 = "";
      MockFile mockFile0 = new MockFile(string0);
      ExplodedArchive.FileEntry explodedArchive_FileEntry0 = new ExplodedArchive.FileEntry(string0, mockFile0);
      String string1 = "PVl%oT+Hg-dqt^#0zVA";
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("META-INF/MANIFEST.MF");
      byte[] byteArray0 = new byte[5];
      byte byte0 = (byte)9;
      byteArray0[0] = byte0;
      byte byte1 = (byte) (-66);
      byteArray0[1] = byte1;
      byte byte2 = (byte) (-82);
      byteArray0[2] = byte2;
      byte byte3 = (byte) (-41);
      byteArray0[3] = byte3;
      byte byte4 = (byte)50;
      byteArray0[4] = byte4;
      boolean boolean0 = FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      String string2 = "org.springframework.boot.loader.archive.JarFileArchive";
      explodedArchive_FileEntry0.name = string2;
      explodedArchive_FileEntry0.name = string1;
      explodedArchive_FileEntry0.file = (File) mockFile0;
      String string3 = explodedArchive_FileEntry0.getName();
      boolean boolean1 = FileSystemHandling.appendLineToFile(evoSuiteFile0, string3);
      boolean boolean2 = explodedArchive_FileEntry0.isDirectory();
      ExplodedArchive explodedArchive0 = new ExplodedArchive(mockFile0, boolean2);
      try { 
        explodedArchive0.getManifest();
      } catch(IOException e) {
         //
         // invalid header field
         //
         verifyException("java.util.jar.Attributes", e);
      }
  }
}
