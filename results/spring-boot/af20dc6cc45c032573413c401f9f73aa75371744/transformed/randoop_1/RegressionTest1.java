import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest1 {

    public static boolean debug = false;

    @Test
    public void test501() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test501");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntry fileEntry0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntry();
        java.lang.String str1 = fileEntry0.name;
        java.lang.String str2 = fileEntry0.name;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str2);
    }

    @Test
    public void test502() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test502");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file1 = null;
        fileEntryIterator0.current = file1;
        fileEntryIterator0.recursive = true;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator5 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file6 = null;
        fileEntryIterator5.current = file6;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive8 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest9 = explodedArchive8.manifest;
        explodedArchive8.recursive = false;
        java.util.jar.Manifest manifest12 = explodedArchive8.manifest;
        java.io.File file13 = explodedArchive8.manifestFile;
        java.io.File file14 = null;
        java.io.File file15 = explodedArchive8.getManifestFile(file14);
        java.util.Iterator<java.io.File> fileItor16 = fileEntryIterator5.listFiles(file15);
        java.io.File file17 = fileEntryIterator5.root;
        java.io.File file18 = fileEntryIterator5.root;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator19 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file20 = null;
        fileEntryIterator19.current = file20;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive22 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest23 = explodedArchive22.manifest;
        explodedArchive22.recursive = false;
        java.util.jar.Manifest manifest26 = explodedArchive22.manifest;
        java.io.File file27 = explodedArchive22.manifestFile;
        java.io.File file28 = null;
        java.io.File file29 = explodedArchive22.getManifestFile(file28);
        java.util.Iterator<java.io.File> fileItor30 = fileEntryIterator19.listFiles(file29);
        java.util.ArrayDeque<java.util.Iterator<java.io.File>> fileItorQueue31 = new java.util.ArrayDeque<java.util.Iterator<java.io.File>>();
        boolean boolean32 = fileItorQueue31.add(fileItor30);
        fileEntryIterator5.stack = fileItorQueue31;
        java.util.Deque<java.util.Iterator<java.io.File>> fileItorQueue34 = fileEntryIterator5.stack;
        fileEntryIterator0.stack = fileItorQueue34;
        boolean boolean36 = fileEntryIterator0.hasNext();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file15.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file15.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file29.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file29.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItorQueue34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
    }

    @Test
    public void test503() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test503");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        boolean boolean1 = fileEntryIterator0.recursive;
        java.io.File file2 = fileEntryIterator0.current;
        boolean boolean3 = fileEntryIterator0.hasNext();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator4 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator5 = entryComparator4.reversed();
        java.util.Comparator<java.io.File> fileComparator6 = entryComparator4.reversed();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive7 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest8 = explodedArchive7.manifest;
        explodedArchive7.recursive = false;
        java.util.jar.Manifest manifest11 = explodedArchive7.manifest;
        java.io.File file12 = explodedArchive7.manifestFile;
        java.io.File file13 = null;
        java.io.File file14 = explodedArchive7.getManifestFile(file13);
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive15 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest16 = explodedArchive15.manifest;
        explodedArchive15.recursive = false;
        java.io.File file19 = null;
        explodedArchive15.root = file19;
        java.io.File file21 = explodedArchive15.root;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive22 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest23 = explodedArchive22.manifest;
        explodedArchive22.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive26 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest27 = explodedArchive26.manifest;
        explodedArchive26.recursive = false;
        java.util.jar.Manifest manifest30 = explodedArchive26.manifest;
        java.io.File file31 = explodedArchive26.manifestFile;
        java.io.File file32 = null;
        java.io.File file33 = explodedArchive26.getManifestFile(file32);
        explodedArchive22.manifestFile = file32;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive35 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest36 = explodedArchive35.manifest;
        explodedArchive35.recursive = false;
        java.util.jar.Manifest manifest39 = explodedArchive35.manifest;
        java.io.File file40 = explodedArchive35.manifestFile;
        java.io.File file41 = null;
        java.io.File file42 = explodedArchive35.getManifestFile(file41);
        explodedArchive22.manifestFile = file42;
        java.io.File file44 = explodedArchive15.getManifestFile(file42);
        int int45 = entryComparator4.compare(file14, file42);
        java.util.Iterator<java.io.File> fileItor46 = fileEntryIterator0.listFiles(file14);
        java.util.Deque<java.util.Iterator<java.io.File>> fileItorQueue47 = fileEntryIterator0.stack;
        java.io.File file48 = fileEntryIterator0.root;
        java.io.File file49 = fileEntryIterator0.current;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file14.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file14.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file33.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file33.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file42.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file42.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file44.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file44.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItorQueue47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file49);
    }

    @Test
    public void test504() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test504");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntry fileEntry0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntry();
        java.lang.String str1 = fileEntry0.getName();
        java.io.File file2 = fileEntry0.getFile();
        java.lang.String str3 = fileEntry0.getName();
        java.lang.String str4 = fileEntry0.getName();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator5 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        boolean boolean6 = fileEntryIterator5.recursive;
        java.io.File file7 = fileEntryIterator5.current;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator8 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file9 = null;
        fileEntryIterator8.current = file9;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive11 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest12 = explodedArchive11.manifest;
        explodedArchive11.recursive = false;
        java.util.jar.Manifest manifest15 = explodedArchive11.manifest;
        java.io.File file16 = explodedArchive11.manifestFile;
        java.io.File file17 = null;
        java.io.File file18 = explodedArchive11.getManifestFile(file17);
        java.util.Iterator<java.io.File> fileItor19 = fileEntryIterator8.listFiles(file18);
        java.io.File file20 = fileEntryIterator8.root;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive21 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.lang.String str22 = explodedArchive21.toString();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive23 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file24 = explodedArchive23.root;
        java.io.File file25 = null;
        explodedArchive23.manifestFile = file25;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive27 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest28 = explodedArchive27.manifest;
        explodedArchive27.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive31 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest32 = explodedArchive31.manifest;
        explodedArchive31.recursive = false;
        java.util.jar.Manifest manifest35 = explodedArchive31.manifest;
        java.io.File file36 = explodedArchive31.manifestFile;
        java.io.File file37 = null;
        java.io.File file38 = explodedArchive31.getManifestFile(file37);
        explodedArchive27.manifestFile = file37;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive40 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest41 = explodedArchive40.manifest;
        explodedArchive40.recursive = false;
        java.util.jar.Manifest manifest44 = explodedArchive40.manifest;
        java.io.File file45 = explodedArchive40.manifestFile;
        java.io.File file46 = null;
        java.io.File file47 = explodedArchive40.getManifestFile(file46);
        explodedArchive27.manifestFile = file47;
        java.io.File file49 = explodedArchive23.getManifestFile(file47);
        java.io.File file50 = explodedArchive21.getManifestFile(file47);
        fileEntryIterator8.root = file47;
        java.util.Iterator<java.io.File> fileItor52 = fileEntryIterator5.listFiles(file47);
        fileEntry0.file = file47;
        java.lang.String str54 = fileEntry0.getName();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file18.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file18.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str22 + "' != '" + "exploded archive" + "'", str22.equals("exploded archive"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file38.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file38.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file47.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file47.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file49.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file49.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file50.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file50.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str54);
    }

    @Test
    public void test505() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test505");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntry fileEntry0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntry();
        java.lang.String str1 = fileEntry0.getName();
        fileEntry0.name = "hi!";
        java.lang.String str4 = fileEntry0.name;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive5 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file6 = explodedArchive5.root;
        java.io.File file7 = null;
        explodedArchive5.manifestFile = file7;
        java.io.File file9 = explodedArchive5.root;
        java.lang.String str10 = explodedArchive5.toString();
        java.util.jar.Manifest manifest11 = null;
        explodedArchive5.manifest = manifest11;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator13 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        boolean boolean14 = fileEntryIterator13.recursive;
        java.io.File file15 = fileEntryIterator13.current;
        boolean boolean16 = fileEntryIterator13.hasNext();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator17 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator18 = entryComparator17.reversed();
        java.util.Comparator<java.io.File> fileComparator19 = entryComparator17.reversed();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive20 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest21 = explodedArchive20.manifest;
        explodedArchive20.recursive = false;
        java.util.jar.Manifest manifest24 = explodedArchive20.manifest;
        java.io.File file25 = explodedArchive20.manifestFile;
        java.io.File file26 = null;
        java.io.File file27 = explodedArchive20.getManifestFile(file26);
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive28 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest29 = explodedArchive28.manifest;
        explodedArchive28.recursive = false;
        java.io.File file32 = null;
        explodedArchive28.root = file32;
        java.io.File file34 = explodedArchive28.root;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive35 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest36 = explodedArchive35.manifest;
        explodedArchive35.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive39 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest40 = explodedArchive39.manifest;
        explodedArchive39.recursive = false;
        java.util.jar.Manifest manifest43 = explodedArchive39.manifest;
        java.io.File file44 = explodedArchive39.manifestFile;
        java.io.File file45 = null;
        java.io.File file46 = explodedArchive39.getManifestFile(file45);
        explodedArchive35.manifestFile = file45;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive48 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest49 = explodedArchive48.manifest;
        explodedArchive48.recursive = false;
        java.util.jar.Manifest manifest52 = explodedArchive48.manifest;
        java.io.File file53 = explodedArchive48.manifestFile;
        java.io.File file54 = null;
        java.io.File file55 = explodedArchive48.getManifestFile(file54);
        explodedArchive35.manifestFile = file55;
        java.io.File file57 = explodedArchive28.getManifestFile(file55);
        int int58 = entryComparator17.compare(file27, file55);
        java.util.Iterator<java.io.File> fileItor59 = fileEntryIterator13.listFiles(file27);
        java.io.File file60 = explodedArchive5.getManifestFile(file27);
        fileEntry0.file = file60;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str4 + "' != '" + "hi!" + "'", str4.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str10 + "' != '" + "exploded archive" + "'", str10.equals("exploded archive"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file27.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file27.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file46.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file46.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file55.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file55.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file57.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file57.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file60.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file60.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
    }

    @Test
    public void test506() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test506");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file1 = null;
        fileEntryIterator0.current = file1;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive3 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest4 = explodedArchive3.manifest;
        explodedArchive3.recursive = false;
        java.util.jar.Manifest manifest7 = explodedArchive3.manifest;
        java.io.File file8 = explodedArchive3.manifestFile;
        java.io.File file9 = null;
        java.io.File file10 = explodedArchive3.getManifestFile(file9);
        java.util.Iterator<java.io.File> fileItor11 = fileEntryIterator0.listFiles(file10);
        java.io.File file12 = fileEntryIterator0.root;
        java.io.File file13 = fileEntryIterator0.poll();
        java.util.Comparator<java.io.File> fileComparator14 = fileEntryIterator0.entryComparator;
        java.util.Deque<java.util.Iterator<java.io.File>> fileItorQueue15 = fileEntryIterator0.stack;
        java.util.Deque<java.util.Iterator<java.io.File>> fileItorQueue16 = fileEntryIterator0.stack;
        java.lang.Class<?> wildcardClass17 = fileEntryIterator0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItorQueue15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItorQueue16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test507() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test507");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest1 = explodedArchive0.manifest;
        explodedArchive0.recursive = false;
        java.io.File file4 = null;
        explodedArchive0.root = file4;
        java.io.File file6 = explodedArchive0.manifestFile;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive7 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file8 = explodedArchive7.root;
        java.io.File file9 = null;
        explodedArchive7.manifestFile = file9;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive11 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest12 = explodedArchive11.manifest;
        explodedArchive11.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive15 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest16 = explodedArchive15.manifest;
        explodedArchive15.recursive = false;
        java.util.jar.Manifest manifest19 = explodedArchive15.manifest;
        java.io.File file20 = explodedArchive15.manifestFile;
        java.io.File file21 = null;
        java.io.File file22 = explodedArchive15.getManifestFile(file21);
        explodedArchive11.manifestFile = file21;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive24 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest25 = explodedArchive24.manifest;
        explodedArchive24.recursive = false;
        java.util.jar.Manifest manifest28 = explodedArchive24.manifest;
        java.io.File file29 = explodedArchive24.manifestFile;
        java.io.File file30 = null;
        java.io.File file31 = explodedArchive24.getManifestFile(file30);
        explodedArchive11.manifestFile = file31;
        java.io.File file33 = explodedArchive7.getManifestFile(file31);
        java.io.File file34 = explodedArchive7.root;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator35 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        boolean boolean36 = fileEntryIterator35.hasNext();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator37 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator38 = entryComparator37.reversed();
        java.util.Comparator<java.io.File> fileComparator39 = fileComparator38.reversed();
        fileEntryIterator35.entryComparator = fileComparator39;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive41 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file42 = explodedArchive41.root;
        java.io.File file43 = null;
        explodedArchive41.manifestFile = file43;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive45 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest46 = explodedArchive45.manifest;
        explodedArchive45.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive49 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest50 = explodedArchive49.manifest;
        explodedArchive49.recursive = false;
        java.util.jar.Manifest manifest53 = explodedArchive49.manifest;
        java.io.File file54 = explodedArchive49.manifestFile;
        java.io.File file55 = null;
        java.io.File file56 = explodedArchive49.getManifestFile(file55);
        explodedArchive45.manifestFile = file55;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive58 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest59 = explodedArchive58.manifest;
        explodedArchive58.recursive = false;
        java.util.jar.Manifest manifest62 = explodedArchive58.manifest;
        java.io.File file63 = explodedArchive58.manifestFile;
        java.io.File file64 = null;
        java.io.File file65 = explodedArchive58.getManifestFile(file64);
        explodedArchive45.manifestFile = file65;
        java.io.File file67 = explodedArchive41.getManifestFile(file65);
        java.util.Iterator<java.io.File> fileItor68 = fileEntryIterator35.listFiles(file67);
        explodedArchive7.manifestFile = file67;
        java.io.File file70 = explodedArchive7.manifestFile;
        java.io.File file71 = explodedArchive0.getManifestFile(file70);
        explodedArchive0.recursive = true;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file22.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file22.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file31.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file31.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file33.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file33.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file56.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file56.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file65.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file65.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file67.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file67.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file70.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file70.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file71.getParent(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file71.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
    }

    @Test
    public void test508() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test508");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file1 = null;
        fileEntryIterator0.current = file1;
        fileEntryIterator0.recursive = true;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator5 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file6 = null;
        fileEntryIterator5.current = file6;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive8 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest9 = explodedArchive8.manifest;
        explodedArchive8.recursive = false;
        java.util.jar.Manifest manifest12 = explodedArchive8.manifest;
        java.io.File file13 = explodedArchive8.manifestFile;
        java.io.File file14 = null;
        java.io.File file15 = explodedArchive8.getManifestFile(file14);
        java.util.Iterator<java.io.File> fileItor16 = fileEntryIterator5.listFiles(file15);
        java.io.File file17 = fileEntryIterator5.root;
        java.io.File file18 = fileEntryIterator5.root;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator19 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file20 = null;
        fileEntryIterator19.current = file20;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive22 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest23 = explodedArchive22.manifest;
        explodedArchive22.recursive = false;
        java.util.jar.Manifest manifest26 = explodedArchive22.manifest;
        java.io.File file27 = explodedArchive22.manifestFile;
        java.io.File file28 = null;
        java.io.File file29 = explodedArchive22.getManifestFile(file28);
        java.util.Iterator<java.io.File> fileItor30 = fileEntryIterator19.listFiles(file29);
        java.util.ArrayDeque<java.util.Iterator<java.io.File>> fileItorQueue31 = new java.util.ArrayDeque<java.util.Iterator<java.io.File>>();
        boolean boolean32 = fileItorQueue31.add(fileItor30);
        fileEntryIterator5.stack = fileItorQueue31;
        java.util.Deque<java.util.Iterator<java.io.File>> fileItorQueue34 = fileEntryIterator5.stack;
        fileEntryIterator0.stack = fileItorQueue34;
        java.util.Comparator<java.io.File> fileComparator36 = fileEntryIterator0.entryComparator;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator37 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        boolean boolean38 = fileEntryIterator37.hasNext();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator39 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator40 = entryComparator39.reversed();
        java.util.Comparator<java.io.File> fileComparator41 = fileComparator40.reversed();
        fileEntryIterator37.entryComparator = fileComparator41;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive43 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file44 = explodedArchive43.root;
        java.io.File file45 = null;
        explodedArchive43.manifestFile = file45;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive47 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest48 = explodedArchive47.manifest;
        explodedArchive47.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive51 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest52 = explodedArchive51.manifest;
        explodedArchive51.recursive = false;
        java.util.jar.Manifest manifest55 = explodedArchive51.manifest;
        java.io.File file56 = explodedArchive51.manifestFile;
        java.io.File file57 = null;
        java.io.File file58 = explodedArchive51.getManifestFile(file57);
        explodedArchive47.manifestFile = file57;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive60 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest61 = explodedArchive60.manifest;
        explodedArchive60.recursive = false;
        java.util.jar.Manifest manifest64 = explodedArchive60.manifest;
        java.io.File file65 = explodedArchive60.manifestFile;
        java.io.File file66 = null;
        java.io.File file67 = explodedArchive60.getManifestFile(file66);
        explodedArchive47.manifestFile = file67;
        java.io.File file69 = explodedArchive43.getManifestFile(file67);
        java.util.Iterator<java.io.File> fileItor70 = fileEntryIterator37.listFiles(file69);
        boolean boolean71 = fileEntryIterator37.recursive;
        java.util.Deque<java.util.Iterator<java.io.File>> fileItorQueue72 = fileEntryIterator37.stack;
        fileEntryIterator0.stack = fileItorQueue72;
        java.util.Deque<java.util.Iterator<java.io.File>> fileItorQueue74 = fileEntryIterator0.stack;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file15.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file15.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file29.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file29.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItorQueue34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file58.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file58.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file67.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file67.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file69.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file69.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItorQueue72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItorQueue74);
    }

    @Test
    public void test509() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test509");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest1 = explodedArchive0.manifest;
        explodedArchive0.recursive = false;
        java.io.File file4 = null;
        explodedArchive0.root = file4;
        java.io.File file6 = explodedArchive0.root;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive7 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest8 = explodedArchive7.manifest;
        explodedArchive7.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive11 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest12 = explodedArchive11.manifest;
        explodedArchive11.recursive = false;
        java.util.jar.Manifest manifest15 = explodedArchive11.manifest;
        java.io.File file16 = explodedArchive11.manifestFile;
        java.io.File file17 = null;
        java.io.File file18 = explodedArchive11.getManifestFile(file17);
        explodedArchive7.manifestFile = file17;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive20 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest21 = explodedArchive20.manifest;
        explodedArchive20.recursive = false;
        java.util.jar.Manifest manifest24 = explodedArchive20.manifest;
        java.io.File file25 = explodedArchive20.manifestFile;
        java.io.File file26 = null;
        java.io.File file27 = explodedArchive20.getManifestFile(file26);
        explodedArchive7.manifestFile = file27;
        java.io.File file29 = explodedArchive0.getManifestFile(file27);
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator30 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file31 = null;
        fileEntryIterator30.current = file31;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive33 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.lang.String str34 = explodedArchive33.toString();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive35 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file36 = explodedArchive35.root;
        java.io.File file37 = null;
        explodedArchive35.manifestFile = file37;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive39 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest40 = explodedArchive39.manifest;
        explodedArchive39.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive43 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest44 = explodedArchive43.manifest;
        explodedArchive43.recursive = false;
        java.util.jar.Manifest manifest47 = explodedArchive43.manifest;
        java.io.File file48 = explodedArchive43.manifestFile;
        java.io.File file49 = null;
        java.io.File file50 = explodedArchive43.getManifestFile(file49);
        explodedArchive39.manifestFile = file49;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive52 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest53 = explodedArchive52.manifest;
        explodedArchive52.recursive = false;
        java.util.jar.Manifest manifest56 = explodedArchive52.manifest;
        java.io.File file57 = explodedArchive52.manifestFile;
        java.io.File file58 = null;
        java.io.File file59 = explodedArchive52.getManifestFile(file58);
        explodedArchive39.manifestFile = file59;
        java.io.File file61 = explodedArchive35.getManifestFile(file59);
        java.io.File file62 = explodedArchive33.getManifestFile(file59);
        fileEntryIterator30.root = file59;
        explodedArchive0.manifestFile = file59;
        java.util.jar.Manifest manifest65 = explodedArchive0.getManifest();
        java.util.jar.Manifest manifest66 = null;
        explodedArchive0.manifest = manifest66;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file18.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file18.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file27.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file27.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file29.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file29.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str34 + "' != '" + "exploded archive" + "'", str34.equals("exploded archive"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file50.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file50.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file59.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file59.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file61.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file61.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file62.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file62.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest65);
    }

    @Test
    public void test510() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test510");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file1 = explodedArchive0.root;
        java.io.File file2 = null;
        explodedArchive0.manifestFile = file2;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive4 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest5 = explodedArchive4.manifest;
        explodedArchive4.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive8 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest9 = explodedArchive8.manifest;
        explodedArchive8.recursive = false;
        java.util.jar.Manifest manifest12 = explodedArchive8.manifest;
        java.io.File file13 = explodedArchive8.manifestFile;
        java.io.File file14 = null;
        java.io.File file15 = explodedArchive8.getManifestFile(file14);
        explodedArchive4.manifestFile = file14;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive17 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest18 = explodedArchive17.manifest;
        explodedArchive17.recursive = false;
        java.util.jar.Manifest manifest21 = explodedArchive17.manifest;
        java.io.File file22 = explodedArchive17.manifestFile;
        java.io.File file23 = null;
        java.io.File file24 = explodedArchive17.getManifestFile(file23);
        explodedArchive4.manifestFile = file24;
        java.io.File file26 = explodedArchive0.getManifestFile(file24);
        java.util.jar.Manifest manifest27 = null;
        explodedArchive0.manifest = manifest27;
        java.io.File file29 = explodedArchive0.root;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntry fileEntry30 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntry();
        java.io.File file31 = fileEntry30.file;
        java.lang.String str32 = fileEntry30.name;
        java.io.File file33 = fileEntry30.file;
        java.io.File file34 = fileEntry30.file;
        java.lang.String str35 = fileEntry30.name;
        java.lang.String str36 = fileEntry30.getName();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntry fileEntry37 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntry();
        java.io.File file38 = fileEntry37.getFile();
        java.io.File file39 = fileEntry37.getFile();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive40 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file41 = explodedArchive40.root;
        java.io.File file42 = null;
        explodedArchive40.manifestFile = file42;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive44 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest45 = explodedArchive44.manifest;
        explodedArchive44.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive48 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest49 = explodedArchive48.manifest;
        explodedArchive48.recursive = false;
        java.util.jar.Manifest manifest52 = explodedArchive48.manifest;
        java.io.File file53 = explodedArchive48.manifestFile;
        java.io.File file54 = null;
        java.io.File file55 = explodedArchive48.getManifestFile(file54);
        explodedArchive44.manifestFile = file54;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive57 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest58 = explodedArchive57.manifest;
        explodedArchive57.recursive = false;
        java.util.jar.Manifest manifest61 = explodedArchive57.manifest;
        java.io.File file62 = explodedArchive57.manifestFile;
        java.io.File file63 = null;
        java.io.File file64 = explodedArchive57.getManifestFile(file63);
        explodedArchive44.manifestFile = file64;
        java.io.File file66 = explodedArchive40.getManifestFile(file64);
        fileEntry37.file = file66;
        java.io.File file68 = fileEntry37.file;
        fileEntry37.name = "exploded archive";
        java.io.File file71 = fileEntry37.file;
        java.io.File file72 = fileEntry37.getFile();
        java.io.File file73 = fileEntry37.file;
        fileEntry30.file = file73;
        java.io.File file75 = explodedArchive0.getManifestFile(file73);
        // The following exception was thrown during execution in test generation
        try {
            org.springframework.boot.loader.archive.ExplodedArchive explodedArchive76 = new org.springframework.boot.loader.archive.ExplodedArchive(file73);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid source folder META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file15.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file15.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file24.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file24.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file26.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file26.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file55.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file55.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file64.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file64.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file66.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file66.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file68.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file68.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file71.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file71.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file72.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file72.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file73);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file73.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file73.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file75);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file75.getParent(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file75.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
    }

    @Test
    public void test511() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test511");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntry fileEntry0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntry();
        java.lang.String str1 = fileEntry0.getName();
        java.lang.String str2 = fileEntry0.getName();
        java.lang.String str3 = fileEntry0.name;
        java.io.File file4 = fileEntry0.file;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file4);
    }

    @Test
    public void test512() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test512");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file1 = null;
        fileEntryIterator0.current = file1;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive3 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest4 = explodedArchive3.manifest;
        explodedArchive3.recursive = false;
        java.util.jar.Manifest manifest7 = explodedArchive3.manifest;
        java.io.File file8 = explodedArchive3.manifestFile;
        java.io.File file9 = null;
        java.io.File file10 = explodedArchive3.getManifestFile(file9);
        java.util.Iterator<java.io.File> fileItor11 = fileEntryIterator0.listFiles(file10);
        java.io.File file12 = fileEntryIterator0.root;
        java.io.File file13 = fileEntryIterator0.root;
        java.util.Deque<java.util.Iterator<java.io.File>> fileItorQueue14 = fileEntryIterator0.stack;
        java.io.File file15 = fileEntryIterator0.current;
        boolean boolean16 = fileEntryIterator0.hasNext();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntry fileEntry17 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntry();
        java.lang.String str18 = fileEntry17.name;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator19 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file20 = null;
        fileEntryIterator19.current = file20;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive22 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest23 = explodedArchive22.manifest;
        explodedArchive22.recursive = false;
        java.util.jar.Manifest manifest26 = explodedArchive22.manifest;
        java.io.File file27 = explodedArchive22.manifestFile;
        java.io.File file28 = null;
        java.io.File file29 = explodedArchive22.getManifestFile(file28);
        java.util.Iterator<java.io.File> fileItor30 = fileEntryIterator19.listFiles(file29);
        java.io.File file31 = fileEntryIterator19.current;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator32 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file33 = null;
        fileEntryIterator32.current = file33;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive35 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest36 = explodedArchive35.manifest;
        explodedArchive35.recursive = false;
        java.util.jar.Manifest manifest39 = explodedArchive35.manifest;
        java.io.File file40 = explodedArchive35.manifestFile;
        java.io.File file41 = null;
        java.io.File file42 = explodedArchive35.getManifestFile(file41);
        java.util.Iterator<java.io.File> fileItor43 = fileEntryIterator32.listFiles(file42);
        java.util.ArrayDeque<java.util.Iterator<java.io.File>> fileItorQueue44 = new java.util.ArrayDeque<java.util.Iterator<java.io.File>>();
        boolean boolean45 = fileItorQueue44.add(fileItor43);
        fileEntryIterator19.stack = fileItorQueue44;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive47 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest48 = explodedArchive47.manifest;
        explodedArchive47.recursive = false;
        java.io.File file51 = null;
        explodedArchive47.root = file51;
        java.io.File file53 = explodedArchive47.root;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive54 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest55 = explodedArchive54.manifest;
        explodedArchive54.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive58 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest59 = explodedArchive58.manifest;
        explodedArchive58.recursive = false;
        java.util.jar.Manifest manifest62 = explodedArchive58.manifest;
        java.io.File file63 = explodedArchive58.manifestFile;
        java.io.File file64 = null;
        java.io.File file65 = explodedArchive58.getManifestFile(file64);
        explodedArchive54.manifestFile = file64;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive67 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest68 = explodedArchive67.manifest;
        explodedArchive67.recursive = false;
        java.util.jar.Manifest manifest71 = explodedArchive67.manifest;
        java.io.File file72 = explodedArchive67.manifestFile;
        java.io.File file73 = null;
        java.io.File file74 = explodedArchive67.getManifestFile(file73);
        explodedArchive54.manifestFile = file74;
        java.io.File file76 = explodedArchive47.getManifestFile(file74);
        fileEntryIterator19.root = file74;
        fileEntry17.file = file74;
        boolean boolean79 = fileEntry17.isDirectory();
        boolean boolean80 = fileEntry17.isDirectory();
        java.io.File file81 = fileEntry17.file;
        java.io.File file82 = fileEntry17.file;
        java.util.Iterator<java.io.File> fileItor83 = fileEntryIterator0.listFiles(file82);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItorQueue14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file29.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file29.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file42.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file42.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file65.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file65.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file74.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file74.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file76);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file76.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file76.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file81);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file81.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file81.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file82);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file82.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file82.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor83);
    }

    @Test
    public void test513() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test513");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntry fileEntry0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntry();
        java.io.File file1 = fileEntry0.getFile();
        java.io.File file2 = fileEntry0.getFile();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive3 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file4 = explodedArchive3.root;
        java.io.File file5 = null;
        explodedArchive3.manifestFile = file5;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive7 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest8 = explodedArchive7.manifest;
        explodedArchive7.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive11 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest12 = explodedArchive11.manifest;
        explodedArchive11.recursive = false;
        java.util.jar.Manifest manifest15 = explodedArchive11.manifest;
        java.io.File file16 = explodedArchive11.manifestFile;
        java.io.File file17 = null;
        java.io.File file18 = explodedArchive11.getManifestFile(file17);
        explodedArchive7.manifestFile = file17;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive20 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest21 = explodedArchive20.manifest;
        explodedArchive20.recursive = false;
        java.util.jar.Manifest manifest24 = explodedArchive20.manifest;
        java.io.File file25 = explodedArchive20.manifestFile;
        java.io.File file26 = null;
        java.io.File file27 = explodedArchive20.getManifestFile(file26);
        explodedArchive7.manifestFile = file27;
        java.io.File file29 = explodedArchive3.getManifestFile(file27);
        fileEntry0.file = file29;
        java.io.File file31 = fileEntry0.file;
        fileEntry0.name = "exploded archive";
        java.io.File file34 = fileEntry0.file;
        fileEntry0.name = "";
        java.io.File file37 = fileEntry0.getFile();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file18.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file18.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file27.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file27.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file29.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file29.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file31.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file31.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file34.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file34.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file37.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file37.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
    }

    @Test
    public void test514() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test514");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest1 = explodedArchive0.manifest;
        explodedArchive0.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive4 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest5 = explodedArchive4.manifest;
        explodedArchive4.recursive = false;
        java.util.jar.Manifest manifest8 = explodedArchive4.manifest;
        java.io.File file9 = explodedArchive4.manifestFile;
        java.io.File file10 = null;
        java.io.File file11 = explodedArchive4.getManifestFile(file10);
        explodedArchive0.manifestFile = file10;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive13 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest14 = explodedArchive13.manifest;
        explodedArchive13.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive17 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest18 = explodedArchive17.manifest;
        explodedArchive17.recursive = false;
        java.util.jar.Manifest manifest21 = explodedArchive17.manifest;
        java.io.File file22 = explodedArchive17.manifestFile;
        java.io.File file23 = null;
        java.io.File file24 = explodedArchive17.getManifestFile(file23);
        explodedArchive13.manifestFile = file23;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive26 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest27 = explodedArchive26.manifest;
        explodedArchive26.recursive = false;
        java.util.jar.Manifest manifest30 = explodedArchive26.manifest;
        java.io.File file31 = explodedArchive26.manifestFile;
        java.io.File file32 = null;
        java.io.File file33 = explodedArchive26.getManifestFile(file32);
        explodedArchive13.manifestFile = file33;
        explodedArchive0.root = file33;
        java.net.URL uRL36 = explodedArchive0.getUrl();
        java.util.jar.Manifest manifest37 = explodedArchive0.manifest;
        java.util.jar.Manifest manifest38 = explodedArchive0.manifest;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file11.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file11.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file24.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file24.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file33.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file33.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(uRL36);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(uRL36.toString(), "file:/server/study-execution/new-nimrod/nimrod-hunoroutput-test-dest/spring-boot/af20dc6cc45c032573413c401f9f73aa75371744/randoop_1/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest38);
    }

    @Test
    public void test515() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test515");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntry fileEntry0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntry();
        java.io.File file1 = fileEntry0.getFile();
        java.io.File file2 = fileEntry0.getFile();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive3 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file4 = explodedArchive3.root;
        java.io.File file5 = null;
        explodedArchive3.manifestFile = file5;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive7 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest8 = explodedArchive7.manifest;
        explodedArchive7.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive11 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest12 = explodedArchive11.manifest;
        explodedArchive11.recursive = false;
        java.util.jar.Manifest manifest15 = explodedArchive11.manifest;
        java.io.File file16 = explodedArchive11.manifestFile;
        java.io.File file17 = null;
        java.io.File file18 = explodedArchive11.getManifestFile(file17);
        explodedArchive7.manifestFile = file17;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive20 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest21 = explodedArchive20.manifest;
        explodedArchive20.recursive = false;
        java.util.jar.Manifest manifest24 = explodedArchive20.manifest;
        java.io.File file25 = explodedArchive20.manifestFile;
        java.io.File file26 = null;
        java.io.File file27 = explodedArchive20.getManifestFile(file26);
        explodedArchive7.manifestFile = file27;
        java.io.File file29 = explodedArchive3.getManifestFile(file27);
        fileEntry0.file = file29;
        java.io.File file31 = fileEntry0.file;
        fileEntry0.name = "exploded archive";
        java.io.File file34 = fileEntry0.file;
        java.io.File file35 = fileEntry0.getFile();
        java.io.File file36 = fileEntry0.file;
        java.lang.String str37 = fileEntry0.getName();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file18.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file18.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file27.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file27.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file29.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file29.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file31.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file31.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file34.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file34.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file35.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file35.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file36.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file36.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str37 + "' != '" + "exploded archive" + "'", str37.equals("exploded archive"));
    }

    @Test
    public void test516() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test516");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntry fileEntry0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntry();
        java.lang.String str1 = fileEntry0.getName();
        java.io.File file2 = fileEntry0.getFile();
        java.lang.String str3 = fileEntry0.getName();
        java.io.File file4 = fileEntry0.getFile();
        java.lang.String str5 = fileEntry0.name;
        java.lang.String str6 = fileEntry0.name;
        java.lang.String str7 = fileEntry0.getName();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive8 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file9 = explodedArchive8.root;
        java.io.File file10 = null;
        explodedArchive8.manifestFile = file10;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive12 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest13 = explodedArchive12.manifest;
        explodedArchive12.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive16 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest17 = explodedArchive16.manifest;
        explodedArchive16.recursive = false;
        java.util.jar.Manifest manifest20 = explodedArchive16.manifest;
        java.io.File file21 = explodedArchive16.manifestFile;
        java.io.File file22 = null;
        java.io.File file23 = explodedArchive16.getManifestFile(file22);
        explodedArchive12.manifestFile = file22;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive25 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest26 = explodedArchive25.manifest;
        explodedArchive25.recursive = false;
        java.util.jar.Manifest manifest29 = explodedArchive25.manifest;
        java.io.File file30 = explodedArchive25.manifestFile;
        java.io.File file31 = null;
        java.io.File file32 = explodedArchive25.getManifestFile(file31);
        explodedArchive12.manifestFile = file32;
        java.io.File file34 = explodedArchive8.getManifestFile(file32);
        fileEntry0.file = file34;
        java.io.File file36 = fileEntry0.file;
        // The following exception was thrown during execution in test generation
        try {
            org.springframework.boot.loader.archive.ExplodedArchive explodedArchive38 = new org.springframework.boot.loader.archive.ExplodedArchive(file36, false);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid source folder META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file23.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file23.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file32.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file32.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file34.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file34.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file36.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file36.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
    }

    @Test
    public void test517() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test517");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file1 = null;
        fileEntryIterator0.current = file1;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive3 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest4 = explodedArchive3.manifest;
        explodedArchive3.recursive = false;
        java.util.jar.Manifest manifest7 = explodedArchive3.manifest;
        java.io.File file8 = explodedArchive3.manifestFile;
        java.io.File file9 = null;
        java.io.File file10 = explodedArchive3.getManifestFile(file9);
        java.util.Iterator<java.io.File> fileItor11 = fileEntryIterator0.listFiles(file10);
        java.io.File file12 = fileEntryIterator0.current;
        boolean boolean13 = fileEntryIterator0.recursive;
        java.io.File file14 = fileEntryIterator0.poll();
        java.util.Comparator<java.io.File> fileComparator15 = fileEntryIterator0.entryComparator;
        boolean boolean16 = fileEntryIterator0.hasNext();
        java.io.File file17 = fileEntryIterator0.current;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file17);
    }

    @Test
    public void test518() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test518");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.lang.String str1 = explodedArchive0.toString();
        java.io.File file2 = explodedArchive0.root;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator3 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file4 = null;
        fileEntryIterator3.current = file4;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive6 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest7 = explodedArchive6.manifest;
        explodedArchive6.recursive = false;
        java.util.jar.Manifest manifest10 = explodedArchive6.manifest;
        java.io.File file11 = explodedArchive6.manifestFile;
        java.io.File file12 = null;
        java.io.File file13 = explodedArchive6.getManifestFile(file12);
        java.util.Iterator<java.io.File> fileItor14 = fileEntryIterator3.listFiles(file13);
        java.io.File file15 = fileEntryIterator3.current;
        boolean boolean16 = fileEntryIterator3.recursive;
        java.io.File file17 = fileEntryIterator3.poll();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator18 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file19 = null;
        fileEntryIterator18.current = file19;
        fileEntryIterator18.recursive = true;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator23 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator24 = entryComparator23.reversed();
        java.util.Comparator<java.io.File> fileComparator25 = entryComparator23.reversed();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive26 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest27 = explodedArchive26.manifest;
        explodedArchive26.recursive = false;
        java.util.jar.Manifest manifest30 = explodedArchive26.manifest;
        java.io.File file31 = explodedArchive26.manifestFile;
        java.io.File file32 = null;
        java.io.File file33 = explodedArchive26.getManifestFile(file32);
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive34 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest35 = explodedArchive34.manifest;
        explodedArchive34.recursive = false;
        java.io.File file38 = null;
        explodedArchive34.root = file38;
        java.io.File file40 = explodedArchive34.root;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive41 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest42 = explodedArchive41.manifest;
        explodedArchive41.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive45 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest46 = explodedArchive45.manifest;
        explodedArchive45.recursive = false;
        java.util.jar.Manifest manifest49 = explodedArchive45.manifest;
        java.io.File file50 = explodedArchive45.manifestFile;
        java.io.File file51 = null;
        java.io.File file52 = explodedArchive45.getManifestFile(file51);
        explodedArchive41.manifestFile = file51;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive54 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest55 = explodedArchive54.manifest;
        explodedArchive54.recursive = false;
        java.util.jar.Manifest manifest58 = explodedArchive54.manifest;
        java.io.File file59 = explodedArchive54.manifestFile;
        java.io.File file60 = null;
        java.io.File file61 = explodedArchive54.getManifestFile(file60);
        explodedArchive41.manifestFile = file61;
        java.io.File file63 = explodedArchive34.getManifestFile(file61);
        int int64 = entryComparator23.compare(file33, file61);
        java.util.Iterator<java.io.File> fileItor65 = fileEntryIterator18.listFiles(file33);
        fileEntryIterator3.current = file33;
        java.io.File file67 = explodedArchive0.getManifestFile(file33);
        explodedArchive0.recursive = false;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str1 + "' != '" + "exploded archive" + "'", str1.equals("exploded archive"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file13.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file13.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file33.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file33.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file52.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file52.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file61.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file61.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file63.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file63.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file67.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file67.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
    }

    @Test
    public void test519() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test519");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest1 = explodedArchive0.manifest;
        explodedArchive0.recursive = false;
        java.io.File file4 = null;
        explodedArchive0.root = file4;
        java.io.File file6 = explodedArchive0.root;
        java.util.jar.Manifest manifest7 = null;
        explodedArchive0.manifest = manifest7;
        explodedArchive0.recursive = false;
        java.util.jar.Manifest manifest11 = null;
        explodedArchive0.manifest = manifest11;
        java.lang.String str13 = explodedArchive0.toString();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive14 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.lang.String str15 = explodedArchive14.toString();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive16 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file17 = explodedArchive16.root;
        java.io.File file18 = null;
        explodedArchive16.manifestFile = file18;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive20 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest21 = explodedArchive20.manifest;
        explodedArchive20.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive24 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest25 = explodedArchive24.manifest;
        explodedArchive24.recursive = false;
        java.util.jar.Manifest manifest28 = explodedArchive24.manifest;
        java.io.File file29 = explodedArchive24.manifestFile;
        java.io.File file30 = null;
        java.io.File file31 = explodedArchive24.getManifestFile(file30);
        explodedArchive20.manifestFile = file30;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive33 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest34 = explodedArchive33.manifest;
        explodedArchive33.recursive = false;
        java.util.jar.Manifest manifest37 = explodedArchive33.manifest;
        java.io.File file38 = explodedArchive33.manifestFile;
        java.io.File file39 = null;
        java.io.File file40 = explodedArchive33.getManifestFile(file39);
        explodedArchive20.manifestFile = file40;
        java.io.File file42 = explodedArchive16.getManifestFile(file40);
        java.io.File file43 = explodedArchive14.getManifestFile(file40);
        java.io.File file44 = explodedArchive0.getManifestFile(file40);
        java.io.File file45 = explodedArchive0.root;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str13 + "' != '" + "exploded archive" + "'", str13.equals("exploded archive"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str15 + "' != '" + "exploded archive" + "'", str15.equals("exploded archive"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file31.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file31.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file40.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file40.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file42.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file42.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file43.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file43.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file44.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file44.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file45);
    }

    @Test
    public void test520() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test520");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file1 = null;
        fileEntryIterator0.current = file1;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive3 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest4 = explodedArchive3.manifest;
        explodedArchive3.recursive = false;
        java.util.jar.Manifest manifest7 = explodedArchive3.manifest;
        java.io.File file8 = explodedArchive3.manifestFile;
        java.io.File file9 = null;
        java.io.File file10 = explodedArchive3.getManifestFile(file9);
        java.util.Iterator<java.io.File> fileItor11 = fileEntryIterator0.listFiles(file10);
        java.io.File file12 = fileEntryIterator0.root;
        java.io.File file13 = fileEntryIterator0.root;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator14 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file15 = null;
        fileEntryIterator14.current = file15;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive17 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest18 = explodedArchive17.manifest;
        explodedArchive17.recursive = false;
        java.util.jar.Manifest manifest21 = explodedArchive17.manifest;
        java.io.File file22 = explodedArchive17.manifestFile;
        java.io.File file23 = null;
        java.io.File file24 = explodedArchive17.getManifestFile(file23);
        java.util.Iterator<java.io.File> fileItor25 = fileEntryIterator14.listFiles(file24);
        java.util.ArrayDeque<java.util.Iterator<java.io.File>> fileItorQueue26 = new java.util.ArrayDeque<java.util.Iterator<java.io.File>>();
        boolean boolean27 = fileItorQueue26.add(fileItor25);
        fileEntryIterator0.stack = fileItorQueue26;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive29 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest30 = explodedArchive29.manifest;
        explodedArchive29.recursive = false;
        java.io.File file33 = null;
        explodedArchive29.root = file33;
        java.io.File file35 = explodedArchive29.root;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive36 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest37 = explodedArchive36.manifest;
        explodedArchive36.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive40 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest41 = explodedArchive40.manifest;
        explodedArchive40.recursive = false;
        java.util.jar.Manifest manifest44 = explodedArchive40.manifest;
        java.io.File file45 = explodedArchive40.manifestFile;
        java.io.File file46 = null;
        java.io.File file47 = explodedArchive40.getManifestFile(file46);
        explodedArchive36.manifestFile = file46;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive49 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest50 = explodedArchive49.manifest;
        explodedArchive49.recursive = false;
        java.util.jar.Manifest manifest53 = explodedArchive49.manifest;
        java.io.File file54 = explodedArchive49.manifestFile;
        java.io.File file55 = null;
        java.io.File file56 = explodedArchive49.getManifestFile(file55);
        explodedArchive36.manifestFile = file56;
        java.io.File file58 = explodedArchive29.getManifestFile(file56);
        fileEntryIterator0.current = file56;
        java.io.File file60 = fileEntryIterator0.root;
        java.io.File file61 = fileEntryIterator0.poll();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file24.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file24.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file47.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file47.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file56.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file56.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file58.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file58.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file61);
    }

    @Test
    public void test521() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test521");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file1 = null;
        fileEntryIterator0.current = file1;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive3 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest4 = explodedArchive3.manifest;
        explodedArchive3.recursive = false;
        java.util.jar.Manifest manifest7 = explodedArchive3.manifest;
        java.io.File file8 = explodedArchive3.manifestFile;
        java.io.File file9 = null;
        java.io.File file10 = explodedArchive3.getManifestFile(file9);
        java.util.Iterator<java.io.File> fileItor11 = fileEntryIterator0.listFiles(file10);
        java.io.File file12 = fileEntryIterator0.root;
        boolean boolean13 = fileEntryIterator0.hasNext();
        fileEntryIterator0.recursive = false;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test522() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test522");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file1 = null;
        fileEntryIterator0.current = file1;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive3 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest4 = explodedArchive3.manifest;
        explodedArchive3.recursive = false;
        java.util.jar.Manifest manifest7 = explodedArchive3.manifest;
        java.io.File file8 = explodedArchive3.manifestFile;
        java.io.File file9 = null;
        java.io.File file10 = explodedArchive3.getManifestFile(file9);
        java.util.Iterator<java.io.File> fileItor11 = fileEntryIterator0.listFiles(file10);
        java.io.File file12 = fileEntryIterator0.root;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive13 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.lang.String str14 = explodedArchive13.toString();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive15 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file16 = explodedArchive15.root;
        java.io.File file17 = null;
        explodedArchive15.manifestFile = file17;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive19 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest20 = explodedArchive19.manifest;
        explodedArchive19.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive23 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest24 = explodedArchive23.manifest;
        explodedArchive23.recursive = false;
        java.util.jar.Manifest manifest27 = explodedArchive23.manifest;
        java.io.File file28 = explodedArchive23.manifestFile;
        java.io.File file29 = null;
        java.io.File file30 = explodedArchive23.getManifestFile(file29);
        explodedArchive19.manifestFile = file29;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive32 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest33 = explodedArchive32.manifest;
        explodedArchive32.recursive = false;
        java.util.jar.Manifest manifest36 = explodedArchive32.manifest;
        java.io.File file37 = explodedArchive32.manifestFile;
        java.io.File file38 = null;
        java.io.File file39 = explodedArchive32.getManifestFile(file38);
        explodedArchive19.manifestFile = file39;
        java.io.File file41 = explodedArchive15.getManifestFile(file39);
        java.io.File file42 = explodedArchive13.getManifestFile(file39);
        fileEntryIterator0.root = file39;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive44 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest45 = explodedArchive44.manifest;
        explodedArchive44.recursive = false;
        java.io.File file48 = null;
        explodedArchive44.root = file48;
        java.io.File file50 = explodedArchive44.manifestFile;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive51 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file52 = explodedArchive51.root;
        java.io.File file53 = null;
        explodedArchive51.manifestFile = file53;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive55 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest56 = explodedArchive55.manifest;
        explodedArchive55.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive59 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest60 = explodedArchive59.manifest;
        explodedArchive59.recursive = false;
        java.util.jar.Manifest manifest63 = explodedArchive59.manifest;
        java.io.File file64 = explodedArchive59.manifestFile;
        java.io.File file65 = null;
        java.io.File file66 = explodedArchive59.getManifestFile(file65);
        explodedArchive55.manifestFile = file65;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive68 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest69 = explodedArchive68.manifest;
        explodedArchive68.recursive = false;
        java.util.jar.Manifest manifest72 = explodedArchive68.manifest;
        java.io.File file73 = explodedArchive68.manifestFile;
        java.io.File file74 = null;
        java.io.File file75 = explodedArchive68.getManifestFile(file74);
        explodedArchive55.manifestFile = file75;
        java.io.File file77 = explodedArchive51.getManifestFile(file75);
        java.io.File file78 = explodedArchive44.getManifestFile(file75);
        fileEntryIterator0.root = file78;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str14 + "' != '" + "exploded archive" + "'", str14.equals("exploded archive"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file30.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file30.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file39.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file39.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file41.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file41.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file42.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file42.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file66.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file66.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file73);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file75);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file75.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file75.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file77);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file77.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file77.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file78);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file78.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file78.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
    }

    @Test
    public void test523() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test523");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file1 = null;
        fileEntryIterator0.current = file1;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive3 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest4 = explodedArchive3.manifest;
        explodedArchive3.recursive = false;
        java.util.jar.Manifest manifest7 = explodedArchive3.manifest;
        java.io.File file8 = explodedArchive3.manifestFile;
        java.io.File file9 = null;
        java.io.File file10 = explodedArchive3.getManifestFile(file9);
        java.util.Iterator<java.io.File> fileItor11 = fileEntryIterator0.listFiles(file10);
        java.io.File file12 = fileEntryIterator0.root;
        java.io.File file13 = fileEntryIterator0.current;
        java.io.File file14 = fileEntryIterator0.poll();
        // The following exception was thrown during execution in test generation
        try {
            fileEntryIterator0.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: remove");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file14);
    }

    @Test
    public void test524() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test524");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest1 = explodedArchive0.manifest;
        explodedArchive0.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive4 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest5 = explodedArchive4.manifest;
        explodedArchive4.recursive = false;
        java.util.jar.Manifest manifest8 = explodedArchive4.manifest;
        java.io.File file9 = explodedArchive4.manifestFile;
        java.io.File file10 = null;
        java.io.File file11 = explodedArchive4.getManifestFile(file10);
        explodedArchive0.manifestFile = file10;
        java.util.jar.Manifest manifest13 = null;
        explodedArchive0.manifest = manifest13;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive15 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.lang.String str16 = explodedArchive15.toString();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive17 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file18 = explodedArchive17.root;
        java.io.File file19 = null;
        explodedArchive17.manifestFile = file19;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive21 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest22 = explodedArchive21.manifest;
        explodedArchive21.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive25 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest26 = explodedArchive25.manifest;
        explodedArchive25.recursive = false;
        java.util.jar.Manifest manifest29 = explodedArchive25.manifest;
        java.io.File file30 = explodedArchive25.manifestFile;
        java.io.File file31 = null;
        java.io.File file32 = explodedArchive25.getManifestFile(file31);
        explodedArchive21.manifestFile = file31;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive34 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest35 = explodedArchive34.manifest;
        explodedArchive34.recursive = false;
        java.util.jar.Manifest manifest38 = explodedArchive34.manifest;
        java.io.File file39 = explodedArchive34.manifestFile;
        java.io.File file40 = null;
        java.io.File file41 = explodedArchive34.getManifestFile(file40);
        explodedArchive21.manifestFile = file41;
        java.io.File file43 = explodedArchive17.getManifestFile(file41);
        java.io.File file44 = explodedArchive15.getManifestFile(file41);
        java.io.File file45 = null;
        java.io.File file46 = explodedArchive15.getManifestFile(file45);
        java.io.File file47 = explodedArchive0.getManifestFile(file45);
        java.util.jar.Manifest manifest48 = null;
        explodedArchive0.manifest = manifest48;
        boolean boolean50 = explodedArchive0.recursive;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file11.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file11.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str16 + "' != '" + "exploded archive" + "'", str16.equals("exploded archive"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file32.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file32.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file41.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file41.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file43.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file43.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file44.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file44.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file46.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file46.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file47.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file47.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
    }

    @Test
    public void test525() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test525");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.lang.String str1 = explodedArchive0.toString();
        explodedArchive0.recursive = true;
        java.io.File file4 = null;
        java.io.File file5 = explodedArchive0.getManifestFile(file4);
        java.lang.String str6 = explodedArchive0.toString();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntry fileEntry7 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntry();
        java.lang.String str8 = fileEntry7.name;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator9 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file10 = null;
        fileEntryIterator9.current = file10;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive12 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.lang.String str13 = explodedArchive12.toString();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive14 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file15 = explodedArchive14.root;
        java.io.File file16 = null;
        explodedArchive14.manifestFile = file16;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive18 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest19 = explodedArchive18.manifest;
        explodedArchive18.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive22 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest23 = explodedArchive22.manifest;
        explodedArchive22.recursive = false;
        java.util.jar.Manifest manifest26 = explodedArchive22.manifest;
        java.io.File file27 = explodedArchive22.manifestFile;
        java.io.File file28 = null;
        java.io.File file29 = explodedArchive22.getManifestFile(file28);
        explodedArchive18.manifestFile = file28;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive31 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest32 = explodedArchive31.manifest;
        explodedArchive31.recursive = false;
        java.util.jar.Manifest manifest35 = explodedArchive31.manifest;
        java.io.File file36 = explodedArchive31.manifestFile;
        java.io.File file37 = null;
        java.io.File file38 = explodedArchive31.getManifestFile(file37);
        explodedArchive18.manifestFile = file38;
        java.io.File file40 = explodedArchive14.getManifestFile(file38);
        java.io.File file41 = explodedArchive12.getManifestFile(file38);
        fileEntryIterator9.root = file38;
        fileEntry7.file = file38;
        java.io.File file44 = fileEntry7.file;
        java.lang.String str45 = fileEntry7.name;
        // The following exception was thrown during execution in test generation
        try {
            org.springframework.boot.loader.archive.Archive archive46 = explodedArchive0.getNestedArchive((org.springframework.boot.loader.archive.Archive.Entry) fileEntry7);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: File must exist");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str1 + "' != '" + "exploded archive" + "'", str1.equals("exploded archive"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file5.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file5.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "exploded archive" + "'", str6.equals("exploded archive"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str13 + "' != '" + "exploded archive" + "'", str13.equals("exploded archive"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file29.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file29.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file38.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file38.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file40.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file40.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file41.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file41.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file44.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file44.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str45);
    }

    @Test
    public void test526() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test526");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file1 = explodedArchive0.root;
        java.io.File file2 = null;
        explodedArchive0.manifestFile = file2;
        java.io.File file4 = explodedArchive0.root;
        java.lang.String str5 = explodedArchive0.toString();
        java.util.jar.Manifest manifest6 = null;
        explodedArchive0.manifest = manifest6;
        java.io.File file8 = explodedArchive0.root;
        boolean boolean9 = explodedArchive0.recursive;
        org.springframework.boot.loader.archive.Archive.EntryFilter entryFilter10 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<org.springframework.boot.loader.archive.Archive> archiveList11 = explodedArchive0.getNestedArchives(entryFilter10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "exploded archive" + "'", str5.equals("exploded archive"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test527() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test527");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntry fileEntry0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntry();
        java.lang.String str1 = fileEntry0.name;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator2 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file3 = null;
        fileEntryIterator2.current = file3;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive5 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest6 = explodedArchive5.manifest;
        explodedArchive5.recursive = false;
        java.util.jar.Manifest manifest9 = explodedArchive5.manifest;
        java.io.File file10 = explodedArchive5.manifestFile;
        java.io.File file11 = null;
        java.io.File file12 = explodedArchive5.getManifestFile(file11);
        java.util.Iterator<java.io.File> fileItor13 = fileEntryIterator2.listFiles(file12);
        java.io.File file14 = fileEntryIterator2.current;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator15 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file16 = null;
        fileEntryIterator15.current = file16;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive18 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest19 = explodedArchive18.manifest;
        explodedArchive18.recursive = false;
        java.util.jar.Manifest manifest22 = explodedArchive18.manifest;
        java.io.File file23 = explodedArchive18.manifestFile;
        java.io.File file24 = null;
        java.io.File file25 = explodedArchive18.getManifestFile(file24);
        java.util.Iterator<java.io.File> fileItor26 = fileEntryIterator15.listFiles(file25);
        java.util.ArrayDeque<java.util.Iterator<java.io.File>> fileItorQueue27 = new java.util.ArrayDeque<java.util.Iterator<java.io.File>>();
        boolean boolean28 = fileItorQueue27.add(fileItor26);
        fileEntryIterator2.stack = fileItorQueue27;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive30 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest31 = explodedArchive30.manifest;
        explodedArchive30.recursive = false;
        java.io.File file34 = null;
        explodedArchive30.root = file34;
        java.io.File file36 = explodedArchive30.root;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive37 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest38 = explodedArchive37.manifest;
        explodedArchive37.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive41 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest42 = explodedArchive41.manifest;
        explodedArchive41.recursive = false;
        java.util.jar.Manifest manifest45 = explodedArchive41.manifest;
        java.io.File file46 = explodedArchive41.manifestFile;
        java.io.File file47 = null;
        java.io.File file48 = explodedArchive41.getManifestFile(file47);
        explodedArchive37.manifestFile = file47;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive50 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest51 = explodedArchive50.manifest;
        explodedArchive50.recursive = false;
        java.util.jar.Manifest manifest54 = explodedArchive50.manifest;
        java.io.File file55 = explodedArchive50.manifestFile;
        java.io.File file56 = null;
        java.io.File file57 = explodedArchive50.getManifestFile(file56);
        explodedArchive37.manifestFile = file57;
        java.io.File file59 = explodedArchive30.getManifestFile(file57);
        fileEntryIterator2.root = file57;
        fileEntry0.file = file57;
        boolean boolean62 = fileEntry0.isDirectory();
        boolean boolean63 = fileEntry0.isDirectory();
        java.io.File file64 = fileEntry0.file;
        java.lang.String str65 = fileEntry0.getName();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file12.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file12.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file25.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file25.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file48.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file48.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file57.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file57.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file59.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file59.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file64.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file64.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str65);
    }

    @Test
    public void test528() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test528");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file1 = null;
        fileEntryIterator0.current = file1;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive3 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest4 = explodedArchive3.manifest;
        explodedArchive3.recursive = false;
        java.util.jar.Manifest manifest7 = explodedArchive3.manifest;
        java.io.File file8 = explodedArchive3.manifestFile;
        java.io.File file9 = null;
        java.io.File file10 = explodedArchive3.getManifestFile(file9);
        java.util.Iterator<java.io.File> fileItor11 = fileEntryIterator0.listFiles(file10);
        boolean boolean12 = fileEntryIterator0.hasNext();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator13 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator14 = entryComparator13.reversed();
        java.util.Comparator<java.io.File> fileComparator15 = entryComparator13.reversed();
        fileEntryIterator0.entryComparator = fileComparator15;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator17 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file18 = null;
        fileEntryIterator17.current = file18;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive20 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest21 = explodedArchive20.manifest;
        explodedArchive20.recursive = false;
        java.util.jar.Manifest manifest24 = explodedArchive20.manifest;
        java.io.File file25 = explodedArchive20.manifestFile;
        java.io.File file26 = null;
        java.io.File file27 = explodedArchive20.getManifestFile(file26);
        java.util.Iterator<java.io.File> fileItor28 = fileEntryIterator17.listFiles(file27);
        java.util.Comparator<java.io.File> fileComparator29 = fileEntryIterator17.entryComparator;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator30 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file31 = null;
        fileEntryIterator30.current = file31;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive33 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest34 = explodedArchive33.manifest;
        explodedArchive33.recursive = false;
        java.util.jar.Manifest manifest37 = explodedArchive33.manifest;
        java.io.File file38 = explodedArchive33.manifestFile;
        java.io.File file39 = null;
        java.io.File file40 = explodedArchive33.getManifestFile(file39);
        java.util.Iterator<java.io.File> fileItor41 = fileEntryIterator30.listFiles(file40);
        java.io.File file42 = fileEntryIterator30.current;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator43 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file44 = null;
        fileEntryIterator43.current = file44;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive46 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest47 = explodedArchive46.manifest;
        explodedArchive46.recursive = false;
        java.util.jar.Manifest manifest50 = explodedArchive46.manifest;
        java.io.File file51 = explodedArchive46.manifestFile;
        java.io.File file52 = null;
        java.io.File file53 = explodedArchive46.getManifestFile(file52);
        java.util.Iterator<java.io.File> fileItor54 = fileEntryIterator43.listFiles(file53);
        java.io.File file55 = fileEntryIterator43.current;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator56 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file57 = null;
        fileEntryIterator56.current = file57;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive59 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest60 = explodedArchive59.manifest;
        explodedArchive59.recursive = false;
        java.util.jar.Manifest manifest63 = explodedArchive59.manifest;
        java.io.File file64 = explodedArchive59.manifestFile;
        java.io.File file65 = null;
        java.io.File file66 = explodedArchive59.getManifestFile(file65);
        java.util.Iterator<java.io.File> fileItor67 = fileEntryIterator56.listFiles(file66);
        java.util.ArrayDeque<java.util.Iterator<java.io.File>> fileItorQueue68 = new java.util.ArrayDeque<java.util.Iterator<java.io.File>>();
        boolean boolean69 = fileItorQueue68.add(fileItor67);
        fileEntryIterator43.stack = fileItorQueue68;
        fileEntryIterator30.stack = fileItorQueue68;
        fileEntryIterator17.stack = fileItorQueue68;
        fileEntryIterator0.stack = fileItorQueue68;
        java.util.Comparator<java.io.File> fileComparator74 = fileEntryIterator0.entryComparator;
        java.io.File file75 = fileEntryIterator0.current;
        // The following exception was thrown during execution in test generation
        try {
            fileEntryIterator0.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: remove");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file27.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file27.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file40.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file40.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file53.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file53.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file66.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file66.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file75);
    }

    @Test
    public void test529() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test529");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file1 = null;
        fileEntryIterator0.current = file1;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive3 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest4 = explodedArchive3.manifest;
        explodedArchive3.recursive = false;
        java.util.jar.Manifest manifest7 = explodedArchive3.manifest;
        java.io.File file8 = explodedArchive3.manifestFile;
        java.io.File file9 = null;
        java.io.File file10 = explodedArchive3.getManifestFile(file9);
        java.util.Iterator<java.io.File> fileItor11 = fileEntryIterator0.listFiles(file10);
        java.io.File file12 = fileEntryIterator0.root;
        java.io.File file13 = fileEntryIterator0.root;
        java.util.Deque<java.util.Iterator<java.io.File>> fileItorQueue14 = fileEntryIterator0.stack;
        java.io.File file15 = fileEntryIterator0.root;
        // The following exception was thrown during execution in test generation
        try {
            fileEntryIterator0.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: remove");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItorQueue14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file15);
    }

    @Test
    public void test530() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test530");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file1 = null;
        fileEntryIterator0.current = file1;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive3 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest4 = explodedArchive3.manifest;
        explodedArchive3.recursive = false;
        java.util.jar.Manifest manifest7 = explodedArchive3.manifest;
        java.io.File file8 = explodedArchive3.manifestFile;
        java.io.File file9 = null;
        java.io.File file10 = explodedArchive3.getManifestFile(file9);
        java.util.Iterator<java.io.File> fileItor11 = fileEntryIterator0.listFiles(file10);
        java.io.File file12 = fileEntryIterator0.current;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator13 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file14 = null;
        fileEntryIterator13.current = file14;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive16 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest17 = explodedArchive16.manifest;
        explodedArchive16.recursive = false;
        java.util.jar.Manifest manifest20 = explodedArchive16.manifest;
        java.io.File file21 = explodedArchive16.manifestFile;
        java.io.File file22 = null;
        java.io.File file23 = explodedArchive16.getManifestFile(file22);
        java.util.Iterator<java.io.File> fileItor24 = fileEntryIterator13.listFiles(file23);
        java.util.ArrayDeque<java.util.Iterator<java.io.File>> fileItorQueue25 = new java.util.ArrayDeque<java.util.Iterator<java.io.File>>();
        boolean boolean26 = fileItorQueue25.add(fileItor24);
        fileEntryIterator0.stack = fileItorQueue25;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive28 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest29 = explodedArchive28.manifest;
        explodedArchive28.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive32 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest33 = explodedArchive32.manifest;
        explodedArchive32.recursive = false;
        java.util.jar.Manifest manifest36 = explodedArchive32.manifest;
        java.io.File file37 = explodedArchive32.manifestFile;
        java.io.File file38 = null;
        java.io.File file39 = explodedArchive32.getManifestFile(file38);
        explodedArchive28.manifestFile = file38;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive41 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest42 = explodedArchive41.manifest;
        explodedArchive41.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive45 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest46 = explodedArchive45.manifest;
        explodedArchive45.recursive = false;
        java.util.jar.Manifest manifest49 = explodedArchive45.manifest;
        java.io.File file50 = explodedArchive45.manifestFile;
        java.io.File file51 = null;
        java.io.File file52 = explodedArchive45.getManifestFile(file51);
        explodedArchive41.manifestFile = file51;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive54 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest55 = explodedArchive54.manifest;
        explodedArchive54.recursive = false;
        java.util.jar.Manifest manifest58 = explodedArchive54.manifest;
        java.io.File file59 = explodedArchive54.manifestFile;
        java.io.File file60 = null;
        java.io.File file61 = explodedArchive54.getManifestFile(file60);
        explodedArchive41.manifestFile = file61;
        explodedArchive28.root = file61;
        java.util.Iterator<java.io.File> fileItor64 = fileEntryIterator0.listFiles(file61);
        java.io.File file65 = fileEntryIterator0.current;
        boolean boolean66 = fileEntryIterator0.recursive;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file23.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file23.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file39.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file39.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file52.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file52.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file61.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file61.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
    }

    @Test
    public void test531() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test531");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        boolean boolean1 = fileEntryIterator0.recursive;
        java.io.File file2 = fileEntryIterator0.current;
        boolean boolean3 = fileEntryIterator0.hasNext();
        boolean boolean4 = fileEntryIterator0.recursive;
        fileEntryIterator0.recursive = false;
        java.util.Comparator<java.io.File> fileComparator7 = fileEntryIterator0.entryComparator;
        java.io.File file8 = fileEntryIterator0.root;
        boolean boolean9 = fileEntryIterator0.recursive;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test532() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test532");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file1 = null;
        fileEntryIterator0.current = file1;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive3 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest4 = explodedArchive3.manifest;
        explodedArchive3.recursive = false;
        java.util.jar.Manifest manifest7 = explodedArchive3.manifest;
        java.io.File file8 = explodedArchive3.manifestFile;
        java.io.File file9 = null;
        java.io.File file10 = explodedArchive3.getManifestFile(file9);
        java.util.Iterator<java.io.File> fileItor11 = fileEntryIterator0.listFiles(file10);
        java.util.Comparator<java.io.File> fileComparator12 = fileEntryIterator0.entryComparator;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator13 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file14 = null;
        fileEntryIterator13.current = file14;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive16 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest17 = explodedArchive16.manifest;
        explodedArchive16.recursive = false;
        java.util.jar.Manifest manifest20 = explodedArchive16.manifest;
        java.io.File file21 = explodedArchive16.manifestFile;
        java.io.File file22 = null;
        java.io.File file23 = explodedArchive16.getManifestFile(file22);
        java.util.Iterator<java.io.File> fileItor24 = fileEntryIterator13.listFiles(file23);
        java.io.File file25 = fileEntryIterator13.current;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator26 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file27 = null;
        fileEntryIterator26.current = file27;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive29 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest30 = explodedArchive29.manifest;
        explodedArchive29.recursive = false;
        java.util.jar.Manifest manifest33 = explodedArchive29.manifest;
        java.io.File file34 = explodedArchive29.manifestFile;
        java.io.File file35 = null;
        java.io.File file36 = explodedArchive29.getManifestFile(file35);
        java.util.Iterator<java.io.File> fileItor37 = fileEntryIterator26.listFiles(file36);
        java.io.File file38 = fileEntryIterator26.current;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator39 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file40 = null;
        fileEntryIterator39.current = file40;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive42 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest43 = explodedArchive42.manifest;
        explodedArchive42.recursive = false;
        java.util.jar.Manifest manifest46 = explodedArchive42.manifest;
        java.io.File file47 = explodedArchive42.manifestFile;
        java.io.File file48 = null;
        java.io.File file49 = explodedArchive42.getManifestFile(file48);
        java.util.Iterator<java.io.File> fileItor50 = fileEntryIterator39.listFiles(file49);
        java.util.ArrayDeque<java.util.Iterator<java.io.File>> fileItorQueue51 = new java.util.ArrayDeque<java.util.Iterator<java.io.File>>();
        boolean boolean52 = fileItorQueue51.add(fileItor50);
        fileEntryIterator26.stack = fileItorQueue51;
        fileEntryIterator13.stack = fileItorQueue51;
        fileEntryIterator0.stack = fileItorQueue51;
        boolean boolean56 = fileEntryIterator0.hasNext();
        java.io.File file57 = fileEntryIterator0.root;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file23.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file23.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file36.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file36.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file49.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file49.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file57);
    }

    @Test
    public void test533() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test533");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntry fileEntry0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntry();
        java.lang.String str1 = fileEntry0.getName();
        java.lang.String str2 = fileEntry0.getName();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator3 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator4 = entryComparator3.reversed();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive5 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file6 = explodedArchive5.root;
        java.io.File file7 = null;
        explodedArchive5.manifestFile = file7;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive9 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest10 = explodedArchive9.manifest;
        explodedArchive9.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive13 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest14 = explodedArchive13.manifest;
        explodedArchive13.recursive = false;
        java.util.jar.Manifest manifest17 = explodedArchive13.manifest;
        java.io.File file18 = explodedArchive13.manifestFile;
        java.io.File file19 = null;
        java.io.File file20 = explodedArchive13.getManifestFile(file19);
        explodedArchive9.manifestFile = file19;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive22 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest23 = explodedArchive22.manifest;
        explodedArchive22.recursive = false;
        java.util.jar.Manifest manifest26 = explodedArchive22.manifest;
        java.io.File file27 = explodedArchive22.manifestFile;
        java.io.File file28 = null;
        java.io.File file29 = explodedArchive22.getManifestFile(file28);
        explodedArchive9.manifestFile = file29;
        java.io.File file31 = explodedArchive5.getManifestFile(file29);
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive32 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest33 = explodedArchive32.manifest;
        explodedArchive32.recursive = false;
        java.io.File file36 = null;
        explodedArchive32.root = file36;
        java.io.File file38 = explodedArchive32.root;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive39 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest40 = explodedArchive39.manifest;
        explodedArchive39.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive43 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest44 = explodedArchive43.manifest;
        explodedArchive43.recursive = false;
        java.util.jar.Manifest manifest47 = explodedArchive43.manifest;
        java.io.File file48 = explodedArchive43.manifestFile;
        java.io.File file49 = null;
        java.io.File file50 = explodedArchive43.getManifestFile(file49);
        explodedArchive39.manifestFile = file49;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive52 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest53 = explodedArchive52.manifest;
        explodedArchive52.recursive = false;
        java.util.jar.Manifest manifest56 = explodedArchive52.manifest;
        java.io.File file57 = explodedArchive52.manifestFile;
        java.io.File file58 = null;
        java.io.File file59 = explodedArchive52.getManifestFile(file58);
        explodedArchive39.manifestFile = file59;
        java.io.File file61 = explodedArchive32.getManifestFile(file59);
        int int62 = entryComparator3.compare(file31, file59);
        fileEntry0.file = file59;
        java.io.File file64 = fileEntry0.getFile();
        java.io.File file65 = fileEntry0.getFile();
        fileEntry0.name = "file:/server/study-execution/new-nimrod/nimrod-hunoroutput-test-dest/spring-boot/af20dc6cc45c032573413c401f9f73aa75371744/randoop_1/META-INF/MANIFEST.MF";
        java.lang.String str68 = fileEntry0.getName();
        boolean boolean69 = fileEntry0.isDirectory();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file20.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file20.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file29.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file29.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file31.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file31.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file50.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file50.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file59.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file59.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file61.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file61.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 21 + "'", int62 == 21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file64.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file64.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file65.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file65.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str68 + "' != '" + "file:/server/study-execution/new-nimrod/nimrod-hunoroutput-test-dest/spring-boot/af20dc6cc45c032573413c401f9f73aa75371744/randoop_1/META-INF/MANIFEST.MF" + "'", str68.equals("file:/server/study-execution/new-nimrod/nimrod-hunoroutput-test-dest/spring-boot/af20dc6cc45c032573413c401f9f73aa75371744/randoop_1/META-INF/MANIFEST.MF"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
    }

    @Test
    public void test534() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test534");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntry fileEntry0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntry();
        java.io.File file1 = fileEntry0.file;
        java.lang.String str2 = fileEntry0.name;
        java.io.File file3 = fileEntry0.file;
        java.lang.String str4 = fileEntry0.getName();
        fileEntry0.name = "";
        java.lang.String str7 = fileEntry0.getName();
        java.io.File file8 = fileEntry0.file;
        java.lang.String str9 = fileEntry0.getName();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str7 + "' != '" + "" + "'", str7.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str9 + "' != '" + "" + "'", str9.equals(""));
    }

    @Test
    public void test535() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test535");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntry fileEntry0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntry();
        java.io.File file1 = fileEntry0.file;
        java.lang.String str2 = fileEntry0.name;
        java.io.File file3 = fileEntry0.file;
        java.io.File file4 = fileEntry0.file;
        fileEntry0.name = "file:/server/study-execution/new-nimrod/nimrod-hunoroutput-test-dest/spring-boot/af20dc6cc45c032573413c401f9f73aa75371744/randoop_1/META-INF/MANIFEST.MF";
        java.lang.String str7 = fileEntry0.getName();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str7 + "' != '" + "file:/server/study-execution/new-nimrod/nimrod-hunoroutput-test-dest/spring-boot/af20dc6cc45c032573413c401f9f73aa75371744/randoop_1/META-INF/MANIFEST.MF" + "'", str7.equals("file:/server/study-execution/new-nimrod/nimrod-hunoroutput-test-dest/spring-boot/af20dc6cc45c032573413c401f9f73aa75371744/randoop_1/META-INF/MANIFEST.MF"));
    }

    @Test
    public void test536() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test536");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file1 = null;
        fileEntryIterator0.current = file1;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive3 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest4 = explodedArchive3.manifest;
        explodedArchive3.recursive = false;
        java.util.jar.Manifest manifest7 = explodedArchive3.manifest;
        java.io.File file8 = explodedArchive3.manifestFile;
        java.io.File file9 = null;
        java.io.File file10 = explodedArchive3.getManifestFile(file9);
        java.util.Iterator<java.io.File> fileItor11 = fileEntryIterator0.listFiles(file10);
        java.io.File file12 = fileEntryIterator0.root;
        java.io.File file13 = fileEntryIterator0.poll();
        fileEntryIterator0.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive16 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest17 = explodedArchive16.manifest;
        java.util.jar.Manifest manifest18 = null;
        explodedArchive16.manifest = manifest18;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntry fileEntry20 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntry();
        java.lang.String str21 = fileEntry20.name;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator22 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file23 = null;
        fileEntryIterator22.current = file23;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive25 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest26 = explodedArchive25.manifest;
        explodedArchive25.recursive = false;
        java.util.jar.Manifest manifest29 = explodedArchive25.manifest;
        java.io.File file30 = explodedArchive25.manifestFile;
        java.io.File file31 = null;
        java.io.File file32 = explodedArchive25.getManifestFile(file31);
        java.util.Iterator<java.io.File> fileItor33 = fileEntryIterator22.listFiles(file32);
        java.io.File file34 = fileEntryIterator22.current;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator35 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file36 = null;
        fileEntryIterator35.current = file36;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive38 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest39 = explodedArchive38.manifest;
        explodedArchive38.recursive = false;
        java.util.jar.Manifest manifest42 = explodedArchive38.manifest;
        java.io.File file43 = explodedArchive38.manifestFile;
        java.io.File file44 = null;
        java.io.File file45 = explodedArchive38.getManifestFile(file44);
        java.util.Iterator<java.io.File> fileItor46 = fileEntryIterator35.listFiles(file45);
        java.util.ArrayDeque<java.util.Iterator<java.io.File>> fileItorQueue47 = new java.util.ArrayDeque<java.util.Iterator<java.io.File>>();
        boolean boolean48 = fileItorQueue47.add(fileItor46);
        fileEntryIterator22.stack = fileItorQueue47;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive50 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest51 = explodedArchive50.manifest;
        explodedArchive50.recursive = false;
        java.io.File file54 = null;
        explodedArchive50.root = file54;
        java.io.File file56 = explodedArchive50.root;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive57 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest58 = explodedArchive57.manifest;
        explodedArchive57.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive61 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest62 = explodedArchive61.manifest;
        explodedArchive61.recursive = false;
        java.util.jar.Manifest manifest65 = explodedArchive61.manifest;
        java.io.File file66 = explodedArchive61.manifestFile;
        java.io.File file67 = null;
        java.io.File file68 = explodedArchive61.getManifestFile(file67);
        explodedArchive57.manifestFile = file67;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive70 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest71 = explodedArchive70.manifest;
        explodedArchive70.recursive = false;
        java.util.jar.Manifest manifest74 = explodedArchive70.manifest;
        java.io.File file75 = explodedArchive70.manifestFile;
        java.io.File file76 = null;
        java.io.File file77 = explodedArchive70.getManifestFile(file76);
        explodedArchive57.manifestFile = file77;
        java.io.File file79 = explodedArchive50.getManifestFile(file77);
        fileEntryIterator22.root = file77;
        fileEntry20.file = file77;
        java.io.File file82 = explodedArchive16.getManifestFile(file77);
        java.util.jar.Manifest manifest83 = null;
        explodedArchive16.manifest = manifest83;
        java.io.File file85 = null;
        java.io.File file86 = explodedArchive16.getManifestFile(file85);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator<java.io.File> fileItor87 = fileEntryIterator0.listFiles(file85);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file32.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file32.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file45.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file45.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file68.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file68.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file75);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file77);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file77.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file77.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file79);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file79.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file79.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file82);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file82.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file82.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file86);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file86.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file86.toString(), "META-INF/MANIFEST.MF");
    }

    @Test
    public void test537() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test537");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file1 = null;
        fileEntryIterator0.current = file1;
        fileEntryIterator0.recursive = true;
        fileEntryIterator0.recursive = true;
        boolean boolean7 = fileEntryIterator0.hasNext();
        java.util.Deque<java.util.Iterator<java.io.File>> fileItorQueue8 = fileEntryIterator0.stack;
        boolean boolean9 = fileEntryIterator0.hasNext();
        fileEntryIterator0.recursive = false;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItorQueue8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test538() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test538");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file1 = null;
        fileEntryIterator0.current = file1;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive3 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest4 = explodedArchive3.manifest;
        explodedArchive3.recursive = false;
        java.util.jar.Manifest manifest7 = explodedArchive3.manifest;
        java.io.File file8 = explodedArchive3.manifestFile;
        java.io.File file9 = null;
        java.io.File file10 = explodedArchive3.getManifestFile(file9);
        java.util.Iterator<java.io.File> fileItor11 = fileEntryIterator0.listFiles(file10);
        java.io.File file12 = fileEntryIterator0.current;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator13 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file14 = null;
        fileEntryIterator13.current = file14;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive16 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest17 = explodedArchive16.manifest;
        explodedArchive16.recursive = false;
        java.util.jar.Manifest manifest20 = explodedArchive16.manifest;
        java.io.File file21 = explodedArchive16.manifestFile;
        java.io.File file22 = null;
        java.io.File file23 = explodedArchive16.getManifestFile(file22);
        java.util.Iterator<java.io.File> fileItor24 = fileEntryIterator13.listFiles(file23);
        java.util.ArrayDeque<java.util.Iterator<java.io.File>> fileItorQueue25 = new java.util.ArrayDeque<java.util.Iterator<java.io.File>>();
        boolean boolean26 = fileItorQueue25.add(fileItor24);
        fileEntryIterator0.stack = fileItorQueue25;
        java.util.Deque<java.util.Iterator<java.io.File>> fileItorQueue28 = fileEntryIterator0.stack;
        boolean boolean29 = fileEntryIterator0.recursive;
        java.util.Comparator<java.io.File> fileComparator30 = fileEntryIterator0.entryComparator;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntry fileEntry31 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntry();
        java.io.File file32 = fileEntry31.file;
        java.lang.String str33 = fileEntry31.name;
        java.io.File file34 = fileEntry31.file;
        java.io.File file35 = fileEntry31.file;
        java.lang.String str36 = fileEntry31.name;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive37 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.lang.String str38 = explodedArchive37.toString();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive39 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file40 = explodedArchive39.root;
        java.io.File file41 = null;
        explodedArchive39.manifestFile = file41;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive43 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest44 = explodedArchive43.manifest;
        explodedArchive43.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive47 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest48 = explodedArchive47.manifest;
        explodedArchive47.recursive = false;
        java.util.jar.Manifest manifest51 = explodedArchive47.manifest;
        java.io.File file52 = explodedArchive47.manifestFile;
        java.io.File file53 = null;
        java.io.File file54 = explodedArchive47.getManifestFile(file53);
        explodedArchive43.manifestFile = file53;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive56 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest57 = explodedArchive56.manifest;
        explodedArchive56.recursive = false;
        java.util.jar.Manifest manifest60 = explodedArchive56.manifest;
        java.io.File file61 = explodedArchive56.manifestFile;
        java.io.File file62 = null;
        java.io.File file63 = explodedArchive56.getManifestFile(file62);
        explodedArchive43.manifestFile = file63;
        java.io.File file65 = explodedArchive39.getManifestFile(file63);
        java.io.File file66 = explodedArchive37.getManifestFile(file63);
        fileEntry31.file = file63;
        fileEntryIterator0.current = file63;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator69 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file70 = null;
        fileEntryIterator69.current = file70;
        fileEntryIterator69.recursive = true;
        fileEntryIterator69.recursive = true;
        boolean boolean76 = fileEntryIterator69.hasNext();
        java.util.Deque<java.util.Iterator<java.io.File>> fileItorQueue77 = fileEntryIterator69.stack;
        fileEntryIterator0.stack = fileItorQueue77;
        java.util.Comparator<java.io.File> fileComparator79 = fileEntryIterator0.entryComparator;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file23.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file23.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItorQueue28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str38 + "' != '" + "exploded archive" + "'", str38.equals("exploded archive"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file54.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file54.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file63.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file63.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file65.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file65.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file66.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file66.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItorQueue77);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator79);
    }

    @Test
    public void test539() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test539");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntry fileEntry0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntry();
        java.io.File file1 = fileEntry0.getFile();
        java.io.File file2 = fileEntry0.getFile();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive3 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file4 = explodedArchive3.root;
        java.io.File file5 = null;
        explodedArchive3.manifestFile = file5;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive7 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest8 = explodedArchive7.manifest;
        explodedArchive7.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive11 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest12 = explodedArchive11.manifest;
        explodedArchive11.recursive = false;
        java.util.jar.Manifest manifest15 = explodedArchive11.manifest;
        java.io.File file16 = explodedArchive11.manifestFile;
        java.io.File file17 = null;
        java.io.File file18 = explodedArchive11.getManifestFile(file17);
        explodedArchive7.manifestFile = file17;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive20 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest21 = explodedArchive20.manifest;
        explodedArchive20.recursive = false;
        java.util.jar.Manifest manifest24 = explodedArchive20.manifest;
        java.io.File file25 = explodedArchive20.manifestFile;
        java.io.File file26 = null;
        java.io.File file27 = explodedArchive20.getManifestFile(file26);
        explodedArchive7.manifestFile = file27;
        java.io.File file29 = explodedArchive3.getManifestFile(file27);
        fileEntry0.file = file29;
        java.io.File file31 = fileEntry0.file;
        fileEntry0.name = "exploded archive";
        java.io.File file34 = fileEntry0.file;
        java.lang.String str35 = fileEntry0.name;
        java.lang.String str36 = fileEntry0.getName();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file18.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file18.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file27.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file27.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file29.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file29.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file31.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file31.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file34.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file34.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str35 + "' != '" + "exploded archive" + "'", str35.equals("exploded archive"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str36 + "' != '" + "exploded archive" + "'", str36.equals("exploded archive"));
    }

    @Test
    public void test540() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test540");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file1 = explodedArchive0.root;
        java.io.File file2 = explodedArchive0.manifestFile;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive3 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest4 = explodedArchive3.manifest;
        explodedArchive3.recursive = false;
        java.io.File file7 = null;
        explodedArchive3.root = file7;
        java.io.File file9 = explodedArchive3.root;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive10 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest11 = explodedArchive10.manifest;
        explodedArchive10.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive14 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest15 = explodedArchive14.manifest;
        explodedArchive14.recursive = false;
        java.util.jar.Manifest manifest18 = explodedArchive14.manifest;
        java.io.File file19 = explodedArchive14.manifestFile;
        java.io.File file20 = null;
        java.io.File file21 = explodedArchive14.getManifestFile(file20);
        explodedArchive10.manifestFile = file20;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive23 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest24 = explodedArchive23.manifest;
        explodedArchive23.recursive = false;
        java.util.jar.Manifest manifest27 = explodedArchive23.manifest;
        java.io.File file28 = explodedArchive23.manifestFile;
        java.io.File file29 = null;
        java.io.File file30 = explodedArchive23.getManifestFile(file29);
        explodedArchive10.manifestFile = file30;
        java.io.File file32 = explodedArchive3.getManifestFile(file30);
        boolean boolean33 = explodedArchive3.recursive;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntry fileEntry34 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntry();
        java.lang.String str35 = fileEntry34.name;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator36 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file37 = null;
        fileEntryIterator36.current = file37;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive39 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.lang.String str40 = explodedArchive39.toString();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive41 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file42 = explodedArchive41.root;
        java.io.File file43 = null;
        explodedArchive41.manifestFile = file43;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive45 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest46 = explodedArchive45.manifest;
        explodedArchive45.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive49 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest50 = explodedArchive49.manifest;
        explodedArchive49.recursive = false;
        java.util.jar.Manifest manifest53 = explodedArchive49.manifest;
        java.io.File file54 = explodedArchive49.manifestFile;
        java.io.File file55 = null;
        java.io.File file56 = explodedArchive49.getManifestFile(file55);
        explodedArchive45.manifestFile = file55;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive58 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest59 = explodedArchive58.manifest;
        explodedArchive58.recursive = false;
        java.util.jar.Manifest manifest62 = explodedArchive58.manifest;
        java.io.File file63 = explodedArchive58.manifestFile;
        java.io.File file64 = null;
        java.io.File file65 = explodedArchive58.getManifestFile(file64);
        explodedArchive45.manifestFile = file65;
        java.io.File file67 = explodedArchive41.getManifestFile(file65);
        java.io.File file68 = explodedArchive39.getManifestFile(file65);
        fileEntryIterator36.root = file65;
        fileEntry34.file = file65;
        java.io.File file71 = explodedArchive3.getManifestFile(file65);
        java.io.File file72 = explodedArchive0.getManifestFile(file71);
        // The following exception was thrown during execution in test generation
        try {
            org.springframework.boot.loader.archive.ExplodedArchive explodedArchive73 = new org.springframework.boot.loader.archive.ExplodedArchive(file72);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid source folder META-INF/MANIFEST.MF/META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file21.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file21.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file30.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file30.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file32.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file32.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str40 + "' != '" + "exploded archive" + "'", str40.equals("exploded archive"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file56.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file56.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file65.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file65.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file67.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file67.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file68.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file68.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file71.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file71.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file72.getParent(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file72.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
    }

    @Test
    public void test541() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test541");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        boolean boolean1 = fileEntryIterator0.hasNext();
        java.io.File file2 = fileEntryIterator0.root;
        java.io.File file3 = fileEntryIterator0.current;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator4 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file5 = null;
        fileEntryIterator4.current = file5;
        fileEntryIterator4.recursive = true;
        java.util.Deque<java.util.Iterator<java.io.File>> fileItorQueue9 = fileEntryIterator4.stack;
        fileEntryIterator0.stack = fileItorQueue9;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntry fileEntry11 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntry();
        java.io.File file12 = fileEntry11.file;
        java.lang.String str13 = fileEntry11.name;
        java.io.File file14 = fileEntry11.file;
        java.io.File file15 = fileEntry11.file;
        java.lang.String str16 = fileEntry11.getName();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntry fileEntry17 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntry();
        java.lang.String str18 = fileEntry17.name;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator19 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file20 = null;
        fileEntryIterator19.current = file20;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive22 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.lang.String str23 = explodedArchive22.toString();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive24 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file25 = explodedArchive24.root;
        java.io.File file26 = null;
        explodedArchive24.manifestFile = file26;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive28 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest29 = explodedArchive28.manifest;
        explodedArchive28.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive32 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest33 = explodedArchive32.manifest;
        explodedArchive32.recursive = false;
        java.util.jar.Manifest manifest36 = explodedArchive32.manifest;
        java.io.File file37 = explodedArchive32.manifestFile;
        java.io.File file38 = null;
        java.io.File file39 = explodedArchive32.getManifestFile(file38);
        explodedArchive28.manifestFile = file38;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive41 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest42 = explodedArchive41.manifest;
        explodedArchive41.recursive = false;
        java.util.jar.Manifest manifest45 = explodedArchive41.manifest;
        java.io.File file46 = explodedArchive41.manifestFile;
        java.io.File file47 = null;
        java.io.File file48 = explodedArchive41.getManifestFile(file47);
        explodedArchive28.manifestFile = file48;
        java.io.File file50 = explodedArchive24.getManifestFile(file48);
        java.io.File file51 = explodedArchive22.getManifestFile(file48);
        fileEntryIterator19.root = file48;
        fileEntry17.file = file48;
        fileEntry11.file = file48;
        fileEntry11.name = "exploded archive";
        boolean boolean57 = fileEntry11.isDirectory();
        java.io.File file58 = fileEntry11.getFile();
        fileEntryIterator0.current = file58;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItorQueue9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str23 + "' != '" + "exploded archive" + "'", str23.equals("exploded archive"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file39.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file39.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file48.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file48.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file50.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file50.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file51.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file51.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file58.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file58.toString(), "META-INF/MANIFEST.MF");
    }

    @Test
    public void test542() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test542");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntry fileEntry0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntry();
        java.io.File file1 = fileEntry0.getFile();
        java.io.File file2 = fileEntry0.getFile();
        java.lang.String str3 = fileEntry0.name;
        fileEntry0.name = "";
        java.io.File file6 = fileEntry0.file;
        java.io.File file7 = fileEntry0.getFile();
        java.io.File file8 = fileEntry0.file;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator9 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file10 = null;
        fileEntryIterator9.current = file10;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive12 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest13 = explodedArchive12.manifest;
        explodedArchive12.recursive = false;
        java.util.jar.Manifest manifest16 = explodedArchive12.manifest;
        java.io.File file17 = explodedArchive12.manifestFile;
        java.io.File file18 = null;
        java.io.File file19 = explodedArchive12.getManifestFile(file18);
        java.util.Iterator<java.io.File> fileItor20 = fileEntryIterator9.listFiles(file19);
        java.io.File file21 = fileEntryIterator9.root;
        java.io.File file22 = fileEntryIterator9.root;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator23 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file24 = null;
        fileEntryIterator23.current = file24;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive26 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest27 = explodedArchive26.manifest;
        explodedArchive26.recursive = false;
        java.util.jar.Manifest manifest30 = explodedArchive26.manifest;
        java.io.File file31 = explodedArchive26.manifestFile;
        java.io.File file32 = null;
        java.io.File file33 = explodedArchive26.getManifestFile(file32);
        java.util.Iterator<java.io.File> fileItor34 = fileEntryIterator23.listFiles(file33);
        java.util.ArrayDeque<java.util.Iterator<java.io.File>> fileItorQueue35 = new java.util.ArrayDeque<java.util.Iterator<java.io.File>>();
        boolean boolean36 = fileItorQueue35.add(fileItor34);
        fileEntryIterator9.stack = fileItorQueue35;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive38 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest39 = explodedArchive38.manifest;
        explodedArchive38.recursive = false;
        java.io.File file42 = null;
        explodedArchive38.root = file42;
        java.io.File file44 = explodedArchive38.root;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive45 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest46 = explodedArchive45.manifest;
        explodedArchive45.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive49 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest50 = explodedArchive49.manifest;
        explodedArchive49.recursive = false;
        java.util.jar.Manifest manifest53 = explodedArchive49.manifest;
        java.io.File file54 = explodedArchive49.manifestFile;
        java.io.File file55 = null;
        java.io.File file56 = explodedArchive49.getManifestFile(file55);
        explodedArchive45.manifestFile = file55;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive58 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest59 = explodedArchive58.manifest;
        explodedArchive58.recursive = false;
        java.util.jar.Manifest manifest62 = explodedArchive58.manifest;
        java.io.File file63 = explodedArchive58.manifestFile;
        java.io.File file64 = null;
        java.io.File file65 = explodedArchive58.getManifestFile(file64);
        explodedArchive45.manifestFile = file65;
        java.io.File file67 = explodedArchive38.getManifestFile(file65);
        fileEntryIterator9.current = file65;
        fileEntry0.file = file65;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file19.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file19.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file33.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file33.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file56.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file56.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file65.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file65.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file67.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file67.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
    }

    @Test
    public void test543() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test543");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file1 = null;
        fileEntryIterator0.current = file1;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive3 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.lang.String str4 = explodedArchive3.toString();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive5 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file6 = explodedArchive5.root;
        java.io.File file7 = null;
        explodedArchive5.manifestFile = file7;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive9 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest10 = explodedArchive9.manifest;
        explodedArchive9.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive13 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest14 = explodedArchive13.manifest;
        explodedArchive13.recursive = false;
        java.util.jar.Manifest manifest17 = explodedArchive13.manifest;
        java.io.File file18 = explodedArchive13.manifestFile;
        java.io.File file19 = null;
        java.io.File file20 = explodedArchive13.getManifestFile(file19);
        explodedArchive9.manifestFile = file19;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive22 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest23 = explodedArchive22.manifest;
        explodedArchive22.recursive = false;
        java.util.jar.Manifest manifest26 = explodedArchive22.manifest;
        java.io.File file27 = explodedArchive22.manifestFile;
        java.io.File file28 = null;
        java.io.File file29 = explodedArchive22.getManifestFile(file28);
        explodedArchive9.manifestFile = file29;
        java.io.File file31 = explodedArchive5.getManifestFile(file29);
        java.io.File file32 = explodedArchive3.getManifestFile(file29);
        fileEntryIterator0.root = file29;
        java.io.File file34 = fileEntryIterator0.poll();
        java.util.Comparator<java.io.File> fileComparator35 = fileEntryIterator0.entryComparator;
        java.util.Comparator<java.io.File> fileComparator36 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Comparator<java.io.File> fileComparator37 = fileComparator35.thenComparing(fileComparator36);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str4 + "' != '" + "exploded archive" + "'", str4.equals("exploded archive"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file20.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file20.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file29.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file29.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file31.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file31.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file32.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file32.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator35);
    }

    @Test
    public void test544() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test544");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntry fileEntry0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntry();
        java.io.File file1 = fileEntry0.file;
        java.lang.String str2 = fileEntry0.name;
        java.io.File file3 = fileEntry0.file;
        java.io.File file4 = fileEntry0.file;
        java.lang.String str5 = fileEntry0.name;
        java.lang.String str6 = fileEntry0.getName();
        java.io.File file7 = fileEntry0.getFile();
        fileEntry0.name = "hi!";
        java.io.File file10 = fileEntry0.getFile();
        fileEntry0.name = "";
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file10);
    }

    @Test
    public void test545() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test545");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file1 = null;
        fileEntryIterator0.current = file1;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive3 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest4 = explodedArchive3.manifest;
        explodedArchive3.recursive = false;
        java.util.jar.Manifest manifest7 = explodedArchive3.manifest;
        java.io.File file8 = explodedArchive3.manifestFile;
        java.io.File file9 = null;
        java.io.File file10 = explodedArchive3.getManifestFile(file9);
        java.util.Iterator<java.io.File> fileItor11 = fileEntryIterator0.listFiles(file10);
        java.io.File file12 = fileEntryIterator0.root;
        java.io.File file13 = fileEntryIterator0.root;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator14 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file15 = null;
        fileEntryIterator14.current = file15;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive17 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest18 = explodedArchive17.manifest;
        explodedArchive17.recursive = false;
        java.util.jar.Manifest manifest21 = explodedArchive17.manifest;
        java.io.File file22 = explodedArchive17.manifestFile;
        java.io.File file23 = null;
        java.io.File file24 = explodedArchive17.getManifestFile(file23);
        java.util.Iterator<java.io.File> fileItor25 = fileEntryIterator14.listFiles(file24);
        java.util.ArrayDeque<java.util.Iterator<java.io.File>> fileItorQueue26 = new java.util.ArrayDeque<java.util.Iterator<java.io.File>>();
        boolean boolean27 = fileItorQueue26.add(fileItor25);
        fileEntryIterator0.stack = fileItorQueue26;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator29 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file30 = null;
        fileEntryIterator29.current = file30;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive32 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest33 = explodedArchive32.manifest;
        explodedArchive32.recursive = false;
        java.util.jar.Manifest manifest36 = explodedArchive32.manifest;
        java.io.File file37 = explodedArchive32.manifestFile;
        java.io.File file38 = null;
        java.io.File file39 = explodedArchive32.getManifestFile(file38);
        java.util.Iterator<java.io.File> fileItor40 = fileEntryIterator29.listFiles(file39);
        java.io.File file41 = fileEntryIterator29.root;
        java.io.File file42 = fileEntryIterator29.root;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator43 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file44 = null;
        fileEntryIterator43.current = file44;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive46 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest47 = explodedArchive46.manifest;
        explodedArchive46.recursive = false;
        java.util.jar.Manifest manifest50 = explodedArchive46.manifest;
        java.io.File file51 = explodedArchive46.manifestFile;
        java.io.File file52 = null;
        java.io.File file53 = explodedArchive46.getManifestFile(file52);
        java.util.Iterator<java.io.File> fileItor54 = fileEntryIterator43.listFiles(file53);
        java.util.ArrayDeque<java.util.Iterator<java.io.File>> fileItorQueue55 = new java.util.ArrayDeque<java.util.Iterator<java.io.File>>();
        boolean boolean56 = fileItorQueue55.add(fileItor54);
        fileEntryIterator29.stack = fileItorQueue55;
        fileEntryIterator0.stack = fileItorQueue55;
        boolean boolean59 = fileEntryIterator0.recursive;
        java.util.Deque<java.util.Iterator<java.io.File>> fileItorQueue60 = fileEntryIterator0.stack;
        boolean boolean61 = fileEntryIterator0.recursive;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file24.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file24.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file39.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file39.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file53.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file53.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItorQueue60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
    }

    @Test
    public void test546() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test546");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest1 = explodedArchive0.manifest;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntry fileEntry2 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntry();
        java.io.File file3 = fileEntry2.getFile();
        java.io.File file4 = fileEntry2.getFile();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive5 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file6 = explodedArchive5.root;
        java.io.File file7 = null;
        explodedArchive5.manifestFile = file7;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive9 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest10 = explodedArchive9.manifest;
        explodedArchive9.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive13 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest14 = explodedArchive13.manifest;
        explodedArchive13.recursive = false;
        java.util.jar.Manifest manifest17 = explodedArchive13.manifest;
        java.io.File file18 = explodedArchive13.manifestFile;
        java.io.File file19 = null;
        java.io.File file20 = explodedArchive13.getManifestFile(file19);
        explodedArchive9.manifestFile = file19;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive22 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest23 = explodedArchive22.manifest;
        explodedArchive22.recursive = false;
        java.util.jar.Manifest manifest26 = explodedArchive22.manifest;
        java.io.File file27 = explodedArchive22.manifestFile;
        java.io.File file28 = null;
        java.io.File file29 = explodedArchive22.getManifestFile(file28);
        explodedArchive9.manifestFile = file29;
        java.io.File file31 = explodedArchive5.getManifestFile(file29);
        fileEntry2.file = file31;
        java.io.File file33 = fileEntry2.file;
        fileEntry2.name = "exploded archive";
        java.io.File file36 = fileEntry2.file;
        explodedArchive0.root = file36;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator38 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        boolean boolean39 = fileEntryIterator38.recursive;
        java.io.File file40 = fileEntryIterator38.current;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive41 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest42 = explodedArchive41.manifest;
        explodedArchive41.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive45 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest46 = explodedArchive45.manifest;
        explodedArchive45.recursive = false;
        java.util.jar.Manifest manifest49 = explodedArchive45.manifest;
        java.io.File file50 = explodedArchive45.manifestFile;
        java.io.File file51 = null;
        java.io.File file52 = explodedArchive45.getManifestFile(file51);
        explodedArchive41.manifestFile = file51;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive54 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest55 = explodedArchive54.manifest;
        explodedArchive54.recursive = false;
        java.util.jar.Manifest manifest58 = explodedArchive54.manifest;
        java.io.File file59 = explodedArchive54.manifestFile;
        java.io.File file60 = null;
        java.io.File file61 = explodedArchive54.getManifestFile(file60);
        explodedArchive41.manifestFile = file61;
        fileEntryIterator38.current = file61;
        explodedArchive0.root = file61;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file20.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file20.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file29.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file29.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file31.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file31.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file33.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file33.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file36.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file36.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file52.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file52.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file61.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file61.toString(), "META-INF/MANIFEST.MF");
    }

    @Test
    public void test547() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test547");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest1 = explodedArchive0.manifest;
        java.util.jar.Manifest manifest2 = null;
        explodedArchive0.manifest = manifest2;
        java.io.File file4 = explodedArchive0.root;
        java.util.jar.Manifest manifest5 = null;
        explodedArchive0.manifest = manifest5;
        java.util.jar.Manifest manifest7 = null;
        explodedArchive0.manifest = manifest7;
        // The following exception was thrown during execution in test generation
        try {
            java.util.jar.Manifest manifest9 = explodedArchive0.getManifest();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file4);
    }

    @Test
    public void test548() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test548");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntry fileEntry0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntry();
        java.io.File file1 = fileEntry0.file;
        java.lang.String str2 = fileEntry0.name;
        java.io.File file3 = fileEntry0.file;
        java.io.File file4 = fileEntry0.file;
        java.lang.String str5 = fileEntry0.name;
        java.io.File file6 = fileEntry0.getFile();
        java.lang.String str7 = fileEntry0.name;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str7);
    }

    @Test
    public void test549() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test549");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntry fileEntry0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntry();
        java.lang.String str1 = fileEntry0.getName();
        java.io.File file2 = fileEntry0.getFile();
        java.io.File file3 = fileEntry0.file;
        fileEntry0.name = "exploded archive";
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator6 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file7 = null;
        fileEntryIterator6.current = file7;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive9 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest10 = explodedArchive9.manifest;
        explodedArchive9.recursive = false;
        java.util.jar.Manifest manifest13 = explodedArchive9.manifest;
        java.io.File file14 = explodedArchive9.manifestFile;
        java.io.File file15 = null;
        java.io.File file16 = explodedArchive9.getManifestFile(file15);
        java.util.Iterator<java.io.File> fileItor17 = fileEntryIterator6.listFiles(file16);
        java.io.File file18 = fileEntryIterator6.root;
        java.io.File file19 = fileEntryIterator6.root;
        java.util.Deque<java.util.Iterator<java.io.File>> fileItorQueue20 = fileEntryIterator6.stack;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator21 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator22 = entryComparator21.reversed();
        java.util.Comparator<java.io.File> fileComparator23 = entryComparator21.reversed();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive24 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest25 = explodedArchive24.manifest;
        explodedArchive24.recursive = false;
        java.util.jar.Manifest manifest28 = explodedArchive24.manifest;
        java.io.File file29 = explodedArchive24.manifestFile;
        java.io.File file30 = null;
        java.io.File file31 = explodedArchive24.getManifestFile(file30);
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive32 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest33 = explodedArchive32.manifest;
        explodedArchive32.recursive = false;
        java.io.File file36 = null;
        explodedArchive32.root = file36;
        java.io.File file38 = explodedArchive32.root;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive39 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest40 = explodedArchive39.manifest;
        explodedArchive39.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive43 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest44 = explodedArchive43.manifest;
        explodedArchive43.recursive = false;
        java.util.jar.Manifest manifest47 = explodedArchive43.manifest;
        java.io.File file48 = explodedArchive43.manifestFile;
        java.io.File file49 = null;
        java.io.File file50 = explodedArchive43.getManifestFile(file49);
        explodedArchive39.manifestFile = file49;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive52 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest53 = explodedArchive52.manifest;
        explodedArchive52.recursive = false;
        java.util.jar.Manifest manifest56 = explodedArchive52.manifest;
        java.io.File file57 = explodedArchive52.manifestFile;
        java.io.File file58 = null;
        java.io.File file59 = explodedArchive52.getManifestFile(file58);
        explodedArchive39.manifestFile = file59;
        java.io.File file61 = explodedArchive32.getManifestFile(file59);
        int int62 = entryComparator21.compare(file31, file59);
        fileEntryIterator6.root = file31;
        fileEntry0.file = file31;
        java.io.File file65 = fileEntry0.getFile();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file16.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file16.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItorQueue20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file31.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file31.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file50.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file50.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file59.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file59.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file61.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file61.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file65.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file65.toString(), "META-INF/MANIFEST.MF");
    }

    @Test
    public void test550() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test550");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        boolean boolean1 = explodedArchive0.recursive;
        java.lang.String str2 = explodedArchive0.toString();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator3 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file4 = null;
        fileEntryIterator3.current = file4;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive6 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest7 = explodedArchive6.manifest;
        explodedArchive6.recursive = false;
        java.util.jar.Manifest manifest10 = explodedArchive6.manifest;
        java.io.File file11 = explodedArchive6.manifestFile;
        java.io.File file12 = null;
        java.io.File file13 = explodedArchive6.getManifestFile(file12);
        java.util.Iterator<java.io.File> fileItor14 = fileEntryIterator3.listFiles(file13);
        java.io.File file15 = fileEntryIterator3.current;
        boolean boolean16 = fileEntryIterator3.recursive;
        java.io.File file17 = fileEntryIterator3.poll();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator18 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file19 = null;
        fileEntryIterator18.current = file19;
        fileEntryIterator18.recursive = true;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator23 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator24 = entryComparator23.reversed();
        java.util.Comparator<java.io.File> fileComparator25 = entryComparator23.reversed();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive26 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest27 = explodedArchive26.manifest;
        explodedArchive26.recursive = false;
        java.util.jar.Manifest manifest30 = explodedArchive26.manifest;
        java.io.File file31 = explodedArchive26.manifestFile;
        java.io.File file32 = null;
        java.io.File file33 = explodedArchive26.getManifestFile(file32);
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive34 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest35 = explodedArchive34.manifest;
        explodedArchive34.recursive = false;
        java.io.File file38 = null;
        explodedArchive34.root = file38;
        java.io.File file40 = explodedArchive34.root;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive41 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest42 = explodedArchive41.manifest;
        explodedArchive41.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive45 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest46 = explodedArchive45.manifest;
        explodedArchive45.recursive = false;
        java.util.jar.Manifest manifest49 = explodedArchive45.manifest;
        java.io.File file50 = explodedArchive45.manifestFile;
        java.io.File file51 = null;
        java.io.File file52 = explodedArchive45.getManifestFile(file51);
        explodedArchive41.manifestFile = file51;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive54 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest55 = explodedArchive54.manifest;
        explodedArchive54.recursive = false;
        java.util.jar.Manifest manifest58 = explodedArchive54.manifest;
        java.io.File file59 = explodedArchive54.manifestFile;
        java.io.File file60 = null;
        java.io.File file61 = explodedArchive54.getManifestFile(file60);
        explodedArchive41.manifestFile = file61;
        java.io.File file63 = explodedArchive34.getManifestFile(file61);
        int int64 = entryComparator23.compare(file33, file61);
        java.util.Iterator<java.io.File> fileItor65 = fileEntryIterator18.listFiles(file33);
        fileEntryIterator3.current = file33;
        explodedArchive0.root = file33;
        // The following exception was thrown during execution in test generation
        try {
            org.springframework.boot.loader.archive.ExplodedArchive explodedArchive68 = new org.springframework.boot.loader.archive.ExplodedArchive(file33);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid source folder META-INF/MANIFEST.MF");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str2 + "' != '" + "exploded archive" + "'", str2.equals("exploded archive"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file13.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file13.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file33.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file33.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file52.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file52.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file61.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file61.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file63.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file63.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor65);
    }

    @Test
    public void test551() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test551");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file1 = explodedArchive0.root;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator2 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        boolean boolean3 = fileEntryIterator2.recursive;
        java.io.File file4 = fileEntryIterator2.current;
        boolean boolean5 = fileEntryIterator2.hasNext();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator6 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator7 = entryComparator6.reversed();
        java.util.Comparator<java.io.File> fileComparator8 = entryComparator6.reversed();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive9 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest10 = explodedArchive9.manifest;
        explodedArchive9.recursive = false;
        java.util.jar.Manifest manifest13 = explodedArchive9.manifest;
        java.io.File file14 = explodedArchive9.manifestFile;
        java.io.File file15 = null;
        java.io.File file16 = explodedArchive9.getManifestFile(file15);
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive17 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest18 = explodedArchive17.manifest;
        explodedArchive17.recursive = false;
        java.io.File file21 = null;
        explodedArchive17.root = file21;
        java.io.File file23 = explodedArchive17.root;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive24 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest25 = explodedArchive24.manifest;
        explodedArchive24.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive28 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest29 = explodedArchive28.manifest;
        explodedArchive28.recursive = false;
        java.util.jar.Manifest manifest32 = explodedArchive28.manifest;
        java.io.File file33 = explodedArchive28.manifestFile;
        java.io.File file34 = null;
        java.io.File file35 = explodedArchive28.getManifestFile(file34);
        explodedArchive24.manifestFile = file34;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive37 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest38 = explodedArchive37.manifest;
        explodedArchive37.recursive = false;
        java.util.jar.Manifest manifest41 = explodedArchive37.manifest;
        java.io.File file42 = explodedArchive37.manifestFile;
        java.io.File file43 = null;
        java.io.File file44 = explodedArchive37.getManifestFile(file43);
        explodedArchive24.manifestFile = file44;
        java.io.File file46 = explodedArchive17.getManifestFile(file44);
        int int47 = entryComparator6.compare(file16, file44);
        java.util.Iterator<java.io.File> fileItor48 = fileEntryIterator2.listFiles(file16);
        explodedArchive0.manifestFile = file16;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file16.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file16.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file35.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file35.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file44.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file44.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file46.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file46.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor48);
    }

    @Test
    public void test552() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test552");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file1 = null;
        fileEntryIterator0.current = file1;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive3 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest4 = explodedArchive3.manifest;
        explodedArchive3.recursive = false;
        java.util.jar.Manifest manifest7 = explodedArchive3.manifest;
        java.io.File file8 = explodedArchive3.manifestFile;
        java.io.File file9 = null;
        java.io.File file10 = explodedArchive3.getManifestFile(file9);
        java.util.Iterator<java.io.File> fileItor11 = fileEntryIterator0.listFiles(file10);
        java.io.File file12 = fileEntryIterator0.current;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator13 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file14 = null;
        fileEntryIterator13.current = file14;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive16 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest17 = explodedArchive16.manifest;
        explodedArchive16.recursive = false;
        java.util.jar.Manifest manifest20 = explodedArchive16.manifest;
        java.io.File file21 = explodedArchive16.manifestFile;
        java.io.File file22 = null;
        java.io.File file23 = explodedArchive16.getManifestFile(file22);
        java.util.Iterator<java.io.File> fileItor24 = fileEntryIterator13.listFiles(file23);
        java.util.ArrayDeque<java.util.Iterator<java.io.File>> fileItorQueue25 = new java.util.ArrayDeque<java.util.Iterator<java.io.File>>();
        boolean boolean26 = fileItorQueue25.add(fileItor24);
        fileEntryIterator0.stack = fileItorQueue25;
        boolean boolean28 = fileEntryIterator0.recursive;
        fileEntryIterator0.recursive = false;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file23.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file23.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test553() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test553");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file1 = explodedArchive0.root;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive2 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest3 = explodedArchive2.manifest;
        explodedArchive2.recursive = false;
        java.util.jar.Manifest manifest6 = explodedArchive2.manifest;
        java.io.File file7 = explodedArchive2.manifestFile;
        java.io.File file8 = null;
        java.io.File file9 = explodedArchive2.getManifestFile(file8);
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator10 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file11 = null;
        fileEntryIterator10.current = file11;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive13 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.lang.String str14 = explodedArchive13.toString();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive15 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file16 = explodedArchive15.root;
        java.io.File file17 = null;
        explodedArchive15.manifestFile = file17;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive19 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest20 = explodedArchive19.manifest;
        explodedArchive19.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive23 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest24 = explodedArchive23.manifest;
        explodedArchive23.recursive = false;
        java.util.jar.Manifest manifest27 = explodedArchive23.manifest;
        java.io.File file28 = explodedArchive23.manifestFile;
        java.io.File file29 = null;
        java.io.File file30 = explodedArchive23.getManifestFile(file29);
        explodedArchive19.manifestFile = file29;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive32 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest33 = explodedArchive32.manifest;
        explodedArchive32.recursive = false;
        java.util.jar.Manifest manifest36 = explodedArchive32.manifest;
        java.io.File file37 = explodedArchive32.manifestFile;
        java.io.File file38 = null;
        java.io.File file39 = explodedArchive32.getManifestFile(file38);
        explodedArchive19.manifestFile = file39;
        java.io.File file41 = explodedArchive15.getManifestFile(file39);
        java.io.File file42 = explodedArchive13.getManifestFile(file39);
        fileEntryIterator10.root = file39;
        explodedArchive2.root = file39;
        java.io.File file45 = explodedArchive0.getManifestFile(file39);
        java.util.jar.Manifest manifest46 = null;
        explodedArchive0.manifest = manifest46;
        explodedArchive0.recursive = false;
        java.util.jar.Manifest manifest50 = null;
        explodedArchive0.manifest = manifest50;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file9.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file9.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str14 + "' != '" + "exploded archive" + "'", str14.equals("exploded archive"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file30.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file30.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file39.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file39.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file41.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file41.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file42.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file42.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file45.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file45.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
    }

    @Test
    public void test554() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test554");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest1 = explodedArchive0.manifest;
        java.util.jar.Manifest manifest2 = null;
        explodedArchive0.manifest = manifest2;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntry fileEntry4 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntry();
        java.lang.String str5 = fileEntry4.name;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator6 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file7 = null;
        fileEntryIterator6.current = file7;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive9 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest10 = explodedArchive9.manifest;
        explodedArchive9.recursive = false;
        java.util.jar.Manifest manifest13 = explodedArchive9.manifest;
        java.io.File file14 = explodedArchive9.manifestFile;
        java.io.File file15 = null;
        java.io.File file16 = explodedArchive9.getManifestFile(file15);
        java.util.Iterator<java.io.File> fileItor17 = fileEntryIterator6.listFiles(file16);
        java.io.File file18 = fileEntryIterator6.current;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator19 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file20 = null;
        fileEntryIterator19.current = file20;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive22 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest23 = explodedArchive22.manifest;
        explodedArchive22.recursive = false;
        java.util.jar.Manifest manifest26 = explodedArchive22.manifest;
        java.io.File file27 = explodedArchive22.manifestFile;
        java.io.File file28 = null;
        java.io.File file29 = explodedArchive22.getManifestFile(file28);
        java.util.Iterator<java.io.File> fileItor30 = fileEntryIterator19.listFiles(file29);
        java.util.ArrayDeque<java.util.Iterator<java.io.File>> fileItorQueue31 = new java.util.ArrayDeque<java.util.Iterator<java.io.File>>();
        boolean boolean32 = fileItorQueue31.add(fileItor30);
        fileEntryIterator6.stack = fileItorQueue31;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive34 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest35 = explodedArchive34.manifest;
        explodedArchive34.recursive = false;
        java.io.File file38 = null;
        explodedArchive34.root = file38;
        java.io.File file40 = explodedArchive34.root;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive41 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest42 = explodedArchive41.manifest;
        explodedArchive41.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive45 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest46 = explodedArchive45.manifest;
        explodedArchive45.recursive = false;
        java.util.jar.Manifest manifest49 = explodedArchive45.manifest;
        java.io.File file50 = explodedArchive45.manifestFile;
        java.io.File file51 = null;
        java.io.File file52 = explodedArchive45.getManifestFile(file51);
        explodedArchive41.manifestFile = file51;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive54 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest55 = explodedArchive54.manifest;
        explodedArchive54.recursive = false;
        java.util.jar.Manifest manifest58 = explodedArchive54.manifest;
        java.io.File file59 = explodedArchive54.manifestFile;
        java.io.File file60 = null;
        java.io.File file61 = explodedArchive54.getManifestFile(file60);
        explodedArchive41.manifestFile = file61;
        java.io.File file63 = explodedArchive34.getManifestFile(file61);
        fileEntryIterator6.root = file61;
        fileEntry4.file = file61;
        java.io.File file66 = explodedArchive0.getManifestFile(file61);
        // The following exception was thrown during execution in test generation
        try {
            org.springframework.boot.loader.archive.ExplodedArchive explodedArchive68 = new org.springframework.boot.loader.archive.ExplodedArchive(file66, false);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid source folder META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file16.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file16.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file29.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file29.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file52.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file52.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file61.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file61.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file63.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file63.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file66.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file66.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
    }

    @Test
    public void test555() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test555");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        boolean boolean1 = fileEntryIterator0.recursive;
        java.io.File file2 = fileEntryIterator0.current;
        boolean boolean3 = fileEntryIterator0.hasNext();
        boolean boolean4 = fileEntryIterator0.recursive;
        fileEntryIterator0.recursive = false;
        java.util.Comparator<java.io.File> fileComparator7 = fileEntryIterator0.entryComparator;
        java.io.File file8 = fileEntryIterator0.poll();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file8);
    }

    @Test
    public void test556() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test556");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file1 = null;
        fileEntryIterator0.current = file1;
        fileEntryIterator0.recursive = true;
        // The following exception was thrown during execution in test generation
        try {
            org.springframework.boot.loader.archive.Archive.Entry entry5 = fileEntryIterator0.next();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
        // Expected exception.
        }
    }

    @Test
    public void test557() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test557");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest1 = explodedArchive0.manifest;
        explodedArchive0.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive4 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest5 = explodedArchive4.manifest;
        explodedArchive4.recursive = false;
        java.util.jar.Manifest manifest8 = explodedArchive4.manifest;
        java.io.File file9 = explodedArchive4.manifestFile;
        java.io.File file10 = null;
        java.io.File file11 = explodedArchive4.getManifestFile(file10);
        explodedArchive0.manifestFile = file10;
        java.util.jar.Manifest manifest13 = null;
        explodedArchive0.manifest = manifest13;
        java.util.jar.Manifest manifest15 = explodedArchive0.manifest;
        explodedArchive0.recursive = false;
        boolean boolean18 = explodedArchive0.recursive;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file11.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file11.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test558() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test558");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file1 = null;
        fileEntryIterator0.current = file1;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive3 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest4 = explodedArchive3.manifest;
        explodedArchive3.recursive = false;
        java.util.jar.Manifest manifest7 = explodedArchive3.manifest;
        java.io.File file8 = explodedArchive3.manifestFile;
        java.io.File file9 = null;
        java.io.File file10 = explodedArchive3.getManifestFile(file9);
        java.util.Iterator<java.io.File> fileItor11 = fileEntryIterator0.listFiles(file10);
        boolean boolean12 = fileEntryIterator0.hasNext();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator13 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator14 = entryComparator13.reversed();
        java.util.Comparator<java.io.File> fileComparator15 = entryComparator13.reversed();
        fileEntryIterator0.entryComparator = fileComparator15;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator17 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file18 = null;
        fileEntryIterator17.current = file18;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive20 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.lang.String str21 = explodedArchive20.toString();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive22 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file23 = explodedArchive22.root;
        java.io.File file24 = null;
        explodedArchive22.manifestFile = file24;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive26 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest27 = explodedArchive26.manifest;
        explodedArchive26.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive30 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest31 = explodedArchive30.manifest;
        explodedArchive30.recursive = false;
        java.util.jar.Manifest manifest34 = explodedArchive30.manifest;
        java.io.File file35 = explodedArchive30.manifestFile;
        java.io.File file36 = null;
        java.io.File file37 = explodedArchive30.getManifestFile(file36);
        explodedArchive26.manifestFile = file36;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive39 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest40 = explodedArchive39.manifest;
        explodedArchive39.recursive = false;
        java.util.jar.Manifest manifest43 = explodedArchive39.manifest;
        java.io.File file44 = explodedArchive39.manifestFile;
        java.io.File file45 = null;
        java.io.File file46 = explodedArchive39.getManifestFile(file45);
        explodedArchive26.manifestFile = file46;
        java.io.File file48 = explodedArchive22.getManifestFile(file46);
        java.io.File file49 = explodedArchive20.getManifestFile(file46);
        fileEntryIterator17.root = file46;
        fileEntryIterator0.current = file46;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive52 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file53 = explodedArchive52.root;
        java.io.File file54 = null;
        explodedArchive52.manifestFile = file54;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive56 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest57 = explodedArchive56.manifest;
        explodedArchive56.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive60 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest61 = explodedArchive60.manifest;
        explodedArchive60.recursive = false;
        java.util.jar.Manifest manifest64 = explodedArchive60.manifest;
        java.io.File file65 = explodedArchive60.manifestFile;
        java.io.File file66 = null;
        java.io.File file67 = explodedArchive60.getManifestFile(file66);
        explodedArchive56.manifestFile = file66;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive69 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest70 = explodedArchive69.manifest;
        explodedArchive69.recursive = false;
        java.util.jar.Manifest manifest73 = explodedArchive69.manifest;
        java.io.File file74 = explodedArchive69.manifestFile;
        java.io.File file75 = null;
        java.io.File file76 = explodedArchive69.getManifestFile(file75);
        explodedArchive56.manifestFile = file76;
        java.io.File file78 = explodedArchive52.getManifestFile(file76);
        fileEntryIterator0.root = file78;
        java.lang.Class<?> wildcardClass80 = file78.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str21 + "' != '" + "exploded archive" + "'", str21.equals("exploded archive"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file37.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file37.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file46.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file46.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file48.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file48.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file49.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file49.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file67.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file67.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest73);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file76);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file76.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file76.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file78);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file78.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file78.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass80);
    }

    @Test
    public void test559() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test559");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file1 = explodedArchive0.root;
        explodedArchive0.recursive = false;
        java.lang.String str4 = explodedArchive0.toString();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive5 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file6 = explodedArchive5.root;
        java.io.File file7 = null;
        explodedArchive5.manifestFile = file7;
        java.io.File file9 = explodedArchive5.root;
        java.lang.String str10 = explodedArchive5.toString();
        java.util.jar.Manifest manifest11 = null;
        explodedArchive5.manifest = manifest11;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator13 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        boolean boolean14 = fileEntryIterator13.recursive;
        java.io.File file15 = fileEntryIterator13.current;
        boolean boolean16 = fileEntryIterator13.hasNext();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator17 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator18 = entryComparator17.reversed();
        java.util.Comparator<java.io.File> fileComparator19 = entryComparator17.reversed();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive20 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest21 = explodedArchive20.manifest;
        explodedArchive20.recursive = false;
        java.util.jar.Manifest manifest24 = explodedArchive20.manifest;
        java.io.File file25 = explodedArchive20.manifestFile;
        java.io.File file26 = null;
        java.io.File file27 = explodedArchive20.getManifestFile(file26);
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive28 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest29 = explodedArchive28.manifest;
        explodedArchive28.recursive = false;
        java.io.File file32 = null;
        explodedArchive28.root = file32;
        java.io.File file34 = explodedArchive28.root;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive35 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest36 = explodedArchive35.manifest;
        explodedArchive35.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive39 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest40 = explodedArchive39.manifest;
        explodedArchive39.recursive = false;
        java.util.jar.Manifest manifest43 = explodedArchive39.manifest;
        java.io.File file44 = explodedArchive39.manifestFile;
        java.io.File file45 = null;
        java.io.File file46 = explodedArchive39.getManifestFile(file45);
        explodedArchive35.manifestFile = file45;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive48 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest49 = explodedArchive48.manifest;
        explodedArchive48.recursive = false;
        java.util.jar.Manifest manifest52 = explodedArchive48.manifest;
        java.io.File file53 = explodedArchive48.manifestFile;
        java.io.File file54 = null;
        java.io.File file55 = explodedArchive48.getManifestFile(file54);
        explodedArchive35.manifestFile = file55;
        java.io.File file57 = explodedArchive28.getManifestFile(file55);
        int int58 = entryComparator17.compare(file27, file55);
        java.util.Iterator<java.io.File> fileItor59 = fileEntryIterator13.listFiles(file27);
        java.io.File file60 = explodedArchive5.getManifestFile(file27);
        java.io.File file61 = explodedArchive0.getManifestFile(file27);
        java.util.jar.Manifest manifest62 = null;
        explodedArchive0.manifest = manifest62;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str4 + "' != '" + "exploded archive" + "'", str4.equals("exploded archive"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str10 + "' != '" + "exploded archive" + "'", str10.equals("exploded archive"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file27.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file27.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file46.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file46.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file55.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file55.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file57.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file57.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file60.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file60.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file61.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file61.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
    }

    @Test
    public void test560() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test560");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file1 = explodedArchive0.root;
        java.io.File file2 = null;
        explodedArchive0.manifestFile = file2;
        java.io.File file4 = explodedArchive0.root;
        boolean boolean5 = explodedArchive0.recursive;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive6 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest7 = explodedArchive6.manifest;
        explodedArchive6.recursive = false;
        java.io.File file10 = null;
        explodedArchive6.root = file10;
        java.io.File file12 = explodedArchive6.root;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive13 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest14 = explodedArchive13.manifest;
        explodedArchive13.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive17 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest18 = explodedArchive17.manifest;
        explodedArchive17.recursive = false;
        java.util.jar.Manifest manifest21 = explodedArchive17.manifest;
        java.io.File file22 = explodedArchive17.manifestFile;
        java.io.File file23 = null;
        java.io.File file24 = explodedArchive17.getManifestFile(file23);
        explodedArchive13.manifestFile = file23;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive26 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest27 = explodedArchive26.manifest;
        explodedArchive26.recursive = false;
        java.util.jar.Manifest manifest30 = explodedArchive26.manifest;
        java.io.File file31 = explodedArchive26.manifestFile;
        java.io.File file32 = null;
        java.io.File file33 = explodedArchive26.getManifestFile(file32);
        explodedArchive13.manifestFile = file33;
        java.io.File file35 = explodedArchive6.getManifestFile(file33);
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntry fileEntry36 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntry();
        java.lang.String str37 = fileEntry36.name;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator38 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file39 = null;
        fileEntryIterator38.current = file39;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive41 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.lang.String str42 = explodedArchive41.toString();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive43 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file44 = explodedArchive43.root;
        java.io.File file45 = null;
        explodedArchive43.manifestFile = file45;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive47 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest48 = explodedArchive47.manifest;
        explodedArchive47.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive51 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest52 = explodedArchive51.manifest;
        explodedArchive51.recursive = false;
        java.util.jar.Manifest manifest55 = explodedArchive51.manifest;
        java.io.File file56 = explodedArchive51.manifestFile;
        java.io.File file57 = null;
        java.io.File file58 = explodedArchive51.getManifestFile(file57);
        explodedArchive47.manifestFile = file57;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive60 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest61 = explodedArchive60.manifest;
        explodedArchive60.recursive = false;
        java.util.jar.Manifest manifest64 = explodedArchive60.manifest;
        java.io.File file65 = explodedArchive60.manifestFile;
        java.io.File file66 = null;
        java.io.File file67 = explodedArchive60.getManifestFile(file66);
        explodedArchive47.manifestFile = file67;
        java.io.File file69 = explodedArchive43.getManifestFile(file67);
        java.io.File file70 = explodedArchive41.getManifestFile(file67);
        fileEntryIterator38.root = file67;
        fileEntry36.file = file67;
        java.io.File file73 = fileEntry36.file;
        explodedArchive6.root = file73;
        java.io.File file75 = explodedArchive6.manifestFile;
        java.io.File file76 = explodedArchive6.root;
        explodedArchive0.manifestFile = file76;
        java.util.jar.Manifest manifest78 = explodedArchive0.getManifest();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file24.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file24.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file33.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file33.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file35.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file35.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str42 + "' != '" + "exploded archive" + "'", str42.equals("exploded archive"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file58.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file58.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file67.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file67.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file69.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file69.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file70.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file70.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file73);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file73.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file73.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file75);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file76);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file76.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file76.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest78);
    }

    @Test
    public void test561() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test561");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        boolean boolean1 = fileEntryIterator0.hasNext();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator2 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator3 = entryComparator2.reversed();
        java.util.Comparator<java.io.File> fileComparator4 = fileComparator3.reversed();
        fileEntryIterator0.entryComparator = fileComparator4;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive6 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file7 = explodedArchive6.root;
        java.io.File file8 = null;
        explodedArchive6.manifestFile = file8;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive10 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest11 = explodedArchive10.manifest;
        explodedArchive10.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive14 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest15 = explodedArchive14.manifest;
        explodedArchive14.recursive = false;
        java.util.jar.Manifest manifest18 = explodedArchive14.manifest;
        java.io.File file19 = explodedArchive14.manifestFile;
        java.io.File file20 = null;
        java.io.File file21 = explodedArchive14.getManifestFile(file20);
        explodedArchive10.manifestFile = file20;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive23 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest24 = explodedArchive23.manifest;
        explodedArchive23.recursive = false;
        java.util.jar.Manifest manifest27 = explodedArchive23.manifest;
        java.io.File file28 = explodedArchive23.manifestFile;
        java.io.File file29 = null;
        java.io.File file30 = explodedArchive23.getManifestFile(file29);
        explodedArchive10.manifestFile = file30;
        java.io.File file32 = explodedArchive6.getManifestFile(file30);
        java.util.Iterator<java.io.File> fileItor33 = fileEntryIterator0.listFiles(file32);
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntry fileEntry34 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntry();
        java.lang.String str35 = fileEntry34.name;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator36 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file37 = null;
        fileEntryIterator36.current = file37;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive39 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.lang.String str40 = explodedArchive39.toString();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive41 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file42 = explodedArchive41.root;
        java.io.File file43 = null;
        explodedArchive41.manifestFile = file43;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive45 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest46 = explodedArchive45.manifest;
        explodedArchive45.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive49 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest50 = explodedArchive49.manifest;
        explodedArchive49.recursive = false;
        java.util.jar.Manifest manifest53 = explodedArchive49.manifest;
        java.io.File file54 = explodedArchive49.manifestFile;
        java.io.File file55 = null;
        java.io.File file56 = explodedArchive49.getManifestFile(file55);
        explodedArchive45.manifestFile = file55;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive58 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest59 = explodedArchive58.manifest;
        explodedArchive58.recursive = false;
        java.util.jar.Manifest manifest62 = explodedArchive58.manifest;
        java.io.File file63 = explodedArchive58.manifestFile;
        java.io.File file64 = null;
        java.io.File file65 = explodedArchive58.getManifestFile(file64);
        explodedArchive45.manifestFile = file65;
        java.io.File file67 = explodedArchive41.getManifestFile(file65);
        java.io.File file68 = explodedArchive39.getManifestFile(file65);
        fileEntryIterator36.root = file65;
        fileEntry34.file = file65;
        java.io.File file71 = fileEntry34.getFile();
        java.io.File file72 = fileEntry34.getFile();
        java.util.Iterator<java.io.File> fileItor73 = fileEntryIterator0.listFiles(file72);
        java.util.Comparator<java.io.File> fileComparator74 = fileEntryIterator0.entryComparator;
        java.util.Deque<java.util.Iterator<java.io.File>> fileItorQueue75 = fileEntryIterator0.stack;
        java.util.Comparator<java.io.File> fileComparator76 = fileEntryIterator0.entryComparator;
        java.io.File file77 = fileEntryIterator0.root;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file21.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file21.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file30.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file30.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file32.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file32.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str40 + "' != '" + "exploded archive" + "'", str40.equals("exploded archive"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file56.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file56.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file65.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file65.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file67.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file67.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file68.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file68.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file71.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file71.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file72.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file72.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor73);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItorQueue75);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator76);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file77);
    }

    @Test
    public void test562() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test562");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file1 = explodedArchive0.root;
        java.io.File file2 = null;
        explodedArchive0.manifestFile = file2;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive4 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest5 = explodedArchive4.manifest;
        explodedArchive4.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive8 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest9 = explodedArchive8.manifest;
        explodedArchive8.recursive = false;
        java.util.jar.Manifest manifest12 = explodedArchive8.manifest;
        java.io.File file13 = explodedArchive8.manifestFile;
        java.io.File file14 = null;
        java.io.File file15 = explodedArchive8.getManifestFile(file14);
        explodedArchive4.manifestFile = file14;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive17 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest18 = explodedArchive17.manifest;
        explodedArchive17.recursive = false;
        java.util.jar.Manifest manifest21 = explodedArchive17.manifest;
        java.io.File file22 = explodedArchive17.manifestFile;
        java.io.File file23 = null;
        java.io.File file24 = explodedArchive17.getManifestFile(file23);
        explodedArchive4.manifestFile = file24;
        java.io.File file26 = explodedArchive0.getManifestFile(file24);
        java.util.jar.Manifest manifest27 = null;
        explodedArchive0.manifest = manifest27;
        java.io.File file29 = explodedArchive0.root;
        explodedArchive0.recursive = false;
        org.springframework.boot.loader.archive.Archive.EntryFilter entryFilter32 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<org.springframework.boot.loader.archive.Archive> archiveList33 = explodedArchive0.getNestedArchives(entryFilter32);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file15.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file15.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file24.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file24.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file26.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file26.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file29);
    }

    @Test
    public void test563() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test563");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntry fileEntry0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntry();
        java.io.File file1 = fileEntry0.getFile();
        java.io.File file2 = fileEntry0.getFile();
        java.lang.String str3 = fileEntry0.name;
        java.io.File file4 = fileEntry0.getFile();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator5 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file6 = null;
        fileEntryIterator5.current = file6;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive8 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest9 = explodedArchive8.manifest;
        explodedArchive8.recursive = false;
        java.util.jar.Manifest manifest12 = explodedArchive8.manifest;
        java.io.File file13 = explodedArchive8.manifestFile;
        java.io.File file14 = null;
        java.io.File file15 = explodedArchive8.getManifestFile(file14);
        java.util.Iterator<java.io.File> fileItor16 = fileEntryIterator5.listFiles(file15);
        fileEntry0.file = file15;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntry fileEntry18 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntry();
        java.io.File file19 = fileEntry18.getFile();
        java.io.File file20 = fileEntry18.getFile();
        java.lang.String str21 = fileEntry18.name;
        java.io.File file22 = fileEntry18.getFile();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator23 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file24 = null;
        fileEntryIterator23.current = file24;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive26 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest27 = explodedArchive26.manifest;
        explodedArchive26.recursive = false;
        java.util.jar.Manifest manifest30 = explodedArchive26.manifest;
        java.io.File file31 = explodedArchive26.manifestFile;
        java.io.File file32 = null;
        java.io.File file33 = explodedArchive26.getManifestFile(file32);
        java.util.Iterator<java.io.File> fileItor34 = fileEntryIterator23.listFiles(file33);
        fileEntry18.file = file33;
        fileEntry0.file = file33;
        java.lang.String str37 = fileEntry0.getName();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file15.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file15.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file33.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file33.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str37);
    }

    @Test
    public void test564() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test564");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest1 = explodedArchive0.manifest;
        explodedArchive0.recursive = false;
        java.util.jar.Manifest manifest4 = explodedArchive0.manifest;
        java.util.jar.Manifest manifest5 = null;
        explodedArchive0.manifest = manifest5;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Spliterator<org.springframework.boot.loader.archive.Archive.Entry> entrySpliterator7 = explodedArchive0.spliterator();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest4);
    }

    @Test
    public void test565() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test565");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file1 = null;
        fileEntryIterator0.current = file1;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive3 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest4 = explodedArchive3.manifest;
        explodedArchive3.recursive = false;
        java.util.jar.Manifest manifest7 = explodedArchive3.manifest;
        java.io.File file8 = explodedArchive3.manifestFile;
        java.io.File file9 = null;
        java.io.File file10 = explodedArchive3.getManifestFile(file9);
        java.util.Iterator<java.io.File> fileItor11 = fileEntryIterator0.listFiles(file10);
        java.util.Comparator<java.io.File> fileComparator12 = fileEntryIterator0.entryComparator;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator13 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file14 = null;
        fileEntryIterator13.current = file14;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive16 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest17 = explodedArchive16.manifest;
        explodedArchive16.recursive = false;
        java.util.jar.Manifest manifest20 = explodedArchive16.manifest;
        java.io.File file21 = explodedArchive16.manifestFile;
        java.io.File file22 = null;
        java.io.File file23 = explodedArchive16.getManifestFile(file22);
        java.util.Iterator<java.io.File> fileItor24 = fileEntryIterator13.listFiles(file23);
        java.io.File file25 = fileEntryIterator13.current;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator26 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file27 = null;
        fileEntryIterator26.current = file27;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive29 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest30 = explodedArchive29.manifest;
        explodedArchive29.recursive = false;
        java.util.jar.Manifest manifest33 = explodedArchive29.manifest;
        java.io.File file34 = explodedArchive29.manifestFile;
        java.io.File file35 = null;
        java.io.File file36 = explodedArchive29.getManifestFile(file35);
        java.util.Iterator<java.io.File> fileItor37 = fileEntryIterator26.listFiles(file36);
        java.io.File file38 = fileEntryIterator26.current;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator39 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file40 = null;
        fileEntryIterator39.current = file40;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive42 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest43 = explodedArchive42.manifest;
        explodedArchive42.recursive = false;
        java.util.jar.Manifest manifest46 = explodedArchive42.manifest;
        java.io.File file47 = explodedArchive42.manifestFile;
        java.io.File file48 = null;
        java.io.File file49 = explodedArchive42.getManifestFile(file48);
        java.util.Iterator<java.io.File> fileItor50 = fileEntryIterator39.listFiles(file49);
        java.util.ArrayDeque<java.util.Iterator<java.io.File>> fileItorQueue51 = new java.util.ArrayDeque<java.util.Iterator<java.io.File>>();
        boolean boolean52 = fileItorQueue51.add(fileItor50);
        fileEntryIterator26.stack = fileItorQueue51;
        fileEntryIterator13.stack = fileItorQueue51;
        fileEntryIterator0.stack = fileItorQueue51;
        boolean boolean56 = fileEntryIterator0.hasNext();
        boolean boolean57 = fileEntryIterator0.hasNext();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file23.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file23.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file36.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file36.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file49.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file49.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
    }

    @Test
    public void test566() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test566");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntry fileEntry0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntry();
        java.lang.String str1 = fileEntry0.name;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator2 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file3 = null;
        fileEntryIterator2.current = file3;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive5 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.lang.String str6 = explodedArchive5.toString();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive7 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file8 = explodedArchive7.root;
        java.io.File file9 = null;
        explodedArchive7.manifestFile = file9;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive11 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest12 = explodedArchive11.manifest;
        explodedArchive11.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive15 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest16 = explodedArchive15.manifest;
        explodedArchive15.recursive = false;
        java.util.jar.Manifest manifest19 = explodedArchive15.manifest;
        java.io.File file20 = explodedArchive15.manifestFile;
        java.io.File file21 = null;
        java.io.File file22 = explodedArchive15.getManifestFile(file21);
        explodedArchive11.manifestFile = file21;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive24 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest25 = explodedArchive24.manifest;
        explodedArchive24.recursive = false;
        java.util.jar.Manifest manifest28 = explodedArchive24.manifest;
        java.io.File file29 = explodedArchive24.manifestFile;
        java.io.File file30 = null;
        java.io.File file31 = explodedArchive24.getManifestFile(file30);
        explodedArchive11.manifestFile = file31;
        java.io.File file33 = explodedArchive7.getManifestFile(file31);
        java.io.File file34 = explodedArchive5.getManifestFile(file31);
        fileEntryIterator2.root = file31;
        fileEntry0.file = file31;
        java.io.File file37 = fileEntry0.getFile();
        java.io.File file38 = fileEntry0.getFile();
        java.io.File file39 = fileEntry0.getFile();
        java.lang.String str40 = fileEntry0.name;
        java.lang.String str41 = fileEntry0.getName();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "exploded archive" + "'", str6.equals("exploded archive"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file22.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file22.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file31.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file31.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file33.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file33.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file34.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file34.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file37.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file37.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file38.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file38.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file39.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file39.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str41);
    }

    @Test
    public void test567() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test567");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        boolean boolean1 = fileEntryIterator0.recursive;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator2 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        boolean boolean3 = fileEntryIterator2.hasNext();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator4 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator5 = entryComparator4.reversed();
        java.util.Comparator<java.io.File> fileComparator6 = fileComparator5.reversed();
        fileEntryIterator2.entryComparator = fileComparator6;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive8 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file9 = explodedArchive8.root;
        java.io.File file10 = null;
        explodedArchive8.manifestFile = file10;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive12 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest13 = explodedArchive12.manifest;
        explodedArchive12.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive16 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest17 = explodedArchive16.manifest;
        explodedArchive16.recursive = false;
        java.util.jar.Manifest manifest20 = explodedArchive16.manifest;
        java.io.File file21 = explodedArchive16.manifestFile;
        java.io.File file22 = null;
        java.io.File file23 = explodedArchive16.getManifestFile(file22);
        explodedArchive12.manifestFile = file22;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive25 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest26 = explodedArchive25.manifest;
        explodedArchive25.recursive = false;
        java.util.jar.Manifest manifest29 = explodedArchive25.manifest;
        java.io.File file30 = explodedArchive25.manifestFile;
        java.io.File file31 = null;
        java.io.File file32 = explodedArchive25.getManifestFile(file31);
        explodedArchive12.manifestFile = file32;
        java.io.File file34 = explodedArchive8.getManifestFile(file32);
        java.util.Iterator<java.io.File> fileItor35 = fileEntryIterator2.listFiles(file34);
        fileEntryIterator0.root = file34;
        java.io.File file37 = fileEntryIterator0.root;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file23.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file23.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file32.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file32.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file34.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file34.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file37.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file37.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
    }

    @Test
    public void test568() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test568");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file1 = null;
        fileEntryIterator0.current = file1;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive3 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest4 = explodedArchive3.manifest;
        explodedArchive3.recursive = false;
        java.util.jar.Manifest manifest7 = explodedArchive3.manifest;
        java.io.File file8 = explodedArchive3.manifestFile;
        java.io.File file9 = null;
        java.io.File file10 = explodedArchive3.getManifestFile(file9);
        java.util.Iterator<java.io.File> fileItor11 = fileEntryIterator0.listFiles(file10);
        java.io.File file12 = fileEntryIterator0.root;
        java.io.File file13 = fileEntryIterator0.root;
        java.io.File file14 = fileEntryIterator0.current;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator15 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        boolean boolean16 = fileEntryIterator15.hasNext();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator17 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator18 = entryComparator17.reversed();
        java.util.Comparator<java.io.File> fileComparator19 = fileComparator18.reversed();
        fileEntryIterator15.entryComparator = fileComparator19;
        java.util.Comparator<java.io.File> fileComparator21 = fileEntryIterator15.entryComparator;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator22 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator23 = entryComparator22.reversed();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator24 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator25 = entryComparator24.reversed();
        java.util.Comparator<java.io.File> fileComparator26 = entryComparator22.thenComparing(fileComparator25);
        java.util.Comparator<java.io.File> fileComparator27 = fileComparator21.thenComparing(fileComparator25);
        fileEntryIterator0.entryComparator = fileComparator21;
        java.util.Comparator<java.io.File> fileComparator29 = fileComparator21.reversed();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator30 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        boolean boolean31 = fileEntryIterator30.hasNext();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator32 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator33 = entryComparator32.reversed();
        java.util.Comparator<java.io.File> fileComparator34 = fileComparator33.reversed();
        fileEntryIterator30.entryComparator = fileComparator34;
        java.util.Comparator<java.io.File> fileComparator36 = fileComparator21.thenComparing(fileComparator34);
        java.util.Comparator<java.io.File> fileComparator37 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Comparator<java.io.File> fileComparator38 = fileComparator34.thenComparing(fileComparator37);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator36);
    }

    @Test
    public void test569() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test569");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest1 = explodedArchive0.manifest;
        java.util.jar.Manifest manifest2 = null;
        explodedArchive0.manifest = manifest2;
        java.io.File file4 = explodedArchive0.root;
        java.lang.String str5 = explodedArchive0.toString();
        org.springframework.boot.loader.archive.Archive.EntryFilter entryFilter6 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<org.springframework.boot.loader.archive.Archive> archiveList7 = explodedArchive0.getNestedArchives(entryFilter6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "exploded archive" + "'", str5.equals("exploded archive"));
    }

    @Test
    public void test570() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test570");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntry fileEntry0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntry();
        java.io.File file1 = fileEntry0.getFile();
        java.io.File file2 = fileEntry0.getFile();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive3 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file4 = explodedArchive3.root;
        java.io.File file5 = null;
        explodedArchive3.manifestFile = file5;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive7 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest8 = explodedArchive7.manifest;
        explodedArchive7.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive11 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest12 = explodedArchive11.manifest;
        explodedArchive11.recursive = false;
        java.util.jar.Manifest manifest15 = explodedArchive11.manifest;
        java.io.File file16 = explodedArchive11.manifestFile;
        java.io.File file17 = null;
        java.io.File file18 = explodedArchive11.getManifestFile(file17);
        explodedArchive7.manifestFile = file17;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive20 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest21 = explodedArchive20.manifest;
        explodedArchive20.recursive = false;
        java.util.jar.Manifest manifest24 = explodedArchive20.manifest;
        java.io.File file25 = explodedArchive20.manifestFile;
        java.io.File file26 = null;
        java.io.File file27 = explodedArchive20.getManifestFile(file26);
        explodedArchive7.manifestFile = file27;
        java.io.File file29 = explodedArchive3.getManifestFile(file27);
        fileEntry0.file = file29;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator31 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        boolean boolean32 = fileEntryIterator31.recursive;
        java.io.File file33 = fileEntryIterator31.current;
        boolean boolean34 = fileEntryIterator31.hasNext();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator35 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator36 = entryComparator35.reversed();
        java.util.Comparator<java.io.File> fileComparator37 = entryComparator35.reversed();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive38 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest39 = explodedArchive38.manifest;
        explodedArchive38.recursive = false;
        java.util.jar.Manifest manifest42 = explodedArchive38.manifest;
        java.io.File file43 = explodedArchive38.manifestFile;
        java.io.File file44 = null;
        java.io.File file45 = explodedArchive38.getManifestFile(file44);
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive46 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest47 = explodedArchive46.manifest;
        explodedArchive46.recursive = false;
        java.io.File file50 = null;
        explodedArchive46.root = file50;
        java.io.File file52 = explodedArchive46.root;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive53 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest54 = explodedArchive53.manifest;
        explodedArchive53.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive57 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest58 = explodedArchive57.manifest;
        explodedArchive57.recursive = false;
        java.util.jar.Manifest manifest61 = explodedArchive57.manifest;
        java.io.File file62 = explodedArchive57.manifestFile;
        java.io.File file63 = null;
        java.io.File file64 = explodedArchive57.getManifestFile(file63);
        explodedArchive53.manifestFile = file63;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive66 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest67 = explodedArchive66.manifest;
        explodedArchive66.recursive = false;
        java.util.jar.Manifest manifest70 = explodedArchive66.manifest;
        java.io.File file71 = explodedArchive66.manifestFile;
        java.io.File file72 = null;
        java.io.File file73 = explodedArchive66.getManifestFile(file72);
        explodedArchive53.manifestFile = file73;
        java.io.File file75 = explodedArchive46.getManifestFile(file73);
        int int76 = entryComparator35.compare(file45, file73);
        java.util.Iterator<java.io.File> fileItor77 = fileEntryIterator31.listFiles(file45);
        fileEntry0.file = file45;
        boolean boolean79 = fileEntry0.isDirectory();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file18.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file18.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file27.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file27.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file29.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file29.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file45.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file45.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file64.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file64.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file73);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file73.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file73.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file75);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file75.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file75.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor77);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
    }

    @Test
    public void test571() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test571");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest1 = explodedArchive0.manifest;
        java.util.jar.Manifest manifest2 = null;
        explodedArchive0.manifest = manifest2;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive4 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest5 = explodedArchive4.manifest;
        explodedArchive4.recursive = false;
        java.util.jar.Manifest manifest8 = explodedArchive4.manifest;
        java.io.File file9 = explodedArchive4.manifestFile;
        java.io.File file10 = null;
        java.io.File file11 = explodedArchive4.getManifestFile(file10);
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator12 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file13 = null;
        fileEntryIterator12.current = file13;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive15 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.lang.String str16 = explodedArchive15.toString();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive17 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file18 = explodedArchive17.root;
        java.io.File file19 = null;
        explodedArchive17.manifestFile = file19;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive21 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest22 = explodedArchive21.manifest;
        explodedArchive21.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive25 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest26 = explodedArchive25.manifest;
        explodedArchive25.recursive = false;
        java.util.jar.Manifest manifest29 = explodedArchive25.manifest;
        java.io.File file30 = explodedArchive25.manifestFile;
        java.io.File file31 = null;
        java.io.File file32 = explodedArchive25.getManifestFile(file31);
        explodedArchive21.manifestFile = file31;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive34 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest35 = explodedArchive34.manifest;
        explodedArchive34.recursive = false;
        java.util.jar.Manifest manifest38 = explodedArchive34.manifest;
        java.io.File file39 = explodedArchive34.manifestFile;
        java.io.File file40 = null;
        java.io.File file41 = explodedArchive34.getManifestFile(file40);
        explodedArchive21.manifestFile = file41;
        java.io.File file43 = explodedArchive17.getManifestFile(file41);
        java.io.File file44 = explodedArchive15.getManifestFile(file41);
        fileEntryIterator12.root = file41;
        explodedArchive4.root = file41;
        explodedArchive0.root = file41;
        // The following exception was thrown during execution in test generation
        try {
            org.springframework.boot.loader.archive.ExplodedArchive explodedArchive48 = new org.springframework.boot.loader.archive.ExplodedArchive(file41);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid source folder META-INF/MANIFEST.MF");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file11.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file11.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str16 + "' != '" + "exploded archive" + "'", str16.equals("exploded archive"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file32.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file32.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file41.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file41.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file43.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file43.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file44.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file44.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
    }

    @Test
    public void test572() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test572");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest1 = explodedArchive0.manifest;
        explodedArchive0.recursive = false;
        java.io.File file4 = null;
        explodedArchive0.root = file4;
        java.io.File file6 = explodedArchive0.root;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive7 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest8 = explodedArchive7.manifest;
        explodedArchive7.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive11 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest12 = explodedArchive11.manifest;
        explodedArchive11.recursive = false;
        java.util.jar.Manifest manifest15 = explodedArchive11.manifest;
        java.io.File file16 = explodedArchive11.manifestFile;
        java.io.File file17 = null;
        java.io.File file18 = explodedArchive11.getManifestFile(file17);
        explodedArchive7.manifestFile = file17;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive20 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest21 = explodedArchive20.manifest;
        explodedArchive20.recursive = false;
        java.util.jar.Manifest manifest24 = explodedArchive20.manifest;
        java.io.File file25 = explodedArchive20.manifestFile;
        java.io.File file26 = null;
        java.io.File file27 = explodedArchive20.getManifestFile(file26);
        explodedArchive7.manifestFile = file27;
        java.io.File file29 = explodedArchive0.getManifestFile(file27);
        java.io.File file30 = explodedArchive0.root;
        java.util.jar.Manifest manifest31 = null;
        explodedArchive0.manifest = manifest31;
        boolean boolean33 = explodedArchive0.recursive;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file18.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file18.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file27.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file27.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file29.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file29.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
    }

    @Test
    public void test573() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test573");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntry fileEntry0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntry();
        java.lang.String str1 = fileEntry0.name;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator2 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file3 = null;
        fileEntryIterator2.current = file3;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive5 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.lang.String str6 = explodedArchive5.toString();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive7 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file8 = explodedArchive7.root;
        java.io.File file9 = null;
        explodedArchive7.manifestFile = file9;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive11 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest12 = explodedArchive11.manifest;
        explodedArchive11.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive15 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest16 = explodedArchive15.manifest;
        explodedArchive15.recursive = false;
        java.util.jar.Manifest manifest19 = explodedArchive15.manifest;
        java.io.File file20 = explodedArchive15.manifestFile;
        java.io.File file21 = null;
        java.io.File file22 = explodedArchive15.getManifestFile(file21);
        explodedArchive11.manifestFile = file21;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive24 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest25 = explodedArchive24.manifest;
        explodedArchive24.recursive = false;
        java.util.jar.Manifest manifest28 = explodedArchive24.manifest;
        java.io.File file29 = explodedArchive24.manifestFile;
        java.io.File file30 = null;
        java.io.File file31 = explodedArchive24.getManifestFile(file30);
        explodedArchive11.manifestFile = file31;
        java.io.File file33 = explodedArchive7.getManifestFile(file31);
        java.io.File file34 = explodedArchive5.getManifestFile(file31);
        fileEntryIterator2.root = file31;
        fileEntry0.file = file31;
        java.io.File file37 = fileEntry0.getFile();
        java.lang.String str38 = fileEntry0.getName();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "exploded archive" + "'", str6.equals("exploded archive"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file22.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file22.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file31.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file31.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file33.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file33.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file34.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file34.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file37.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file37.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str38);
    }

    @Test
    public void test574() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test574");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest1 = explodedArchive0.manifest;
        explodedArchive0.recursive = false;
        java.io.File file4 = null;
        explodedArchive0.root = file4;
        java.io.File file6 = explodedArchive0.manifestFile;
        java.io.File file7 = explodedArchive0.manifestFile;
        java.io.File file8 = explodedArchive0.manifestFile;
        boolean boolean9 = explodedArchive0.recursive;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Spliterator<org.springframework.boot.loader.archive.Archive.Entry> entrySpliterator10 = explodedArchive0.spliterator();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test575() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test575");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file1 = explodedArchive0.root;
        java.io.File file2 = null;
        explodedArchive0.manifestFile = file2;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive4 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest5 = explodedArchive4.manifest;
        explodedArchive4.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive8 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest9 = explodedArchive8.manifest;
        explodedArchive8.recursive = false;
        java.util.jar.Manifest manifest12 = explodedArchive8.manifest;
        java.io.File file13 = explodedArchive8.manifestFile;
        java.io.File file14 = null;
        java.io.File file15 = explodedArchive8.getManifestFile(file14);
        explodedArchive4.manifestFile = file14;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive17 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest18 = explodedArchive17.manifest;
        explodedArchive17.recursive = false;
        java.util.jar.Manifest manifest21 = explodedArchive17.manifest;
        java.io.File file22 = explodedArchive17.manifestFile;
        java.io.File file23 = null;
        java.io.File file24 = explodedArchive17.getManifestFile(file23);
        explodedArchive4.manifestFile = file24;
        java.io.File file26 = explodedArchive0.getManifestFile(file24);
        java.io.File file27 = explodedArchive0.root;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator28 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        boolean boolean29 = fileEntryIterator28.hasNext();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator30 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator31 = entryComparator30.reversed();
        java.util.Comparator<java.io.File> fileComparator32 = fileComparator31.reversed();
        fileEntryIterator28.entryComparator = fileComparator32;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive34 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file35 = explodedArchive34.root;
        java.io.File file36 = null;
        explodedArchive34.manifestFile = file36;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive38 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest39 = explodedArchive38.manifest;
        explodedArchive38.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive42 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest43 = explodedArchive42.manifest;
        explodedArchive42.recursive = false;
        java.util.jar.Manifest manifest46 = explodedArchive42.manifest;
        java.io.File file47 = explodedArchive42.manifestFile;
        java.io.File file48 = null;
        java.io.File file49 = explodedArchive42.getManifestFile(file48);
        explodedArchive38.manifestFile = file48;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive51 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest52 = explodedArchive51.manifest;
        explodedArchive51.recursive = false;
        java.util.jar.Manifest manifest55 = explodedArchive51.manifest;
        java.io.File file56 = explodedArchive51.manifestFile;
        java.io.File file57 = null;
        java.io.File file58 = explodedArchive51.getManifestFile(file57);
        explodedArchive38.manifestFile = file58;
        java.io.File file60 = explodedArchive34.getManifestFile(file58);
        java.util.Iterator<java.io.File> fileItor61 = fileEntryIterator28.listFiles(file60);
        explodedArchive0.manifestFile = file60;
        // The following exception was thrown during execution in test generation
        try {
            java.net.URL uRL63 = explodedArchive0.getUrl();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file15.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file15.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file24.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file24.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file26.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file26.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file49.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file49.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file58.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file58.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file60.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file60.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor61);
    }

    @Test
    public void test576() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test576");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file1 = null;
        fileEntryIterator0.current = file1;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive3 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest4 = explodedArchive3.manifest;
        explodedArchive3.recursive = false;
        java.util.jar.Manifest manifest7 = explodedArchive3.manifest;
        java.io.File file8 = explodedArchive3.manifestFile;
        java.io.File file9 = null;
        java.io.File file10 = explodedArchive3.getManifestFile(file9);
        java.util.Iterator<java.io.File> fileItor11 = fileEntryIterator0.listFiles(file10);
        boolean boolean12 = fileEntryIterator0.hasNext();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator13 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        boolean boolean14 = fileEntryIterator13.recursive;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator15 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        boolean boolean16 = fileEntryIterator15.hasNext();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator17 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator18 = entryComparator17.reversed();
        java.util.Comparator<java.io.File> fileComparator19 = fileComparator18.reversed();
        fileEntryIterator15.entryComparator = fileComparator19;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive21 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file22 = explodedArchive21.root;
        java.io.File file23 = null;
        explodedArchive21.manifestFile = file23;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive25 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest26 = explodedArchive25.manifest;
        explodedArchive25.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive29 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest30 = explodedArchive29.manifest;
        explodedArchive29.recursive = false;
        java.util.jar.Manifest manifest33 = explodedArchive29.manifest;
        java.io.File file34 = explodedArchive29.manifestFile;
        java.io.File file35 = null;
        java.io.File file36 = explodedArchive29.getManifestFile(file35);
        explodedArchive25.manifestFile = file35;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive38 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest39 = explodedArchive38.manifest;
        explodedArchive38.recursive = false;
        java.util.jar.Manifest manifest42 = explodedArchive38.manifest;
        java.io.File file43 = explodedArchive38.manifestFile;
        java.io.File file44 = null;
        java.io.File file45 = explodedArchive38.getManifestFile(file44);
        explodedArchive25.manifestFile = file45;
        java.io.File file47 = explodedArchive21.getManifestFile(file45);
        java.util.Iterator<java.io.File> fileItor48 = fileEntryIterator15.listFiles(file47);
        fileEntryIterator13.root = file47;
        fileEntryIterator0.current = file47;
        // The following exception was thrown during execution in test generation
        try {
            fileEntryIterator0.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: remove");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file36.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file36.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file45.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file45.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file47.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file47.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor48);
    }

    @Test
    public void test577() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test577");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file1 = explodedArchive0.root;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive2 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest3 = explodedArchive2.manifest;
        explodedArchive2.recursive = false;
        java.util.jar.Manifest manifest6 = explodedArchive2.manifest;
        java.io.File file7 = explodedArchive2.manifestFile;
        java.io.File file8 = null;
        java.io.File file9 = explodedArchive2.getManifestFile(file8);
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator10 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file11 = null;
        fileEntryIterator10.current = file11;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive13 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.lang.String str14 = explodedArchive13.toString();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive15 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file16 = explodedArchive15.root;
        java.io.File file17 = null;
        explodedArchive15.manifestFile = file17;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive19 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest20 = explodedArchive19.manifest;
        explodedArchive19.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive23 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest24 = explodedArchive23.manifest;
        explodedArchive23.recursive = false;
        java.util.jar.Manifest manifest27 = explodedArchive23.manifest;
        java.io.File file28 = explodedArchive23.manifestFile;
        java.io.File file29 = null;
        java.io.File file30 = explodedArchive23.getManifestFile(file29);
        explodedArchive19.manifestFile = file29;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive32 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest33 = explodedArchive32.manifest;
        explodedArchive32.recursive = false;
        java.util.jar.Manifest manifest36 = explodedArchive32.manifest;
        java.io.File file37 = explodedArchive32.manifestFile;
        java.io.File file38 = null;
        java.io.File file39 = explodedArchive32.getManifestFile(file38);
        explodedArchive19.manifestFile = file39;
        java.io.File file41 = explodedArchive15.getManifestFile(file39);
        java.io.File file42 = explodedArchive13.getManifestFile(file39);
        fileEntryIterator10.root = file39;
        explodedArchive2.root = file39;
        java.io.File file45 = explodedArchive0.getManifestFile(file39);
        java.util.jar.Manifest manifest46 = explodedArchive0.manifest;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file9.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file9.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str14 + "' != '" + "exploded archive" + "'", str14.equals("exploded archive"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file30.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file30.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file39.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file39.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file41.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file41.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file42.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file42.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file45.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file45.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest46);
    }

    @Test
    public void test578() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test578");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file1 = null;
        fileEntryIterator0.current = file1;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive3 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest4 = explodedArchive3.manifest;
        explodedArchive3.recursive = false;
        java.util.jar.Manifest manifest7 = explodedArchive3.manifest;
        java.io.File file8 = explodedArchive3.manifestFile;
        java.io.File file9 = null;
        java.io.File file10 = explodedArchive3.getManifestFile(file9);
        java.util.Iterator<java.io.File> fileItor11 = fileEntryIterator0.listFiles(file10);
        boolean boolean12 = fileEntryIterator0.hasNext();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator13 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator14 = entryComparator13.reversed();
        java.util.Comparator<java.io.File> fileComparator15 = entryComparator13.reversed();
        fileEntryIterator0.entryComparator = fileComparator15;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator17 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file18 = null;
        fileEntryIterator17.current = file18;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive20 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.lang.String str21 = explodedArchive20.toString();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive22 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file23 = explodedArchive22.root;
        java.io.File file24 = null;
        explodedArchive22.manifestFile = file24;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive26 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest27 = explodedArchive26.manifest;
        explodedArchive26.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive30 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest31 = explodedArchive30.manifest;
        explodedArchive30.recursive = false;
        java.util.jar.Manifest manifest34 = explodedArchive30.manifest;
        java.io.File file35 = explodedArchive30.manifestFile;
        java.io.File file36 = null;
        java.io.File file37 = explodedArchive30.getManifestFile(file36);
        explodedArchive26.manifestFile = file36;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive39 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest40 = explodedArchive39.manifest;
        explodedArchive39.recursive = false;
        java.util.jar.Manifest manifest43 = explodedArchive39.manifest;
        java.io.File file44 = explodedArchive39.manifestFile;
        java.io.File file45 = null;
        java.io.File file46 = explodedArchive39.getManifestFile(file45);
        explodedArchive26.manifestFile = file46;
        java.io.File file48 = explodedArchive22.getManifestFile(file46);
        java.io.File file49 = explodedArchive20.getManifestFile(file46);
        fileEntryIterator17.root = file46;
        fileEntryIterator0.current = file46;
        // The following exception was thrown during execution in test generation
        try {
            org.springframework.boot.loader.archive.ExplodedArchive explodedArchive52 = new org.springframework.boot.loader.archive.ExplodedArchive(file46);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid source folder META-INF/MANIFEST.MF");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str21 + "' != '" + "exploded archive" + "'", str21.equals("exploded archive"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file37.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file37.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file46.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file46.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file48.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file48.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file49.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file49.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
    }

    @Test
    public void test579() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test579");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file1 = explodedArchive0.root;
        java.io.File file2 = null;
        explodedArchive0.manifestFile = file2;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive4 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest5 = explodedArchive4.manifest;
        explodedArchive4.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive8 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest9 = explodedArchive8.manifest;
        explodedArchive8.recursive = false;
        java.util.jar.Manifest manifest12 = explodedArchive8.manifest;
        java.io.File file13 = explodedArchive8.manifestFile;
        java.io.File file14 = null;
        java.io.File file15 = explodedArchive8.getManifestFile(file14);
        explodedArchive4.manifestFile = file14;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive17 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest18 = explodedArchive17.manifest;
        explodedArchive17.recursive = false;
        java.util.jar.Manifest manifest21 = explodedArchive17.manifest;
        java.io.File file22 = explodedArchive17.manifestFile;
        java.io.File file23 = null;
        java.io.File file24 = explodedArchive17.getManifestFile(file23);
        explodedArchive4.manifestFile = file24;
        java.io.File file26 = explodedArchive0.getManifestFile(file24);
        java.util.jar.Manifest manifest27 = null;
        explodedArchive0.manifest = manifest27;
        java.io.File file29 = explodedArchive0.root;
        java.lang.String str30 = explodedArchive0.toString();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file15.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file15.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file24.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file24.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file26.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file26.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str30 + "' != '" + "exploded archive" + "'", str30.equals("exploded archive"));
    }

    @Test
    public void test580() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test580");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest1 = explodedArchive0.manifest;
        explodedArchive0.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive4 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest5 = explodedArchive4.manifest;
        explodedArchive4.recursive = false;
        java.util.jar.Manifest manifest8 = explodedArchive4.manifest;
        java.io.File file9 = explodedArchive4.manifestFile;
        java.io.File file10 = null;
        java.io.File file11 = explodedArchive4.getManifestFile(file10);
        explodedArchive0.manifestFile = file10;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive13 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest14 = explodedArchive13.manifest;
        explodedArchive13.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive17 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest18 = explodedArchive17.manifest;
        explodedArchive17.recursive = false;
        java.util.jar.Manifest manifest21 = explodedArchive17.manifest;
        java.io.File file22 = explodedArchive17.manifestFile;
        java.io.File file23 = null;
        java.io.File file24 = explodedArchive17.getManifestFile(file23);
        explodedArchive13.manifestFile = file23;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive26 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest27 = explodedArchive26.manifest;
        explodedArchive26.recursive = false;
        java.util.jar.Manifest manifest30 = explodedArchive26.manifest;
        java.io.File file31 = explodedArchive26.manifestFile;
        java.io.File file32 = null;
        java.io.File file33 = explodedArchive26.getManifestFile(file32);
        explodedArchive13.manifestFile = file33;
        explodedArchive0.root = file33;
        java.net.URL uRL36 = explodedArchive0.getUrl();
        java.util.jar.Manifest manifest37 = explodedArchive0.manifest;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator38 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file39 = null;
        fileEntryIterator38.current = file39;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive41 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest42 = explodedArchive41.manifest;
        explodedArchive41.recursive = false;
        java.util.jar.Manifest manifest45 = explodedArchive41.manifest;
        java.io.File file46 = explodedArchive41.manifestFile;
        java.io.File file47 = null;
        java.io.File file48 = explodedArchive41.getManifestFile(file47);
        java.util.Iterator<java.io.File> fileItor49 = fileEntryIterator38.listFiles(file48);
        java.io.File file50 = fileEntryIterator38.root;
        java.io.File file51 = fileEntryIterator38.root;
        java.util.Deque<java.util.Iterator<java.io.File>> fileItorQueue52 = fileEntryIterator38.stack;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator53 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator54 = entryComparator53.reversed();
        java.util.Comparator<java.io.File> fileComparator55 = entryComparator53.reversed();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive56 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest57 = explodedArchive56.manifest;
        explodedArchive56.recursive = false;
        java.util.jar.Manifest manifest60 = explodedArchive56.manifest;
        java.io.File file61 = explodedArchive56.manifestFile;
        java.io.File file62 = null;
        java.io.File file63 = explodedArchive56.getManifestFile(file62);
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive64 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest65 = explodedArchive64.manifest;
        explodedArchive64.recursive = false;
        java.io.File file68 = null;
        explodedArchive64.root = file68;
        java.io.File file70 = explodedArchive64.root;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive71 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest72 = explodedArchive71.manifest;
        explodedArchive71.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive75 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest76 = explodedArchive75.manifest;
        explodedArchive75.recursive = false;
        java.util.jar.Manifest manifest79 = explodedArchive75.manifest;
        java.io.File file80 = explodedArchive75.manifestFile;
        java.io.File file81 = null;
        java.io.File file82 = explodedArchive75.getManifestFile(file81);
        explodedArchive71.manifestFile = file81;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive84 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest85 = explodedArchive84.manifest;
        explodedArchive84.recursive = false;
        java.util.jar.Manifest manifest88 = explodedArchive84.manifest;
        java.io.File file89 = explodedArchive84.manifestFile;
        java.io.File file90 = null;
        java.io.File file91 = explodedArchive84.getManifestFile(file90);
        explodedArchive71.manifestFile = file91;
        java.io.File file93 = explodedArchive64.getManifestFile(file91);
        int int94 = entryComparator53.compare(file63, file91);
        fileEntryIterator38.root = file63;
        java.io.File file96 = explodedArchive0.getManifestFile(file63);
        // The following exception was thrown during execution in test generation
        try {
            org.springframework.boot.loader.archive.ExplodedArchive explodedArchive98 = new org.springframework.boot.loader.archive.ExplodedArchive(file63, true);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid source folder META-INF/MANIFEST.MF");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file11.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file11.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file24.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file24.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file33.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file33.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(uRL36);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(uRL36.toString(), "file:/server/study-execution/new-nimrod/nimrod-hunoroutput-test-dest/spring-boot/af20dc6cc45c032573413c401f9f73aa75371744/randoop_1/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file48.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file48.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItorQueue52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file63.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file63.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest76);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest79);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file80);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file82);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file82.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file82.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest85);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest88);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file89);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file91);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file91.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file91.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file93);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file93.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file93.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 0 + "'", int94 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file96);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file96.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file96.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
    }

    @Test
    public void test581() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test581");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator1 = entryComparator0.reversed();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator2 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file3 = null;
        fileEntryIterator2.current = file3;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive5 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest6 = explodedArchive5.manifest;
        explodedArchive5.recursive = false;
        java.util.jar.Manifest manifest9 = explodedArchive5.manifest;
        java.io.File file10 = explodedArchive5.manifestFile;
        java.io.File file11 = null;
        java.io.File file12 = explodedArchive5.getManifestFile(file11);
        java.util.Iterator<java.io.File> fileItor13 = fileEntryIterator2.listFiles(file12);
        java.io.File file14 = fileEntryIterator2.current;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator15 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file16 = null;
        fileEntryIterator15.current = file16;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive18 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest19 = explodedArchive18.manifest;
        explodedArchive18.recursive = false;
        java.util.jar.Manifest manifest22 = explodedArchive18.manifest;
        java.io.File file23 = explodedArchive18.manifestFile;
        java.io.File file24 = null;
        java.io.File file25 = explodedArchive18.getManifestFile(file24);
        java.util.Iterator<java.io.File> fileItor26 = fileEntryIterator15.listFiles(file25);
        java.util.ArrayDeque<java.util.Iterator<java.io.File>> fileItorQueue27 = new java.util.ArrayDeque<java.util.Iterator<java.io.File>>();
        boolean boolean28 = fileItorQueue27.add(fileItor26);
        fileEntryIterator2.stack = fileItorQueue27;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive30 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest31 = explodedArchive30.manifest;
        explodedArchive30.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive34 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest35 = explodedArchive34.manifest;
        explodedArchive34.recursive = false;
        java.util.jar.Manifest manifest38 = explodedArchive34.manifest;
        java.io.File file39 = explodedArchive34.manifestFile;
        java.io.File file40 = null;
        java.io.File file41 = explodedArchive34.getManifestFile(file40);
        explodedArchive30.manifestFile = file40;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive43 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest44 = explodedArchive43.manifest;
        explodedArchive43.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive47 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest48 = explodedArchive47.manifest;
        explodedArchive47.recursive = false;
        java.util.jar.Manifest manifest51 = explodedArchive47.manifest;
        java.io.File file52 = explodedArchive47.manifestFile;
        java.io.File file53 = null;
        java.io.File file54 = explodedArchive47.getManifestFile(file53);
        explodedArchive43.manifestFile = file53;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive56 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest57 = explodedArchive56.manifest;
        explodedArchive56.recursive = false;
        java.util.jar.Manifest manifest60 = explodedArchive56.manifest;
        java.io.File file61 = explodedArchive56.manifestFile;
        java.io.File file62 = null;
        java.io.File file63 = explodedArchive56.getManifestFile(file62);
        explodedArchive43.manifestFile = file63;
        explodedArchive30.root = file63;
        java.util.Iterator<java.io.File> fileItor66 = fileEntryIterator2.listFiles(file63);
        java.util.Comparator<java.io.File> fileComparator67 = fileEntryIterator2.entryComparator;
        java.util.Comparator<java.io.File> fileComparator68 = entryComparator0.thenComparing(fileComparator67);
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator69 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        boolean boolean70 = fileEntryIterator69.hasNext();
        java.io.File file71 = fileEntryIterator69.root;
        boolean boolean72 = fileEntryIterator69.hasNext();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator73 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator74 = entryComparator73.reversed();
        java.util.Comparator<java.io.File> fileComparator75 = entryComparator73.reversed();
        fileEntryIterator69.entryComparator = entryComparator73;
        java.util.Comparator<java.io.File> fileComparator77 = fileComparator67.thenComparing((java.util.Comparator<java.io.File>) entryComparator73);
        java.lang.Class<?> wildcardClass78 = fileComparator67.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file12.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file12.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file25.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file25.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file41.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file41.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file54.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file54.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file63.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file63.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator75);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator77);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass78);
    }

    @Test
    public void test582() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test582");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntry fileEntry0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntry();
        java.io.File file1 = fileEntry0.getFile();
        fileEntry0.name = "hi!";
        java.io.File file4 = null;
        fileEntry0.file = file4;
        java.lang.String str6 = fileEntry0.name;
        java.io.File file7 = fileEntry0.getFile();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive8 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file9 = explodedArchive8.root;
        java.io.File file10 = null;
        explodedArchive8.manifestFile = file10;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive12 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest13 = explodedArchive12.manifest;
        explodedArchive12.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive16 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest17 = explodedArchive16.manifest;
        explodedArchive16.recursive = false;
        java.util.jar.Manifest manifest20 = explodedArchive16.manifest;
        java.io.File file21 = explodedArchive16.manifestFile;
        java.io.File file22 = null;
        java.io.File file23 = explodedArchive16.getManifestFile(file22);
        explodedArchive12.manifestFile = file22;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive25 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest26 = explodedArchive25.manifest;
        explodedArchive25.recursive = false;
        java.util.jar.Manifest manifest29 = explodedArchive25.manifest;
        java.io.File file30 = explodedArchive25.manifestFile;
        java.io.File file31 = null;
        java.io.File file32 = explodedArchive25.getManifestFile(file31);
        explodedArchive12.manifestFile = file32;
        java.io.File file34 = explodedArchive8.getManifestFile(file32);
        java.io.File file35 = explodedArchive8.root;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator36 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        boolean boolean37 = fileEntryIterator36.hasNext();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator38 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator39 = entryComparator38.reversed();
        java.util.Comparator<java.io.File> fileComparator40 = fileComparator39.reversed();
        fileEntryIterator36.entryComparator = fileComparator40;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive42 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file43 = explodedArchive42.root;
        java.io.File file44 = null;
        explodedArchive42.manifestFile = file44;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive46 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest47 = explodedArchive46.manifest;
        explodedArchive46.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive50 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest51 = explodedArchive50.manifest;
        explodedArchive50.recursive = false;
        java.util.jar.Manifest manifest54 = explodedArchive50.manifest;
        java.io.File file55 = explodedArchive50.manifestFile;
        java.io.File file56 = null;
        java.io.File file57 = explodedArchive50.getManifestFile(file56);
        explodedArchive46.manifestFile = file56;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive59 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest60 = explodedArchive59.manifest;
        explodedArchive59.recursive = false;
        java.util.jar.Manifest manifest63 = explodedArchive59.manifest;
        java.io.File file64 = explodedArchive59.manifestFile;
        java.io.File file65 = null;
        java.io.File file66 = explodedArchive59.getManifestFile(file65);
        explodedArchive46.manifestFile = file66;
        java.io.File file68 = explodedArchive42.getManifestFile(file66);
        java.util.Iterator<java.io.File> fileItor69 = fileEntryIterator36.listFiles(file68);
        explodedArchive8.manifestFile = file68;
        java.io.File file71 = explodedArchive8.manifestFile;
        fileEntry0.file = file71;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "hi!" + "'", str6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file23.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file23.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file32.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file32.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file34.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file34.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file57.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file57.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file66.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file66.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file68.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file68.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file71.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file71.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
    }

    @Test
    public void test583() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test583");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file1 = null;
        fileEntryIterator0.current = file1;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive3 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest4 = explodedArchive3.manifest;
        explodedArchive3.recursive = false;
        java.util.jar.Manifest manifest7 = explodedArchive3.manifest;
        java.io.File file8 = explodedArchive3.manifestFile;
        java.io.File file9 = null;
        java.io.File file10 = explodedArchive3.getManifestFile(file9);
        java.util.Iterator<java.io.File> fileItor11 = fileEntryIterator0.listFiles(file10);
        java.io.File file12 = fileEntryIterator0.root;
        java.io.File file13 = fileEntryIterator0.poll();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive14 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.lang.String str15 = explodedArchive14.toString();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive16 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file17 = explodedArchive16.root;
        java.io.File file18 = null;
        explodedArchive16.manifestFile = file18;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive20 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest21 = explodedArchive20.manifest;
        explodedArchive20.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive24 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest25 = explodedArchive24.manifest;
        explodedArchive24.recursive = false;
        java.util.jar.Manifest manifest28 = explodedArchive24.manifest;
        java.io.File file29 = explodedArchive24.manifestFile;
        java.io.File file30 = null;
        java.io.File file31 = explodedArchive24.getManifestFile(file30);
        explodedArchive20.manifestFile = file30;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive33 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest34 = explodedArchive33.manifest;
        explodedArchive33.recursive = false;
        java.util.jar.Manifest manifest37 = explodedArchive33.manifest;
        java.io.File file38 = explodedArchive33.manifestFile;
        java.io.File file39 = null;
        java.io.File file40 = explodedArchive33.getManifestFile(file39);
        explodedArchive20.manifestFile = file40;
        java.io.File file42 = explodedArchive16.getManifestFile(file40);
        java.io.File file43 = explodedArchive14.getManifestFile(file40);
        java.io.File file44 = null;
        java.io.File file45 = explodedArchive14.getManifestFile(file44);
        fileEntryIterator0.current = file44;
        java.io.File file47 = fileEntryIterator0.current;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntry fileEntry48 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntry();
        java.io.File file49 = fileEntry48.getFile();
        java.io.File file50 = fileEntry48.getFile();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive51 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file52 = explodedArchive51.root;
        java.io.File file53 = null;
        explodedArchive51.manifestFile = file53;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive55 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest56 = explodedArchive55.manifest;
        explodedArchive55.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive59 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest60 = explodedArchive59.manifest;
        explodedArchive59.recursive = false;
        java.util.jar.Manifest manifest63 = explodedArchive59.manifest;
        java.io.File file64 = explodedArchive59.manifestFile;
        java.io.File file65 = null;
        java.io.File file66 = explodedArchive59.getManifestFile(file65);
        explodedArchive55.manifestFile = file65;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive68 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest69 = explodedArchive68.manifest;
        explodedArchive68.recursive = false;
        java.util.jar.Manifest manifest72 = explodedArchive68.manifest;
        java.io.File file73 = explodedArchive68.manifestFile;
        java.io.File file74 = null;
        java.io.File file75 = explodedArchive68.getManifestFile(file74);
        explodedArchive55.manifestFile = file75;
        java.io.File file77 = explodedArchive51.getManifestFile(file75);
        fileEntry48.file = file77;
        java.io.File file79 = fileEntry48.file;
        fileEntry48.name = "exploded archive";
        java.io.File file82 = fileEntry48.file;
        java.io.File file83 = fileEntry48.getFile();
        fileEntryIterator0.root = file83;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str15 + "' != '" + "exploded archive" + "'", str15.equals("exploded archive"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file31.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file31.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file40.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file40.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file42.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file42.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file43.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file43.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file45.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file45.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file66.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file66.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file73);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file75);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file75.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file75.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file77);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file77.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file77.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file79);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file79.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file79.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file82);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file82.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file82.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file83);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file83.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file83.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
    }

    @Test
    public void test584() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test584");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest1 = explodedArchive0.manifest;
        explodedArchive0.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive4 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest5 = explodedArchive4.manifest;
        explodedArchive4.recursive = false;
        java.util.jar.Manifest manifest8 = explodedArchive4.manifest;
        java.io.File file9 = explodedArchive4.manifestFile;
        java.io.File file10 = null;
        java.io.File file11 = explodedArchive4.getManifestFile(file10);
        explodedArchive0.manifestFile = file10;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntry fileEntry13 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntry();
        java.io.File file14 = fileEntry13.getFile();
        java.io.File file15 = fileEntry13.getFile();
        java.lang.String str16 = fileEntry13.name;
        java.io.File file17 = fileEntry13.getFile();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator18 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file19 = null;
        fileEntryIterator18.current = file19;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive21 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest22 = explodedArchive21.manifest;
        explodedArchive21.recursive = false;
        java.util.jar.Manifest manifest25 = explodedArchive21.manifest;
        java.io.File file26 = explodedArchive21.manifestFile;
        java.io.File file27 = null;
        java.io.File file28 = explodedArchive21.getManifestFile(file27);
        java.util.Iterator<java.io.File> fileItor29 = fileEntryIterator18.listFiles(file28);
        fileEntry13.file = file28;
        explodedArchive0.manifestFile = file28;
        explodedArchive0.recursive = false;
        // The following exception was thrown during execution in test generation
        try {
            java.net.URL uRL34 = explodedArchive0.getUrl();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file11.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file11.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file28.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file28.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor29);
    }

    @Test
    public void test585() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test585");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntry fileEntry0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntry();
        java.lang.String str1 = fileEntry0.name;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator2 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file3 = null;
        fileEntryIterator2.current = file3;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive5 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.lang.String str6 = explodedArchive5.toString();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive7 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file8 = explodedArchive7.root;
        java.io.File file9 = null;
        explodedArchive7.manifestFile = file9;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive11 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest12 = explodedArchive11.manifest;
        explodedArchive11.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive15 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest16 = explodedArchive15.manifest;
        explodedArchive15.recursive = false;
        java.util.jar.Manifest manifest19 = explodedArchive15.manifest;
        java.io.File file20 = explodedArchive15.manifestFile;
        java.io.File file21 = null;
        java.io.File file22 = explodedArchive15.getManifestFile(file21);
        explodedArchive11.manifestFile = file21;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive24 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest25 = explodedArchive24.manifest;
        explodedArchive24.recursive = false;
        java.util.jar.Manifest manifest28 = explodedArchive24.manifest;
        java.io.File file29 = explodedArchive24.manifestFile;
        java.io.File file30 = null;
        java.io.File file31 = explodedArchive24.getManifestFile(file30);
        explodedArchive11.manifestFile = file31;
        java.io.File file33 = explodedArchive7.getManifestFile(file31);
        java.io.File file34 = explodedArchive5.getManifestFile(file31);
        fileEntryIterator2.root = file31;
        fileEntry0.file = file31;
        java.io.File file37 = fileEntry0.getFile();
        java.io.File file38 = fileEntry0.getFile();
        java.lang.String str39 = fileEntry0.getName();
        java.lang.String str40 = fileEntry0.getName();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "exploded archive" + "'", str6.equals("exploded archive"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file22.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file22.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file31.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file31.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file33.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file33.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file34.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file34.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file37.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file37.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file38.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file38.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str40);
    }

    @Test
    public void test586() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test586");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest1 = explodedArchive0.manifest;
        explodedArchive0.recursive = false;
        java.io.File file4 = null;
        explodedArchive0.root = file4;
        java.io.File file6 = explodedArchive0.root;
        java.util.jar.Manifest manifest7 = null;
        explodedArchive0.manifest = manifest7;
        explodedArchive0.recursive = false;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator<org.springframework.boot.loader.archive.Archive.Entry> entryItor11 = explodedArchive0.iterator();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file6);
    }

    @Test
    public void test587() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test587");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest1 = explodedArchive0.manifest;
        explodedArchive0.recursive = false;
        java.io.File file4 = null;
        explodedArchive0.root = file4;
        java.io.File file6 = explodedArchive0.root;
        java.util.jar.Manifest manifest7 = null;
        explodedArchive0.manifest = manifest7;
        java.util.jar.Manifest manifest9 = null;
        explodedArchive0.manifest = manifest9;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator11 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file12 = null;
        fileEntryIterator11.current = file12;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive14 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest15 = explodedArchive14.manifest;
        explodedArchive14.recursive = false;
        java.util.jar.Manifest manifest18 = explodedArchive14.manifest;
        java.io.File file19 = explodedArchive14.manifestFile;
        java.io.File file20 = null;
        java.io.File file21 = explodedArchive14.getManifestFile(file20);
        java.util.Iterator<java.io.File> fileItor22 = fileEntryIterator11.listFiles(file21);
        java.io.File file23 = fileEntryIterator11.root;
        java.io.File file24 = fileEntryIterator11.root;
        java.util.Deque<java.util.Iterator<java.io.File>> fileItorQueue25 = fileEntryIterator11.stack;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive26 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.lang.String str27 = explodedArchive26.toString();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive28 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file29 = explodedArchive28.root;
        java.io.File file30 = null;
        explodedArchive28.manifestFile = file30;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive32 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest33 = explodedArchive32.manifest;
        explodedArchive32.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive36 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest37 = explodedArchive36.manifest;
        explodedArchive36.recursive = false;
        java.util.jar.Manifest manifest40 = explodedArchive36.manifest;
        java.io.File file41 = explodedArchive36.manifestFile;
        java.io.File file42 = null;
        java.io.File file43 = explodedArchive36.getManifestFile(file42);
        explodedArchive32.manifestFile = file42;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive45 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest46 = explodedArchive45.manifest;
        explodedArchive45.recursive = false;
        java.util.jar.Manifest manifest49 = explodedArchive45.manifest;
        java.io.File file50 = explodedArchive45.manifestFile;
        java.io.File file51 = null;
        java.io.File file52 = explodedArchive45.getManifestFile(file51);
        explodedArchive32.manifestFile = file52;
        java.io.File file54 = explodedArchive28.getManifestFile(file52);
        java.io.File file55 = explodedArchive26.getManifestFile(file52);
        fileEntryIterator11.current = file52;
        explodedArchive0.manifestFile = file52;
        // The following exception was thrown during execution in test generation
        try {
            org.springframework.boot.loader.archive.ExplodedArchive explodedArchive58 = new org.springframework.boot.loader.archive.ExplodedArchive(file52);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid source folder META-INF/MANIFEST.MF");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file21.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file21.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItorQueue25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str27 + "' != '" + "exploded archive" + "'", str27.equals("exploded archive"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file43.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file43.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file52.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file52.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file54.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file54.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file55.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file55.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
    }

    @Test
    public void test588() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test588");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file1 = null;
        fileEntryIterator0.current = file1;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive3 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest4 = explodedArchive3.manifest;
        explodedArchive3.recursive = false;
        java.util.jar.Manifest manifest7 = explodedArchive3.manifest;
        java.io.File file8 = explodedArchive3.manifestFile;
        java.io.File file9 = null;
        java.io.File file10 = explodedArchive3.getManifestFile(file9);
        java.util.Iterator<java.io.File> fileItor11 = fileEntryIterator0.listFiles(file10);
        java.io.File file12 = fileEntryIterator0.root;
        java.io.File file13 = fileEntryIterator0.poll();
        java.util.Comparator<java.io.File> fileComparator14 = fileEntryIterator0.entryComparator;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator15 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        boolean boolean16 = fileEntryIterator15.hasNext();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator17 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator18 = entryComparator17.reversed();
        java.util.Comparator<java.io.File> fileComparator19 = fileComparator18.reversed();
        fileEntryIterator15.entryComparator = fileComparator19;
        java.util.Comparator<java.io.File> fileComparator21 = fileEntryIterator15.entryComparator;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator22 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator23 = entryComparator22.reversed();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator24 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator25 = entryComparator24.reversed();
        java.util.Comparator<java.io.File> fileComparator26 = entryComparator22.thenComparing(fileComparator25);
        java.util.Comparator<java.io.File> fileComparator27 = fileComparator21.thenComparing(fileComparator25);
        fileEntryIterator0.entryComparator = fileComparator27;
        java.io.File file29 = fileEntryIterator0.root;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive30 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.lang.String str31 = explodedArchive30.toString();
        explodedArchive30.recursive = true;
        java.io.File file34 = null;
        java.io.File file35 = explodedArchive30.getManifestFile(file34);
        fileEntryIterator0.root = file34;
        java.lang.Class<?> wildcardClass37 = fileEntryIterator0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str31 + "' != '" + "exploded archive" + "'", str31.equals("exploded archive"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file35.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file35.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass37);
    }

    @Test
    public void test589() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test589");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntry fileEntry0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntry();
        java.io.File file1 = fileEntry0.getFile();
        java.io.File file2 = fileEntry0.getFile();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive3 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file4 = explodedArchive3.root;
        java.io.File file5 = null;
        explodedArchive3.manifestFile = file5;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive7 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest8 = explodedArchive7.manifest;
        explodedArchive7.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive11 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest12 = explodedArchive11.manifest;
        explodedArchive11.recursive = false;
        java.util.jar.Manifest manifest15 = explodedArchive11.manifest;
        java.io.File file16 = explodedArchive11.manifestFile;
        java.io.File file17 = null;
        java.io.File file18 = explodedArchive11.getManifestFile(file17);
        explodedArchive7.manifestFile = file17;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive20 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest21 = explodedArchive20.manifest;
        explodedArchive20.recursive = false;
        java.util.jar.Manifest manifest24 = explodedArchive20.manifest;
        java.io.File file25 = explodedArchive20.manifestFile;
        java.io.File file26 = null;
        java.io.File file27 = explodedArchive20.getManifestFile(file26);
        explodedArchive7.manifestFile = file27;
        java.io.File file29 = explodedArchive3.getManifestFile(file27);
        fileEntry0.file = file29;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator31 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        boolean boolean32 = fileEntryIterator31.recursive;
        java.io.File file33 = fileEntryIterator31.current;
        boolean boolean34 = fileEntryIterator31.hasNext();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator35 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator36 = entryComparator35.reversed();
        java.util.Comparator<java.io.File> fileComparator37 = entryComparator35.reversed();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive38 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest39 = explodedArchive38.manifest;
        explodedArchive38.recursive = false;
        java.util.jar.Manifest manifest42 = explodedArchive38.manifest;
        java.io.File file43 = explodedArchive38.manifestFile;
        java.io.File file44 = null;
        java.io.File file45 = explodedArchive38.getManifestFile(file44);
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive46 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest47 = explodedArchive46.manifest;
        explodedArchive46.recursive = false;
        java.io.File file50 = null;
        explodedArchive46.root = file50;
        java.io.File file52 = explodedArchive46.root;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive53 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest54 = explodedArchive53.manifest;
        explodedArchive53.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive57 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest58 = explodedArchive57.manifest;
        explodedArchive57.recursive = false;
        java.util.jar.Manifest manifest61 = explodedArchive57.manifest;
        java.io.File file62 = explodedArchive57.manifestFile;
        java.io.File file63 = null;
        java.io.File file64 = explodedArchive57.getManifestFile(file63);
        explodedArchive53.manifestFile = file63;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive66 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest67 = explodedArchive66.manifest;
        explodedArchive66.recursive = false;
        java.util.jar.Manifest manifest70 = explodedArchive66.manifest;
        java.io.File file71 = explodedArchive66.manifestFile;
        java.io.File file72 = null;
        java.io.File file73 = explodedArchive66.getManifestFile(file72);
        explodedArchive53.manifestFile = file73;
        java.io.File file75 = explodedArchive46.getManifestFile(file73);
        int int76 = entryComparator35.compare(file45, file73);
        java.util.Iterator<java.io.File> fileItor77 = fileEntryIterator31.listFiles(file45);
        fileEntry0.file = file45;
        java.io.File file79 = fileEntry0.file;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file18.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file18.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file27.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file27.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file29.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file29.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file45.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file45.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file64.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file64.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file73);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file73.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file73.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file75);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file75.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file75.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor77);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file79);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file79.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file79.toString(), "META-INF/MANIFEST.MF");
    }

    @Test
    public void test590() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test590");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file1 = explodedArchive0.root;
        java.io.File file2 = explodedArchive0.manifestFile;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive3 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest4 = explodedArchive3.manifest;
        explodedArchive3.recursive = false;
        java.io.File file7 = null;
        explodedArchive3.root = file7;
        java.io.File file9 = explodedArchive3.root;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive10 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest11 = explodedArchive10.manifest;
        explodedArchive10.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive14 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest15 = explodedArchive14.manifest;
        explodedArchive14.recursive = false;
        java.util.jar.Manifest manifest18 = explodedArchive14.manifest;
        java.io.File file19 = explodedArchive14.manifestFile;
        java.io.File file20 = null;
        java.io.File file21 = explodedArchive14.getManifestFile(file20);
        explodedArchive10.manifestFile = file20;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive23 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest24 = explodedArchive23.manifest;
        explodedArchive23.recursive = false;
        java.util.jar.Manifest manifest27 = explodedArchive23.manifest;
        java.io.File file28 = explodedArchive23.manifestFile;
        java.io.File file29 = null;
        java.io.File file30 = explodedArchive23.getManifestFile(file29);
        explodedArchive10.manifestFile = file30;
        java.io.File file32 = explodedArchive3.getManifestFile(file30);
        boolean boolean33 = explodedArchive3.recursive;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntry fileEntry34 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntry();
        java.lang.String str35 = fileEntry34.name;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator36 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file37 = null;
        fileEntryIterator36.current = file37;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive39 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.lang.String str40 = explodedArchive39.toString();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive41 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file42 = explodedArchive41.root;
        java.io.File file43 = null;
        explodedArchive41.manifestFile = file43;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive45 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest46 = explodedArchive45.manifest;
        explodedArchive45.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive49 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest50 = explodedArchive49.manifest;
        explodedArchive49.recursive = false;
        java.util.jar.Manifest manifest53 = explodedArchive49.manifest;
        java.io.File file54 = explodedArchive49.manifestFile;
        java.io.File file55 = null;
        java.io.File file56 = explodedArchive49.getManifestFile(file55);
        explodedArchive45.manifestFile = file55;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive58 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest59 = explodedArchive58.manifest;
        explodedArchive58.recursive = false;
        java.util.jar.Manifest manifest62 = explodedArchive58.manifest;
        java.io.File file63 = explodedArchive58.manifestFile;
        java.io.File file64 = null;
        java.io.File file65 = explodedArchive58.getManifestFile(file64);
        explodedArchive45.manifestFile = file65;
        java.io.File file67 = explodedArchive41.getManifestFile(file65);
        java.io.File file68 = explodedArchive39.getManifestFile(file65);
        fileEntryIterator36.root = file65;
        fileEntry34.file = file65;
        java.io.File file71 = explodedArchive3.getManifestFile(file65);
        java.io.File file72 = explodedArchive0.getManifestFile(file71);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator<org.springframework.boot.loader.archive.Archive.Entry> entryItor73 = explodedArchive0.iterator();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file21.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file21.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file30.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file30.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file32.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file32.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str40 + "' != '" + "exploded archive" + "'", str40.equals("exploded archive"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file56.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file56.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file65.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file65.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file67.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file67.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file68.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file68.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file71.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file71.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file72.getParent(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file72.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
    }

    @Test
    public void test591() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test591");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file1 = null;
        fileEntryIterator0.current = file1;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive3 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest4 = explodedArchive3.manifest;
        explodedArchive3.recursive = false;
        java.util.jar.Manifest manifest7 = explodedArchive3.manifest;
        java.io.File file8 = explodedArchive3.manifestFile;
        java.io.File file9 = null;
        java.io.File file10 = explodedArchive3.getManifestFile(file9);
        java.util.Iterator<java.io.File> fileItor11 = fileEntryIterator0.listFiles(file10);
        boolean boolean12 = fileEntryIterator0.hasNext();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator13 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator14 = entryComparator13.reversed();
        java.util.Comparator<java.io.File> fileComparator15 = entryComparator13.reversed();
        fileEntryIterator0.entryComparator = fileComparator15;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator17 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file18 = null;
        fileEntryIterator17.current = file18;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive20 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest21 = explodedArchive20.manifest;
        explodedArchive20.recursive = false;
        java.util.jar.Manifest manifest24 = explodedArchive20.manifest;
        java.io.File file25 = explodedArchive20.manifestFile;
        java.io.File file26 = null;
        java.io.File file27 = explodedArchive20.getManifestFile(file26);
        java.util.Iterator<java.io.File> fileItor28 = fileEntryIterator17.listFiles(file27);
        java.util.Comparator<java.io.File> fileComparator29 = fileEntryIterator17.entryComparator;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator30 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file31 = null;
        fileEntryIterator30.current = file31;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive33 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest34 = explodedArchive33.manifest;
        explodedArchive33.recursive = false;
        java.util.jar.Manifest manifest37 = explodedArchive33.manifest;
        java.io.File file38 = explodedArchive33.manifestFile;
        java.io.File file39 = null;
        java.io.File file40 = explodedArchive33.getManifestFile(file39);
        java.util.Iterator<java.io.File> fileItor41 = fileEntryIterator30.listFiles(file40);
        java.io.File file42 = fileEntryIterator30.current;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator43 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file44 = null;
        fileEntryIterator43.current = file44;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive46 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest47 = explodedArchive46.manifest;
        explodedArchive46.recursive = false;
        java.util.jar.Manifest manifest50 = explodedArchive46.manifest;
        java.io.File file51 = explodedArchive46.manifestFile;
        java.io.File file52 = null;
        java.io.File file53 = explodedArchive46.getManifestFile(file52);
        java.util.Iterator<java.io.File> fileItor54 = fileEntryIterator43.listFiles(file53);
        java.io.File file55 = fileEntryIterator43.current;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator56 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file57 = null;
        fileEntryIterator56.current = file57;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive59 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest60 = explodedArchive59.manifest;
        explodedArchive59.recursive = false;
        java.util.jar.Manifest manifest63 = explodedArchive59.manifest;
        java.io.File file64 = explodedArchive59.manifestFile;
        java.io.File file65 = null;
        java.io.File file66 = explodedArchive59.getManifestFile(file65);
        java.util.Iterator<java.io.File> fileItor67 = fileEntryIterator56.listFiles(file66);
        java.util.ArrayDeque<java.util.Iterator<java.io.File>> fileItorQueue68 = new java.util.ArrayDeque<java.util.Iterator<java.io.File>>();
        boolean boolean69 = fileItorQueue68.add(fileItor67);
        fileEntryIterator43.stack = fileItorQueue68;
        fileEntryIterator30.stack = fileItorQueue68;
        fileEntryIterator17.stack = fileItorQueue68;
        fileEntryIterator0.stack = fileItorQueue68;
        java.lang.Class<?> wildcardClass74 = fileEntryIterator0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file27.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file27.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file40.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file40.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file53.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file53.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file66.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file66.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass74);
    }

    @Test
    public void test592() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test592");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file1 = explodedArchive0.root;
        explodedArchive0.recursive = false;
        boolean boolean4 = explodedArchive0.recursive;
        java.io.File file5 = explodedArchive0.root;
        java.util.jar.Manifest manifest6 = null;
        explodedArchive0.manifest = manifest6;
        java.io.File file8 = explodedArchive0.manifestFile;
        // The following exception was thrown during execution in test generation
        try {
            java.util.jar.Manifest manifest9 = explodedArchive0.getManifest();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file8);
    }

    @Test
    public void test593() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test593");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file1 = null;
        fileEntryIterator0.current = file1;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive3 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest4 = explodedArchive3.manifest;
        explodedArchive3.recursive = false;
        java.util.jar.Manifest manifest7 = explodedArchive3.manifest;
        java.io.File file8 = explodedArchive3.manifestFile;
        java.io.File file9 = null;
        java.io.File file10 = explodedArchive3.getManifestFile(file9);
        java.util.Iterator<java.io.File> fileItor11 = fileEntryIterator0.listFiles(file10);
        java.io.File file12 = fileEntryIterator0.root;
        java.io.File file13 = fileEntryIterator0.root;
        java.io.File file14 = fileEntryIterator0.current;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator15 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        boolean boolean16 = fileEntryIterator15.hasNext();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator17 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator18 = entryComparator17.reversed();
        java.util.Comparator<java.io.File> fileComparator19 = fileComparator18.reversed();
        fileEntryIterator15.entryComparator = fileComparator19;
        java.util.Comparator<java.io.File> fileComparator21 = fileEntryIterator15.entryComparator;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator22 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator23 = entryComparator22.reversed();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator24 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator25 = entryComparator24.reversed();
        java.util.Comparator<java.io.File> fileComparator26 = entryComparator22.thenComparing(fileComparator25);
        java.util.Comparator<java.io.File> fileComparator27 = fileComparator21.thenComparing(fileComparator25);
        fileEntryIterator0.entryComparator = fileComparator21;
        boolean boolean29 = fileEntryIterator0.hasNext();
        fileEntryIterator0.recursive = false;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
    }

    @Test
    public void test594() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test594");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.lang.String str1 = explodedArchive0.toString();
        java.io.File file2 = explodedArchive0.root;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator3 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file4 = null;
        fileEntryIterator3.current = file4;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive6 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest7 = explodedArchive6.manifest;
        explodedArchive6.recursive = false;
        java.util.jar.Manifest manifest10 = explodedArchive6.manifest;
        java.io.File file11 = explodedArchive6.manifestFile;
        java.io.File file12 = null;
        java.io.File file13 = explodedArchive6.getManifestFile(file12);
        java.util.Iterator<java.io.File> fileItor14 = fileEntryIterator3.listFiles(file13);
        java.io.File file15 = fileEntryIterator3.current;
        boolean boolean16 = fileEntryIterator3.recursive;
        java.io.File file17 = fileEntryIterator3.poll();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator18 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file19 = null;
        fileEntryIterator18.current = file19;
        fileEntryIterator18.recursive = true;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator23 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator24 = entryComparator23.reversed();
        java.util.Comparator<java.io.File> fileComparator25 = entryComparator23.reversed();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive26 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest27 = explodedArchive26.manifest;
        explodedArchive26.recursive = false;
        java.util.jar.Manifest manifest30 = explodedArchive26.manifest;
        java.io.File file31 = explodedArchive26.manifestFile;
        java.io.File file32 = null;
        java.io.File file33 = explodedArchive26.getManifestFile(file32);
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive34 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest35 = explodedArchive34.manifest;
        explodedArchive34.recursive = false;
        java.io.File file38 = null;
        explodedArchive34.root = file38;
        java.io.File file40 = explodedArchive34.root;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive41 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest42 = explodedArchive41.manifest;
        explodedArchive41.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive45 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest46 = explodedArchive45.manifest;
        explodedArchive45.recursive = false;
        java.util.jar.Manifest manifest49 = explodedArchive45.manifest;
        java.io.File file50 = explodedArchive45.manifestFile;
        java.io.File file51 = null;
        java.io.File file52 = explodedArchive45.getManifestFile(file51);
        explodedArchive41.manifestFile = file51;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive54 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest55 = explodedArchive54.manifest;
        explodedArchive54.recursive = false;
        java.util.jar.Manifest manifest58 = explodedArchive54.manifest;
        java.io.File file59 = explodedArchive54.manifestFile;
        java.io.File file60 = null;
        java.io.File file61 = explodedArchive54.getManifestFile(file60);
        explodedArchive41.manifestFile = file61;
        java.io.File file63 = explodedArchive34.getManifestFile(file61);
        int int64 = entryComparator23.compare(file33, file61);
        java.util.Iterator<java.io.File> fileItor65 = fileEntryIterator18.listFiles(file33);
        fileEntryIterator3.current = file33;
        java.io.File file67 = explodedArchive0.getManifestFile(file33);
        java.io.File file68 = explodedArchive0.manifestFile;
        java.io.File file69 = explodedArchive0.root;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str1 + "' != '" + "exploded archive" + "'", str1.equals("exploded archive"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file13.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file13.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file33.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file33.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file52.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file52.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file61.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file61.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file63.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file63.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file67.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file67.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file69);
    }

    @Test
    public void test595() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test595");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntry fileEntry0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntry();
        java.lang.String str1 = fileEntry0.getName();
        java.lang.String str2 = fileEntry0.getName();
        java.lang.String str3 = fileEntry0.name;
        fileEntry0.name = "exploded archive";
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive6 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest7 = explodedArchive6.manifest;
        explodedArchive6.recursive = false;
        java.io.File file10 = null;
        explodedArchive6.root = file10;
        java.io.File file12 = explodedArchive6.root;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive13 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest14 = explodedArchive13.manifest;
        explodedArchive13.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive17 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest18 = explodedArchive17.manifest;
        explodedArchive17.recursive = false;
        java.util.jar.Manifest manifest21 = explodedArchive17.manifest;
        java.io.File file22 = explodedArchive17.manifestFile;
        java.io.File file23 = null;
        java.io.File file24 = explodedArchive17.getManifestFile(file23);
        explodedArchive13.manifestFile = file23;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive26 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest27 = explodedArchive26.manifest;
        explodedArchive26.recursive = false;
        java.util.jar.Manifest manifest30 = explodedArchive26.manifest;
        java.io.File file31 = explodedArchive26.manifestFile;
        java.io.File file32 = null;
        java.io.File file33 = explodedArchive26.getManifestFile(file32);
        explodedArchive13.manifestFile = file33;
        java.io.File file35 = explodedArchive6.getManifestFile(file33);
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntry fileEntry36 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntry();
        java.lang.String str37 = fileEntry36.name;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator38 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file39 = null;
        fileEntryIterator38.current = file39;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive41 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.lang.String str42 = explodedArchive41.toString();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive43 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file44 = explodedArchive43.root;
        java.io.File file45 = null;
        explodedArchive43.manifestFile = file45;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive47 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest48 = explodedArchive47.manifest;
        explodedArchive47.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive51 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest52 = explodedArchive51.manifest;
        explodedArchive51.recursive = false;
        java.util.jar.Manifest manifest55 = explodedArchive51.manifest;
        java.io.File file56 = explodedArchive51.manifestFile;
        java.io.File file57 = null;
        java.io.File file58 = explodedArchive51.getManifestFile(file57);
        explodedArchive47.manifestFile = file57;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive60 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest61 = explodedArchive60.manifest;
        explodedArchive60.recursive = false;
        java.util.jar.Manifest manifest64 = explodedArchive60.manifest;
        java.io.File file65 = explodedArchive60.manifestFile;
        java.io.File file66 = null;
        java.io.File file67 = explodedArchive60.getManifestFile(file66);
        explodedArchive47.manifestFile = file67;
        java.io.File file69 = explodedArchive43.getManifestFile(file67);
        java.io.File file70 = explodedArchive41.getManifestFile(file67);
        fileEntryIterator38.root = file67;
        fileEntry36.file = file67;
        java.io.File file73 = fileEntry36.file;
        explodedArchive6.root = file73;
        java.io.File file75 = explodedArchive6.manifestFile;
        java.io.File file76 = explodedArchive6.root;
        fileEntry0.file = file76;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file24.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file24.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file33.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file33.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file35.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file35.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str42 + "' != '" + "exploded archive" + "'", str42.equals("exploded archive"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file58.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file58.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file67.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file67.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file69.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file69.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file70.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file70.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file73);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file73.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file73.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file75);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file76);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file76.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file76.toString(), "META-INF/MANIFEST.MF");
    }

    @Test
    public void test596() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test596");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntry fileEntry0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntry();
        java.io.File file1 = fileEntry0.getFile();
        java.io.File file2 = fileEntry0.getFile();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive3 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file4 = explodedArchive3.root;
        java.io.File file5 = null;
        explodedArchive3.manifestFile = file5;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive7 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest8 = explodedArchive7.manifest;
        explodedArchive7.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive11 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest12 = explodedArchive11.manifest;
        explodedArchive11.recursive = false;
        java.util.jar.Manifest manifest15 = explodedArchive11.manifest;
        java.io.File file16 = explodedArchive11.manifestFile;
        java.io.File file17 = null;
        java.io.File file18 = explodedArchive11.getManifestFile(file17);
        explodedArchive7.manifestFile = file17;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive20 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest21 = explodedArchive20.manifest;
        explodedArchive20.recursive = false;
        java.util.jar.Manifest manifest24 = explodedArchive20.manifest;
        java.io.File file25 = explodedArchive20.manifestFile;
        java.io.File file26 = null;
        java.io.File file27 = explodedArchive20.getManifestFile(file26);
        explodedArchive7.manifestFile = file27;
        java.io.File file29 = explodedArchive3.getManifestFile(file27);
        fileEntry0.file = file29;
        java.io.File file31 = fileEntry0.file;
        fileEntry0.name = "exploded archive";
        java.io.File file34 = fileEntry0.file;
        java.io.File file35 = null;
        fileEntry0.file = file35;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file18.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file18.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file27.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file27.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file29.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file29.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file31.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file31.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file34.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file34.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
    }

    @Test
    public void test597() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test597");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file1 = explodedArchive0.root;
        java.io.File file2 = null;
        explodedArchive0.manifestFile = file2;
        java.io.File file4 = explodedArchive0.root;
        boolean boolean5 = explodedArchive0.recursive;
        java.lang.String str6 = explodedArchive0.toString();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator<org.springframework.boot.loader.archive.Archive.Entry> entryItor7 = explodedArchive0.iterator();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "exploded archive" + "'", str6.equals("exploded archive"));
    }

    @Test
    public void test598() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test598");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        boolean boolean1 = fileEntryIterator0.hasNext();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator2 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator3 = entryComparator2.reversed();
        java.util.Comparator<java.io.File> fileComparator4 = fileComparator3.reversed();
        fileEntryIterator0.entryComparator = fileComparator4;
        java.util.Comparator<java.io.File> fileComparator6 = fileEntryIterator0.entryComparator;
        java.io.File file7 = fileEntryIterator0.current;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator8 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        boolean boolean9 = fileEntryIterator8.hasNext();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator10 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator11 = entryComparator10.reversed();
        java.util.Comparator<java.io.File> fileComparator12 = fileComparator11.reversed();
        fileEntryIterator8.entryComparator = fileComparator12;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator14 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        boolean boolean15 = fileEntryIterator14.hasNext();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator16 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator17 = entryComparator16.reversed();
        java.util.Comparator<java.io.File> fileComparator18 = fileComparator17.reversed();
        fileEntryIterator14.entryComparator = fileComparator18;
        java.util.Comparator<java.io.File> fileComparator20 = fileEntryIterator14.entryComparator;
        java.util.Comparator<java.io.File> fileComparator21 = fileComparator12.thenComparing(fileComparator20);
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator22 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file23 = null;
        fileEntryIterator22.current = file23;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive25 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest26 = explodedArchive25.manifest;
        explodedArchive25.recursive = false;
        java.util.jar.Manifest manifest29 = explodedArchive25.manifest;
        java.io.File file30 = explodedArchive25.manifestFile;
        java.io.File file31 = null;
        java.io.File file32 = explodedArchive25.getManifestFile(file31);
        java.util.Iterator<java.io.File> fileItor33 = fileEntryIterator22.listFiles(file32);
        java.io.File file34 = fileEntryIterator22.root;
        java.io.File file35 = fileEntryIterator22.root;
        java.io.File file36 = fileEntryIterator22.current;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator37 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        boolean boolean38 = fileEntryIterator37.hasNext();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator39 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator40 = entryComparator39.reversed();
        java.util.Comparator<java.io.File> fileComparator41 = fileComparator40.reversed();
        fileEntryIterator37.entryComparator = fileComparator41;
        java.util.Comparator<java.io.File> fileComparator43 = fileEntryIterator37.entryComparator;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator44 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator45 = entryComparator44.reversed();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator46 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator47 = entryComparator46.reversed();
        java.util.Comparator<java.io.File> fileComparator48 = entryComparator44.thenComparing(fileComparator47);
        java.util.Comparator<java.io.File> fileComparator49 = fileComparator43.thenComparing(fileComparator47);
        fileEntryIterator22.entryComparator = fileComparator43;
        java.util.Comparator<java.io.File> fileComparator51 = fileComparator43.reversed();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator52 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        boolean boolean53 = fileEntryIterator52.hasNext();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator54 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator55 = entryComparator54.reversed();
        java.util.Comparator<java.io.File> fileComparator56 = fileComparator55.reversed();
        fileEntryIterator52.entryComparator = fileComparator56;
        java.util.Comparator<java.io.File> fileComparator58 = fileComparator43.thenComparing(fileComparator56);
        java.util.Comparator<java.io.File> fileComparator59 = fileComparator20.thenComparing(fileComparator58);
        java.util.Comparator<java.io.File> fileComparator60 = fileComparator59.reversed();
        fileEntryIterator0.entryComparator = fileComparator59;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file32.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file32.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator60);
    }

    @Test
    public void test599() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test599");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file1 = explodedArchive0.root;
        java.io.File file2 = null;
        explodedArchive0.manifestFile = file2;
        java.io.File file4 = explodedArchive0.root;
        java.util.jar.Manifest manifest5 = null;
        explodedArchive0.manifest = manifest5;
        java.io.File file7 = explodedArchive0.manifestFile;
        org.springframework.boot.loader.archive.Archive.EntryFilter entryFilter8 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<org.springframework.boot.loader.archive.Archive> archiveList9 = explodedArchive0.getNestedArchives(entryFilter8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file7);
    }

    @Test
    public void test600() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test600");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file1 = null;
        fileEntryIterator0.current = file1;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive3 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest4 = explodedArchive3.manifest;
        explodedArchive3.recursive = false;
        java.util.jar.Manifest manifest7 = explodedArchive3.manifest;
        java.io.File file8 = explodedArchive3.manifestFile;
        java.io.File file9 = null;
        java.io.File file10 = explodedArchive3.getManifestFile(file9);
        java.util.Iterator<java.io.File> fileItor11 = fileEntryIterator0.listFiles(file10);
        boolean boolean12 = fileEntryIterator0.hasNext();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator13 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator14 = entryComparator13.reversed();
        java.util.Comparator<java.io.File> fileComparator15 = entryComparator13.reversed();
        fileEntryIterator0.entryComparator = fileComparator15;
        fileEntryIterator0.recursive = true;
        // The following exception was thrown during execution in test generation
        try {
            org.springframework.boot.loader.archive.Archive.Entry entry19 = fileEntryIterator0.next();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator15);
    }

    @Test
    public void test601() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test601");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        boolean boolean1 = fileEntryIterator0.hasNext();
        java.io.File file2 = fileEntryIterator0.root;
        boolean boolean3 = fileEntryIterator0.hasNext();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator4 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator5 = entryComparator4.reversed();
        java.util.Comparator<java.io.File> fileComparator6 = entryComparator4.reversed();
        fileEntryIterator0.entryComparator = entryComparator4;
        java.io.File file8 = fileEntryIterator0.current;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntry fileEntry9 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntry();
        java.io.File file10 = fileEntry9.file;
        java.lang.String str11 = fileEntry9.name;
        java.io.File file12 = fileEntry9.file;
        java.io.File file13 = fileEntry9.file;
        java.lang.String str14 = fileEntry9.name;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive15 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.lang.String str16 = explodedArchive15.toString();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive17 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file18 = explodedArchive17.root;
        java.io.File file19 = null;
        explodedArchive17.manifestFile = file19;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive21 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest22 = explodedArchive21.manifest;
        explodedArchive21.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive25 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest26 = explodedArchive25.manifest;
        explodedArchive25.recursive = false;
        java.util.jar.Manifest manifest29 = explodedArchive25.manifest;
        java.io.File file30 = explodedArchive25.manifestFile;
        java.io.File file31 = null;
        java.io.File file32 = explodedArchive25.getManifestFile(file31);
        explodedArchive21.manifestFile = file31;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive34 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest35 = explodedArchive34.manifest;
        explodedArchive34.recursive = false;
        java.util.jar.Manifest manifest38 = explodedArchive34.manifest;
        java.io.File file39 = explodedArchive34.manifestFile;
        java.io.File file40 = null;
        java.io.File file41 = explodedArchive34.getManifestFile(file40);
        explodedArchive21.manifestFile = file41;
        java.io.File file43 = explodedArchive17.getManifestFile(file41);
        java.io.File file44 = explodedArchive15.getManifestFile(file41);
        fileEntry9.file = file41;
        java.io.File file46 = fileEntry9.getFile();
        fileEntryIterator0.root = file46;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str16 + "' != '" + "exploded archive" + "'", str16.equals("exploded archive"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file32.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file32.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file41.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file41.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file43.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file43.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file44.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file44.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file46.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file46.toString(), "META-INF/MANIFEST.MF");
    }

    @Test
    public void test602() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test602");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        boolean boolean1 = fileEntryIterator0.hasNext();
        java.io.File file2 = fileEntryIterator0.root;
        boolean boolean3 = fileEntryIterator0.hasNext();
        java.util.Comparator<java.io.File> fileComparator4 = fileEntryIterator0.entryComparator;
        java.io.File file5 = fileEntryIterator0.current;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator6 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        boolean boolean7 = fileEntryIterator6.hasNext();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator8 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator9 = entryComparator8.reversed();
        java.util.Comparator<java.io.File> fileComparator10 = fileComparator9.reversed();
        fileEntryIterator6.entryComparator = fileComparator10;
        java.util.Comparator<java.io.File> fileComparator12 = fileEntryIterator6.entryComparator;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator13 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator14 = entryComparator13.reversed();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator15 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator16 = entryComparator15.reversed();
        java.util.Comparator<java.io.File> fileComparator17 = entryComparator13.thenComparing(fileComparator16);
        java.util.Comparator<java.io.File> fileComparator18 = fileComparator12.thenComparing(fileComparator16);
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator19 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator20 = entryComparator19.reversed();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator21 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator22 = entryComparator21.reversed();
        java.util.Comparator<java.io.File> fileComparator23 = entryComparator19.thenComparing(fileComparator22);
        java.util.Comparator<java.io.File> fileComparator24 = fileComparator18.thenComparing((java.util.Comparator<java.io.File>) entryComparator19);
        fileEntryIterator0.entryComparator = fileComparator24;
        boolean boolean26 = fileEntryIterator0.recursive;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test603() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test603");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file1 = explodedArchive0.root;
        java.io.File file2 = explodedArchive0.manifestFile;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntry fileEntry3 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntry();
        java.lang.String str4 = fileEntry3.getName();
        java.lang.String str5 = fileEntry3.getName();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator6 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator7 = entryComparator6.reversed();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive8 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file9 = explodedArchive8.root;
        java.io.File file10 = null;
        explodedArchive8.manifestFile = file10;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive12 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest13 = explodedArchive12.manifest;
        explodedArchive12.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive16 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest17 = explodedArchive16.manifest;
        explodedArchive16.recursive = false;
        java.util.jar.Manifest manifest20 = explodedArchive16.manifest;
        java.io.File file21 = explodedArchive16.manifestFile;
        java.io.File file22 = null;
        java.io.File file23 = explodedArchive16.getManifestFile(file22);
        explodedArchive12.manifestFile = file22;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive25 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest26 = explodedArchive25.manifest;
        explodedArchive25.recursive = false;
        java.util.jar.Manifest manifest29 = explodedArchive25.manifest;
        java.io.File file30 = explodedArchive25.manifestFile;
        java.io.File file31 = null;
        java.io.File file32 = explodedArchive25.getManifestFile(file31);
        explodedArchive12.manifestFile = file32;
        java.io.File file34 = explodedArchive8.getManifestFile(file32);
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive35 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest36 = explodedArchive35.manifest;
        explodedArchive35.recursive = false;
        java.io.File file39 = null;
        explodedArchive35.root = file39;
        java.io.File file41 = explodedArchive35.root;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive42 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest43 = explodedArchive42.manifest;
        explodedArchive42.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive46 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest47 = explodedArchive46.manifest;
        explodedArchive46.recursive = false;
        java.util.jar.Manifest manifest50 = explodedArchive46.manifest;
        java.io.File file51 = explodedArchive46.manifestFile;
        java.io.File file52 = null;
        java.io.File file53 = explodedArchive46.getManifestFile(file52);
        explodedArchive42.manifestFile = file52;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive55 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest56 = explodedArchive55.manifest;
        explodedArchive55.recursive = false;
        java.util.jar.Manifest manifest59 = explodedArchive55.manifest;
        java.io.File file60 = explodedArchive55.manifestFile;
        java.io.File file61 = null;
        java.io.File file62 = explodedArchive55.getManifestFile(file61);
        explodedArchive42.manifestFile = file62;
        java.io.File file64 = explodedArchive35.getManifestFile(file62);
        int int65 = entryComparator6.compare(file34, file62);
        fileEntry3.file = file62;
        java.io.File file67 = fileEntry3.getFile();
        explodedArchive0.root = file67;
        // The following exception was thrown during execution in test generation
        try {
            org.springframework.boot.loader.archive.ExplodedArchive explodedArchive70 = new org.springframework.boot.loader.archive.ExplodedArchive(file67, true);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid source folder META-INF/MANIFEST.MF");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file23.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file23.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file32.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file32.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file34.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file34.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file53.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file53.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file62.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file62.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file64.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file64.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 21 + "'", int65 == 21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file67.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file67.toString(), "META-INF/MANIFEST.MF");
    }

    @Test
    public void test604() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test604");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest1 = explodedArchive0.manifest;
        explodedArchive0.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive4 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest5 = explodedArchive4.manifest;
        explodedArchive4.recursive = false;
        java.util.jar.Manifest manifest8 = explodedArchive4.manifest;
        java.io.File file9 = explodedArchive4.manifestFile;
        java.io.File file10 = null;
        java.io.File file11 = explodedArchive4.getManifestFile(file10);
        explodedArchive0.manifestFile = file10;
        java.util.jar.Manifest manifest13 = null;
        explodedArchive0.manifest = manifest13;
        java.util.jar.Manifest manifest15 = explodedArchive0.manifest;
        java.io.File file16 = null;
        java.io.File file17 = explodedArchive0.getManifestFile(file16);
        java.io.File file18 = null;
        explodedArchive0.manifestFile = file18;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file11.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file11.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file17.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file17.toString(), "META-INF/MANIFEST.MF");
    }

    @Test
    public void test605() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test605");
        java.lang.String[] strArray1 = new java.lang.String[] { "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet2 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet2, strArray1);
        org.springframework.boot.loader.archive.ExplodedArchive.SKIPPED_NAMES = strSet2;
        org.springframework.boot.loader.archive.ExplodedArchive.SKIPPED_NAMES = strSet2;
        org.springframework.boot.loader.archive.ExplodedArchive.SKIPPED_NAMES = strSet2;
        org.springframework.boot.loader.archive.ExplodedArchive.SKIPPED_NAMES = strSet2;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
    }

    @Test
    public void test606() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test606");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest1 = explodedArchive0.manifest;
        explodedArchive0.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive4 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest5 = explodedArchive4.manifest;
        explodedArchive4.recursive = false;
        java.util.jar.Manifest manifest8 = explodedArchive4.manifest;
        java.io.File file9 = explodedArchive4.manifestFile;
        java.io.File file10 = null;
        java.io.File file11 = explodedArchive4.getManifestFile(file10);
        explodedArchive0.manifestFile = file10;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive13 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest14 = explodedArchive13.manifest;
        explodedArchive13.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive17 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest18 = explodedArchive17.manifest;
        explodedArchive17.recursive = false;
        java.util.jar.Manifest manifest21 = explodedArchive17.manifest;
        java.io.File file22 = explodedArchive17.manifestFile;
        java.io.File file23 = null;
        java.io.File file24 = explodedArchive17.getManifestFile(file23);
        explodedArchive13.manifestFile = file23;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive26 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest27 = explodedArchive26.manifest;
        explodedArchive26.recursive = false;
        java.util.jar.Manifest manifest30 = explodedArchive26.manifest;
        java.io.File file31 = explodedArchive26.manifestFile;
        java.io.File file32 = null;
        java.io.File file33 = explodedArchive26.getManifestFile(file32);
        explodedArchive13.manifestFile = file33;
        explodedArchive0.root = file33;
        java.net.URL uRL36 = explodedArchive0.getUrl();
        java.net.URL uRL37 = explodedArchive0.getUrl();
        java.io.File file38 = null;
        java.io.File file39 = explodedArchive0.getManifestFile(file38);
        java.util.jar.Manifest manifest40 = null;
        explodedArchive0.manifest = manifest40;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file11.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file11.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file24.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file24.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file33.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file33.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(uRL36);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(uRL36.toString(), "file:/server/study-execution/new-nimrod/nimrod-hunoroutput-test-dest/spring-boot/af20dc6cc45c032573413c401f9f73aa75371744/randoop_1/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(uRL37);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(uRL37.toString(), "file:/server/study-execution/new-nimrod/nimrod-hunoroutput-test-dest/spring-boot/af20dc6cc45c032573413c401f9f73aa75371744/randoop_1/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file39.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file39.toString(), "META-INF/MANIFEST.MF");
    }

    @Test
    public void test607() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test607");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file1 = null;
        fileEntryIterator0.current = file1;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive3 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest4 = explodedArchive3.manifest;
        explodedArchive3.recursive = false;
        java.util.jar.Manifest manifest7 = explodedArchive3.manifest;
        java.io.File file8 = explodedArchive3.manifestFile;
        java.io.File file9 = null;
        java.io.File file10 = explodedArchive3.getManifestFile(file9);
        java.util.Iterator<java.io.File> fileItor11 = fileEntryIterator0.listFiles(file10);
        java.io.File file12 = fileEntryIterator0.current;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator13 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file14 = null;
        fileEntryIterator13.current = file14;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive16 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest17 = explodedArchive16.manifest;
        explodedArchive16.recursive = false;
        java.util.jar.Manifest manifest20 = explodedArchive16.manifest;
        java.io.File file21 = explodedArchive16.manifestFile;
        java.io.File file22 = null;
        java.io.File file23 = explodedArchive16.getManifestFile(file22);
        java.util.Iterator<java.io.File> fileItor24 = fileEntryIterator13.listFiles(file23);
        java.util.ArrayDeque<java.util.Iterator<java.io.File>> fileItorQueue25 = new java.util.ArrayDeque<java.util.Iterator<java.io.File>>();
        boolean boolean26 = fileItorQueue25.add(fileItor24);
        fileEntryIterator0.stack = fileItorQueue25;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive28 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest29 = explodedArchive28.manifest;
        explodedArchive28.recursive = false;
        java.io.File file32 = null;
        explodedArchive28.root = file32;
        java.io.File file34 = explodedArchive28.root;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive35 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest36 = explodedArchive35.manifest;
        explodedArchive35.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive39 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest40 = explodedArchive39.manifest;
        explodedArchive39.recursive = false;
        java.util.jar.Manifest manifest43 = explodedArchive39.manifest;
        java.io.File file44 = explodedArchive39.manifestFile;
        java.io.File file45 = null;
        java.io.File file46 = explodedArchive39.getManifestFile(file45);
        explodedArchive35.manifestFile = file45;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive48 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest49 = explodedArchive48.manifest;
        explodedArchive48.recursive = false;
        java.util.jar.Manifest manifest52 = explodedArchive48.manifest;
        java.io.File file53 = explodedArchive48.manifestFile;
        java.io.File file54 = null;
        java.io.File file55 = explodedArchive48.getManifestFile(file54);
        explodedArchive35.manifestFile = file55;
        java.io.File file57 = explodedArchive28.getManifestFile(file55);
        fileEntryIterator0.root = file55;
        boolean boolean59 = fileEntryIterator0.recursive;
        fileEntryIterator0.recursive = false;
        java.io.File file62 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator<java.io.File> fileItor63 = fileEntryIterator0.listFiles(file62);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file23.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file23.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file46.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file46.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file55.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file55.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file57.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file57.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
    }

    @Test
    public void test608() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test608");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file1 = null;
        fileEntryIterator0.current = file1;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive3 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest4 = explodedArchive3.manifest;
        explodedArchive3.recursive = false;
        java.util.jar.Manifest manifest7 = explodedArchive3.manifest;
        java.io.File file8 = explodedArchive3.manifestFile;
        java.io.File file9 = null;
        java.io.File file10 = explodedArchive3.getManifestFile(file9);
        java.util.Iterator<java.io.File> fileItor11 = fileEntryIterator0.listFiles(file10);
        java.io.File file12 = fileEntryIterator0.current;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator13 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file14 = null;
        fileEntryIterator13.current = file14;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive16 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest17 = explodedArchive16.manifest;
        explodedArchive16.recursive = false;
        java.util.jar.Manifest manifest20 = explodedArchive16.manifest;
        java.io.File file21 = explodedArchive16.manifestFile;
        java.io.File file22 = null;
        java.io.File file23 = explodedArchive16.getManifestFile(file22);
        java.util.Iterator<java.io.File> fileItor24 = fileEntryIterator13.listFiles(file23);
        java.util.ArrayDeque<java.util.Iterator<java.io.File>> fileItorQueue25 = new java.util.ArrayDeque<java.util.Iterator<java.io.File>>();
        boolean boolean26 = fileItorQueue25.add(fileItor24);
        fileEntryIterator0.stack = fileItorQueue25;
        boolean boolean28 = fileEntryIterator0.recursive;
        java.io.File file29 = fileEntryIterator0.current;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntry fileEntry30 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntry();
        java.io.File file31 = fileEntry30.getFile();
        java.io.File file32 = fileEntry30.getFile();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive33 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file34 = explodedArchive33.root;
        java.io.File file35 = null;
        explodedArchive33.manifestFile = file35;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive37 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest38 = explodedArchive37.manifest;
        explodedArchive37.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive41 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest42 = explodedArchive41.manifest;
        explodedArchive41.recursive = false;
        java.util.jar.Manifest manifest45 = explodedArchive41.manifest;
        java.io.File file46 = explodedArchive41.manifestFile;
        java.io.File file47 = null;
        java.io.File file48 = explodedArchive41.getManifestFile(file47);
        explodedArchive37.manifestFile = file47;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive50 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest51 = explodedArchive50.manifest;
        explodedArchive50.recursive = false;
        java.util.jar.Manifest manifest54 = explodedArchive50.manifest;
        java.io.File file55 = explodedArchive50.manifestFile;
        java.io.File file56 = null;
        java.io.File file57 = explodedArchive50.getManifestFile(file56);
        explodedArchive37.manifestFile = file57;
        java.io.File file59 = explodedArchive33.getManifestFile(file57);
        fileEntry30.file = file59;
        fileEntryIterator0.root = file59;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file23.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file23.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file48.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file48.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file57.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file57.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file59.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file59.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
    }

    @Test
    public void test609() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test609");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        boolean boolean1 = fileEntryIterator0.recursive;
        java.io.File file2 = fileEntryIterator0.current;
        fileEntryIterator0.recursive = false;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file2);
    }

    @Test
    public void test610() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test610");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator1 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator2 = entryComparator1.reversed();
        java.util.Comparator<java.io.File> fileComparator3 = entryComparator1.reversed();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive4 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest5 = explodedArchive4.manifest;
        explodedArchive4.recursive = false;
        java.util.jar.Manifest manifest8 = explodedArchive4.manifest;
        java.io.File file9 = explodedArchive4.manifestFile;
        java.io.File file10 = null;
        java.io.File file11 = explodedArchive4.getManifestFile(file10);
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive12 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest13 = explodedArchive12.manifest;
        explodedArchive12.recursive = false;
        java.io.File file16 = null;
        explodedArchive12.root = file16;
        java.io.File file18 = explodedArchive12.root;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive19 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest20 = explodedArchive19.manifest;
        explodedArchive19.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive23 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest24 = explodedArchive23.manifest;
        explodedArchive23.recursive = false;
        java.util.jar.Manifest manifest27 = explodedArchive23.manifest;
        java.io.File file28 = explodedArchive23.manifestFile;
        java.io.File file29 = null;
        java.io.File file30 = explodedArchive23.getManifestFile(file29);
        explodedArchive19.manifestFile = file29;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive32 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest33 = explodedArchive32.manifest;
        explodedArchive32.recursive = false;
        java.util.jar.Manifest manifest36 = explodedArchive32.manifest;
        java.io.File file37 = explodedArchive32.manifestFile;
        java.io.File file38 = null;
        java.io.File file39 = explodedArchive32.getManifestFile(file38);
        explodedArchive19.manifestFile = file39;
        java.io.File file41 = explodedArchive12.getManifestFile(file39);
        int int42 = entryComparator1.compare(file11, file39);
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive43 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest44 = explodedArchive43.manifest;
        explodedArchive43.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive47 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest48 = explodedArchive47.manifest;
        explodedArchive47.recursive = false;
        java.util.jar.Manifest manifest51 = explodedArchive47.manifest;
        java.io.File file52 = explodedArchive47.manifestFile;
        java.io.File file53 = null;
        java.io.File file54 = explodedArchive47.getManifestFile(file53);
        explodedArchive43.manifestFile = file53;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive56 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest57 = explodedArchive56.manifest;
        explodedArchive56.recursive = false;
        java.util.jar.Manifest manifest60 = explodedArchive56.manifest;
        java.io.File file61 = explodedArchive56.manifestFile;
        java.io.File file62 = null;
        java.io.File file63 = explodedArchive56.getManifestFile(file62);
        explodedArchive43.manifestFile = file63;
        int int65 = entryComparator0.compare(file11, file63);
        java.util.Comparator<java.io.File> fileComparator66 = entryComparator0.reversed();
        java.util.Comparator<java.io.File> fileComparator67 = entryComparator0.reversed();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file11.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file11.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file30.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file30.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file39.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file39.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file41.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file41.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file54.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file54.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file63.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file63.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator67);
    }

    @Test
    public void test611() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test611");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file1 = null;
        fileEntryIterator0.current = file1;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive3 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest4 = explodedArchive3.manifest;
        explodedArchive3.recursive = false;
        java.util.jar.Manifest manifest7 = explodedArchive3.manifest;
        java.io.File file8 = explodedArchive3.manifestFile;
        java.io.File file9 = null;
        java.io.File file10 = explodedArchive3.getManifestFile(file9);
        java.util.Iterator<java.io.File> fileItor11 = fileEntryIterator0.listFiles(file10);
        java.io.File file12 = fileEntryIterator0.current;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator13 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file14 = null;
        fileEntryIterator13.current = file14;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive16 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest17 = explodedArchive16.manifest;
        explodedArchive16.recursive = false;
        java.util.jar.Manifest manifest20 = explodedArchive16.manifest;
        java.io.File file21 = explodedArchive16.manifestFile;
        java.io.File file22 = null;
        java.io.File file23 = explodedArchive16.getManifestFile(file22);
        java.util.Iterator<java.io.File> fileItor24 = fileEntryIterator13.listFiles(file23);
        java.util.ArrayDeque<java.util.Iterator<java.io.File>> fileItorQueue25 = new java.util.ArrayDeque<java.util.Iterator<java.io.File>>();
        boolean boolean26 = fileItorQueue25.add(fileItor24);
        fileEntryIterator0.stack = fileItorQueue25;
        java.util.Deque<java.util.Iterator<java.io.File>> fileItorQueue28 = fileEntryIterator0.stack;
        java.io.File file29 = fileEntryIterator0.poll();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator30 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        boolean boolean31 = fileEntryIterator30.hasNext();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator32 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator33 = entryComparator32.reversed();
        java.util.Comparator<java.io.File> fileComparator34 = fileComparator33.reversed();
        fileEntryIterator30.entryComparator = fileComparator34;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive36 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file37 = explodedArchive36.root;
        java.io.File file38 = null;
        explodedArchive36.manifestFile = file38;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive40 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest41 = explodedArchive40.manifest;
        explodedArchive40.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive44 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest45 = explodedArchive44.manifest;
        explodedArchive44.recursive = false;
        java.util.jar.Manifest manifest48 = explodedArchive44.manifest;
        java.io.File file49 = explodedArchive44.manifestFile;
        java.io.File file50 = null;
        java.io.File file51 = explodedArchive44.getManifestFile(file50);
        explodedArchive40.manifestFile = file50;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive53 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest54 = explodedArchive53.manifest;
        explodedArchive53.recursive = false;
        java.util.jar.Manifest manifest57 = explodedArchive53.manifest;
        java.io.File file58 = explodedArchive53.manifestFile;
        java.io.File file59 = null;
        java.io.File file60 = explodedArchive53.getManifestFile(file59);
        explodedArchive40.manifestFile = file60;
        java.io.File file62 = explodedArchive36.getManifestFile(file60);
        java.util.Iterator<java.io.File> fileItor63 = fileEntryIterator30.listFiles(file62);
        boolean boolean64 = fileEntryIterator30.recursive;
        java.util.Deque<java.util.Iterator<java.io.File>> fileItorQueue65 = fileEntryIterator30.stack;
        fileEntryIterator30.recursive = false;
        java.util.Deque<java.util.Iterator<java.io.File>> fileItorQueue68 = fileEntryIterator30.stack;
        fileEntryIterator0.stack = fileItorQueue68;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file23.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file23.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItorQueue28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file51.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file51.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file60.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file60.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file62.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file62.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItorQueue65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItorQueue68);
    }

    @Test
    public void test612() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test612");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntry fileEntry0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntry();
        java.io.File file1 = fileEntry0.file;
        java.lang.String str2 = fileEntry0.name;
        java.io.File file3 = fileEntry0.file;
        java.io.File file4 = fileEntry0.file;
        java.lang.String str5 = fileEntry0.name;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive6 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.lang.String str7 = explodedArchive6.toString();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive8 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file9 = explodedArchive8.root;
        java.io.File file10 = null;
        explodedArchive8.manifestFile = file10;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive12 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest13 = explodedArchive12.manifest;
        explodedArchive12.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive16 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest17 = explodedArchive16.manifest;
        explodedArchive16.recursive = false;
        java.util.jar.Manifest manifest20 = explodedArchive16.manifest;
        java.io.File file21 = explodedArchive16.manifestFile;
        java.io.File file22 = null;
        java.io.File file23 = explodedArchive16.getManifestFile(file22);
        explodedArchive12.manifestFile = file22;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive25 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest26 = explodedArchive25.manifest;
        explodedArchive25.recursive = false;
        java.util.jar.Manifest manifest29 = explodedArchive25.manifest;
        java.io.File file30 = explodedArchive25.manifestFile;
        java.io.File file31 = null;
        java.io.File file32 = explodedArchive25.getManifestFile(file31);
        explodedArchive12.manifestFile = file32;
        java.io.File file34 = explodedArchive8.getManifestFile(file32);
        java.io.File file35 = explodedArchive6.getManifestFile(file32);
        fileEntry0.file = file32;
        java.io.File file37 = fileEntry0.getFile();
        java.io.File file38 = fileEntry0.file;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str7 + "' != '" + "exploded archive" + "'", str7.equals("exploded archive"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file23.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file23.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file32.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file32.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file34.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file34.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file35.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file35.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file37.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file37.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file38.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file38.toString(), "META-INF/MANIFEST.MF");
    }

    @Test
    public void test613() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test613");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file1 = explodedArchive0.root;
        java.io.File file2 = null;
        explodedArchive0.manifestFile = file2;
        java.io.File file4 = explodedArchive0.root;
        java.lang.String str5 = explodedArchive0.toString();
        java.util.jar.Manifest manifest6 = null;
        explodedArchive0.manifest = manifest6;
        // The following exception was thrown during execution in test generation
        try {
            java.net.URL uRL8 = explodedArchive0.getUrl();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "exploded archive" + "'", str5.equals("exploded archive"));
    }

    @Test
    public void test614() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test614");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest1 = explodedArchive0.manifest;
        java.util.jar.Manifest manifest2 = null;
        explodedArchive0.manifest = manifest2;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator4 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        boolean boolean5 = fileEntryIterator4.hasNext();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator6 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator7 = entryComparator6.reversed();
        java.util.Comparator<java.io.File> fileComparator8 = fileComparator7.reversed();
        fileEntryIterator4.entryComparator = fileComparator8;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive10 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file11 = explodedArchive10.root;
        java.io.File file12 = null;
        explodedArchive10.manifestFile = file12;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive14 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest15 = explodedArchive14.manifest;
        explodedArchive14.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive18 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest19 = explodedArchive18.manifest;
        explodedArchive18.recursive = false;
        java.util.jar.Manifest manifest22 = explodedArchive18.manifest;
        java.io.File file23 = explodedArchive18.manifestFile;
        java.io.File file24 = null;
        java.io.File file25 = explodedArchive18.getManifestFile(file24);
        explodedArchive14.manifestFile = file24;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive27 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest28 = explodedArchive27.manifest;
        explodedArchive27.recursive = false;
        java.util.jar.Manifest manifest31 = explodedArchive27.manifest;
        java.io.File file32 = explodedArchive27.manifestFile;
        java.io.File file33 = null;
        java.io.File file34 = explodedArchive27.getManifestFile(file33);
        explodedArchive14.manifestFile = file34;
        java.io.File file36 = explodedArchive10.getManifestFile(file34);
        java.util.Iterator<java.io.File> fileItor37 = fileEntryIterator4.listFiles(file36);
        java.io.File file38 = explodedArchive0.getManifestFile(file36);
        java.lang.String str39 = explodedArchive0.toString();
        java.util.jar.Manifest manifest40 = null;
        explodedArchive0.manifest = manifest40;
        // The following exception was thrown during execution in test generation
        try {
            java.net.URL uRL42 = explodedArchive0.getUrl();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file25.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file25.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file34.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file34.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file36.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file36.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file38.getParent(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file38.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str39 + "' != '" + "exploded archive" + "'", str39.equals("exploded archive"));
    }

    @Test
    public void test615() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test615");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        boolean boolean1 = fileEntryIterator0.recursive;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator2 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        boolean boolean3 = fileEntryIterator2.hasNext();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator4 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator5 = entryComparator4.reversed();
        java.util.Comparator<java.io.File> fileComparator6 = fileComparator5.reversed();
        fileEntryIterator2.entryComparator = fileComparator6;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive8 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file9 = explodedArchive8.root;
        java.io.File file10 = null;
        explodedArchive8.manifestFile = file10;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive12 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest13 = explodedArchive12.manifest;
        explodedArchive12.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive16 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest17 = explodedArchive16.manifest;
        explodedArchive16.recursive = false;
        java.util.jar.Manifest manifest20 = explodedArchive16.manifest;
        java.io.File file21 = explodedArchive16.manifestFile;
        java.io.File file22 = null;
        java.io.File file23 = explodedArchive16.getManifestFile(file22);
        explodedArchive12.manifestFile = file22;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive25 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest26 = explodedArchive25.manifest;
        explodedArchive25.recursive = false;
        java.util.jar.Manifest manifest29 = explodedArchive25.manifest;
        java.io.File file30 = explodedArchive25.manifestFile;
        java.io.File file31 = null;
        java.io.File file32 = explodedArchive25.getManifestFile(file31);
        explodedArchive12.manifestFile = file32;
        java.io.File file34 = explodedArchive8.getManifestFile(file32);
        java.util.Iterator<java.io.File> fileItor35 = fileEntryIterator2.listFiles(file34);
        fileEntryIterator0.root = file34;
        java.io.File file37 = fileEntryIterator0.current;
        java.util.Comparator<java.io.File> fileComparator38 = fileEntryIterator0.entryComparator;
        java.util.Comparator<java.io.File> fileComparator39 = fileEntryIterator0.entryComparator;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file23.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file23.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file32.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file32.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file34.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file34.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator39);
    }

    @Test
    public void test616() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test616");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        boolean boolean1 = explodedArchive0.recursive;
        java.lang.String str2 = explodedArchive0.toString();
        boolean boolean3 = explodedArchive0.recursive;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntry fileEntry4 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntry();
        java.lang.String str5 = fileEntry4.name;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator6 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file7 = null;
        fileEntryIterator6.current = file7;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive9 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest10 = explodedArchive9.manifest;
        explodedArchive9.recursive = false;
        java.util.jar.Manifest manifest13 = explodedArchive9.manifest;
        java.io.File file14 = explodedArchive9.manifestFile;
        java.io.File file15 = null;
        java.io.File file16 = explodedArchive9.getManifestFile(file15);
        java.util.Iterator<java.io.File> fileItor17 = fileEntryIterator6.listFiles(file16);
        java.io.File file18 = fileEntryIterator6.current;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator19 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file20 = null;
        fileEntryIterator19.current = file20;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive22 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest23 = explodedArchive22.manifest;
        explodedArchive22.recursive = false;
        java.util.jar.Manifest manifest26 = explodedArchive22.manifest;
        java.io.File file27 = explodedArchive22.manifestFile;
        java.io.File file28 = null;
        java.io.File file29 = explodedArchive22.getManifestFile(file28);
        java.util.Iterator<java.io.File> fileItor30 = fileEntryIterator19.listFiles(file29);
        java.util.ArrayDeque<java.util.Iterator<java.io.File>> fileItorQueue31 = new java.util.ArrayDeque<java.util.Iterator<java.io.File>>();
        boolean boolean32 = fileItorQueue31.add(fileItor30);
        fileEntryIterator6.stack = fileItorQueue31;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive34 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest35 = explodedArchive34.manifest;
        explodedArchive34.recursive = false;
        java.io.File file38 = null;
        explodedArchive34.root = file38;
        java.io.File file40 = explodedArchive34.root;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive41 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest42 = explodedArchive41.manifest;
        explodedArchive41.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive45 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest46 = explodedArchive45.manifest;
        explodedArchive45.recursive = false;
        java.util.jar.Manifest manifest49 = explodedArchive45.manifest;
        java.io.File file50 = explodedArchive45.manifestFile;
        java.io.File file51 = null;
        java.io.File file52 = explodedArchive45.getManifestFile(file51);
        explodedArchive41.manifestFile = file51;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive54 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest55 = explodedArchive54.manifest;
        explodedArchive54.recursive = false;
        java.util.jar.Manifest manifest58 = explodedArchive54.manifest;
        java.io.File file59 = explodedArchive54.manifestFile;
        java.io.File file60 = null;
        java.io.File file61 = explodedArchive54.getManifestFile(file60);
        explodedArchive41.manifestFile = file61;
        java.io.File file63 = explodedArchive34.getManifestFile(file61);
        fileEntryIterator6.root = file61;
        fileEntry4.file = file61;
        boolean boolean66 = fileEntry4.isDirectory();
        boolean boolean67 = fileEntry4.isDirectory();
        java.io.File file68 = fileEntry4.file;
        java.io.File file69 = fileEntry4.getFile();
        explodedArchive0.root = file69;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntry fileEntry71 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntry();
        java.lang.String str72 = fileEntry71.getName();
        java.io.File file73 = fileEntry71.getFile();
        java.lang.String str74 = fileEntry71.getName();
        java.lang.String str75 = fileEntry71.getName();
        java.lang.String str76 = fileEntry71.name;
        // The following exception was thrown during execution in test generation
        try {
            org.springframework.boot.loader.archive.Archive archive77 = explodedArchive0.getNestedArchive((org.springframework.boot.loader.archive.Archive.Entry) fileEntry71);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str2 + "' != '" + "exploded archive" + "'", str2.equals("exploded archive"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file16.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file16.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file29.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file29.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file52.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file52.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file61.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file61.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file63.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file63.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file68.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file68.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file69.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file69.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file73);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str75);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str76);
    }

    @Test
    public void test617() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test617");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntry fileEntry0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntry();
        java.lang.String str1 = fileEntry0.getName();
        java.io.File file2 = fileEntry0.getFile();
        java.lang.String str3 = fileEntry0.getName();
        java.io.File file4 = fileEntry0.getFile();
        java.lang.String str5 = fileEntry0.name;
        java.io.File file6 = null;
        fileEntry0.file = file6;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str5);
    }

    @Test
    public void test618() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test618");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file1 = null;
        fileEntryIterator0.current = file1;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive3 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest4 = explodedArchive3.manifest;
        explodedArchive3.recursive = false;
        java.util.jar.Manifest manifest7 = explodedArchive3.manifest;
        java.io.File file8 = explodedArchive3.manifestFile;
        java.io.File file9 = null;
        java.io.File file10 = explodedArchive3.getManifestFile(file9);
        java.util.Iterator<java.io.File> fileItor11 = fileEntryIterator0.listFiles(file10);
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator12 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file13 = null;
        fileEntryIterator12.current = file13;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive15 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest16 = explodedArchive15.manifest;
        explodedArchive15.recursive = false;
        java.util.jar.Manifest manifest19 = explodedArchive15.manifest;
        java.io.File file20 = explodedArchive15.manifestFile;
        java.io.File file21 = null;
        java.io.File file22 = explodedArchive15.getManifestFile(file21);
        java.util.Iterator<java.io.File> fileItor23 = fileEntryIterator12.listFiles(file22);
        java.io.File file24 = fileEntryIterator12.current;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator25 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file26 = null;
        fileEntryIterator25.current = file26;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive28 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest29 = explodedArchive28.manifest;
        explodedArchive28.recursive = false;
        java.util.jar.Manifest manifest32 = explodedArchive28.manifest;
        java.io.File file33 = explodedArchive28.manifestFile;
        java.io.File file34 = null;
        java.io.File file35 = explodedArchive28.getManifestFile(file34);
        java.util.Iterator<java.io.File> fileItor36 = fileEntryIterator25.listFiles(file35);
        java.util.ArrayDeque<java.util.Iterator<java.io.File>> fileItorQueue37 = new java.util.ArrayDeque<java.util.Iterator<java.io.File>>();
        boolean boolean38 = fileItorQueue37.add(fileItor36);
        fileEntryIterator12.stack = fileItorQueue37;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive40 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest41 = explodedArchive40.manifest;
        explodedArchive40.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive44 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest45 = explodedArchive44.manifest;
        explodedArchive44.recursive = false;
        java.util.jar.Manifest manifest48 = explodedArchive44.manifest;
        java.io.File file49 = explodedArchive44.manifestFile;
        java.io.File file50 = null;
        java.io.File file51 = explodedArchive44.getManifestFile(file50);
        explodedArchive40.manifestFile = file50;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive53 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest54 = explodedArchive53.manifest;
        explodedArchive53.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive57 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest58 = explodedArchive57.manifest;
        explodedArchive57.recursive = false;
        java.util.jar.Manifest manifest61 = explodedArchive57.manifest;
        java.io.File file62 = explodedArchive57.manifestFile;
        java.io.File file63 = null;
        java.io.File file64 = explodedArchive57.getManifestFile(file63);
        explodedArchive53.manifestFile = file63;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive66 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest67 = explodedArchive66.manifest;
        explodedArchive66.recursive = false;
        java.util.jar.Manifest manifest70 = explodedArchive66.manifest;
        java.io.File file71 = explodedArchive66.manifestFile;
        java.io.File file72 = null;
        java.io.File file73 = explodedArchive66.getManifestFile(file72);
        explodedArchive53.manifestFile = file73;
        explodedArchive40.root = file73;
        java.util.Iterator<java.io.File> fileItor76 = fileEntryIterator12.listFiles(file73);
        java.util.Comparator<java.io.File> fileComparator77 = fileEntryIterator12.entryComparator;
        fileEntryIterator0.entryComparator = fileComparator77;
        boolean boolean79 = fileEntryIterator0.hasNext();
        java.io.File file80 = fileEntryIterator0.root;
        boolean boolean81 = fileEntryIterator0.recursive;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file22.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file22.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file35.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file35.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file51.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file51.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file64.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file64.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file73);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file73.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file73.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor76);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator77);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file80);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
    }

    @Test
    public void test619() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test619");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file1 = null;
        fileEntryIterator0.current = file1;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive3 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest4 = explodedArchive3.manifest;
        explodedArchive3.recursive = false;
        java.util.jar.Manifest manifest7 = explodedArchive3.manifest;
        java.io.File file8 = explodedArchive3.manifestFile;
        java.io.File file9 = null;
        java.io.File file10 = explodedArchive3.getManifestFile(file9);
        java.util.Iterator<java.io.File> fileItor11 = fileEntryIterator0.listFiles(file10);
        java.io.File file12 = fileEntryIterator0.root;
        java.io.File file13 = fileEntryIterator0.poll();
        java.io.File file14 = fileEntryIterator0.root;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file14);
    }

    @Test
    public void test620() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test620");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        boolean boolean1 = fileEntryIterator0.hasNext();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator2 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator3 = entryComparator2.reversed();
        java.util.Comparator<java.io.File> fileComparator4 = fileComparator3.reversed();
        fileEntryIterator0.entryComparator = fileComparator4;
        java.util.Comparator<java.io.File> fileComparator6 = fileEntryIterator0.entryComparator;
        java.io.File file7 = fileEntryIterator0.current;
        java.util.Comparator<java.io.File> fileComparator8 = fileEntryIterator0.entryComparator;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive9 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest10 = explodedArchive9.manifest;
        explodedArchive9.recursive = false;
        java.io.File file13 = null;
        explodedArchive9.root = file13;
        java.io.File file15 = explodedArchive9.root;
        java.util.jar.Manifest manifest16 = null;
        explodedArchive9.manifest = manifest16;
        explodedArchive9.recursive = false;
        java.util.jar.Manifest manifest20 = null;
        explodedArchive9.manifest = manifest20;
        java.lang.String str22 = explodedArchive9.toString();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive23 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.lang.String str24 = explodedArchive23.toString();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive25 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file26 = explodedArchive25.root;
        java.io.File file27 = null;
        explodedArchive25.manifestFile = file27;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive29 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest30 = explodedArchive29.manifest;
        explodedArchive29.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive33 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest34 = explodedArchive33.manifest;
        explodedArchive33.recursive = false;
        java.util.jar.Manifest manifest37 = explodedArchive33.manifest;
        java.io.File file38 = explodedArchive33.manifestFile;
        java.io.File file39 = null;
        java.io.File file40 = explodedArchive33.getManifestFile(file39);
        explodedArchive29.manifestFile = file39;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive42 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest43 = explodedArchive42.manifest;
        explodedArchive42.recursive = false;
        java.util.jar.Manifest manifest46 = explodedArchive42.manifest;
        java.io.File file47 = explodedArchive42.manifestFile;
        java.io.File file48 = null;
        java.io.File file49 = explodedArchive42.getManifestFile(file48);
        explodedArchive29.manifestFile = file49;
        java.io.File file51 = explodedArchive25.getManifestFile(file49);
        java.io.File file52 = explodedArchive23.getManifestFile(file49);
        java.io.File file53 = explodedArchive9.getManifestFile(file49);
        fileEntryIterator0.current = file53;
        java.io.File file55 = fileEntryIterator0.poll();
        java.util.Deque<java.util.Iterator<java.io.File>> fileItorQueue56 = fileEntryIterator0.stack;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str22 + "' != '" + "exploded archive" + "'", str22.equals("exploded archive"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str24 + "' != '" + "exploded archive" + "'", str24.equals("exploded archive"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file40.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file40.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file49.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file49.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file51.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file51.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file52.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file52.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file53.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file53.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItorQueue56);
    }

    @Test
    public void test621() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test621");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        boolean boolean1 = fileEntryIterator0.recursive;
        boolean boolean2 = fileEntryIterator0.recursive;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    }

    @Test
    public void test622() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test622");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntry fileEntry0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntry();
        java.io.File file1 = fileEntry0.getFile();
        fileEntry0.name = "hi!";
        java.io.File file4 = null;
        fileEntry0.file = file4;
        java.lang.String str6 = fileEntry0.name;
        java.io.File file7 = fileEntry0.file;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "hi!" + "'", str6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file7);
    }

    @Test
    public void test623() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test623");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest1 = explodedArchive0.manifest;
        explodedArchive0.recursive = false;
        java.io.File file4 = null;
        explodedArchive0.root = file4;
        java.io.File file6 = explodedArchive0.root;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive7 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest8 = explodedArchive7.manifest;
        explodedArchive7.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive11 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest12 = explodedArchive11.manifest;
        explodedArchive11.recursive = false;
        java.util.jar.Manifest manifest15 = explodedArchive11.manifest;
        java.io.File file16 = explodedArchive11.manifestFile;
        java.io.File file17 = null;
        java.io.File file18 = explodedArchive11.getManifestFile(file17);
        explodedArchive7.manifestFile = file17;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive20 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest21 = explodedArchive20.manifest;
        explodedArchive20.recursive = false;
        java.util.jar.Manifest manifest24 = explodedArchive20.manifest;
        java.io.File file25 = explodedArchive20.manifestFile;
        java.io.File file26 = null;
        java.io.File file27 = explodedArchive20.getManifestFile(file26);
        explodedArchive7.manifestFile = file27;
        java.io.File file29 = explodedArchive0.getManifestFile(file27);
        boolean boolean30 = explodedArchive0.recursive;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntry fileEntry31 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntry();
        java.lang.String str32 = fileEntry31.name;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator33 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file34 = null;
        fileEntryIterator33.current = file34;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive36 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.lang.String str37 = explodedArchive36.toString();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive38 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file39 = explodedArchive38.root;
        java.io.File file40 = null;
        explodedArchive38.manifestFile = file40;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive42 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest43 = explodedArchive42.manifest;
        explodedArchive42.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive46 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest47 = explodedArchive46.manifest;
        explodedArchive46.recursive = false;
        java.util.jar.Manifest manifest50 = explodedArchive46.manifest;
        java.io.File file51 = explodedArchive46.manifestFile;
        java.io.File file52 = null;
        java.io.File file53 = explodedArchive46.getManifestFile(file52);
        explodedArchive42.manifestFile = file52;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive55 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest56 = explodedArchive55.manifest;
        explodedArchive55.recursive = false;
        java.util.jar.Manifest manifest59 = explodedArchive55.manifest;
        java.io.File file60 = explodedArchive55.manifestFile;
        java.io.File file61 = null;
        java.io.File file62 = explodedArchive55.getManifestFile(file61);
        explodedArchive42.manifestFile = file62;
        java.io.File file64 = explodedArchive38.getManifestFile(file62);
        java.io.File file65 = explodedArchive36.getManifestFile(file62);
        fileEntryIterator33.root = file62;
        fileEntry31.file = file62;
        java.io.File file68 = explodedArchive0.getManifestFile(file62);
        // The following exception was thrown during execution in test generation
        try {
            org.springframework.boot.loader.archive.ExplodedArchive explodedArchive69 = new org.springframework.boot.loader.archive.ExplodedArchive(file68);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid source folder META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file18.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file18.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file27.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file27.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file29.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file29.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str37 + "' != '" + "exploded archive" + "'", str37.equals("exploded archive"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file53.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file53.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file62.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file62.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file64.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file64.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file65.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file65.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file68.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file68.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
    }

    @Test
    public void test624() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test624");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest1 = explodedArchive0.manifest;
        java.util.jar.Manifest manifest2 = null;
        explodedArchive0.manifest = manifest2;
        java.io.File file4 = explodedArchive0.root;
        java.util.jar.Manifest manifest5 = null;
        explodedArchive0.manifest = manifest5;
        java.util.jar.Manifest manifest7 = explodedArchive0.manifest;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive8 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest9 = explodedArchive8.manifest;
        explodedArchive8.recursive = false;
        java.io.File file12 = null;
        explodedArchive8.root = file12;
        java.io.File file14 = explodedArchive8.root;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive15 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest16 = explodedArchive15.manifest;
        explodedArchive15.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive19 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest20 = explodedArchive19.manifest;
        explodedArchive19.recursive = false;
        java.util.jar.Manifest manifest23 = explodedArchive19.manifest;
        java.io.File file24 = explodedArchive19.manifestFile;
        java.io.File file25 = null;
        java.io.File file26 = explodedArchive19.getManifestFile(file25);
        explodedArchive15.manifestFile = file25;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive28 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest29 = explodedArchive28.manifest;
        explodedArchive28.recursive = false;
        java.util.jar.Manifest manifest32 = explodedArchive28.manifest;
        java.io.File file33 = explodedArchive28.manifestFile;
        java.io.File file34 = null;
        java.io.File file35 = explodedArchive28.getManifestFile(file34);
        explodedArchive15.manifestFile = file35;
        java.io.File file37 = explodedArchive8.getManifestFile(file35);
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntry fileEntry38 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntry();
        java.lang.String str39 = fileEntry38.name;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator40 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file41 = null;
        fileEntryIterator40.current = file41;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive43 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.lang.String str44 = explodedArchive43.toString();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive45 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file46 = explodedArchive45.root;
        java.io.File file47 = null;
        explodedArchive45.manifestFile = file47;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive49 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest50 = explodedArchive49.manifest;
        explodedArchive49.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive53 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest54 = explodedArchive53.manifest;
        explodedArchive53.recursive = false;
        java.util.jar.Manifest manifest57 = explodedArchive53.manifest;
        java.io.File file58 = explodedArchive53.manifestFile;
        java.io.File file59 = null;
        java.io.File file60 = explodedArchive53.getManifestFile(file59);
        explodedArchive49.manifestFile = file59;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive62 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest63 = explodedArchive62.manifest;
        explodedArchive62.recursive = false;
        java.util.jar.Manifest manifest66 = explodedArchive62.manifest;
        java.io.File file67 = explodedArchive62.manifestFile;
        java.io.File file68 = null;
        java.io.File file69 = explodedArchive62.getManifestFile(file68);
        explodedArchive49.manifestFile = file69;
        java.io.File file71 = explodedArchive45.getManifestFile(file69);
        java.io.File file72 = explodedArchive43.getManifestFile(file69);
        fileEntryIterator40.root = file69;
        fileEntry38.file = file69;
        java.io.File file75 = fileEntry38.file;
        explodedArchive8.root = file75;
        java.io.File file77 = explodedArchive8.manifestFile;
        java.io.File file78 = explodedArchive8.root;
        java.io.File file79 = explodedArchive0.getManifestFile(file78);
        // The following exception was thrown during execution in test generation
        try {
            java.util.jar.Manifest manifest80 = explodedArchive0.getManifest();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file26.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file26.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file35.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file35.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file37.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file37.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str44 + "' != '" + "exploded archive" + "'", str44.equals("exploded archive"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file60.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file60.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file69.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file69.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file71.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file71.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file72.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file72.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file75);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file75.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file75.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file77);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file78);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file78.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file78.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file79);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file79.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file79.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
    }

    @Test
    public void test625() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test625");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        boolean boolean1 = fileEntryIterator0.recursive;
        java.io.File file2 = fileEntryIterator0.current;
        boolean boolean3 = fileEntryIterator0.hasNext();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator4 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file5 = null;
        fileEntryIterator4.current = file5;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive7 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest8 = explodedArchive7.manifest;
        explodedArchive7.recursive = false;
        java.util.jar.Manifest manifest11 = explodedArchive7.manifest;
        java.io.File file12 = explodedArchive7.manifestFile;
        java.io.File file13 = null;
        java.io.File file14 = explodedArchive7.getManifestFile(file13);
        java.util.Iterator<java.io.File> fileItor15 = fileEntryIterator4.listFiles(file14);
        java.io.File file16 = fileEntryIterator4.root;
        java.io.File file17 = fileEntryIterator4.root;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator18 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file19 = null;
        fileEntryIterator18.current = file19;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive21 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest22 = explodedArchive21.manifest;
        explodedArchive21.recursive = false;
        java.util.jar.Manifest manifest25 = explodedArchive21.manifest;
        java.io.File file26 = explodedArchive21.manifestFile;
        java.io.File file27 = null;
        java.io.File file28 = explodedArchive21.getManifestFile(file27);
        java.util.Iterator<java.io.File> fileItor29 = fileEntryIterator18.listFiles(file28);
        java.util.ArrayDeque<java.util.Iterator<java.io.File>> fileItorQueue30 = new java.util.ArrayDeque<java.util.Iterator<java.io.File>>();
        boolean boolean31 = fileItorQueue30.add(fileItor29);
        fileEntryIterator4.stack = fileItorQueue30;
        fileEntryIterator0.stack = fileItorQueue30;
        java.io.File file34 = fileEntryIterator0.poll();
        java.util.Deque<java.util.Iterator<java.io.File>> fileItorQueue35 = fileEntryIterator0.stack;
        java.io.File file36 = fileEntryIterator0.poll();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file14.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file14.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file28.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file28.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItorQueue35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file36);
    }

    @Test
    public void test626() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test626");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file1 = explodedArchive0.root;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive2 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest3 = explodedArchive2.manifest;
        explodedArchive2.recursive = false;
        java.util.jar.Manifest manifest6 = explodedArchive2.manifest;
        java.io.File file7 = explodedArchive2.manifestFile;
        java.io.File file8 = null;
        java.io.File file9 = explodedArchive2.getManifestFile(file8);
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator10 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file11 = null;
        fileEntryIterator10.current = file11;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive13 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.lang.String str14 = explodedArchive13.toString();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive15 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file16 = explodedArchive15.root;
        java.io.File file17 = null;
        explodedArchive15.manifestFile = file17;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive19 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest20 = explodedArchive19.manifest;
        explodedArchive19.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive23 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest24 = explodedArchive23.manifest;
        explodedArchive23.recursive = false;
        java.util.jar.Manifest manifest27 = explodedArchive23.manifest;
        java.io.File file28 = explodedArchive23.manifestFile;
        java.io.File file29 = null;
        java.io.File file30 = explodedArchive23.getManifestFile(file29);
        explodedArchive19.manifestFile = file29;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive32 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest33 = explodedArchive32.manifest;
        explodedArchive32.recursive = false;
        java.util.jar.Manifest manifest36 = explodedArchive32.manifest;
        java.io.File file37 = explodedArchive32.manifestFile;
        java.io.File file38 = null;
        java.io.File file39 = explodedArchive32.getManifestFile(file38);
        explodedArchive19.manifestFile = file39;
        java.io.File file41 = explodedArchive15.getManifestFile(file39);
        java.io.File file42 = explodedArchive13.getManifestFile(file39);
        fileEntryIterator10.root = file39;
        explodedArchive2.root = file39;
        java.io.File file45 = explodedArchive0.getManifestFile(file39);
        boolean boolean46 = explodedArchive0.recursive;
        java.lang.String str47 = explodedArchive0.toString();
        java.lang.String str48 = explodedArchive0.toString();
        java.lang.Class<?> wildcardClass49 = explodedArchive0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file9.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file9.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str14 + "' != '" + "exploded archive" + "'", str14.equals("exploded archive"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file30.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file30.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file39.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file39.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file41.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file41.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file42.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file42.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file45.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file45.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str47 + "' != '" + "exploded archive" + "'", str47.equals("exploded archive"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str48 + "' != '" + "exploded archive" + "'", str48.equals("exploded archive"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass49);
    }

    @Test
    public void test627() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test627");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest1 = explodedArchive0.manifest;
        explodedArchive0.recursive = false;
        java.io.File file4 = null;
        explodedArchive0.root = file4;
        java.io.File file6 = explodedArchive0.root;
        java.util.jar.Manifest manifest7 = null;
        explodedArchive0.manifest = manifest7;
        explodedArchive0.recursive = false;
        java.util.jar.Manifest manifest11 = null;
        explodedArchive0.manifest = manifest11;
        boolean boolean13 = explodedArchive0.recursive;
        boolean boolean14 = explodedArchive0.recursive;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test628() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test628");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest1 = explodedArchive0.manifest;
        explodedArchive0.recursive = false;
        java.util.jar.Manifest manifest4 = explodedArchive0.manifest;
        java.util.jar.Manifest manifest5 = null;
        explodedArchive0.manifest = manifest5;
        java.lang.String str7 = explodedArchive0.toString();
        org.springframework.boot.loader.archive.Archive.EntryFilter entryFilter8 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<org.springframework.boot.loader.archive.Archive> archiveList9 = explodedArchive0.getNestedArchives(entryFilter8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str7 + "' != '" + "exploded archive" + "'", str7.equals("exploded archive"));
    }

    @Test
    public void test629() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test629");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file1 = null;
        fileEntryIterator0.current = file1;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive3 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest4 = explodedArchive3.manifest;
        explodedArchive3.recursive = false;
        java.util.jar.Manifest manifest7 = explodedArchive3.manifest;
        java.io.File file8 = explodedArchive3.manifestFile;
        java.io.File file9 = null;
        java.io.File file10 = explodedArchive3.getManifestFile(file9);
        java.util.Iterator<java.io.File> fileItor11 = fileEntryIterator0.listFiles(file10);
        java.io.File file12 = fileEntryIterator0.current;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator13 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file14 = null;
        fileEntryIterator13.current = file14;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive16 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest17 = explodedArchive16.manifest;
        explodedArchive16.recursive = false;
        java.util.jar.Manifest manifest20 = explodedArchive16.manifest;
        java.io.File file21 = explodedArchive16.manifestFile;
        java.io.File file22 = null;
        java.io.File file23 = explodedArchive16.getManifestFile(file22);
        java.util.Iterator<java.io.File> fileItor24 = fileEntryIterator13.listFiles(file23);
        java.util.ArrayDeque<java.util.Iterator<java.io.File>> fileItorQueue25 = new java.util.ArrayDeque<java.util.Iterator<java.io.File>>();
        boolean boolean26 = fileItorQueue25.add(fileItor24);
        fileEntryIterator0.stack = fileItorQueue25;
        java.util.Deque<java.util.Iterator<java.io.File>> fileItorQueue28 = fileEntryIterator0.stack;
        java.util.Deque<java.util.Iterator<java.io.File>> fileItorQueue29 = fileEntryIterator0.stack;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file23.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file23.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItorQueue28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItorQueue29);
    }

    @Test
    public void test630() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test630");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest1 = explodedArchive0.manifest;
        explodedArchive0.recursive = false;
        java.io.File file4 = null;
        explodedArchive0.root = file4;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntry fileEntry6 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntry();
        java.io.File file7 = fileEntry6.file;
        java.lang.String str8 = fileEntry6.name;
        java.io.File file9 = fileEntry6.file;
        java.io.File file10 = fileEntry6.file;
        // The following exception was thrown during execution in test generation
        try {
            org.springframework.boot.loader.archive.Archive archive11 = explodedArchive0.getNestedArchive((org.springframework.boot.loader.archive.Archive.Entry) fileEntry6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file10);
    }

    @Test
    public void test631() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test631");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file1 = null;
        fileEntryIterator0.current = file1;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive3 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.lang.String str4 = explodedArchive3.toString();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive5 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file6 = explodedArchive5.root;
        java.io.File file7 = null;
        explodedArchive5.manifestFile = file7;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive9 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest10 = explodedArchive9.manifest;
        explodedArchive9.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive13 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest14 = explodedArchive13.manifest;
        explodedArchive13.recursive = false;
        java.util.jar.Manifest manifest17 = explodedArchive13.manifest;
        java.io.File file18 = explodedArchive13.manifestFile;
        java.io.File file19 = null;
        java.io.File file20 = explodedArchive13.getManifestFile(file19);
        explodedArchive9.manifestFile = file19;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive22 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest23 = explodedArchive22.manifest;
        explodedArchive22.recursive = false;
        java.util.jar.Manifest manifest26 = explodedArchive22.manifest;
        java.io.File file27 = explodedArchive22.manifestFile;
        java.io.File file28 = null;
        java.io.File file29 = explodedArchive22.getManifestFile(file28);
        explodedArchive9.manifestFile = file29;
        java.io.File file31 = explodedArchive5.getManifestFile(file29);
        java.io.File file32 = explodedArchive3.getManifestFile(file29);
        fileEntryIterator0.root = file29;
        // The following exception was thrown during execution in test generation
        try {
            fileEntryIterator0.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: remove");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str4 + "' != '" + "exploded archive" + "'", str4.equals("exploded archive"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file20.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file20.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file29.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file29.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file31.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file31.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file32.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file32.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
    }

    @Test
    public void test632() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test632");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest1 = explodedArchive0.manifest;
        explodedArchive0.recursive = false;
        java.io.File file4 = null;
        explodedArchive0.root = file4;
        java.io.File file6 = explodedArchive0.root;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive7 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest8 = explodedArchive7.manifest;
        explodedArchive7.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive11 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest12 = explodedArchive11.manifest;
        explodedArchive11.recursive = false;
        java.util.jar.Manifest manifest15 = explodedArchive11.manifest;
        java.io.File file16 = explodedArchive11.manifestFile;
        java.io.File file17 = null;
        java.io.File file18 = explodedArchive11.getManifestFile(file17);
        explodedArchive7.manifestFile = file17;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive20 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest21 = explodedArchive20.manifest;
        explodedArchive20.recursive = false;
        java.util.jar.Manifest manifest24 = explodedArchive20.manifest;
        java.io.File file25 = explodedArchive20.manifestFile;
        java.io.File file26 = null;
        java.io.File file27 = explodedArchive20.getManifestFile(file26);
        explodedArchive7.manifestFile = file27;
        java.io.File file29 = explodedArchive0.getManifestFile(file27);
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntry fileEntry30 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntry();
        java.lang.String str31 = fileEntry30.name;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator32 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file33 = null;
        fileEntryIterator32.current = file33;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive35 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.lang.String str36 = explodedArchive35.toString();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive37 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file38 = explodedArchive37.root;
        java.io.File file39 = null;
        explodedArchive37.manifestFile = file39;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive41 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest42 = explodedArchive41.manifest;
        explodedArchive41.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive45 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest46 = explodedArchive45.manifest;
        explodedArchive45.recursive = false;
        java.util.jar.Manifest manifest49 = explodedArchive45.manifest;
        java.io.File file50 = explodedArchive45.manifestFile;
        java.io.File file51 = null;
        java.io.File file52 = explodedArchive45.getManifestFile(file51);
        explodedArchive41.manifestFile = file51;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive54 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest55 = explodedArchive54.manifest;
        explodedArchive54.recursive = false;
        java.util.jar.Manifest manifest58 = explodedArchive54.manifest;
        java.io.File file59 = explodedArchive54.manifestFile;
        java.io.File file60 = null;
        java.io.File file61 = explodedArchive54.getManifestFile(file60);
        explodedArchive41.manifestFile = file61;
        java.io.File file63 = explodedArchive37.getManifestFile(file61);
        java.io.File file64 = explodedArchive35.getManifestFile(file61);
        fileEntryIterator32.root = file61;
        fileEntry30.file = file61;
        java.io.File file67 = fileEntry30.file;
        explodedArchive0.root = file67;
        java.util.jar.Manifest manifest69 = null;
        explodedArchive0.manifest = manifest69;
        // The following exception was thrown during execution in test generation
        try {
            java.util.jar.Manifest manifest71 = explodedArchive0.getManifest();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file18.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file18.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file27.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file27.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file29.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file29.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str36 + "' != '" + "exploded archive" + "'", str36.equals("exploded archive"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file52.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file52.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file61.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file61.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file63.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file63.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file64.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file64.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file67.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file67.toString(), "META-INF/MANIFEST.MF");
    }

    @Test
    public void test633() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test633");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        boolean boolean1 = fileEntryIterator0.hasNext();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator2 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator3 = entryComparator2.reversed();
        java.util.Comparator<java.io.File> fileComparator4 = fileComparator3.reversed();
        fileEntryIterator0.entryComparator = fileComparator4;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive6 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file7 = explodedArchive6.root;
        java.io.File file8 = null;
        explodedArchive6.manifestFile = file8;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive10 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest11 = explodedArchive10.manifest;
        explodedArchive10.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive14 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest15 = explodedArchive14.manifest;
        explodedArchive14.recursive = false;
        java.util.jar.Manifest manifest18 = explodedArchive14.manifest;
        java.io.File file19 = explodedArchive14.manifestFile;
        java.io.File file20 = null;
        java.io.File file21 = explodedArchive14.getManifestFile(file20);
        explodedArchive10.manifestFile = file20;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive23 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest24 = explodedArchive23.manifest;
        explodedArchive23.recursive = false;
        java.util.jar.Manifest manifest27 = explodedArchive23.manifest;
        java.io.File file28 = explodedArchive23.manifestFile;
        java.io.File file29 = null;
        java.io.File file30 = explodedArchive23.getManifestFile(file29);
        explodedArchive10.manifestFile = file30;
        java.io.File file32 = explodedArchive6.getManifestFile(file30);
        java.util.Iterator<java.io.File> fileItor33 = fileEntryIterator0.listFiles(file32);
        boolean boolean34 = fileEntryIterator0.recursive;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator35 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator36 = entryComparator35.reversed();
        java.util.Comparator<java.io.File> fileComparator37 = entryComparator35.reversed();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive38 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest39 = explodedArchive38.manifest;
        explodedArchive38.recursive = false;
        java.util.jar.Manifest manifest42 = explodedArchive38.manifest;
        java.io.File file43 = explodedArchive38.manifestFile;
        java.io.File file44 = null;
        java.io.File file45 = explodedArchive38.getManifestFile(file44);
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive46 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest47 = explodedArchive46.manifest;
        explodedArchive46.recursive = false;
        java.io.File file50 = null;
        explodedArchive46.root = file50;
        java.io.File file52 = explodedArchive46.root;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive53 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest54 = explodedArchive53.manifest;
        explodedArchive53.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive57 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest58 = explodedArchive57.manifest;
        explodedArchive57.recursive = false;
        java.util.jar.Manifest manifest61 = explodedArchive57.manifest;
        java.io.File file62 = explodedArchive57.manifestFile;
        java.io.File file63 = null;
        java.io.File file64 = explodedArchive57.getManifestFile(file63);
        explodedArchive53.manifestFile = file63;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive66 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest67 = explodedArchive66.manifest;
        explodedArchive66.recursive = false;
        java.util.jar.Manifest manifest70 = explodedArchive66.manifest;
        java.io.File file71 = explodedArchive66.manifestFile;
        java.io.File file72 = null;
        java.io.File file73 = explodedArchive66.getManifestFile(file72);
        explodedArchive53.manifestFile = file73;
        java.io.File file75 = explodedArchive46.getManifestFile(file73);
        int int76 = entryComparator35.compare(file45, file73);
        java.util.Iterator<java.io.File> fileItor77 = fileEntryIterator0.listFiles(file45);
        java.util.Deque<java.util.Iterator<java.io.File>> fileItorQueue78 = null;
        fileEntryIterator0.stack = fileItorQueue78;
        // The following exception was thrown during execution in test generation
        try {
            fileEntryIterator0.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: remove");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file21.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file21.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file30.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file30.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file32.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file32.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file45.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file45.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file64.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file64.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file73);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file73.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file73.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file75);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file75.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file75.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor77);
    }

    @Test
    public void test634() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test634");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.lang.String str1 = explodedArchive0.toString();
        explodedArchive0.recursive = true;
        java.io.File file4 = null;
        java.io.File file5 = explodedArchive0.getManifestFile(file4);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator<org.springframework.boot.loader.archive.Archive.Entry> entryItor6 = explodedArchive0.iterator();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str1 + "' != '" + "exploded archive" + "'", str1.equals("exploded archive"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file5.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file5.toString(), "META-INF/MANIFEST.MF");
    }

    @Test
    public void test635() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test635");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntry fileEntry0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntry();
        java.lang.String str1 = fileEntry0.getName();
        java.io.File file2 = fileEntry0.getFile();
        java.io.File file3 = fileEntry0.file;
        fileEntry0.name = "exploded archive";
        java.io.File file6 = fileEntry0.file;
        java.io.File file7 = fileEntry0.getFile();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntry fileEntry8 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntry();
        java.io.File file9 = fileEntry8.getFile();
        java.io.File file10 = fileEntry8.getFile();
        java.lang.String str11 = fileEntry8.name;
        fileEntry8.name = "";
        java.io.File file14 = fileEntry8.file;
        java.io.File file15 = fileEntry8.getFile();
        java.io.File file16 = fileEntry8.file;
        java.lang.String str17 = fileEntry8.name;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator18 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file19 = null;
        fileEntryIterator18.current = file19;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive21 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest22 = explodedArchive21.manifest;
        explodedArchive21.recursive = false;
        java.util.jar.Manifest manifest25 = explodedArchive21.manifest;
        java.io.File file26 = explodedArchive21.manifestFile;
        java.io.File file27 = null;
        java.io.File file28 = explodedArchive21.getManifestFile(file27);
        java.util.Iterator<java.io.File> fileItor29 = fileEntryIterator18.listFiles(file28);
        java.io.File file30 = fileEntryIterator18.root;
        boolean boolean31 = fileEntryIterator18.hasNext();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator32 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file33 = null;
        fileEntryIterator32.current = file33;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive35 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.lang.String str36 = explodedArchive35.toString();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive37 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file38 = explodedArchive37.root;
        java.io.File file39 = null;
        explodedArchive37.manifestFile = file39;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive41 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest42 = explodedArchive41.manifest;
        explodedArchive41.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive45 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest46 = explodedArchive45.manifest;
        explodedArchive45.recursive = false;
        java.util.jar.Manifest manifest49 = explodedArchive45.manifest;
        java.io.File file50 = explodedArchive45.manifestFile;
        java.io.File file51 = null;
        java.io.File file52 = explodedArchive45.getManifestFile(file51);
        explodedArchive41.manifestFile = file51;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive54 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest55 = explodedArchive54.manifest;
        explodedArchive54.recursive = false;
        java.util.jar.Manifest manifest58 = explodedArchive54.manifest;
        java.io.File file59 = explodedArchive54.manifestFile;
        java.io.File file60 = null;
        java.io.File file61 = explodedArchive54.getManifestFile(file60);
        explodedArchive41.manifestFile = file61;
        java.io.File file63 = explodedArchive37.getManifestFile(file61);
        java.io.File file64 = explodedArchive35.getManifestFile(file61);
        fileEntryIterator32.root = file61;
        java.io.File file66 = fileEntryIterator32.poll();
        java.io.File file67 = fileEntryIterator32.root;
        java.util.Iterator<java.io.File> fileItor68 = fileEntryIterator18.listFiles(file67);
        fileEntry8.file = file67;
        fileEntry0.file = file67;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str17 + "' != '" + "" + "'", str17.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file28.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file28.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str36 + "' != '" + "exploded archive" + "'", str36.equals("exploded archive"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file52.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file52.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file61.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file61.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file63.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file63.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file64.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file64.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file67.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file67.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor68);
    }

    @Test
    public void test636() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test636");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        boolean boolean1 = explodedArchive0.recursive;
        java.lang.String str2 = explodedArchive0.toString();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive3 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest4 = explodedArchive3.manifest;
        explodedArchive3.recursive = false;
        java.util.jar.Manifest manifest7 = explodedArchive3.manifest;
        java.io.File file8 = explodedArchive3.manifestFile;
        java.io.File file9 = null;
        java.io.File file10 = explodedArchive3.getManifestFile(file9);
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator11 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file12 = null;
        fileEntryIterator11.current = file12;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive14 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.lang.String str15 = explodedArchive14.toString();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive16 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file17 = explodedArchive16.root;
        java.io.File file18 = null;
        explodedArchive16.manifestFile = file18;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive20 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest21 = explodedArchive20.manifest;
        explodedArchive20.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive24 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest25 = explodedArchive24.manifest;
        explodedArchive24.recursive = false;
        java.util.jar.Manifest manifest28 = explodedArchive24.manifest;
        java.io.File file29 = explodedArchive24.manifestFile;
        java.io.File file30 = null;
        java.io.File file31 = explodedArchive24.getManifestFile(file30);
        explodedArchive20.manifestFile = file30;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive33 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest34 = explodedArchive33.manifest;
        explodedArchive33.recursive = false;
        java.util.jar.Manifest manifest37 = explodedArchive33.manifest;
        java.io.File file38 = explodedArchive33.manifestFile;
        java.io.File file39 = null;
        java.io.File file40 = explodedArchive33.getManifestFile(file39);
        explodedArchive20.manifestFile = file40;
        java.io.File file42 = explodedArchive16.getManifestFile(file40);
        java.io.File file43 = explodedArchive14.getManifestFile(file40);
        fileEntryIterator11.root = file40;
        explodedArchive3.root = file40;
        java.io.File file46 = explodedArchive0.getManifestFile(file40);
        // The following exception was thrown during execution in test generation
        try {
            org.springframework.boot.loader.archive.ExplodedArchive explodedArchive48 = new org.springframework.boot.loader.archive.ExplodedArchive(file40, true);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid source folder META-INF/MANIFEST.MF");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str2 + "' != '" + "exploded archive" + "'", str2.equals("exploded archive"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str15 + "' != '" + "exploded archive" + "'", str15.equals("exploded archive"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file31.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file31.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file40.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file40.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file42.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file42.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file43.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file43.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file46.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file46.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
    }

    @Test
    public void test637() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test637");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest1 = explodedArchive0.manifest;
        explodedArchive0.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive4 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest5 = explodedArchive4.manifest;
        explodedArchive4.recursive = false;
        java.util.jar.Manifest manifest8 = explodedArchive4.manifest;
        java.io.File file9 = explodedArchive4.manifestFile;
        java.io.File file10 = null;
        java.io.File file11 = explodedArchive4.getManifestFile(file10);
        explodedArchive0.manifestFile = file10;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive13 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest14 = explodedArchive13.manifest;
        explodedArchive13.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive17 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest18 = explodedArchive17.manifest;
        explodedArchive17.recursive = false;
        java.util.jar.Manifest manifest21 = explodedArchive17.manifest;
        java.io.File file22 = explodedArchive17.manifestFile;
        java.io.File file23 = null;
        java.io.File file24 = explodedArchive17.getManifestFile(file23);
        explodedArchive13.manifestFile = file23;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive26 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest27 = explodedArchive26.manifest;
        explodedArchive26.recursive = false;
        java.util.jar.Manifest manifest30 = explodedArchive26.manifest;
        java.io.File file31 = explodedArchive26.manifestFile;
        java.io.File file32 = null;
        java.io.File file33 = explodedArchive26.getManifestFile(file32);
        explodedArchive13.manifestFile = file33;
        explodedArchive0.root = file33;
        java.net.URL uRL36 = explodedArchive0.getUrl();
        java.net.URL uRL37 = explodedArchive0.getUrl();
        java.io.File file38 = null;
        java.io.File file39 = explodedArchive0.getManifestFile(file38);
        java.util.Spliterator<org.springframework.boot.loader.archive.Archive.Entry> entrySpliterator40 = explodedArchive0.spliterator();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file11.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file11.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file24.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file24.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file33.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file33.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(uRL36);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(uRL36.toString(), "file:/server/study-execution/new-nimrod/nimrod-hunoroutput-test-dest/spring-boot/af20dc6cc45c032573413c401f9f73aa75371744/randoop_1/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(uRL37);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(uRL37.toString(), "file:/server/study-execution/new-nimrod/nimrod-hunoroutput-test-dest/spring-boot/af20dc6cc45c032573413c401f9f73aa75371744/randoop_1/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file39.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file39.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(entrySpliterator40);
    }

    @Test
    public void test638() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test638");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest1 = explodedArchive0.manifest;
        explodedArchive0.recursive = false;
        java.io.File file4 = null;
        explodedArchive0.root = file4;
        java.io.File file6 = explodedArchive0.root;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive7 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest8 = explodedArchive7.manifest;
        explodedArchive7.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive11 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest12 = explodedArchive11.manifest;
        explodedArchive11.recursive = false;
        java.util.jar.Manifest manifest15 = explodedArchive11.manifest;
        java.io.File file16 = explodedArchive11.manifestFile;
        java.io.File file17 = null;
        java.io.File file18 = explodedArchive11.getManifestFile(file17);
        explodedArchive7.manifestFile = file17;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive20 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest21 = explodedArchive20.manifest;
        explodedArchive20.recursive = false;
        java.util.jar.Manifest manifest24 = explodedArchive20.manifest;
        java.io.File file25 = explodedArchive20.manifestFile;
        java.io.File file26 = null;
        java.io.File file27 = explodedArchive20.getManifestFile(file26);
        explodedArchive7.manifestFile = file27;
        java.io.File file29 = explodedArchive0.getManifestFile(file27);
        // The following exception was thrown during execution in test generation
        try {
            java.net.URL uRL30 = explodedArchive0.getUrl();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file18.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file18.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file27.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file27.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file29.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file29.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
    }

    @Test
    public void test639() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test639");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file1 = null;
        fileEntryIterator0.current = file1;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive3 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest4 = explodedArchive3.manifest;
        explodedArchive3.recursive = false;
        java.util.jar.Manifest manifest7 = explodedArchive3.manifest;
        java.io.File file8 = explodedArchive3.manifestFile;
        java.io.File file9 = null;
        java.io.File file10 = explodedArchive3.getManifestFile(file9);
        java.util.Iterator<java.io.File> fileItor11 = fileEntryIterator0.listFiles(file10);
        java.io.File file12 = fileEntryIterator0.root;
        java.io.File file13 = fileEntryIterator0.root;
        java.util.Deque<java.util.Iterator<java.io.File>> fileItorQueue14 = fileEntryIterator0.stack;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator15 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator16 = entryComparator15.reversed();
        java.util.Comparator<java.io.File> fileComparator17 = entryComparator15.reversed();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive18 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest19 = explodedArchive18.manifest;
        explodedArchive18.recursive = false;
        java.util.jar.Manifest manifest22 = explodedArchive18.manifest;
        java.io.File file23 = explodedArchive18.manifestFile;
        java.io.File file24 = null;
        java.io.File file25 = explodedArchive18.getManifestFile(file24);
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive26 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest27 = explodedArchive26.manifest;
        explodedArchive26.recursive = false;
        java.io.File file30 = null;
        explodedArchive26.root = file30;
        java.io.File file32 = explodedArchive26.root;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive33 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest34 = explodedArchive33.manifest;
        explodedArchive33.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive37 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest38 = explodedArchive37.manifest;
        explodedArchive37.recursive = false;
        java.util.jar.Manifest manifest41 = explodedArchive37.manifest;
        java.io.File file42 = explodedArchive37.manifestFile;
        java.io.File file43 = null;
        java.io.File file44 = explodedArchive37.getManifestFile(file43);
        explodedArchive33.manifestFile = file43;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive46 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest47 = explodedArchive46.manifest;
        explodedArchive46.recursive = false;
        java.util.jar.Manifest manifest50 = explodedArchive46.manifest;
        java.io.File file51 = explodedArchive46.manifestFile;
        java.io.File file52 = null;
        java.io.File file53 = explodedArchive46.getManifestFile(file52);
        explodedArchive33.manifestFile = file53;
        java.io.File file55 = explodedArchive26.getManifestFile(file53);
        int int56 = entryComparator15.compare(file25, file53);
        fileEntryIterator0.root = file25;
        java.io.File file58 = fileEntryIterator0.root;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItorQueue14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file25.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file25.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file44.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file44.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file53.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file53.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file55.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file55.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file58.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file58.toString(), "META-INF/MANIFEST.MF");
    }

    @Test
    public void test640() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test640");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntry fileEntry0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntry();
        java.lang.String str1 = fileEntry0.getName();
        java.io.File file2 = fileEntry0.getFile();
        java.lang.String str3 = fileEntry0.getName();
        java.lang.String str4 = fileEntry0.getName();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator5 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file6 = null;
        fileEntryIterator5.current = file6;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive8 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest9 = explodedArchive8.manifest;
        explodedArchive8.recursive = false;
        java.util.jar.Manifest manifest12 = explodedArchive8.manifest;
        java.io.File file13 = explodedArchive8.manifestFile;
        java.io.File file14 = null;
        java.io.File file15 = explodedArchive8.getManifestFile(file14);
        java.util.Iterator<java.io.File> fileItor16 = fileEntryIterator5.listFiles(file15);
        java.io.File file17 = fileEntryIterator5.root;
        java.io.File file18 = fileEntryIterator5.root;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator19 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file20 = null;
        fileEntryIterator19.current = file20;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive22 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest23 = explodedArchive22.manifest;
        explodedArchive22.recursive = false;
        java.util.jar.Manifest manifest26 = explodedArchive22.manifest;
        java.io.File file27 = explodedArchive22.manifestFile;
        java.io.File file28 = null;
        java.io.File file29 = explodedArchive22.getManifestFile(file28);
        java.util.Iterator<java.io.File> fileItor30 = fileEntryIterator19.listFiles(file29);
        java.util.ArrayDeque<java.util.Iterator<java.io.File>> fileItorQueue31 = new java.util.ArrayDeque<java.util.Iterator<java.io.File>>();
        boolean boolean32 = fileItorQueue31.add(fileItor30);
        fileEntryIterator5.stack = fileItorQueue31;
        java.util.Deque<java.util.Iterator<java.io.File>> fileItorQueue34 = fileEntryIterator5.stack;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator35 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file36 = null;
        fileEntryIterator35.current = file36;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive38 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest39 = explodedArchive38.manifest;
        explodedArchive38.recursive = false;
        java.util.jar.Manifest manifest42 = explodedArchive38.manifest;
        java.io.File file43 = explodedArchive38.manifestFile;
        java.io.File file44 = null;
        java.io.File file45 = explodedArchive38.getManifestFile(file44);
        java.util.Iterator<java.io.File> fileItor46 = fileEntryIterator35.listFiles(file45);
        boolean boolean47 = fileEntryIterator35.hasNext();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator48 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator49 = entryComparator48.reversed();
        java.util.Comparator<java.io.File> fileComparator50 = entryComparator48.reversed();
        fileEntryIterator35.entryComparator = fileComparator50;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator52 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file53 = null;
        fileEntryIterator52.current = file53;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive55 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.lang.String str56 = explodedArchive55.toString();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive57 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file58 = explodedArchive57.root;
        java.io.File file59 = null;
        explodedArchive57.manifestFile = file59;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive61 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest62 = explodedArchive61.manifest;
        explodedArchive61.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive65 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest66 = explodedArchive65.manifest;
        explodedArchive65.recursive = false;
        java.util.jar.Manifest manifest69 = explodedArchive65.manifest;
        java.io.File file70 = explodedArchive65.manifestFile;
        java.io.File file71 = null;
        java.io.File file72 = explodedArchive65.getManifestFile(file71);
        explodedArchive61.manifestFile = file71;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive74 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest75 = explodedArchive74.manifest;
        explodedArchive74.recursive = false;
        java.util.jar.Manifest manifest78 = explodedArchive74.manifest;
        java.io.File file79 = explodedArchive74.manifestFile;
        java.io.File file80 = null;
        java.io.File file81 = explodedArchive74.getManifestFile(file80);
        explodedArchive61.manifestFile = file81;
        java.io.File file83 = explodedArchive57.getManifestFile(file81);
        java.io.File file84 = explodedArchive55.getManifestFile(file81);
        fileEntryIterator52.root = file81;
        fileEntryIterator35.current = file81;
        boolean boolean87 = fileEntryIterator35.hasNext();
        java.io.File file88 = fileEntryIterator35.current;
        java.util.Iterator<java.io.File> fileItor89 = fileEntryIterator5.listFiles(file88);
        fileEntry0.file = file88;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file15.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file15.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file29.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file29.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItorQueue34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file45.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file45.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str56 + "' != '" + "exploded archive" + "'", str56.equals("exploded archive"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file72.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file72.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest75);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest78);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file79);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file81);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file81.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file81.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file83);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file83.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file83.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file84);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file84.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file84.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file88);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file88.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file88.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor89);
    }

    @Test
    public void test641() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test641");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file1 = null;
        fileEntryIterator0.current = file1;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive3 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest4 = explodedArchive3.manifest;
        explodedArchive3.recursive = false;
        java.util.jar.Manifest manifest7 = explodedArchive3.manifest;
        java.io.File file8 = explodedArchive3.manifestFile;
        java.io.File file9 = null;
        java.io.File file10 = explodedArchive3.getManifestFile(file9);
        java.util.Iterator<java.io.File> fileItor11 = fileEntryIterator0.listFiles(file10);
        java.util.Comparator<java.io.File> fileComparator12 = fileEntryIterator0.entryComparator;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator13 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file14 = null;
        fileEntryIterator13.current = file14;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive16 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest17 = explodedArchive16.manifest;
        explodedArchive16.recursive = false;
        java.util.jar.Manifest manifest20 = explodedArchive16.manifest;
        java.io.File file21 = explodedArchive16.manifestFile;
        java.io.File file22 = null;
        java.io.File file23 = explodedArchive16.getManifestFile(file22);
        java.util.Iterator<java.io.File> fileItor24 = fileEntryIterator13.listFiles(file23);
        java.io.File file25 = fileEntryIterator13.current;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator26 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file27 = null;
        fileEntryIterator26.current = file27;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive29 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest30 = explodedArchive29.manifest;
        explodedArchive29.recursive = false;
        java.util.jar.Manifest manifest33 = explodedArchive29.manifest;
        java.io.File file34 = explodedArchive29.manifestFile;
        java.io.File file35 = null;
        java.io.File file36 = explodedArchive29.getManifestFile(file35);
        java.util.Iterator<java.io.File> fileItor37 = fileEntryIterator26.listFiles(file36);
        java.io.File file38 = fileEntryIterator26.current;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator39 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file40 = null;
        fileEntryIterator39.current = file40;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive42 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest43 = explodedArchive42.manifest;
        explodedArchive42.recursive = false;
        java.util.jar.Manifest manifest46 = explodedArchive42.manifest;
        java.io.File file47 = explodedArchive42.manifestFile;
        java.io.File file48 = null;
        java.io.File file49 = explodedArchive42.getManifestFile(file48);
        java.util.Iterator<java.io.File> fileItor50 = fileEntryIterator39.listFiles(file49);
        java.util.ArrayDeque<java.util.Iterator<java.io.File>> fileItorQueue51 = new java.util.ArrayDeque<java.util.Iterator<java.io.File>>();
        boolean boolean52 = fileItorQueue51.add(fileItor50);
        fileEntryIterator26.stack = fileItorQueue51;
        fileEntryIterator13.stack = fileItorQueue51;
        fileEntryIterator0.stack = fileItorQueue51;
        java.io.File file56 = fileEntryIterator0.current;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator57 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file58 = null;
        fileEntryIterator57.current = file58;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive60 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.lang.String str61 = explodedArchive60.toString();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive62 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file63 = explodedArchive62.root;
        java.io.File file64 = null;
        explodedArchive62.manifestFile = file64;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive66 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest67 = explodedArchive66.manifest;
        explodedArchive66.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive70 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest71 = explodedArchive70.manifest;
        explodedArchive70.recursive = false;
        java.util.jar.Manifest manifest74 = explodedArchive70.manifest;
        java.io.File file75 = explodedArchive70.manifestFile;
        java.io.File file76 = null;
        java.io.File file77 = explodedArchive70.getManifestFile(file76);
        explodedArchive66.manifestFile = file76;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive79 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest80 = explodedArchive79.manifest;
        explodedArchive79.recursive = false;
        java.util.jar.Manifest manifest83 = explodedArchive79.manifest;
        java.io.File file84 = explodedArchive79.manifestFile;
        java.io.File file85 = null;
        java.io.File file86 = explodedArchive79.getManifestFile(file85);
        explodedArchive66.manifestFile = file86;
        java.io.File file88 = explodedArchive62.getManifestFile(file86);
        java.io.File file89 = explodedArchive60.getManifestFile(file86);
        fileEntryIterator57.root = file86;
        java.io.File file91 = fileEntryIterator57.root;
        fileEntryIterator0.current = file91;
        // The following exception was thrown during execution in test generation
        try {
            fileEntryIterator0.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: remove");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file23.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file23.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file36.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file36.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file49.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file49.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str61 + "' != '" + "exploded archive" + "'", str61.equals("exploded archive"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file75);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file77);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file77.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file77.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest80);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest83);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file84);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file86);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file86.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file86.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file88);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file88.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file88.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file89);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file89.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file89.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file91);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file91.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file91.toString(), "META-INF/MANIFEST.MF");
    }

    @Test
    public void test642() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test642");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file1 = explodedArchive0.root;
        java.io.File file2 = null;
        explodedArchive0.manifestFile = file2;
        java.io.File file4 = explodedArchive0.root;
        java.lang.String str5 = explodedArchive0.toString();
        java.util.jar.Manifest manifest6 = null;
        explodedArchive0.manifest = manifest6;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator8 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        boolean boolean9 = fileEntryIterator8.recursive;
        java.io.File file10 = fileEntryIterator8.current;
        boolean boolean11 = fileEntryIterator8.hasNext();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator12 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator13 = entryComparator12.reversed();
        java.util.Comparator<java.io.File> fileComparator14 = entryComparator12.reversed();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive15 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest16 = explodedArchive15.manifest;
        explodedArchive15.recursive = false;
        java.util.jar.Manifest manifest19 = explodedArchive15.manifest;
        java.io.File file20 = explodedArchive15.manifestFile;
        java.io.File file21 = null;
        java.io.File file22 = explodedArchive15.getManifestFile(file21);
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive23 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest24 = explodedArchive23.manifest;
        explodedArchive23.recursive = false;
        java.io.File file27 = null;
        explodedArchive23.root = file27;
        java.io.File file29 = explodedArchive23.root;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive30 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest31 = explodedArchive30.manifest;
        explodedArchive30.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive34 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest35 = explodedArchive34.manifest;
        explodedArchive34.recursive = false;
        java.util.jar.Manifest manifest38 = explodedArchive34.manifest;
        java.io.File file39 = explodedArchive34.manifestFile;
        java.io.File file40 = null;
        java.io.File file41 = explodedArchive34.getManifestFile(file40);
        explodedArchive30.manifestFile = file40;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive43 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest44 = explodedArchive43.manifest;
        explodedArchive43.recursive = false;
        java.util.jar.Manifest manifest47 = explodedArchive43.manifest;
        java.io.File file48 = explodedArchive43.manifestFile;
        java.io.File file49 = null;
        java.io.File file50 = explodedArchive43.getManifestFile(file49);
        explodedArchive30.manifestFile = file50;
        java.io.File file52 = explodedArchive23.getManifestFile(file50);
        int int53 = entryComparator12.compare(file22, file50);
        java.util.Iterator<java.io.File> fileItor54 = fileEntryIterator8.listFiles(file22);
        java.io.File file55 = explodedArchive0.getManifestFile(file22);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Spliterator<org.springframework.boot.loader.archive.Archive.Entry> entrySpliterator56 = explodedArchive0.spliterator();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "exploded archive" + "'", str5.equals("exploded archive"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file22.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file22.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file41.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file41.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file50.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file50.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file52.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file52.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file55.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file55.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
    }

    @Test
    public void test643() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test643");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file1 = explodedArchive0.root;
        java.io.File file2 = null;
        explodedArchive0.manifestFile = file2;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive4 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest5 = explodedArchive4.manifest;
        explodedArchive4.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive8 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest9 = explodedArchive8.manifest;
        explodedArchive8.recursive = false;
        java.util.jar.Manifest manifest12 = explodedArchive8.manifest;
        java.io.File file13 = explodedArchive8.manifestFile;
        java.io.File file14 = null;
        java.io.File file15 = explodedArchive8.getManifestFile(file14);
        explodedArchive4.manifestFile = file14;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive17 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest18 = explodedArchive17.manifest;
        explodedArchive17.recursive = false;
        java.util.jar.Manifest manifest21 = explodedArchive17.manifest;
        java.io.File file22 = explodedArchive17.manifestFile;
        java.io.File file23 = null;
        java.io.File file24 = explodedArchive17.getManifestFile(file23);
        explodedArchive4.manifestFile = file24;
        java.io.File file26 = explodedArchive0.getManifestFile(file24);
        java.util.jar.Manifest manifest27 = null;
        explodedArchive0.manifest = manifest27;
        java.io.File file29 = explodedArchive0.root;
        explodedArchive0.recursive = false;
        boolean boolean32 = explodedArchive0.recursive;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file15.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file15.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file24.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file24.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file26.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file26.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
    }

    @Test
    public void test644() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test644");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file1 = null;
        fileEntryIterator0.current = file1;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive3 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.lang.String str4 = explodedArchive3.toString();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive5 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file6 = explodedArchive5.root;
        java.io.File file7 = null;
        explodedArchive5.manifestFile = file7;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive9 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest10 = explodedArchive9.manifest;
        explodedArchive9.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive13 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest14 = explodedArchive13.manifest;
        explodedArchive13.recursive = false;
        java.util.jar.Manifest manifest17 = explodedArchive13.manifest;
        java.io.File file18 = explodedArchive13.manifestFile;
        java.io.File file19 = null;
        java.io.File file20 = explodedArchive13.getManifestFile(file19);
        explodedArchive9.manifestFile = file19;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive22 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest23 = explodedArchive22.manifest;
        explodedArchive22.recursive = false;
        java.util.jar.Manifest manifest26 = explodedArchive22.manifest;
        java.io.File file27 = explodedArchive22.manifestFile;
        java.io.File file28 = null;
        java.io.File file29 = explodedArchive22.getManifestFile(file28);
        explodedArchive9.manifestFile = file29;
        java.io.File file31 = explodedArchive5.getManifestFile(file29);
        java.io.File file32 = explodedArchive3.getManifestFile(file29);
        fileEntryIterator0.root = file29;
        java.io.File file34 = fileEntryIterator0.poll();
        java.io.File file35 = fileEntryIterator0.poll();
        // The following exception was thrown during execution in test generation
        try {
            org.springframework.boot.loader.archive.Archive.Entry entry36 = fileEntryIterator0.next();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str4 + "' != '" + "exploded archive" + "'", str4.equals("exploded archive"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file20.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file20.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file29.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file29.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file31.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file31.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file32.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file32.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file35);
    }

    @Test
    public void test645() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test645");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file1 = null;
        fileEntryIterator0.current = file1;
        fileEntryIterator0.recursive = true;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator5 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator6 = entryComparator5.reversed();
        java.util.Comparator<java.io.File> fileComparator7 = entryComparator5.reversed();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive8 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest9 = explodedArchive8.manifest;
        explodedArchive8.recursive = false;
        java.util.jar.Manifest manifest12 = explodedArchive8.manifest;
        java.io.File file13 = explodedArchive8.manifestFile;
        java.io.File file14 = null;
        java.io.File file15 = explodedArchive8.getManifestFile(file14);
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive16 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest17 = explodedArchive16.manifest;
        explodedArchive16.recursive = false;
        java.io.File file20 = null;
        explodedArchive16.root = file20;
        java.io.File file22 = explodedArchive16.root;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive23 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest24 = explodedArchive23.manifest;
        explodedArchive23.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive27 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest28 = explodedArchive27.manifest;
        explodedArchive27.recursive = false;
        java.util.jar.Manifest manifest31 = explodedArchive27.manifest;
        java.io.File file32 = explodedArchive27.manifestFile;
        java.io.File file33 = null;
        java.io.File file34 = explodedArchive27.getManifestFile(file33);
        explodedArchive23.manifestFile = file33;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive36 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest37 = explodedArchive36.manifest;
        explodedArchive36.recursive = false;
        java.util.jar.Manifest manifest40 = explodedArchive36.manifest;
        java.io.File file41 = explodedArchive36.manifestFile;
        java.io.File file42 = null;
        java.io.File file43 = explodedArchive36.getManifestFile(file42);
        explodedArchive23.manifestFile = file43;
        java.io.File file45 = explodedArchive16.getManifestFile(file43);
        int int46 = entryComparator5.compare(file15, file43);
        java.util.Iterator<java.io.File> fileItor47 = fileEntryIterator0.listFiles(file15);
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator48 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        boolean boolean49 = fileEntryIterator48.hasNext();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator50 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator51 = entryComparator50.reversed();
        java.util.Comparator<java.io.File> fileComparator52 = fileComparator51.reversed();
        fileEntryIterator48.entryComparator = fileComparator52;
        java.util.Comparator<java.io.File> fileComparator54 = fileEntryIterator48.entryComparator;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator55 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator56 = entryComparator55.reversed();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator57 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator58 = entryComparator57.reversed();
        java.util.Comparator<java.io.File> fileComparator59 = entryComparator55.thenComparing(fileComparator58);
        java.util.Comparator<java.io.File> fileComparator60 = fileComparator54.thenComparing(fileComparator58);
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator61 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator62 = entryComparator61.reversed();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator63 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator64 = entryComparator63.reversed();
        java.util.Comparator<java.io.File> fileComparator65 = entryComparator61.thenComparing(fileComparator64);
        java.util.Comparator<java.io.File> fileComparator66 = fileComparator58.thenComparing(fileComparator64);
        fileEntryIterator0.entryComparator = fileComparator64;
        java.util.Comparator<java.io.File> fileComparator68 = fileEntryIterator0.entryComparator;
        java.io.File file69 = fileEntryIterator0.root;
        java.io.File file70 = fileEntryIterator0.root;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file15.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file15.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file34.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file34.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file43.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file43.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file45.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file45.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file70);
    }

    @Test
    public void test646() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test646");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntry fileEntry0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntry();
        java.lang.String str1 = fileEntry0.getName();
        java.io.File file2 = fileEntry0.getFile();
        java.lang.String str3 = fileEntry0.getName();
        java.lang.String str4 = fileEntry0.getName();
        java.io.File file5 = fileEntry0.file;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file5);
    }

    @Test
    public void test647() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test647");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntry fileEntry0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntry();
        java.lang.String str1 = fileEntry0.getName();
        java.io.File file2 = fileEntry0.getFile();
        java.io.File file3 = fileEntry0.file;
        fileEntry0.name = "exploded archive";
        java.lang.String str6 = fileEntry0.name;
        java.io.File file7 = fileEntry0.getFile();
        java.lang.String str8 = fileEntry0.name;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "exploded archive" + "'", str6.equals("exploded archive"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str8 + "' != '" + "exploded archive" + "'", str8.equals("exploded archive"));
    }

    @Test
    public void test648() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test648");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file1 = null;
        fileEntryIterator0.current = file1;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive3 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest4 = explodedArchive3.manifest;
        explodedArchive3.recursive = false;
        java.util.jar.Manifest manifest7 = explodedArchive3.manifest;
        java.io.File file8 = explodedArchive3.manifestFile;
        java.io.File file9 = null;
        java.io.File file10 = explodedArchive3.getManifestFile(file9);
        java.util.Iterator<java.io.File> fileItor11 = fileEntryIterator0.listFiles(file10);
        boolean boolean12 = fileEntryIterator0.hasNext();
        java.util.Comparator<java.io.File> fileComparator13 = fileEntryIterator0.entryComparator;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator14 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file15 = null;
        fileEntryIterator14.current = file15;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive17 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest18 = explodedArchive17.manifest;
        explodedArchive17.recursive = false;
        java.util.jar.Manifest manifest21 = explodedArchive17.manifest;
        java.io.File file22 = explodedArchive17.manifestFile;
        java.io.File file23 = null;
        java.io.File file24 = explodedArchive17.getManifestFile(file23);
        java.util.Iterator<java.io.File> fileItor25 = fileEntryIterator14.listFiles(file24);
        java.io.File file26 = fileEntryIterator14.current;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator27 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file28 = null;
        fileEntryIterator27.current = file28;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive30 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest31 = explodedArchive30.manifest;
        explodedArchive30.recursive = false;
        java.util.jar.Manifest manifest34 = explodedArchive30.manifest;
        java.io.File file35 = explodedArchive30.manifestFile;
        java.io.File file36 = null;
        java.io.File file37 = explodedArchive30.getManifestFile(file36);
        java.util.Iterator<java.io.File> fileItor38 = fileEntryIterator27.listFiles(file37);
        java.util.ArrayDeque<java.util.Iterator<java.io.File>> fileItorQueue39 = new java.util.ArrayDeque<java.util.Iterator<java.io.File>>();
        boolean boolean40 = fileItorQueue39.add(fileItor38);
        fileEntryIterator14.stack = fileItorQueue39;
        fileEntryIterator0.stack = fileItorQueue39;
        fileEntryIterator0.recursive = true;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file24.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file24.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file37.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file37.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
    }

    @Test
    public void test649() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test649");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file1 = null;
        fileEntryIterator0.current = file1;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive3 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest4 = explodedArchive3.manifest;
        explodedArchive3.recursive = false;
        java.util.jar.Manifest manifest7 = explodedArchive3.manifest;
        java.io.File file8 = explodedArchive3.manifestFile;
        java.io.File file9 = null;
        java.io.File file10 = explodedArchive3.getManifestFile(file9);
        java.util.Iterator<java.io.File> fileItor11 = fileEntryIterator0.listFiles(file10);
        java.util.Deque<java.util.Iterator<java.io.File>> fileItorQueue12 = fileEntryIterator0.stack;
        boolean boolean13 = fileEntryIterator0.recursive;
        java.io.File file14 = fileEntryIterator0.poll();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItorQueue12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file14);
    }

    @Test
    public void test650() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test650");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        boolean boolean1 = fileEntryIterator0.hasNext();
        java.io.File file2 = fileEntryIterator0.root;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator3 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file4 = null;
        fileEntryIterator3.current = file4;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive6 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest7 = explodedArchive6.manifest;
        explodedArchive6.recursive = false;
        java.util.jar.Manifest manifest10 = explodedArchive6.manifest;
        java.io.File file11 = explodedArchive6.manifestFile;
        java.io.File file12 = null;
        java.io.File file13 = explodedArchive6.getManifestFile(file12);
        java.util.Iterator<java.io.File> fileItor14 = fileEntryIterator3.listFiles(file13);
        java.io.File file15 = fileEntryIterator3.current;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator16 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file17 = null;
        fileEntryIterator16.current = file17;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive19 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest20 = explodedArchive19.manifest;
        explodedArchive19.recursive = false;
        java.util.jar.Manifest manifest23 = explodedArchive19.manifest;
        java.io.File file24 = explodedArchive19.manifestFile;
        java.io.File file25 = null;
        java.io.File file26 = explodedArchive19.getManifestFile(file25);
        java.util.Iterator<java.io.File> fileItor27 = fileEntryIterator16.listFiles(file26);
        java.util.ArrayDeque<java.util.Iterator<java.io.File>> fileItorQueue28 = new java.util.ArrayDeque<java.util.Iterator<java.io.File>>();
        boolean boolean29 = fileItorQueue28.add(fileItor27);
        fileEntryIterator3.stack = fileItorQueue28;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive31 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest32 = explodedArchive31.manifest;
        explodedArchive31.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive35 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest36 = explodedArchive35.manifest;
        explodedArchive35.recursive = false;
        java.util.jar.Manifest manifest39 = explodedArchive35.manifest;
        java.io.File file40 = explodedArchive35.manifestFile;
        java.io.File file41 = null;
        java.io.File file42 = explodedArchive35.getManifestFile(file41);
        explodedArchive31.manifestFile = file41;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive44 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest45 = explodedArchive44.manifest;
        explodedArchive44.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive48 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest49 = explodedArchive48.manifest;
        explodedArchive48.recursive = false;
        java.util.jar.Manifest manifest52 = explodedArchive48.manifest;
        java.io.File file53 = explodedArchive48.manifestFile;
        java.io.File file54 = null;
        java.io.File file55 = explodedArchive48.getManifestFile(file54);
        explodedArchive44.manifestFile = file54;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive57 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest58 = explodedArchive57.manifest;
        explodedArchive57.recursive = false;
        java.util.jar.Manifest manifest61 = explodedArchive57.manifest;
        java.io.File file62 = explodedArchive57.manifestFile;
        java.io.File file63 = null;
        java.io.File file64 = explodedArchive57.getManifestFile(file63);
        explodedArchive44.manifestFile = file64;
        explodedArchive31.root = file64;
        java.util.Iterator<java.io.File> fileItor67 = fileEntryIterator3.listFiles(file64);
        java.util.Comparator<java.io.File> fileComparator68 = fileEntryIterator3.entryComparator;
        fileEntryIterator0.entryComparator = fileComparator68;
        java.io.File file70 = fileEntryIterator0.root;
        java.io.File file71 = fileEntryIterator0.poll();
        java.io.File file72 = fileEntryIterator0.root;
        boolean boolean73 = fileEntryIterator0.hasNext();
        java.io.File file74 = fileEntryIterator0.root;
        // The following exception was thrown during execution in test generation
        try {
            fileEntryIterator0.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: remove");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file13.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file13.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file26.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file26.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file42.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file42.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file55.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file55.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file64.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file64.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file74);
    }

    @Test
    public void test651() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test651");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest1 = explodedArchive0.manifest;
        explodedArchive0.recursive = false;
        java.io.File file4 = null;
        explodedArchive0.root = file4;
        java.io.File file6 = explodedArchive0.root;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive7 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest8 = explodedArchive7.manifest;
        explodedArchive7.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive11 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest12 = explodedArchive11.manifest;
        explodedArchive11.recursive = false;
        java.util.jar.Manifest manifest15 = explodedArchive11.manifest;
        java.io.File file16 = explodedArchive11.manifestFile;
        java.io.File file17 = null;
        java.io.File file18 = explodedArchive11.getManifestFile(file17);
        explodedArchive7.manifestFile = file17;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive20 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest21 = explodedArchive20.manifest;
        explodedArchive20.recursive = false;
        java.util.jar.Manifest manifest24 = explodedArchive20.manifest;
        java.io.File file25 = explodedArchive20.manifestFile;
        java.io.File file26 = null;
        java.io.File file27 = explodedArchive20.getManifestFile(file26);
        explodedArchive7.manifestFile = file27;
        java.io.File file29 = explodedArchive0.getManifestFile(file27);
        java.io.File file30 = explodedArchive0.root;
        java.util.jar.Manifest manifest31 = null;
        explodedArchive0.manifest = manifest31;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator<org.springframework.boot.loader.archive.Archive.Entry> entryItor33 = explodedArchive0.iterator();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file18.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file18.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file27.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file27.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file29.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file29.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file30);
    }

    @Test
    public void test652() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test652");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest1 = explodedArchive0.manifest;
        explodedArchive0.recursive = false;
        java.io.File file4 = null;
        explodedArchive0.root = file4;
        java.io.File file6 = explodedArchive0.root;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive7 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest8 = explodedArchive7.manifest;
        explodedArchive7.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive11 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest12 = explodedArchive11.manifest;
        explodedArchive11.recursive = false;
        java.util.jar.Manifest manifest15 = explodedArchive11.manifest;
        java.io.File file16 = explodedArchive11.manifestFile;
        java.io.File file17 = null;
        java.io.File file18 = explodedArchive11.getManifestFile(file17);
        explodedArchive7.manifestFile = file17;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive20 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest21 = explodedArchive20.manifest;
        explodedArchive20.recursive = false;
        java.util.jar.Manifest manifest24 = explodedArchive20.manifest;
        java.io.File file25 = explodedArchive20.manifestFile;
        java.io.File file26 = null;
        java.io.File file27 = explodedArchive20.getManifestFile(file26);
        explodedArchive7.manifestFile = file27;
        java.io.File file29 = explodedArchive0.getManifestFile(file27);
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntry fileEntry30 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntry();
        java.lang.String str31 = fileEntry30.name;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator32 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file33 = null;
        fileEntryIterator32.current = file33;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive35 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.lang.String str36 = explodedArchive35.toString();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive37 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file38 = explodedArchive37.root;
        java.io.File file39 = null;
        explodedArchive37.manifestFile = file39;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive41 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest42 = explodedArchive41.manifest;
        explodedArchive41.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive45 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest46 = explodedArchive45.manifest;
        explodedArchive45.recursive = false;
        java.util.jar.Manifest manifest49 = explodedArchive45.manifest;
        java.io.File file50 = explodedArchive45.manifestFile;
        java.io.File file51 = null;
        java.io.File file52 = explodedArchive45.getManifestFile(file51);
        explodedArchive41.manifestFile = file51;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive54 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest55 = explodedArchive54.manifest;
        explodedArchive54.recursive = false;
        java.util.jar.Manifest manifest58 = explodedArchive54.manifest;
        java.io.File file59 = explodedArchive54.manifestFile;
        java.io.File file60 = null;
        java.io.File file61 = explodedArchive54.getManifestFile(file60);
        explodedArchive41.manifestFile = file61;
        java.io.File file63 = explodedArchive37.getManifestFile(file61);
        java.io.File file64 = explodedArchive35.getManifestFile(file61);
        fileEntryIterator32.root = file61;
        fileEntry30.file = file61;
        java.io.File file67 = fileEntry30.file;
        explodedArchive0.root = file67;
        java.io.File file69 = explodedArchive0.manifestFile;
        java.util.Spliterator<org.springframework.boot.loader.archive.Archive.Entry> entrySpliterator70 = explodedArchive0.spliterator();
        java.lang.String str71 = explodedArchive0.toString();
        java.util.Iterator<org.springframework.boot.loader.archive.Archive.Entry> entryItor72 = explodedArchive0.iterator();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file18.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file18.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file27.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file27.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file29.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file29.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str36 + "' != '" + "exploded archive" + "'", str36.equals("exploded archive"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file52.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file52.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file61.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file61.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file63.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file63.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file64.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file64.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file67.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file67.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(entrySpliterator70);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertTrue("'" + str71 + "' != '" + "file:/server/study-execution/new-nimrod/nimrod-hunoroutput-test-dest/spring-boot/af20dc6cc45c032573413c401f9f73aa75371744/randoop_1/META-INF/MANIFEST.MF" + "'", str71.equals("file:/server/study-execution/new-nimrod/nimrod-hunoroutput-test-dest/spring-boot/af20dc6cc45c032573413c401f9f73aa75371744/randoop_1/META-INF/MANIFEST.MF"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(entryItor72);
    }

    @Test
    public void test653() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test653");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        boolean boolean1 = explodedArchive0.recursive;
        java.lang.String str2 = explodedArchive0.toString();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive3 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest4 = explodedArchive3.manifest;
        explodedArchive3.recursive = false;
        java.util.jar.Manifest manifest7 = explodedArchive3.manifest;
        java.io.File file8 = explodedArchive3.manifestFile;
        java.io.File file9 = null;
        java.io.File file10 = explodedArchive3.getManifestFile(file9);
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator11 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file12 = null;
        fileEntryIterator11.current = file12;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive14 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.lang.String str15 = explodedArchive14.toString();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive16 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file17 = explodedArchive16.root;
        java.io.File file18 = null;
        explodedArchive16.manifestFile = file18;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive20 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest21 = explodedArchive20.manifest;
        explodedArchive20.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive24 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest25 = explodedArchive24.manifest;
        explodedArchive24.recursive = false;
        java.util.jar.Manifest manifest28 = explodedArchive24.manifest;
        java.io.File file29 = explodedArchive24.manifestFile;
        java.io.File file30 = null;
        java.io.File file31 = explodedArchive24.getManifestFile(file30);
        explodedArchive20.manifestFile = file30;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive33 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest34 = explodedArchive33.manifest;
        explodedArchive33.recursive = false;
        java.util.jar.Manifest manifest37 = explodedArchive33.manifest;
        java.io.File file38 = explodedArchive33.manifestFile;
        java.io.File file39 = null;
        java.io.File file40 = explodedArchive33.getManifestFile(file39);
        explodedArchive20.manifestFile = file40;
        java.io.File file42 = explodedArchive16.getManifestFile(file40);
        java.io.File file43 = explodedArchive14.getManifestFile(file40);
        fileEntryIterator11.root = file40;
        explodedArchive3.root = file40;
        java.io.File file46 = explodedArchive0.getManifestFile(file40);
        java.util.jar.Manifest manifest47 = explodedArchive0.manifest;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str2 + "' != '" + "exploded archive" + "'", str2.equals("exploded archive"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str15 + "' != '" + "exploded archive" + "'", str15.equals("exploded archive"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file31.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file31.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file40.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file40.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file42.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file42.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file43.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file43.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file46.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file46.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest47);
    }

    @Test
    public void test654() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test654");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        boolean boolean1 = fileEntryIterator0.recursive;
        java.io.File file2 = fileEntryIterator0.current;
        boolean boolean3 = fileEntryIterator0.hasNext();
        boolean boolean4 = fileEntryIterator0.recursive;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive5 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file6 = explodedArchive5.root;
        java.io.File file7 = explodedArchive5.manifestFile;
        java.util.jar.Manifest manifest8 = null;
        explodedArchive5.manifest = manifest8;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive10 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file11 = explodedArchive10.root;
        java.io.File file12 = null;
        explodedArchive10.manifestFile = file12;
        java.io.File file14 = explodedArchive10.root;
        java.lang.String str15 = explodedArchive10.toString();
        java.util.jar.Manifest manifest16 = null;
        explodedArchive10.manifest = manifest16;
        java.io.File file18 = explodedArchive10.root;
        boolean boolean19 = explodedArchive10.recursive;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive20 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest21 = explodedArchive20.manifest;
        explodedArchive20.recursive = false;
        java.io.File file24 = null;
        explodedArchive20.root = file24;
        java.io.File file26 = explodedArchive20.manifestFile;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive27 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file28 = explodedArchive27.root;
        java.io.File file29 = null;
        explodedArchive27.manifestFile = file29;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive31 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest32 = explodedArchive31.manifest;
        explodedArchive31.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive35 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest36 = explodedArchive35.manifest;
        explodedArchive35.recursive = false;
        java.util.jar.Manifest manifest39 = explodedArchive35.manifest;
        java.io.File file40 = explodedArchive35.manifestFile;
        java.io.File file41 = null;
        java.io.File file42 = explodedArchive35.getManifestFile(file41);
        explodedArchive31.manifestFile = file41;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive44 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest45 = explodedArchive44.manifest;
        explodedArchive44.recursive = false;
        java.util.jar.Manifest manifest48 = explodedArchive44.manifest;
        java.io.File file49 = explodedArchive44.manifestFile;
        java.io.File file50 = null;
        java.io.File file51 = explodedArchive44.getManifestFile(file50);
        explodedArchive31.manifestFile = file51;
        java.io.File file53 = explodedArchive27.getManifestFile(file51);
        java.io.File file54 = explodedArchive27.root;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator55 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        boolean boolean56 = fileEntryIterator55.hasNext();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator57 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator58 = entryComparator57.reversed();
        java.util.Comparator<java.io.File> fileComparator59 = fileComparator58.reversed();
        fileEntryIterator55.entryComparator = fileComparator59;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive61 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file62 = explodedArchive61.root;
        java.io.File file63 = null;
        explodedArchive61.manifestFile = file63;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive65 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest66 = explodedArchive65.manifest;
        explodedArchive65.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive69 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest70 = explodedArchive69.manifest;
        explodedArchive69.recursive = false;
        java.util.jar.Manifest manifest73 = explodedArchive69.manifest;
        java.io.File file74 = explodedArchive69.manifestFile;
        java.io.File file75 = null;
        java.io.File file76 = explodedArchive69.getManifestFile(file75);
        explodedArchive65.manifestFile = file75;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive78 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest79 = explodedArchive78.manifest;
        explodedArchive78.recursive = false;
        java.util.jar.Manifest manifest82 = explodedArchive78.manifest;
        java.io.File file83 = explodedArchive78.manifestFile;
        java.io.File file84 = null;
        java.io.File file85 = explodedArchive78.getManifestFile(file84);
        explodedArchive65.manifestFile = file85;
        java.io.File file87 = explodedArchive61.getManifestFile(file85);
        java.util.Iterator<java.io.File> fileItor88 = fileEntryIterator55.listFiles(file87);
        explodedArchive27.manifestFile = file87;
        java.io.File file90 = explodedArchive27.manifestFile;
        java.io.File file91 = explodedArchive20.getManifestFile(file90);
        java.io.File file92 = explodedArchive10.getManifestFile(file91);
        explodedArchive5.manifestFile = file92;
        fileEntryIterator0.root = file92;
        boolean boolean95 = fileEntryIterator0.recursive;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str15 + "' != '" + "exploded archive" + "'", str15.equals("exploded archive"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file42.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file42.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file51.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file51.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file53.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file53.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest73);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file76);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file76.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file76.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest79);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest82);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file83);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file85);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file85.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file85.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file87);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file87.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file87.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor88);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file90);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file90.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file90.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file91);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file91.getParent(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file91.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file92);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file92.getParent(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF/META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file92.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF/META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
    }

    @Test
    public void test655() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test655");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file1 = explodedArchive0.root;
        java.io.File file2 = null;
        explodedArchive0.manifestFile = file2;
        java.io.File file4 = explodedArchive0.root;
        java.lang.String str5 = explodedArchive0.toString();
        java.util.jar.Manifest manifest6 = null;
        explodedArchive0.manifest = manifest6;
        java.io.File file8 = explodedArchive0.root;
        java.util.jar.Manifest manifest9 = null;
        explodedArchive0.manifest = manifest9;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator11 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        boolean boolean12 = fileEntryIterator11.hasNext();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator13 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator14 = entryComparator13.reversed();
        java.util.Comparator<java.io.File> fileComparator15 = fileComparator14.reversed();
        fileEntryIterator11.entryComparator = fileComparator15;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive17 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file18 = explodedArchive17.root;
        java.io.File file19 = null;
        explodedArchive17.manifestFile = file19;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive21 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest22 = explodedArchive21.manifest;
        explodedArchive21.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive25 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest26 = explodedArchive25.manifest;
        explodedArchive25.recursive = false;
        java.util.jar.Manifest manifest29 = explodedArchive25.manifest;
        java.io.File file30 = explodedArchive25.manifestFile;
        java.io.File file31 = null;
        java.io.File file32 = explodedArchive25.getManifestFile(file31);
        explodedArchive21.manifestFile = file31;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive34 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest35 = explodedArchive34.manifest;
        explodedArchive34.recursive = false;
        java.util.jar.Manifest manifest38 = explodedArchive34.manifest;
        java.io.File file39 = explodedArchive34.manifestFile;
        java.io.File file40 = null;
        java.io.File file41 = explodedArchive34.getManifestFile(file40);
        explodedArchive21.manifestFile = file41;
        java.io.File file43 = explodedArchive17.getManifestFile(file41);
        java.util.Iterator<java.io.File> fileItor44 = fileEntryIterator11.listFiles(file43);
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntry fileEntry45 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntry();
        java.lang.String str46 = fileEntry45.name;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator47 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file48 = null;
        fileEntryIterator47.current = file48;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive50 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.lang.String str51 = explodedArchive50.toString();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive52 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file53 = explodedArchive52.root;
        java.io.File file54 = null;
        explodedArchive52.manifestFile = file54;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive56 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest57 = explodedArchive56.manifest;
        explodedArchive56.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive60 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest61 = explodedArchive60.manifest;
        explodedArchive60.recursive = false;
        java.util.jar.Manifest manifest64 = explodedArchive60.manifest;
        java.io.File file65 = explodedArchive60.manifestFile;
        java.io.File file66 = null;
        java.io.File file67 = explodedArchive60.getManifestFile(file66);
        explodedArchive56.manifestFile = file66;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive69 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest70 = explodedArchive69.manifest;
        explodedArchive69.recursive = false;
        java.util.jar.Manifest manifest73 = explodedArchive69.manifest;
        java.io.File file74 = explodedArchive69.manifestFile;
        java.io.File file75 = null;
        java.io.File file76 = explodedArchive69.getManifestFile(file75);
        explodedArchive56.manifestFile = file76;
        java.io.File file78 = explodedArchive52.getManifestFile(file76);
        java.io.File file79 = explodedArchive50.getManifestFile(file76);
        fileEntryIterator47.root = file76;
        fileEntry45.file = file76;
        java.io.File file82 = fileEntry45.getFile();
        java.io.File file83 = fileEntry45.getFile();
        java.util.Iterator<java.io.File> fileItor84 = fileEntryIterator11.listFiles(file83);
        java.io.File file85 = explodedArchive0.getManifestFile(file83);
        // The following exception was thrown during execution in test generation
        try {
            org.springframework.boot.loader.archive.ExplodedArchive explodedArchive86 = new org.springframework.boot.loader.archive.ExplodedArchive(file83);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid source folder META-INF/MANIFEST.MF");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "exploded archive" + "'", str5.equals("exploded archive"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file32.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file32.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file41.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file41.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file43.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file43.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str51 + "' != '" + "exploded archive" + "'", str51.equals("exploded archive"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file67.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file67.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest73);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file76);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file76.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file76.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file78);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file78.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file78.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file79);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file79.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file79.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file82);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file82.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file82.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file83);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file83.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file83.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor84);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file85);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file85.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file85.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
    }

    @Test
    public void test656() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test656");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntry fileEntry0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntry();
        java.lang.String str1 = fileEntry0.getName();
        java.lang.String str2 = fileEntry0.getName();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator3 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator4 = entryComparator3.reversed();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive5 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file6 = explodedArchive5.root;
        java.io.File file7 = null;
        explodedArchive5.manifestFile = file7;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive9 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest10 = explodedArchive9.manifest;
        explodedArchive9.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive13 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest14 = explodedArchive13.manifest;
        explodedArchive13.recursive = false;
        java.util.jar.Manifest manifest17 = explodedArchive13.manifest;
        java.io.File file18 = explodedArchive13.manifestFile;
        java.io.File file19 = null;
        java.io.File file20 = explodedArchive13.getManifestFile(file19);
        explodedArchive9.manifestFile = file19;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive22 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest23 = explodedArchive22.manifest;
        explodedArchive22.recursive = false;
        java.util.jar.Manifest manifest26 = explodedArchive22.manifest;
        java.io.File file27 = explodedArchive22.manifestFile;
        java.io.File file28 = null;
        java.io.File file29 = explodedArchive22.getManifestFile(file28);
        explodedArchive9.manifestFile = file29;
        java.io.File file31 = explodedArchive5.getManifestFile(file29);
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive32 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest33 = explodedArchive32.manifest;
        explodedArchive32.recursive = false;
        java.io.File file36 = null;
        explodedArchive32.root = file36;
        java.io.File file38 = explodedArchive32.root;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive39 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest40 = explodedArchive39.manifest;
        explodedArchive39.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive43 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest44 = explodedArchive43.manifest;
        explodedArchive43.recursive = false;
        java.util.jar.Manifest manifest47 = explodedArchive43.manifest;
        java.io.File file48 = explodedArchive43.manifestFile;
        java.io.File file49 = null;
        java.io.File file50 = explodedArchive43.getManifestFile(file49);
        explodedArchive39.manifestFile = file49;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive52 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest53 = explodedArchive52.manifest;
        explodedArchive52.recursive = false;
        java.util.jar.Manifest manifest56 = explodedArchive52.manifest;
        java.io.File file57 = explodedArchive52.manifestFile;
        java.io.File file58 = null;
        java.io.File file59 = explodedArchive52.getManifestFile(file58);
        explodedArchive39.manifestFile = file59;
        java.io.File file61 = explodedArchive32.getManifestFile(file59);
        int int62 = entryComparator3.compare(file31, file59);
        fileEntry0.file = file59;
        fileEntry0.name = "exploded archive";
        java.lang.String str66 = fileEntry0.getName();
        java.lang.String str67 = fileEntry0.name;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file20.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file20.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file29.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file29.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file31.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file31.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file50.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file50.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file59.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file59.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file61.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file61.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 21 + "'", int62 == 21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str66 + "' != '" + "exploded archive" + "'", str66.equals("exploded archive"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str67 + "' != '" + "exploded archive" + "'", str67.equals("exploded archive"));
    }

    @Test
    public void test657() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test657");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        boolean boolean1 = fileEntryIterator0.recursive;
        java.io.File file2 = fileEntryIterator0.current;
        boolean boolean3 = fileEntryIterator0.hasNext();
        boolean boolean4 = fileEntryIterator0.recursive;
        fileEntryIterator0.recursive = false;
        boolean boolean7 = fileEntryIterator0.hasNext();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive8 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file9 = explodedArchive8.root;
        java.io.File file10 = explodedArchive8.manifestFile;
        java.util.jar.Manifest manifest11 = null;
        explodedArchive8.manifest = manifest11;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive13 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file14 = explodedArchive13.root;
        java.io.File file15 = null;
        explodedArchive13.manifestFile = file15;
        java.io.File file17 = explodedArchive13.root;
        java.lang.String str18 = explodedArchive13.toString();
        java.util.jar.Manifest manifest19 = null;
        explodedArchive13.manifest = manifest19;
        java.io.File file21 = explodedArchive13.root;
        boolean boolean22 = explodedArchive13.recursive;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive23 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest24 = explodedArchive23.manifest;
        explodedArchive23.recursive = false;
        java.io.File file27 = null;
        explodedArchive23.root = file27;
        java.io.File file29 = explodedArchive23.manifestFile;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive30 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file31 = explodedArchive30.root;
        java.io.File file32 = null;
        explodedArchive30.manifestFile = file32;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive34 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest35 = explodedArchive34.manifest;
        explodedArchive34.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive38 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest39 = explodedArchive38.manifest;
        explodedArchive38.recursive = false;
        java.util.jar.Manifest manifest42 = explodedArchive38.manifest;
        java.io.File file43 = explodedArchive38.manifestFile;
        java.io.File file44 = null;
        java.io.File file45 = explodedArchive38.getManifestFile(file44);
        explodedArchive34.manifestFile = file44;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive47 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest48 = explodedArchive47.manifest;
        explodedArchive47.recursive = false;
        java.util.jar.Manifest manifest51 = explodedArchive47.manifest;
        java.io.File file52 = explodedArchive47.manifestFile;
        java.io.File file53 = null;
        java.io.File file54 = explodedArchive47.getManifestFile(file53);
        explodedArchive34.manifestFile = file54;
        java.io.File file56 = explodedArchive30.getManifestFile(file54);
        java.io.File file57 = explodedArchive30.root;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator58 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        boolean boolean59 = fileEntryIterator58.hasNext();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator60 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator61 = entryComparator60.reversed();
        java.util.Comparator<java.io.File> fileComparator62 = fileComparator61.reversed();
        fileEntryIterator58.entryComparator = fileComparator62;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive64 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file65 = explodedArchive64.root;
        java.io.File file66 = null;
        explodedArchive64.manifestFile = file66;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive68 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest69 = explodedArchive68.manifest;
        explodedArchive68.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive72 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest73 = explodedArchive72.manifest;
        explodedArchive72.recursive = false;
        java.util.jar.Manifest manifest76 = explodedArchive72.manifest;
        java.io.File file77 = explodedArchive72.manifestFile;
        java.io.File file78 = null;
        java.io.File file79 = explodedArchive72.getManifestFile(file78);
        explodedArchive68.manifestFile = file78;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive81 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest82 = explodedArchive81.manifest;
        explodedArchive81.recursive = false;
        java.util.jar.Manifest manifest85 = explodedArchive81.manifest;
        java.io.File file86 = explodedArchive81.manifestFile;
        java.io.File file87 = null;
        java.io.File file88 = explodedArchive81.getManifestFile(file87);
        explodedArchive68.manifestFile = file88;
        java.io.File file90 = explodedArchive64.getManifestFile(file88);
        java.util.Iterator<java.io.File> fileItor91 = fileEntryIterator58.listFiles(file90);
        explodedArchive30.manifestFile = file90;
        java.io.File file93 = explodedArchive30.manifestFile;
        java.io.File file94 = explodedArchive23.getManifestFile(file93);
        java.io.File file95 = explodedArchive13.getManifestFile(file94);
        explodedArchive8.manifestFile = file95;
        fileEntryIterator0.current = file95;
        java.io.File file98 = fileEntryIterator0.root;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str18 + "' != '" + "exploded archive" + "'", str18.equals("exploded archive"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file45.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file45.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file54.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file54.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file56.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file56.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest73);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest76);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file77);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file79);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file79.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file79.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest82);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest85);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file86);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file88);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file88.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file88.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file90);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file90.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file90.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor91);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file93);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file93.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file93.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file94);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file94.getParent(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file94.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file95);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file95.getParent(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF/META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file95.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF/META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file98);
    }

    @Test
    public void test658() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test658");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file1 = explodedArchive0.root;
        java.io.File file2 = null;
        explodedArchive0.manifestFile = file2;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive4 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest5 = explodedArchive4.manifest;
        explodedArchive4.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive8 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest9 = explodedArchive8.manifest;
        explodedArchive8.recursive = false;
        java.util.jar.Manifest manifest12 = explodedArchive8.manifest;
        java.io.File file13 = explodedArchive8.manifestFile;
        java.io.File file14 = null;
        java.io.File file15 = explodedArchive8.getManifestFile(file14);
        explodedArchive4.manifestFile = file14;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive17 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest18 = explodedArchive17.manifest;
        explodedArchive17.recursive = false;
        java.util.jar.Manifest manifest21 = explodedArchive17.manifest;
        java.io.File file22 = explodedArchive17.manifestFile;
        java.io.File file23 = null;
        java.io.File file24 = explodedArchive17.getManifestFile(file23);
        explodedArchive4.manifestFile = file24;
        java.io.File file26 = explodedArchive0.getManifestFile(file24);
        boolean boolean27 = explodedArchive0.recursive;
        java.io.File file28 = explodedArchive0.root;
        java.lang.String str29 = explodedArchive0.toString();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file15.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file15.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file24.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file24.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file26.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file26.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str29 + "' != '" + "exploded archive" + "'", str29.equals("exploded archive"));
    }

    @Test
    public void test659() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test659");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file1 = null;
        fileEntryIterator0.current = file1;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive3 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest4 = explodedArchive3.manifest;
        explodedArchive3.recursive = false;
        java.util.jar.Manifest manifest7 = explodedArchive3.manifest;
        java.io.File file8 = explodedArchive3.manifestFile;
        java.io.File file9 = null;
        java.io.File file10 = explodedArchive3.getManifestFile(file9);
        java.util.Iterator<java.io.File> fileItor11 = fileEntryIterator0.listFiles(file10);
        java.io.File file12 = fileEntryIterator0.root;
        java.io.File file13 = fileEntryIterator0.root;
        java.util.Deque<java.util.Iterator<java.io.File>> fileItorQueue14 = fileEntryIterator0.stack;
        java.io.File file15 = fileEntryIterator0.current;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive16 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.lang.String str17 = explodedArchive16.toString();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive18 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file19 = explodedArchive18.root;
        java.io.File file20 = null;
        explodedArchive18.manifestFile = file20;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive22 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest23 = explodedArchive22.manifest;
        explodedArchive22.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive26 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest27 = explodedArchive26.manifest;
        explodedArchive26.recursive = false;
        java.util.jar.Manifest manifest30 = explodedArchive26.manifest;
        java.io.File file31 = explodedArchive26.manifestFile;
        java.io.File file32 = null;
        java.io.File file33 = explodedArchive26.getManifestFile(file32);
        explodedArchive22.manifestFile = file32;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive35 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest36 = explodedArchive35.manifest;
        explodedArchive35.recursive = false;
        java.util.jar.Manifest manifest39 = explodedArchive35.manifest;
        java.io.File file40 = explodedArchive35.manifestFile;
        java.io.File file41 = null;
        java.io.File file42 = explodedArchive35.getManifestFile(file41);
        explodedArchive22.manifestFile = file42;
        java.io.File file44 = explodedArchive18.getManifestFile(file42);
        java.io.File file45 = explodedArchive16.getManifestFile(file42);
        fileEntryIterator0.root = file45;
        // The following exception was thrown during execution in test generation
        try {
            org.springframework.boot.loader.archive.ExplodedArchive explodedArchive48 = new org.springframework.boot.loader.archive.ExplodedArchive(file45, false);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid source folder META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItorQueue14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str17 + "' != '" + "exploded archive" + "'", str17.equals("exploded archive"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file33.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file33.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file42.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file42.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file44.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file44.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file45.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file45.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
    }

    @Test
    public void test660() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test660");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest1 = explodedArchive0.manifest;
        java.util.jar.Manifest manifest2 = null;
        explodedArchive0.manifest = manifest2;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator4 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        boolean boolean5 = fileEntryIterator4.hasNext();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator6 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator7 = entryComparator6.reversed();
        java.util.Comparator<java.io.File> fileComparator8 = fileComparator7.reversed();
        fileEntryIterator4.entryComparator = fileComparator8;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive10 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file11 = explodedArchive10.root;
        java.io.File file12 = null;
        explodedArchive10.manifestFile = file12;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive14 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest15 = explodedArchive14.manifest;
        explodedArchive14.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive18 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest19 = explodedArchive18.manifest;
        explodedArchive18.recursive = false;
        java.util.jar.Manifest manifest22 = explodedArchive18.manifest;
        java.io.File file23 = explodedArchive18.manifestFile;
        java.io.File file24 = null;
        java.io.File file25 = explodedArchive18.getManifestFile(file24);
        explodedArchive14.manifestFile = file24;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive27 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest28 = explodedArchive27.manifest;
        explodedArchive27.recursive = false;
        java.util.jar.Manifest manifest31 = explodedArchive27.manifest;
        java.io.File file32 = explodedArchive27.manifestFile;
        java.io.File file33 = null;
        java.io.File file34 = explodedArchive27.getManifestFile(file33);
        explodedArchive14.manifestFile = file34;
        java.io.File file36 = explodedArchive10.getManifestFile(file34);
        java.util.Iterator<java.io.File> fileItor37 = fileEntryIterator4.listFiles(file36);
        java.io.File file38 = explodedArchive0.getManifestFile(file36);
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntry fileEntry39 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntry();
        java.io.File file40 = fileEntry39.file;
        java.lang.String str41 = fileEntry39.name;
        java.io.File file42 = fileEntry39.file;
        java.io.File file43 = fileEntry39.file;
        java.lang.String str44 = fileEntry39.name;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive45 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.lang.String str46 = explodedArchive45.toString();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive47 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file48 = explodedArchive47.root;
        java.io.File file49 = null;
        explodedArchive47.manifestFile = file49;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive51 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest52 = explodedArchive51.manifest;
        explodedArchive51.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive55 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest56 = explodedArchive55.manifest;
        explodedArchive55.recursive = false;
        java.util.jar.Manifest manifest59 = explodedArchive55.manifest;
        java.io.File file60 = explodedArchive55.manifestFile;
        java.io.File file61 = null;
        java.io.File file62 = explodedArchive55.getManifestFile(file61);
        explodedArchive51.manifestFile = file61;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive64 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest65 = explodedArchive64.manifest;
        explodedArchive64.recursive = false;
        java.util.jar.Manifest manifest68 = explodedArchive64.manifest;
        java.io.File file69 = explodedArchive64.manifestFile;
        java.io.File file70 = null;
        java.io.File file71 = explodedArchive64.getManifestFile(file70);
        explodedArchive51.manifestFile = file71;
        java.io.File file73 = explodedArchive47.getManifestFile(file71);
        java.io.File file74 = explodedArchive45.getManifestFile(file71);
        fileEntry39.file = file71;
        explodedArchive0.manifestFile = file71;
        // The following exception was thrown during execution in test generation
        try {
            java.net.URL uRL77 = explodedArchive0.getUrl();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file25.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file25.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file34.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file34.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file36.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file36.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file38.getParent(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file38.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str46 + "' != '" + "exploded archive" + "'", str46.equals("exploded archive"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file62.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file62.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file71.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file71.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file73);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file73.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file73.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file74.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file74.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
    }

    @Test
    public void test661() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test661");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest1 = explodedArchive0.manifest;
        explodedArchive0.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive4 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest5 = explodedArchive4.manifest;
        explodedArchive4.recursive = false;
        java.util.jar.Manifest manifest8 = explodedArchive4.manifest;
        java.io.File file9 = explodedArchive4.manifestFile;
        java.io.File file10 = null;
        java.io.File file11 = explodedArchive4.getManifestFile(file10);
        explodedArchive0.manifestFile = file10;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive13 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest14 = explodedArchive13.manifest;
        explodedArchive13.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive17 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest18 = explodedArchive17.manifest;
        explodedArchive17.recursive = false;
        java.util.jar.Manifest manifest21 = explodedArchive17.manifest;
        java.io.File file22 = explodedArchive17.manifestFile;
        java.io.File file23 = null;
        java.io.File file24 = explodedArchive17.getManifestFile(file23);
        explodedArchive13.manifestFile = file23;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive26 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest27 = explodedArchive26.manifest;
        explodedArchive26.recursive = false;
        java.util.jar.Manifest manifest30 = explodedArchive26.manifest;
        java.io.File file31 = explodedArchive26.manifestFile;
        java.io.File file32 = null;
        java.io.File file33 = explodedArchive26.getManifestFile(file32);
        explodedArchive13.manifestFile = file33;
        explodedArchive0.root = file33;
        java.net.URL uRL36 = explodedArchive0.getUrl();
        org.springframework.boot.loader.archive.Archive.EntryFilter entryFilter37 = null;
        java.util.List<org.springframework.boot.loader.archive.Archive> archiveList38 = explodedArchive0.getNestedArchives(entryFilter37);
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntry fileEntry39 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntry();
        java.io.File file40 = fileEntry39.file;
        java.lang.String str41 = fileEntry39.name;
        fileEntry39.name = "";
        fileEntry39.name = "exploded archive";
        // The following exception was thrown during execution in test generation
        try {
            org.springframework.boot.loader.archive.Archive archive46 = explodedArchive0.getNestedArchive((org.springframework.boot.loader.archive.Archive.Entry) fileEntry39);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file11.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file11.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file24.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file24.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file33.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file33.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(uRL36);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(uRL36.toString(), "file:/server/study-execution/new-nimrod/nimrod-hunoroutput-test-dest/spring-boot/af20dc6cc45c032573413c401f9f73aa75371744/randoop_1/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(archiveList38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str41);
    }

    @Test
    public void test662() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test662");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        boolean boolean1 = fileEntryIterator0.hasNext();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator2 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator3 = entryComparator2.reversed();
        java.util.Comparator<java.io.File> fileComparator4 = fileComparator3.reversed();
        fileEntryIterator0.entryComparator = fileComparator4;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive6 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file7 = explodedArchive6.root;
        java.io.File file8 = null;
        explodedArchive6.manifestFile = file8;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive10 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest11 = explodedArchive10.manifest;
        explodedArchive10.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive14 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest15 = explodedArchive14.manifest;
        explodedArchive14.recursive = false;
        java.util.jar.Manifest manifest18 = explodedArchive14.manifest;
        java.io.File file19 = explodedArchive14.manifestFile;
        java.io.File file20 = null;
        java.io.File file21 = explodedArchive14.getManifestFile(file20);
        explodedArchive10.manifestFile = file20;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive23 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest24 = explodedArchive23.manifest;
        explodedArchive23.recursive = false;
        java.util.jar.Manifest manifest27 = explodedArchive23.manifest;
        java.io.File file28 = explodedArchive23.manifestFile;
        java.io.File file29 = null;
        java.io.File file30 = explodedArchive23.getManifestFile(file29);
        explodedArchive10.manifestFile = file30;
        java.io.File file32 = explodedArchive6.getManifestFile(file30);
        java.util.Iterator<java.io.File> fileItor33 = fileEntryIterator0.listFiles(file32);
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntry fileEntry34 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntry();
        java.lang.String str35 = fileEntry34.name;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator36 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file37 = null;
        fileEntryIterator36.current = file37;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive39 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.lang.String str40 = explodedArchive39.toString();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive41 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file42 = explodedArchive41.root;
        java.io.File file43 = null;
        explodedArchive41.manifestFile = file43;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive45 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest46 = explodedArchive45.manifest;
        explodedArchive45.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive49 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest50 = explodedArchive49.manifest;
        explodedArchive49.recursive = false;
        java.util.jar.Manifest manifest53 = explodedArchive49.manifest;
        java.io.File file54 = explodedArchive49.manifestFile;
        java.io.File file55 = null;
        java.io.File file56 = explodedArchive49.getManifestFile(file55);
        explodedArchive45.manifestFile = file55;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive58 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest59 = explodedArchive58.manifest;
        explodedArchive58.recursive = false;
        java.util.jar.Manifest manifest62 = explodedArchive58.manifest;
        java.io.File file63 = explodedArchive58.manifestFile;
        java.io.File file64 = null;
        java.io.File file65 = explodedArchive58.getManifestFile(file64);
        explodedArchive45.manifestFile = file65;
        java.io.File file67 = explodedArchive41.getManifestFile(file65);
        java.io.File file68 = explodedArchive39.getManifestFile(file65);
        fileEntryIterator36.root = file65;
        fileEntry34.file = file65;
        java.io.File file71 = fileEntry34.getFile();
        java.io.File file72 = fileEntry34.getFile();
        java.util.Iterator<java.io.File> fileItor73 = fileEntryIterator0.listFiles(file72);
        java.util.Comparator<java.io.File> fileComparator74 = fileEntryIterator0.entryComparator;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator75 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file76 = null;
        fileEntryIterator75.current = file76;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive78 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest79 = explodedArchive78.manifest;
        explodedArchive78.recursive = false;
        java.util.jar.Manifest manifest82 = explodedArchive78.manifest;
        java.io.File file83 = explodedArchive78.manifestFile;
        java.io.File file84 = null;
        java.io.File file85 = explodedArchive78.getManifestFile(file84);
        java.util.Iterator<java.io.File> fileItor86 = fileEntryIterator75.listFiles(file85);
        java.io.File file87 = fileEntryIterator75.root;
        java.io.File file88 = fileEntryIterator75.poll();
        java.util.Comparator<java.io.File> fileComparator89 = fileEntryIterator75.entryComparator;
        java.util.Deque<java.util.Iterator<java.io.File>> fileItorQueue90 = fileEntryIterator75.stack;
        java.util.Deque<java.util.Iterator<java.io.File>> fileItorQueue91 = fileEntryIterator75.stack;
        fileEntryIterator0.stack = fileItorQueue91;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file21.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file21.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file30.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file30.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file32.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file32.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str40 + "' != '" + "exploded archive" + "'", str40.equals("exploded archive"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file56.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file56.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file65.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file65.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file67.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file67.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file68.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file68.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file71.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file71.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file72.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file72.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor73);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest79);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest82);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file83);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file85);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file85.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file85.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor86);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file87);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file88);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator89);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItorQueue90);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItorQueue91);
    }

    @Test
    public void test663() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test663");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntry fileEntry0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntry();
        java.io.File file1 = fileEntry0.getFile();
        java.io.File file2 = fileEntry0.getFile();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive3 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file4 = explodedArchive3.root;
        java.io.File file5 = null;
        explodedArchive3.manifestFile = file5;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive7 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest8 = explodedArchive7.manifest;
        explodedArchive7.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive11 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest12 = explodedArchive11.manifest;
        explodedArchive11.recursive = false;
        java.util.jar.Manifest manifest15 = explodedArchive11.manifest;
        java.io.File file16 = explodedArchive11.manifestFile;
        java.io.File file17 = null;
        java.io.File file18 = explodedArchive11.getManifestFile(file17);
        explodedArchive7.manifestFile = file17;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive20 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest21 = explodedArchive20.manifest;
        explodedArchive20.recursive = false;
        java.util.jar.Manifest manifest24 = explodedArchive20.manifest;
        java.io.File file25 = explodedArchive20.manifestFile;
        java.io.File file26 = null;
        java.io.File file27 = explodedArchive20.getManifestFile(file26);
        explodedArchive7.manifestFile = file27;
        java.io.File file29 = explodedArchive3.getManifestFile(file27);
        fileEntry0.file = file29;
        fileEntry0.name = "";
        java.io.File file33 = fileEntry0.getFile();
        java.io.File file34 = fileEntry0.getFile();
        java.io.File file35 = fileEntry0.file;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file18.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file18.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file27.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file27.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file29.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file29.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file33.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file33.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file34.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file34.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file35.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file35.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
    }

    @Test
    public void test664() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test664");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file1 = null;
        fileEntryIterator0.current = file1;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive3 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest4 = explodedArchive3.manifest;
        explodedArchive3.recursive = false;
        java.util.jar.Manifest manifest7 = explodedArchive3.manifest;
        java.io.File file8 = explodedArchive3.manifestFile;
        java.io.File file9 = null;
        java.io.File file10 = explodedArchive3.getManifestFile(file9);
        java.util.Iterator<java.io.File> fileItor11 = fileEntryIterator0.listFiles(file10);
        java.io.File file12 = fileEntryIterator0.root;
        java.io.File file13 = fileEntryIterator0.root;
        java.util.Deque<java.util.Iterator<java.io.File>> fileItorQueue14 = fileEntryIterator0.stack;
        java.io.File file15 = fileEntryIterator0.current;
        java.io.File file16 = fileEntryIterator0.poll();
        java.util.Comparator<java.io.File> fileComparator17 = fileEntryIterator0.entryComparator;
        java.io.File file18 = fileEntryIterator0.root;
        java.util.Deque<java.util.Iterator<java.io.File>> fileItorQueue19 = fileEntryIterator0.stack;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItorQueue14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItorQueue19);
    }

    @Test
    public void test665() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test665");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file1 = explodedArchive0.root;
        java.io.File file2 = explodedArchive0.manifestFile;
        java.io.File file3 = explodedArchive0.manifestFile;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntry fileEntry4 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntry();
        java.lang.String str5 = fileEntry4.name;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator6 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file7 = null;
        fileEntryIterator6.current = file7;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive9 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest10 = explodedArchive9.manifest;
        explodedArchive9.recursive = false;
        java.util.jar.Manifest manifest13 = explodedArchive9.manifest;
        java.io.File file14 = explodedArchive9.manifestFile;
        java.io.File file15 = null;
        java.io.File file16 = explodedArchive9.getManifestFile(file15);
        java.util.Iterator<java.io.File> fileItor17 = fileEntryIterator6.listFiles(file16);
        java.io.File file18 = fileEntryIterator6.current;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator19 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file20 = null;
        fileEntryIterator19.current = file20;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive22 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest23 = explodedArchive22.manifest;
        explodedArchive22.recursive = false;
        java.util.jar.Manifest manifest26 = explodedArchive22.manifest;
        java.io.File file27 = explodedArchive22.manifestFile;
        java.io.File file28 = null;
        java.io.File file29 = explodedArchive22.getManifestFile(file28);
        java.util.Iterator<java.io.File> fileItor30 = fileEntryIterator19.listFiles(file29);
        java.util.ArrayDeque<java.util.Iterator<java.io.File>> fileItorQueue31 = new java.util.ArrayDeque<java.util.Iterator<java.io.File>>();
        boolean boolean32 = fileItorQueue31.add(fileItor30);
        fileEntryIterator6.stack = fileItorQueue31;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive34 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest35 = explodedArchive34.manifest;
        explodedArchive34.recursive = false;
        java.io.File file38 = null;
        explodedArchive34.root = file38;
        java.io.File file40 = explodedArchive34.root;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive41 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest42 = explodedArchive41.manifest;
        explodedArchive41.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive45 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest46 = explodedArchive45.manifest;
        explodedArchive45.recursive = false;
        java.util.jar.Manifest manifest49 = explodedArchive45.manifest;
        java.io.File file50 = explodedArchive45.manifestFile;
        java.io.File file51 = null;
        java.io.File file52 = explodedArchive45.getManifestFile(file51);
        explodedArchive41.manifestFile = file51;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive54 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest55 = explodedArchive54.manifest;
        explodedArchive54.recursive = false;
        java.util.jar.Manifest manifest58 = explodedArchive54.manifest;
        java.io.File file59 = explodedArchive54.manifestFile;
        java.io.File file60 = null;
        java.io.File file61 = explodedArchive54.getManifestFile(file60);
        explodedArchive41.manifestFile = file61;
        java.io.File file63 = explodedArchive34.getManifestFile(file61);
        fileEntryIterator6.root = file61;
        fileEntry4.file = file61;
        boolean boolean66 = fileEntry4.isDirectory();
        boolean boolean67 = fileEntry4.isDirectory();
        java.io.File file68 = fileEntry4.file;
        java.io.File file69 = fileEntry4.getFile();
        java.lang.String str70 = fileEntry4.getName();
        // The following exception was thrown during execution in test generation
        try {
            org.springframework.boot.loader.archive.Archive archive71 = explodedArchive0.getNestedArchive((org.springframework.boot.loader.archive.Archive.Entry) fileEntry4);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: File must exist");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file16.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file16.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file29.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file29.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file52.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file52.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file61.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file61.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file63.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file63.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file68.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file68.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file69.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file69.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str70);
    }

    @Test
    public void test666() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test666");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        boolean boolean1 = fileEntryIterator0.hasNext();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator2 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator3 = entryComparator2.reversed();
        java.util.Comparator<java.io.File> fileComparator4 = fileComparator3.reversed();
        fileEntryIterator0.entryComparator = fileComparator4;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator6 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        boolean boolean7 = fileEntryIterator6.hasNext();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator8 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator9 = entryComparator8.reversed();
        java.util.Comparator<java.io.File> fileComparator10 = fileComparator9.reversed();
        fileEntryIterator6.entryComparator = fileComparator10;
        java.util.Comparator<java.io.File> fileComparator12 = fileEntryIterator6.entryComparator;
        java.util.Comparator<java.io.File> fileComparator13 = fileComparator4.thenComparing(fileComparator12);
        java.util.Comparator<java.io.File> fileComparator14 = fileComparator13.reversed();
        java.util.Comparator<java.io.File> fileComparator15 = fileComparator14.reversed();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator15);
    }

    @Test
    public void test667() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test667");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest1 = explodedArchive0.manifest;
        explodedArchive0.recursive = false;
        java.io.File file4 = null;
        explodedArchive0.root = file4;
        java.io.File file6 = explodedArchive0.manifestFile;
        java.io.File file7 = explodedArchive0.manifestFile;
        java.io.File file8 = explodedArchive0.manifestFile;
        explodedArchive0.recursive = false;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file8);
    }

    @Test
    public void test668() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test668");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        boolean boolean1 = fileEntryIterator0.hasNext();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator2 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator3 = entryComparator2.reversed();
        java.util.Comparator<java.io.File> fileComparator4 = fileComparator3.reversed();
        fileEntryIterator0.entryComparator = fileComparator4;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator6 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        boolean boolean7 = fileEntryIterator6.hasNext();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator8 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator9 = entryComparator8.reversed();
        java.util.Comparator<java.io.File> fileComparator10 = fileComparator9.reversed();
        fileEntryIterator6.entryComparator = fileComparator10;
        java.util.Comparator<java.io.File> fileComparator12 = fileEntryIterator6.entryComparator;
        java.util.Comparator<java.io.File> fileComparator13 = fileComparator4.thenComparing(fileComparator12);
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator14 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file15 = null;
        fileEntryIterator14.current = file15;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive17 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest18 = explodedArchive17.manifest;
        explodedArchive17.recursive = false;
        java.util.jar.Manifest manifest21 = explodedArchive17.manifest;
        java.io.File file22 = explodedArchive17.manifestFile;
        java.io.File file23 = null;
        java.io.File file24 = explodedArchive17.getManifestFile(file23);
        java.util.Iterator<java.io.File> fileItor25 = fileEntryIterator14.listFiles(file24);
        java.io.File file26 = fileEntryIterator14.root;
        java.io.File file27 = fileEntryIterator14.poll();
        java.util.Comparator<java.io.File> fileComparator28 = fileEntryIterator14.entryComparator;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator29 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        boolean boolean30 = fileEntryIterator29.hasNext();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator31 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator32 = entryComparator31.reversed();
        java.util.Comparator<java.io.File> fileComparator33 = fileComparator32.reversed();
        fileEntryIterator29.entryComparator = fileComparator33;
        java.util.Comparator<java.io.File> fileComparator35 = fileEntryIterator29.entryComparator;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator36 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator37 = entryComparator36.reversed();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator38 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator39 = entryComparator38.reversed();
        java.util.Comparator<java.io.File> fileComparator40 = entryComparator36.thenComparing(fileComparator39);
        java.util.Comparator<java.io.File> fileComparator41 = fileComparator35.thenComparing(fileComparator39);
        fileEntryIterator14.entryComparator = fileComparator41;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator43 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        boolean boolean44 = fileEntryIterator43.recursive;
        java.io.File file45 = fileEntryIterator43.current;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator46 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        boolean boolean47 = fileEntryIterator46.hasNext();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator48 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator49 = entryComparator48.reversed();
        java.util.Comparator<java.io.File> fileComparator50 = fileComparator49.reversed();
        fileEntryIterator46.entryComparator = fileComparator50;
        java.util.Comparator<java.io.File> fileComparator52 = fileEntryIterator46.entryComparator;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator53 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator54 = entryComparator53.reversed();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator55 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator56 = entryComparator55.reversed();
        java.util.Comparator<java.io.File> fileComparator57 = entryComparator53.thenComparing(fileComparator56);
        java.util.Comparator<java.io.File> fileComparator58 = fileComparator52.thenComparing(fileComparator56);
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator59 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator60 = entryComparator59.reversed();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator61 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator62 = entryComparator61.reversed();
        java.util.Comparator<java.io.File> fileComparator63 = entryComparator59.thenComparing(fileComparator62);
        java.util.Comparator<java.io.File> fileComparator64 = fileComparator58.thenComparing((java.util.Comparator<java.io.File>) entryComparator59);
        fileEntryIterator43.entryComparator = fileComparator58;
        java.util.Comparator<java.io.File> fileComparator66 = fileComparator41.thenComparing(fileComparator58);
        java.util.Comparator<java.io.File> fileComparator67 = fileComparator13.thenComparing(fileComparator66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file24.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file24.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator67);
    }

    @Test
    public void test669() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test669");
        java.lang.String[] strArray2 = new java.lang.String[] { "file:/server/study-execution/new-nimrod/nimrod-hunoroutput-test-dest/spring-boot/af20dc6cc45c032573413c401f9f73aa75371744/randoop_1/META-INF/MANIFEST.MF", "" };
        java.util.LinkedHashSet<java.lang.String> strSet3 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet3, strArray2);
        org.springframework.boot.loader.archive.ExplodedArchive.SKIPPED_NAMES = strSet3;
        org.springframework.boot.loader.archive.ExplodedArchive.SKIPPED_NAMES = strSet3;
        org.springframework.boot.loader.archive.ExplodedArchive.SKIPPED_NAMES = strSet3;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
    }

    @Test
    public void test670() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test670");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        boolean boolean1 = fileEntryIterator0.recursive;
        java.util.Deque<java.util.Iterator<java.io.File>> fileItorQueue2 = fileEntryIterator0.stack;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator3 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file4 = null;
        fileEntryIterator3.current = file4;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive6 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest7 = explodedArchive6.manifest;
        explodedArchive6.recursive = false;
        java.util.jar.Manifest manifest10 = explodedArchive6.manifest;
        java.io.File file11 = explodedArchive6.manifestFile;
        java.io.File file12 = null;
        java.io.File file13 = explodedArchive6.getManifestFile(file12);
        java.util.Iterator<java.io.File> fileItor14 = fileEntryIterator3.listFiles(file13);
        java.util.Iterator<java.io.File> fileItor15 = fileEntryIterator0.listFiles(file13);
        // The following exception was thrown during execution in test generation
        try {
            org.springframework.boot.loader.archive.Archive.Entry entry16 = fileEntryIterator0.next();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItorQueue2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file13.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file13.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor15);
    }

    @Test
    public void test671() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test671");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file1 = null;
        fileEntryIterator0.current = file1;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive3 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest4 = explodedArchive3.manifest;
        explodedArchive3.recursive = false;
        java.util.jar.Manifest manifest7 = explodedArchive3.manifest;
        java.io.File file8 = explodedArchive3.manifestFile;
        java.io.File file9 = null;
        java.io.File file10 = explodedArchive3.getManifestFile(file9);
        java.util.Iterator<java.io.File> fileItor11 = fileEntryIterator0.listFiles(file10);
        java.io.File file12 = fileEntryIterator0.root;
        java.io.File file13 = fileEntryIterator0.poll();
        java.util.Comparator<java.io.File> fileComparator14 = fileEntryIterator0.entryComparator;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator15 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        boolean boolean16 = fileEntryIterator15.hasNext();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator17 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator18 = entryComparator17.reversed();
        java.util.Comparator<java.io.File> fileComparator19 = fileComparator18.reversed();
        fileEntryIterator15.entryComparator = fileComparator19;
        java.util.Comparator<java.io.File> fileComparator21 = fileEntryIterator15.entryComparator;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator22 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator23 = entryComparator22.reversed();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator24 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator25 = entryComparator24.reversed();
        java.util.Comparator<java.io.File> fileComparator26 = entryComparator22.thenComparing(fileComparator25);
        java.util.Comparator<java.io.File> fileComparator27 = fileComparator21.thenComparing(fileComparator25);
        fileEntryIterator0.entryComparator = fileComparator27;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator29 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        boolean boolean30 = fileEntryIterator29.recursive;
        java.io.File file31 = fileEntryIterator29.current;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator32 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        boolean boolean33 = fileEntryIterator32.hasNext();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator34 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator35 = entryComparator34.reversed();
        java.util.Comparator<java.io.File> fileComparator36 = fileComparator35.reversed();
        fileEntryIterator32.entryComparator = fileComparator36;
        java.util.Comparator<java.io.File> fileComparator38 = fileEntryIterator32.entryComparator;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator39 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator40 = entryComparator39.reversed();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator41 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator42 = entryComparator41.reversed();
        java.util.Comparator<java.io.File> fileComparator43 = entryComparator39.thenComparing(fileComparator42);
        java.util.Comparator<java.io.File> fileComparator44 = fileComparator38.thenComparing(fileComparator42);
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator45 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator46 = entryComparator45.reversed();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator47 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator48 = entryComparator47.reversed();
        java.util.Comparator<java.io.File> fileComparator49 = entryComparator45.thenComparing(fileComparator48);
        java.util.Comparator<java.io.File> fileComparator50 = fileComparator44.thenComparing((java.util.Comparator<java.io.File>) entryComparator45);
        fileEntryIterator29.entryComparator = fileComparator44;
        java.util.Comparator<java.io.File> fileComparator52 = fileComparator27.thenComparing(fileComparator44);
        java.util.Comparator<java.io.File> fileComparator53 = fileComparator52.reversed();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator54 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        boolean boolean55 = fileEntryIterator54.hasNext();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator56 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator57 = entryComparator56.reversed();
        java.util.Comparator<java.io.File> fileComparator58 = fileComparator57.reversed();
        fileEntryIterator54.entryComparator = fileComparator58;
        java.util.Comparator<java.io.File> fileComparator60 = fileEntryIterator54.entryComparator;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator61 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator62 = entryComparator61.reversed();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator63 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator64 = entryComparator63.reversed();
        java.util.Comparator<java.io.File> fileComparator65 = entryComparator61.thenComparing(fileComparator64);
        java.util.Comparator<java.io.File> fileComparator66 = fileComparator60.thenComparing(fileComparator64);
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator67 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator68 = entryComparator67.reversed();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator69 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator70 = entryComparator69.reversed();
        java.util.Comparator<java.io.File> fileComparator71 = entryComparator67.thenComparing(fileComparator70);
        java.util.Comparator<java.io.File> fileComparator72 = fileComparator64.thenComparing(fileComparator70);
        java.util.Comparator<java.io.File> fileComparator73 = fileComparator53.thenComparing(fileComparator70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator73);
    }

    @Test
    public void test672() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test672");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file1 = null;
        fileEntryIterator0.current = file1;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive3 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest4 = explodedArchive3.manifest;
        explodedArchive3.recursive = false;
        java.util.jar.Manifest manifest7 = explodedArchive3.manifest;
        java.io.File file8 = explodedArchive3.manifestFile;
        java.io.File file9 = null;
        java.io.File file10 = explodedArchive3.getManifestFile(file9);
        java.util.Iterator<java.io.File> fileItor11 = fileEntryIterator0.listFiles(file10);
        boolean boolean12 = fileEntryIterator0.hasNext();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator13 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator14 = entryComparator13.reversed();
        java.util.Comparator<java.io.File> fileComparator15 = entryComparator13.reversed();
        fileEntryIterator0.entryComparator = fileComparator15;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator17 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file18 = null;
        fileEntryIterator17.current = file18;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive20 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.lang.String str21 = explodedArchive20.toString();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive22 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file23 = explodedArchive22.root;
        java.io.File file24 = null;
        explodedArchive22.manifestFile = file24;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive26 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest27 = explodedArchive26.manifest;
        explodedArchive26.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive30 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest31 = explodedArchive30.manifest;
        explodedArchive30.recursive = false;
        java.util.jar.Manifest manifest34 = explodedArchive30.manifest;
        java.io.File file35 = explodedArchive30.manifestFile;
        java.io.File file36 = null;
        java.io.File file37 = explodedArchive30.getManifestFile(file36);
        explodedArchive26.manifestFile = file36;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive39 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest40 = explodedArchive39.manifest;
        explodedArchive39.recursive = false;
        java.util.jar.Manifest manifest43 = explodedArchive39.manifest;
        java.io.File file44 = explodedArchive39.manifestFile;
        java.io.File file45 = null;
        java.io.File file46 = explodedArchive39.getManifestFile(file45);
        explodedArchive26.manifestFile = file46;
        java.io.File file48 = explodedArchive22.getManifestFile(file46);
        java.io.File file49 = explodedArchive20.getManifestFile(file46);
        fileEntryIterator17.root = file46;
        fileEntryIterator0.current = file46;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive52 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file53 = explodedArchive52.root;
        java.io.File file54 = null;
        explodedArchive52.manifestFile = file54;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive56 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest57 = explodedArchive56.manifest;
        explodedArchive56.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive60 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest61 = explodedArchive60.manifest;
        explodedArchive60.recursive = false;
        java.util.jar.Manifest manifest64 = explodedArchive60.manifest;
        java.io.File file65 = explodedArchive60.manifestFile;
        java.io.File file66 = null;
        java.io.File file67 = explodedArchive60.getManifestFile(file66);
        explodedArchive56.manifestFile = file66;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive69 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest70 = explodedArchive69.manifest;
        explodedArchive69.recursive = false;
        java.util.jar.Manifest manifest73 = explodedArchive69.manifest;
        java.io.File file74 = explodedArchive69.manifestFile;
        java.io.File file75 = null;
        java.io.File file76 = explodedArchive69.getManifestFile(file75);
        explodedArchive56.manifestFile = file76;
        java.io.File file78 = explodedArchive52.getManifestFile(file76);
        fileEntryIterator0.root = file78;
        java.io.File file80 = fileEntryIterator0.poll();
        java.io.File file81 = fileEntryIterator0.current;
        java.lang.Class<?> wildcardClass82 = fileEntryIterator0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str21 + "' != '" + "exploded archive" + "'", str21.equals("exploded archive"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file37.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file37.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file46.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file46.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file48.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file48.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file49.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file49.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file67.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file67.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest73);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file76);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file76.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file76.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file78);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file78.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file78.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file80);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file81);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file81.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file81.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass82);
    }

    @Test
    public void test673() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test673");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest1 = explodedArchive0.manifest;
        explodedArchive0.recursive = false;
        java.io.File file4 = null;
        explodedArchive0.root = file4;
        java.io.File file6 = explodedArchive0.root;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive7 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest8 = explodedArchive7.manifest;
        explodedArchive7.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive11 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest12 = explodedArchive11.manifest;
        explodedArchive11.recursive = false;
        java.util.jar.Manifest manifest15 = explodedArchive11.manifest;
        java.io.File file16 = explodedArchive11.manifestFile;
        java.io.File file17 = null;
        java.io.File file18 = explodedArchive11.getManifestFile(file17);
        explodedArchive7.manifestFile = file17;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive20 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest21 = explodedArchive20.manifest;
        explodedArchive20.recursive = false;
        java.util.jar.Manifest manifest24 = explodedArchive20.manifest;
        java.io.File file25 = explodedArchive20.manifestFile;
        java.io.File file26 = null;
        java.io.File file27 = explodedArchive20.getManifestFile(file26);
        explodedArchive7.manifestFile = file27;
        java.io.File file29 = explodedArchive0.getManifestFile(file27);
        boolean boolean30 = explodedArchive0.recursive;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntry fileEntry31 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntry();
        java.lang.String str32 = fileEntry31.name;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator33 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file34 = null;
        fileEntryIterator33.current = file34;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive36 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.lang.String str37 = explodedArchive36.toString();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive38 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file39 = explodedArchive38.root;
        java.io.File file40 = null;
        explodedArchive38.manifestFile = file40;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive42 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest43 = explodedArchive42.manifest;
        explodedArchive42.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive46 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest47 = explodedArchive46.manifest;
        explodedArchive46.recursive = false;
        java.util.jar.Manifest manifest50 = explodedArchive46.manifest;
        java.io.File file51 = explodedArchive46.manifestFile;
        java.io.File file52 = null;
        java.io.File file53 = explodedArchive46.getManifestFile(file52);
        explodedArchive42.manifestFile = file52;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive55 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest56 = explodedArchive55.manifest;
        explodedArchive55.recursive = false;
        java.util.jar.Manifest manifest59 = explodedArchive55.manifest;
        java.io.File file60 = explodedArchive55.manifestFile;
        java.io.File file61 = null;
        java.io.File file62 = explodedArchive55.getManifestFile(file61);
        explodedArchive42.manifestFile = file62;
        java.io.File file64 = explodedArchive38.getManifestFile(file62);
        java.io.File file65 = explodedArchive36.getManifestFile(file62);
        fileEntryIterator33.root = file62;
        fileEntry31.file = file62;
        java.io.File file68 = explodedArchive0.getManifestFile(file62);
        java.io.File file69 = explodedArchive0.root;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file18.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file18.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file27.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file27.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file29.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file29.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str37 + "' != '" + "exploded archive" + "'", str37.equals("exploded archive"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file53.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file53.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file62.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file62.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file64.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file64.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file65.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file65.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file68.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file68.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file69);
    }

    @Test
    public void test674() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test674");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file1 = null;
        fileEntryIterator0.current = file1;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive3 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest4 = explodedArchive3.manifest;
        explodedArchive3.recursive = false;
        java.util.jar.Manifest manifest7 = explodedArchive3.manifest;
        java.io.File file8 = explodedArchive3.manifestFile;
        java.io.File file9 = null;
        java.io.File file10 = explodedArchive3.getManifestFile(file9);
        java.util.Iterator<java.io.File> fileItor11 = fileEntryIterator0.listFiles(file10);
        java.io.File file12 = fileEntryIterator0.current;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator13 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file14 = null;
        fileEntryIterator13.current = file14;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive16 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest17 = explodedArchive16.manifest;
        explodedArchive16.recursive = false;
        java.util.jar.Manifest manifest20 = explodedArchive16.manifest;
        java.io.File file21 = explodedArchive16.manifestFile;
        java.io.File file22 = null;
        java.io.File file23 = explodedArchive16.getManifestFile(file22);
        java.util.Iterator<java.io.File> fileItor24 = fileEntryIterator13.listFiles(file23);
        java.util.ArrayDeque<java.util.Iterator<java.io.File>> fileItorQueue25 = new java.util.ArrayDeque<java.util.Iterator<java.io.File>>();
        boolean boolean26 = fileItorQueue25.add(fileItor24);
        fileEntryIterator0.stack = fileItorQueue25;
        java.io.File file28 = fileEntryIterator0.poll();
        // The following exception was thrown during execution in test generation
        try {
            fileEntryIterator0.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: remove");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file23.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file23.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file28);
    }

    @Test
    public void test675() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test675");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntry fileEntry0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntry();
        java.io.File file1 = fileEntry0.file;
        java.lang.String str2 = fileEntry0.name;
        fileEntry0.name = "";
        fileEntry0.name = "exploded archive";
        java.lang.String str7 = fileEntry0.name;
        java.lang.String str8 = fileEntry0.getName();
        java.io.File file9 = fileEntry0.getFile();
        fileEntry0.name = "file:/server/study-execution/new-nimrod/nimrod-hunoroutput-test-dest/spring-boot/af20dc6cc45c032573413c401f9f73aa75371744/randoop_1/META-INF/MANIFEST.MF/META-INF/MANIFEST.MF";
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str7 + "' != '" + "exploded archive" + "'", str7.equals("exploded archive"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str8 + "' != '" + "exploded archive" + "'", str8.equals("exploded archive"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file9);
    }

    @Test
    public void test676() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test676");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest1 = explodedArchive0.manifest;
        explodedArchive0.recursive = false;
        java.io.File file4 = null;
        explodedArchive0.root = file4;
        java.io.File file6 = explodedArchive0.root;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive7 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest8 = explodedArchive7.manifest;
        explodedArchive7.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive11 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest12 = explodedArchive11.manifest;
        explodedArchive11.recursive = false;
        java.util.jar.Manifest manifest15 = explodedArchive11.manifest;
        java.io.File file16 = explodedArchive11.manifestFile;
        java.io.File file17 = null;
        java.io.File file18 = explodedArchive11.getManifestFile(file17);
        explodedArchive7.manifestFile = file17;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive20 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest21 = explodedArchive20.manifest;
        explodedArchive20.recursive = false;
        java.util.jar.Manifest manifest24 = explodedArchive20.manifest;
        java.io.File file25 = explodedArchive20.manifestFile;
        java.io.File file26 = null;
        java.io.File file27 = explodedArchive20.getManifestFile(file26);
        explodedArchive7.manifestFile = file27;
        java.io.File file29 = explodedArchive0.getManifestFile(file27);
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntry fileEntry30 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntry();
        java.lang.String str31 = fileEntry30.name;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator32 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file33 = null;
        fileEntryIterator32.current = file33;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive35 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.lang.String str36 = explodedArchive35.toString();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive37 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file38 = explodedArchive37.root;
        java.io.File file39 = null;
        explodedArchive37.manifestFile = file39;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive41 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest42 = explodedArchive41.manifest;
        explodedArchive41.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive45 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest46 = explodedArchive45.manifest;
        explodedArchive45.recursive = false;
        java.util.jar.Manifest manifest49 = explodedArchive45.manifest;
        java.io.File file50 = explodedArchive45.manifestFile;
        java.io.File file51 = null;
        java.io.File file52 = explodedArchive45.getManifestFile(file51);
        explodedArchive41.manifestFile = file51;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive54 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest55 = explodedArchive54.manifest;
        explodedArchive54.recursive = false;
        java.util.jar.Manifest manifest58 = explodedArchive54.manifest;
        java.io.File file59 = explodedArchive54.manifestFile;
        java.io.File file60 = null;
        java.io.File file61 = explodedArchive54.getManifestFile(file60);
        explodedArchive41.manifestFile = file61;
        java.io.File file63 = explodedArchive37.getManifestFile(file61);
        java.io.File file64 = explodedArchive35.getManifestFile(file61);
        fileEntryIterator32.root = file61;
        fileEntry30.file = file61;
        java.io.File file67 = fileEntry30.file;
        explodedArchive0.root = file67;
        // The following exception was thrown during execution in test generation
        try {
            org.springframework.boot.loader.archive.ExplodedArchive explodedArchive69 = new org.springframework.boot.loader.archive.ExplodedArchive(file67);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid source folder META-INF/MANIFEST.MF");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file18.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file18.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file27.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file27.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file29.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file29.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str36 + "' != '" + "exploded archive" + "'", str36.equals("exploded archive"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file52.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file52.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file61.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file61.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file63.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file63.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file64.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file64.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file67.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file67.toString(), "META-INF/MANIFEST.MF");
    }

    @Test
    public void test677() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test677");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file1 = null;
        fileEntryIterator0.current = file1;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive3 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest4 = explodedArchive3.manifest;
        explodedArchive3.recursive = false;
        java.util.jar.Manifest manifest7 = explodedArchive3.manifest;
        java.io.File file8 = explodedArchive3.manifestFile;
        java.io.File file9 = null;
        java.io.File file10 = explodedArchive3.getManifestFile(file9);
        java.util.Iterator<java.io.File> fileItor11 = fileEntryIterator0.listFiles(file10);
        boolean boolean12 = fileEntryIterator0.hasNext();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator13 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator14 = entryComparator13.reversed();
        java.util.Comparator<java.io.File> fileComparator15 = entryComparator13.reversed();
        fileEntryIterator0.entryComparator = fileComparator15;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator17 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file18 = null;
        fileEntryIterator17.current = file18;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive20 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.lang.String str21 = explodedArchive20.toString();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive22 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file23 = explodedArchive22.root;
        java.io.File file24 = null;
        explodedArchive22.manifestFile = file24;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive26 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest27 = explodedArchive26.manifest;
        explodedArchive26.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive30 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest31 = explodedArchive30.manifest;
        explodedArchive30.recursive = false;
        java.util.jar.Manifest manifest34 = explodedArchive30.manifest;
        java.io.File file35 = explodedArchive30.manifestFile;
        java.io.File file36 = null;
        java.io.File file37 = explodedArchive30.getManifestFile(file36);
        explodedArchive26.manifestFile = file36;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive39 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest40 = explodedArchive39.manifest;
        explodedArchive39.recursive = false;
        java.util.jar.Manifest manifest43 = explodedArchive39.manifest;
        java.io.File file44 = explodedArchive39.manifestFile;
        java.io.File file45 = null;
        java.io.File file46 = explodedArchive39.getManifestFile(file45);
        explodedArchive26.manifestFile = file46;
        java.io.File file48 = explodedArchive22.getManifestFile(file46);
        java.io.File file49 = explodedArchive20.getManifestFile(file46);
        fileEntryIterator17.root = file46;
        fileEntryIterator0.current = file46;
        java.util.Deque<java.util.Iterator<java.io.File>> fileItorQueue52 = fileEntryIterator0.stack;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator53 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        boolean boolean54 = fileEntryIterator53.hasNext();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator55 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator56 = entryComparator55.reversed();
        java.util.Comparator<java.io.File> fileComparator57 = fileComparator56.reversed();
        fileEntryIterator53.entryComparator = fileComparator57;
        java.util.Comparator<java.io.File> fileComparator59 = fileEntryIterator53.entryComparator;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator60 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator61 = entryComparator60.reversed();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator62 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator63 = entryComparator62.reversed();
        java.util.Comparator<java.io.File> fileComparator64 = entryComparator60.thenComparing(fileComparator63);
        java.util.Comparator<java.io.File> fileComparator65 = fileComparator59.thenComparing(fileComparator63);
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator66 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator67 = entryComparator66.reversed();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator68 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator69 = entryComparator68.reversed();
        java.util.Comparator<java.io.File> fileComparator70 = entryComparator66.thenComparing(fileComparator69);
        java.util.Comparator<java.io.File> fileComparator71 = fileComparator65.thenComparing((java.util.Comparator<java.io.File>) entryComparator66);
        fileEntryIterator0.entryComparator = entryComparator66;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str21 + "' != '" + "exploded archive" + "'", str21.equals("exploded archive"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file37.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file37.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file46.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file46.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file48.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file48.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file49.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file49.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItorQueue52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator71);
    }

    @Test
    public void test678() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test678");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest1 = explodedArchive0.manifest;
        explodedArchive0.recursive = false;
        java.util.jar.Manifest manifest4 = explodedArchive0.manifest;
        java.util.jar.Manifest manifest5 = null;
        explodedArchive0.manifest = manifest5;
        java.io.File file7 = explodedArchive0.root;
        java.lang.String str8 = explodedArchive0.toString();
        java.io.File file9 = explodedArchive0.root;
        java.util.jar.Manifest manifest10 = explodedArchive0.manifest;
        org.springframework.boot.loader.archive.Archive.EntryFilter entryFilter11 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<org.springframework.boot.loader.archive.Archive> archiveList12 = explodedArchive0.getNestedArchives(entryFilter11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str8 + "' != '" + "exploded archive" + "'", str8.equals("exploded archive"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest10);
    }

    @Test
    public void test679() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test679");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file1 = null;
        fileEntryIterator0.current = file1;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive3 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest4 = explodedArchive3.manifest;
        explodedArchive3.recursive = false;
        java.util.jar.Manifest manifest7 = explodedArchive3.manifest;
        java.io.File file8 = explodedArchive3.manifestFile;
        java.io.File file9 = null;
        java.io.File file10 = explodedArchive3.getManifestFile(file9);
        java.util.Iterator<java.io.File> fileItor11 = fileEntryIterator0.listFiles(file10);
        java.io.File file12 = fileEntryIterator0.root;
        java.io.File file13 = fileEntryIterator0.root;
        java.util.Deque<java.util.Iterator<java.io.File>> fileItorQueue14 = fileEntryIterator0.stack;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator15 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator16 = entryComparator15.reversed();
        java.util.Comparator<java.io.File> fileComparator17 = entryComparator15.reversed();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive18 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest19 = explodedArchive18.manifest;
        explodedArchive18.recursive = false;
        java.util.jar.Manifest manifest22 = explodedArchive18.manifest;
        java.io.File file23 = explodedArchive18.manifestFile;
        java.io.File file24 = null;
        java.io.File file25 = explodedArchive18.getManifestFile(file24);
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive26 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest27 = explodedArchive26.manifest;
        explodedArchive26.recursive = false;
        java.io.File file30 = null;
        explodedArchive26.root = file30;
        java.io.File file32 = explodedArchive26.root;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive33 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest34 = explodedArchive33.manifest;
        explodedArchive33.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive37 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest38 = explodedArchive37.manifest;
        explodedArchive37.recursive = false;
        java.util.jar.Manifest manifest41 = explodedArchive37.manifest;
        java.io.File file42 = explodedArchive37.manifestFile;
        java.io.File file43 = null;
        java.io.File file44 = explodedArchive37.getManifestFile(file43);
        explodedArchive33.manifestFile = file43;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive46 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest47 = explodedArchive46.manifest;
        explodedArchive46.recursive = false;
        java.util.jar.Manifest manifest50 = explodedArchive46.manifest;
        java.io.File file51 = explodedArchive46.manifestFile;
        java.io.File file52 = null;
        java.io.File file53 = explodedArchive46.getManifestFile(file52);
        explodedArchive33.manifestFile = file53;
        java.io.File file55 = explodedArchive26.getManifestFile(file53);
        int int56 = entryComparator15.compare(file25, file53);
        fileEntryIterator0.root = file25;
        fileEntryIterator0.recursive = false;
        // The following exception was thrown during execution in test generation
        try {
            fileEntryIterator0.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: remove");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItorQueue14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file25.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file25.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file44.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file44.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file53.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file53.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file55.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file55.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
    }

    @Test
    public void test680() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test680");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file1 = explodedArchive0.root;
        java.io.File file2 = explodedArchive0.manifestFile;
        java.io.File file3 = explodedArchive0.root;
        boolean boolean4 = explodedArchive0.recursive;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive5 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file6 = explodedArchive5.root;
        java.io.File file7 = null;
        explodedArchive5.manifestFile = file7;
        java.io.File file9 = explodedArchive5.root;
        boolean boolean10 = explodedArchive5.recursive;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive11 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest12 = explodedArchive11.manifest;
        explodedArchive11.recursive = false;
        java.io.File file15 = null;
        explodedArchive11.root = file15;
        java.io.File file17 = explodedArchive11.root;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive18 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest19 = explodedArchive18.manifest;
        explodedArchive18.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive22 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest23 = explodedArchive22.manifest;
        explodedArchive22.recursive = false;
        java.util.jar.Manifest manifest26 = explodedArchive22.manifest;
        java.io.File file27 = explodedArchive22.manifestFile;
        java.io.File file28 = null;
        java.io.File file29 = explodedArchive22.getManifestFile(file28);
        explodedArchive18.manifestFile = file28;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive31 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest32 = explodedArchive31.manifest;
        explodedArchive31.recursive = false;
        java.util.jar.Manifest manifest35 = explodedArchive31.manifest;
        java.io.File file36 = explodedArchive31.manifestFile;
        java.io.File file37 = null;
        java.io.File file38 = explodedArchive31.getManifestFile(file37);
        explodedArchive18.manifestFile = file38;
        java.io.File file40 = explodedArchive11.getManifestFile(file38);
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntry fileEntry41 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntry();
        java.lang.String str42 = fileEntry41.name;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator43 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file44 = null;
        fileEntryIterator43.current = file44;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive46 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.lang.String str47 = explodedArchive46.toString();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive48 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file49 = explodedArchive48.root;
        java.io.File file50 = null;
        explodedArchive48.manifestFile = file50;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive52 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest53 = explodedArchive52.manifest;
        explodedArchive52.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive56 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest57 = explodedArchive56.manifest;
        explodedArchive56.recursive = false;
        java.util.jar.Manifest manifest60 = explodedArchive56.manifest;
        java.io.File file61 = explodedArchive56.manifestFile;
        java.io.File file62 = null;
        java.io.File file63 = explodedArchive56.getManifestFile(file62);
        explodedArchive52.manifestFile = file62;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive65 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest66 = explodedArchive65.manifest;
        explodedArchive65.recursive = false;
        java.util.jar.Manifest manifest69 = explodedArchive65.manifest;
        java.io.File file70 = explodedArchive65.manifestFile;
        java.io.File file71 = null;
        java.io.File file72 = explodedArchive65.getManifestFile(file71);
        explodedArchive52.manifestFile = file72;
        java.io.File file74 = explodedArchive48.getManifestFile(file72);
        java.io.File file75 = explodedArchive46.getManifestFile(file72);
        fileEntryIterator43.root = file72;
        fileEntry41.file = file72;
        java.io.File file78 = fileEntry41.file;
        explodedArchive11.root = file78;
        java.io.File file80 = explodedArchive11.manifestFile;
        java.io.File file81 = explodedArchive11.root;
        explodedArchive5.manifestFile = file81;
        explodedArchive0.root = file81;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file29.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file29.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file38.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file38.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file40.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file40.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str47 + "' != '" + "exploded archive" + "'", str47.equals("exploded archive"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file63.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file63.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file72.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file72.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file74.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file74.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file75);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file75.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file75.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file78);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file78.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file78.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file80);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file81);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file81.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file81.toString(), "META-INF/MANIFEST.MF");
    }

    @Test
    public void test681() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test681");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntry fileEntry0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntry();
        java.io.File file1 = fileEntry0.file;
        java.lang.String str2 = fileEntry0.name;
        fileEntry0.name = "";
        fileEntry0.name = "exploded archive";
        java.lang.String str7 = fileEntry0.getName();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str7 + "' != '" + "exploded archive" + "'", str7.equals("exploded archive"));
    }

    @Test
    public void test682() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test682");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file1 = null;
        fileEntryIterator0.current = file1;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive3 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest4 = explodedArchive3.manifest;
        explodedArchive3.recursive = false;
        java.util.jar.Manifest manifest7 = explodedArchive3.manifest;
        java.io.File file8 = explodedArchive3.manifestFile;
        java.io.File file9 = null;
        java.io.File file10 = explodedArchive3.getManifestFile(file9);
        java.util.Iterator<java.io.File> fileItor11 = fileEntryIterator0.listFiles(file10);
        java.io.File file12 = fileEntryIterator0.current;
        boolean boolean13 = fileEntryIterator0.recursive;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntry fileEntry14 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntry();
        java.io.File file15 = fileEntry14.getFile();
        java.io.File file16 = fileEntry14.getFile();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive17 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file18 = explodedArchive17.root;
        java.io.File file19 = null;
        explodedArchive17.manifestFile = file19;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive21 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest22 = explodedArchive21.manifest;
        explodedArchive21.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive25 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest26 = explodedArchive25.manifest;
        explodedArchive25.recursive = false;
        java.util.jar.Manifest manifest29 = explodedArchive25.manifest;
        java.io.File file30 = explodedArchive25.manifestFile;
        java.io.File file31 = null;
        java.io.File file32 = explodedArchive25.getManifestFile(file31);
        explodedArchive21.manifestFile = file31;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive34 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest35 = explodedArchive34.manifest;
        explodedArchive34.recursive = false;
        java.util.jar.Manifest manifest38 = explodedArchive34.manifest;
        java.io.File file39 = explodedArchive34.manifestFile;
        java.io.File file40 = null;
        java.io.File file41 = explodedArchive34.getManifestFile(file40);
        explodedArchive21.manifestFile = file41;
        java.io.File file43 = explodedArchive17.getManifestFile(file41);
        fileEntry14.file = file43;
        fileEntry14.name = "";
        java.io.File file47 = fileEntry14.getFile();
        java.util.Iterator<java.io.File> fileItor48 = fileEntryIterator0.listFiles(file47);
        java.io.File file49 = fileEntryIterator0.root;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file32.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file32.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file41.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file41.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file43.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file43.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file47.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file47.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file49);
    }

    @Test
    public void test683() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test683");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file1 = explodedArchive0.root;
        java.io.File file2 = null;
        explodedArchive0.manifestFile = file2;
        java.io.File file4 = explodedArchive0.root;
        java.lang.String str5 = explodedArchive0.toString();
        java.util.jar.Manifest manifest6 = null;
        explodedArchive0.manifest = manifest6;
        java.io.File file8 = explodedArchive0.root;
        java.util.jar.Manifest manifest9 = null;
        explodedArchive0.manifest = manifest9;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator11 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        boolean boolean12 = fileEntryIterator11.hasNext();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator13 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator14 = entryComparator13.reversed();
        java.util.Comparator<java.io.File> fileComparator15 = fileComparator14.reversed();
        fileEntryIterator11.entryComparator = fileComparator15;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive17 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file18 = explodedArchive17.root;
        java.io.File file19 = null;
        explodedArchive17.manifestFile = file19;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive21 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest22 = explodedArchive21.manifest;
        explodedArchive21.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive25 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest26 = explodedArchive25.manifest;
        explodedArchive25.recursive = false;
        java.util.jar.Manifest manifest29 = explodedArchive25.manifest;
        java.io.File file30 = explodedArchive25.manifestFile;
        java.io.File file31 = null;
        java.io.File file32 = explodedArchive25.getManifestFile(file31);
        explodedArchive21.manifestFile = file31;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive34 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest35 = explodedArchive34.manifest;
        explodedArchive34.recursive = false;
        java.util.jar.Manifest manifest38 = explodedArchive34.manifest;
        java.io.File file39 = explodedArchive34.manifestFile;
        java.io.File file40 = null;
        java.io.File file41 = explodedArchive34.getManifestFile(file40);
        explodedArchive21.manifestFile = file41;
        java.io.File file43 = explodedArchive17.getManifestFile(file41);
        java.util.Iterator<java.io.File> fileItor44 = fileEntryIterator11.listFiles(file43);
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntry fileEntry45 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntry();
        java.lang.String str46 = fileEntry45.name;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator47 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file48 = null;
        fileEntryIterator47.current = file48;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive50 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.lang.String str51 = explodedArchive50.toString();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive52 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file53 = explodedArchive52.root;
        java.io.File file54 = null;
        explodedArchive52.manifestFile = file54;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive56 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest57 = explodedArchive56.manifest;
        explodedArchive56.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive60 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest61 = explodedArchive60.manifest;
        explodedArchive60.recursive = false;
        java.util.jar.Manifest manifest64 = explodedArchive60.manifest;
        java.io.File file65 = explodedArchive60.manifestFile;
        java.io.File file66 = null;
        java.io.File file67 = explodedArchive60.getManifestFile(file66);
        explodedArchive56.manifestFile = file66;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive69 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest70 = explodedArchive69.manifest;
        explodedArchive69.recursive = false;
        java.util.jar.Manifest manifest73 = explodedArchive69.manifest;
        java.io.File file74 = explodedArchive69.manifestFile;
        java.io.File file75 = null;
        java.io.File file76 = explodedArchive69.getManifestFile(file75);
        explodedArchive56.manifestFile = file76;
        java.io.File file78 = explodedArchive52.getManifestFile(file76);
        java.io.File file79 = explodedArchive50.getManifestFile(file76);
        fileEntryIterator47.root = file76;
        fileEntry45.file = file76;
        java.io.File file82 = fileEntry45.getFile();
        java.io.File file83 = fileEntry45.getFile();
        java.util.Iterator<java.io.File> fileItor84 = fileEntryIterator11.listFiles(file83);
        java.io.File file85 = explodedArchive0.getManifestFile(file83);
        // The following exception was thrown during execution in test generation
        try {
            org.springframework.boot.loader.archive.ExplodedArchive explodedArchive87 = new org.springframework.boot.loader.archive.ExplodedArchive(file83, false);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid source folder META-INF/MANIFEST.MF");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "exploded archive" + "'", str5.equals("exploded archive"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file32.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file32.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file41.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file41.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file43.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file43.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str51 + "' != '" + "exploded archive" + "'", str51.equals("exploded archive"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file67.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file67.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest73);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file76);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file76.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file76.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file78);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file78.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file78.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file79);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file79.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file79.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file82);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file82.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file82.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file83);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file83.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file83.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor84);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file85);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file85.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file85.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
    }

    @Test
    public void test684() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test684");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest1 = explodedArchive0.manifest;
        explodedArchive0.recursive = false;
        java.io.File file4 = null;
        explodedArchive0.root = file4;
        java.io.File file6 = explodedArchive0.root;
        java.util.jar.Manifest manifest7 = null;
        explodedArchive0.manifest = manifest7;
        explodedArchive0.recursive = false;
        explodedArchive0.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive13 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest14 = explodedArchive13.manifest;
        explodedArchive13.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive17 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest18 = explodedArchive17.manifest;
        explodedArchive17.recursive = false;
        java.util.jar.Manifest manifest21 = explodedArchive17.manifest;
        java.io.File file22 = explodedArchive17.manifestFile;
        java.io.File file23 = null;
        java.io.File file24 = explodedArchive17.getManifestFile(file23);
        explodedArchive13.manifestFile = file23;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive26 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest27 = explodedArchive26.manifest;
        explodedArchive26.recursive = false;
        java.util.jar.Manifest manifest30 = explodedArchive26.manifest;
        java.io.File file31 = explodedArchive26.manifestFile;
        java.io.File file32 = null;
        java.io.File file33 = explodedArchive26.getManifestFile(file32);
        explodedArchive13.manifestFile = file33;
        explodedArchive0.manifestFile = file33;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Spliterator<org.springframework.boot.loader.archive.Archive.Entry> entrySpliterator36 = explodedArchive0.spliterator();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file24.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file24.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file33.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file33.toString(), "META-INF/MANIFEST.MF");
    }

    @Test
    public void test685() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test685");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest1 = explodedArchive0.manifest;
        explodedArchive0.recursive = false;
        java.util.jar.Manifest manifest4 = explodedArchive0.manifest;
        java.io.File file5 = explodedArchive0.manifestFile;
        java.io.File file6 = null;
        java.io.File file7 = explodedArchive0.getManifestFile(file6);
        java.util.jar.Manifest manifest8 = explodedArchive0.manifest;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntry fileEntry9 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntry();
        java.io.File file10 = fileEntry9.file;
        java.lang.String str11 = fileEntry9.name;
        java.io.File file12 = fileEntry9.file;
        java.io.File file13 = fileEntry9.file;
        java.lang.String str14 = fileEntry9.name;
        java.io.File file15 = fileEntry9.getFile();
        // The following exception was thrown during execution in test generation
        try {
            org.springframework.boot.loader.archive.Archive archive16 = explodedArchive0.getNestedArchive((org.springframework.boot.loader.archive.Archive.Entry) fileEntry9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file7.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file7.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file15);
    }

    @Test
    public void test686() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test686");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        boolean boolean1 = fileEntryIterator0.hasNext();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator2 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator3 = entryComparator2.reversed();
        java.util.Comparator<java.io.File> fileComparator4 = fileComparator3.reversed();
        fileEntryIterator0.entryComparator = fileComparator4;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive6 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file7 = explodedArchive6.root;
        java.io.File file8 = null;
        explodedArchive6.manifestFile = file8;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive10 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest11 = explodedArchive10.manifest;
        explodedArchive10.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive14 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest15 = explodedArchive14.manifest;
        explodedArchive14.recursive = false;
        java.util.jar.Manifest manifest18 = explodedArchive14.manifest;
        java.io.File file19 = explodedArchive14.manifestFile;
        java.io.File file20 = null;
        java.io.File file21 = explodedArchive14.getManifestFile(file20);
        explodedArchive10.manifestFile = file20;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive23 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest24 = explodedArchive23.manifest;
        explodedArchive23.recursive = false;
        java.util.jar.Manifest manifest27 = explodedArchive23.manifest;
        java.io.File file28 = explodedArchive23.manifestFile;
        java.io.File file29 = null;
        java.io.File file30 = explodedArchive23.getManifestFile(file29);
        explodedArchive10.manifestFile = file30;
        java.io.File file32 = explodedArchive6.getManifestFile(file30);
        java.util.Iterator<java.io.File> fileItor33 = fileEntryIterator0.listFiles(file32);
        boolean boolean34 = fileEntryIterator0.recursive;
        java.util.Deque<java.util.Iterator<java.io.File>> fileItorQueue35 = fileEntryIterator0.stack;
        fileEntryIterator0.recursive = false;
        java.io.File file38 = fileEntryIterator0.root;
        fileEntryIterator0.recursive = false;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file21.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file21.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file30.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file30.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file32.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file32.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItorQueue35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file38);
    }

    @Test
    public void test687() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test687");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest1 = explodedArchive0.manifest;
        explodedArchive0.recursive = false;
        java.util.jar.Manifest manifest4 = explodedArchive0.manifest;
        java.io.File file5 = explodedArchive0.manifestFile;
        java.io.File file6 = null;
        java.io.File file7 = explodedArchive0.getManifestFile(file6);
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive8 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.lang.String str9 = explodedArchive8.toString();
        explodedArchive8.recursive = true;
        java.io.File file12 = null;
        java.io.File file13 = explodedArchive8.getManifestFile(file12);
        explodedArchive0.manifestFile = file13;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator<org.springframework.boot.loader.archive.Archive.Entry> entryItor15 = explodedArchive0.iterator();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file7.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file7.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str9 + "' != '" + "exploded archive" + "'", str9.equals("exploded archive"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file13.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file13.toString(), "META-INF/MANIFEST.MF");
    }

    @Test
    public void test688() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test688");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file1 = null;
        fileEntryIterator0.current = file1;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive3 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.lang.String str4 = explodedArchive3.toString();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive5 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file6 = explodedArchive5.root;
        java.io.File file7 = null;
        explodedArchive5.manifestFile = file7;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive9 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest10 = explodedArchive9.manifest;
        explodedArchive9.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive13 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest14 = explodedArchive13.manifest;
        explodedArchive13.recursive = false;
        java.util.jar.Manifest manifest17 = explodedArchive13.manifest;
        java.io.File file18 = explodedArchive13.manifestFile;
        java.io.File file19 = null;
        java.io.File file20 = explodedArchive13.getManifestFile(file19);
        explodedArchive9.manifestFile = file19;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive22 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest23 = explodedArchive22.manifest;
        explodedArchive22.recursive = false;
        java.util.jar.Manifest manifest26 = explodedArchive22.manifest;
        java.io.File file27 = explodedArchive22.manifestFile;
        java.io.File file28 = null;
        java.io.File file29 = explodedArchive22.getManifestFile(file28);
        explodedArchive9.manifestFile = file29;
        java.io.File file31 = explodedArchive5.getManifestFile(file29);
        java.io.File file32 = explodedArchive3.getManifestFile(file29);
        fileEntryIterator0.root = file29;
        boolean boolean34 = fileEntryIterator0.recursive;
        fileEntryIterator0.recursive = true;
        java.io.File file37 = fileEntryIterator0.root;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str4 + "' != '" + "exploded archive" + "'", str4.equals("exploded archive"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file20.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file20.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file29.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file29.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file31.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file31.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file32.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file32.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file37.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file37.toString(), "META-INF/MANIFEST.MF");
    }

    @Test
    public void test689() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test689");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.lang.String str1 = explodedArchive0.toString();
        explodedArchive0.recursive = true;
        java.io.File file4 = explodedArchive0.manifestFile;
        java.io.File file5 = explodedArchive0.root;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str1 + "' != '" + "exploded archive" + "'", str1.equals("exploded archive"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file5);
    }

    @Test
    public void test690() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test690");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file1 = null;
        fileEntryIterator0.current = file1;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive3 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest4 = explodedArchive3.manifest;
        explodedArchive3.recursive = false;
        java.util.jar.Manifest manifest7 = explodedArchive3.manifest;
        java.io.File file8 = explodedArchive3.manifestFile;
        java.io.File file9 = null;
        java.io.File file10 = explodedArchive3.getManifestFile(file9);
        java.util.Iterator<java.io.File> fileItor11 = fileEntryIterator0.listFiles(file10);
        java.io.File file12 = fileEntryIterator0.root;
        java.io.File file13 = fileEntryIterator0.poll();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive14 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.lang.String str15 = explodedArchive14.toString();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive16 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file17 = explodedArchive16.root;
        java.io.File file18 = null;
        explodedArchive16.manifestFile = file18;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive20 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest21 = explodedArchive20.manifest;
        explodedArchive20.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive24 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest25 = explodedArchive24.manifest;
        explodedArchive24.recursive = false;
        java.util.jar.Manifest manifest28 = explodedArchive24.manifest;
        java.io.File file29 = explodedArchive24.manifestFile;
        java.io.File file30 = null;
        java.io.File file31 = explodedArchive24.getManifestFile(file30);
        explodedArchive20.manifestFile = file30;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive33 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest34 = explodedArchive33.manifest;
        explodedArchive33.recursive = false;
        java.util.jar.Manifest manifest37 = explodedArchive33.manifest;
        java.io.File file38 = explodedArchive33.manifestFile;
        java.io.File file39 = null;
        java.io.File file40 = explodedArchive33.getManifestFile(file39);
        explodedArchive20.manifestFile = file40;
        java.io.File file42 = explodedArchive16.getManifestFile(file40);
        java.io.File file43 = explodedArchive14.getManifestFile(file40);
        java.io.File file44 = null;
        java.io.File file45 = explodedArchive14.getManifestFile(file44);
        fileEntryIterator0.current = file44;
        java.io.File file47 = fileEntryIterator0.current;
        // The following exception was thrown during execution in test generation
        try {
            org.springframework.boot.loader.archive.Archive.Entry entry48 = fileEntryIterator0.next();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str15 + "' != '" + "exploded archive" + "'", str15.equals("exploded archive"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file31.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file31.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file40.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file40.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file42.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file42.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file43.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file43.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file45.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file45.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file47);
    }

    @Test
    public void test691() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test691");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest1 = explodedArchive0.manifest;
        java.util.jar.Manifest manifest2 = null;
        explodedArchive0.manifest = manifest2;
        java.io.File file4 = explodedArchive0.root;
        explodedArchive0.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive7 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file8 = explodedArchive7.root;
        java.io.File file9 = null;
        explodedArchive7.manifestFile = file9;
        java.io.File file11 = explodedArchive7.root;
        java.lang.String str12 = explodedArchive7.toString();
        java.util.jar.Manifest manifest13 = null;
        explodedArchive7.manifest = manifest13;
        java.io.File file15 = explodedArchive7.root;
        boolean boolean16 = explodedArchive7.recursive;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive17 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest18 = explodedArchive17.manifest;
        explodedArchive17.recursive = false;
        java.io.File file21 = null;
        explodedArchive17.root = file21;
        java.io.File file23 = explodedArchive17.manifestFile;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive24 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file25 = explodedArchive24.root;
        java.io.File file26 = null;
        explodedArchive24.manifestFile = file26;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive28 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest29 = explodedArchive28.manifest;
        explodedArchive28.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive32 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest33 = explodedArchive32.manifest;
        explodedArchive32.recursive = false;
        java.util.jar.Manifest manifest36 = explodedArchive32.manifest;
        java.io.File file37 = explodedArchive32.manifestFile;
        java.io.File file38 = null;
        java.io.File file39 = explodedArchive32.getManifestFile(file38);
        explodedArchive28.manifestFile = file38;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive41 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest42 = explodedArchive41.manifest;
        explodedArchive41.recursive = false;
        java.util.jar.Manifest manifest45 = explodedArchive41.manifest;
        java.io.File file46 = explodedArchive41.manifestFile;
        java.io.File file47 = null;
        java.io.File file48 = explodedArchive41.getManifestFile(file47);
        explodedArchive28.manifestFile = file48;
        java.io.File file50 = explodedArchive24.getManifestFile(file48);
        java.io.File file51 = explodedArchive24.root;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator52 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        boolean boolean53 = fileEntryIterator52.hasNext();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator54 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator55 = entryComparator54.reversed();
        java.util.Comparator<java.io.File> fileComparator56 = fileComparator55.reversed();
        fileEntryIterator52.entryComparator = fileComparator56;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive58 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file59 = explodedArchive58.root;
        java.io.File file60 = null;
        explodedArchive58.manifestFile = file60;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive62 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest63 = explodedArchive62.manifest;
        explodedArchive62.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive66 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest67 = explodedArchive66.manifest;
        explodedArchive66.recursive = false;
        java.util.jar.Manifest manifest70 = explodedArchive66.manifest;
        java.io.File file71 = explodedArchive66.manifestFile;
        java.io.File file72 = null;
        java.io.File file73 = explodedArchive66.getManifestFile(file72);
        explodedArchive62.manifestFile = file72;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive75 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest76 = explodedArchive75.manifest;
        explodedArchive75.recursive = false;
        java.util.jar.Manifest manifest79 = explodedArchive75.manifest;
        java.io.File file80 = explodedArchive75.manifestFile;
        java.io.File file81 = null;
        java.io.File file82 = explodedArchive75.getManifestFile(file81);
        explodedArchive62.manifestFile = file82;
        java.io.File file84 = explodedArchive58.getManifestFile(file82);
        java.util.Iterator<java.io.File> fileItor85 = fileEntryIterator52.listFiles(file84);
        explodedArchive24.manifestFile = file84;
        java.io.File file87 = explodedArchive24.manifestFile;
        java.io.File file88 = explodedArchive17.getManifestFile(file87);
        java.io.File file89 = explodedArchive7.getManifestFile(file88);
        explodedArchive0.root = file88;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str12 + "' != '" + "exploded archive" + "'", str12.equals("exploded archive"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file39.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file39.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file48.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file48.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file50.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file50.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file73);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file73.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file73.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest76);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest79);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file80);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file82);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file82.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file82.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file84);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file84.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file84.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor85);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file87);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file87.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file87.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file88);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file88.getParent(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file88.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file89);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file89.getParent(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF/META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file89.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF/META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
    }

    @Test
    public void test692() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test692");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        boolean boolean1 = fileEntryIterator0.recursive;
        java.io.File file2 = fileEntryIterator0.current;
        boolean boolean3 = fileEntryIterator0.hasNext();
        boolean boolean4 = fileEntryIterator0.recursive;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator5 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator6 = entryComparator5.reversed();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator7 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator8 = entryComparator7.reversed();
        java.util.Comparator<java.io.File> fileComparator9 = entryComparator5.thenComparing(fileComparator8);
        fileEntryIterator0.entryComparator = fileComparator9;
        java.io.File file11 = fileEntryIterator0.current;
        java.io.File file12 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator<java.io.File> fileItor13 = fileEntryIterator0.listFiles(file12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file11);
    }

    @Test
    public void test693() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test693");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file1 = explodedArchive0.root;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive2 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest3 = explodedArchive2.manifest;
        explodedArchive2.recursive = false;
        java.util.jar.Manifest manifest6 = explodedArchive2.manifest;
        java.io.File file7 = explodedArchive2.manifestFile;
        java.io.File file8 = null;
        java.io.File file9 = explodedArchive2.getManifestFile(file8);
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator10 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file11 = null;
        fileEntryIterator10.current = file11;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive13 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.lang.String str14 = explodedArchive13.toString();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive15 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file16 = explodedArchive15.root;
        java.io.File file17 = null;
        explodedArchive15.manifestFile = file17;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive19 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest20 = explodedArchive19.manifest;
        explodedArchive19.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive23 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest24 = explodedArchive23.manifest;
        explodedArchive23.recursive = false;
        java.util.jar.Manifest manifest27 = explodedArchive23.manifest;
        java.io.File file28 = explodedArchive23.manifestFile;
        java.io.File file29 = null;
        java.io.File file30 = explodedArchive23.getManifestFile(file29);
        explodedArchive19.manifestFile = file29;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive32 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest33 = explodedArchive32.manifest;
        explodedArchive32.recursive = false;
        java.util.jar.Manifest manifest36 = explodedArchive32.manifest;
        java.io.File file37 = explodedArchive32.manifestFile;
        java.io.File file38 = null;
        java.io.File file39 = explodedArchive32.getManifestFile(file38);
        explodedArchive19.manifestFile = file39;
        java.io.File file41 = explodedArchive15.getManifestFile(file39);
        java.io.File file42 = explodedArchive13.getManifestFile(file39);
        fileEntryIterator10.root = file39;
        explodedArchive2.root = file39;
        java.io.File file45 = explodedArchive0.getManifestFile(file39);
        // The following exception was thrown during execution in test generation
        try {
            org.springframework.boot.loader.archive.ExplodedArchive explodedArchive46 = new org.springframework.boot.loader.archive.ExplodedArchive(file45);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid source folder META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file9.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file9.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str14 + "' != '" + "exploded archive" + "'", str14.equals("exploded archive"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file30.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file30.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file39.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file39.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file41.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file41.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file42.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file42.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file45.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file45.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
    }

    @Test
    public void test694() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test694");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file1 = null;
        fileEntryIterator0.current = file1;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive3 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest4 = explodedArchive3.manifest;
        explodedArchive3.recursive = false;
        java.util.jar.Manifest manifest7 = explodedArchive3.manifest;
        java.io.File file8 = explodedArchive3.manifestFile;
        java.io.File file9 = null;
        java.io.File file10 = explodedArchive3.getManifestFile(file9);
        java.util.Iterator<java.io.File> fileItor11 = fileEntryIterator0.listFiles(file10);
        java.io.File file12 = fileEntryIterator0.root;
        java.io.File file13 = fileEntryIterator0.root;
        java.io.File file14 = fileEntryIterator0.current;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator15 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        boolean boolean16 = fileEntryIterator15.hasNext();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator17 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator18 = entryComparator17.reversed();
        java.util.Comparator<java.io.File> fileComparator19 = fileComparator18.reversed();
        fileEntryIterator15.entryComparator = fileComparator19;
        java.util.Comparator<java.io.File> fileComparator21 = fileEntryIterator15.entryComparator;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator22 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator23 = entryComparator22.reversed();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator24 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator25 = entryComparator24.reversed();
        java.util.Comparator<java.io.File> fileComparator26 = entryComparator22.thenComparing(fileComparator25);
        java.util.Comparator<java.io.File> fileComparator27 = fileComparator21.thenComparing(fileComparator25);
        fileEntryIterator0.entryComparator = fileComparator21;
        java.util.Deque<java.util.Iterator<java.io.File>> fileItorQueue29 = fileEntryIterator0.stack;
        java.io.File file30 = fileEntryIterator0.current;
        java.io.File file31 = fileEntryIterator0.root;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntry fileEntry32 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntry();
        java.lang.String str33 = fileEntry32.getName();
        java.io.File file34 = fileEntry32.getFile();
        java.lang.String str35 = fileEntry32.getName();
        java.lang.String str36 = fileEntry32.getName();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator37 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        boolean boolean38 = fileEntryIterator37.recursive;
        java.io.File file39 = fileEntryIterator37.current;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator40 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file41 = null;
        fileEntryIterator40.current = file41;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive43 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest44 = explodedArchive43.manifest;
        explodedArchive43.recursive = false;
        java.util.jar.Manifest manifest47 = explodedArchive43.manifest;
        java.io.File file48 = explodedArchive43.manifestFile;
        java.io.File file49 = null;
        java.io.File file50 = explodedArchive43.getManifestFile(file49);
        java.util.Iterator<java.io.File> fileItor51 = fileEntryIterator40.listFiles(file50);
        java.io.File file52 = fileEntryIterator40.root;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive53 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.lang.String str54 = explodedArchive53.toString();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive55 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file56 = explodedArchive55.root;
        java.io.File file57 = null;
        explodedArchive55.manifestFile = file57;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive59 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest60 = explodedArchive59.manifest;
        explodedArchive59.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive63 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest64 = explodedArchive63.manifest;
        explodedArchive63.recursive = false;
        java.util.jar.Manifest manifest67 = explodedArchive63.manifest;
        java.io.File file68 = explodedArchive63.manifestFile;
        java.io.File file69 = null;
        java.io.File file70 = explodedArchive63.getManifestFile(file69);
        explodedArchive59.manifestFile = file69;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive72 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest73 = explodedArchive72.manifest;
        explodedArchive72.recursive = false;
        java.util.jar.Manifest manifest76 = explodedArchive72.manifest;
        java.io.File file77 = explodedArchive72.manifestFile;
        java.io.File file78 = null;
        java.io.File file79 = explodedArchive72.getManifestFile(file78);
        explodedArchive59.manifestFile = file79;
        java.io.File file81 = explodedArchive55.getManifestFile(file79);
        java.io.File file82 = explodedArchive53.getManifestFile(file79);
        fileEntryIterator40.root = file79;
        java.util.Iterator<java.io.File> fileItor84 = fileEntryIterator37.listFiles(file79);
        fileEntry32.file = file79;
        fileEntryIterator0.root = file79;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItorQueue29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file50.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file50.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str54 + "' != '" + "exploded archive" + "'", str54.equals("exploded archive"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file70.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file70.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest73);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest76);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file77);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file79);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file79.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file79.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file81);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file81.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file81.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file82);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file82.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file82.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor84);
    }

    @Test
    public void test695() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test695");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest1 = explodedArchive0.manifest;
        explodedArchive0.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive4 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest5 = explodedArchive4.manifest;
        explodedArchive4.recursive = false;
        java.util.jar.Manifest manifest8 = explodedArchive4.manifest;
        java.io.File file9 = explodedArchive4.manifestFile;
        java.io.File file10 = null;
        java.io.File file11 = explodedArchive4.getManifestFile(file10);
        explodedArchive0.manifestFile = file10;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive13 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest14 = explodedArchive13.manifest;
        explodedArchive13.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive17 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest18 = explodedArchive17.manifest;
        explodedArchive17.recursive = false;
        java.util.jar.Manifest manifest21 = explodedArchive17.manifest;
        java.io.File file22 = explodedArchive17.manifestFile;
        java.io.File file23 = null;
        java.io.File file24 = explodedArchive17.getManifestFile(file23);
        explodedArchive13.manifestFile = file23;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive26 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest27 = explodedArchive26.manifest;
        explodedArchive26.recursive = false;
        java.util.jar.Manifest manifest30 = explodedArchive26.manifest;
        java.io.File file31 = explodedArchive26.manifestFile;
        java.io.File file32 = null;
        java.io.File file33 = explodedArchive26.getManifestFile(file32);
        explodedArchive13.manifestFile = file33;
        explodedArchive0.root = file33;
        java.net.URL uRL36 = explodedArchive0.getUrl();
        java.util.jar.Manifest manifest37 = null;
        explodedArchive0.manifest = manifest37;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntry fileEntry39 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntry();
        java.io.File file40 = fileEntry39.file;
        java.lang.String str41 = fileEntry39.name;
        java.io.File file42 = fileEntry39.file;
        java.io.File file43 = fileEntry39.file;
        java.lang.String str44 = fileEntry39.name;
        java.lang.String str45 = fileEntry39.getName();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntry fileEntry46 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntry();
        java.io.File file47 = fileEntry46.getFile();
        java.io.File file48 = fileEntry46.getFile();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive49 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file50 = explodedArchive49.root;
        java.io.File file51 = null;
        explodedArchive49.manifestFile = file51;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive53 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest54 = explodedArchive53.manifest;
        explodedArchive53.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive57 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest58 = explodedArchive57.manifest;
        explodedArchive57.recursive = false;
        java.util.jar.Manifest manifest61 = explodedArchive57.manifest;
        java.io.File file62 = explodedArchive57.manifestFile;
        java.io.File file63 = null;
        java.io.File file64 = explodedArchive57.getManifestFile(file63);
        explodedArchive53.manifestFile = file63;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive66 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest67 = explodedArchive66.manifest;
        explodedArchive66.recursive = false;
        java.util.jar.Manifest manifest70 = explodedArchive66.manifest;
        java.io.File file71 = explodedArchive66.manifestFile;
        java.io.File file72 = null;
        java.io.File file73 = explodedArchive66.getManifestFile(file72);
        explodedArchive53.manifestFile = file73;
        java.io.File file75 = explodedArchive49.getManifestFile(file73);
        fileEntry46.file = file75;
        java.io.File file77 = fileEntry46.file;
        fileEntry46.name = "exploded archive";
        java.io.File file80 = fileEntry46.file;
        java.io.File file81 = fileEntry46.getFile();
        java.io.File file82 = fileEntry46.file;
        fileEntry39.file = file82;
        // The following exception was thrown during execution in test generation
        try {
            org.springframework.boot.loader.archive.Archive archive84 = explodedArchive0.getNestedArchive((org.springframework.boot.loader.archive.Archive.Entry) fileEntry39);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: File must exist");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file11.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file11.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file24.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file24.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file33.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file33.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(uRL36);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(uRL36.toString(), "file:/server/study-execution/new-nimrod/nimrod-hunoroutput-test-dest/spring-boot/af20dc6cc45c032573413c401f9f73aa75371744/randoop_1/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file64.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file64.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file73);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file73.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file73.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file75);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file75.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file75.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file77);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file77.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file77.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file80);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file80.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file80.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file81);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file81.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file81.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file82);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file82.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file82.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
    }

    @Test
    public void test696() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test696");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest1 = explodedArchive0.manifest;
        explodedArchive0.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive4 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest5 = explodedArchive4.manifest;
        explodedArchive4.recursive = false;
        java.util.jar.Manifest manifest8 = explodedArchive4.manifest;
        java.io.File file9 = explodedArchive4.manifestFile;
        java.io.File file10 = null;
        java.io.File file11 = explodedArchive4.getManifestFile(file10);
        explodedArchive0.manifestFile = file10;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive13 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest14 = explodedArchive13.manifest;
        explodedArchive13.recursive = false;
        java.util.jar.Manifest manifest17 = explodedArchive13.manifest;
        java.io.File file18 = explodedArchive13.manifestFile;
        java.io.File file19 = null;
        java.io.File file20 = explodedArchive13.getManifestFile(file19);
        explodedArchive0.manifestFile = file20;
        java.io.File file22 = explodedArchive0.manifestFile;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator<org.springframework.boot.loader.archive.Archive.Entry> entryItor23 = explodedArchive0.iterator();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file11.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file11.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file20.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file20.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file22.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file22.toString(), "META-INF/MANIFEST.MF");
    }

    @Test
    public void test697() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test697");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest1 = explodedArchive0.manifest;
        explodedArchive0.recursive = false;
        java.util.jar.Manifest manifest4 = explodedArchive0.manifest;
        java.io.File file5 = explodedArchive0.manifestFile;
        java.io.File file6 = null;
        java.io.File file7 = explodedArchive0.getManifestFile(file6);
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator8 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file9 = null;
        fileEntryIterator8.current = file9;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive11 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.lang.String str12 = explodedArchive11.toString();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive13 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file14 = explodedArchive13.root;
        java.io.File file15 = null;
        explodedArchive13.manifestFile = file15;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive17 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest18 = explodedArchive17.manifest;
        explodedArchive17.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive21 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest22 = explodedArchive21.manifest;
        explodedArchive21.recursive = false;
        java.util.jar.Manifest manifest25 = explodedArchive21.manifest;
        java.io.File file26 = explodedArchive21.manifestFile;
        java.io.File file27 = null;
        java.io.File file28 = explodedArchive21.getManifestFile(file27);
        explodedArchive17.manifestFile = file27;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive30 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest31 = explodedArchive30.manifest;
        explodedArchive30.recursive = false;
        java.util.jar.Manifest manifest34 = explodedArchive30.manifest;
        java.io.File file35 = explodedArchive30.manifestFile;
        java.io.File file36 = null;
        java.io.File file37 = explodedArchive30.getManifestFile(file36);
        explodedArchive17.manifestFile = file37;
        java.io.File file39 = explodedArchive13.getManifestFile(file37);
        java.io.File file40 = explodedArchive11.getManifestFile(file37);
        fileEntryIterator8.root = file37;
        explodedArchive0.root = file37;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntry fileEntry43 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntry();
        java.lang.String str44 = fileEntry43.name;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator45 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file46 = null;
        fileEntryIterator45.current = file46;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive48 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.lang.String str49 = explodedArchive48.toString();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive50 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file51 = explodedArchive50.root;
        java.io.File file52 = null;
        explodedArchive50.manifestFile = file52;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive54 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest55 = explodedArchive54.manifest;
        explodedArchive54.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive58 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest59 = explodedArchive58.manifest;
        explodedArchive58.recursive = false;
        java.util.jar.Manifest manifest62 = explodedArchive58.manifest;
        java.io.File file63 = explodedArchive58.manifestFile;
        java.io.File file64 = null;
        java.io.File file65 = explodedArchive58.getManifestFile(file64);
        explodedArchive54.manifestFile = file64;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive67 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest68 = explodedArchive67.manifest;
        explodedArchive67.recursive = false;
        java.util.jar.Manifest manifest71 = explodedArchive67.manifest;
        java.io.File file72 = explodedArchive67.manifestFile;
        java.io.File file73 = null;
        java.io.File file74 = explodedArchive67.getManifestFile(file73);
        explodedArchive54.manifestFile = file74;
        java.io.File file76 = explodedArchive50.getManifestFile(file74);
        java.io.File file77 = explodedArchive48.getManifestFile(file74);
        fileEntryIterator45.root = file74;
        fileEntry43.file = file74;
        java.io.File file80 = explodedArchive0.getManifestFile(file74);
        explodedArchive0.recursive = true;
        boolean boolean83 = explodedArchive0.recursive;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file7.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file7.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str12 + "' != '" + "exploded archive" + "'", str12.equals("exploded archive"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file28.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file28.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file37.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file37.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file39.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file39.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file40.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file40.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str49 + "' != '" + "exploded archive" + "'", str49.equals("exploded archive"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file65.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file65.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file74.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file74.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file76);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file76.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file76.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file77);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file77.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file77.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file80);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file80.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file80.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
    }

    @Test
    public void test698() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test698");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator1 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        boolean boolean2 = fileEntryIterator1.recursive;
        java.io.File file3 = fileEntryIterator1.current;
        boolean boolean4 = fileEntryIterator1.hasNext();
        boolean boolean5 = fileEntryIterator1.recursive;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive6 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file7 = explodedArchive6.root;
        java.io.File file8 = explodedArchive6.manifestFile;
        java.util.jar.Manifest manifest9 = null;
        explodedArchive6.manifest = manifest9;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive11 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file12 = explodedArchive11.root;
        java.io.File file13 = null;
        explodedArchive11.manifestFile = file13;
        java.io.File file15 = explodedArchive11.root;
        java.lang.String str16 = explodedArchive11.toString();
        java.util.jar.Manifest manifest17 = null;
        explodedArchive11.manifest = manifest17;
        java.io.File file19 = explodedArchive11.root;
        boolean boolean20 = explodedArchive11.recursive;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive21 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest22 = explodedArchive21.manifest;
        explodedArchive21.recursive = false;
        java.io.File file25 = null;
        explodedArchive21.root = file25;
        java.io.File file27 = explodedArchive21.manifestFile;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive28 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file29 = explodedArchive28.root;
        java.io.File file30 = null;
        explodedArchive28.manifestFile = file30;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive32 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest33 = explodedArchive32.manifest;
        explodedArchive32.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive36 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest37 = explodedArchive36.manifest;
        explodedArchive36.recursive = false;
        java.util.jar.Manifest manifest40 = explodedArchive36.manifest;
        java.io.File file41 = explodedArchive36.manifestFile;
        java.io.File file42 = null;
        java.io.File file43 = explodedArchive36.getManifestFile(file42);
        explodedArchive32.manifestFile = file42;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive45 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest46 = explodedArchive45.manifest;
        explodedArchive45.recursive = false;
        java.util.jar.Manifest manifest49 = explodedArchive45.manifest;
        java.io.File file50 = explodedArchive45.manifestFile;
        java.io.File file51 = null;
        java.io.File file52 = explodedArchive45.getManifestFile(file51);
        explodedArchive32.manifestFile = file52;
        java.io.File file54 = explodedArchive28.getManifestFile(file52);
        java.io.File file55 = explodedArchive28.root;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator56 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        boolean boolean57 = fileEntryIterator56.hasNext();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator58 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator59 = entryComparator58.reversed();
        java.util.Comparator<java.io.File> fileComparator60 = fileComparator59.reversed();
        fileEntryIterator56.entryComparator = fileComparator60;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive62 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file63 = explodedArchive62.root;
        java.io.File file64 = null;
        explodedArchive62.manifestFile = file64;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive66 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest67 = explodedArchive66.manifest;
        explodedArchive66.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive70 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest71 = explodedArchive70.manifest;
        explodedArchive70.recursive = false;
        java.util.jar.Manifest manifest74 = explodedArchive70.manifest;
        java.io.File file75 = explodedArchive70.manifestFile;
        java.io.File file76 = null;
        java.io.File file77 = explodedArchive70.getManifestFile(file76);
        explodedArchive66.manifestFile = file76;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive79 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest80 = explodedArchive79.manifest;
        explodedArchive79.recursive = false;
        java.util.jar.Manifest manifest83 = explodedArchive79.manifest;
        java.io.File file84 = explodedArchive79.manifestFile;
        java.io.File file85 = null;
        java.io.File file86 = explodedArchive79.getManifestFile(file85);
        explodedArchive66.manifestFile = file86;
        java.io.File file88 = explodedArchive62.getManifestFile(file86);
        java.util.Iterator<java.io.File> fileItor89 = fileEntryIterator56.listFiles(file88);
        explodedArchive28.manifestFile = file88;
        java.io.File file91 = explodedArchive28.manifestFile;
        java.io.File file92 = explodedArchive21.getManifestFile(file91);
        java.io.File file93 = explodedArchive11.getManifestFile(file92);
        explodedArchive6.manifestFile = file93;
        fileEntryIterator1.root = file93;
        java.io.File file96 = explodedArchive0.getManifestFile(file93);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str16 + "' != '" + "exploded archive" + "'", str16.equals("exploded archive"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file43.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file43.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file52.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file52.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file54.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file54.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file75);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file77);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file77.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file77.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest80);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest83);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file84);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file86);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file86.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file86.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file88);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file88.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file88.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor89);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file91);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file91.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file91.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file92);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file92.getParent(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file92.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file93);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file93.getParent(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF/META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file93.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF/META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file96);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file96.getParent(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF/META-INF/MANIFEST.MF/META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file96.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF/META-INF/MANIFEST.MF/META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
    }

    @Test
    public void test699() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test699");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest1 = explodedArchive0.manifest;
        explodedArchive0.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive4 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest5 = explodedArchive4.manifest;
        explodedArchive4.recursive = false;
        java.util.jar.Manifest manifest8 = explodedArchive4.manifest;
        java.io.File file9 = explodedArchive4.manifestFile;
        java.io.File file10 = null;
        java.io.File file11 = explodedArchive4.getManifestFile(file10);
        explodedArchive0.manifestFile = file10;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive13 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest14 = explodedArchive13.manifest;
        explodedArchive13.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive17 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest18 = explodedArchive17.manifest;
        explodedArchive17.recursive = false;
        java.util.jar.Manifest manifest21 = explodedArchive17.manifest;
        java.io.File file22 = explodedArchive17.manifestFile;
        java.io.File file23 = null;
        java.io.File file24 = explodedArchive17.getManifestFile(file23);
        explodedArchive13.manifestFile = file23;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive26 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest27 = explodedArchive26.manifest;
        explodedArchive26.recursive = false;
        java.util.jar.Manifest manifest30 = explodedArchive26.manifest;
        java.io.File file31 = explodedArchive26.manifestFile;
        java.io.File file32 = null;
        java.io.File file33 = explodedArchive26.getManifestFile(file32);
        explodedArchive13.manifestFile = file33;
        explodedArchive0.root = file33;
        java.net.URL uRL36 = explodedArchive0.getUrl();
        java.util.jar.Manifest manifest37 = explodedArchive0.manifest;
        java.util.jar.Manifest manifest38 = null;
        explodedArchive0.manifest = manifest38;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file11.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file11.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file24.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file24.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file33.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file33.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(uRL36);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(uRL36.toString(), "file:/server/study-execution/new-nimrod/nimrod-hunoroutput-test-dest/spring-boot/af20dc6cc45c032573413c401f9f73aa75371744/randoop_1/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest37);
    }

    @Test
    public void test700() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test700");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.lang.String str1 = explodedArchive0.toString();
        explodedArchive0.recursive = true;
        java.io.File file4 = null;
        java.io.File file5 = explodedArchive0.getManifestFile(file4);
        java.lang.String str6 = explodedArchive0.toString();
        org.springframework.boot.loader.archive.Archive.EntryFilter entryFilter7 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<org.springframework.boot.loader.archive.Archive> archiveList8 = explodedArchive0.getNestedArchives(entryFilter7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str1 + "' != '" + "exploded archive" + "'", str1.equals("exploded archive"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file5.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file5.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "exploded archive" + "'", str6.equals("exploded archive"));
    }

    @Test
    public void test701() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test701");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntry fileEntry0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntry();
        java.io.File file1 = fileEntry0.file;
        java.lang.String str2 = fileEntry0.name;
        java.io.File file3 = fileEntry0.file;
        java.io.File file4 = fileEntry0.file;
        java.lang.String str5 = fileEntry0.getName();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntry fileEntry6 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntry();
        java.lang.String str7 = fileEntry6.name;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator8 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file9 = null;
        fileEntryIterator8.current = file9;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive11 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.lang.String str12 = explodedArchive11.toString();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive13 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file14 = explodedArchive13.root;
        java.io.File file15 = null;
        explodedArchive13.manifestFile = file15;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive17 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest18 = explodedArchive17.manifest;
        explodedArchive17.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive21 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest22 = explodedArchive21.manifest;
        explodedArchive21.recursive = false;
        java.util.jar.Manifest manifest25 = explodedArchive21.manifest;
        java.io.File file26 = explodedArchive21.manifestFile;
        java.io.File file27 = null;
        java.io.File file28 = explodedArchive21.getManifestFile(file27);
        explodedArchive17.manifestFile = file27;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive30 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest31 = explodedArchive30.manifest;
        explodedArchive30.recursive = false;
        java.util.jar.Manifest manifest34 = explodedArchive30.manifest;
        java.io.File file35 = explodedArchive30.manifestFile;
        java.io.File file36 = null;
        java.io.File file37 = explodedArchive30.getManifestFile(file36);
        explodedArchive17.manifestFile = file37;
        java.io.File file39 = explodedArchive13.getManifestFile(file37);
        java.io.File file40 = explodedArchive11.getManifestFile(file37);
        fileEntryIterator8.root = file37;
        fileEntry6.file = file37;
        fileEntry0.file = file37;
        fileEntry0.name = "exploded archive";
        boolean boolean46 = fileEntry0.isDirectory();
        java.io.File file47 = fileEntry0.getFile();
        boolean boolean48 = fileEntry0.isDirectory();
        java.lang.String str49 = fileEntry0.getName();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str12 + "' != '" + "exploded archive" + "'", str12.equals("exploded archive"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file28.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file28.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file37.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file37.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file39.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file39.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file40.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file40.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file47.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file47.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str49 + "' != '" + "exploded archive" + "'", str49.equals("exploded archive"));
    }

    @Test
    public void test702() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test702");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file1 = null;
        fileEntryIterator0.current = file1;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive3 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest4 = explodedArchive3.manifest;
        explodedArchive3.recursive = false;
        java.util.jar.Manifest manifest7 = explodedArchive3.manifest;
        java.io.File file8 = explodedArchive3.manifestFile;
        java.io.File file9 = null;
        java.io.File file10 = explodedArchive3.getManifestFile(file9);
        java.util.Iterator<java.io.File> fileItor11 = fileEntryIterator0.listFiles(file10);
        java.io.File file12 = fileEntryIterator0.root;
        java.io.File file13 = fileEntryIterator0.root;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive14 = new org.springframework.boot.loader.archive.ExplodedArchive();
        boolean boolean15 = explodedArchive14.recursive;
        boolean boolean16 = explodedArchive14.recursive;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive17 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file18 = explodedArchive17.root;
        java.io.File file19 = null;
        explodedArchive17.manifestFile = file19;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive21 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest22 = explodedArchive21.manifest;
        explodedArchive21.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive25 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest26 = explodedArchive25.manifest;
        explodedArchive25.recursive = false;
        java.util.jar.Manifest manifest29 = explodedArchive25.manifest;
        java.io.File file30 = explodedArchive25.manifestFile;
        java.io.File file31 = null;
        java.io.File file32 = explodedArchive25.getManifestFile(file31);
        explodedArchive21.manifestFile = file31;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive34 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest35 = explodedArchive34.manifest;
        explodedArchive34.recursive = false;
        java.util.jar.Manifest manifest38 = explodedArchive34.manifest;
        java.io.File file39 = explodedArchive34.manifestFile;
        java.io.File file40 = null;
        java.io.File file41 = explodedArchive34.getManifestFile(file40);
        explodedArchive21.manifestFile = file41;
        java.io.File file43 = explodedArchive17.getManifestFile(file41);
        explodedArchive14.manifestFile = file41;
        fileEntryIterator0.current = file41;
        java.io.File file46 = fileEntryIterator0.current;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file32.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file32.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file41.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file41.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file43.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file43.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file46.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file46.toString(), "META-INF/MANIFEST.MF");
    }

    @Test
    public void test703() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test703");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file1 = null;
        fileEntryIterator0.current = file1;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive3 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest4 = explodedArchive3.manifest;
        explodedArchive3.recursive = false;
        java.util.jar.Manifest manifest7 = explodedArchive3.manifest;
        java.io.File file8 = explodedArchive3.manifestFile;
        java.io.File file9 = null;
        java.io.File file10 = explodedArchive3.getManifestFile(file9);
        java.util.Iterator<java.io.File> fileItor11 = fileEntryIterator0.listFiles(file10);
        fileEntryIterator0.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntry fileEntry14 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntry();
        java.lang.String str15 = fileEntry14.name;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator16 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file17 = null;
        fileEntryIterator16.current = file17;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive19 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest20 = explodedArchive19.manifest;
        explodedArchive19.recursive = false;
        java.util.jar.Manifest manifest23 = explodedArchive19.manifest;
        java.io.File file24 = explodedArchive19.manifestFile;
        java.io.File file25 = null;
        java.io.File file26 = explodedArchive19.getManifestFile(file25);
        java.util.Iterator<java.io.File> fileItor27 = fileEntryIterator16.listFiles(file26);
        java.io.File file28 = fileEntryIterator16.current;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator29 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file30 = null;
        fileEntryIterator29.current = file30;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive32 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest33 = explodedArchive32.manifest;
        explodedArchive32.recursive = false;
        java.util.jar.Manifest manifest36 = explodedArchive32.manifest;
        java.io.File file37 = explodedArchive32.manifestFile;
        java.io.File file38 = null;
        java.io.File file39 = explodedArchive32.getManifestFile(file38);
        java.util.Iterator<java.io.File> fileItor40 = fileEntryIterator29.listFiles(file39);
        java.util.ArrayDeque<java.util.Iterator<java.io.File>> fileItorQueue41 = new java.util.ArrayDeque<java.util.Iterator<java.io.File>>();
        boolean boolean42 = fileItorQueue41.add(fileItor40);
        fileEntryIterator16.stack = fileItorQueue41;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive44 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest45 = explodedArchive44.manifest;
        explodedArchive44.recursive = false;
        java.io.File file48 = null;
        explodedArchive44.root = file48;
        java.io.File file50 = explodedArchive44.root;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive51 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest52 = explodedArchive51.manifest;
        explodedArchive51.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive55 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest56 = explodedArchive55.manifest;
        explodedArchive55.recursive = false;
        java.util.jar.Manifest manifest59 = explodedArchive55.manifest;
        java.io.File file60 = explodedArchive55.manifestFile;
        java.io.File file61 = null;
        java.io.File file62 = explodedArchive55.getManifestFile(file61);
        explodedArchive51.manifestFile = file61;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive64 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest65 = explodedArchive64.manifest;
        explodedArchive64.recursive = false;
        java.util.jar.Manifest manifest68 = explodedArchive64.manifest;
        java.io.File file69 = explodedArchive64.manifestFile;
        java.io.File file70 = null;
        java.io.File file71 = explodedArchive64.getManifestFile(file70);
        explodedArchive51.manifestFile = file71;
        java.io.File file73 = explodedArchive44.getManifestFile(file71);
        fileEntryIterator16.root = file71;
        fileEntry14.file = file71;
        boolean boolean76 = fileEntry14.isDirectory();
        boolean boolean77 = fileEntry14.isDirectory();
        fileEntry14.name = "";
        java.io.File file80 = fileEntry14.file;
        java.util.Iterator<java.io.File> fileItor81 = fileEntryIterator0.listFiles(file80);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file26.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file26.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file39.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file39.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file62.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file62.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file71.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file71.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file73);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file73.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file73.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file80);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file80.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file80.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor81);
    }

    @Test
    public void test704() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test704");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest1 = explodedArchive0.manifest;
        explodedArchive0.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive4 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest5 = explodedArchive4.manifest;
        explodedArchive4.recursive = false;
        java.util.jar.Manifest manifest8 = explodedArchive4.manifest;
        java.io.File file9 = explodedArchive4.manifestFile;
        java.io.File file10 = null;
        java.io.File file11 = explodedArchive4.getManifestFile(file10);
        explodedArchive0.manifestFile = file10;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive13 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest14 = explodedArchive13.manifest;
        explodedArchive13.recursive = false;
        java.util.jar.Manifest manifest17 = explodedArchive13.manifest;
        java.io.File file18 = explodedArchive13.manifestFile;
        java.io.File file19 = null;
        java.io.File file20 = explodedArchive13.getManifestFile(file19);
        explodedArchive0.manifestFile = file20;
        boolean boolean22 = explodedArchive0.recursive;
        explodedArchive0.recursive = false;
        boolean boolean25 = explodedArchive0.recursive;
        java.util.jar.Manifest manifest26 = explodedArchive0.manifest;
        java.util.jar.Manifest manifest27 = explodedArchive0.manifest;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file11.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file11.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file20.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file20.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest27);
    }

    @Test
    public void test705() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test705");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntry fileEntry0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntry();
        java.io.File file1 = fileEntry0.file;
        java.lang.String str2 = fileEntry0.name;
        java.io.File file3 = fileEntry0.file;
        java.io.File file4 = fileEntry0.file;
        java.lang.String str5 = fileEntry0.getName();
        java.io.File file6 = fileEntry0.file;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file6);
    }

    @Test
    public void test706() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test706");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file1 = null;
        fileEntryIterator0.current = file1;
        fileEntryIterator0.recursive = true;
        fileEntryIterator0.recursive = true;
        boolean boolean7 = fileEntryIterator0.hasNext();
        fileEntryIterator0.recursive = false;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test707() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test707");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        boolean boolean1 = fileEntryIterator0.hasNext();
        java.io.File file2 = fileEntryIterator0.root;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator3 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file4 = null;
        fileEntryIterator3.current = file4;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive6 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest7 = explodedArchive6.manifest;
        explodedArchive6.recursive = false;
        java.util.jar.Manifest manifest10 = explodedArchive6.manifest;
        java.io.File file11 = explodedArchive6.manifestFile;
        java.io.File file12 = null;
        java.io.File file13 = explodedArchive6.getManifestFile(file12);
        java.util.Iterator<java.io.File> fileItor14 = fileEntryIterator3.listFiles(file13);
        java.io.File file15 = fileEntryIterator3.current;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator16 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file17 = null;
        fileEntryIterator16.current = file17;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive19 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest20 = explodedArchive19.manifest;
        explodedArchive19.recursive = false;
        java.util.jar.Manifest manifest23 = explodedArchive19.manifest;
        java.io.File file24 = explodedArchive19.manifestFile;
        java.io.File file25 = null;
        java.io.File file26 = explodedArchive19.getManifestFile(file25);
        java.util.Iterator<java.io.File> fileItor27 = fileEntryIterator16.listFiles(file26);
        java.util.ArrayDeque<java.util.Iterator<java.io.File>> fileItorQueue28 = new java.util.ArrayDeque<java.util.Iterator<java.io.File>>();
        boolean boolean29 = fileItorQueue28.add(fileItor27);
        fileEntryIterator3.stack = fileItorQueue28;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive31 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest32 = explodedArchive31.manifest;
        explodedArchive31.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive35 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest36 = explodedArchive35.manifest;
        explodedArchive35.recursive = false;
        java.util.jar.Manifest manifest39 = explodedArchive35.manifest;
        java.io.File file40 = explodedArchive35.manifestFile;
        java.io.File file41 = null;
        java.io.File file42 = explodedArchive35.getManifestFile(file41);
        explodedArchive31.manifestFile = file41;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive44 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest45 = explodedArchive44.manifest;
        explodedArchive44.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive48 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest49 = explodedArchive48.manifest;
        explodedArchive48.recursive = false;
        java.util.jar.Manifest manifest52 = explodedArchive48.manifest;
        java.io.File file53 = explodedArchive48.manifestFile;
        java.io.File file54 = null;
        java.io.File file55 = explodedArchive48.getManifestFile(file54);
        explodedArchive44.manifestFile = file54;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive57 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest58 = explodedArchive57.manifest;
        explodedArchive57.recursive = false;
        java.util.jar.Manifest manifest61 = explodedArchive57.manifest;
        java.io.File file62 = explodedArchive57.manifestFile;
        java.io.File file63 = null;
        java.io.File file64 = explodedArchive57.getManifestFile(file63);
        explodedArchive44.manifestFile = file64;
        explodedArchive31.root = file64;
        java.util.Iterator<java.io.File> fileItor67 = fileEntryIterator3.listFiles(file64);
        java.util.Comparator<java.io.File> fileComparator68 = fileEntryIterator3.entryComparator;
        fileEntryIterator0.entryComparator = fileComparator68;
        java.io.File file70 = fileEntryIterator0.root;
        java.io.File file71 = fileEntryIterator0.poll();
        java.io.File file72 = fileEntryIterator0.root;
        java.io.File file73 = fileEntryIterator0.root;
        fileEntryIterator0.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator76 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file77 = null;
        fileEntryIterator76.current = file77;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive79 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest80 = explodedArchive79.manifest;
        explodedArchive79.recursive = false;
        java.util.jar.Manifest manifest83 = explodedArchive79.manifest;
        java.io.File file84 = explodedArchive79.manifestFile;
        java.io.File file85 = null;
        java.io.File file86 = explodedArchive79.getManifestFile(file85);
        java.util.Iterator<java.io.File> fileItor87 = fileEntryIterator76.listFiles(file86);
        boolean boolean88 = fileEntryIterator76.hasNext();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator89 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator90 = entryComparator89.reversed();
        java.util.Comparator<java.io.File> fileComparator91 = entryComparator89.reversed();
        fileEntryIterator76.entryComparator = entryComparator89;
        fileEntryIterator0.entryComparator = entryComparator89;
        java.io.File file94 = fileEntryIterator0.current;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file13.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file13.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file26.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file26.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file42.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file42.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file55.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file55.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file64.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file64.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file73);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest80);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest83);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file84);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file86);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file86.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file86.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor87);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator90);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator91);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file94);
    }

    @Test
    public void test708() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test708");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest1 = explodedArchive0.manifest;
        java.util.jar.Manifest manifest2 = null;
        explodedArchive0.manifest = manifest2;
        java.io.File file4 = explodedArchive0.root;
        explodedArchive0.recursive = false;
        java.io.File file7 = explodedArchive0.manifestFile;
        java.lang.String str8 = explodedArchive0.toString();
        boolean boolean9 = explodedArchive0.recursive;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str8 + "' != '" + "exploded archive" + "'", str8.equals("exploded archive"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test709() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test709");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        boolean boolean1 = fileEntryIterator0.recursive;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator2 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        boolean boolean3 = fileEntryIterator2.hasNext();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator4 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator5 = entryComparator4.reversed();
        java.util.Comparator<java.io.File> fileComparator6 = fileComparator5.reversed();
        fileEntryIterator2.entryComparator = fileComparator6;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive8 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file9 = explodedArchive8.root;
        java.io.File file10 = null;
        explodedArchive8.manifestFile = file10;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive12 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest13 = explodedArchive12.manifest;
        explodedArchive12.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive16 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest17 = explodedArchive16.manifest;
        explodedArchive16.recursive = false;
        java.util.jar.Manifest manifest20 = explodedArchive16.manifest;
        java.io.File file21 = explodedArchive16.manifestFile;
        java.io.File file22 = null;
        java.io.File file23 = explodedArchive16.getManifestFile(file22);
        explodedArchive12.manifestFile = file22;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive25 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest26 = explodedArchive25.manifest;
        explodedArchive25.recursive = false;
        java.util.jar.Manifest manifest29 = explodedArchive25.manifest;
        java.io.File file30 = explodedArchive25.manifestFile;
        java.io.File file31 = null;
        java.io.File file32 = explodedArchive25.getManifestFile(file31);
        explodedArchive12.manifestFile = file32;
        java.io.File file34 = explodedArchive8.getManifestFile(file32);
        java.util.Iterator<java.io.File> fileItor35 = fileEntryIterator2.listFiles(file34);
        fileEntryIterator0.root = file34;
        java.io.File file37 = fileEntryIterator0.current;
        java.util.Comparator<java.io.File> fileComparator38 = fileEntryIterator0.entryComparator;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator39 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file40 = null;
        fileEntryIterator39.current = file40;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive42 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest43 = explodedArchive42.manifest;
        explodedArchive42.recursive = false;
        java.util.jar.Manifest manifest46 = explodedArchive42.manifest;
        java.io.File file47 = explodedArchive42.manifestFile;
        java.io.File file48 = null;
        java.io.File file49 = explodedArchive42.getManifestFile(file48);
        java.util.Iterator<java.io.File> fileItor50 = fileEntryIterator39.listFiles(file49);
        java.io.File file51 = fileEntryIterator39.root;
        java.io.File file52 = fileEntryIterator39.poll();
        java.util.Comparator<java.io.File> fileComparator53 = fileEntryIterator39.entryComparator;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator54 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        boolean boolean55 = fileEntryIterator54.hasNext();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator56 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator57 = entryComparator56.reversed();
        java.util.Comparator<java.io.File> fileComparator58 = fileComparator57.reversed();
        fileEntryIterator54.entryComparator = fileComparator58;
        java.util.Comparator<java.io.File> fileComparator60 = fileEntryIterator54.entryComparator;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator61 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator62 = entryComparator61.reversed();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator63 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator64 = entryComparator63.reversed();
        java.util.Comparator<java.io.File> fileComparator65 = entryComparator61.thenComparing(fileComparator64);
        java.util.Comparator<java.io.File> fileComparator66 = fileComparator60.thenComparing(fileComparator64);
        fileEntryIterator39.entryComparator = fileComparator66;
        java.util.Comparator<java.io.File> fileComparator68 = fileComparator38.thenComparing(fileComparator66);
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator69 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        boolean boolean70 = fileEntryIterator69.hasNext();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator71 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator72 = entryComparator71.reversed();
        java.util.Comparator<java.io.File> fileComparator73 = fileComparator72.reversed();
        fileEntryIterator69.entryComparator = fileComparator73;
        java.util.Comparator<java.io.File> fileComparator75 = fileEntryIterator69.entryComparator;
        boolean boolean76 = fileEntryIterator69.hasNext();
        java.util.Comparator<java.io.File> fileComparator77 = fileEntryIterator69.entryComparator;
        java.util.Comparator<java.io.File> fileComparator78 = fileComparator66.thenComparing(fileComparator77);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file23.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file23.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file32.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file32.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file34.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file34.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file49.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file49.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator73);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator75);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator77);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator78);
    }

    @Test
    public void test710() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test710");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest1 = explodedArchive0.manifest;
        explodedArchive0.recursive = false;
        java.io.File file4 = null;
        explodedArchive0.root = file4;
        java.io.File file6 = explodedArchive0.manifestFile;
        java.io.File file7 = explodedArchive0.manifestFile;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator8 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator9 = entryComparator8.reversed();
        java.util.Comparator<java.io.File> fileComparator10 = entryComparator8.reversed();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive11 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest12 = explodedArchive11.manifest;
        explodedArchive11.recursive = false;
        java.util.jar.Manifest manifest15 = explodedArchive11.manifest;
        java.io.File file16 = explodedArchive11.manifestFile;
        java.io.File file17 = null;
        java.io.File file18 = explodedArchive11.getManifestFile(file17);
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive19 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest20 = explodedArchive19.manifest;
        explodedArchive19.recursive = false;
        java.io.File file23 = null;
        explodedArchive19.root = file23;
        java.io.File file25 = explodedArchive19.root;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive26 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest27 = explodedArchive26.manifest;
        explodedArchive26.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive30 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest31 = explodedArchive30.manifest;
        explodedArchive30.recursive = false;
        java.util.jar.Manifest manifest34 = explodedArchive30.manifest;
        java.io.File file35 = explodedArchive30.manifestFile;
        java.io.File file36 = null;
        java.io.File file37 = explodedArchive30.getManifestFile(file36);
        explodedArchive26.manifestFile = file36;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive39 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest40 = explodedArchive39.manifest;
        explodedArchive39.recursive = false;
        java.util.jar.Manifest manifest43 = explodedArchive39.manifest;
        java.io.File file44 = explodedArchive39.manifestFile;
        java.io.File file45 = null;
        java.io.File file46 = explodedArchive39.getManifestFile(file45);
        explodedArchive26.manifestFile = file46;
        java.io.File file48 = explodedArchive19.getManifestFile(file46);
        int int49 = entryComparator8.compare(file18, file46);
        explodedArchive0.root = file46;
        java.util.Iterator<org.springframework.boot.loader.archive.Archive.Entry> entryItor51 = explodedArchive0.iterator();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file18.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file18.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file37.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file37.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file46.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file46.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file48.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file48.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(entryItor51);
    }

    @Test
    public void test711() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test711");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest1 = explodedArchive0.manifest;
        explodedArchive0.recursive = false;
        java.util.jar.Manifest manifest4 = explodedArchive0.manifest;
        java.io.File file5 = explodedArchive0.manifestFile;
        java.io.File file6 = null;
        java.io.File file7 = explodedArchive0.getManifestFile(file6);
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator8 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file9 = null;
        fileEntryIterator8.current = file9;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive11 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.lang.String str12 = explodedArchive11.toString();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive13 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file14 = explodedArchive13.root;
        java.io.File file15 = null;
        explodedArchive13.manifestFile = file15;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive17 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest18 = explodedArchive17.manifest;
        explodedArchive17.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive21 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest22 = explodedArchive21.manifest;
        explodedArchive21.recursive = false;
        java.util.jar.Manifest manifest25 = explodedArchive21.manifest;
        java.io.File file26 = explodedArchive21.manifestFile;
        java.io.File file27 = null;
        java.io.File file28 = explodedArchive21.getManifestFile(file27);
        explodedArchive17.manifestFile = file27;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive30 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest31 = explodedArchive30.manifest;
        explodedArchive30.recursive = false;
        java.util.jar.Manifest manifest34 = explodedArchive30.manifest;
        java.io.File file35 = explodedArchive30.manifestFile;
        java.io.File file36 = null;
        java.io.File file37 = explodedArchive30.getManifestFile(file36);
        explodedArchive17.manifestFile = file37;
        java.io.File file39 = explodedArchive13.getManifestFile(file37);
        java.io.File file40 = explodedArchive11.getManifestFile(file37);
        fileEntryIterator8.root = file37;
        explodedArchive0.root = file37;
        java.lang.String str43 = explodedArchive0.toString();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file7.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file7.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str12 + "' != '" + "exploded archive" + "'", str12.equals("exploded archive"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file28.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file28.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file37.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file37.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file39.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file39.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file40.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file40.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertTrue("'" + str43 + "' != '" + "file:/server/study-execution/new-nimrod/nimrod-hunoroutput-test-dest/spring-boot/af20dc6cc45c032573413c401f9f73aa75371744/randoop_1/META-INF/MANIFEST.MF" + "'", str43.equals("file:/server/study-execution/new-nimrod/nimrod-hunoroutput-test-dest/spring-boot/af20dc6cc45c032573413c401f9f73aa75371744/randoop_1/META-INF/MANIFEST.MF"));
    }

    @Test
    public void test712() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test712");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file1 = null;
        fileEntryIterator0.current = file1;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive3 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest4 = explodedArchive3.manifest;
        explodedArchive3.recursive = false;
        java.util.jar.Manifest manifest7 = explodedArchive3.manifest;
        java.io.File file8 = explodedArchive3.manifestFile;
        java.io.File file9 = null;
        java.io.File file10 = explodedArchive3.getManifestFile(file9);
        java.util.Iterator<java.io.File> fileItor11 = fileEntryIterator0.listFiles(file10);
        java.io.File file12 = fileEntryIterator0.root;
        java.io.File file13 = fileEntryIterator0.root;
        java.util.Deque<java.util.Iterator<java.io.File>> fileItorQueue14 = fileEntryIterator0.stack;
        java.io.File file15 = fileEntryIterator0.current;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive16 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.lang.String str17 = explodedArchive16.toString();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive18 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file19 = explodedArchive18.root;
        java.io.File file20 = null;
        explodedArchive18.manifestFile = file20;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive22 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest23 = explodedArchive22.manifest;
        explodedArchive22.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive26 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest27 = explodedArchive26.manifest;
        explodedArchive26.recursive = false;
        java.util.jar.Manifest manifest30 = explodedArchive26.manifest;
        java.io.File file31 = explodedArchive26.manifestFile;
        java.io.File file32 = null;
        java.io.File file33 = explodedArchive26.getManifestFile(file32);
        explodedArchive22.manifestFile = file32;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive35 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest36 = explodedArchive35.manifest;
        explodedArchive35.recursive = false;
        java.util.jar.Manifest manifest39 = explodedArchive35.manifest;
        java.io.File file40 = explodedArchive35.manifestFile;
        java.io.File file41 = null;
        java.io.File file42 = explodedArchive35.getManifestFile(file41);
        explodedArchive22.manifestFile = file42;
        java.io.File file44 = explodedArchive18.getManifestFile(file42);
        java.io.File file45 = explodedArchive16.getManifestFile(file42);
        fileEntryIterator0.root = file45;
        boolean boolean47 = fileEntryIterator0.hasNext();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntry fileEntry48 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntry();
        java.lang.String str49 = fileEntry48.name;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator50 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file51 = null;
        fileEntryIterator50.current = file51;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive53 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.lang.String str54 = explodedArchive53.toString();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive55 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file56 = explodedArchive55.root;
        java.io.File file57 = null;
        explodedArchive55.manifestFile = file57;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive59 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest60 = explodedArchive59.manifest;
        explodedArchive59.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive63 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest64 = explodedArchive63.manifest;
        explodedArchive63.recursive = false;
        java.util.jar.Manifest manifest67 = explodedArchive63.manifest;
        java.io.File file68 = explodedArchive63.manifestFile;
        java.io.File file69 = null;
        java.io.File file70 = explodedArchive63.getManifestFile(file69);
        explodedArchive59.manifestFile = file69;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive72 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest73 = explodedArchive72.manifest;
        explodedArchive72.recursive = false;
        java.util.jar.Manifest manifest76 = explodedArchive72.manifest;
        java.io.File file77 = explodedArchive72.manifestFile;
        java.io.File file78 = null;
        java.io.File file79 = explodedArchive72.getManifestFile(file78);
        explodedArchive59.manifestFile = file79;
        java.io.File file81 = explodedArchive55.getManifestFile(file79);
        java.io.File file82 = explodedArchive53.getManifestFile(file79);
        fileEntryIterator50.root = file79;
        fileEntry48.file = file79;
        fileEntryIterator0.root = file79;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItorQueue14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str17 + "' != '" + "exploded archive" + "'", str17.equals("exploded archive"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file33.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file33.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file42.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file42.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file44.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file44.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file45.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file45.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str54 + "' != '" + "exploded archive" + "'", str54.equals("exploded archive"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file70.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file70.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest73);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest76);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file77);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file79);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file79.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file79.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file81);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file81.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file81.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file82);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file82.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file82.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
    }

    @Test
    public void test713() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test713");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file1 = null;
        fileEntryIterator0.current = file1;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive3 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest4 = explodedArchive3.manifest;
        explodedArchive3.recursive = false;
        java.util.jar.Manifest manifest7 = explodedArchive3.manifest;
        java.io.File file8 = explodedArchive3.manifestFile;
        java.io.File file9 = null;
        java.io.File file10 = explodedArchive3.getManifestFile(file9);
        java.util.Iterator<java.io.File> fileItor11 = fileEntryIterator0.listFiles(file10);
        java.io.File file12 = fileEntryIterator0.root;
        java.io.File file13 = fileEntryIterator0.root;
        java.util.Deque<java.util.Iterator<java.io.File>> fileItorQueue14 = fileEntryIterator0.stack;
        java.io.File file15 = fileEntryIterator0.current;
        java.io.File file16 = fileEntryIterator0.root;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntry fileEntry17 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntry();
        java.io.File file18 = fileEntry17.file;
        java.lang.String str19 = fileEntry17.name;
        java.io.File file20 = fileEntry17.file;
        java.io.File file21 = fileEntry17.file;
        java.lang.String str22 = fileEntry17.getName();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntry fileEntry23 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntry();
        java.lang.String str24 = fileEntry23.name;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator25 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file26 = null;
        fileEntryIterator25.current = file26;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive28 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.lang.String str29 = explodedArchive28.toString();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive30 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file31 = explodedArchive30.root;
        java.io.File file32 = null;
        explodedArchive30.manifestFile = file32;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive34 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest35 = explodedArchive34.manifest;
        explodedArchive34.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive38 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest39 = explodedArchive38.manifest;
        explodedArchive38.recursive = false;
        java.util.jar.Manifest manifest42 = explodedArchive38.manifest;
        java.io.File file43 = explodedArchive38.manifestFile;
        java.io.File file44 = null;
        java.io.File file45 = explodedArchive38.getManifestFile(file44);
        explodedArchive34.manifestFile = file44;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive47 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest48 = explodedArchive47.manifest;
        explodedArchive47.recursive = false;
        java.util.jar.Manifest manifest51 = explodedArchive47.manifest;
        java.io.File file52 = explodedArchive47.manifestFile;
        java.io.File file53 = null;
        java.io.File file54 = explodedArchive47.getManifestFile(file53);
        explodedArchive34.manifestFile = file54;
        java.io.File file56 = explodedArchive30.getManifestFile(file54);
        java.io.File file57 = explodedArchive28.getManifestFile(file54);
        fileEntryIterator25.root = file54;
        fileEntry23.file = file54;
        fileEntry17.file = file54;
        fileEntryIterator0.root = file54;
        // The following exception was thrown during execution in test generation
        try {
            org.springframework.boot.loader.archive.Archive.Entry entry62 = fileEntryIterator0.next();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItorQueue14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str29 + "' != '" + "exploded archive" + "'", str29.equals("exploded archive"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file45.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file45.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file54.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file54.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file56.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file56.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file57.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file57.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
    }

    @Test
    public void test714() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test714");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest1 = explodedArchive0.manifest;
        explodedArchive0.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive4 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest5 = explodedArchive4.manifest;
        explodedArchive4.recursive = false;
        java.util.jar.Manifest manifest8 = explodedArchive4.manifest;
        java.io.File file9 = explodedArchive4.manifestFile;
        java.io.File file10 = null;
        java.io.File file11 = explodedArchive4.getManifestFile(file10);
        explodedArchive0.manifestFile = file10;
        java.util.jar.Manifest manifest13 = null;
        explodedArchive0.manifest = manifest13;
        java.util.jar.Manifest manifest15 = explodedArchive0.manifest;
        java.lang.String str16 = explodedArchive0.toString();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Spliterator<org.springframework.boot.loader.archive.Archive.Entry> entrySpliterator17 = explodedArchive0.spliterator();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file11.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file11.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str16 + "' != '" + "exploded archive" + "'", str16.equals("exploded archive"));
    }

    @Test
    public void test715() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test715");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest1 = explodedArchive0.manifest;
        explodedArchive0.recursive = false;
        java.util.jar.Manifest manifest4 = explodedArchive0.manifest;
        java.io.File file5 = explodedArchive0.manifestFile;
        java.io.File file6 = null;
        java.io.File file7 = explodedArchive0.getManifestFile(file6);
        java.util.jar.Manifest manifest8 = explodedArchive0.manifest;
        java.io.File file9 = explodedArchive0.root;
        java.lang.String str10 = explodedArchive0.toString();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive11 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file12 = explodedArchive11.root;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator13 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file14 = null;
        fileEntryIterator13.current = file14;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive16 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest17 = explodedArchive16.manifest;
        explodedArchive16.recursive = false;
        java.util.jar.Manifest manifest20 = explodedArchive16.manifest;
        java.io.File file21 = explodedArchive16.manifestFile;
        java.io.File file22 = null;
        java.io.File file23 = explodedArchive16.getManifestFile(file22);
        java.util.Iterator<java.io.File> fileItor24 = fileEntryIterator13.listFiles(file23);
        boolean boolean25 = fileEntryIterator13.hasNext();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator26 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator27 = entryComparator26.reversed();
        java.util.Comparator<java.io.File> fileComparator28 = entryComparator26.reversed();
        fileEntryIterator13.entryComparator = fileComparator28;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator30 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file31 = null;
        fileEntryIterator30.current = file31;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive33 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.lang.String str34 = explodedArchive33.toString();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive35 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file36 = explodedArchive35.root;
        java.io.File file37 = null;
        explodedArchive35.manifestFile = file37;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive39 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest40 = explodedArchive39.manifest;
        explodedArchive39.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive43 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest44 = explodedArchive43.manifest;
        explodedArchive43.recursive = false;
        java.util.jar.Manifest manifest47 = explodedArchive43.manifest;
        java.io.File file48 = explodedArchive43.manifestFile;
        java.io.File file49 = null;
        java.io.File file50 = explodedArchive43.getManifestFile(file49);
        explodedArchive39.manifestFile = file49;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive52 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest53 = explodedArchive52.manifest;
        explodedArchive52.recursive = false;
        java.util.jar.Manifest manifest56 = explodedArchive52.manifest;
        java.io.File file57 = explodedArchive52.manifestFile;
        java.io.File file58 = null;
        java.io.File file59 = explodedArchive52.getManifestFile(file58);
        explodedArchive39.manifestFile = file59;
        java.io.File file61 = explodedArchive35.getManifestFile(file59);
        java.io.File file62 = explodedArchive33.getManifestFile(file59);
        fileEntryIterator30.root = file59;
        fileEntryIterator13.current = file59;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive65 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file66 = explodedArchive65.root;
        java.io.File file67 = null;
        explodedArchive65.manifestFile = file67;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive69 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest70 = explodedArchive69.manifest;
        explodedArchive69.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive73 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest74 = explodedArchive73.manifest;
        explodedArchive73.recursive = false;
        java.util.jar.Manifest manifest77 = explodedArchive73.manifest;
        java.io.File file78 = explodedArchive73.manifestFile;
        java.io.File file79 = null;
        java.io.File file80 = explodedArchive73.getManifestFile(file79);
        explodedArchive69.manifestFile = file79;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive82 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest83 = explodedArchive82.manifest;
        explodedArchive82.recursive = false;
        java.util.jar.Manifest manifest86 = explodedArchive82.manifest;
        java.io.File file87 = explodedArchive82.manifestFile;
        java.io.File file88 = null;
        java.io.File file89 = explodedArchive82.getManifestFile(file88);
        explodedArchive69.manifestFile = file89;
        java.io.File file91 = explodedArchive65.getManifestFile(file89);
        fileEntryIterator13.root = file91;
        explodedArchive11.root = file91;
        explodedArchive0.manifestFile = file91;
        // The following exception was thrown during execution in test generation
        try {
            java.net.URL uRL95 = explodedArchive0.getUrl();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file7.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file7.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str10 + "' != '" + "exploded archive" + "'", str10.equals("exploded archive"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file23.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file23.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str34 + "' != '" + "exploded archive" + "'", str34.equals("exploded archive"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file50.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file50.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file59.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file59.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file61.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file61.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file62.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file62.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest77);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file78);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file80);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file80.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file80.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest83);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest86);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file87);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file89);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file89.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file89.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file91);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file91.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file91.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
    }

    @Test
    public void test716() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test716");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntry fileEntry0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntry();
        java.io.File file1 = fileEntry0.getFile();
        java.io.File file2 = fileEntry0.getFile();
        java.lang.String str3 = fileEntry0.name;
        java.lang.String str4 = fileEntry0.name;
        java.lang.String str5 = fileEntry0.getName();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str5);
    }

    @Test
    public void test717() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test717");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file1 = null;
        fileEntryIterator0.current = file1;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive3 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest4 = explodedArchive3.manifest;
        explodedArchive3.recursive = false;
        java.util.jar.Manifest manifest7 = explodedArchive3.manifest;
        java.io.File file8 = explodedArchive3.manifestFile;
        java.io.File file9 = null;
        java.io.File file10 = explodedArchive3.getManifestFile(file9);
        java.util.Iterator<java.io.File> fileItor11 = fileEntryIterator0.listFiles(file10);
        java.io.File file12 = fileEntryIterator0.current;
        boolean boolean13 = fileEntryIterator0.hasNext();
        java.io.File file14 = fileEntryIterator0.root;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file14);
    }

    @Test
    public void test718() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test718");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file1 = explodedArchive0.root;
        explodedArchive0.recursive = false;
        boolean boolean4 = explodedArchive0.recursive;
        boolean boolean5 = explodedArchive0.recursive;
        java.io.File file6 = explodedArchive0.root;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file6);
    }

    @Test
    public void test719() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test719");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        boolean boolean1 = explodedArchive0.recursive;
        java.lang.String str2 = explodedArchive0.toString();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive3 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest4 = explodedArchive3.manifest;
        explodedArchive3.recursive = false;
        java.util.jar.Manifest manifest7 = explodedArchive3.manifest;
        java.io.File file8 = explodedArchive3.manifestFile;
        java.io.File file9 = null;
        java.io.File file10 = explodedArchive3.getManifestFile(file9);
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator11 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file12 = null;
        fileEntryIterator11.current = file12;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive14 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.lang.String str15 = explodedArchive14.toString();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive16 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file17 = explodedArchive16.root;
        java.io.File file18 = null;
        explodedArchive16.manifestFile = file18;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive20 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest21 = explodedArchive20.manifest;
        explodedArchive20.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive24 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest25 = explodedArchive24.manifest;
        explodedArchive24.recursive = false;
        java.util.jar.Manifest manifest28 = explodedArchive24.manifest;
        java.io.File file29 = explodedArchive24.manifestFile;
        java.io.File file30 = null;
        java.io.File file31 = explodedArchive24.getManifestFile(file30);
        explodedArchive20.manifestFile = file30;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive33 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest34 = explodedArchive33.manifest;
        explodedArchive33.recursive = false;
        java.util.jar.Manifest manifest37 = explodedArchive33.manifest;
        java.io.File file38 = explodedArchive33.manifestFile;
        java.io.File file39 = null;
        java.io.File file40 = explodedArchive33.getManifestFile(file39);
        explodedArchive20.manifestFile = file40;
        java.io.File file42 = explodedArchive16.getManifestFile(file40);
        java.io.File file43 = explodedArchive14.getManifestFile(file40);
        fileEntryIterator11.root = file40;
        explodedArchive3.root = file40;
        java.io.File file46 = explodedArchive0.getManifestFile(file40);
        java.util.jar.Manifest manifest47 = null;
        explodedArchive0.manifest = manifest47;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str2 + "' != '" + "exploded archive" + "'", str2.equals("exploded archive"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str15 + "' != '" + "exploded archive" + "'", str15.equals("exploded archive"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file31.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file31.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file40.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file40.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file42.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file42.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file43.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file43.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file46.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file46.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
    }

    @Test
    public void test720() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test720");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        boolean boolean1 = fileEntryIterator0.recursive;
        java.io.File file2 = fileEntryIterator0.current;
        boolean boolean3 = fileEntryIterator0.hasNext();
        boolean boolean4 = fileEntryIterator0.recursive;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator5 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator6 = entryComparator5.reversed();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator7 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator8 = entryComparator7.reversed();
        java.util.Comparator<java.io.File> fileComparator9 = entryComparator5.thenComparing(fileComparator8);
        fileEntryIterator0.entryComparator = fileComparator9;
        java.io.File file11 = fileEntryIterator0.current;
        // The following exception was thrown during execution in test generation
        try {
            fileEntryIterator0.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: remove");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file11);
    }

    @Test
    public void test721() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test721");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file1 = null;
        fileEntryIterator0.current = file1;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive3 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest4 = explodedArchive3.manifest;
        explodedArchive3.recursive = false;
        java.util.jar.Manifest manifest7 = explodedArchive3.manifest;
        java.io.File file8 = explodedArchive3.manifestFile;
        java.io.File file9 = null;
        java.io.File file10 = explodedArchive3.getManifestFile(file9);
        java.util.Iterator<java.io.File> fileItor11 = fileEntryIterator0.listFiles(file10);
        java.util.Comparator<java.io.File> fileComparator12 = fileEntryIterator0.entryComparator;
        java.util.Deque<java.util.Iterator<java.io.File>> fileItorQueue13 = fileEntryIterator0.stack;
        // The following exception was thrown during execution in test generation
        try {
            fileEntryIterator0.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: remove");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItorQueue13);
    }

    @Test
    public void test722() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test722");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntry fileEntry0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntry();
        java.io.File file1 = fileEntry0.file;
        java.lang.String str2 = fileEntry0.name;
        fileEntry0.name = "";
        fileEntry0.name = "exploded archive";
        java.io.File file7 = fileEntry0.getFile();
        java.io.File file8 = fileEntry0.file;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file8);
    }

    @Test
    public void test723() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test723");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file1 = null;
        fileEntryIterator0.current = file1;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive3 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest4 = explodedArchive3.manifest;
        explodedArchive3.recursive = false;
        java.util.jar.Manifest manifest7 = explodedArchive3.manifest;
        java.io.File file8 = explodedArchive3.manifestFile;
        java.io.File file9 = null;
        java.io.File file10 = explodedArchive3.getManifestFile(file9);
        java.util.Iterator<java.io.File> fileItor11 = fileEntryIterator0.listFiles(file10);
        java.io.File file12 = fileEntryIterator0.current;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator13 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file14 = null;
        fileEntryIterator13.current = file14;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive16 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest17 = explodedArchive16.manifest;
        explodedArchive16.recursive = false;
        java.util.jar.Manifest manifest20 = explodedArchive16.manifest;
        java.io.File file21 = explodedArchive16.manifestFile;
        java.io.File file22 = null;
        java.io.File file23 = explodedArchive16.getManifestFile(file22);
        java.util.Iterator<java.io.File> fileItor24 = fileEntryIterator13.listFiles(file23);
        java.util.ArrayDeque<java.util.Iterator<java.io.File>> fileItorQueue25 = new java.util.ArrayDeque<java.util.Iterator<java.io.File>>();
        boolean boolean26 = fileItorQueue25.add(fileItor24);
        fileEntryIterator0.stack = fileItorQueue25;
        boolean boolean28 = fileEntryIterator0.recursive;
        java.util.Comparator<java.io.File> fileComparator29 = fileEntryIterator0.entryComparator;
        fileEntryIterator0.recursive = true;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file23.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file23.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator29);
    }

    @Test
    public void test724() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test724");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntry fileEntry0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntry();
        java.lang.String str1 = fileEntry0.name;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator2 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file3 = null;
        fileEntryIterator2.current = file3;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive5 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest6 = explodedArchive5.manifest;
        explodedArchive5.recursive = false;
        java.util.jar.Manifest manifest9 = explodedArchive5.manifest;
        java.io.File file10 = explodedArchive5.manifestFile;
        java.io.File file11 = null;
        java.io.File file12 = explodedArchive5.getManifestFile(file11);
        java.util.Iterator<java.io.File> fileItor13 = fileEntryIterator2.listFiles(file12);
        java.io.File file14 = fileEntryIterator2.current;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator15 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file16 = null;
        fileEntryIterator15.current = file16;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive18 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest19 = explodedArchive18.manifest;
        explodedArchive18.recursive = false;
        java.util.jar.Manifest manifest22 = explodedArchive18.manifest;
        java.io.File file23 = explodedArchive18.manifestFile;
        java.io.File file24 = null;
        java.io.File file25 = explodedArchive18.getManifestFile(file24);
        java.util.Iterator<java.io.File> fileItor26 = fileEntryIterator15.listFiles(file25);
        java.util.ArrayDeque<java.util.Iterator<java.io.File>> fileItorQueue27 = new java.util.ArrayDeque<java.util.Iterator<java.io.File>>();
        boolean boolean28 = fileItorQueue27.add(fileItor26);
        fileEntryIterator2.stack = fileItorQueue27;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive30 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest31 = explodedArchive30.manifest;
        explodedArchive30.recursive = false;
        java.io.File file34 = null;
        explodedArchive30.root = file34;
        java.io.File file36 = explodedArchive30.root;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive37 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest38 = explodedArchive37.manifest;
        explodedArchive37.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive41 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest42 = explodedArchive41.manifest;
        explodedArchive41.recursive = false;
        java.util.jar.Manifest manifest45 = explodedArchive41.manifest;
        java.io.File file46 = explodedArchive41.manifestFile;
        java.io.File file47 = null;
        java.io.File file48 = explodedArchive41.getManifestFile(file47);
        explodedArchive37.manifestFile = file47;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive50 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest51 = explodedArchive50.manifest;
        explodedArchive50.recursive = false;
        java.util.jar.Manifest manifest54 = explodedArchive50.manifest;
        java.io.File file55 = explodedArchive50.manifestFile;
        java.io.File file56 = null;
        java.io.File file57 = explodedArchive50.getManifestFile(file56);
        explodedArchive37.manifestFile = file57;
        java.io.File file59 = explodedArchive30.getManifestFile(file57);
        fileEntryIterator2.root = file57;
        fileEntry0.file = file57;
        boolean boolean62 = fileEntry0.isDirectory();
        boolean boolean63 = fileEntry0.isDirectory();
        java.lang.String str64 = fileEntry0.name;
        java.lang.String str65 = fileEntry0.name;
        java.lang.String str66 = fileEntry0.getName();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file12.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file12.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file25.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file25.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file48.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file48.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file57.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file57.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file59.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file59.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str66);
    }

    @Test
    public void test725() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test725");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file1 = explodedArchive0.root;
        java.io.File file2 = explodedArchive0.manifestFile;
        java.util.jar.Manifest manifest3 = null;
        explodedArchive0.manifest = manifest3;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator5 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file6 = null;
        fileEntryIterator5.current = file6;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive8 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.lang.String str9 = explodedArchive8.toString();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive10 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file11 = explodedArchive10.root;
        java.io.File file12 = null;
        explodedArchive10.manifestFile = file12;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive14 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest15 = explodedArchive14.manifest;
        explodedArchive14.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive18 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest19 = explodedArchive18.manifest;
        explodedArchive18.recursive = false;
        java.util.jar.Manifest manifest22 = explodedArchive18.manifest;
        java.io.File file23 = explodedArchive18.manifestFile;
        java.io.File file24 = null;
        java.io.File file25 = explodedArchive18.getManifestFile(file24);
        explodedArchive14.manifestFile = file24;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive27 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest28 = explodedArchive27.manifest;
        explodedArchive27.recursive = false;
        java.util.jar.Manifest manifest31 = explodedArchive27.manifest;
        java.io.File file32 = explodedArchive27.manifestFile;
        java.io.File file33 = null;
        java.io.File file34 = explodedArchive27.getManifestFile(file33);
        explodedArchive14.manifestFile = file34;
        java.io.File file36 = explodedArchive10.getManifestFile(file34);
        java.io.File file37 = explodedArchive8.getManifestFile(file34);
        fileEntryIterator5.root = file34;
        java.io.File file39 = explodedArchive0.getManifestFile(file34);
        explodedArchive0.recursive = true;
        java.util.jar.Manifest manifest42 = explodedArchive0.manifest;
        java.lang.String str43 = explodedArchive0.toString();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str9 + "' != '" + "exploded archive" + "'", str9.equals("exploded archive"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file25.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file25.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file34.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file34.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file36.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file36.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file37.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file37.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file39.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file39.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str43 + "' != '" + "exploded archive" + "'", str43.equals("exploded archive"));
    }

    @Test
    public void test726() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test726");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file1 = explodedArchive0.root;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator2 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file3 = null;
        fileEntryIterator2.current = file3;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive5 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest6 = explodedArchive5.manifest;
        explodedArchive5.recursive = false;
        java.util.jar.Manifest manifest9 = explodedArchive5.manifest;
        java.io.File file10 = explodedArchive5.manifestFile;
        java.io.File file11 = null;
        java.io.File file12 = explodedArchive5.getManifestFile(file11);
        java.util.Iterator<java.io.File> fileItor13 = fileEntryIterator2.listFiles(file12);
        boolean boolean14 = fileEntryIterator2.hasNext();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator15 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator16 = entryComparator15.reversed();
        java.util.Comparator<java.io.File> fileComparator17 = entryComparator15.reversed();
        fileEntryIterator2.entryComparator = fileComparator17;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator19 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file20 = null;
        fileEntryIterator19.current = file20;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive22 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.lang.String str23 = explodedArchive22.toString();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive24 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file25 = explodedArchive24.root;
        java.io.File file26 = null;
        explodedArchive24.manifestFile = file26;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive28 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest29 = explodedArchive28.manifest;
        explodedArchive28.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive32 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest33 = explodedArchive32.manifest;
        explodedArchive32.recursive = false;
        java.util.jar.Manifest manifest36 = explodedArchive32.manifest;
        java.io.File file37 = explodedArchive32.manifestFile;
        java.io.File file38 = null;
        java.io.File file39 = explodedArchive32.getManifestFile(file38);
        explodedArchive28.manifestFile = file38;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive41 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest42 = explodedArchive41.manifest;
        explodedArchive41.recursive = false;
        java.util.jar.Manifest manifest45 = explodedArchive41.manifest;
        java.io.File file46 = explodedArchive41.manifestFile;
        java.io.File file47 = null;
        java.io.File file48 = explodedArchive41.getManifestFile(file47);
        explodedArchive28.manifestFile = file48;
        java.io.File file50 = explodedArchive24.getManifestFile(file48);
        java.io.File file51 = explodedArchive22.getManifestFile(file48);
        fileEntryIterator19.root = file48;
        fileEntryIterator2.current = file48;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive54 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file55 = explodedArchive54.root;
        java.io.File file56 = null;
        explodedArchive54.manifestFile = file56;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive58 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest59 = explodedArchive58.manifest;
        explodedArchive58.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive62 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest63 = explodedArchive62.manifest;
        explodedArchive62.recursive = false;
        java.util.jar.Manifest manifest66 = explodedArchive62.manifest;
        java.io.File file67 = explodedArchive62.manifestFile;
        java.io.File file68 = null;
        java.io.File file69 = explodedArchive62.getManifestFile(file68);
        explodedArchive58.manifestFile = file68;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive71 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest72 = explodedArchive71.manifest;
        explodedArchive71.recursive = false;
        java.util.jar.Manifest manifest75 = explodedArchive71.manifest;
        java.io.File file76 = explodedArchive71.manifestFile;
        java.io.File file77 = null;
        java.io.File file78 = explodedArchive71.getManifestFile(file77);
        explodedArchive58.manifestFile = file78;
        java.io.File file80 = explodedArchive54.getManifestFile(file78);
        fileEntryIterator2.root = file80;
        explodedArchive0.root = file80;
        java.lang.String str83 = explodedArchive0.toString();
        java.util.Spliterator<org.springframework.boot.loader.archive.Archive.Entry> entrySpliterator84 = explodedArchive0.spliterator();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file12.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file12.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str23 + "' != '" + "exploded archive" + "'", str23.equals("exploded archive"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file39.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file39.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file48.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file48.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file50.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file50.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file51.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file51.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file69.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file69.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest75);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file76);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file78);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file78.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file78.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file80);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file80.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file80.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertTrue("'" + str83 + "' != '" + "file:/server/study-execution/new-nimrod/nimrod-hunoroutput-test-dest/spring-boot/af20dc6cc45c032573413c401f9f73aa75371744/randoop_1/META-INF/MANIFEST.MF/META-INF/MANIFEST.MF" + "'", str83.equals("file:/server/study-execution/new-nimrod/nimrod-hunoroutput-test-dest/spring-boot/af20dc6cc45c032573413c401f9f73aa75371744/randoop_1/META-INF/MANIFEST.MF/META-INF/MANIFEST.MF"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(entrySpliterator84);
    }

    @Test
    public void test727() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test727");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file1 = null;
        fileEntryIterator0.current = file1;
        fileEntryIterator0.recursive = true;
        fileEntryIterator0.recursive = true;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive7 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest8 = explodedArchive7.manifest;
        explodedArchive7.recursive = false;
        java.util.jar.Manifest manifest11 = explodedArchive7.manifest;
        java.io.File file12 = explodedArchive7.manifestFile;
        java.io.File file13 = null;
        java.io.File file14 = explodedArchive7.getManifestFile(file13);
        java.io.File file15 = explodedArchive7.root;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator16 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file17 = null;
        fileEntryIterator16.current = file17;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive19 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest20 = explodedArchive19.manifest;
        explodedArchive19.recursive = false;
        java.util.jar.Manifest manifest23 = explodedArchive19.manifest;
        java.io.File file24 = explodedArchive19.manifestFile;
        java.io.File file25 = null;
        java.io.File file26 = explodedArchive19.getManifestFile(file25);
        java.util.Iterator<java.io.File> fileItor27 = fileEntryIterator16.listFiles(file26);
        java.io.File file28 = fileEntryIterator16.root;
        java.io.File file29 = fileEntryIterator16.root;
        java.util.Deque<java.util.Iterator<java.io.File>> fileItorQueue30 = fileEntryIterator16.stack;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator31 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator32 = entryComparator31.reversed();
        java.util.Comparator<java.io.File> fileComparator33 = entryComparator31.reversed();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive34 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest35 = explodedArchive34.manifest;
        explodedArchive34.recursive = false;
        java.util.jar.Manifest manifest38 = explodedArchive34.manifest;
        java.io.File file39 = explodedArchive34.manifestFile;
        java.io.File file40 = null;
        java.io.File file41 = explodedArchive34.getManifestFile(file40);
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive42 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest43 = explodedArchive42.manifest;
        explodedArchive42.recursive = false;
        java.io.File file46 = null;
        explodedArchive42.root = file46;
        java.io.File file48 = explodedArchive42.root;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive49 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest50 = explodedArchive49.manifest;
        explodedArchive49.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive53 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest54 = explodedArchive53.manifest;
        explodedArchive53.recursive = false;
        java.util.jar.Manifest manifest57 = explodedArchive53.manifest;
        java.io.File file58 = explodedArchive53.manifestFile;
        java.io.File file59 = null;
        java.io.File file60 = explodedArchive53.getManifestFile(file59);
        explodedArchive49.manifestFile = file59;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive62 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest63 = explodedArchive62.manifest;
        explodedArchive62.recursive = false;
        java.util.jar.Manifest manifest66 = explodedArchive62.manifest;
        java.io.File file67 = explodedArchive62.manifestFile;
        java.io.File file68 = null;
        java.io.File file69 = explodedArchive62.getManifestFile(file68);
        explodedArchive49.manifestFile = file69;
        java.io.File file71 = explodedArchive42.getManifestFile(file69);
        int int72 = entryComparator31.compare(file41, file69);
        fileEntryIterator16.root = file41;
        explodedArchive7.manifestFile = file41;
        java.util.Iterator<java.io.File> fileItor75 = fileEntryIterator0.listFiles(file41);
        // The following exception was thrown during execution in test generation
        try {
            fileEntryIterator0.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: remove");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file14.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file14.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file26.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file26.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItorQueue30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file41.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file41.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file60.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file60.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file69.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file69.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file71.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file71.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor75);
    }

    @Test
    public void test728() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test728");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file1 = null;
        fileEntryIterator0.current = file1;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive3 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest4 = explodedArchive3.manifest;
        explodedArchive3.recursive = false;
        java.util.jar.Manifest manifest7 = explodedArchive3.manifest;
        java.io.File file8 = explodedArchive3.manifestFile;
        java.io.File file9 = null;
        java.io.File file10 = explodedArchive3.getManifestFile(file9);
        java.util.Iterator<java.io.File> fileItor11 = fileEntryIterator0.listFiles(file10);
        boolean boolean12 = fileEntryIterator0.hasNext();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator13 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator14 = entryComparator13.reversed();
        java.util.Comparator<java.io.File> fileComparator15 = entryComparator13.reversed();
        fileEntryIterator0.entryComparator = fileComparator15;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator17 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file18 = null;
        fileEntryIterator17.current = file18;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive20 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest21 = explodedArchive20.manifest;
        explodedArchive20.recursive = false;
        java.util.jar.Manifest manifest24 = explodedArchive20.manifest;
        java.io.File file25 = explodedArchive20.manifestFile;
        java.io.File file26 = null;
        java.io.File file27 = explodedArchive20.getManifestFile(file26);
        java.util.Iterator<java.io.File> fileItor28 = fileEntryIterator17.listFiles(file27);
        java.util.Comparator<java.io.File> fileComparator29 = fileEntryIterator17.entryComparator;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator30 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file31 = null;
        fileEntryIterator30.current = file31;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive33 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest34 = explodedArchive33.manifest;
        explodedArchive33.recursive = false;
        java.util.jar.Manifest manifest37 = explodedArchive33.manifest;
        java.io.File file38 = explodedArchive33.manifestFile;
        java.io.File file39 = null;
        java.io.File file40 = explodedArchive33.getManifestFile(file39);
        java.util.Iterator<java.io.File> fileItor41 = fileEntryIterator30.listFiles(file40);
        java.io.File file42 = fileEntryIterator30.current;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator43 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file44 = null;
        fileEntryIterator43.current = file44;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive46 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest47 = explodedArchive46.manifest;
        explodedArchive46.recursive = false;
        java.util.jar.Manifest manifest50 = explodedArchive46.manifest;
        java.io.File file51 = explodedArchive46.manifestFile;
        java.io.File file52 = null;
        java.io.File file53 = explodedArchive46.getManifestFile(file52);
        java.util.Iterator<java.io.File> fileItor54 = fileEntryIterator43.listFiles(file53);
        java.io.File file55 = fileEntryIterator43.current;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator56 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file57 = null;
        fileEntryIterator56.current = file57;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive59 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest60 = explodedArchive59.manifest;
        explodedArchive59.recursive = false;
        java.util.jar.Manifest manifest63 = explodedArchive59.manifest;
        java.io.File file64 = explodedArchive59.manifestFile;
        java.io.File file65 = null;
        java.io.File file66 = explodedArchive59.getManifestFile(file65);
        java.util.Iterator<java.io.File> fileItor67 = fileEntryIterator56.listFiles(file66);
        java.util.ArrayDeque<java.util.Iterator<java.io.File>> fileItorQueue68 = new java.util.ArrayDeque<java.util.Iterator<java.io.File>>();
        boolean boolean69 = fileItorQueue68.add(fileItor67);
        fileEntryIterator43.stack = fileItorQueue68;
        fileEntryIterator30.stack = fileItorQueue68;
        fileEntryIterator17.stack = fileItorQueue68;
        fileEntryIterator0.stack = fileItorQueue68;
        java.util.Comparator<java.io.File> fileComparator74 = fileEntryIterator0.entryComparator;
        java.io.File file75 = fileEntryIterator0.current;
        java.io.File file76 = fileEntryIterator0.poll();
        java.util.Deque<java.util.Iterator<java.io.File>> fileItorQueue77 = fileEntryIterator0.stack;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file27.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file27.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file40.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file40.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file53.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file53.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file66.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file66.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file75);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file76);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItorQueue77);
    }

    @Test
    public void test729() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test729");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file1 = null;
        fileEntryIterator0.current = file1;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive3 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest4 = explodedArchive3.manifest;
        explodedArchive3.recursive = false;
        java.util.jar.Manifest manifest7 = explodedArchive3.manifest;
        java.io.File file8 = explodedArchive3.manifestFile;
        java.io.File file9 = null;
        java.io.File file10 = explodedArchive3.getManifestFile(file9);
        java.util.Iterator<java.io.File> fileItor11 = fileEntryIterator0.listFiles(file10);
        java.io.File file12 = fileEntryIterator0.root;
        java.io.File file13 = fileEntryIterator0.current;
        fileEntryIterator0.recursive = true;
        java.io.File file16 = fileEntryIterator0.root;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file16);
    }

    @Test
    public void test730() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test730");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file1 = null;
        fileEntryIterator0.current = file1;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive3 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest4 = explodedArchive3.manifest;
        explodedArchive3.recursive = false;
        java.util.jar.Manifest manifest7 = explodedArchive3.manifest;
        java.io.File file8 = explodedArchive3.manifestFile;
        java.io.File file9 = null;
        java.io.File file10 = explodedArchive3.getManifestFile(file9);
        java.util.Iterator<java.io.File> fileItor11 = fileEntryIterator0.listFiles(file10);
        java.io.File file12 = fileEntryIterator0.current;
        java.util.Deque<java.util.Iterator<java.io.File>> fileItorQueue13 = fileEntryIterator0.stack;
        java.util.Comparator<java.io.File> fileComparator14 = fileEntryIterator0.entryComparator;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItorQueue13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator14);
    }

    @Test
    public void test731() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test731");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        boolean boolean1 = fileEntryIterator0.recursive;
        fileEntryIterator0.recursive = false;
        java.util.Deque<java.util.Iterator<java.io.File>> fileItorQueue4 = fileEntryIterator0.stack;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItorQueue4);
    }

    @Test
    public void test732() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test732");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest1 = explodedArchive0.manifest;
        java.util.jar.Manifest manifest2 = null;
        explodedArchive0.manifest = manifest2;
        java.io.File file4 = explodedArchive0.root;
        java.lang.String str5 = explodedArchive0.toString();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive6 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file7 = explodedArchive6.root;
        java.io.File file8 = explodedArchive6.manifestFile;
        java.util.jar.Manifest manifest9 = null;
        explodedArchive6.manifest = manifest9;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator11 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file12 = null;
        fileEntryIterator11.current = file12;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive14 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.lang.String str15 = explodedArchive14.toString();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive16 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file17 = explodedArchive16.root;
        java.io.File file18 = null;
        explodedArchive16.manifestFile = file18;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive20 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest21 = explodedArchive20.manifest;
        explodedArchive20.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive24 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest25 = explodedArchive24.manifest;
        explodedArchive24.recursive = false;
        java.util.jar.Manifest manifest28 = explodedArchive24.manifest;
        java.io.File file29 = explodedArchive24.manifestFile;
        java.io.File file30 = null;
        java.io.File file31 = explodedArchive24.getManifestFile(file30);
        explodedArchive20.manifestFile = file30;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive33 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest34 = explodedArchive33.manifest;
        explodedArchive33.recursive = false;
        java.util.jar.Manifest manifest37 = explodedArchive33.manifest;
        java.io.File file38 = explodedArchive33.manifestFile;
        java.io.File file39 = null;
        java.io.File file40 = explodedArchive33.getManifestFile(file39);
        explodedArchive20.manifestFile = file40;
        java.io.File file42 = explodedArchive16.getManifestFile(file40);
        java.io.File file43 = explodedArchive14.getManifestFile(file40);
        fileEntryIterator11.root = file40;
        java.io.File file45 = explodedArchive6.getManifestFile(file40);
        explodedArchive0.manifestFile = file45;
        java.io.File file47 = explodedArchive0.manifestFile;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "exploded archive" + "'", str5.equals("exploded archive"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str15 + "' != '" + "exploded archive" + "'", str15.equals("exploded archive"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file31.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file31.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file40.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file40.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file42.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file42.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file43.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file43.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file45.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file45.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file47.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file47.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
    }

    @Test
    public void test733() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test733");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file1 = null;
        fileEntryIterator0.current = file1;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive3 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest4 = explodedArchive3.manifest;
        explodedArchive3.recursive = false;
        java.util.jar.Manifest manifest7 = explodedArchive3.manifest;
        java.io.File file8 = explodedArchive3.manifestFile;
        java.io.File file9 = null;
        java.io.File file10 = explodedArchive3.getManifestFile(file9);
        java.util.Iterator<java.io.File> fileItor11 = fileEntryIterator0.listFiles(file10);
        java.util.Deque<java.util.Iterator<java.io.File>> fileItorQueue12 = fileEntryIterator0.stack;
        java.io.File file13 = fileEntryIterator0.poll();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItorQueue12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file13);
    }

    @Test
    public void test734() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test734");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file1 = null;
        fileEntryIterator0.current = file1;
        fileEntryIterator0.recursive = true;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator5 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file6 = null;
        fileEntryIterator5.current = file6;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive8 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest9 = explodedArchive8.manifest;
        explodedArchive8.recursive = false;
        java.util.jar.Manifest manifest12 = explodedArchive8.manifest;
        java.io.File file13 = explodedArchive8.manifestFile;
        java.io.File file14 = null;
        java.io.File file15 = explodedArchive8.getManifestFile(file14);
        java.util.Iterator<java.io.File> fileItor16 = fileEntryIterator5.listFiles(file15);
        java.io.File file17 = fileEntryIterator5.root;
        java.io.File file18 = fileEntryIterator5.root;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator19 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file20 = null;
        fileEntryIterator19.current = file20;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive22 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest23 = explodedArchive22.manifest;
        explodedArchive22.recursive = false;
        java.util.jar.Manifest manifest26 = explodedArchive22.manifest;
        java.io.File file27 = explodedArchive22.manifestFile;
        java.io.File file28 = null;
        java.io.File file29 = explodedArchive22.getManifestFile(file28);
        java.util.Iterator<java.io.File> fileItor30 = fileEntryIterator19.listFiles(file29);
        java.util.ArrayDeque<java.util.Iterator<java.io.File>> fileItorQueue31 = new java.util.ArrayDeque<java.util.Iterator<java.io.File>>();
        boolean boolean32 = fileItorQueue31.add(fileItor30);
        fileEntryIterator5.stack = fileItorQueue31;
        java.util.Deque<java.util.Iterator<java.io.File>> fileItorQueue34 = fileEntryIterator5.stack;
        fileEntryIterator0.stack = fileItorQueue34;
        java.util.Comparator<java.io.File> fileComparator36 = fileEntryIterator0.entryComparator;
        java.io.File file37 = fileEntryIterator0.current;
        boolean boolean38 = fileEntryIterator0.hasNext();
        java.io.File file39 = fileEntryIterator0.poll();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file15.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file15.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file29.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file29.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItorQueue34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file39);
    }

    @Test
    public void test735() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test735");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file1 = explodedArchive0.root;
        explodedArchive0.recursive = false;
        boolean boolean4 = explodedArchive0.recursive;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntry fileEntry5 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntry();
        java.io.File file6 = fileEntry5.file;
        java.lang.String str7 = fileEntry5.name;
        java.io.File file8 = fileEntry5.file;
        java.io.File file9 = fileEntry5.file;
        java.lang.String str10 = fileEntry5.name;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive11 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.lang.String str12 = explodedArchive11.toString();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive13 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file14 = explodedArchive13.root;
        java.io.File file15 = null;
        explodedArchive13.manifestFile = file15;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive17 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest18 = explodedArchive17.manifest;
        explodedArchive17.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive21 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest22 = explodedArchive21.manifest;
        explodedArchive21.recursive = false;
        java.util.jar.Manifest manifest25 = explodedArchive21.manifest;
        java.io.File file26 = explodedArchive21.manifestFile;
        java.io.File file27 = null;
        java.io.File file28 = explodedArchive21.getManifestFile(file27);
        explodedArchive17.manifestFile = file27;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive30 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest31 = explodedArchive30.manifest;
        explodedArchive30.recursive = false;
        java.util.jar.Manifest manifest34 = explodedArchive30.manifest;
        java.io.File file35 = explodedArchive30.manifestFile;
        java.io.File file36 = null;
        java.io.File file37 = explodedArchive30.getManifestFile(file36);
        explodedArchive17.manifestFile = file37;
        java.io.File file39 = explodedArchive13.getManifestFile(file37);
        java.io.File file40 = explodedArchive11.getManifestFile(file37);
        fileEntry5.file = file37;
        boolean boolean42 = fileEntry5.isDirectory();
        // The following exception was thrown during execution in test generation
        try {
            org.springframework.boot.loader.archive.Archive archive43 = explodedArchive0.getNestedArchive((org.springframework.boot.loader.archive.Archive.Entry) fileEntry5);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: File must exist");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str12 + "' != '" + "exploded archive" + "'", str12.equals("exploded archive"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file28.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file28.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file37.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file37.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file39.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file39.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file40.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file40.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
    }

    @Test
    public void test736() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test736");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file1 = null;
        fileEntryIterator0.current = file1;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive3 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest4 = explodedArchive3.manifest;
        explodedArchive3.recursive = false;
        java.util.jar.Manifest manifest7 = explodedArchive3.manifest;
        java.io.File file8 = explodedArchive3.manifestFile;
        java.io.File file9 = null;
        java.io.File file10 = explodedArchive3.getManifestFile(file9);
        java.util.Iterator<java.io.File> fileItor11 = fileEntryIterator0.listFiles(file10);
        boolean boolean12 = fileEntryIterator0.hasNext();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator13 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator14 = entryComparator13.reversed();
        java.util.Comparator<java.io.File> fileComparator15 = entryComparator13.reversed();
        fileEntryIterator0.entryComparator = fileComparator15;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator17 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file18 = null;
        fileEntryIterator17.current = file18;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive20 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.lang.String str21 = explodedArchive20.toString();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive22 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file23 = explodedArchive22.root;
        java.io.File file24 = null;
        explodedArchive22.manifestFile = file24;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive26 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest27 = explodedArchive26.manifest;
        explodedArchive26.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive30 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest31 = explodedArchive30.manifest;
        explodedArchive30.recursive = false;
        java.util.jar.Manifest manifest34 = explodedArchive30.manifest;
        java.io.File file35 = explodedArchive30.manifestFile;
        java.io.File file36 = null;
        java.io.File file37 = explodedArchive30.getManifestFile(file36);
        explodedArchive26.manifestFile = file36;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive39 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest40 = explodedArchive39.manifest;
        explodedArchive39.recursive = false;
        java.util.jar.Manifest manifest43 = explodedArchive39.manifest;
        java.io.File file44 = explodedArchive39.manifestFile;
        java.io.File file45 = null;
        java.io.File file46 = explodedArchive39.getManifestFile(file45);
        explodedArchive26.manifestFile = file46;
        java.io.File file48 = explodedArchive22.getManifestFile(file46);
        java.io.File file49 = explodedArchive20.getManifestFile(file46);
        fileEntryIterator17.root = file46;
        fileEntryIterator0.current = file46;
        boolean boolean52 = fileEntryIterator0.hasNext();
        java.util.Deque<java.util.Iterator<java.io.File>> fileItorQueue53 = fileEntryIterator0.stack;
        fileEntryIterator0.recursive = false;
        java.util.Deque<java.util.Iterator<java.io.File>> fileItorQueue56 = fileEntryIterator0.stack;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str21 + "' != '" + "exploded archive" + "'", str21.equals("exploded archive"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file37.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file37.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file46.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file46.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file48.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file48.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file49.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file49.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItorQueue53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItorQueue56);
    }

    @Test
    public void test737() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test737");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file1 = explodedArchive0.root;
        java.io.File file2 = null;
        explodedArchive0.manifestFile = file2;
        java.io.File file4 = explodedArchive0.root;
        java.lang.String str5 = explodedArchive0.toString();
        java.util.jar.Manifest manifest6 = null;
        explodedArchive0.manifest = manifest6;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator8 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        boolean boolean9 = fileEntryIterator8.recursive;
        java.io.File file10 = fileEntryIterator8.current;
        boolean boolean11 = fileEntryIterator8.hasNext();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator12 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator13 = entryComparator12.reversed();
        java.util.Comparator<java.io.File> fileComparator14 = entryComparator12.reversed();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive15 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest16 = explodedArchive15.manifest;
        explodedArchive15.recursive = false;
        java.util.jar.Manifest manifest19 = explodedArchive15.manifest;
        java.io.File file20 = explodedArchive15.manifestFile;
        java.io.File file21 = null;
        java.io.File file22 = explodedArchive15.getManifestFile(file21);
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive23 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest24 = explodedArchive23.manifest;
        explodedArchive23.recursive = false;
        java.io.File file27 = null;
        explodedArchive23.root = file27;
        java.io.File file29 = explodedArchive23.root;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive30 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest31 = explodedArchive30.manifest;
        explodedArchive30.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive34 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest35 = explodedArchive34.manifest;
        explodedArchive34.recursive = false;
        java.util.jar.Manifest manifest38 = explodedArchive34.manifest;
        java.io.File file39 = explodedArchive34.manifestFile;
        java.io.File file40 = null;
        java.io.File file41 = explodedArchive34.getManifestFile(file40);
        explodedArchive30.manifestFile = file40;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive43 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest44 = explodedArchive43.manifest;
        explodedArchive43.recursive = false;
        java.util.jar.Manifest manifest47 = explodedArchive43.manifest;
        java.io.File file48 = explodedArchive43.manifestFile;
        java.io.File file49 = null;
        java.io.File file50 = explodedArchive43.getManifestFile(file49);
        explodedArchive30.manifestFile = file50;
        java.io.File file52 = explodedArchive23.getManifestFile(file50);
        int int53 = entryComparator12.compare(file22, file50);
        java.util.Iterator<java.io.File> fileItor54 = fileEntryIterator8.listFiles(file22);
        java.io.File file55 = explodedArchive0.getManifestFile(file22);
        java.io.File file56 = explodedArchive0.root;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator<org.springframework.boot.loader.archive.Archive.Entry> entryItor57 = explodedArchive0.iterator();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "exploded archive" + "'", str5.equals("exploded archive"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file22.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file22.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file41.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file41.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file50.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file50.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file52.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file52.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file55.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file55.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file56);
    }

    @Test
    public void test738() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test738");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file1 = null;
        fileEntryIterator0.current = file1;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive3 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest4 = explodedArchive3.manifest;
        explodedArchive3.recursive = false;
        java.util.jar.Manifest manifest7 = explodedArchive3.manifest;
        java.io.File file8 = explodedArchive3.manifestFile;
        java.io.File file9 = null;
        java.io.File file10 = explodedArchive3.getManifestFile(file9);
        java.util.Iterator<java.io.File> fileItor11 = fileEntryIterator0.listFiles(file10);
        boolean boolean12 = fileEntryIterator0.recursive;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive13 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest14 = explodedArchive13.manifest;
        explodedArchive13.recursive = false;
        java.util.jar.Manifest manifest17 = explodedArchive13.manifest;
        java.io.File file18 = explodedArchive13.manifestFile;
        java.io.File file19 = null;
        java.io.File file20 = explodedArchive13.getManifestFile(file19);
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive21 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest22 = explodedArchive21.manifest;
        explodedArchive21.recursive = false;
        java.io.File file25 = null;
        explodedArchive21.root = file25;
        java.io.File file27 = explodedArchive21.manifestFile;
        java.io.File file28 = explodedArchive21.manifestFile;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator29 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator30 = entryComparator29.reversed();
        java.util.Comparator<java.io.File> fileComparator31 = entryComparator29.reversed();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive32 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest33 = explodedArchive32.manifest;
        explodedArchive32.recursive = false;
        java.util.jar.Manifest manifest36 = explodedArchive32.manifest;
        java.io.File file37 = explodedArchive32.manifestFile;
        java.io.File file38 = null;
        java.io.File file39 = explodedArchive32.getManifestFile(file38);
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive40 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest41 = explodedArchive40.manifest;
        explodedArchive40.recursive = false;
        java.io.File file44 = null;
        explodedArchive40.root = file44;
        java.io.File file46 = explodedArchive40.root;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive47 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest48 = explodedArchive47.manifest;
        explodedArchive47.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive51 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest52 = explodedArchive51.manifest;
        explodedArchive51.recursive = false;
        java.util.jar.Manifest manifest55 = explodedArchive51.manifest;
        java.io.File file56 = explodedArchive51.manifestFile;
        java.io.File file57 = null;
        java.io.File file58 = explodedArchive51.getManifestFile(file57);
        explodedArchive47.manifestFile = file57;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive60 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest61 = explodedArchive60.manifest;
        explodedArchive60.recursive = false;
        java.util.jar.Manifest manifest64 = explodedArchive60.manifest;
        java.io.File file65 = explodedArchive60.manifestFile;
        java.io.File file66 = null;
        java.io.File file67 = explodedArchive60.getManifestFile(file66);
        explodedArchive47.manifestFile = file67;
        java.io.File file69 = explodedArchive40.getManifestFile(file67);
        int int70 = entryComparator29.compare(file39, file67);
        explodedArchive21.root = file67;
        java.io.File file72 = explodedArchive13.getManifestFile(file67);
        java.util.Iterator<java.io.File> fileItor73 = fileEntryIterator0.listFiles(file72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file20.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file20.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file39.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file39.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file58.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file58.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file67.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file67.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file69.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file69.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file72.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file72.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor73);
    }

    @Test
    public void test739() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test739");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file1 = null;
        fileEntryIterator0.current = file1;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive3 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest4 = explodedArchive3.manifest;
        explodedArchive3.recursive = false;
        java.util.jar.Manifest manifest7 = explodedArchive3.manifest;
        java.io.File file8 = explodedArchive3.manifestFile;
        java.io.File file9 = null;
        java.io.File file10 = explodedArchive3.getManifestFile(file9);
        java.util.Iterator<java.io.File> fileItor11 = fileEntryIterator0.listFiles(file10);
        java.io.File file12 = fileEntryIterator0.root;
        java.io.File file13 = fileEntryIterator0.root;
        java.io.File file14 = fileEntryIterator0.current;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator15 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        boolean boolean16 = fileEntryIterator15.hasNext();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator17 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator18 = entryComparator17.reversed();
        java.util.Comparator<java.io.File> fileComparator19 = fileComparator18.reversed();
        fileEntryIterator15.entryComparator = fileComparator19;
        java.util.Comparator<java.io.File> fileComparator21 = fileEntryIterator15.entryComparator;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator22 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator23 = entryComparator22.reversed();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator24 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator25 = entryComparator24.reversed();
        java.util.Comparator<java.io.File> fileComparator26 = entryComparator22.thenComparing(fileComparator25);
        java.util.Comparator<java.io.File> fileComparator27 = fileComparator21.thenComparing(fileComparator25);
        fileEntryIterator0.entryComparator = fileComparator21;
        java.util.Deque<java.util.Iterator<java.io.File>> fileItorQueue29 = fileEntryIterator0.stack;
        java.util.Comparator<java.io.File> fileComparator30 = fileEntryIterator0.entryComparator;
        java.io.File file31 = fileEntryIterator0.current;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItorQueue29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file31);
    }

    @Test
    public void test740() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test740");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest1 = explodedArchive0.manifest;
        explodedArchive0.recursive = false;
        java.io.File file4 = null;
        explodedArchive0.root = file4;
        java.io.File file6 = explodedArchive0.root;
        java.util.jar.Manifest manifest7 = null;
        explodedArchive0.manifest = manifest7;
        explodedArchive0.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator11 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file12 = null;
        fileEntryIterator11.current = file12;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive14 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest15 = explodedArchive14.manifest;
        explodedArchive14.recursive = false;
        java.util.jar.Manifest manifest18 = explodedArchive14.manifest;
        java.io.File file19 = explodedArchive14.manifestFile;
        java.io.File file20 = null;
        java.io.File file21 = explodedArchive14.getManifestFile(file20);
        java.util.Iterator<java.io.File> fileItor22 = fileEntryIterator11.listFiles(file21);
        explodedArchive0.root = file21;
        java.util.jar.Manifest manifest24 = null;
        explodedArchive0.manifest = manifest24;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive26 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest27 = explodedArchive26.manifest;
        java.util.jar.Manifest manifest28 = null;
        explodedArchive26.manifest = manifest28;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntry fileEntry30 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntry();
        java.lang.String str31 = fileEntry30.name;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator32 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file33 = null;
        fileEntryIterator32.current = file33;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive35 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest36 = explodedArchive35.manifest;
        explodedArchive35.recursive = false;
        java.util.jar.Manifest manifest39 = explodedArchive35.manifest;
        java.io.File file40 = explodedArchive35.manifestFile;
        java.io.File file41 = null;
        java.io.File file42 = explodedArchive35.getManifestFile(file41);
        java.util.Iterator<java.io.File> fileItor43 = fileEntryIterator32.listFiles(file42);
        java.io.File file44 = fileEntryIterator32.current;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator45 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file46 = null;
        fileEntryIterator45.current = file46;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive48 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest49 = explodedArchive48.manifest;
        explodedArchive48.recursive = false;
        java.util.jar.Manifest manifest52 = explodedArchive48.manifest;
        java.io.File file53 = explodedArchive48.manifestFile;
        java.io.File file54 = null;
        java.io.File file55 = explodedArchive48.getManifestFile(file54);
        java.util.Iterator<java.io.File> fileItor56 = fileEntryIterator45.listFiles(file55);
        java.util.ArrayDeque<java.util.Iterator<java.io.File>> fileItorQueue57 = new java.util.ArrayDeque<java.util.Iterator<java.io.File>>();
        boolean boolean58 = fileItorQueue57.add(fileItor56);
        fileEntryIterator32.stack = fileItorQueue57;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive60 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest61 = explodedArchive60.manifest;
        explodedArchive60.recursive = false;
        java.io.File file64 = null;
        explodedArchive60.root = file64;
        java.io.File file66 = explodedArchive60.root;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive67 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest68 = explodedArchive67.manifest;
        explodedArchive67.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive71 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest72 = explodedArchive71.manifest;
        explodedArchive71.recursive = false;
        java.util.jar.Manifest manifest75 = explodedArchive71.manifest;
        java.io.File file76 = explodedArchive71.manifestFile;
        java.io.File file77 = null;
        java.io.File file78 = explodedArchive71.getManifestFile(file77);
        explodedArchive67.manifestFile = file77;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive80 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest81 = explodedArchive80.manifest;
        explodedArchive80.recursive = false;
        java.util.jar.Manifest manifest84 = explodedArchive80.manifest;
        java.io.File file85 = explodedArchive80.manifestFile;
        java.io.File file86 = null;
        java.io.File file87 = explodedArchive80.getManifestFile(file86);
        explodedArchive67.manifestFile = file87;
        java.io.File file89 = explodedArchive60.getManifestFile(file87);
        fileEntryIterator32.root = file87;
        fileEntry30.file = file87;
        java.io.File file92 = explodedArchive26.getManifestFile(file87);
        explodedArchive0.root = file87;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file21.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file21.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file42.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file42.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file55.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file55.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest75);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file76);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file78);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file78.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file78.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest81);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest84);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file85);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file87);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file87.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file87.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file89);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file89.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file89.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file92);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file92.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file92.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
    }

    @Test
    public void test741() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test741");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntry fileEntry0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntry();
        java.io.File file1 = fileEntry0.file;
        java.io.File file2 = fileEntry0.getFile();
        fileEntry0.name = "";
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file2);
    }

    @Test
    public void test742() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test742");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest1 = explodedArchive0.manifest;
        explodedArchive0.recursive = false;
        java.util.jar.Manifest manifest4 = explodedArchive0.manifest;
        explodedArchive0.recursive = true;
        boolean boolean7 = explodedArchive0.recursive;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
    }

    @Test
    public void test743() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test743");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest1 = explodedArchive0.manifest;
        explodedArchive0.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive4 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest5 = explodedArchive4.manifest;
        explodedArchive4.recursive = false;
        java.util.jar.Manifest manifest8 = explodedArchive4.manifest;
        java.io.File file9 = explodedArchive4.manifestFile;
        java.io.File file10 = null;
        java.io.File file11 = explodedArchive4.getManifestFile(file10);
        explodedArchive0.manifestFile = file10;
        java.util.jar.Manifest manifest13 = null;
        explodedArchive0.manifest = manifest13;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive15 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.lang.String str16 = explodedArchive15.toString();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive17 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file18 = explodedArchive17.root;
        java.io.File file19 = null;
        explodedArchive17.manifestFile = file19;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive21 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest22 = explodedArchive21.manifest;
        explodedArchive21.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive25 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest26 = explodedArchive25.manifest;
        explodedArchive25.recursive = false;
        java.util.jar.Manifest manifest29 = explodedArchive25.manifest;
        java.io.File file30 = explodedArchive25.manifestFile;
        java.io.File file31 = null;
        java.io.File file32 = explodedArchive25.getManifestFile(file31);
        explodedArchive21.manifestFile = file31;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive34 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest35 = explodedArchive34.manifest;
        explodedArchive34.recursive = false;
        java.util.jar.Manifest manifest38 = explodedArchive34.manifest;
        java.io.File file39 = explodedArchive34.manifestFile;
        java.io.File file40 = null;
        java.io.File file41 = explodedArchive34.getManifestFile(file40);
        explodedArchive21.manifestFile = file41;
        java.io.File file43 = explodedArchive17.getManifestFile(file41);
        java.io.File file44 = explodedArchive15.getManifestFile(file41);
        java.io.File file45 = null;
        java.io.File file46 = explodedArchive15.getManifestFile(file45);
        java.io.File file47 = explodedArchive0.getManifestFile(file45);
        explodedArchive0.recursive = true;
        java.util.jar.Manifest manifest50 = null;
        explodedArchive0.manifest = manifest50;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file11.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file11.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str16 + "' != '" + "exploded archive" + "'", str16.equals("exploded archive"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file32.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file32.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file41.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file41.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file43.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file43.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file44.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file44.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file46.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file46.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file47.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file47.toString(), "META-INF/MANIFEST.MF");
    }

    @Test
    public void test744() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test744");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest1 = explodedArchive0.manifest;
        explodedArchive0.recursive = false;
        java.io.File file4 = null;
        explodedArchive0.root = file4;
        java.io.File file6 = explodedArchive0.root;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive7 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest8 = explodedArchive7.manifest;
        explodedArchive7.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive11 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest12 = explodedArchive11.manifest;
        explodedArchive11.recursive = false;
        java.util.jar.Manifest manifest15 = explodedArchive11.manifest;
        java.io.File file16 = explodedArchive11.manifestFile;
        java.io.File file17 = null;
        java.io.File file18 = explodedArchive11.getManifestFile(file17);
        explodedArchive7.manifestFile = file17;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive20 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest21 = explodedArchive20.manifest;
        explodedArchive20.recursive = false;
        java.util.jar.Manifest manifest24 = explodedArchive20.manifest;
        java.io.File file25 = explodedArchive20.manifestFile;
        java.io.File file26 = null;
        java.io.File file27 = explodedArchive20.getManifestFile(file26);
        explodedArchive7.manifestFile = file27;
        java.io.File file29 = explodedArchive0.getManifestFile(file27);
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntry fileEntry30 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntry();
        java.lang.String str31 = fileEntry30.name;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator32 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file33 = null;
        fileEntryIterator32.current = file33;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive35 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.lang.String str36 = explodedArchive35.toString();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive37 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file38 = explodedArchive37.root;
        java.io.File file39 = null;
        explodedArchive37.manifestFile = file39;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive41 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest42 = explodedArchive41.manifest;
        explodedArchive41.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive45 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest46 = explodedArchive45.manifest;
        explodedArchive45.recursive = false;
        java.util.jar.Manifest manifest49 = explodedArchive45.manifest;
        java.io.File file50 = explodedArchive45.manifestFile;
        java.io.File file51 = null;
        java.io.File file52 = explodedArchive45.getManifestFile(file51);
        explodedArchive41.manifestFile = file51;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive54 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest55 = explodedArchive54.manifest;
        explodedArchive54.recursive = false;
        java.util.jar.Manifest manifest58 = explodedArchive54.manifest;
        java.io.File file59 = explodedArchive54.manifestFile;
        java.io.File file60 = null;
        java.io.File file61 = explodedArchive54.getManifestFile(file60);
        explodedArchive41.manifestFile = file61;
        java.io.File file63 = explodedArchive37.getManifestFile(file61);
        java.io.File file64 = explodedArchive35.getManifestFile(file61);
        fileEntryIterator32.root = file61;
        fileEntry30.file = file61;
        java.io.File file67 = fileEntry30.file;
        explodedArchive0.root = file67;
        java.io.File file69 = explodedArchive0.manifestFile;
        boolean boolean70 = explodedArchive0.recursive;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file18.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file18.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file27.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file27.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file29.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file29.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str36 + "' != '" + "exploded archive" + "'", str36.equals("exploded archive"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file52.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file52.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file61.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file61.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file63.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file63.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file64.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file64.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file67.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file67.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
    }

    @Test
    public void test745() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test745");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntry fileEntry0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntry();
        java.lang.String str1 = fileEntry0.getName();
        java.io.File file2 = fileEntry0.file;
        java.io.File file3 = fileEntry0.getFile();
        fileEntry0.name = "hi!";
        java.io.File file6 = fileEntry0.getFile();
        fileEntry0.name = "file:/server/study-execution/new-nimrod/nimrod-hunoroutput-test-dest/spring-boot/af20dc6cc45c032573413c401f9f73aa75371744/randoop_1/META-INF/MANIFEST.MF/META-INF/MANIFEST.MF";
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file6);
    }

    @Test
    public void test746() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test746");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest1 = explodedArchive0.manifest;
        explodedArchive0.recursive = false;
        java.io.File file4 = null;
        explodedArchive0.root = file4;
        java.io.File file6 = explodedArchive0.root;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive7 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest8 = explodedArchive7.manifest;
        explodedArchive7.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive11 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest12 = explodedArchive11.manifest;
        explodedArchive11.recursive = false;
        java.util.jar.Manifest manifest15 = explodedArchive11.manifest;
        java.io.File file16 = explodedArchive11.manifestFile;
        java.io.File file17 = null;
        java.io.File file18 = explodedArchive11.getManifestFile(file17);
        explodedArchive7.manifestFile = file17;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive20 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest21 = explodedArchive20.manifest;
        explodedArchive20.recursive = false;
        java.util.jar.Manifest manifest24 = explodedArchive20.manifest;
        java.io.File file25 = explodedArchive20.manifestFile;
        java.io.File file26 = null;
        java.io.File file27 = explodedArchive20.getManifestFile(file26);
        explodedArchive7.manifestFile = file27;
        java.io.File file29 = explodedArchive0.getManifestFile(file27);
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntry fileEntry30 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntry();
        java.lang.String str31 = fileEntry30.name;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator32 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file33 = null;
        fileEntryIterator32.current = file33;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive35 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.lang.String str36 = explodedArchive35.toString();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive37 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file38 = explodedArchive37.root;
        java.io.File file39 = null;
        explodedArchive37.manifestFile = file39;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive41 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest42 = explodedArchive41.manifest;
        explodedArchive41.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive45 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest46 = explodedArchive45.manifest;
        explodedArchive45.recursive = false;
        java.util.jar.Manifest manifest49 = explodedArchive45.manifest;
        java.io.File file50 = explodedArchive45.manifestFile;
        java.io.File file51 = null;
        java.io.File file52 = explodedArchive45.getManifestFile(file51);
        explodedArchive41.manifestFile = file51;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive54 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest55 = explodedArchive54.manifest;
        explodedArchive54.recursive = false;
        java.util.jar.Manifest manifest58 = explodedArchive54.manifest;
        java.io.File file59 = explodedArchive54.manifestFile;
        java.io.File file60 = null;
        java.io.File file61 = explodedArchive54.getManifestFile(file60);
        explodedArchive41.manifestFile = file61;
        java.io.File file63 = explodedArchive37.getManifestFile(file61);
        java.io.File file64 = explodedArchive35.getManifestFile(file61);
        fileEntryIterator32.root = file61;
        fileEntry30.file = file61;
        java.io.File file67 = fileEntry30.file;
        explodedArchive0.root = file67;
        java.util.Spliterator<org.springframework.boot.loader.archive.Archive.Entry> entrySpliterator69 = explodedArchive0.spliterator();
        java.lang.String str70 = explodedArchive0.toString();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file18.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file18.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file27.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file27.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file29.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file29.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str36 + "' != '" + "exploded archive" + "'", str36.equals("exploded archive"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file52.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file52.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file61.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file61.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file63.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file63.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file64.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file64.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file67.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file67.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(entrySpliterator69);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertTrue("'" + str70 + "' != '" + "file:/server/study-execution/new-nimrod/nimrod-hunoroutput-test-dest/spring-boot/af20dc6cc45c032573413c401f9f73aa75371744/randoop_1/META-INF/MANIFEST.MF" + "'", str70.equals("file:/server/study-execution/new-nimrod/nimrod-hunoroutput-test-dest/spring-boot/af20dc6cc45c032573413c401f9f73aa75371744/randoop_1/META-INF/MANIFEST.MF"));
    }

    @Test
    public void test747() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test747");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntry fileEntry0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntry();
        java.lang.String str1 = fileEntry0.name;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator2 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file3 = null;
        fileEntryIterator2.current = file3;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive5 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.lang.String str6 = explodedArchive5.toString();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive7 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file8 = explodedArchive7.root;
        java.io.File file9 = null;
        explodedArchive7.manifestFile = file9;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive11 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest12 = explodedArchive11.manifest;
        explodedArchive11.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive15 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest16 = explodedArchive15.manifest;
        explodedArchive15.recursive = false;
        java.util.jar.Manifest manifest19 = explodedArchive15.manifest;
        java.io.File file20 = explodedArchive15.manifestFile;
        java.io.File file21 = null;
        java.io.File file22 = explodedArchive15.getManifestFile(file21);
        explodedArchive11.manifestFile = file21;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive24 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest25 = explodedArchive24.manifest;
        explodedArchive24.recursive = false;
        java.util.jar.Manifest manifest28 = explodedArchive24.manifest;
        java.io.File file29 = explodedArchive24.manifestFile;
        java.io.File file30 = null;
        java.io.File file31 = explodedArchive24.getManifestFile(file30);
        explodedArchive11.manifestFile = file31;
        java.io.File file33 = explodedArchive7.getManifestFile(file31);
        java.io.File file34 = explodedArchive5.getManifestFile(file31);
        fileEntryIterator2.root = file31;
        fileEntry0.file = file31;
        java.io.File file37 = fileEntry0.getFile();
        java.io.File file38 = fileEntry0.getFile();
        fileEntry0.name = "";
        java.io.File file41 = fileEntry0.getFile();
        java.lang.String str42 = fileEntry0.name;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "exploded archive" + "'", str6.equals("exploded archive"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file22.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file22.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file31.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file31.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file33.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file33.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file34.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file34.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file37.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file37.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file38.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file38.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file41.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file41.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str42 + "' != '" + "" + "'", str42.equals(""));
    }

    @Test
    public void test748() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test748");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest1 = explodedArchive0.manifest;
        explodedArchive0.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive4 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest5 = explodedArchive4.manifest;
        explodedArchive4.recursive = false;
        java.util.jar.Manifest manifest8 = explodedArchive4.manifest;
        java.io.File file9 = explodedArchive4.manifestFile;
        java.io.File file10 = null;
        java.io.File file11 = explodedArchive4.getManifestFile(file10);
        explodedArchive0.manifestFile = file10;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive13 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest14 = explodedArchive13.manifest;
        explodedArchive13.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive17 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest18 = explodedArchive17.manifest;
        explodedArchive17.recursive = false;
        java.util.jar.Manifest manifest21 = explodedArchive17.manifest;
        java.io.File file22 = explodedArchive17.manifestFile;
        java.io.File file23 = null;
        java.io.File file24 = explodedArchive17.getManifestFile(file23);
        explodedArchive13.manifestFile = file23;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive26 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest27 = explodedArchive26.manifest;
        explodedArchive26.recursive = false;
        java.util.jar.Manifest manifest30 = explodedArchive26.manifest;
        java.io.File file31 = explodedArchive26.manifestFile;
        java.io.File file32 = null;
        java.io.File file33 = explodedArchive26.getManifestFile(file32);
        explodedArchive13.manifestFile = file33;
        explodedArchive0.root = file33;
        java.net.URL uRL36 = explodedArchive0.getUrl();
        boolean boolean37 = explodedArchive0.recursive;
        org.springframework.boot.loader.archive.Archive.EntryFilter entryFilter38 = null;
        java.util.List<org.springframework.boot.loader.archive.Archive> archiveList39 = explodedArchive0.getNestedArchives(entryFilter38);
        java.lang.String str40 = explodedArchive0.toString();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file11.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file11.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file24.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file24.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file33.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file33.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(uRL36);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(uRL36.toString(), "file:/server/study-execution/new-nimrod/nimrod-hunoroutput-test-dest/spring-boot/af20dc6cc45c032573413c401f9f73aa75371744/randoop_1/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(archiveList39);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertTrue("'" + str40 + "' != '" + "file:/server/study-execution/new-nimrod/nimrod-hunoroutput-test-dest/spring-boot/af20dc6cc45c032573413c401f9f73aa75371744/randoop_1/META-INF/MANIFEST.MF" + "'", str40.equals("file:/server/study-execution/new-nimrod/nimrod-hunoroutput-test-dest/spring-boot/af20dc6cc45c032573413c401f9f73aa75371744/randoop_1/META-INF/MANIFEST.MF"));
    }

    @Test
    public void test749() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test749");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntry fileEntry0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntry();
        java.io.File file1 = fileEntry0.file;
        java.lang.String str2 = fileEntry0.name;
        java.io.File file3 = fileEntry0.file;
        java.lang.String str4 = fileEntry0.getName();
        fileEntry0.name = "";
        java.io.File file7 = fileEntry0.getFile();
        fileEntry0.name = "file:/server/study-execution/new-nimrod/nimrod-hunoroutput-test-dest/spring-boot/af20dc6cc45c032573413c401f9f73aa75371744/randoop_1/META-INF/MANIFEST.MF/META-INF/MANIFEST.MF";
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator10 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file11 = null;
        fileEntryIterator10.current = file11;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive13 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest14 = explodedArchive13.manifest;
        explodedArchive13.recursive = false;
        java.util.jar.Manifest manifest17 = explodedArchive13.manifest;
        java.io.File file18 = explodedArchive13.manifestFile;
        java.io.File file19 = null;
        java.io.File file20 = explodedArchive13.getManifestFile(file19);
        java.util.Iterator<java.io.File> fileItor21 = fileEntryIterator10.listFiles(file20);
        java.io.File file22 = fileEntryIterator10.current;
        boolean boolean23 = fileEntryIterator10.recursive;
        java.io.File file24 = fileEntryIterator10.poll();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator25 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file26 = null;
        fileEntryIterator25.current = file26;
        fileEntryIterator25.recursive = true;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator30 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator31 = entryComparator30.reversed();
        java.util.Comparator<java.io.File> fileComparator32 = entryComparator30.reversed();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive33 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest34 = explodedArchive33.manifest;
        explodedArchive33.recursive = false;
        java.util.jar.Manifest manifest37 = explodedArchive33.manifest;
        java.io.File file38 = explodedArchive33.manifestFile;
        java.io.File file39 = null;
        java.io.File file40 = explodedArchive33.getManifestFile(file39);
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive41 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest42 = explodedArchive41.manifest;
        explodedArchive41.recursive = false;
        java.io.File file45 = null;
        explodedArchive41.root = file45;
        java.io.File file47 = explodedArchive41.root;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive48 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest49 = explodedArchive48.manifest;
        explodedArchive48.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive52 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest53 = explodedArchive52.manifest;
        explodedArchive52.recursive = false;
        java.util.jar.Manifest manifest56 = explodedArchive52.manifest;
        java.io.File file57 = explodedArchive52.manifestFile;
        java.io.File file58 = null;
        java.io.File file59 = explodedArchive52.getManifestFile(file58);
        explodedArchive48.manifestFile = file58;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive61 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest62 = explodedArchive61.manifest;
        explodedArchive61.recursive = false;
        java.util.jar.Manifest manifest65 = explodedArchive61.manifest;
        java.io.File file66 = explodedArchive61.manifestFile;
        java.io.File file67 = null;
        java.io.File file68 = explodedArchive61.getManifestFile(file67);
        explodedArchive48.manifestFile = file68;
        java.io.File file70 = explodedArchive41.getManifestFile(file68);
        int int71 = entryComparator30.compare(file40, file68);
        java.util.Iterator<java.io.File> fileItor72 = fileEntryIterator25.listFiles(file40);
        fileEntryIterator10.current = file40;
        fileEntry0.file = file40;
        fileEntry0.name = "exploded archive";
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file20.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file20.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file40.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file40.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file59.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file59.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file68.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file68.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file70.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file70.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor72);
    }

    @Test
    public void test750() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test750");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        boolean boolean1 = fileEntryIterator0.hasNext();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator2 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator3 = entryComparator2.reversed();
        java.util.Comparator<java.io.File> fileComparator4 = fileComparator3.reversed();
        fileEntryIterator0.entryComparator = fileComparator4;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive6 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file7 = explodedArchive6.root;
        java.io.File file8 = null;
        explodedArchive6.manifestFile = file8;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive10 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest11 = explodedArchive10.manifest;
        explodedArchive10.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive14 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest15 = explodedArchive14.manifest;
        explodedArchive14.recursive = false;
        java.util.jar.Manifest manifest18 = explodedArchive14.manifest;
        java.io.File file19 = explodedArchive14.manifestFile;
        java.io.File file20 = null;
        java.io.File file21 = explodedArchive14.getManifestFile(file20);
        explodedArchive10.manifestFile = file20;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive23 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest24 = explodedArchive23.manifest;
        explodedArchive23.recursive = false;
        java.util.jar.Manifest manifest27 = explodedArchive23.manifest;
        java.io.File file28 = explodedArchive23.manifestFile;
        java.io.File file29 = null;
        java.io.File file30 = explodedArchive23.getManifestFile(file29);
        explodedArchive10.manifestFile = file30;
        java.io.File file32 = explodedArchive6.getManifestFile(file30);
        java.util.Iterator<java.io.File> fileItor33 = fileEntryIterator0.listFiles(file32);
        boolean boolean34 = fileEntryIterator0.recursive;
        java.util.Deque<java.util.Iterator<java.io.File>> fileItorQueue35 = fileEntryIterator0.stack;
        java.io.File file36 = fileEntryIterator0.poll();
        // The following exception was thrown during execution in test generation
        try {
            fileEntryIterator0.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: remove");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file21.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file21.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file30.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file30.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file32.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file32.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItorQueue35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file36);
    }

    @Test
    public void test751() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test751");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest1 = explodedArchive0.manifest;
        explodedArchive0.recursive = false;
        java.util.jar.Manifest manifest4 = explodedArchive0.manifest;
        java.io.File file5 = explodedArchive0.manifestFile;
        java.io.File file6 = explodedArchive0.root;
        java.util.jar.Manifest manifest7 = explodedArchive0.manifest;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest7);
    }

    @Test
    public void test752() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test752");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file1 = null;
        fileEntryIterator0.current = file1;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive3 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest4 = explodedArchive3.manifest;
        explodedArchive3.recursive = false;
        java.util.jar.Manifest manifest7 = explodedArchive3.manifest;
        java.io.File file8 = explodedArchive3.manifestFile;
        java.io.File file9 = null;
        java.io.File file10 = explodedArchive3.getManifestFile(file9);
        java.util.Iterator<java.io.File> fileItor11 = fileEntryIterator0.listFiles(file10);
        java.util.Comparator<java.io.File> fileComparator12 = fileEntryIterator0.entryComparator;
        boolean boolean13 = fileEntryIterator0.recursive;
        boolean boolean14 = fileEntryIterator0.hasNext();
        java.io.File file15 = fileEntryIterator0.current;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator16 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        boolean boolean17 = fileEntryIterator16.hasNext();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator18 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator19 = entryComparator18.reversed();
        java.util.Comparator<java.io.File> fileComparator20 = fileComparator19.reversed();
        fileEntryIterator16.entryComparator = fileComparator20;
        java.util.Comparator<java.io.File> fileComparator22 = fileEntryIterator16.entryComparator;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator23 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator24 = entryComparator23.reversed();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator25 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator26 = entryComparator25.reversed();
        java.util.Comparator<java.io.File> fileComparator27 = entryComparator23.thenComparing(fileComparator26);
        java.util.Comparator<java.io.File> fileComparator28 = fileComparator22.thenComparing(fileComparator26);
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator29 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator30 = entryComparator29.reversed();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator31 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file32 = null;
        fileEntryIterator31.current = file32;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive34 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest35 = explodedArchive34.manifest;
        explodedArchive34.recursive = false;
        java.util.jar.Manifest manifest38 = explodedArchive34.manifest;
        java.io.File file39 = explodedArchive34.manifestFile;
        java.io.File file40 = null;
        java.io.File file41 = explodedArchive34.getManifestFile(file40);
        java.util.Iterator<java.io.File> fileItor42 = fileEntryIterator31.listFiles(file41);
        java.io.File file43 = fileEntryIterator31.current;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator44 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file45 = null;
        fileEntryIterator44.current = file45;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive47 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest48 = explodedArchive47.manifest;
        explodedArchive47.recursive = false;
        java.util.jar.Manifest manifest51 = explodedArchive47.manifest;
        java.io.File file52 = explodedArchive47.manifestFile;
        java.io.File file53 = null;
        java.io.File file54 = explodedArchive47.getManifestFile(file53);
        java.util.Iterator<java.io.File> fileItor55 = fileEntryIterator44.listFiles(file54);
        java.util.ArrayDeque<java.util.Iterator<java.io.File>> fileItorQueue56 = new java.util.ArrayDeque<java.util.Iterator<java.io.File>>();
        boolean boolean57 = fileItorQueue56.add(fileItor55);
        fileEntryIterator31.stack = fileItorQueue56;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive59 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest60 = explodedArchive59.manifest;
        explodedArchive59.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive63 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest64 = explodedArchive63.manifest;
        explodedArchive63.recursive = false;
        java.util.jar.Manifest manifest67 = explodedArchive63.manifest;
        java.io.File file68 = explodedArchive63.manifestFile;
        java.io.File file69 = null;
        java.io.File file70 = explodedArchive63.getManifestFile(file69);
        explodedArchive59.manifestFile = file69;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive72 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest73 = explodedArchive72.manifest;
        explodedArchive72.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive76 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest77 = explodedArchive76.manifest;
        explodedArchive76.recursive = false;
        java.util.jar.Manifest manifest80 = explodedArchive76.manifest;
        java.io.File file81 = explodedArchive76.manifestFile;
        java.io.File file82 = null;
        java.io.File file83 = explodedArchive76.getManifestFile(file82);
        explodedArchive72.manifestFile = file82;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive85 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest86 = explodedArchive85.manifest;
        explodedArchive85.recursive = false;
        java.util.jar.Manifest manifest89 = explodedArchive85.manifest;
        java.io.File file90 = explodedArchive85.manifestFile;
        java.io.File file91 = null;
        java.io.File file92 = explodedArchive85.getManifestFile(file91);
        explodedArchive72.manifestFile = file92;
        explodedArchive59.root = file92;
        java.util.Iterator<java.io.File> fileItor95 = fileEntryIterator31.listFiles(file92);
        java.util.Comparator<java.io.File> fileComparator96 = fileEntryIterator31.entryComparator;
        java.util.Comparator<java.io.File> fileComparator97 = entryComparator29.thenComparing(fileComparator96);
        java.util.Comparator<java.io.File> fileComparator98 = fileComparator28.thenComparing(fileComparator97);
        fileEntryIterator0.entryComparator = fileComparator28;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file41.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file41.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file54.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file54.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file70.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file70.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest73);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest77);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest80);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file81);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file83);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file83.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file83.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest86);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest89);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file90);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file92);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file92.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file92.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor95);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator96);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator97);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator98);
    }

    @Test
    public void test753() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test753");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file1 = explodedArchive0.root;
        java.io.File file2 = null;
        explodedArchive0.manifestFile = file2;
        java.io.File file4 = explodedArchive0.root;
        boolean boolean5 = explodedArchive0.recursive;
        explodedArchive0.recursive = true;
        // The following exception was thrown during execution in test generation
        try {
            java.net.URL uRL8 = explodedArchive0.getUrl();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test754() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test754");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntry fileEntry0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntry();
        java.lang.String str1 = fileEntry0.getName();
        java.io.File file2 = fileEntry0.getFile();
        java.io.File file3 = fileEntry0.file;
        fileEntry0.name = "exploded archive";
        java.lang.String str6 = fileEntry0.name;
        java.io.File file7 = fileEntry0.getFile();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator8 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        boolean boolean9 = fileEntryIterator8.hasNext();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator10 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator11 = entryComparator10.reversed();
        java.util.Comparator<java.io.File> fileComparator12 = fileComparator11.reversed();
        fileEntryIterator8.entryComparator = fileComparator12;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive14 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file15 = explodedArchive14.root;
        java.io.File file16 = null;
        explodedArchive14.manifestFile = file16;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive18 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest19 = explodedArchive18.manifest;
        explodedArchive18.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive22 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest23 = explodedArchive22.manifest;
        explodedArchive22.recursive = false;
        java.util.jar.Manifest manifest26 = explodedArchive22.manifest;
        java.io.File file27 = explodedArchive22.manifestFile;
        java.io.File file28 = null;
        java.io.File file29 = explodedArchive22.getManifestFile(file28);
        explodedArchive18.manifestFile = file28;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive31 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest32 = explodedArchive31.manifest;
        explodedArchive31.recursive = false;
        java.util.jar.Manifest manifest35 = explodedArchive31.manifest;
        java.io.File file36 = explodedArchive31.manifestFile;
        java.io.File file37 = null;
        java.io.File file38 = explodedArchive31.getManifestFile(file37);
        explodedArchive18.manifestFile = file38;
        java.io.File file40 = explodedArchive14.getManifestFile(file38);
        java.util.Iterator<java.io.File> fileItor41 = fileEntryIterator8.listFiles(file40);
        boolean boolean42 = fileEntryIterator8.recursive;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator43 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator44 = entryComparator43.reversed();
        java.util.Comparator<java.io.File> fileComparator45 = entryComparator43.reversed();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive46 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest47 = explodedArchive46.manifest;
        explodedArchive46.recursive = false;
        java.util.jar.Manifest manifest50 = explodedArchive46.manifest;
        java.io.File file51 = explodedArchive46.manifestFile;
        java.io.File file52 = null;
        java.io.File file53 = explodedArchive46.getManifestFile(file52);
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive54 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest55 = explodedArchive54.manifest;
        explodedArchive54.recursive = false;
        java.io.File file58 = null;
        explodedArchive54.root = file58;
        java.io.File file60 = explodedArchive54.root;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive61 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest62 = explodedArchive61.manifest;
        explodedArchive61.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive65 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest66 = explodedArchive65.manifest;
        explodedArchive65.recursive = false;
        java.util.jar.Manifest manifest69 = explodedArchive65.manifest;
        java.io.File file70 = explodedArchive65.manifestFile;
        java.io.File file71 = null;
        java.io.File file72 = explodedArchive65.getManifestFile(file71);
        explodedArchive61.manifestFile = file71;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive74 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest75 = explodedArchive74.manifest;
        explodedArchive74.recursive = false;
        java.util.jar.Manifest manifest78 = explodedArchive74.manifest;
        java.io.File file79 = explodedArchive74.manifestFile;
        java.io.File file80 = null;
        java.io.File file81 = explodedArchive74.getManifestFile(file80);
        explodedArchive61.manifestFile = file81;
        java.io.File file83 = explodedArchive54.getManifestFile(file81);
        int int84 = entryComparator43.compare(file53, file81);
        java.util.Iterator<java.io.File> fileItor85 = fileEntryIterator8.listFiles(file53);
        fileEntry0.file = file53;
        java.lang.String str87 = fileEntry0.name;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "exploded archive" + "'", str6.equals("exploded archive"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file29.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file29.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file38.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file38.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file40.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file40.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file53.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file53.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file72.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file72.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest75);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest78);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file79);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file81);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file81.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file81.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file83);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file83.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file83.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 0 + "'", int84 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor85);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str87 + "' != '" + "exploded archive" + "'", str87.equals("exploded archive"));
    }

    @Test
    public void test755() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test755");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file1 = explodedArchive0.root;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive2 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest3 = explodedArchive2.manifest;
        explodedArchive2.recursive = false;
        java.util.jar.Manifest manifest6 = explodedArchive2.manifest;
        java.io.File file7 = explodedArchive2.manifestFile;
        java.io.File file8 = null;
        java.io.File file9 = explodedArchive2.getManifestFile(file8);
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator10 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file11 = null;
        fileEntryIterator10.current = file11;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive13 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.lang.String str14 = explodedArchive13.toString();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive15 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file16 = explodedArchive15.root;
        java.io.File file17 = null;
        explodedArchive15.manifestFile = file17;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive19 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest20 = explodedArchive19.manifest;
        explodedArchive19.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive23 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest24 = explodedArchive23.manifest;
        explodedArchive23.recursive = false;
        java.util.jar.Manifest manifest27 = explodedArchive23.manifest;
        java.io.File file28 = explodedArchive23.manifestFile;
        java.io.File file29 = null;
        java.io.File file30 = explodedArchive23.getManifestFile(file29);
        explodedArchive19.manifestFile = file29;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive32 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest33 = explodedArchive32.manifest;
        explodedArchive32.recursive = false;
        java.util.jar.Manifest manifest36 = explodedArchive32.manifest;
        java.io.File file37 = explodedArchive32.manifestFile;
        java.io.File file38 = null;
        java.io.File file39 = explodedArchive32.getManifestFile(file38);
        explodedArchive19.manifestFile = file39;
        java.io.File file41 = explodedArchive15.getManifestFile(file39);
        java.io.File file42 = explodedArchive13.getManifestFile(file39);
        fileEntryIterator10.root = file39;
        explodedArchive2.root = file39;
        java.io.File file45 = explodedArchive0.getManifestFile(file39);
        boolean boolean46 = explodedArchive0.recursive;
        explodedArchive0.recursive = true;
        java.io.File file49 = null;
        explodedArchive0.manifestFile = file49;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file9.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file9.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str14 + "' != '" + "exploded archive" + "'", str14.equals("exploded archive"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file30.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file30.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file39.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file39.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file41.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file41.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file42.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file42.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file45.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file45.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
    }

    @Test
    public void test756() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test756");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file1 = null;
        fileEntryIterator0.current = file1;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive3 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest4 = explodedArchive3.manifest;
        explodedArchive3.recursive = false;
        java.util.jar.Manifest manifest7 = explodedArchive3.manifest;
        java.io.File file8 = explodedArchive3.manifestFile;
        java.io.File file9 = null;
        java.io.File file10 = explodedArchive3.getManifestFile(file9);
        java.util.Iterator<java.io.File> fileItor11 = fileEntryIterator0.listFiles(file10);
        java.io.File file12 = fileEntryIterator0.current;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator13 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file14 = null;
        fileEntryIterator13.current = file14;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive16 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest17 = explodedArchive16.manifest;
        explodedArchive16.recursive = false;
        java.util.jar.Manifest manifest20 = explodedArchive16.manifest;
        java.io.File file21 = explodedArchive16.manifestFile;
        java.io.File file22 = null;
        java.io.File file23 = explodedArchive16.getManifestFile(file22);
        java.util.Iterator<java.io.File> fileItor24 = fileEntryIterator13.listFiles(file23);
        java.util.ArrayDeque<java.util.Iterator<java.io.File>> fileItorQueue25 = new java.util.ArrayDeque<java.util.Iterator<java.io.File>>();
        boolean boolean26 = fileItorQueue25.add(fileItor24);
        fileEntryIterator0.stack = fileItorQueue25;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive28 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest29 = explodedArchive28.manifest;
        explodedArchive28.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive32 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest33 = explodedArchive32.manifest;
        explodedArchive32.recursive = false;
        java.util.jar.Manifest manifest36 = explodedArchive32.manifest;
        java.io.File file37 = explodedArchive32.manifestFile;
        java.io.File file38 = null;
        java.io.File file39 = explodedArchive32.getManifestFile(file38);
        explodedArchive28.manifestFile = file38;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive41 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest42 = explodedArchive41.manifest;
        explodedArchive41.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive45 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest46 = explodedArchive45.manifest;
        explodedArchive45.recursive = false;
        java.util.jar.Manifest manifest49 = explodedArchive45.manifest;
        java.io.File file50 = explodedArchive45.manifestFile;
        java.io.File file51 = null;
        java.io.File file52 = explodedArchive45.getManifestFile(file51);
        explodedArchive41.manifestFile = file51;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive54 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest55 = explodedArchive54.manifest;
        explodedArchive54.recursive = false;
        java.util.jar.Manifest manifest58 = explodedArchive54.manifest;
        java.io.File file59 = explodedArchive54.manifestFile;
        java.io.File file60 = null;
        java.io.File file61 = explodedArchive54.getManifestFile(file60);
        explodedArchive41.manifestFile = file61;
        explodedArchive28.root = file61;
        java.util.Iterator<java.io.File> fileItor64 = fileEntryIterator0.listFiles(file61);
        java.io.File file65 = fileEntryIterator0.root;
        fileEntryIterator0.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator68 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file69 = null;
        fileEntryIterator68.current = file69;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive71 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest72 = explodedArchive71.manifest;
        explodedArchive71.recursive = false;
        java.util.jar.Manifest manifest75 = explodedArchive71.manifest;
        java.io.File file76 = explodedArchive71.manifestFile;
        java.io.File file77 = null;
        java.io.File file78 = explodedArchive71.getManifestFile(file77);
        java.util.Iterator<java.io.File> fileItor79 = fileEntryIterator68.listFiles(file78);
        java.io.File file80 = fileEntryIterator68.root;
        java.io.File file81 = fileEntryIterator68.root;
        java.util.Deque<java.util.Iterator<java.io.File>> fileItorQueue82 = fileEntryIterator68.stack;
        fileEntryIterator0.stack = fileItorQueue82;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file23.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file23.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file39.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file39.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file52.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file52.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file61.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file61.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest75);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file76);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file78);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file78.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file78.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor79);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file80);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file81);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItorQueue82);
    }

    @Test
    public void test757() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test757");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntry fileEntry0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntry();
        java.io.File file1 = fileEntry0.getFile();
        java.io.File file2 = fileEntry0.getFile();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive3 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file4 = explodedArchive3.root;
        java.io.File file5 = null;
        explodedArchive3.manifestFile = file5;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive7 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest8 = explodedArchive7.manifest;
        explodedArchive7.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive11 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest12 = explodedArchive11.manifest;
        explodedArchive11.recursive = false;
        java.util.jar.Manifest manifest15 = explodedArchive11.manifest;
        java.io.File file16 = explodedArchive11.manifestFile;
        java.io.File file17 = null;
        java.io.File file18 = explodedArchive11.getManifestFile(file17);
        explodedArchive7.manifestFile = file17;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive20 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest21 = explodedArchive20.manifest;
        explodedArchive20.recursive = false;
        java.util.jar.Manifest manifest24 = explodedArchive20.manifest;
        java.io.File file25 = explodedArchive20.manifestFile;
        java.io.File file26 = null;
        java.io.File file27 = explodedArchive20.getManifestFile(file26);
        explodedArchive7.manifestFile = file27;
        java.io.File file29 = explodedArchive3.getManifestFile(file27);
        fileEntry0.file = file29;
        fileEntry0.name = "";
        java.lang.String str33 = fileEntry0.name;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file18.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file18.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file27.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file27.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file29.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file29.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str33 + "' != '" + "" + "'", str33.equals(""));
    }

    @Test
    public void test758() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test758");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntry fileEntry0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntry();
        java.lang.String str1 = fileEntry0.name;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator2 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file3 = null;
        fileEntryIterator2.current = file3;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive5 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.lang.String str6 = explodedArchive5.toString();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive7 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file8 = explodedArchive7.root;
        java.io.File file9 = null;
        explodedArchive7.manifestFile = file9;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive11 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest12 = explodedArchive11.manifest;
        explodedArchive11.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive15 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest16 = explodedArchive15.manifest;
        explodedArchive15.recursive = false;
        java.util.jar.Manifest manifest19 = explodedArchive15.manifest;
        java.io.File file20 = explodedArchive15.manifestFile;
        java.io.File file21 = null;
        java.io.File file22 = explodedArchive15.getManifestFile(file21);
        explodedArchive11.manifestFile = file21;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive24 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest25 = explodedArchive24.manifest;
        explodedArchive24.recursive = false;
        java.util.jar.Manifest manifest28 = explodedArchive24.manifest;
        java.io.File file29 = explodedArchive24.manifestFile;
        java.io.File file30 = null;
        java.io.File file31 = explodedArchive24.getManifestFile(file30);
        explodedArchive11.manifestFile = file31;
        java.io.File file33 = explodedArchive7.getManifestFile(file31);
        java.io.File file34 = explodedArchive5.getManifestFile(file31);
        fileEntryIterator2.root = file31;
        fileEntry0.file = file31;
        java.io.File file37 = fileEntry0.file;
        fileEntry0.name = "hi!";
        fileEntry0.name = "hi!";
        java.lang.String str42 = fileEntry0.name;
        java.lang.String str43 = fileEntry0.name;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "exploded archive" + "'", str6.equals("exploded archive"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file22.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file22.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file31.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file31.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file33.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file33.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file34.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file34.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file37.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file37.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str42 + "' != '" + "hi!" + "'", str42.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str43 + "' != '" + "hi!" + "'", str43.equals("hi!"));
    }

    @Test
    public void test759() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test759");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntry fileEntry0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntry();
        java.io.File file1 = fileEntry0.file;
        java.lang.String str2 = fileEntry0.name;
        java.io.File file3 = fileEntry0.file;
        java.io.File file4 = fileEntry0.file;
        java.lang.String str5 = fileEntry0.name;
        fileEntry0.name = "exploded archive";
        java.io.File file8 = fileEntry0.getFile();
        java.io.File file9 = fileEntry0.file;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file9);
    }

    @Test
    public void test760() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test760");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntry fileEntry0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntry();
        java.io.File file1 = fileEntry0.getFile();
        fileEntry0.name = "hi!";
        java.io.File file4 = null;
        fileEntry0.file = file4;
        fileEntry0.name = "hi!";
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean8 = fileEntry0.isDirectory();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file1);
    }

    @Test
    public void test761() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test761");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest1 = explodedArchive0.manifest;
        explodedArchive0.recursive = false;
        java.io.File file4 = null;
        explodedArchive0.root = file4;
        java.io.File file6 = explodedArchive0.manifestFile;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive7 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file8 = explodedArchive7.root;
        java.io.File file9 = null;
        explodedArchive7.manifestFile = file9;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive11 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest12 = explodedArchive11.manifest;
        explodedArchive11.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive15 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest16 = explodedArchive15.manifest;
        explodedArchive15.recursive = false;
        java.util.jar.Manifest manifest19 = explodedArchive15.manifest;
        java.io.File file20 = explodedArchive15.manifestFile;
        java.io.File file21 = null;
        java.io.File file22 = explodedArchive15.getManifestFile(file21);
        explodedArchive11.manifestFile = file21;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive24 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest25 = explodedArchive24.manifest;
        explodedArchive24.recursive = false;
        java.util.jar.Manifest manifest28 = explodedArchive24.manifest;
        java.io.File file29 = explodedArchive24.manifestFile;
        java.io.File file30 = null;
        java.io.File file31 = explodedArchive24.getManifestFile(file30);
        explodedArchive11.manifestFile = file31;
        java.io.File file33 = explodedArchive7.getManifestFile(file31);
        java.io.File file34 = explodedArchive7.root;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator35 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        boolean boolean36 = fileEntryIterator35.hasNext();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator37 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator38 = entryComparator37.reversed();
        java.util.Comparator<java.io.File> fileComparator39 = fileComparator38.reversed();
        fileEntryIterator35.entryComparator = fileComparator39;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive41 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file42 = explodedArchive41.root;
        java.io.File file43 = null;
        explodedArchive41.manifestFile = file43;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive45 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest46 = explodedArchive45.manifest;
        explodedArchive45.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive49 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest50 = explodedArchive49.manifest;
        explodedArchive49.recursive = false;
        java.util.jar.Manifest manifest53 = explodedArchive49.manifest;
        java.io.File file54 = explodedArchive49.manifestFile;
        java.io.File file55 = null;
        java.io.File file56 = explodedArchive49.getManifestFile(file55);
        explodedArchive45.manifestFile = file55;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive58 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest59 = explodedArchive58.manifest;
        explodedArchive58.recursive = false;
        java.util.jar.Manifest manifest62 = explodedArchive58.manifest;
        java.io.File file63 = explodedArchive58.manifestFile;
        java.io.File file64 = null;
        java.io.File file65 = explodedArchive58.getManifestFile(file64);
        explodedArchive45.manifestFile = file65;
        java.io.File file67 = explodedArchive41.getManifestFile(file65);
        java.util.Iterator<java.io.File> fileItor68 = fileEntryIterator35.listFiles(file67);
        explodedArchive7.manifestFile = file67;
        java.io.File file70 = explodedArchive7.manifestFile;
        java.io.File file71 = explodedArchive0.getManifestFile(file70);
        java.util.jar.Manifest manifest72 = null;
        explodedArchive0.manifest = manifest72;
        java.util.jar.Manifest manifest74 = null;
        explodedArchive0.manifest = manifest74;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Spliterator<org.springframework.boot.loader.archive.Archive.Entry> entrySpliterator76 = explodedArchive0.spliterator();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file22.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file22.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file31.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file31.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file33.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file33.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file56.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file56.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file65.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file65.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file67.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file67.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file70.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file70.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file71.getParent(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file71.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
    }

    @Test
    public void test762() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test762");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file1 = null;
        fileEntryIterator0.current = file1;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive3 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest4 = explodedArchive3.manifest;
        explodedArchive3.recursive = false;
        java.util.jar.Manifest manifest7 = explodedArchive3.manifest;
        java.io.File file8 = explodedArchive3.manifestFile;
        java.io.File file9 = null;
        java.io.File file10 = explodedArchive3.getManifestFile(file9);
        java.util.Iterator<java.io.File> fileItor11 = fileEntryIterator0.listFiles(file10);
        java.io.File file12 = fileEntryIterator0.root;
        java.io.File file13 = fileEntryIterator0.poll();
        java.util.Comparator<java.io.File> fileComparator14 = fileEntryIterator0.entryComparator;
        java.util.Deque<java.util.Iterator<java.io.File>> fileItorQueue15 = fileEntryIterator0.stack;
        java.util.Deque<java.util.Iterator<java.io.File>> fileItorQueue16 = fileEntryIterator0.stack;
        // The following exception was thrown during execution in test generation
        try {
            org.springframework.boot.loader.archive.Archive.Entry entry17 = fileEntryIterator0.next();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItorQueue15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItorQueue16);
    }

    @Test
    public void test763() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test763");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        boolean boolean1 = fileEntryIterator0.hasNext();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator2 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator3 = entryComparator2.reversed();
        java.util.Comparator<java.io.File> fileComparator4 = fileComparator3.reversed();
        fileEntryIterator0.entryComparator = fileComparator4;
        java.util.Comparator<java.io.File> fileComparator6 = fileEntryIterator0.entryComparator;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator7 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        boolean boolean8 = fileEntryIterator7.recursive;
        java.io.File file9 = fileEntryIterator7.current;
        boolean boolean10 = fileEntryIterator7.hasNext();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator11 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator12 = entryComparator11.reversed();
        java.util.Comparator<java.io.File> fileComparator13 = entryComparator11.reversed();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive14 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest15 = explodedArchive14.manifest;
        explodedArchive14.recursive = false;
        java.util.jar.Manifest manifest18 = explodedArchive14.manifest;
        java.io.File file19 = explodedArchive14.manifestFile;
        java.io.File file20 = null;
        java.io.File file21 = explodedArchive14.getManifestFile(file20);
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive22 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest23 = explodedArchive22.manifest;
        explodedArchive22.recursive = false;
        java.io.File file26 = null;
        explodedArchive22.root = file26;
        java.io.File file28 = explodedArchive22.root;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive29 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest30 = explodedArchive29.manifest;
        explodedArchive29.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive33 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest34 = explodedArchive33.manifest;
        explodedArchive33.recursive = false;
        java.util.jar.Manifest manifest37 = explodedArchive33.manifest;
        java.io.File file38 = explodedArchive33.manifestFile;
        java.io.File file39 = null;
        java.io.File file40 = explodedArchive33.getManifestFile(file39);
        explodedArchive29.manifestFile = file39;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive42 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest43 = explodedArchive42.manifest;
        explodedArchive42.recursive = false;
        java.util.jar.Manifest manifest46 = explodedArchive42.manifest;
        java.io.File file47 = explodedArchive42.manifestFile;
        java.io.File file48 = null;
        java.io.File file49 = explodedArchive42.getManifestFile(file48);
        explodedArchive29.manifestFile = file49;
        java.io.File file51 = explodedArchive22.getManifestFile(file49);
        int int52 = entryComparator11.compare(file21, file49);
        java.util.Iterator<java.io.File> fileItor53 = fileEntryIterator7.listFiles(file21);
        java.util.Deque<java.util.Iterator<java.io.File>> fileItorQueue54 = fileEntryIterator7.stack;
        fileEntryIterator0.stack = fileItorQueue54;
        fileEntryIterator0.recursive = false;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file21.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file21.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file40.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file40.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file49.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file49.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file51.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file51.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItorQueue54);
    }

    @Test
    public void test764() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test764");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest1 = explodedArchive0.manifest;
        explodedArchive0.recursive = false;
        java.io.File file4 = null;
        explodedArchive0.root = file4;
        java.io.File file6 = explodedArchive0.manifestFile;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive7 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file8 = explodedArchive7.root;
        java.io.File file9 = null;
        explodedArchive7.manifestFile = file9;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive11 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest12 = explodedArchive11.manifest;
        explodedArchive11.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive15 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest16 = explodedArchive15.manifest;
        explodedArchive15.recursive = false;
        java.util.jar.Manifest manifest19 = explodedArchive15.manifest;
        java.io.File file20 = explodedArchive15.manifestFile;
        java.io.File file21 = null;
        java.io.File file22 = explodedArchive15.getManifestFile(file21);
        explodedArchive11.manifestFile = file21;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive24 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest25 = explodedArchive24.manifest;
        explodedArchive24.recursive = false;
        java.util.jar.Manifest manifest28 = explodedArchive24.manifest;
        java.io.File file29 = explodedArchive24.manifestFile;
        java.io.File file30 = null;
        java.io.File file31 = explodedArchive24.getManifestFile(file30);
        explodedArchive11.manifestFile = file31;
        java.io.File file33 = explodedArchive7.getManifestFile(file31);
        java.io.File file34 = explodedArchive0.getManifestFile(file31);
        java.lang.String str35 = explodedArchive0.toString();
        java.util.jar.Manifest manifest36 = null;
        explodedArchive0.manifest = manifest36;
        org.springframework.boot.loader.archive.Archive.EntryFilter entryFilter38 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<org.springframework.boot.loader.archive.Archive> archiveList39 = explodedArchive0.getNestedArchives(entryFilter38);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file22.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file22.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file31.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file31.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file33.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file33.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file34.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file34.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str35 + "' != '" + "exploded archive" + "'", str35.equals("exploded archive"));
    }

    @Test
    public void test765() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test765");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest1 = explodedArchive0.manifest;
        explodedArchive0.recursive = false;
        java.io.File file4 = null;
        explodedArchive0.root = file4;
        java.io.File file6 = explodedArchive0.root;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive7 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest8 = explodedArchive7.manifest;
        explodedArchive7.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive11 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest12 = explodedArchive11.manifest;
        explodedArchive11.recursive = false;
        java.util.jar.Manifest manifest15 = explodedArchive11.manifest;
        java.io.File file16 = explodedArchive11.manifestFile;
        java.io.File file17 = null;
        java.io.File file18 = explodedArchive11.getManifestFile(file17);
        explodedArchive7.manifestFile = file17;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive20 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest21 = explodedArchive20.manifest;
        explodedArchive20.recursive = false;
        java.util.jar.Manifest manifest24 = explodedArchive20.manifest;
        java.io.File file25 = explodedArchive20.manifestFile;
        java.io.File file26 = null;
        java.io.File file27 = explodedArchive20.getManifestFile(file26);
        explodedArchive7.manifestFile = file27;
        java.io.File file29 = explodedArchive0.getManifestFile(file27);
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive30 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest31 = explodedArchive30.manifest;
        explodedArchive30.recursive = false;
        java.io.File file34 = null;
        explodedArchive30.root = file34;
        java.io.File file36 = explodedArchive30.manifestFile;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive37 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file38 = explodedArchive37.root;
        java.io.File file39 = null;
        explodedArchive37.manifestFile = file39;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive41 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest42 = explodedArchive41.manifest;
        explodedArchive41.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive45 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest46 = explodedArchive45.manifest;
        explodedArchive45.recursive = false;
        java.util.jar.Manifest manifest49 = explodedArchive45.manifest;
        java.io.File file50 = explodedArchive45.manifestFile;
        java.io.File file51 = null;
        java.io.File file52 = explodedArchive45.getManifestFile(file51);
        explodedArchive41.manifestFile = file51;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive54 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest55 = explodedArchive54.manifest;
        explodedArchive54.recursive = false;
        java.util.jar.Manifest manifest58 = explodedArchive54.manifest;
        java.io.File file59 = explodedArchive54.manifestFile;
        java.io.File file60 = null;
        java.io.File file61 = explodedArchive54.getManifestFile(file60);
        explodedArchive41.manifestFile = file61;
        java.io.File file63 = explodedArchive37.getManifestFile(file61);
        java.io.File file64 = explodedArchive30.getManifestFile(file61);
        explodedArchive0.manifestFile = file61;
        explodedArchive0.recursive = true;
        java.util.jar.Manifest manifest68 = explodedArchive0.manifest;
        java.util.jar.Manifest manifest69 = explodedArchive0.getManifest();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file18.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file18.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file27.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file27.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file29.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file29.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file52.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file52.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file61.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file61.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file63.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file63.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file64.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file64.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest69);
    }

    @Test
    public void test766() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test766");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file1 = explodedArchive0.root;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator2 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file3 = null;
        fileEntryIterator2.current = file3;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive5 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest6 = explodedArchive5.manifest;
        explodedArchive5.recursive = false;
        java.util.jar.Manifest manifest9 = explodedArchive5.manifest;
        java.io.File file10 = explodedArchive5.manifestFile;
        java.io.File file11 = null;
        java.io.File file12 = explodedArchive5.getManifestFile(file11);
        java.util.Iterator<java.io.File> fileItor13 = fileEntryIterator2.listFiles(file12);
        boolean boolean14 = fileEntryIterator2.hasNext();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator15 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator16 = entryComparator15.reversed();
        java.util.Comparator<java.io.File> fileComparator17 = entryComparator15.reversed();
        fileEntryIterator2.entryComparator = fileComparator17;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator19 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file20 = null;
        fileEntryIterator19.current = file20;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive22 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.lang.String str23 = explodedArchive22.toString();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive24 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file25 = explodedArchive24.root;
        java.io.File file26 = null;
        explodedArchive24.manifestFile = file26;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive28 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest29 = explodedArchive28.manifest;
        explodedArchive28.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive32 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest33 = explodedArchive32.manifest;
        explodedArchive32.recursive = false;
        java.util.jar.Manifest manifest36 = explodedArchive32.manifest;
        java.io.File file37 = explodedArchive32.manifestFile;
        java.io.File file38 = null;
        java.io.File file39 = explodedArchive32.getManifestFile(file38);
        explodedArchive28.manifestFile = file38;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive41 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest42 = explodedArchive41.manifest;
        explodedArchive41.recursive = false;
        java.util.jar.Manifest manifest45 = explodedArchive41.manifest;
        java.io.File file46 = explodedArchive41.manifestFile;
        java.io.File file47 = null;
        java.io.File file48 = explodedArchive41.getManifestFile(file47);
        explodedArchive28.manifestFile = file48;
        java.io.File file50 = explodedArchive24.getManifestFile(file48);
        java.io.File file51 = explodedArchive22.getManifestFile(file48);
        fileEntryIterator19.root = file48;
        fileEntryIterator2.current = file48;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive54 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file55 = explodedArchive54.root;
        java.io.File file56 = null;
        explodedArchive54.manifestFile = file56;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive58 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest59 = explodedArchive58.manifest;
        explodedArchive58.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive62 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest63 = explodedArchive62.manifest;
        explodedArchive62.recursive = false;
        java.util.jar.Manifest manifest66 = explodedArchive62.manifest;
        java.io.File file67 = explodedArchive62.manifestFile;
        java.io.File file68 = null;
        java.io.File file69 = explodedArchive62.getManifestFile(file68);
        explodedArchive58.manifestFile = file68;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive71 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest72 = explodedArchive71.manifest;
        explodedArchive71.recursive = false;
        java.util.jar.Manifest manifest75 = explodedArchive71.manifest;
        java.io.File file76 = explodedArchive71.manifestFile;
        java.io.File file77 = null;
        java.io.File file78 = explodedArchive71.getManifestFile(file77);
        explodedArchive58.manifestFile = file78;
        java.io.File file80 = explodedArchive54.getManifestFile(file78);
        fileEntryIterator2.root = file80;
        explodedArchive0.root = file80;
        // The following exception was thrown during execution in test generation
        try {
            org.springframework.boot.loader.archive.ExplodedArchive explodedArchive84 = new org.springframework.boot.loader.archive.ExplodedArchive(file80, true);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid source folder META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file12.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file12.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str23 + "' != '" + "exploded archive" + "'", str23.equals("exploded archive"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file39.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file39.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file48.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file48.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file50.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file50.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file51.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file51.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file69.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file69.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest75);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file76);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file78);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file78.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file78.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file80);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file80.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file80.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
    }

    @Test
    public void test767() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test767");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest1 = explodedArchive0.manifest;
        java.util.jar.Manifest manifest2 = null;
        explodedArchive0.manifest = manifest2;
        java.io.File file4 = explodedArchive0.root;
        java.util.jar.Manifest manifest5 = null;
        explodedArchive0.manifest = manifest5;
        java.util.jar.Manifest manifest7 = null;
        explodedArchive0.manifest = manifest7;
        java.lang.String str9 = explodedArchive0.toString();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str9 + "' != '" + "exploded archive" + "'", str9.equals("exploded archive"));
    }

    @Test
    public void test768() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test768");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest1 = explodedArchive0.manifest;
        java.util.jar.Manifest manifest2 = null;
        explodedArchive0.manifest = manifest2;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator4 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        boolean boolean5 = fileEntryIterator4.hasNext();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator6 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator7 = entryComparator6.reversed();
        java.util.Comparator<java.io.File> fileComparator8 = fileComparator7.reversed();
        fileEntryIterator4.entryComparator = fileComparator8;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive10 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file11 = explodedArchive10.root;
        java.io.File file12 = null;
        explodedArchive10.manifestFile = file12;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive14 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest15 = explodedArchive14.manifest;
        explodedArchive14.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive18 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest19 = explodedArchive18.manifest;
        explodedArchive18.recursive = false;
        java.util.jar.Manifest manifest22 = explodedArchive18.manifest;
        java.io.File file23 = explodedArchive18.manifestFile;
        java.io.File file24 = null;
        java.io.File file25 = explodedArchive18.getManifestFile(file24);
        explodedArchive14.manifestFile = file24;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive27 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest28 = explodedArchive27.manifest;
        explodedArchive27.recursive = false;
        java.util.jar.Manifest manifest31 = explodedArchive27.manifest;
        java.io.File file32 = explodedArchive27.manifestFile;
        java.io.File file33 = null;
        java.io.File file34 = explodedArchive27.getManifestFile(file33);
        explodedArchive14.manifestFile = file34;
        java.io.File file36 = explodedArchive10.getManifestFile(file34);
        java.util.Iterator<java.io.File> fileItor37 = fileEntryIterator4.listFiles(file36);
        java.io.File file38 = explodedArchive0.getManifestFile(file36);
        java.lang.String str39 = explodedArchive0.toString();
        explodedArchive0.recursive = true;
        java.util.jar.Manifest manifest42 = null;
        explodedArchive0.manifest = manifest42;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file25.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file25.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file34.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file34.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file36.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file36.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file38.getParent(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file38.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str39 + "' != '" + "exploded archive" + "'", str39.equals("exploded archive"));
    }

    @Test
    public void test769() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test769");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest1 = explodedArchive0.manifest;
        java.util.jar.Manifest manifest2 = null;
        explodedArchive0.manifest = manifest2;
        java.io.File file4 = explodedArchive0.root;
        explodedArchive0.recursive = false;
        java.io.File file7 = explodedArchive0.manifestFile;
        java.lang.String str8 = explodedArchive0.toString();
        explodedArchive0.recursive = false;
        java.util.jar.Manifest manifest11 = explodedArchive0.manifest;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str8 + "' != '" + "exploded archive" + "'", str8.equals("exploded archive"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest11);
    }

    @Test
    public void test770() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test770");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file1 = explodedArchive0.root;
        java.io.File file2 = explodedArchive0.manifestFile;
        java.io.File file3 = explodedArchive0.manifestFile;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntry fileEntry4 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntry();
        java.io.File file5 = fileEntry4.getFile();
        java.io.File file6 = fileEntry4.getFile();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive7 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file8 = explodedArchive7.root;
        java.io.File file9 = null;
        explodedArchive7.manifestFile = file9;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive11 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest12 = explodedArchive11.manifest;
        explodedArchive11.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive15 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest16 = explodedArchive15.manifest;
        explodedArchive15.recursive = false;
        java.util.jar.Manifest manifest19 = explodedArchive15.manifest;
        java.io.File file20 = explodedArchive15.manifestFile;
        java.io.File file21 = null;
        java.io.File file22 = explodedArchive15.getManifestFile(file21);
        explodedArchive11.manifestFile = file21;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive24 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest25 = explodedArchive24.manifest;
        explodedArchive24.recursive = false;
        java.util.jar.Manifest manifest28 = explodedArchive24.manifest;
        java.io.File file29 = explodedArchive24.manifestFile;
        java.io.File file30 = null;
        java.io.File file31 = explodedArchive24.getManifestFile(file30);
        explodedArchive11.manifestFile = file31;
        java.io.File file33 = explodedArchive7.getManifestFile(file31);
        fileEntry4.file = file33;
        explodedArchive0.root = file33;
        java.net.URL uRL36 = explodedArchive0.getUrl();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file22.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file22.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file31.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file31.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file33.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file33.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(uRL36);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(uRL36.toString(), "file:/server/study-execution/new-nimrod/nimrod-hunoroutput-test-dest/spring-boot/af20dc6cc45c032573413c401f9f73aa75371744/randoop_1/META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
    }

    @Test
    public void test771() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test771");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        boolean boolean1 = fileEntryIterator0.recursive;
        java.io.File file2 = fileEntryIterator0.current;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator3 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file4 = null;
        fileEntryIterator3.current = file4;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive6 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest7 = explodedArchive6.manifest;
        explodedArchive6.recursive = false;
        java.util.jar.Manifest manifest10 = explodedArchive6.manifest;
        java.io.File file11 = explodedArchive6.manifestFile;
        java.io.File file12 = null;
        java.io.File file13 = explodedArchive6.getManifestFile(file12);
        java.util.Iterator<java.io.File> fileItor14 = fileEntryIterator3.listFiles(file13);
        java.io.File file15 = fileEntryIterator3.root;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive16 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.lang.String str17 = explodedArchive16.toString();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive18 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file19 = explodedArchive18.root;
        java.io.File file20 = null;
        explodedArchive18.manifestFile = file20;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive22 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest23 = explodedArchive22.manifest;
        explodedArchive22.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive26 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest27 = explodedArchive26.manifest;
        explodedArchive26.recursive = false;
        java.util.jar.Manifest manifest30 = explodedArchive26.manifest;
        java.io.File file31 = explodedArchive26.manifestFile;
        java.io.File file32 = null;
        java.io.File file33 = explodedArchive26.getManifestFile(file32);
        explodedArchive22.manifestFile = file32;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive35 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest36 = explodedArchive35.manifest;
        explodedArchive35.recursive = false;
        java.util.jar.Manifest manifest39 = explodedArchive35.manifest;
        java.io.File file40 = explodedArchive35.manifestFile;
        java.io.File file41 = null;
        java.io.File file42 = explodedArchive35.getManifestFile(file41);
        explodedArchive22.manifestFile = file42;
        java.io.File file44 = explodedArchive18.getManifestFile(file42);
        java.io.File file45 = explodedArchive16.getManifestFile(file42);
        fileEntryIterator3.root = file42;
        java.util.Iterator<java.io.File> fileItor47 = fileEntryIterator0.listFiles(file42);
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator48 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        boolean boolean49 = fileEntryIterator48.hasNext();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator50 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator51 = entryComparator50.reversed();
        java.util.Comparator<java.io.File> fileComparator52 = fileComparator51.reversed();
        fileEntryIterator48.entryComparator = fileComparator52;
        java.util.Comparator<java.io.File> fileComparator54 = fileEntryIterator48.entryComparator;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator55 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator56 = entryComparator55.reversed();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator57 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator58 = entryComparator57.reversed();
        java.util.Comparator<java.io.File> fileComparator59 = entryComparator55.thenComparing(fileComparator58);
        java.util.Comparator<java.io.File> fileComparator60 = fileComparator54.thenComparing(fileComparator58);
        fileEntryIterator0.entryComparator = fileComparator58;
        java.io.File file62 = fileEntryIterator0.root;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file13.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file13.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str17 + "' != '" + "exploded archive" + "'", str17.equals("exploded archive"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file33.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file33.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file42.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file42.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file44.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file44.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file45.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file45.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file62);
    }

    @Test
    public void test772() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test772");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file1 = null;
        fileEntryIterator0.current = file1;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive3 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest4 = explodedArchive3.manifest;
        explodedArchive3.recursive = false;
        java.util.jar.Manifest manifest7 = explodedArchive3.manifest;
        java.io.File file8 = explodedArchive3.manifestFile;
        java.io.File file9 = null;
        java.io.File file10 = explodedArchive3.getManifestFile(file9);
        java.util.Iterator<java.io.File> fileItor11 = fileEntryIterator0.listFiles(file10);
        java.util.Comparator<java.io.File> fileComparator12 = fileEntryIterator0.entryComparator;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator13 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file14 = null;
        fileEntryIterator13.current = file14;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive16 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest17 = explodedArchive16.manifest;
        explodedArchive16.recursive = false;
        java.util.jar.Manifest manifest20 = explodedArchive16.manifest;
        java.io.File file21 = explodedArchive16.manifestFile;
        java.io.File file22 = null;
        java.io.File file23 = explodedArchive16.getManifestFile(file22);
        java.util.Iterator<java.io.File> fileItor24 = fileEntryIterator13.listFiles(file23);
        java.io.File file25 = fileEntryIterator13.current;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator26 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file27 = null;
        fileEntryIterator26.current = file27;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive29 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest30 = explodedArchive29.manifest;
        explodedArchive29.recursive = false;
        java.util.jar.Manifest manifest33 = explodedArchive29.manifest;
        java.io.File file34 = explodedArchive29.manifestFile;
        java.io.File file35 = null;
        java.io.File file36 = explodedArchive29.getManifestFile(file35);
        java.util.Iterator<java.io.File> fileItor37 = fileEntryIterator26.listFiles(file36);
        java.io.File file38 = fileEntryIterator26.current;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator39 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file40 = null;
        fileEntryIterator39.current = file40;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive42 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest43 = explodedArchive42.manifest;
        explodedArchive42.recursive = false;
        java.util.jar.Manifest manifest46 = explodedArchive42.manifest;
        java.io.File file47 = explodedArchive42.manifestFile;
        java.io.File file48 = null;
        java.io.File file49 = explodedArchive42.getManifestFile(file48);
        java.util.Iterator<java.io.File> fileItor50 = fileEntryIterator39.listFiles(file49);
        java.util.ArrayDeque<java.util.Iterator<java.io.File>> fileItorQueue51 = new java.util.ArrayDeque<java.util.Iterator<java.io.File>>();
        boolean boolean52 = fileItorQueue51.add(fileItor50);
        fileEntryIterator26.stack = fileItorQueue51;
        fileEntryIterator13.stack = fileItorQueue51;
        fileEntryIterator0.stack = fileItorQueue51;
        boolean boolean56 = fileEntryIterator0.hasNext();
        java.io.File file57 = fileEntryIterator0.poll();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive58 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.lang.String str59 = explodedArchive58.toString();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive60 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file61 = explodedArchive60.root;
        java.io.File file62 = null;
        explodedArchive60.manifestFile = file62;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive64 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest65 = explodedArchive64.manifest;
        explodedArchive64.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive68 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest69 = explodedArchive68.manifest;
        explodedArchive68.recursive = false;
        java.util.jar.Manifest manifest72 = explodedArchive68.manifest;
        java.io.File file73 = explodedArchive68.manifestFile;
        java.io.File file74 = null;
        java.io.File file75 = explodedArchive68.getManifestFile(file74);
        explodedArchive64.manifestFile = file74;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive77 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest78 = explodedArchive77.manifest;
        explodedArchive77.recursive = false;
        java.util.jar.Manifest manifest81 = explodedArchive77.manifest;
        java.io.File file82 = explodedArchive77.manifestFile;
        java.io.File file83 = null;
        java.io.File file84 = explodedArchive77.getManifestFile(file83);
        explodedArchive64.manifestFile = file84;
        java.io.File file86 = explodedArchive60.getManifestFile(file84);
        java.io.File file87 = explodedArchive58.getManifestFile(file84);
        fileEntryIterator0.root = file87;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file23.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file23.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file36.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file36.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file49.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file49.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str59 + "' != '" + "exploded archive" + "'", str59.equals("exploded archive"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file73);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file75);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file75.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file75.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest78);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest81);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file82);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file84);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file84.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file84.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file86);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file86.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file86.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file87);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file87.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file87.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
    }

    @Test
    public void test773() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test773");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator1 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file2 = null;
        fileEntryIterator1.current = file2;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive4 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest5 = explodedArchive4.manifest;
        explodedArchive4.recursive = false;
        java.util.jar.Manifest manifest8 = explodedArchive4.manifest;
        java.io.File file9 = explodedArchive4.manifestFile;
        java.io.File file10 = null;
        java.io.File file11 = explodedArchive4.getManifestFile(file10);
        java.util.Iterator<java.io.File> fileItor12 = fileEntryIterator1.listFiles(file11);
        boolean boolean13 = fileEntryIterator1.hasNext();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator14 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator15 = entryComparator14.reversed();
        java.util.Comparator<java.io.File> fileComparator16 = entryComparator14.reversed();
        fileEntryIterator1.entryComparator = fileComparator16;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator18 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file19 = null;
        fileEntryIterator18.current = file19;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive21 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.lang.String str22 = explodedArchive21.toString();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive23 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file24 = explodedArchive23.root;
        java.io.File file25 = null;
        explodedArchive23.manifestFile = file25;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive27 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest28 = explodedArchive27.manifest;
        explodedArchive27.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive31 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest32 = explodedArchive31.manifest;
        explodedArchive31.recursive = false;
        java.util.jar.Manifest manifest35 = explodedArchive31.manifest;
        java.io.File file36 = explodedArchive31.manifestFile;
        java.io.File file37 = null;
        java.io.File file38 = explodedArchive31.getManifestFile(file37);
        explodedArchive27.manifestFile = file37;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive40 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest41 = explodedArchive40.manifest;
        explodedArchive40.recursive = false;
        java.util.jar.Manifest manifest44 = explodedArchive40.manifest;
        java.io.File file45 = explodedArchive40.manifestFile;
        java.io.File file46 = null;
        java.io.File file47 = explodedArchive40.getManifestFile(file46);
        explodedArchive27.manifestFile = file47;
        java.io.File file49 = explodedArchive23.getManifestFile(file47);
        java.io.File file50 = explodedArchive21.getManifestFile(file47);
        fileEntryIterator18.root = file47;
        fileEntryIterator1.current = file47;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive53 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file54 = explodedArchive53.root;
        java.io.File file55 = null;
        explodedArchive53.manifestFile = file55;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive57 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest58 = explodedArchive57.manifest;
        explodedArchive57.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive61 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest62 = explodedArchive61.manifest;
        explodedArchive61.recursive = false;
        java.util.jar.Manifest manifest65 = explodedArchive61.manifest;
        java.io.File file66 = explodedArchive61.manifestFile;
        java.io.File file67 = null;
        java.io.File file68 = explodedArchive61.getManifestFile(file67);
        explodedArchive57.manifestFile = file67;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive70 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest71 = explodedArchive70.manifest;
        explodedArchive70.recursive = false;
        java.util.jar.Manifest manifest74 = explodedArchive70.manifest;
        java.io.File file75 = explodedArchive70.manifestFile;
        java.io.File file76 = null;
        java.io.File file77 = explodedArchive70.getManifestFile(file76);
        explodedArchive57.manifestFile = file77;
        java.io.File file79 = explodedArchive53.getManifestFile(file77);
        fileEntryIterator1.root = file79;
        java.io.File file81 = explodedArchive0.getManifestFile(file79);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file11.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file11.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str22 + "' != '" + "exploded archive" + "'", str22.equals("exploded archive"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file38.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file38.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file47.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file47.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file49.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file49.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file50.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file50.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file68.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file68.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file75);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file77);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file77.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file77.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file79);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file79.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file79.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file81);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file81.getParent(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file81.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
    }

    @Test
    public void test774() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test774");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file1 = null;
        fileEntryIterator0.current = file1;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive3 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest4 = explodedArchive3.manifest;
        explodedArchive3.recursive = false;
        java.util.jar.Manifest manifest7 = explodedArchive3.manifest;
        java.io.File file8 = explodedArchive3.manifestFile;
        java.io.File file9 = null;
        java.io.File file10 = explodedArchive3.getManifestFile(file9);
        java.util.Iterator<java.io.File> fileItor11 = fileEntryIterator0.listFiles(file10);
        java.io.File file12 = fileEntryIterator0.root;
        java.io.File file13 = fileEntryIterator0.poll();
        java.util.Comparator<java.io.File> fileComparator14 = fileEntryIterator0.entryComparator;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator15 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        boolean boolean16 = fileEntryIterator15.hasNext();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator17 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator18 = entryComparator17.reversed();
        java.util.Comparator<java.io.File> fileComparator19 = fileComparator18.reversed();
        fileEntryIterator15.entryComparator = fileComparator19;
        java.util.Comparator<java.io.File> fileComparator21 = fileEntryIterator15.entryComparator;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator22 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator23 = entryComparator22.reversed();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator24 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator25 = entryComparator24.reversed();
        java.util.Comparator<java.io.File> fileComparator26 = entryComparator22.thenComparing(fileComparator25);
        java.util.Comparator<java.io.File> fileComparator27 = fileComparator21.thenComparing(fileComparator25);
        fileEntryIterator0.entryComparator = fileComparator27;
        java.io.File file29 = fileEntryIterator0.root;
        boolean boolean30 = fileEntryIterator0.recursive;
        boolean boolean31 = fileEntryIterator0.hasNext();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
    }

    @Test
    public void test775() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test775");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        boolean boolean1 = fileEntryIterator0.hasNext();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator2 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator3 = entryComparator2.reversed();
        java.util.Comparator<java.io.File> fileComparator4 = fileComparator3.reversed();
        fileEntryIterator0.entryComparator = fileComparator4;
        java.util.Comparator<java.io.File> fileComparator6 = fileEntryIterator0.entryComparator;
        java.io.File file7 = fileEntryIterator0.current;
        boolean boolean8 = fileEntryIterator0.hasNext();
        boolean boolean9 = fileEntryIterator0.recursive;
        java.io.File file10 = fileEntryIterator0.root;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file10);
    }

    @Test
    public void test776() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test776");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file1 = null;
        fileEntryIterator0.current = file1;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive3 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest4 = explodedArchive3.manifest;
        explodedArchive3.recursive = false;
        java.util.jar.Manifest manifest7 = explodedArchive3.manifest;
        java.io.File file8 = explodedArchive3.manifestFile;
        java.io.File file9 = null;
        java.io.File file10 = explodedArchive3.getManifestFile(file9);
        java.util.Iterator<java.io.File> fileItor11 = fileEntryIterator0.listFiles(file10);
        java.io.File file12 = fileEntryIterator0.current;
        boolean boolean13 = fileEntryIterator0.recursive;
        java.io.File file14 = fileEntryIterator0.poll();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator15 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file16 = null;
        fileEntryIterator15.current = file16;
        fileEntryIterator15.recursive = true;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator20 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator21 = entryComparator20.reversed();
        java.util.Comparator<java.io.File> fileComparator22 = entryComparator20.reversed();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive23 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest24 = explodedArchive23.manifest;
        explodedArchive23.recursive = false;
        java.util.jar.Manifest manifest27 = explodedArchive23.manifest;
        java.io.File file28 = explodedArchive23.manifestFile;
        java.io.File file29 = null;
        java.io.File file30 = explodedArchive23.getManifestFile(file29);
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive31 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest32 = explodedArchive31.manifest;
        explodedArchive31.recursive = false;
        java.io.File file35 = null;
        explodedArchive31.root = file35;
        java.io.File file37 = explodedArchive31.root;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive38 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest39 = explodedArchive38.manifest;
        explodedArchive38.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive42 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest43 = explodedArchive42.manifest;
        explodedArchive42.recursive = false;
        java.util.jar.Manifest manifest46 = explodedArchive42.manifest;
        java.io.File file47 = explodedArchive42.manifestFile;
        java.io.File file48 = null;
        java.io.File file49 = explodedArchive42.getManifestFile(file48);
        explodedArchive38.manifestFile = file48;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive51 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest52 = explodedArchive51.manifest;
        explodedArchive51.recursive = false;
        java.util.jar.Manifest manifest55 = explodedArchive51.manifest;
        java.io.File file56 = explodedArchive51.manifestFile;
        java.io.File file57 = null;
        java.io.File file58 = explodedArchive51.getManifestFile(file57);
        explodedArchive38.manifestFile = file58;
        java.io.File file60 = explodedArchive31.getManifestFile(file58);
        int int61 = entryComparator20.compare(file30, file58);
        java.util.Iterator<java.io.File> fileItor62 = fileEntryIterator15.listFiles(file30);
        fileEntryIterator0.current = file30;
        java.io.File file64 = fileEntryIterator0.poll();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file30.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file30.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file49.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file49.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file58.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file58.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file60.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file60.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file64);
    }

    @Test
    public void test777() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test777");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file1 = null;
        fileEntryIterator0.current = file1;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive3 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest4 = explodedArchive3.manifest;
        explodedArchive3.recursive = false;
        java.util.jar.Manifest manifest7 = explodedArchive3.manifest;
        java.io.File file8 = explodedArchive3.manifestFile;
        java.io.File file9 = null;
        java.io.File file10 = explodedArchive3.getManifestFile(file9);
        java.util.Iterator<java.io.File> fileItor11 = fileEntryIterator0.listFiles(file10);
        boolean boolean12 = fileEntryIterator0.hasNext();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator13 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator14 = entryComparator13.reversed();
        java.util.Comparator<java.io.File> fileComparator15 = entryComparator13.reversed();
        fileEntryIterator0.entryComparator = fileComparator15;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator17 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file18 = null;
        fileEntryIterator17.current = file18;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive20 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest21 = explodedArchive20.manifest;
        explodedArchive20.recursive = false;
        java.util.jar.Manifest manifest24 = explodedArchive20.manifest;
        java.io.File file25 = explodedArchive20.manifestFile;
        java.io.File file26 = null;
        java.io.File file27 = explodedArchive20.getManifestFile(file26);
        java.util.Iterator<java.io.File> fileItor28 = fileEntryIterator17.listFiles(file27);
        java.util.Comparator<java.io.File> fileComparator29 = fileEntryIterator17.entryComparator;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator30 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file31 = null;
        fileEntryIterator30.current = file31;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive33 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest34 = explodedArchive33.manifest;
        explodedArchive33.recursive = false;
        java.util.jar.Manifest manifest37 = explodedArchive33.manifest;
        java.io.File file38 = explodedArchive33.manifestFile;
        java.io.File file39 = null;
        java.io.File file40 = explodedArchive33.getManifestFile(file39);
        java.util.Iterator<java.io.File> fileItor41 = fileEntryIterator30.listFiles(file40);
        java.io.File file42 = fileEntryIterator30.current;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator43 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file44 = null;
        fileEntryIterator43.current = file44;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive46 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest47 = explodedArchive46.manifest;
        explodedArchive46.recursive = false;
        java.util.jar.Manifest manifest50 = explodedArchive46.manifest;
        java.io.File file51 = explodedArchive46.manifestFile;
        java.io.File file52 = null;
        java.io.File file53 = explodedArchive46.getManifestFile(file52);
        java.util.Iterator<java.io.File> fileItor54 = fileEntryIterator43.listFiles(file53);
        java.io.File file55 = fileEntryIterator43.current;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator56 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file57 = null;
        fileEntryIterator56.current = file57;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive59 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest60 = explodedArchive59.manifest;
        explodedArchive59.recursive = false;
        java.util.jar.Manifest manifest63 = explodedArchive59.manifest;
        java.io.File file64 = explodedArchive59.manifestFile;
        java.io.File file65 = null;
        java.io.File file66 = explodedArchive59.getManifestFile(file65);
        java.util.Iterator<java.io.File> fileItor67 = fileEntryIterator56.listFiles(file66);
        java.util.ArrayDeque<java.util.Iterator<java.io.File>> fileItorQueue68 = new java.util.ArrayDeque<java.util.Iterator<java.io.File>>();
        boolean boolean69 = fileItorQueue68.add(fileItor67);
        fileEntryIterator43.stack = fileItorQueue68;
        fileEntryIterator30.stack = fileItorQueue68;
        fileEntryIterator17.stack = fileItorQueue68;
        fileEntryIterator0.stack = fileItorQueue68;
        java.util.Comparator<java.io.File> fileComparator74 = fileEntryIterator0.entryComparator;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator75 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator76 = entryComparator75.reversed();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator77 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator78 = entryComparator77.reversed();
        java.util.Comparator<java.io.File> fileComparator79 = entryComparator75.thenComparing(fileComparator78);
        java.util.Comparator<java.io.File> fileComparator80 = fileComparator74.thenComparing(fileComparator78);
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator81 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator82 = entryComparator81.reversed();
        java.util.Comparator<java.io.File> fileComparator83 = fileComparator74.thenComparing((java.util.Comparator<java.io.File>) entryComparator81);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file27.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file27.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file40.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file40.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file53.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file53.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file66.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file66.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator76);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator78);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator79);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator80);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator82);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator83);
    }

    @Test
    public void test778() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test778");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest1 = explodedArchive0.manifest;
        explodedArchive0.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive4 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest5 = explodedArchive4.manifest;
        explodedArchive4.recursive = false;
        java.util.jar.Manifest manifest8 = explodedArchive4.manifest;
        java.io.File file9 = explodedArchive4.manifestFile;
        java.io.File file10 = null;
        java.io.File file11 = explodedArchive4.getManifestFile(file10);
        explodedArchive0.manifestFile = file10;
        java.util.jar.Manifest manifest13 = null;
        explodedArchive0.manifest = manifest13;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive15 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.lang.String str16 = explodedArchive15.toString();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive17 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file18 = explodedArchive17.root;
        java.io.File file19 = null;
        explodedArchive17.manifestFile = file19;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive21 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest22 = explodedArchive21.manifest;
        explodedArchive21.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive25 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest26 = explodedArchive25.manifest;
        explodedArchive25.recursive = false;
        java.util.jar.Manifest manifest29 = explodedArchive25.manifest;
        java.io.File file30 = explodedArchive25.manifestFile;
        java.io.File file31 = null;
        java.io.File file32 = explodedArchive25.getManifestFile(file31);
        explodedArchive21.manifestFile = file31;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive34 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest35 = explodedArchive34.manifest;
        explodedArchive34.recursive = false;
        java.util.jar.Manifest manifest38 = explodedArchive34.manifest;
        java.io.File file39 = explodedArchive34.manifestFile;
        java.io.File file40 = null;
        java.io.File file41 = explodedArchive34.getManifestFile(file40);
        explodedArchive21.manifestFile = file41;
        java.io.File file43 = explodedArchive17.getManifestFile(file41);
        java.io.File file44 = explodedArchive15.getManifestFile(file41);
        java.io.File file45 = null;
        java.io.File file46 = explodedArchive15.getManifestFile(file45);
        java.io.File file47 = explodedArchive0.getManifestFile(file45);
        java.util.jar.Manifest manifest48 = null;
        explodedArchive0.manifest = manifest48;
        // The following exception was thrown during execution in test generation
        try {
            java.util.jar.Manifest manifest50 = explodedArchive0.getManifest();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file11.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file11.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str16 + "' != '" + "exploded archive" + "'", str16.equals("exploded archive"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file32.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file32.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file41.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file41.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file43.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file43.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file44.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file44.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file46.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file46.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file47.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file47.toString(), "META-INF/MANIFEST.MF");
    }

    @Test
    public void test779() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test779");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntry fileEntry0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntry();
        java.lang.String str1 = fileEntry0.getName();
        java.io.File file2 = fileEntry0.getFile();
        java.lang.String str3 = fileEntry0.getName();
        java.lang.String str4 = fileEntry0.getName();
        java.lang.String str5 = fileEntry0.name;
        java.io.File file6 = fileEntry0.getFile();
        java.io.File file7 = fileEntry0.file;
        java.io.File file8 = fileEntry0.file;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file8);
    }

    @Test
    public void test780() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test780");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file1 = explodedArchive0.root;
        java.io.File file2 = null;
        explodedArchive0.manifestFile = file2;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive4 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest5 = explodedArchive4.manifest;
        explodedArchive4.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive8 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest9 = explodedArchive8.manifest;
        explodedArchive8.recursive = false;
        java.util.jar.Manifest manifest12 = explodedArchive8.manifest;
        java.io.File file13 = explodedArchive8.manifestFile;
        java.io.File file14 = null;
        java.io.File file15 = explodedArchive8.getManifestFile(file14);
        explodedArchive4.manifestFile = file14;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive17 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest18 = explodedArchive17.manifest;
        explodedArchive17.recursive = false;
        java.util.jar.Manifest manifest21 = explodedArchive17.manifest;
        java.io.File file22 = explodedArchive17.manifestFile;
        java.io.File file23 = null;
        java.io.File file24 = explodedArchive17.getManifestFile(file23);
        explodedArchive4.manifestFile = file24;
        java.io.File file26 = explodedArchive0.getManifestFile(file24);
        java.util.jar.Manifest manifest27 = null;
        explodedArchive0.manifest = manifest27;
        java.io.File file29 = explodedArchive0.root;
        explodedArchive0.recursive = false;
        // The following exception was thrown during execution in test generation
        try {
            java.util.jar.Manifest manifest32 = explodedArchive0.getManifest();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file15.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file15.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file24.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file24.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file26.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file26.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file29);
    }

    @Test
    public void test781() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test781");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file1 = null;
        fileEntryIterator0.current = file1;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive3 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest4 = explodedArchive3.manifest;
        explodedArchive3.recursive = false;
        java.util.jar.Manifest manifest7 = explodedArchive3.manifest;
        java.io.File file8 = explodedArchive3.manifestFile;
        java.io.File file9 = null;
        java.io.File file10 = explodedArchive3.getManifestFile(file9);
        java.util.Iterator<java.io.File> fileItor11 = fileEntryIterator0.listFiles(file10);
        java.io.File file12 = fileEntryIterator0.current;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator13 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file14 = null;
        fileEntryIterator13.current = file14;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive16 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest17 = explodedArchive16.manifest;
        explodedArchive16.recursive = false;
        java.util.jar.Manifest manifest20 = explodedArchive16.manifest;
        java.io.File file21 = explodedArchive16.manifestFile;
        java.io.File file22 = null;
        java.io.File file23 = explodedArchive16.getManifestFile(file22);
        java.util.Iterator<java.io.File> fileItor24 = fileEntryIterator13.listFiles(file23);
        java.util.ArrayDeque<java.util.Iterator<java.io.File>> fileItorQueue25 = new java.util.ArrayDeque<java.util.Iterator<java.io.File>>();
        boolean boolean26 = fileItorQueue25.add(fileItor24);
        fileEntryIterator0.stack = fileItorQueue25;
        java.util.Deque<java.util.Iterator<java.io.File>> fileItorQueue28 = fileEntryIterator0.stack;
        boolean boolean29 = fileEntryIterator0.recursive;
        java.util.Comparator<java.io.File> fileComparator30 = fileEntryIterator0.entryComparator;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntry fileEntry31 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntry();
        java.lang.String str32 = fileEntry31.name;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator33 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file34 = null;
        fileEntryIterator33.current = file34;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive36 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest37 = explodedArchive36.manifest;
        explodedArchive36.recursive = false;
        java.util.jar.Manifest manifest40 = explodedArchive36.manifest;
        java.io.File file41 = explodedArchive36.manifestFile;
        java.io.File file42 = null;
        java.io.File file43 = explodedArchive36.getManifestFile(file42);
        java.util.Iterator<java.io.File> fileItor44 = fileEntryIterator33.listFiles(file43);
        java.io.File file45 = fileEntryIterator33.current;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator46 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file47 = null;
        fileEntryIterator46.current = file47;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive49 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest50 = explodedArchive49.manifest;
        explodedArchive49.recursive = false;
        java.util.jar.Manifest manifest53 = explodedArchive49.manifest;
        java.io.File file54 = explodedArchive49.manifestFile;
        java.io.File file55 = null;
        java.io.File file56 = explodedArchive49.getManifestFile(file55);
        java.util.Iterator<java.io.File> fileItor57 = fileEntryIterator46.listFiles(file56);
        java.util.ArrayDeque<java.util.Iterator<java.io.File>> fileItorQueue58 = new java.util.ArrayDeque<java.util.Iterator<java.io.File>>();
        boolean boolean59 = fileItorQueue58.add(fileItor57);
        fileEntryIterator33.stack = fileItorQueue58;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive61 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest62 = explodedArchive61.manifest;
        explodedArchive61.recursive = false;
        java.io.File file65 = null;
        explodedArchive61.root = file65;
        java.io.File file67 = explodedArchive61.root;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive68 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest69 = explodedArchive68.manifest;
        explodedArchive68.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive72 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest73 = explodedArchive72.manifest;
        explodedArchive72.recursive = false;
        java.util.jar.Manifest manifest76 = explodedArchive72.manifest;
        java.io.File file77 = explodedArchive72.manifestFile;
        java.io.File file78 = null;
        java.io.File file79 = explodedArchive72.getManifestFile(file78);
        explodedArchive68.manifestFile = file78;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive81 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest82 = explodedArchive81.manifest;
        explodedArchive81.recursive = false;
        java.util.jar.Manifest manifest85 = explodedArchive81.manifest;
        java.io.File file86 = explodedArchive81.manifestFile;
        java.io.File file87 = null;
        java.io.File file88 = explodedArchive81.getManifestFile(file87);
        explodedArchive68.manifestFile = file88;
        java.io.File file90 = explodedArchive61.getManifestFile(file88);
        fileEntryIterator33.root = file88;
        fileEntry31.file = file88;
        boolean boolean93 = fileEntry31.isDirectory();
        boolean boolean94 = fileEntry31.isDirectory();
        fileEntry31.name = "";
        java.io.File file97 = fileEntry31.file;
        fileEntryIterator0.current = file97;
        java.util.Deque<java.util.Iterator<java.io.File>> fileItorQueue99 = fileEntryIterator0.stack;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file23.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file23.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItorQueue28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file43.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file43.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file56.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file56.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest73);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest76);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file77);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file79);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file79.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file79.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest82);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest85);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file86);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file88);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file88.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file88.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file90);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file90.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file90.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file97);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file97.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file97.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItorQueue99);
    }

    @Test
    public void test782() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test782");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        boolean boolean1 = explodedArchive0.recursive;
        explodedArchive0.recursive = true;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive4 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file5 = explodedArchive4.root;
        java.io.File file6 = null;
        explodedArchive4.manifestFile = file6;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive8 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest9 = explodedArchive8.manifest;
        explodedArchive8.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive12 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest13 = explodedArchive12.manifest;
        explodedArchive12.recursive = false;
        java.util.jar.Manifest manifest16 = explodedArchive12.manifest;
        java.io.File file17 = explodedArchive12.manifestFile;
        java.io.File file18 = null;
        java.io.File file19 = explodedArchive12.getManifestFile(file18);
        explodedArchive8.manifestFile = file18;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive21 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest22 = explodedArchive21.manifest;
        explodedArchive21.recursive = false;
        java.util.jar.Manifest manifest25 = explodedArchive21.manifest;
        java.io.File file26 = explodedArchive21.manifestFile;
        java.io.File file27 = null;
        java.io.File file28 = explodedArchive21.getManifestFile(file27);
        explodedArchive8.manifestFile = file28;
        java.io.File file30 = explodedArchive4.getManifestFile(file28);
        java.io.File file31 = explodedArchive4.root;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator32 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        boolean boolean33 = fileEntryIterator32.hasNext();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator34 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator35 = entryComparator34.reversed();
        java.util.Comparator<java.io.File> fileComparator36 = fileComparator35.reversed();
        fileEntryIterator32.entryComparator = fileComparator36;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive38 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file39 = explodedArchive38.root;
        java.io.File file40 = null;
        explodedArchive38.manifestFile = file40;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive42 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest43 = explodedArchive42.manifest;
        explodedArchive42.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive46 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest47 = explodedArchive46.manifest;
        explodedArchive46.recursive = false;
        java.util.jar.Manifest manifest50 = explodedArchive46.manifest;
        java.io.File file51 = explodedArchive46.manifestFile;
        java.io.File file52 = null;
        java.io.File file53 = explodedArchive46.getManifestFile(file52);
        explodedArchive42.manifestFile = file52;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive55 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest56 = explodedArchive55.manifest;
        explodedArchive55.recursive = false;
        java.util.jar.Manifest manifest59 = explodedArchive55.manifest;
        java.io.File file60 = explodedArchive55.manifestFile;
        java.io.File file61 = null;
        java.io.File file62 = explodedArchive55.getManifestFile(file61);
        explodedArchive42.manifestFile = file62;
        java.io.File file64 = explodedArchive38.getManifestFile(file62);
        java.util.Iterator<java.io.File> fileItor65 = fileEntryIterator32.listFiles(file64);
        explodedArchive4.manifestFile = file64;
        java.io.File file67 = explodedArchive4.manifestFile;
        explodedArchive0.manifestFile = file67;
        java.util.jar.Manifest manifest69 = null;
        explodedArchive0.manifest = manifest69;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file19.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file19.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file28.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file28.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file30.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file30.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file53.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file53.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file62.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file62.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file64.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file64.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file67.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file67.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
    }

    @Test
    public void test783() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test783");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file1 = null;
        fileEntryIterator0.current = file1;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive3 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest4 = explodedArchive3.manifest;
        explodedArchive3.recursive = false;
        java.util.jar.Manifest manifest7 = explodedArchive3.manifest;
        java.io.File file8 = explodedArchive3.manifestFile;
        java.io.File file9 = null;
        java.io.File file10 = explodedArchive3.getManifestFile(file9);
        java.util.Iterator<java.io.File> fileItor11 = fileEntryIterator0.listFiles(file10);
        java.io.File file12 = fileEntryIterator0.current;
        boolean boolean13 = fileEntryIterator0.recursive;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator14 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file15 = null;
        fileEntryIterator14.current = file15;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive17 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest18 = explodedArchive17.manifest;
        explodedArchive17.recursive = false;
        java.util.jar.Manifest manifest21 = explodedArchive17.manifest;
        java.io.File file22 = explodedArchive17.manifestFile;
        java.io.File file23 = null;
        java.io.File file24 = explodedArchive17.getManifestFile(file23);
        java.util.Iterator<java.io.File> fileItor25 = fileEntryIterator14.listFiles(file24);
        java.util.Deque<java.util.Iterator<java.io.File>> fileItorQueue26 = fileEntryIterator14.stack;
        fileEntryIterator0.stack = fileItorQueue26;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file24.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file24.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItorQueue26);
    }

    @Test
    public void test784() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test784");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntry fileEntry0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntry();
        java.io.File file1 = fileEntry0.file;
        java.lang.String str2 = fileEntry0.name;
        fileEntry0.name = "";
        fileEntry0.name = "exploded archive";
        java.lang.String str7 = fileEntry0.name;
        java.lang.String str8 = fileEntry0.name;
        java.io.File file9 = fileEntry0.file;
        java.lang.String str10 = fileEntry0.name;
        java.lang.String str11 = fileEntry0.name;
        java.lang.String str12 = fileEntry0.name;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str7 + "' != '" + "exploded archive" + "'", str7.equals("exploded archive"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str8 + "' != '" + "exploded archive" + "'", str8.equals("exploded archive"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str10 + "' != '" + "exploded archive" + "'", str10.equals("exploded archive"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str11 + "' != '" + "exploded archive" + "'", str11.equals("exploded archive"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str12 + "' != '" + "exploded archive" + "'", str12.equals("exploded archive"));
    }

    @Test
    public void test785() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test785");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file1 = explodedArchive0.root;
        java.io.File file2 = null;
        explodedArchive0.manifestFile = file2;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive4 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest5 = explodedArchive4.manifest;
        explodedArchive4.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive8 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest9 = explodedArchive8.manifest;
        explodedArchive8.recursive = false;
        java.util.jar.Manifest manifest12 = explodedArchive8.manifest;
        java.io.File file13 = explodedArchive8.manifestFile;
        java.io.File file14 = null;
        java.io.File file15 = explodedArchive8.getManifestFile(file14);
        explodedArchive4.manifestFile = file14;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive17 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest18 = explodedArchive17.manifest;
        explodedArchive17.recursive = false;
        java.util.jar.Manifest manifest21 = explodedArchive17.manifest;
        java.io.File file22 = explodedArchive17.manifestFile;
        java.io.File file23 = null;
        java.io.File file24 = explodedArchive17.getManifestFile(file23);
        explodedArchive4.manifestFile = file24;
        java.io.File file26 = explodedArchive0.getManifestFile(file24);
        java.util.jar.Manifest manifest27 = null;
        explodedArchive0.manifest = manifest27;
        java.io.File file29 = explodedArchive0.root;
        // The following exception was thrown during execution in test generation
        try {
            java.net.URL uRL30 = explodedArchive0.getUrl();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file15.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file15.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file24.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file24.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file26.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file26.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file29);
    }

    @Test
    public void test786() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test786");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file1 = null;
        fileEntryIterator0.current = file1;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive3 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest4 = explodedArchive3.manifest;
        explodedArchive3.recursive = false;
        java.util.jar.Manifest manifest7 = explodedArchive3.manifest;
        java.io.File file8 = explodedArchive3.manifestFile;
        java.io.File file9 = null;
        java.io.File file10 = explodedArchive3.getManifestFile(file9);
        java.util.Iterator<java.io.File> fileItor11 = fileEntryIterator0.listFiles(file10);
        java.io.File file12 = fileEntryIterator0.current;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator13 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file14 = null;
        fileEntryIterator13.current = file14;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive16 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest17 = explodedArchive16.manifest;
        explodedArchive16.recursive = false;
        java.util.jar.Manifest manifest20 = explodedArchive16.manifest;
        java.io.File file21 = explodedArchive16.manifestFile;
        java.io.File file22 = null;
        java.io.File file23 = explodedArchive16.getManifestFile(file22);
        java.util.Iterator<java.io.File> fileItor24 = fileEntryIterator13.listFiles(file23);
        java.util.ArrayDeque<java.util.Iterator<java.io.File>> fileItorQueue25 = new java.util.ArrayDeque<java.util.Iterator<java.io.File>>();
        boolean boolean26 = fileItorQueue25.add(fileItor24);
        fileEntryIterator0.stack = fileItorQueue25;
        java.util.Deque<java.util.Iterator<java.io.File>> fileItorQueue28 = fileEntryIterator0.stack;
        boolean boolean29 = fileEntryIterator0.recursive;
        java.util.Comparator<java.io.File> fileComparator30 = fileEntryIterator0.entryComparator;
        fileEntryIterator0.recursive = true;
        fileEntryIterator0.recursive = false;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file23.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file23.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItorQueue28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator30);
    }

    @Test
    public void test787() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test787");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest1 = explodedArchive0.manifest;
        java.util.jar.Manifest manifest2 = null;
        explodedArchive0.manifest = manifest2;
        java.io.File file4 = explodedArchive0.root;
        explodedArchive0.recursive = false;
        java.io.File file7 = explodedArchive0.manifestFile;
        java.lang.String str8 = explodedArchive0.toString();
        // The following exception was thrown during execution in test generation
        try {
            java.util.jar.Manifest manifest9 = explodedArchive0.getManifest();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str8 + "' != '" + "exploded archive" + "'", str8.equals("exploded archive"));
    }

    @Test
    public void test788() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test788");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest1 = explodedArchive0.manifest;
        explodedArchive0.recursive = false;
        java.io.File file4 = null;
        explodedArchive0.root = file4;
        java.io.File file6 = explodedArchive0.root;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive7 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest8 = explodedArchive7.manifest;
        explodedArchive7.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive11 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest12 = explodedArchive11.manifest;
        explodedArchive11.recursive = false;
        java.util.jar.Manifest manifest15 = explodedArchive11.manifest;
        java.io.File file16 = explodedArchive11.manifestFile;
        java.io.File file17 = null;
        java.io.File file18 = explodedArchive11.getManifestFile(file17);
        explodedArchive7.manifestFile = file17;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive20 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest21 = explodedArchive20.manifest;
        explodedArchive20.recursive = false;
        java.util.jar.Manifest manifest24 = explodedArchive20.manifest;
        java.io.File file25 = explodedArchive20.manifestFile;
        java.io.File file26 = null;
        java.io.File file27 = explodedArchive20.getManifestFile(file26);
        explodedArchive7.manifestFile = file27;
        java.io.File file29 = explodedArchive0.getManifestFile(file27);
        boolean boolean30 = explodedArchive0.recursive;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntry fileEntry31 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntry();
        java.lang.String str32 = fileEntry31.name;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator33 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file34 = null;
        fileEntryIterator33.current = file34;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive36 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.lang.String str37 = explodedArchive36.toString();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive38 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file39 = explodedArchive38.root;
        java.io.File file40 = null;
        explodedArchive38.manifestFile = file40;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive42 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest43 = explodedArchive42.manifest;
        explodedArchive42.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive46 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest47 = explodedArchive46.manifest;
        explodedArchive46.recursive = false;
        java.util.jar.Manifest manifest50 = explodedArchive46.manifest;
        java.io.File file51 = explodedArchive46.manifestFile;
        java.io.File file52 = null;
        java.io.File file53 = explodedArchive46.getManifestFile(file52);
        explodedArchive42.manifestFile = file52;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive55 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest56 = explodedArchive55.manifest;
        explodedArchive55.recursive = false;
        java.util.jar.Manifest manifest59 = explodedArchive55.manifest;
        java.io.File file60 = explodedArchive55.manifestFile;
        java.io.File file61 = null;
        java.io.File file62 = explodedArchive55.getManifestFile(file61);
        explodedArchive42.manifestFile = file62;
        java.io.File file64 = explodedArchive38.getManifestFile(file62);
        java.io.File file65 = explodedArchive36.getManifestFile(file62);
        fileEntryIterator33.root = file62;
        fileEntry31.file = file62;
        java.io.File file68 = explodedArchive0.getManifestFile(file62);
        // The following exception was thrown during execution in test generation
        try {
            org.springframework.boot.loader.archive.ExplodedArchive explodedArchive70 = new org.springframework.boot.loader.archive.ExplodedArchive(file68, false);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid source folder META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file18.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file18.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file27.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file27.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file29.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file29.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str37 + "' != '" + "exploded archive" + "'", str37.equals("exploded archive"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file53.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file53.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file62.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file62.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file64.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file64.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file65.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file65.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file68.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file68.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
    }

    @Test
    public void test789() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test789");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntry fileEntry0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntry();
        java.lang.String str1 = fileEntry0.getName();
        java.io.File file2 = fileEntry0.getFile();
        java.io.File file3 = fileEntry0.file;
        fileEntry0.name = "exploded archive";
        java.io.File file6 = fileEntry0.file;
        java.io.File file7 = fileEntry0.getFile();
        java.lang.String str8 = fileEntry0.getName();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str8 + "' != '" + "exploded archive" + "'", str8.equals("exploded archive"));
    }

    @Test
    public void test790() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test790");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file1 = explodedArchive0.root;
        explodedArchive0.recursive = false;
        boolean boolean4 = explodedArchive0.recursive;
        boolean boolean5 = explodedArchive0.recursive;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive6 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest7 = explodedArchive6.manifest;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntry fileEntry8 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntry();
        java.io.File file9 = fileEntry8.getFile();
        java.io.File file10 = fileEntry8.getFile();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive11 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file12 = explodedArchive11.root;
        java.io.File file13 = null;
        explodedArchive11.manifestFile = file13;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive15 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest16 = explodedArchive15.manifest;
        explodedArchive15.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive19 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest20 = explodedArchive19.manifest;
        explodedArchive19.recursive = false;
        java.util.jar.Manifest manifest23 = explodedArchive19.manifest;
        java.io.File file24 = explodedArchive19.manifestFile;
        java.io.File file25 = null;
        java.io.File file26 = explodedArchive19.getManifestFile(file25);
        explodedArchive15.manifestFile = file25;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive28 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest29 = explodedArchive28.manifest;
        explodedArchive28.recursive = false;
        java.util.jar.Manifest manifest32 = explodedArchive28.manifest;
        java.io.File file33 = explodedArchive28.manifestFile;
        java.io.File file34 = null;
        java.io.File file35 = explodedArchive28.getManifestFile(file34);
        explodedArchive15.manifestFile = file35;
        java.io.File file37 = explodedArchive11.getManifestFile(file35);
        fileEntry8.file = file37;
        java.io.File file39 = fileEntry8.file;
        fileEntry8.name = "exploded archive";
        java.io.File file42 = fileEntry8.file;
        explodedArchive6.root = file42;
        explodedArchive0.manifestFile = file42;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file26.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file26.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file35.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file35.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file37.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file37.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file39.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file39.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file42.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file42.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
    }

    @Test
    public void test791() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test791");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest1 = explodedArchive0.manifest;
        explodedArchive0.recursive = false;
        java.io.File file4 = null;
        explodedArchive0.root = file4;
        java.io.File file6 = explodedArchive0.root;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive7 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest8 = explodedArchive7.manifest;
        explodedArchive7.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive11 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest12 = explodedArchive11.manifest;
        explodedArchive11.recursive = false;
        java.util.jar.Manifest manifest15 = explodedArchive11.manifest;
        java.io.File file16 = explodedArchive11.manifestFile;
        java.io.File file17 = null;
        java.io.File file18 = explodedArchive11.getManifestFile(file17);
        explodedArchive7.manifestFile = file17;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive20 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest21 = explodedArchive20.manifest;
        explodedArchive20.recursive = false;
        java.util.jar.Manifest manifest24 = explodedArchive20.manifest;
        java.io.File file25 = explodedArchive20.manifestFile;
        java.io.File file26 = null;
        java.io.File file27 = explodedArchive20.getManifestFile(file26);
        explodedArchive7.manifestFile = file27;
        java.io.File file29 = explodedArchive0.getManifestFile(file27);
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntry fileEntry30 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntry();
        java.lang.String str31 = fileEntry30.name;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator32 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file33 = null;
        fileEntryIterator32.current = file33;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive35 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.lang.String str36 = explodedArchive35.toString();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive37 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file38 = explodedArchive37.root;
        java.io.File file39 = null;
        explodedArchive37.manifestFile = file39;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive41 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest42 = explodedArchive41.manifest;
        explodedArchive41.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive45 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest46 = explodedArchive45.manifest;
        explodedArchive45.recursive = false;
        java.util.jar.Manifest manifest49 = explodedArchive45.manifest;
        java.io.File file50 = explodedArchive45.manifestFile;
        java.io.File file51 = null;
        java.io.File file52 = explodedArchive45.getManifestFile(file51);
        explodedArchive41.manifestFile = file51;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive54 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest55 = explodedArchive54.manifest;
        explodedArchive54.recursive = false;
        java.util.jar.Manifest manifest58 = explodedArchive54.manifest;
        java.io.File file59 = explodedArchive54.manifestFile;
        java.io.File file60 = null;
        java.io.File file61 = explodedArchive54.getManifestFile(file60);
        explodedArchive41.manifestFile = file61;
        java.io.File file63 = explodedArchive37.getManifestFile(file61);
        java.io.File file64 = explodedArchive35.getManifestFile(file61);
        fileEntryIterator32.root = file61;
        fileEntry30.file = file61;
        java.io.File file67 = fileEntry30.file;
        explodedArchive0.root = file67;
        java.io.File file69 = explodedArchive0.manifestFile;
        java.util.Spliterator<org.springframework.boot.loader.archive.Archive.Entry> entrySpliterator70 = explodedArchive0.spliterator();
        java.lang.String str71 = explodedArchive0.toString();
        java.lang.String str72 = explodedArchive0.toString();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file18.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file18.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file27.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file27.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file29.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file29.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str36 + "' != '" + "exploded archive" + "'", str36.equals("exploded archive"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file52.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file52.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file61.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file61.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file63.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file63.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file64.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file64.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file67.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file67.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(entrySpliterator70);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertTrue("'" + str71 + "' != '" + "file:/server/study-execution/new-nimrod/nimrod-hunoroutput-test-dest/spring-boot/af20dc6cc45c032573413c401f9f73aa75371744/randoop_1/META-INF/MANIFEST.MF" + "'", str71.equals("file:/server/study-execution/new-nimrod/nimrod-hunoroutput-test-dest/spring-boot/af20dc6cc45c032573413c401f9f73aa75371744/randoop_1/META-INF/MANIFEST.MF"));
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertTrue("'" + str72 + "' != '" + "file:/server/study-execution/new-nimrod/nimrod-hunoroutput-test-dest/spring-boot/af20dc6cc45c032573413c401f9f73aa75371744/randoop_1/META-INF/MANIFEST.MF" + "'", str72.equals("file:/server/study-execution/new-nimrod/nimrod-hunoroutput-test-dest/spring-boot/af20dc6cc45c032573413c401f9f73aa75371744/randoop_1/META-INF/MANIFEST.MF"));
    }

    @Test
    public void test792() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test792");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file1 = null;
        fileEntryIterator0.current = file1;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive3 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest4 = explodedArchive3.manifest;
        explodedArchive3.recursive = false;
        java.util.jar.Manifest manifest7 = explodedArchive3.manifest;
        java.io.File file8 = explodedArchive3.manifestFile;
        java.io.File file9 = null;
        java.io.File file10 = explodedArchive3.getManifestFile(file9);
        java.util.Iterator<java.io.File> fileItor11 = fileEntryIterator0.listFiles(file10);
        java.io.File file12 = fileEntryIterator0.root;
        fileEntryIterator0.recursive = true;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator15 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file16 = null;
        fileEntryIterator15.current = file16;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive18 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest19 = explodedArchive18.manifest;
        explodedArchive18.recursive = false;
        java.util.jar.Manifest manifest22 = explodedArchive18.manifest;
        java.io.File file23 = explodedArchive18.manifestFile;
        java.io.File file24 = null;
        java.io.File file25 = explodedArchive18.getManifestFile(file24);
        java.util.Iterator<java.io.File> fileItor26 = fileEntryIterator15.listFiles(file25);
        java.io.File file27 = fileEntryIterator15.root;
        java.io.File file28 = fileEntryIterator15.root;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator29 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file30 = null;
        fileEntryIterator29.current = file30;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive32 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest33 = explodedArchive32.manifest;
        explodedArchive32.recursive = false;
        java.util.jar.Manifest manifest36 = explodedArchive32.manifest;
        java.io.File file37 = explodedArchive32.manifestFile;
        java.io.File file38 = null;
        java.io.File file39 = explodedArchive32.getManifestFile(file38);
        java.util.Iterator<java.io.File> fileItor40 = fileEntryIterator29.listFiles(file39);
        java.util.ArrayDeque<java.util.Iterator<java.io.File>> fileItorQueue41 = new java.util.ArrayDeque<java.util.Iterator<java.io.File>>();
        boolean boolean42 = fileItorQueue41.add(fileItor40);
        fileEntryIterator15.stack = fileItorQueue41;
        java.util.Deque<java.util.Iterator<java.io.File>> fileItorQueue44 = fileEntryIterator15.stack;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator45 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        boolean boolean46 = fileEntryIterator45.hasNext();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator47 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator48 = entryComparator47.reversed();
        java.util.Comparator<java.io.File> fileComparator49 = fileComparator48.reversed();
        fileEntryIterator45.entryComparator = fileComparator49;
        java.util.Comparator<java.io.File> fileComparator51 = fileEntryIterator45.entryComparator;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator52 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator53 = entryComparator52.reversed();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator54 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator55 = entryComparator54.reversed();
        java.util.Comparator<java.io.File> fileComparator56 = entryComparator52.thenComparing(fileComparator55);
        java.util.Comparator<java.io.File> fileComparator57 = fileComparator51.thenComparing(fileComparator55);
        fileEntryIterator15.entryComparator = fileComparator57;
        java.util.Comparator<java.io.File> fileComparator59 = fileComparator57.reversed();
        fileEntryIterator0.entryComparator = fileComparator59;
        boolean boolean61 = fileEntryIterator0.hasNext();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file25.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file25.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file39.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file39.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItorQueue44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
    }

    @Test
    public void test793() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test793");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest1 = explodedArchive0.manifest;
        explodedArchive0.recursive = false;
        java.util.jar.Manifest manifest4 = explodedArchive0.manifest;
        java.io.File file5 = explodedArchive0.manifestFile;
        java.io.File file6 = null;
        java.io.File file7 = explodedArchive0.getManifestFile(file6);
        java.util.jar.Manifest manifest8 = explodedArchive0.manifest;
        java.io.File file9 = explodedArchive0.root;
        java.lang.String str10 = explodedArchive0.toString();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive11 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file12 = explodedArchive11.root;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator13 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file14 = null;
        fileEntryIterator13.current = file14;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive16 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest17 = explodedArchive16.manifest;
        explodedArchive16.recursive = false;
        java.util.jar.Manifest manifest20 = explodedArchive16.manifest;
        java.io.File file21 = explodedArchive16.manifestFile;
        java.io.File file22 = null;
        java.io.File file23 = explodedArchive16.getManifestFile(file22);
        java.util.Iterator<java.io.File> fileItor24 = fileEntryIterator13.listFiles(file23);
        boolean boolean25 = fileEntryIterator13.hasNext();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator26 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator27 = entryComparator26.reversed();
        java.util.Comparator<java.io.File> fileComparator28 = entryComparator26.reversed();
        fileEntryIterator13.entryComparator = fileComparator28;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator30 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file31 = null;
        fileEntryIterator30.current = file31;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive33 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.lang.String str34 = explodedArchive33.toString();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive35 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file36 = explodedArchive35.root;
        java.io.File file37 = null;
        explodedArchive35.manifestFile = file37;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive39 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest40 = explodedArchive39.manifest;
        explodedArchive39.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive43 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest44 = explodedArchive43.manifest;
        explodedArchive43.recursive = false;
        java.util.jar.Manifest manifest47 = explodedArchive43.manifest;
        java.io.File file48 = explodedArchive43.manifestFile;
        java.io.File file49 = null;
        java.io.File file50 = explodedArchive43.getManifestFile(file49);
        explodedArchive39.manifestFile = file49;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive52 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest53 = explodedArchive52.manifest;
        explodedArchive52.recursive = false;
        java.util.jar.Manifest manifest56 = explodedArchive52.manifest;
        java.io.File file57 = explodedArchive52.manifestFile;
        java.io.File file58 = null;
        java.io.File file59 = explodedArchive52.getManifestFile(file58);
        explodedArchive39.manifestFile = file59;
        java.io.File file61 = explodedArchive35.getManifestFile(file59);
        java.io.File file62 = explodedArchive33.getManifestFile(file59);
        fileEntryIterator30.root = file59;
        fileEntryIterator13.current = file59;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive65 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file66 = explodedArchive65.root;
        java.io.File file67 = null;
        explodedArchive65.manifestFile = file67;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive69 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest70 = explodedArchive69.manifest;
        explodedArchive69.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive73 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest74 = explodedArchive73.manifest;
        explodedArchive73.recursive = false;
        java.util.jar.Manifest manifest77 = explodedArchive73.manifest;
        java.io.File file78 = explodedArchive73.manifestFile;
        java.io.File file79 = null;
        java.io.File file80 = explodedArchive73.getManifestFile(file79);
        explodedArchive69.manifestFile = file79;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive82 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest83 = explodedArchive82.manifest;
        explodedArchive82.recursive = false;
        java.util.jar.Manifest manifest86 = explodedArchive82.manifest;
        java.io.File file87 = explodedArchive82.manifestFile;
        java.io.File file88 = null;
        java.io.File file89 = explodedArchive82.getManifestFile(file88);
        explodedArchive69.manifestFile = file89;
        java.io.File file91 = explodedArchive65.getManifestFile(file89);
        fileEntryIterator13.root = file91;
        explodedArchive11.root = file91;
        explodedArchive0.manifestFile = file91;
        // The following exception was thrown during execution in test generation
        try {
            org.springframework.boot.loader.archive.ExplodedArchive explodedArchive95 = new org.springframework.boot.loader.archive.ExplodedArchive(file91);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid source folder META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file7.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file7.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str10 + "' != '" + "exploded archive" + "'", str10.equals("exploded archive"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file23.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file23.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str34 + "' != '" + "exploded archive" + "'", str34.equals("exploded archive"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file50.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file50.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file59.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file59.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file61.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file61.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file62.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file62.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest77);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file78);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file80);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file80.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file80.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest83);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest86);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file87);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file89);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file89.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file89.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file91);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file91.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file91.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
    }

    @Test
    public void test794() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test794");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file1 = null;
        fileEntryIterator0.current = file1;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive3 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest4 = explodedArchive3.manifest;
        explodedArchive3.recursive = false;
        java.util.jar.Manifest manifest7 = explodedArchive3.manifest;
        java.io.File file8 = explodedArchive3.manifestFile;
        java.io.File file9 = null;
        java.io.File file10 = explodedArchive3.getManifestFile(file9);
        java.util.Iterator<java.io.File> fileItor11 = fileEntryIterator0.listFiles(file10);
        java.io.File file12 = fileEntryIterator0.root;
        java.io.File file13 = fileEntryIterator0.poll();
        java.util.Comparator<java.io.File> fileComparator14 = fileEntryIterator0.entryComparator;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator15 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        boolean boolean16 = fileEntryIterator15.hasNext();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator17 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator18 = entryComparator17.reversed();
        java.util.Comparator<java.io.File> fileComparator19 = fileComparator18.reversed();
        fileEntryIterator15.entryComparator = fileComparator19;
        java.util.Comparator<java.io.File> fileComparator21 = fileEntryIterator15.entryComparator;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator22 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator23 = entryComparator22.reversed();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator24 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator25 = entryComparator24.reversed();
        java.util.Comparator<java.io.File> fileComparator26 = entryComparator22.thenComparing(fileComparator25);
        java.util.Comparator<java.io.File> fileComparator27 = fileComparator21.thenComparing(fileComparator25);
        fileEntryIterator0.entryComparator = fileComparator27;
        java.io.File file29 = fileEntryIterator0.root;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator30 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file31 = null;
        fileEntryIterator30.current = file31;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive33 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest34 = explodedArchive33.manifest;
        explodedArchive33.recursive = false;
        java.util.jar.Manifest manifest37 = explodedArchive33.manifest;
        java.io.File file38 = explodedArchive33.manifestFile;
        java.io.File file39 = null;
        java.io.File file40 = explodedArchive33.getManifestFile(file39);
        java.util.Iterator<java.io.File> fileItor41 = fileEntryIterator30.listFiles(file40);
        boolean boolean42 = fileEntryIterator30.hasNext();
        java.util.Comparator<java.io.File> fileComparator43 = fileEntryIterator30.entryComparator;
        fileEntryIterator0.entryComparator = fileComparator43;
        java.io.File file45 = fileEntryIterator0.root;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator46 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file47 = null;
        fileEntryIterator46.current = file47;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive49 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.lang.String str50 = explodedArchive49.toString();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive51 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file52 = explodedArchive51.root;
        java.io.File file53 = null;
        explodedArchive51.manifestFile = file53;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive55 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest56 = explodedArchive55.manifest;
        explodedArchive55.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive59 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest60 = explodedArchive59.manifest;
        explodedArchive59.recursive = false;
        java.util.jar.Manifest manifest63 = explodedArchive59.manifest;
        java.io.File file64 = explodedArchive59.manifestFile;
        java.io.File file65 = null;
        java.io.File file66 = explodedArchive59.getManifestFile(file65);
        explodedArchive55.manifestFile = file65;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive68 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest69 = explodedArchive68.manifest;
        explodedArchive68.recursive = false;
        java.util.jar.Manifest manifest72 = explodedArchive68.manifest;
        java.io.File file73 = explodedArchive68.manifestFile;
        java.io.File file74 = null;
        java.io.File file75 = explodedArchive68.getManifestFile(file74);
        explodedArchive55.manifestFile = file75;
        java.io.File file77 = explodedArchive51.getManifestFile(file75);
        java.io.File file78 = explodedArchive49.getManifestFile(file75);
        fileEntryIterator46.root = file75;
        boolean boolean80 = fileEntryIterator46.recursive;
        java.io.File file81 = fileEntryIterator46.current;
        boolean boolean82 = fileEntryIterator46.recursive;
        java.io.File file83 = fileEntryIterator46.root;
        fileEntryIterator0.root = file83;
        // The following exception was thrown during execution in test generation
        try {
            org.springframework.boot.loader.archive.Archive.Entry entry85 = fileEntryIterator0.next();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file40.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file40.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str50 + "' != '" + "exploded archive" + "'", str50.equals("exploded archive"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file66.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file66.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file73);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file75);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file75.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file75.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file77);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file77.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file77.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file78);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file78.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file78.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file81);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file83);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file83.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file83.toString(), "META-INF/MANIFEST.MF");
    }

    @Test
    public void test795() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test795");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file1 = null;
        fileEntryIterator0.current = file1;
        fileEntryIterator0.recursive = true;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator5 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file6 = null;
        fileEntryIterator5.current = file6;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive8 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest9 = explodedArchive8.manifest;
        explodedArchive8.recursive = false;
        java.util.jar.Manifest manifest12 = explodedArchive8.manifest;
        java.io.File file13 = explodedArchive8.manifestFile;
        java.io.File file14 = null;
        java.io.File file15 = explodedArchive8.getManifestFile(file14);
        java.util.Iterator<java.io.File> fileItor16 = fileEntryIterator5.listFiles(file15);
        java.io.File file17 = fileEntryIterator5.root;
        java.io.File file18 = fileEntryIterator5.root;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator19 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file20 = null;
        fileEntryIterator19.current = file20;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive22 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest23 = explodedArchive22.manifest;
        explodedArchive22.recursive = false;
        java.util.jar.Manifest manifest26 = explodedArchive22.manifest;
        java.io.File file27 = explodedArchive22.manifestFile;
        java.io.File file28 = null;
        java.io.File file29 = explodedArchive22.getManifestFile(file28);
        java.util.Iterator<java.io.File> fileItor30 = fileEntryIterator19.listFiles(file29);
        java.util.ArrayDeque<java.util.Iterator<java.io.File>> fileItorQueue31 = new java.util.ArrayDeque<java.util.Iterator<java.io.File>>();
        boolean boolean32 = fileItorQueue31.add(fileItor30);
        fileEntryIterator5.stack = fileItorQueue31;
        java.util.Deque<java.util.Iterator<java.io.File>> fileItorQueue34 = fileEntryIterator5.stack;
        fileEntryIterator0.stack = fileItorQueue34;
        boolean boolean36 = fileEntryIterator0.recursive;
        // The following exception was thrown during execution in test generation
        try {
            org.springframework.boot.loader.archive.Archive.Entry entry37 = fileEntryIterator0.next();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file15.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file15.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file29.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file29.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItorQueue34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
    }

    @Test
    public void test796() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test796");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        boolean boolean1 = fileEntryIterator0.hasNext();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator2 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator3 = entryComparator2.reversed();
        java.util.Comparator<java.io.File> fileComparator4 = fileComparator3.reversed();
        fileEntryIterator0.entryComparator = fileComparator4;
        java.util.Comparator<java.io.File> fileComparator6 = fileEntryIterator0.entryComparator;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator7 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator8 = entryComparator7.reversed();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator9 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator10 = entryComparator9.reversed();
        java.util.Comparator<java.io.File> fileComparator11 = entryComparator7.thenComparing(fileComparator10);
        java.util.Comparator<java.io.File> fileComparator12 = fileComparator6.thenComparing(fileComparator10);
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator13 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator14 = entryComparator13.reversed();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator15 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator16 = entryComparator15.reversed();
        java.util.Comparator<java.io.File> fileComparator17 = entryComparator13.thenComparing(fileComparator16);
        java.util.Comparator<java.io.File> fileComparator18 = fileComparator12.thenComparing((java.util.Comparator<java.io.File>) entryComparator13);
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator19 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        boolean boolean20 = fileEntryIterator19.hasNext();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator21 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator22 = entryComparator21.reversed();
        java.util.Comparator<java.io.File> fileComparator23 = fileComparator22.reversed();
        fileEntryIterator19.entryComparator = fileComparator23;
        java.util.Comparator<java.io.File> fileComparator25 = fileComparator12.thenComparing(fileComparator23);
        java.util.Comparator<java.io.File> fileComparator26 = fileComparator12.reversed();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator26);
    }

    @Test
    public void test797() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test797");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file1 = null;
        fileEntryIterator0.current = file1;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive3 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest4 = explodedArchive3.manifest;
        explodedArchive3.recursive = false;
        java.util.jar.Manifest manifest7 = explodedArchive3.manifest;
        java.io.File file8 = explodedArchive3.manifestFile;
        java.io.File file9 = null;
        java.io.File file10 = explodedArchive3.getManifestFile(file9);
        java.util.Iterator<java.io.File> fileItor11 = fileEntryIterator0.listFiles(file10);
        java.io.File file12 = fileEntryIterator0.root;
        boolean boolean13 = fileEntryIterator0.hasNext();
        // The following exception was thrown during execution in test generation
        try {
            org.springframework.boot.loader.archive.Archive.Entry entry14 = fileEntryIterator0.next();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test798() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test798");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        boolean boolean1 = fileEntryIterator0.recursive;
        java.io.File file2 = fileEntryIterator0.current;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator3 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        boolean boolean4 = fileEntryIterator3.hasNext();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator5 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator6 = entryComparator5.reversed();
        java.util.Comparator<java.io.File> fileComparator7 = fileComparator6.reversed();
        fileEntryIterator3.entryComparator = fileComparator7;
        java.util.Comparator<java.io.File> fileComparator9 = fileEntryIterator3.entryComparator;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator10 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator11 = entryComparator10.reversed();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator12 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator13 = entryComparator12.reversed();
        java.util.Comparator<java.io.File> fileComparator14 = entryComparator10.thenComparing(fileComparator13);
        java.util.Comparator<java.io.File> fileComparator15 = fileComparator9.thenComparing(fileComparator13);
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator16 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator17 = entryComparator16.reversed();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator18 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator19 = entryComparator18.reversed();
        java.util.Comparator<java.io.File> fileComparator20 = entryComparator16.thenComparing(fileComparator19);
        java.util.Comparator<java.io.File> fileComparator21 = fileComparator15.thenComparing((java.util.Comparator<java.io.File>) entryComparator16);
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator22 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        boolean boolean23 = fileEntryIterator22.hasNext();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator24 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator25 = entryComparator24.reversed();
        java.util.Comparator<java.io.File> fileComparator26 = fileComparator25.reversed();
        fileEntryIterator22.entryComparator = fileComparator26;
        java.util.Comparator<java.io.File> fileComparator28 = fileComparator15.thenComparing(fileComparator26);
        fileEntryIterator0.entryComparator = fileComparator26;
        java.io.File file30 = fileEntryIterator0.current;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file30);
    }

    @Test
    public void test799() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test799");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntry fileEntry0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntry();
        java.lang.String str1 = fileEntry0.getName();
        fileEntry0.name = "hi!";
        java.lang.String str4 = fileEntry0.name;
        java.io.File file5 = fileEntry0.file;
        java.io.File file6 = fileEntry0.getFile();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str4 + "' != '" + "hi!" + "'", str4.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file6);
    }

    @Test
    public void test800() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test800");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest1 = explodedArchive0.manifest;
        explodedArchive0.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive4 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest5 = explodedArchive4.manifest;
        explodedArchive4.recursive = false;
        java.util.jar.Manifest manifest8 = explodedArchive4.manifest;
        java.io.File file9 = explodedArchive4.manifestFile;
        java.io.File file10 = null;
        java.io.File file11 = explodedArchive4.getManifestFile(file10);
        explodedArchive0.manifestFile = file10;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive13 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest14 = explodedArchive13.manifest;
        explodedArchive13.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive17 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest18 = explodedArchive17.manifest;
        explodedArchive17.recursive = false;
        java.util.jar.Manifest manifest21 = explodedArchive17.manifest;
        java.io.File file22 = explodedArchive17.manifestFile;
        java.io.File file23 = null;
        java.io.File file24 = explodedArchive17.getManifestFile(file23);
        explodedArchive13.manifestFile = file23;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive26 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest27 = explodedArchive26.manifest;
        explodedArchive26.recursive = false;
        java.util.jar.Manifest manifest30 = explodedArchive26.manifest;
        java.io.File file31 = explodedArchive26.manifestFile;
        java.io.File file32 = null;
        java.io.File file33 = explodedArchive26.getManifestFile(file32);
        explodedArchive13.manifestFile = file33;
        explodedArchive0.root = file33;
        java.net.URL uRL36 = explodedArchive0.getUrl();
        java.util.jar.Manifest manifest37 = null;
        explodedArchive0.manifest = manifest37;
        java.util.Spliterator<org.springframework.boot.loader.archive.Archive.Entry> entrySpliterator39 = explodedArchive0.spliterator();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file11.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file11.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file24.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file24.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file33.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file33.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(uRL36);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(uRL36.toString(), "file:/server/study-execution/new-nimrod/nimrod-hunoroutput-test-dest/spring-boot/af20dc6cc45c032573413c401f9f73aa75371744/randoop_1/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(entrySpliterator39);
    }

    @Test
    public void test801() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test801");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntry fileEntry0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntry();
        java.io.File file1 = fileEntry0.getFile();
        java.io.File file2 = fileEntry0.file;
        java.io.File file3 = fileEntry0.getFile();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file3);
    }

    @Test
    public void test802() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test802");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest1 = explodedArchive0.manifest;
        java.util.jar.Manifest manifest2 = null;
        explodedArchive0.manifest = manifest2;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator4 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        boolean boolean5 = fileEntryIterator4.hasNext();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator6 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator7 = entryComparator6.reversed();
        java.util.Comparator<java.io.File> fileComparator8 = fileComparator7.reversed();
        fileEntryIterator4.entryComparator = fileComparator8;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive10 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file11 = explodedArchive10.root;
        java.io.File file12 = null;
        explodedArchive10.manifestFile = file12;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive14 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest15 = explodedArchive14.manifest;
        explodedArchive14.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive18 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest19 = explodedArchive18.manifest;
        explodedArchive18.recursive = false;
        java.util.jar.Manifest manifest22 = explodedArchive18.manifest;
        java.io.File file23 = explodedArchive18.manifestFile;
        java.io.File file24 = null;
        java.io.File file25 = explodedArchive18.getManifestFile(file24);
        explodedArchive14.manifestFile = file24;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive27 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest28 = explodedArchive27.manifest;
        explodedArchive27.recursive = false;
        java.util.jar.Manifest manifest31 = explodedArchive27.manifest;
        java.io.File file32 = explodedArchive27.manifestFile;
        java.io.File file33 = null;
        java.io.File file34 = explodedArchive27.getManifestFile(file33);
        explodedArchive14.manifestFile = file34;
        java.io.File file36 = explodedArchive10.getManifestFile(file34);
        java.util.Iterator<java.io.File> fileItor37 = fileEntryIterator4.listFiles(file36);
        java.io.File file38 = explodedArchive0.getManifestFile(file36);
        java.lang.String str39 = explodedArchive0.toString();
        java.util.jar.Manifest manifest40 = null;
        explodedArchive0.manifest = manifest40;
        boolean boolean42 = explodedArchive0.recursive;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file25.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file25.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file34.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file34.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file36.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file36.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file38.getParent(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file38.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str39 + "' != '" + "exploded archive" + "'", str39.equals("exploded archive"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
    }

    @Test
    public void test803() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test803");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file1 = null;
        fileEntryIterator0.current = file1;
        fileEntryIterator0.recursive = true;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator5 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator6 = entryComparator5.reversed();
        java.util.Comparator<java.io.File> fileComparator7 = entryComparator5.reversed();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive8 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest9 = explodedArchive8.manifest;
        explodedArchive8.recursive = false;
        java.util.jar.Manifest manifest12 = explodedArchive8.manifest;
        java.io.File file13 = explodedArchive8.manifestFile;
        java.io.File file14 = null;
        java.io.File file15 = explodedArchive8.getManifestFile(file14);
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive16 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest17 = explodedArchive16.manifest;
        explodedArchive16.recursive = false;
        java.io.File file20 = null;
        explodedArchive16.root = file20;
        java.io.File file22 = explodedArchive16.root;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive23 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest24 = explodedArchive23.manifest;
        explodedArchive23.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive27 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest28 = explodedArchive27.manifest;
        explodedArchive27.recursive = false;
        java.util.jar.Manifest manifest31 = explodedArchive27.manifest;
        java.io.File file32 = explodedArchive27.manifestFile;
        java.io.File file33 = null;
        java.io.File file34 = explodedArchive27.getManifestFile(file33);
        explodedArchive23.manifestFile = file33;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive36 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest37 = explodedArchive36.manifest;
        explodedArchive36.recursive = false;
        java.util.jar.Manifest manifest40 = explodedArchive36.manifest;
        java.io.File file41 = explodedArchive36.manifestFile;
        java.io.File file42 = null;
        java.io.File file43 = explodedArchive36.getManifestFile(file42);
        explodedArchive23.manifestFile = file43;
        java.io.File file45 = explodedArchive16.getManifestFile(file43);
        int int46 = entryComparator5.compare(file15, file43);
        java.util.Iterator<java.io.File> fileItor47 = fileEntryIterator0.listFiles(file15);
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator48 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        boolean boolean49 = fileEntryIterator48.hasNext();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator50 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator51 = entryComparator50.reversed();
        java.util.Comparator<java.io.File> fileComparator52 = fileComparator51.reversed();
        fileEntryIterator48.entryComparator = fileComparator52;
        java.util.Comparator<java.io.File> fileComparator54 = fileEntryIterator48.entryComparator;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator55 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator56 = entryComparator55.reversed();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator57 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator58 = entryComparator57.reversed();
        java.util.Comparator<java.io.File> fileComparator59 = entryComparator55.thenComparing(fileComparator58);
        java.util.Comparator<java.io.File> fileComparator60 = fileComparator54.thenComparing(fileComparator58);
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator61 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator62 = entryComparator61.reversed();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator63 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator64 = entryComparator63.reversed();
        java.util.Comparator<java.io.File> fileComparator65 = entryComparator61.thenComparing(fileComparator64);
        java.util.Comparator<java.io.File> fileComparator66 = fileComparator58.thenComparing(fileComparator64);
        fileEntryIterator0.entryComparator = fileComparator64;
        java.util.Comparator<java.io.File> fileComparator68 = fileEntryIterator0.entryComparator;
        java.io.File file69 = fileEntryIterator0.root;
        boolean boolean70 = fileEntryIterator0.recursive;
        java.util.Comparator<java.io.File> fileComparator71 = fileEntryIterator0.entryComparator;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file15.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file15.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file34.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file34.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file43.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file43.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file45.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file45.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator71);
    }

    @Test
    public void test804() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test804");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntry fileEntry0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntry();
        java.lang.String str1 = fileEntry0.name;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator2 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file3 = null;
        fileEntryIterator2.current = file3;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive5 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.lang.String str6 = explodedArchive5.toString();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive7 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file8 = explodedArchive7.root;
        java.io.File file9 = null;
        explodedArchive7.manifestFile = file9;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive11 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest12 = explodedArchive11.manifest;
        explodedArchive11.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive15 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest16 = explodedArchive15.manifest;
        explodedArchive15.recursive = false;
        java.util.jar.Manifest manifest19 = explodedArchive15.manifest;
        java.io.File file20 = explodedArchive15.manifestFile;
        java.io.File file21 = null;
        java.io.File file22 = explodedArchive15.getManifestFile(file21);
        explodedArchive11.manifestFile = file21;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive24 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest25 = explodedArchive24.manifest;
        explodedArchive24.recursive = false;
        java.util.jar.Manifest manifest28 = explodedArchive24.manifest;
        java.io.File file29 = explodedArchive24.manifestFile;
        java.io.File file30 = null;
        java.io.File file31 = explodedArchive24.getManifestFile(file30);
        explodedArchive11.manifestFile = file31;
        java.io.File file33 = explodedArchive7.getManifestFile(file31);
        java.io.File file34 = explodedArchive5.getManifestFile(file31);
        fileEntryIterator2.root = file31;
        fileEntry0.file = file31;
        java.io.File file37 = fileEntry0.getFile();
        java.io.File file38 = fileEntry0.getFile();
        fileEntry0.name = "";
        fileEntry0.name = "file:/server/study-execution/new-nimrod/nimrod-hunoroutput-test-dest/spring-boot/af20dc6cc45c032573413c401f9f73aa75371744/randoop_1/META-INF/MANIFEST.MF";
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "exploded archive" + "'", str6.equals("exploded archive"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file22.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file22.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file31.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file31.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file33.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file33.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file34.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file34.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file37.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file37.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file38.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file38.toString(), "META-INF/MANIFEST.MF");
    }

    @Test
    public void test805() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test805");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest1 = explodedArchive0.manifest;
        explodedArchive0.recursive = false;
        java.io.File file4 = null;
        explodedArchive0.root = file4;
        java.io.File file6 = explodedArchive0.root;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive7 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest8 = explodedArchive7.manifest;
        explodedArchive7.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive11 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest12 = explodedArchive11.manifest;
        explodedArchive11.recursive = false;
        java.util.jar.Manifest manifest15 = explodedArchive11.manifest;
        java.io.File file16 = explodedArchive11.manifestFile;
        java.io.File file17 = null;
        java.io.File file18 = explodedArchive11.getManifestFile(file17);
        explodedArchive7.manifestFile = file17;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive20 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest21 = explodedArchive20.manifest;
        explodedArchive20.recursive = false;
        java.util.jar.Manifest manifest24 = explodedArchive20.manifest;
        java.io.File file25 = explodedArchive20.manifestFile;
        java.io.File file26 = null;
        java.io.File file27 = explodedArchive20.getManifestFile(file26);
        explodedArchive7.manifestFile = file27;
        java.io.File file29 = explodedArchive0.getManifestFile(file27);
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntry fileEntry30 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntry();
        java.lang.String str31 = fileEntry30.name;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator32 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file33 = null;
        fileEntryIterator32.current = file33;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive35 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.lang.String str36 = explodedArchive35.toString();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive37 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file38 = explodedArchive37.root;
        java.io.File file39 = null;
        explodedArchive37.manifestFile = file39;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive41 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest42 = explodedArchive41.manifest;
        explodedArchive41.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive45 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest46 = explodedArchive45.manifest;
        explodedArchive45.recursive = false;
        java.util.jar.Manifest manifest49 = explodedArchive45.manifest;
        java.io.File file50 = explodedArchive45.manifestFile;
        java.io.File file51 = null;
        java.io.File file52 = explodedArchive45.getManifestFile(file51);
        explodedArchive41.manifestFile = file51;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive54 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest55 = explodedArchive54.manifest;
        explodedArchive54.recursive = false;
        java.util.jar.Manifest manifest58 = explodedArchive54.manifest;
        java.io.File file59 = explodedArchive54.manifestFile;
        java.io.File file60 = null;
        java.io.File file61 = explodedArchive54.getManifestFile(file60);
        explodedArchive41.manifestFile = file61;
        java.io.File file63 = explodedArchive37.getManifestFile(file61);
        java.io.File file64 = explodedArchive35.getManifestFile(file61);
        fileEntryIterator32.root = file61;
        fileEntry30.file = file61;
        java.io.File file67 = fileEntry30.file;
        explodedArchive0.root = file67;
        java.io.File file69 = explodedArchive0.manifestFile;
        java.util.Iterator<org.springframework.boot.loader.archive.Archive.Entry> entryItor70 = explodedArchive0.iterator();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file18.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file18.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file27.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file27.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file29.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file29.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str36 + "' != '" + "exploded archive" + "'", str36.equals("exploded archive"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file52.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file52.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file61.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file61.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file63.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file63.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file64.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file64.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file67.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file67.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(entryItor70);
    }

    @Test
    public void test806() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test806");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest1 = explodedArchive0.manifest;
        explodedArchive0.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive4 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest5 = explodedArchive4.manifest;
        explodedArchive4.recursive = false;
        java.util.jar.Manifest manifest8 = explodedArchive4.manifest;
        java.io.File file9 = explodedArchive4.manifestFile;
        java.io.File file10 = null;
        java.io.File file11 = explodedArchive4.getManifestFile(file10);
        explodedArchive0.manifestFile = file10;
        java.util.jar.Manifest manifest13 = null;
        explodedArchive0.manifest = manifest13;
        explodedArchive0.recursive = true;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file11.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file11.toString(), "META-INF/MANIFEST.MF");
    }

    @Test
    public void test807() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test807");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        boolean boolean1 = fileEntryIterator0.hasNext();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator2 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator3 = entryComparator2.reversed();
        java.util.Comparator<java.io.File> fileComparator4 = fileComparator3.reversed();
        fileEntryIterator0.entryComparator = fileComparator4;
        java.util.Comparator<java.io.File> fileComparator6 = fileEntryIterator0.entryComparator;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator7 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator8 = entryComparator7.reversed();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator9 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator10 = entryComparator9.reversed();
        java.util.Comparator<java.io.File> fileComparator11 = entryComparator7.thenComparing(fileComparator10);
        java.util.Comparator<java.io.File> fileComparator12 = fileComparator6.thenComparing(fileComparator10);
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator13 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator14 = entryComparator13.reversed();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator15 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator16 = entryComparator15.reversed();
        java.util.Comparator<java.io.File> fileComparator17 = entryComparator13.thenComparing(fileComparator16);
        java.util.Comparator<java.io.File> fileComparator18 = fileComparator12.thenComparing((java.util.Comparator<java.io.File>) entryComparator13);
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator19 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        boolean boolean20 = fileEntryIterator19.hasNext();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator21 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator22 = entryComparator21.reversed();
        java.util.Comparator<java.io.File> fileComparator23 = fileComparator22.reversed();
        fileEntryIterator19.entryComparator = fileComparator23;
        java.util.Comparator<java.io.File> fileComparator25 = fileComparator12.thenComparing(fileComparator23);
        java.util.Comparator<java.io.File> fileComparator26 = fileComparator23.reversed();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator27 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator28 = entryComparator27.reversed();
        java.util.Comparator<java.io.File> fileComparator29 = fileComparator28.reversed();
        java.util.Comparator<java.io.File> fileComparator30 = fileComparator26.thenComparing(fileComparator29);
        java.util.Comparator<java.io.File> fileComparator31 = fileComparator29.reversed();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator31);
    }

    @Test
    public void test808() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test808");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest1 = explodedArchive0.manifest;
        explodedArchive0.recursive = false;
        java.util.jar.Manifest manifest4 = explodedArchive0.manifest;
        java.util.jar.Manifest manifest5 = null;
        explodedArchive0.manifest = manifest5;
        java.io.File file7 = explodedArchive0.root;
        java.lang.String str8 = explodedArchive0.toString();
        java.io.File file9 = explodedArchive0.root;
        java.util.jar.Manifest manifest10 = explodedArchive0.manifest;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator11 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file12 = null;
        fileEntryIterator11.current = file12;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive14 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest15 = explodedArchive14.manifest;
        explodedArchive14.recursive = false;
        java.util.jar.Manifest manifest18 = explodedArchive14.manifest;
        java.io.File file19 = explodedArchive14.manifestFile;
        java.io.File file20 = null;
        java.io.File file21 = explodedArchive14.getManifestFile(file20);
        java.util.Iterator<java.io.File> fileItor22 = fileEntryIterator11.listFiles(file21);
        java.io.File file23 = fileEntryIterator11.root;
        java.io.File file24 = fileEntryIterator11.root;
        java.util.Deque<java.util.Iterator<java.io.File>> fileItorQueue25 = fileEntryIterator11.stack;
        java.io.File file26 = fileEntryIterator11.current;
        java.io.File file27 = fileEntryIterator11.poll();
        java.util.Comparator<java.io.File> fileComparator28 = fileEntryIterator11.entryComparator;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive29 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest30 = explodedArchive29.manifest;
        explodedArchive29.recursive = false;
        java.util.jar.Manifest manifest33 = explodedArchive29.manifest;
        java.io.File file34 = explodedArchive29.manifestFile;
        java.io.File file35 = null;
        java.io.File file36 = explodedArchive29.getManifestFile(file35);
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive37 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest38 = explodedArchive37.manifest;
        explodedArchive37.recursive = false;
        java.io.File file41 = null;
        explodedArchive37.root = file41;
        java.io.File file43 = explodedArchive37.manifestFile;
        java.io.File file44 = explodedArchive37.manifestFile;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator45 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator46 = entryComparator45.reversed();
        java.util.Comparator<java.io.File> fileComparator47 = entryComparator45.reversed();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive48 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest49 = explodedArchive48.manifest;
        explodedArchive48.recursive = false;
        java.util.jar.Manifest manifest52 = explodedArchive48.manifest;
        java.io.File file53 = explodedArchive48.manifestFile;
        java.io.File file54 = null;
        java.io.File file55 = explodedArchive48.getManifestFile(file54);
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive56 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest57 = explodedArchive56.manifest;
        explodedArchive56.recursive = false;
        java.io.File file60 = null;
        explodedArchive56.root = file60;
        java.io.File file62 = explodedArchive56.root;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive63 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest64 = explodedArchive63.manifest;
        explodedArchive63.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive67 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest68 = explodedArchive67.manifest;
        explodedArchive67.recursive = false;
        java.util.jar.Manifest manifest71 = explodedArchive67.manifest;
        java.io.File file72 = explodedArchive67.manifestFile;
        java.io.File file73 = null;
        java.io.File file74 = explodedArchive67.getManifestFile(file73);
        explodedArchive63.manifestFile = file73;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive76 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest77 = explodedArchive76.manifest;
        explodedArchive76.recursive = false;
        java.util.jar.Manifest manifest80 = explodedArchive76.manifest;
        java.io.File file81 = explodedArchive76.manifestFile;
        java.io.File file82 = null;
        java.io.File file83 = explodedArchive76.getManifestFile(file82);
        explodedArchive63.manifestFile = file83;
        java.io.File file85 = explodedArchive56.getManifestFile(file83);
        int int86 = entryComparator45.compare(file55, file83);
        explodedArchive37.root = file83;
        java.io.File file88 = explodedArchive29.getManifestFile(file83);
        fileEntryIterator11.current = file88;
        explodedArchive0.root = file88;
        java.util.jar.Manifest manifest91 = explodedArchive0.manifest;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str8 + "' != '" + "exploded archive" + "'", str8.equals("exploded archive"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file21.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file21.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItorQueue25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file36.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file36.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file55.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file55.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file74.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file74.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest77);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest80);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file81);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file83);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file83.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file83.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file85);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file85.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file85.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file88);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file88.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file88.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest91);
    }

    @Test
    public void test809() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test809");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file1 = null;
        fileEntryIterator0.current = file1;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive3 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest4 = explodedArchive3.manifest;
        explodedArchive3.recursive = false;
        java.util.jar.Manifest manifest7 = explodedArchive3.manifest;
        java.io.File file8 = explodedArchive3.manifestFile;
        java.io.File file9 = null;
        java.io.File file10 = explodedArchive3.getManifestFile(file9);
        java.util.Iterator<java.io.File> fileItor11 = fileEntryIterator0.listFiles(file10);
        java.io.File file12 = fileEntryIterator0.root;
        java.io.File file13 = fileEntryIterator0.root;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator14 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file15 = null;
        fileEntryIterator14.current = file15;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive17 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest18 = explodedArchive17.manifest;
        explodedArchive17.recursive = false;
        java.util.jar.Manifest manifest21 = explodedArchive17.manifest;
        java.io.File file22 = explodedArchive17.manifestFile;
        java.io.File file23 = null;
        java.io.File file24 = explodedArchive17.getManifestFile(file23);
        java.util.Iterator<java.io.File> fileItor25 = fileEntryIterator14.listFiles(file24);
        java.util.ArrayDeque<java.util.Iterator<java.io.File>> fileItorQueue26 = new java.util.ArrayDeque<java.util.Iterator<java.io.File>>();
        boolean boolean27 = fileItorQueue26.add(fileItor25);
        fileEntryIterator0.stack = fileItorQueue26;
        java.util.Deque<java.util.Iterator<java.io.File>> fileItorQueue29 = fileEntryIterator0.stack;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator30 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        boolean boolean31 = fileEntryIterator30.hasNext();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator32 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator33 = entryComparator32.reversed();
        java.util.Comparator<java.io.File> fileComparator34 = fileComparator33.reversed();
        fileEntryIterator30.entryComparator = fileComparator34;
        java.util.Comparator<java.io.File> fileComparator36 = fileEntryIterator30.entryComparator;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator37 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator38 = entryComparator37.reversed();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator39 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator40 = entryComparator39.reversed();
        java.util.Comparator<java.io.File> fileComparator41 = entryComparator37.thenComparing(fileComparator40);
        java.util.Comparator<java.io.File> fileComparator42 = fileComparator36.thenComparing(fileComparator40);
        fileEntryIterator0.entryComparator = fileComparator42;
        // The following exception was thrown during execution in test generation
        try {
            fileEntryIterator0.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: remove");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file24.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file24.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItorQueue29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator42);
    }

    @Test
    public void test810() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test810");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file1 = null;
        fileEntryIterator0.current = file1;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive3 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest4 = explodedArchive3.manifest;
        explodedArchive3.recursive = false;
        java.util.jar.Manifest manifest7 = explodedArchive3.manifest;
        java.io.File file8 = explodedArchive3.manifestFile;
        java.io.File file9 = null;
        java.io.File file10 = explodedArchive3.getManifestFile(file9);
        java.util.Iterator<java.io.File> fileItor11 = fileEntryIterator0.listFiles(file10);
        java.io.File file12 = fileEntryIterator0.current;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator13 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file14 = null;
        fileEntryIterator13.current = file14;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive16 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest17 = explodedArchive16.manifest;
        explodedArchive16.recursive = false;
        java.util.jar.Manifest manifest20 = explodedArchive16.manifest;
        java.io.File file21 = explodedArchive16.manifestFile;
        java.io.File file22 = null;
        java.io.File file23 = explodedArchive16.getManifestFile(file22);
        java.util.Iterator<java.io.File> fileItor24 = fileEntryIterator13.listFiles(file23);
        java.util.ArrayDeque<java.util.Iterator<java.io.File>> fileItorQueue25 = new java.util.ArrayDeque<java.util.Iterator<java.io.File>>();
        boolean boolean26 = fileItorQueue25.add(fileItor24);
        fileEntryIterator0.stack = fileItorQueue25;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive28 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest29 = explodedArchive28.manifest;
        explodedArchive28.recursive = false;
        java.io.File file32 = null;
        explodedArchive28.root = file32;
        java.io.File file34 = explodedArchive28.root;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive35 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest36 = explodedArchive35.manifest;
        explodedArchive35.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive39 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest40 = explodedArchive39.manifest;
        explodedArchive39.recursive = false;
        java.util.jar.Manifest manifest43 = explodedArchive39.manifest;
        java.io.File file44 = explodedArchive39.manifestFile;
        java.io.File file45 = null;
        java.io.File file46 = explodedArchive39.getManifestFile(file45);
        explodedArchive35.manifestFile = file45;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive48 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest49 = explodedArchive48.manifest;
        explodedArchive48.recursive = false;
        java.util.jar.Manifest manifest52 = explodedArchive48.manifest;
        java.io.File file53 = explodedArchive48.manifestFile;
        java.io.File file54 = null;
        java.io.File file55 = explodedArchive48.getManifestFile(file54);
        explodedArchive35.manifestFile = file55;
        java.io.File file57 = explodedArchive28.getManifestFile(file55);
        fileEntryIterator0.root = file55;
        boolean boolean59 = fileEntryIterator0.hasNext();
        java.io.File file60 = fileEntryIterator0.current;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator61 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        boolean boolean62 = fileEntryIterator61.hasNext();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator63 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator64 = entryComparator63.reversed();
        java.util.Comparator<java.io.File> fileComparator65 = fileComparator64.reversed();
        fileEntryIterator61.entryComparator = fileComparator65;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator67 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        boolean boolean68 = fileEntryIterator67.hasNext();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator69 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator70 = entryComparator69.reversed();
        java.util.Comparator<java.io.File> fileComparator71 = fileComparator70.reversed();
        fileEntryIterator67.entryComparator = fileComparator71;
        java.util.Comparator<java.io.File> fileComparator73 = fileEntryIterator67.entryComparator;
        java.util.Comparator<java.io.File> fileComparator74 = fileComparator65.thenComparing(fileComparator73);
        java.util.Comparator<java.io.File> fileComparator75 = fileComparator74.reversed();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator76 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        boolean boolean77 = fileEntryIterator76.recursive;
        java.io.File file78 = fileEntryIterator76.current;
        boolean boolean79 = fileEntryIterator76.hasNext();
        boolean boolean80 = fileEntryIterator76.recursive;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator81 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator82 = entryComparator81.reversed();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator83 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator84 = entryComparator83.reversed();
        java.util.Comparator<java.io.File> fileComparator85 = entryComparator81.thenComparing(fileComparator84);
        fileEntryIterator76.entryComparator = fileComparator85;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator87 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator88 = entryComparator87.reversed();
        java.util.Comparator<java.io.File> fileComparator89 = entryComparator87.reversed();
        java.util.Comparator<java.io.File> fileComparator90 = fileComparator85.thenComparing(fileComparator89);
        java.util.Comparator<java.io.File> fileComparator91 = fileComparator74.thenComparing(fileComparator89);
        fileEntryIterator0.entryComparator = fileComparator74;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file23.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file23.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file46.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file46.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file55.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file55.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file57.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file57.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator73);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator75);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file78);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator82);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator84);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator85);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator88);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator89);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator90);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator91);
    }

    @Test
    public void test811() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test811");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest1 = explodedArchive0.manifest;
        explodedArchive0.recursive = false;
        java.io.File file4 = null;
        explodedArchive0.root = file4;
        java.io.File file6 = explodedArchive0.root;
        java.util.jar.Manifest manifest7 = null;
        explodedArchive0.manifest = manifest7;
        explodedArchive0.recursive = false;
        java.util.jar.Manifest manifest11 = null;
        explodedArchive0.manifest = manifest11;
        org.springframework.boot.loader.archive.Archive.EntryFilter entryFilter13 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<org.springframework.boot.loader.archive.Archive> archiveList14 = explodedArchive0.getNestedArchives(entryFilter13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file6);
    }

    @Test
    public void test812() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test812");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntry fileEntry0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntry();
        java.io.File file1 = fileEntry0.file;
        java.lang.String str2 = fileEntry0.name;
        java.io.File file3 = fileEntry0.file;
        java.io.File file4 = fileEntry0.file;
        java.lang.String str5 = fileEntry0.name;
        java.lang.String str6 = fileEntry0.getName();
        java.io.File file7 = fileEntry0.getFile();
        fileEntry0.name = "hi!";
        java.io.File file10 = fileEntry0.getFile();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive11 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file12 = explodedArchive11.root;
        java.io.File file13 = null;
        explodedArchive11.manifestFile = file13;
        java.io.File file15 = explodedArchive11.root;
        boolean boolean16 = explodedArchive11.recursive;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive17 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest18 = explodedArchive17.manifest;
        explodedArchive17.recursive = false;
        java.io.File file21 = null;
        explodedArchive17.root = file21;
        java.io.File file23 = explodedArchive17.root;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive24 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest25 = explodedArchive24.manifest;
        explodedArchive24.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive28 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest29 = explodedArchive28.manifest;
        explodedArchive28.recursive = false;
        java.util.jar.Manifest manifest32 = explodedArchive28.manifest;
        java.io.File file33 = explodedArchive28.manifestFile;
        java.io.File file34 = null;
        java.io.File file35 = explodedArchive28.getManifestFile(file34);
        explodedArchive24.manifestFile = file34;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive37 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest38 = explodedArchive37.manifest;
        explodedArchive37.recursive = false;
        java.util.jar.Manifest manifest41 = explodedArchive37.manifest;
        java.io.File file42 = explodedArchive37.manifestFile;
        java.io.File file43 = null;
        java.io.File file44 = explodedArchive37.getManifestFile(file43);
        explodedArchive24.manifestFile = file44;
        java.io.File file46 = explodedArchive17.getManifestFile(file44);
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntry fileEntry47 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntry();
        java.lang.String str48 = fileEntry47.name;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator49 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file50 = null;
        fileEntryIterator49.current = file50;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive52 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.lang.String str53 = explodedArchive52.toString();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive54 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file55 = explodedArchive54.root;
        java.io.File file56 = null;
        explodedArchive54.manifestFile = file56;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive58 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest59 = explodedArchive58.manifest;
        explodedArchive58.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive62 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest63 = explodedArchive62.manifest;
        explodedArchive62.recursive = false;
        java.util.jar.Manifest manifest66 = explodedArchive62.manifest;
        java.io.File file67 = explodedArchive62.manifestFile;
        java.io.File file68 = null;
        java.io.File file69 = explodedArchive62.getManifestFile(file68);
        explodedArchive58.manifestFile = file68;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive71 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest72 = explodedArchive71.manifest;
        explodedArchive71.recursive = false;
        java.util.jar.Manifest manifest75 = explodedArchive71.manifest;
        java.io.File file76 = explodedArchive71.manifestFile;
        java.io.File file77 = null;
        java.io.File file78 = explodedArchive71.getManifestFile(file77);
        explodedArchive58.manifestFile = file78;
        java.io.File file80 = explodedArchive54.getManifestFile(file78);
        java.io.File file81 = explodedArchive52.getManifestFile(file78);
        fileEntryIterator49.root = file78;
        fileEntry47.file = file78;
        java.io.File file84 = fileEntry47.file;
        explodedArchive17.root = file84;
        java.io.File file86 = explodedArchive17.manifestFile;
        java.io.File file87 = explodedArchive17.root;
        explodedArchive11.manifestFile = file87;
        fileEntry0.file = file87;
        java.io.File file90 = fileEntry0.getFile();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file35.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file35.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file44.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file44.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file46.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file46.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str53 + "' != '" + "exploded archive" + "'", str53.equals("exploded archive"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file69.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file69.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest75);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file76);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file78);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file78.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file78.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file80);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file80.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file80.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file81);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file81.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file81.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file84);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file84.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file84.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file86);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file87);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file87.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file87.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file90);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file90.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file90.toString(), "META-INF/MANIFEST.MF");
    }

    @Test
    public void test813() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test813");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest1 = explodedArchive0.manifest;
        java.io.File file2 = explodedArchive0.manifestFile;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file2);
    }

    @Test
    public void test814() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test814");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file1 = explodedArchive0.root;
        java.io.File file2 = null;
        explodedArchive0.manifestFile = file2;
        java.io.File file4 = explodedArchive0.manifestFile;
        java.util.jar.Manifest manifest5 = null;
        explodedArchive0.manifest = manifest5;
        java.util.jar.Manifest manifest7 = explodedArchive0.manifest;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest7);
    }

    @Test
    public void test815() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test815");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file1 = explodedArchive0.root;
        java.io.File file2 = explodedArchive0.manifestFile;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntry fileEntry3 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntry();
        java.lang.String str4 = fileEntry3.getName();
        java.lang.String str5 = fileEntry3.getName();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator6 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator7 = entryComparator6.reversed();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive8 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file9 = explodedArchive8.root;
        java.io.File file10 = null;
        explodedArchive8.manifestFile = file10;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive12 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest13 = explodedArchive12.manifest;
        explodedArchive12.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive16 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest17 = explodedArchive16.manifest;
        explodedArchive16.recursive = false;
        java.util.jar.Manifest manifest20 = explodedArchive16.manifest;
        java.io.File file21 = explodedArchive16.manifestFile;
        java.io.File file22 = null;
        java.io.File file23 = explodedArchive16.getManifestFile(file22);
        explodedArchive12.manifestFile = file22;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive25 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest26 = explodedArchive25.manifest;
        explodedArchive25.recursive = false;
        java.util.jar.Manifest manifest29 = explodedArchive25.manifest;
        java.io.File file30 = explodedArchive25.manifestFile;
        java.io.File file31 = null;
        java.io.File file32 = explodedArchive25.getManifestFile(file31);
        explodedArchive12.manifestFile = file32;
        java.io.File file34 = explodedArchive8.getManifestFile(file32);
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive35 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest36 = explodedArchive35.manifest;
        explodedArchive35.recursive = false;
        java.io.File file39 = null;
        explodedArchive35.root = file39;
        java.io.File file41 = explodedArchive35.root;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive42 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest43 = explodedArchive42.manifest;
        explodedArchive42.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive46 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest47 = explodedArchive46.manifest;
        explodedArchive46.recursive = false;
        java.util.jar.Manifest manifest50 = explodedArchive46.manifest;
        java.io.File file51 = explodedArchive46.manifestFile;
        java.io.File file52 = null;
        java.io.File file53 = explodedArchive46.getManifestFile(file52);
        explodedArchive42.manifestFile = file52;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive55 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest56 = explodedArchive55.manifest;
        explodedArchive55.recursive = false;
        java.util.jar.Manifest manifest59 = explodedArchive55.manifest;
        java.io.File file60 = explodedArchive55.manifestFile;
        java.io.File file61 = null;
        java.io.File file62 = explodedArchive55.getManifestFile(file61);
        explodedArchive42.manifestFile = file62;
        java.io.File file64 = explodedArchive35.getManifestFile(file62);
        int int65 = entryComparator6.compare(file34, file62);
        fileEntry3.file = file62;
        java.io.File file67 = fileEntry3.getFile();
        explodedArchive0.root = file67;
        org.springframework.boot.loader.archive.Archive.EntryFilter entryFilter69 = null;
        java.util.List<org.springframework.boot.loader.archive.Archive> archiveList70 = explodedArchive0.getNestedArchives(entryFilter69);
        java.lang.Class<?> wildcardClass71 = explodedArchive0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file23.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file23.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file32.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file32.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file34.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file34.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file53.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file53.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file62.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file62.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file64.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file64.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 21 + "'", int65 == 21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file67.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file67.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(archiveList70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass71);
    }

    @Test
    public void test816() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test816");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file1 = null;
        fileEntryIterator0.current = file1;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive3 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest4 = explodedArchive3.manifest;
        explodedArchive3.recursive = false;
        java.util.jar.Manifest manifest7 = explodedArchive3.manifest;
        java.io.File file8 = explodedArchive3.manifestFile;
        java.io.File file9 = null;
        java.io.File file10 = explodedArchive3.getManifestFile(file9);
        java.util.Iterator<java.io.File> fileItor11 = fileEntryIterator0.listFiles(file10);
        java.util.Comparator<java.io.File> fileComparator12 = fileEntryIterator0.entryComparator;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator13 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        boolean boolean14 = fileEntryIterator13.recursive;
        java.io.File file15 = fileEntryIterator13.current;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator16 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file17 = null;
        fileEntryIterator16.current = file17;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive19 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest20 = explodedArchive19.manifest;
        explodedArchive19.recursive = false;
        java.util.jar.Manifest manifest23 = explodedArchive19.manifest;
        java.io.File file24 = explodedArchive19.manifestFile;
        java.io.File file25 = null;
        java.io.File file26 = explodedArchive19.getManifestFile(file25);
        java.util.Iterator<java.io.File> fileItor27 = fileEntryIterator16.listFiles(file26);
        java.io.File file28 = fileEntryIterator16.root;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive29 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.lang.String str30 = explodedArchive29.toString();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive31 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file32 = explodedArchive31.root;
        java.io.File file33 = null;
        explodedArchive31.manifestFile = file33;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive35 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest36 = explodedArchive35.manifest;
        explodedArchive35.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive39 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest40 = explodedArchive39.manifest;
        explodedArchive39.recursive = false;
        java.util.jar.Manifest manifest43 = explodedArchive39.manifest;
        java.io.File file44 = explodedArchive39.manifestFile;
        java.io.File file45 = null;
        java.io.File file46 = explodedArchive39.getManifestFile(file45);
        explodedArchive35.manifestFile = file45;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive48 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest49 = explodedArchive48.manifest;
        explodedArchive48.recursive = false;
        java.util.jar.Manifest manifest52 = explodedArchive48.manifest;
        java.io.File file53 = explodedArchive48.manifestFile;
        java.io.File file54 = null;
        java.io.File file55 = explodedArchive48.getManifestFile(file54);
        explodedArchive35.manifestFile = file55;
        java.io.File file57 = explodedArchive31.getManifestFile(file55);
        java.io.File file58 = explodedArchive29.getManifestFile(file55);
        fileEntryIterator16.root = file55;
        java.util.Iterator<java.io.File> fileItor60 = fileEntryIterator13.listFiles(file55);
        fileEntryIterator0.current = file55;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator62 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        boolean boolean63 = fileEntryIterator62.recursive;
        java.util.Deque<java.util.Iterator<java.io.File>> fileItorQueue64 = fileEntryIterator62.stack;
        fileEntryIterator0.stack = fileItorQueue64;
        java.util.Deque<java.util.Iterator<java.io.File>> fileItorQueue66 = fileEntryIterator0.stack;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file26.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file26.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str30 + "' != '" + "exploded archive" + "'", str30.equals("exploded archive"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file46.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file46.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file55.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file55.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file57.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file57.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file58.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file58.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItorQueue64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItorQueue66);
    }

    @Test
    public void test817() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test817");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        boolean boolean1 = fileEntryIterator0.hasNext();
        java.io.File file2 = fileEntryIterator0.root;
        boolean boolean3 = fileEntryIterator0.hasNext();
        java.util.Comparator<java.io.File> fileComparator4 = fileEntryIterator0.entryComparator;
        java.io.File file5 = fileEntryIterator0.current;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator6 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file7 = null;
        fileEntryIterator6.current = file7;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive9 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.lang.String str10 = explodedArchive9.toString();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive11 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file12 = explodedArchive11.root;
        java.io.File file13 = null;
        explodedArchive11.manifestFile = file13;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive15 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest16 = explodedArchive15.manifest;
        explodedArchive15.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive19 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest20 = explodedArchive19.manifest;
        explodedArchive19.recursive = false;
        java.util.jar.Manifest manifest23 = explodedArchive19.manifest;
        java.io.File file24 = explodedArchive19.manifestFile;
        java.io.File file25 = null;
        java.io.File file26 = explodedArchive19.getManifestFile(file25);
        explodedArchive15.manifestFile = file25;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive28 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest29 = explodedArchive28.manifest;
        explodedArchive28.recursive = false;
        java.util.jar.Manifest manifest32 = explodedArchive28.manifest;
        java.io.File file33 = explodedArchive28.manifestFile;
        java.io.File file34 = null;
        java.io.File file35 = explodedArchive28.getManifestFile(file34);
        explodedArchive15.manifestFile = file35;
        java.io.File file37 = explodedArchive11.getManifestFile(file35);
        java.io.File file38 = explodedArchive9.getManifestFile(file35);
        fileEntryIterator6.root = file35;
        fileEntryIterator0.current = file35;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str10 + "' != '" + "exploded archive" + "'", str10.equals("exploded archive"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file26.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file26.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file35.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file35.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file37.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file37.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file38.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file38.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
    }

    @Test
    public void test818() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test818");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        boolean boolean1 = fileEntryIterator0.hasNext();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator2 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator3 = entryComparator2.reversed();
        java.util.Comparator<java.io.File> fileComparator4 = fileComparator3.reversed();
        fileEntryIterator0.entryComparator = fileComparator4;
        java.util.Comparator<java.io.File> fileComparator6 = fileEntryIterator0.entryComparator;
        java.io.File file7 = fileEntryIterator0.current;
        java.util.Comparator<java.io.File> fileComparator8 = fileEntryIterator0.entryComparator;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive9 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest10 = explodedArchive9.manifest;
        explodedArchive9.recursive = false;
        java.io.File file13 = null;
        explodedArchive9.root = file13;
        java.io.File file15 = explodedArchive9.root;
        java.util.jar.Manifest manifest16 = null;
        explodedArchive9.manifest = manifest16;
        explodedArchive9.recursive = false;
        java.util.jar.Manifest manifest20 = null;
        explodedArchive9.manifest = manifest20;
        java.lang.String str22 = explodedArchive9.toString();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive23 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.lang.String str24 = explodedArchive23.toString();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive25 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file26 = explodedArchive25.root;
        java.io.File file27 = null;
        explodedArchive25.manifestFile = file27;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive29 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest30 = explodedArchive29.manifest;
        explodedArchive29.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive33 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest34 = explodedArchive33.manifest;
        explodedArchive33.recursive = false;
        java.util.jar.Manifest manifest37 = explodedArchive33.manifest;
        java.io.File file38 = explodedArchive33.manifestFile;
        java.io.File file39 = null;
        java.io.File file40 = explodedArchive33.getManifestFile(file39);
        explodedArchive29.manifestFile = file39;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive42 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest43 = explodedArchive42.manifest;
        explodedArchive42.recursive = false;
        java.util.jar.Manifest manifest46 = explodedArchive42.manifest;
        java.io.File file47 = explodedArchive42.manifestFile;
        java.io.File file48 = null;
        java.io.File file49 = explodedArchive42.getManifestFile(file48);
        explodedArchive29.manifestFile = file49;
        java.io.File file51 = explodedArchive25.getManifestFile(file49);
        java.io.File file52 = explodedArchive23.getManifestFile(file49);
        java.io.File file53 = explodedArchive9.getManifestFile(file49);
        fileEntryIterator0.current = file53;
        java.io.File file55 = fileEntryIterator0.poll();
        boolean boolean56 = fileEntryIterator0.recursive;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str22 + "' != '" + "exploded archive" + "'", str22.equals("exploded archive"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str24 + "' != '" + "exploded archive" + "'", str24.equals("exploded archive"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file40.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file40.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file49.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file49.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file51.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file51.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file52.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file52.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file53.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file53.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
    }

    @Test
    public void test819() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test819");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.lang.String str1 = explodedArchive0.toString();
        java.io.File file2 = explodedArchive0.root;
        java.io.File file3 = explodedArchive0.root;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntry fileEntry4 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntry();
        java.lang.String str5 = fileEntry4.getName();
        java.io.File file6 = fileEntry4.getFile();
        java.lang.String str7 = fileEntry4.getName();
        java.lang.String str8 = fileEntry4.getName();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator9 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        boolean boolean10 = fileEntryIterator9.recursive;
        java.io.File file11 = fileEntryIterator9.current;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator12 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file13 = null;
        fileEntryIterator12.current = file13;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive15 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest16 = explodedArchive15.manifest;
        explodedArchive15.recursive = false;
        java.util.jar.Manifest manifest19 = explodedArchive15.manifest;
        java.io.File file20 = explodedArchive15.manifestFile;
        java.io.File file21 = null;
        java.io.File file22 = explodedArchive15.getManifestFile(file21);
        java.util.Iterator<java.io.File> fileItor23 = fileEntryIterator12.listFiles(file22);
        java.io.File file24 = fileEntryIterator12.root;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive25 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.lang.String str26 = explodedArchive25.toString();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive27 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file28 = explodedArchive27.root;
        java.io.File file29 = null;
        explodedArchive27.manifestFile = file29;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive31 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest32 = explodedArchive31.manifest;
        explodedArchive31.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive35 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest36 = explodedArchive35.manifest;
        explodedArchive35.recursive = false;
        java.util.jar.Manifest manifest39 = explodedArchive35.manifest;
        java.io.File file40 = explodedArchive35.manifestFile;
        java.io.File file41 = null;
        java.io.File file42 = explodedArchive35.getManifestFile(file41);
        explodedArchive31.manifestFile = file41;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive44 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest45 = explodedArchive44.manifest;
        explodedArchive44.recursive = false;
        java.util.jar.Manifest manifest48 = explodedArchive44.manifest;
        java.io.File file49 = explodedArchive44.manifestFile;
        java.io.File file50 = null;
        java.io.File file51 = explodedArchive44.getManifestFile(file50);
        explodedArchive31.manifestFile = file51;
        java.io.File file53 = explodedArchive27.getManifestFile(file51);
        java.io.File file54 = explodedArchive25.getManifestFile(file51);
        fileEntryIterator12.root = file51;
        java.util.Iterator<java.io.File> fileItor56 = fileEntryIterator9.listFiles(file51);
        fileEntry4.file = file51;
        explodedArchive0.manifestFile = file51;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str1 + "' != '" + "exploded archive" + "'", str1.equals("exploded archive"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file22.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file22.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str26 + "' != '" + "exploded archive" + "'", str26.equals("exploded archive"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file42.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file42.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file51.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file51.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file53.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file53.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file54.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file54.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor56);
    }

    @Test
    public void test820() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test820");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file1 = null;
        fileEntryIterator0.current = file1;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive3 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.lang.String str4 = explodedArchive3.toString();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive5 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file6 = explodedArchive5.root;
        java.io.File file7 = null;
        explodedArchive5.manifestFile = file7;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive9 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest10 = explodedArchive9.manifest;
        explodedArchive9.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive13 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest14 = explodedArchive13.manifest;
        explodedArchive13.recursive = false;
        java.util.jar.Manifest manifest17 = explodedArchive13.manifest;
        java.io.File file18 = explodedArchive13.manifestFile;
        java.io.File file19 = null;
        java.io.File file20 = explodedArchive13.getManifestFile(file19);
        explodedArchive9.manifestFile = file19;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive22 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest23 = explodedArchive22.manifest;
        explodedArchive22.recursive = false;
        java.util.jar.Manifest manifest26 = explodedArchive22.manifest;
        java.io.File file27 = explodedArchive22.manifestFile;
        java.io.File file28 = null;
        java.io.File file29 = explodedArchive22.getManifestFile(file28);
        explodedArchive9.manifestFile = file29;
        java.io.File file31 = explodedArchive5.getManifestFile(file29);
        java.io.File file32 = explodedArchive3.getManifestFile(file29);
        fileEntryIterator0.root = file29;
        boolean boolean34 = fileEntryIterator0.recursive;
        java.io.File file35 = fileEntryIterator0.current;
        boolean boolean36 = fileEntryIterator0.recursive;
        java.io.File file37 = fileEntryIterator0.root;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator38 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator39 = entryComparator38.reversed();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator40 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator41 = entryComparator40.reversed();
        java.util.Comparator<java.io.File> fileComparator42 = entryComparator38.thenComparing(fileComparator41);
        java.util.Comparator<java.io.File> fileComparator43 = entryComparator38.reversed();
        fileEntryIterator0.entryComparator = entryComparator38;
        java.io.File file45 = fileEntryIterator0.current;
        fileEntryIterator0.recursive = false;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str4 + "' != '" + "exploded archive" + "'", str4.equals("exploded archive"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file20.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file20.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file29.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file29.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file31.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file31.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file32.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file32.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file37.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file37.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file45);
    }

    @Test
    public void test821() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test821");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file1 = null;
        fileEntryIterator0.current = file1;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive3 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest4 = explodedArchive3.manifest;
        explodedArchive3.recursive = false;
        java.util.jar.Manifest manifest7 = explodedArchive3.manifest;
        java.io.File file8 = explodedArchive3.manifestFile;
        java.io.File file9 = null;
        java.io.File file10 = explodedArchive3.getManifestFile(file9);
        java.util.Iterator<java.io.File> fileItor11 = fileEntryIterator0.listFiles(file10);
        java.util.Comparator<java.io.File> fileComparator12 = fileEntryIterator0.entryComparator;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator13 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        boolean boolean14 = fileEntryIterator13.recursive;
        java.io.File file15 = fileEntryIterator13.current;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator16 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file17 = null;
        fileEntryIterator16.current = file17;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive19 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest20 = explodedArchive19.manifest;
        explodedArchive19.recursive = false;
        java.util.jar.Manifest manifest23 = explodedArchive19.manifest;
        java.io.File file24 = explodedArchive19.manifestFile;
        java.io.File file25 = null;
        java.io.File file26 = explodedArchive19.getManifestFile(file25);
        java.util.Iterator<java.io.File> fileItor27 = fileEntryIterator16.listFiles(file26);
        java.io.File file28 = fileEntryIterator16.root;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive29 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.lang.String str30 = explodedArchive29.toString();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive31 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file32 = explodedArchive31.root;
        java.io.File file33 = null;
        explodedArchive31.manifestFile = file33;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive35 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest36 = explodedArchive35.manifest;
        explodedArchive35.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive39 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest40 = explodedArchive39.manifest;
        explodedArchive39.recursive = false;
        java.util.jar.Manifest manifest43 = explodedArchive39.manifest;
        java.io.File file44 = explodedArchive39.manifestFile;
        java.io.File file45 = null;
        java.io.File file46 = explodedArchive39.getManifestFile(file45);
        explodedArchive35.manifestFile = file45;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive48 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest49 = explodedArchive48.manifest;
        explodedArchive48.recursive = false;
        java.util.jar.Manifest manifest52 = explodedArchive48.manifest;
        java.io.File file53 = explodedArchive48.manifestFile;
        java.io.File file54 = null;
        java.io.File file55 = explodedArchive48.getManifestFile(file54);
        explodedArchive35.manifestFile = file55;
        java.io.File file57 = explodedArchive31.getManifestFile(file55);
        java.io.File file58 = explodedArchive29.getManifestFile(file55);
        fileEntryIterator16.root = file55;
        java.util.Iterator<java.io.File> fileItor60 = fileEntryIterator13.listFiles(file55);
        fileEntryIterator0.current = file55;
        // The following exception was thrown during execution in test generation
        try {
            fileEntryIterator0.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: remove");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file26.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file26.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str30 + "' != '" + "exploded archive" + "'", str30.equals("exploded archive"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file46.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file46.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file55.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file55.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file57.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file57.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file58.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file58.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor60);
    }

    @Test
    public void test822() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test822");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file1 = null;
        fileEntryIterator0.current = file1;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive3 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest4 = explodedArchive3.manifest;
        explodedArchive3.recursive = false;
        java.util.jar.Manifest manifest7 = explodedArchive3.manifest;
        java.io.File file8 = explodedArchive3.manifestFile;
        java.io.File file9 = null;
        java.io.File file10 = explodedArchive3.getManifestFile(file9);
        java.util.Iterator<java.io.File> fileItor11 = fileEntryIterator0.listFiles(file10);
        java.util.Comparator<java.io.File> fileComparator12 = fileEntryIterator0.entryComparator;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator13 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        boolean boolean14 = fileEntryIterator13.hasNext();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator15 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator16 = entryComparator15.reversed();
        java.util.Comparator<java.io.File> fileComparator17 = fileComparator16.reversed();
        fileEntryIterator13.entryComparator = fileComparator17;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive19 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file20 = explodedArchive19.root;
        java.io.File file21 = null;
        explodedArchive19.manifestFile = file21;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive23 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest24 = explodedArchive23.manifest;
        explodedArchive23.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive27 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest28 = explodedArchive27.manifest;
        explodedArchive27.recursive = false;
        java.util.jar.Manifest manifest31 = explodedArchive27.manifest;
        java.io.File file32 = explodedArchive27.manifestFile;
        java.io.File file33 = null;
        java.io.File file34 = explodedArchive27.getManifestFile(file33);
        explodedArchive23.manifestFile = file33;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive36 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest37 = explodedArchive36.manifest;
        explodedArchive36.recursive = false;
        java.util.jar.Manifest manifest40 = explodedArchive36.manifest;
        java.io.File file41 = explodedArchive36.manifestFile;
        java.io.File file42 = null;
        java.io.File file43 = explodedArchive36.getManifestFile(file42);
        explodedArchive23.manifestFile = file43;
        java.io.File file45 = explodedArchive19.getManifestFile(file43);
        java.util.Iterator<java.io.File> fileItor46 = fileEntryIterator13.listFiles(file45);
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntry fileEntry47 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntry();
        java.lang.String str48 = fileEntry47.name;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator49 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file50 = null;
        fileEntryIterator49.current = file50;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive52 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.lang.String str53 = explodedArchive52.toString();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive54 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file55 = explodedArchive54.root;
        java.io.File file56 = null;
        explodedArchive54.manifestFile = file56;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive58 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest59 = explodedArchive58.manifest;
        explodedArchive58.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive62 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest63 = explodedArchive62.manifest;
        explodedArchive62.recursive = false;
        java.util.jar.Manifest manifest66 = explodedArchive62.manifest;
        java.io.File file67 = explodedArchive62.manifestFile;
        java.io.File file68 = null;
        java.io.File file69 = explodedArchive62.getManifestFile(file68);
        explodedArchive58.manifestFile = file68;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive71 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest72 = explodedArchive71.manifest;
        explodedArchive71.recursive = false;
        java.util.jar.Manifest manifest75 = explodedArchive71.manifest;
        java.io.File file76 = explodedArchive71.manifestFile;
        java.io.File file77 = null;
        java.io.File file78 = explodedArchive71.getManifestFile(file77);
        explodedArchive58.manifestFile = file78;
        java.io.File file80 = explodedArchive54.getManifestFile(file78);
        java.io.File file81 = explodedArchive52.getManifestFile(file78);
        fileEntryIterator49.root = file78;
        fileEntry47.file = file78;
        java.io.File file84 = fileEntry47.getFile();
        java.io.File file85 = fileEntry47.getFile();
        java.util.Iterator<java.io.File> fileItor86 = fileEntryIterator13.listFiles(file85);
        java.util.Iterator<java.io.File> fileItor87 = fileEntryIterator0.listFiles(file85);
        // The following exception was thrown during execution in test generation
        try {
            org.springframework.boot.loader.archive.ExplodedArchive explodedArchive88 = new org.springframework.boot.loader.archive.ExplodedArchive(file85);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid source folder META-INF/MANIFEST.MF");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file34.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file34.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file43.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file43.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file45.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file45.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str53 + "' != '" + "exploded archive" + "'", str53.equals("exploded archive"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file69.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file69.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest75);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file76);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file78);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file78.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file78.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file80);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file80.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file80.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file81);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file81.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file81.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file84);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file84.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file84.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file85);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file85.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file85.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor86);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor87);
    }

    @Test
    public void test823() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test823");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntry fileEntry0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntry();
        java.lang.String str1 = fileEntry0.name;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator2 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file3 = null;
        fileEntryIterator2.current = file3;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive5 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest6 = explodedArchive5.manifest;
        explodedArchive5.recursive = false;
        java.util.jar.Manifest manifest9 = explodedArchive5.manifest;
        java.io.File file10 = explodedArchive5.manifestFile;
        java.io.File file11 = null;
        java.io.File file12 = explodedArchive5.getManifestFile(file11);
        java.util.Iterator<java.io.File> fileItor13 = fileEntryIterator2.listFiles(file12);
        java.io.File file14 = fileEntryIterator2.current;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator15 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file16 = null;
        fileEntryIterator15.current = file16;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive18 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest19 = explodedArchive18.manifest;
        explodedArchive18.recursive = false;
        java.util.jar.Manifest manifest22 = explodedArchive18.manifest;
        java.io.File file23 = explodedArchive18.manifestFile;
        java.io.File file24 = null;
        java.io.File file25 = explodedArchive18.getManifestFile(file24);
        java.util.Iterator<java.io.File> fileItor26 = fileEntryIterator15.listFiles(file25);
        java.util.ArrayDeque<java.util.Iterator<java.io.File>> fileItorQueue27 = new java.util.ArrayDeque<java.util.Iterator<java.io.File>>();
        boolean boolean28 = fileItorQueue27.add(fileItor26);
        fileEntryIterator2.stack = fileItorQueue27;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive30 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest31 = explodedArchive30.manifest;
        explodedArchive30.recursive = false;
        java.io.File file34 = null;
        explodedArchive30.root = file34;
        java.io.File file36 = explodedArchive30.root;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive37 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest38 = explodedArchive37.manifest;
        explodedArchive37.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive41 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest42 = explodedArchive41.manifest;
        explodedArchive41.recursive = false;
        java.util.jar.Manifest manifest45 = explodedArchive41.manifest;
        java.io.File file46 = explodedArchive41.manifestFile;
        java.io.File file47 = null;
        java.io.File file48 = explodedArchive41.getManifestFile(file47);
        explodedArchive37.manifestFile = file47;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive50 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest51 = explodedArchive50.manifest;
        explodedArchive50.recursive = false;
        java.util.jar.Manifest manifest54 = explodedArchive50.manifest;
        java.io.File file55 = explodedArchive50.manifestFile;
        java.io.File file56 = null;
        java.io.File file57 = explodedArchive50.getManifestFile(file56);
        explodedArchive37.manifestFile = file57;
        java.io.File file59 = explodedArchive30.getManifestFile(file57);
        fileEntryIterator2.root = file57;
        fileEntry0.file = file57;
        boolean boolean62 = fileEntry0.isDirectory();
        boolean boolean63 = fileEntry0.isDirectory();
        java.lang.String str64 = fileEntry0.name;
        java.lang.String str65 = fileEntry0.getName();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file12.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file12.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file25.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file25.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file48.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file48.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file57.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file57.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file59.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file59.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str65);
    }

    @Test
    public void test824() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test824");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest1 = explodedArchive0.manifest;
        java.util.jar.Manifest manifest2 = null;
        explodedArchive0.manifest = manifest2;
        java.io.File file4 = explodedArchive0.root;
        java.lang.String str5 = explodedArchive0.toString();
        boolean boolean6 = explodedArchive0.recursive;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator<org.springframework.boot.loader.archive.Archive.Entry> entryItor7 = explodedArchive0.iterator();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "exploded archive" + "'", str5.equals("exploded archive"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test825() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test825");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest1 = explodedArchive0.manifest;
        explodedArchive0.recursive = false;
        java.io.File file4 = null;
        explodedArchive0.root = file4;
        java.io.File file6 = explodedArchive0.root;
        explodedArchive0.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator9 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file10 = null;
        fileEntryIterator9.current = file10;
        fileEntryIterator9.recursive = true;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator14 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file15 = null;
        fileEntryIterator14.current = file15;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive17 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest18 = explodedArchive17.manifest;
        explodedArchive17.recursive = false;
        java.util.jar.Manifest manifest21 = explodedArchive17.manifest;
        java.io.File file22 = explodedArchive17.manifestFile;
        java.io.File file23 = null;
        java.io.File file24 = explodedArchive17.getManifestFile(file23);
        java.util.Iterator<java.io.File> fileItor25 = fileEntryIterator14.listFiles(file24);
        java.io.File file26 = fileEntryIterator14.root;
        java.io.File file27 = fileEntryIterator14.root;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator28 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file29 = null;
        fileEntryIterator28.current = file29;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive31 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest32 = explodedArchive31.manifest;
        explodedArchive31.recursive = false;
        java.util.jar.Manifest manifest35 = explodedArchive31.manifest;
        java.io.File file36 = explodedArchive31.manifestFile;
        java.io.File file37 = null;
        java.io.File file38 = explodedArchive31.getManifestFile(file37);
        java.util.Iterator<java.io.File> fileItor39 = fileEntryIterator28.listFiles(file38);
        java.util.ArrayDeque<java.util.Iterator<java.io.File>> fileItorQueue40 = new java.util.ArrayDeque<java.util.Iterator<java.io.File>>();
        boolean boolean41 = fileItorQueue40.add(fileItor39);
        fileEntryIterator14.stack = fileItorQueue40;
        java.util.Deque<java.util.Iterator<java.io.File>> fileItorQueue43 = fileEntryIterator14.stack;
        fileEntryIterator9.stack = fileItorQueue43;
        java.util.Comparator<java.io.File> fileComparator45 = fileEntryIterator9.entryComparator;
        java.io.File file46 = fileEntryIterator9.root;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntry fileEntry47 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntry();
        java.io.File file48 = fileEntry47.file;
        java.lang.String str49 = fileEntry47.name;
        java.io.File file50 = fileEntry47.file;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive51 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file52 = explodedArchive51.root;
        java.io.File file53 = explodedArchive51.manifestFile;
        java.util.jar.Manifest manifest54 = null;
        explodedArchive51.manifest = manifest54;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator56 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file57 = null;
        fileEntryIterator56.current = file57;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive59 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.lang.String str60 = explodedArchive59.toString();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive61 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file62 = explodedArchive61.root;
        java.io.File file63 = null;
        explodedArchive61.manifestFile = file63;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive65 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest66 = explodedArchive65.manifest;
        explodedArchive65.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive69 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest70 = explodedArchive69.manifest;
        explodedArchive69.recursive = false;
        java.util.jar.Manifest manifest73 = explodedArchive69.manifest;
        java.io.File file74 = explodedArchive69.manifestFile;
        java.io.File file75 = null;
        java.io.File file76 = explodedArchive69.getManifestFile(file75);
        explodedArchive65.manifestFile = file75;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive78 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest79 = explodedArchive78.manifest;
        explodedArchive78.recursive = false;
        java.util.jar.Manifest manifest82 = explodedArchive78.manifest;
        java.io.File file83 = explodedArchive78.manifestFile;
        java.io.File file84 = null;
        java.io.File file85 = explodedArchive78.getManifestFile(file84);
        explodedArchive65.manifestFile = file85;
        java.io.File file87 = explodedArchive61.getManifestFile(file85);
        java.io.File file88 = explodedArchive59.getManifestFile(file85);
        fileEntryIterator56.root = file85;
        java.io.File file90 = explodedArchive51.getManifestFile(file85);
        fileEntry47.file = file85;
        fileEntryIterator9.current = file85;
        explodedArchive0.manifestFile = file85;
        org.springframework.boot.loader.archive.Archive.EntryFilter entryFilter94 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<org.springframework.boot.loader.archive.Archive> archiveList95 = explodedArchive0.getNestedArchives(entryFilter94);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file24.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file24.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file38.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file38.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItorQueue43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str60 + "' != '" + "exploded archive" + "'", str60.equals("exploded archive"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest73);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file76);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file76.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file76.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest79);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest82);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file83);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file85);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file85.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file85.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file87);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file87.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file87.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file88);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file88.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file88.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file90);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file90.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file90.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
    }

    @Test
    public void test826() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test826");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        boolean boolean1 = fileEntryIterator0.hasNext();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator2 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator3 = entryComparator2.reversed();
        java.util.Comparator<java.io.File> fileComparator4 = fileComparator3.reversed();
        fileEntryIterator0.entryComparator = fileComparator4;
        java.util.Comparator<java.io.File> fileComparator6 = fileEntryIterator0.entryComparator;
        boolean boolean7 = fileEntryIterator0.hasNext();
        java.util.Comparator<java.io.File> fileComparator8 = fileEntryIterator0.entryComparator;
        java.lang.Class<?> wildcardClass9 = fileEntryIterator0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test827() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test827");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntry fileEntry0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntry();
        java.io.File file1 = fileEntry0.getFile();
        java.io.File file2 = fileEntry0.getFile();
        java.lang.String str3 = fileEntry0.name;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator4 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file5 = null;
        fileEntryIterator4.current = file5;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive7 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest8 = explodedArchive7.manifest;
        explodedArchive7.recursive = false;
        java.util.jar.Manifest manifest11 = explodedArchive7.manifest;
        java.io.File file12 = explodedArchive7.manifestFile;
        java.io.File file13 = null;
        java.io.File file14 = explodedArchive7.getManifestFile(file13);
        java.util.Iterator<java.io.File> fileItor15 = fileEntryIterator4.listFiles(file14);
        java.io.File file16 = fileEntryIterator4.current;
        boolean boolean17 = fileEntryIterator4.recursive;
        java.io.File file18 = fileEntryIterator4.poll();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator19 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file20 = null;
        fileEntryIterator19.current = file20;
        fileEntryIterator19.recursive = true;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator24 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator25 = entryComparator24.reversed();
        java.util.Comparator<java.io.File> fileComparator26 = entryComparator24.reversed();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive27 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest28 = explodedArchive27.manifest;
        explodedArchive27.recursive = false;
        java.util.jar.Manifest manifest31 = explodedArchive27.manifest;
        java.io.File file32 = explodedArchive27.manifestFile;
        java.io.File file33 = null;
        java.io.File file34 = explodedArchive27.getManifestFile(file33);
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive35 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest36 = explodedArchive35.manifest;
        explodedArchive35.recursive = false;
        java.io.File file39 = null;
        explodedArchive35.root = file39;
        java.io.File file41 = explodedArchive35.root;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive42 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest43 = explodedArchive42.manifest;
        explodedArchive42.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive46 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest47 = explodedArchive46.manifest;
        explodedArchive46.recursive = false;
        java.util.jar.Manifest manifest50 = explodedArchive46.manifest;
        java.io.File file51 = explodedArchive46.manifestFile;
        java.io.File file52 = null;
        java.io.File file53 = explodedArchive46.getManifestFile(file52);
        explodedArchive42.manifestFile = file52;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive55 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest56 = explodedArchive55.manifest;
        explodedArchive55.recursive = false;
        java.util.jar.Manifest manifest59 = explodedArchive55.manifest;
        java.io.File file60 = explodedArchive55.manifestFile;
        java.io.File file61 = null;
        java.io.File file62 = explodedArchive55.getManifestFile(file61);
        explodedArchive42.manifestFile = file62;
        java.io.File file64 = explodedArchive35.getManifestFile(file62);
        int int65 = entryComparator24.compare(file34, file62);
        java.util.Iterator<java.io.File> fileItor66 = fileEntryIterator19.listFiles(file34);
        fileEntryIterator4.current = file34;
        fileEntry0.file = file34;
        java.lang.String str69 = fileEntry0.name;
        java.io.File file70 = fileEntry0.getFile();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file14.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file14.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file34.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file34.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file53.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file53.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file62.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file62.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file64.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file64.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file70.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file70.toString(), "META-INF/MANIFEST.MF");
    }

    @Test
    public void test828() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test828");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest1 = explodedArchive0.manifest;
        explodedArchive0.recursive = false;
        java.io.File file4 = null;
        explodedArchive0.root = file4;
        java.io.File file6 = explodedArchive0.root;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive7 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest8 = explodedArchive7.manifest;
        explodedArchive7.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive11 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest12 = explodedArchive11.manifest;
        explodedArchive11.recursive = false;
        java.util.jar.Manifest manifest15 = explodedArchive11.manifest;
        java.io.File file16 = explodedArchive11.manifestFile;
        java.io.File file17 = null;
        java.io.File file18 = explodedArchive11.getManifestFile(file17);
        explodedArchive7.manifestFile = file17;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive20 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest21 = explodedArchive20.manifest;
        explodedArchive20.recursive = false;
        java.util.jar.Manifest manifest24 = explodedArchive20.manifest;
        java.io.File file25 = explodedArchive20.manifestFile;
        java.io.File file26 = null;
        java.io.File file27 = explodedArchive20.getManifestFile(file26);
        explodedArchive7.manifestFile = file27;
        java.io.File file29 = explodedArchive0.getManifestFile(file27);
        java.io.File file30 = explodedArchive0.manifestFile;
        java.io.File file31 = explodedArchive0.manifestFile;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file18.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file18.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file27.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file27.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file29.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file29.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file31);
    }

    @Test
    public void test829() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test829");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file1 = explodedArchive0.root;
        java.io.File file2 = explodedArchive0.manifestFile;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntry fileEntry3 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntry();
        java.lang.String str4 = fileEntry3.getName();
        java.lang.String str5 = fileEntry3.getName();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator6 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator7 = entryComparator6.reversed();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive8 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file9 = explodedArchive8.root;
        java.io.File file10 = null;
        explodedArchive8.manifestFile = file10;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive12 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest13 = explodedArchive12.manifest;
        explodedArchive12.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive16 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest17 = explodedArchive16.manifest;
        explodedArchive16.recursive = false;
        java.util.jar.Manifest manifest20 = explodedArchive16.manifest;
        java.io.File file21 = explodedArchive16.manifestFile;
        java.io.File file22 = null;
        java.io.File file23 = explodedArchive16.getManifestFile(file22);
        explodedArchive12.manifestFile = file22;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive25 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest26 = explodedArchive25.manifest;
        explodedArchive25.recursive = false;
        java.util.jar.Manifest manifest29 = explodedArchive25.manifest;
        java.io.File file30 = explodedArchive25.manifestFile;
        java.io.File file31 = null;
        java.io.File file32 = explodedArchive25.getManifestFile(file31);
        explodedArchive12.manifestFile = file32;
        java.io.File file34 = explodedArchive8.getManifestFile(file32);
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive35 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest36 = explodedArchive35.manifest;
        explodedArchive35.recursive = false;
        java.io.File file39 = null;
        explodedArchive35.root = file39;
        java.io.File file41 = explodedArchive35.root;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive42 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest43 = explodedArchive42.manifest;
        explodedArchive42.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive46 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest47 = explodedArchive46.manifest;
        explodedArchive46.recursive = false;
        java.util.jar.Manifest manifest50 = explodedArchive46.manifest;
        java.io.File file51 = explodedArchive46.manifestFile;
        java.io.File file52 = null;
        java.io.File file53 = explodedArchive46.getManifestFile(file52);
        explodedArchive42.manifestFile = file52;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive55 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest56 = explodedArchive55.manifest;
        explodedArchive55.recursive = false;
        java.util.jar.Manifest manifest59 = explodedArchive55.manifest;
        java.io.File file60 = explodedArchive55.manifestFile;
        java.io.File file61 = null;
        java.io.File file62 = explodedArchive55.getManifestFile(file61);
        explodedArchive42.manifestFile = file62;
        java.io.File file64 = explodedArchive35.getManifestFile(file62);
        int int65 = entryComparator6.compare(file34, file62);
        fileEntry3.file = file62;
        java.io.File file67 = fileEntry3.getFile();
        explodedArchive0.root = file67;
        org.springframework.boot.loader.archive.Archive.EntryFilter entryFilter69 = null;
        java.util.List<org.springframework.boot.loader.archive.Archive> archiveList70 = explodedArchive0.getNestedArchives(entryFilter69);
        java.util.jar.Manifest manifest71 = null;
        explodedArchive0.manifest = manifest71;
        java.io.File file73 = explodedArchive0.manifestFile;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file23.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file23.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file32.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file32.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file34.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file34.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file53.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file53.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file62.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file62.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file64.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file64.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 21 + "'", int65 == 21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file67.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file67.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(archiveList70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file73);
    }

    @Test
    public void test830() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test830");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        boolean boolean1 = fileEntryIterator0.recursive;
        java.io.File file2 = fileEntryIterator0.current;
        boolean boolean3 = fileEntryIterator0.hasNext();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator4 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file5 = null;
        fileEntryIterator4.current = file5;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive7 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest8 = explodedArchive7.manifest;
        explodedArchive7.recursive = false;
        java.util.jar.Manifest manifest11 = explodedArchive7.manifest;
        java.io.File file12 = explodedArchive7.manifestFile;
        java.io.File file13 = null;
        java.io.File file14 = explodedArchive7.getManifestFile(file13);
        java.util.Iterator<java.io.File> fileItor15 = fileEntryIterator4.listFiles(file14);
        java.io.File file16 = fileEntryIterator4.root;
        java.io.File file17 = fileEntryIterator4.root;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator18 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file19 = null;
        fileEntryIterator18.current = file19;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive21 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest22 = explodedArchive21.manifest;
        explodedArchive21.recursive = false;
        java.util.jar.Manifest manifest25 = explodedArchive21.manifest;
        java.io.File file26 = explodedArchive21.manifestFile;
        java.io.File file27 = null;
        java.io.File file28 = explodedArchive21.getManifestFile(file27);
        java.util.Iterator<java.io.File> fileItor29 = fileEntryIterator18.listFiles(file28);
        java.util.ArrayDeque<java.util.Iterator<java.io.File>> fileItorQueue30 = new java.util.ArrayDeque<java.util.Iterator<java.io.File>>();
        boolean boolean31 = fileItorQueue30.add(fileItor29);
        fileEntryIterator4.stack = fileItorQueue30;
        fileEntryIterator0.stack = fileItorQueue30;
        java.io.File file34 = fileEntryIterator0.poll();
        java.util.Deque<java.util.Iterator<java.io.File>> fileItorQueue35 = fileEntryIterator0.stack;
        // The following exception was thrown during execution in test generation
        try {
            org.springframework.boot.loader.archive.Archive.Entry entry36 = fileEntryIterator0.next();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file14.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file14.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file28.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file28.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItorQueue35);
    }

    @Test
    public void test831() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test831");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest1 = explodedArchive0.manifest;
        explodedArchive0.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive4 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest5 = explodedArchive4.manifest;
        explodedArchive4.recursive = false;
        java.util.jar.Manifest manifest8 = explodedArchive4.manifest;
        java.io.File file9 = explodedArchive4.manifestFile;
        java.io.File file10 = null;
        java.io.File file11 = explodedArchive4.getManifestFile(file10);
        explodedArchive0.manifestFile = file10;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive13 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest14 = explodedArchive13.manifest;
        explodedArchive13.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive17 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest18 = explodedArchive17.manifest;
        explodedArchive17.recursive = false;
        java.util.jar.Manifest manifest21 = explodedArchive17.manifest;
        java.io.File file22 = explodedArchive17.manifestFile;
        java.io.File file23 = null;
        java.io.File file24 = explodedArchive17.getManifestFile(file23);
        explodedArchive13.manifestFile = file23;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive26 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest27 = explodedArchive26.manifest;
        explodedArchive26.recursive = false;
        java.util.jar.Manifest manifest30 = explodedArchive26.manifest;
        java.io.File file31 = explodedArchive26.manifestFile;
        java.io.File file32 = null;
        java.io.File file33 = explodedArchive26.getManifestFile(file32);
        explodedArchive13.manifestFile = file33;
        explodedArchive0.root = file33;
        java.net.URL uRL36 = explodedArchive0.getUrl();
        java.util.jar.Manifest manifest37 = null;
        explodedArchive0.manifest = manifest37;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntry fileEntry39 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntry();
        java.lang.String str40 = fileEntry39.name;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator41 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file42 = null;
        fileEntryIterator41.current = file42;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive44 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.lang.String str45 = explodedArchive44.toString();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive46 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file47 = explodedArchive46.root;
        java.io.File file48 = null;
        explodedArchive46.manifestFile = file48;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive50 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest51 = explodedArchive50.manifest;
        explodedArchive50.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive54 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest55 = explodedArchive54.manifest;
        explodedArchive54.recursive = false;
        java.util.jar.Manifest manifest58 = explodedArchive54.manifest;
        java.io.File file59 = explodedArchive54.manifestFile;
        java.io.File file60 = null;
        java.io.File file61 = explodedArchive54.getManifestFile(file60);
        explodedArchive50.manifestFile = file60;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive63 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest64 = explodedArchive63.manifest;
        explodedArchive63.recursive = false;
        java.util.jar.Manifest manifest67 = explodedArchive63.manifest;
        java.io.File file68 = explodedArchive63.manifestFile;
        java.io.File file69 = null;
        java.io.File file70 = explodedArchive63.getManifestFile(file69);
        explodedArchive50.manifestFile = file70;
        java.io.File file72 = explodedArchive46.getManifestFile(file70);
        java.io.File file73 = explodedArchive44.getManifestFile(file70);
        fileEntryIterator41.root = file70;
        fileEntry39.file = file70;
        java.io.File file76 = fileEntry39.file;
        boolean boolean77 = fileEntry39.isDirectory();
        fileEntry39.name = "hi!";
        // The following exception was thrown during execution in test generation
        try {
            org.springframework.boot.loader.archive.Archive archive80 = explodedArchive0.getNestedArchive((org.springframework.boot.loader.archive.Archive.Entry) fileEntry39);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: File must exist");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file11.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file11.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file24.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file24.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file33.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file33.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(uRL36);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(uRL36.toString(), "file:/server/study-execution/new-nimrod/nimrod-hunoroutput-test-dest/spring-boot/af20dc6cc45c032573413c401f9f73aa75371744/randoop_1/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str45 + "' != '" + "exploded archive" + "'", str45.equals("exploded archive"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file61.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file61.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file70.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file70.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file72.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file72.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file73);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file73.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file73.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file76);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file76.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file76.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
    }

    @Test
    public void test832() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test832");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        boolean boolean1 = explodedArchive0.recursive;
        java.lang.String str2 = explodedArchive0.toString();
        boolean boolean3 = explodedArchive0.recursive;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntry fileEntry4 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntry();
        java.lang.String str5 = fileEntry4.name;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator6 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file7 = null;
        fileEntryIterator6.current = file7;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive9 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest10 = explodedArchive9.manifest;
        explodedArchive9.recursive = false;
        java.util.jar.Manifest manifest13 = explodedArchive9.manifest;
        java.io.File file14 = explodedArchive9.manifestFile;
        java.io.File file15 = null;
        java.io.File file16 = explodedArchive9.getManifestFile(file15);
        java.util.Iterator<java.io.File> fileItor17 = fileEntryIterator6.listFiles(file16);
        java.io.File file18 = fileEntryIterator6.current;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator19 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file20 = null;
        fileEntryIterator19.current = file20;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive22 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest23 = explodedArchive22.manifest;
        explodedArchive22.recursive = false;
        java.util.jar.Manifest manifest26 = explodedArchive22.manifest;
        java.io.File file27 = explodedArchive22.manifestFile;
        java.io.File file28 = null;
        java.io.File file29 = explodedArchive22.getManifestFile(file28);
        java.util.Iterator<java.io.File> fileItor30 = fileEntryIterator19.listFiles(file29);
        java.util.ArrayDeque<java.util.Iterator<java.io.File>> fileItorQueue31 = new java.util.ArrayDeque<java.util.Iterator<java.io.File>>();
        boolean boolean32 = fileItorQueue31.add(fileItor30);
        fileEntryIterator6.stack = fileItorQueue31;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive34 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest35 = explodedArchive34.manifest;
        explodedArchive34.recursive = false;
        java.io.File file38 = null;
        explodedArchive34.root = file38;
        java.io.File file40 = explodedArchive34.root;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive41 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest42 = explodedArchive41.manifest;
        explodedArchive41.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive45 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest46 = explodedArchive45.manifest;
        explodedArchive45.recursive = false;
        java.util.jar.Manifest manifest49 = explodedArchive45.manifest;
        java.io.File file50 = explodedArchive45.manifestFile;
        java.io.File file51 = null;
        java.io.File file52 = explodedArchive45.getManifestFile(file51);
        explodedArchive41.manifestFile = file51;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive54 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest55 = explodedArchive54.manifest;
        explodedArchive54.recursive = false;
        java.util.jar.Manifest manifest58 = explodedArchive54.manifest;
        java.io.File file59 = explodedArchive54.manifestFile;
        java.io.File file60 = null;
        java.io.File file61 = explodedArchive54.getManifestFile(file60);
        explodedArchive41.manifestFile = file61;
        java.io.File file63 = explodedArchive34.getManifestFile(file61);
        fileEntryIterator6.root = file61;
        fileEntry4.file = file61;
        boolean boolean66 = fileEntry4.isDirectory();
        boolean boolean67 = fileEntry4.isDirectory();
        java.io.File file68 = fileEntry4.file;
        java.io.File file69 = fileEntry4.getFile();
        explodedArchive0.root = file69;
        java.lang.Class<?> wildcardClass71 = explodedArchive0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str2 + "' != '" + "exploded archive" + "'", str2.equals("exploded archive"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file16.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file16.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file29.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file29.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file52.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file52.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file61.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file61.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file63.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file63.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file68.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file68.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file69.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file69.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass71);
    }

    @Test
    public void test833() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test833");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        boolean boolean1 = explodedArchive0.recursive;
        java.lang.String str2 = explodedArchive0.toString();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator3 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file4 = null;
        fileEntryIterator3.current = file4;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive6 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest7 = explodedArchive6.manifest;
        explodedArchive6.recursive = false;
        java.util.jar.Manifest manifest10 = explodedArchive6.manifest;
        java.io.File file11 = explodedArchive6.manifestFile;
        java.io.File file12 = null;
        java.io.File file13 = explodedArchive6.getManifestFile(file12);
        java.util.Iterator<java.io.File> fileItor14 = fileEntryIterator3.listFiles(file13);
        java.io.File file15 = fileEntryIterator3.current;
        boolean boolean16 = fileEntryIterator3.recursive;
        java.io.File file17 = fileEntryIterator3.poll();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator18 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file19 = null;
        fileEntryIterator18.current = file19;
        fileEntryIterator18.recursive = true;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator23 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator24 = entryComparator23.reversed();
        java.util.Comparator<java.io.File> fileComparator25 = entryComparator23.reversed();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive26 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest27 = explodedArchive26.manifest;
        explodedArchive26.recursive = false;
        java.util.jar.Manifest manifest30 = explodedArchive26.manifest;
        java.io.File file31 = explodedArchive26.manifestFile;
        java.io.File file32 = null;
        java.io.File file33 = explodedArchive26.getManifestFile(file32);
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive34 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest35 = explodedArchive34.manifest;
        explodedArchive34.recursive = false;
        java.io.File file38 = null;
        explodedArchive34.root = file38;
        java.io.File file40 = explodedArchive34.root;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive41 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest42 = explodedArchive41.manifest;
        explodedArchive41.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive45 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest46 = explodedArchive45.manifest;
        explodedArchive45.recursive = false;
        java.util.jar.Manifest manifest49 = explodedArchive45.manifest;
        java.io.File file50 = explodedArchive45.manifestFile;
        java.io.File file51 = null;
        java.io.File file52 = explodedArchive45.getManifestFile(file51);
        explodedArchive41.manifestFile = file51;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive54 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest55 = explodedArchive54.manifest;
        explodedArchive54.recursive = false;
        java.util.jar.Manifest manifest58 = explodedArchive54.manifest;
        java.io.File file59 = explodedArchive54.manifestFile;
        java.io.File file60 = null;
        java.io.File file61 = explodedArchive54.getManifestFile(file60);
        explodedArchive41.manifestFile = file61;
        java.io.File file63 = explodedArchive34.getManifestFile(file61);
        int int64 = entryComparator23.compare(file33, file61);
        java.util.Iterator<java.io.File> fileItor65 = fileEntryIterator18.listFiles(file33);
        fileEntryIterator3.current = file33;
        explodedArchive0.root = file33;
        java.util.jar.Manifest manifest68 = explodedArchive0.manifest;
        java.io.File file69 = explodedArchive0.manifestFile;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str2 + "' != '" + "exploded archive" + "'", str2.equals("exploded archive"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file13.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file13.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file33.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file33.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file52.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file52.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file61.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file61.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file63.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file63.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file69);
    }

    @Test
    public void test834() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test834");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file1 = null;
        fileEntryIterator0.current = file1;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive3 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest4 = explodedArchive3.manifest;
        explodedArchive3.recursive = false;
        java.util.jar.Manifest manifest7 = explodedArchive3.manifest;
        java.io.File file8 = explodedArchive3.manifestFile;
        java.io.File file9 = null;
        java.io.File file10 = explodedArchive3.getManifestFile(file9);
        java.util.Iterator<java.io.File> fileItor11 = fileEntryIterator0.listFiles(file10);
        java.io.File file12 = fileEntryIterator0.root;
        java.io.File file13 = fileEntryIterator0.poll();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive14 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.lang.String str15 = explodedArchive14.toString();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive16 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file17 = explodedArchive16.root;
        java.io.File file18 = null;
        explodedArchive16.manifestFile = file18;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive20 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest21 = explodedArchive20.manifest;
        explodedArchive20.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive24 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest25 = explodedArchive24.manifest;
        explodedArchive24.recursive = false;
        java.util.jar.Manifest manifest28 = explodedArchive24.manifest;
        java.io.File file29 = explodedArchive24.manifestFile;
        java.io.File file30 = null;
        java.io.File file31 = explodedArchive24.getManifestFile(file30);
        explodedArchive20.manifestFile = file30;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive33 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest34 = explodedArchive33.manifest;
        explodedArchive33.recursive = false;
        java.util.jar.Manifest manifest37 = explodedArchive33.manifest;
        java.io.File file38 = explodedArchive33.manifestFile;
        java.io.File file39 = null;
        java.io.File file40 = explodedArchive33.getManifestFile(file39);
        explodedArchive20.manifestFile = file40;
        java.io.File file42 = explodedArchive16.getManifestFile(file40);
        java.io.File file43 = explodedArchive14.getManifestFile(file40);
        java.io.File file44 = null;
        java.io.File file45 = explodedArchive14.getManifestFile(file44);
        fileEntryIterator0.current = file44;
        boolean boolean47 = fileEntryIterator0.hasNext();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str15 + "' != '" + "exploded archive" + "'", str15.equals("exploded archive"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file31.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file31.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file40.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file40.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file42.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file42.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file43.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file43.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file45.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file45.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
    }

    @Test
    public void test835() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test835");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntry fileEntry0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntry();
        java.io.File file1 = fileEntry0.file;
        java.lang.String str2 = fileEntry0.name;
        java.io.File file3 = fileEntry0.file;
        java.io.File file4 = fileEntry0.file;
        java.lang.String str5 = fileEntry0.name;
        fileEntry0.name = "exploded archive";
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive8 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file9 = explodedArchive8.root;
        java.io.File file10 = explodedArchive8.manifestFile;
        java.util.jar.Manifest manifest11 = null;
        explodedArchive8.manifest = manifest11;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator13 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file14 = null;
        fileEntryIterator13.current = file14;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive16 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.lang.String str17 = explodedArchive16.toString();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive18 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file19 = explodedArchive18.root;
        java.io.File file20 = null;
        explodedArchive18.manifestFile = file20;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive22 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest23 = explodedArchive22.manifest;
        explodedArchive22.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive26 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest27 = explodedArchive26.manifest;
        explodedArchive26.recursive = false;
        java.util.jar.Manifest manifest30 = explodedArchive26.manifest;
        java.io.File file31 = explodedArchive26.manifestFile;
        java.io.File file32 = null;
        java.io.File file33 = explodedArchive26.getManifestFile(file32);
        explodedArchive22.manifestFile = file32;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive35 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest36 = explodedArchive35.manifest;
        explodedArchive35.recursive = false;
        java.util.jar.Manifest manifest39 = explodedArchive35.manifest;
        java.io.File file40 = explodedArchive35.manifestFile;
        java.io.File file41 = null;
        java.io.File file42 = explodedArchive35.getManifestFile(file41);
        explodedArchive22.manifestFile = file42;
        java.io.File file44 = explodedArchive18.getManifestFile(file42);
        java.io.File file45 = explodedArchive16.getManifestFile(file42);
        fileEntryIterator13.root = file42;
        java.io.File file47 = explodedArchive8.getManifestFile(file42);
        fileEntry0.file = file42;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str17 + "' != '" + "exploded archive" + "'", str17.equals("exploded archive"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file33.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file33.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file42.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file42.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file44.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file44.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file45.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file45.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file47.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file47.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
    }

    @Test
    public void test836() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test836");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file1 = null;
        fileEntryIterator0.current = file1;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive3 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest4 = explodedArchive3.manifest;
        explodedArchive3.recursive = false;
        java.util.jar.Manifest manifest7 = explodedArchive3.manifest;
        java.io.File file8 = explodedArchive3.manifestFile;
        java.io.File file9 = null;
        java.io.File file10 = explodedArchive3.getManifestFile(file9);
        java.util.Iterator<java.io.File> fileItor11 = fileEntryIterator0.listFiles(file10);
        java.util.Comparator<java.io.File> fileComparator12 = fileEntryIterator0.entryComparator;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator13 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file14 = null;
        fileEntryIterator13.current = file14;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive16 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest17 = explodedArchive16.manifest;
        explodedArchive16.recursive = false;
        java.util.jar.Manifest manifest20 = explodedArchive16.manifest;
        java.io.File file21 = explodedArchive16.manifestFile;
        java.io.File file22 = null;
        java.io.File file23 = explodedArchive16.getManifestFile(file22);
        java.util.Iterator<java.io.File> fileItor24 = fileEntryIterator13.listFiles(file23);
        java.io.File file25 = fileEntryIterator13.current;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator26 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file27 = null;
        fileEntryIterator26.current = file27;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive29 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest30 = explodedArchive29.manifest;
        explodedArchive29.recursive = false;
        java.util.jar.Manifest manifest33 = explodedArchive29.manifest;
        java.io.File file34 = explodedArchive29.manifestFile;
        java.io.File file35 = null;
        java.io.File file36 = explodedArchive29.getManifestFile(file35);
        java.util.Iterator<java.io.File> fileItor37 = fileEntryIterator26.listFiles(file36);
        java.io.File file38 = fileEntryIterator26.current;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator39 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file40 = null;
        fileEntryIterator39.current = file40;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive42 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest43 = explodedArchive42.manifest;
        explodedArchive42.recursive = false;
        java.util.jar.Manifest manifest46 = explodedArchive42.manifest;
        java.io.File file47 = explodedArchive42.manifestFile;
        java.io.File file48 = null;
        java.io.File file49 = explodedArchive42.getManifestFile(file48);
        java.util.Iterator<java.io.File> fileItor50 = fileEntryIterator39.listFiles(file49);
        java.util.ArrayDeque<java.util.Iterator<java.io.File>> fileItorQueue51 = new java.util.ArrayDeque<java.util.Iterator<java.io.File>>();
        boolean boolean52 = fileItorQueue51.add(fileItor50);
        fileEntryIterator26.stack = fileItorQueue51;
        fileEntryIterator13.stack = fileItorQueue51;
        fileEntryIterator0.stack = fileItorQueue51;
        boolean boolean56 = fileEntryIterator0.hasNext();
        java.io.File file57 = fileEntryIterator0.poll();
        java.util.Deque<java.util.Iterator<java.io.File>> fileItorQueue58 = fileEntryIterator0.stack;
        boolean boolean59 = fileEntryIterator0.hasNext();
        java.io.File file60 = fileEntryIterator0.poll();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file23.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file23.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file36.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file36.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file49.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file49.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItorQueue58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file60);
    }

    @Test
    public void test837() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test837");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file1 = null;
        fileEntryIterator0.current = file1;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive3 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest4 = explodedArchive3.manifest;
        explodedArchive3.recursive = false;
        java.util.jar.Manifest manifest7 = explodedArchive3.manifest;
        java.io.File file8 = explodedArchive3.manifestFile;
        java.io.File file9 = null;
        java.io.File file10 = explodedArchive3.getManifestFile(file9);
        java.util.Iterator<java.io.File> fileItor11 = fileEntryIterator0.listFiles(file10);
        java.io.File file12 = fileEntryIterator0.root;
        java.io.File file13 = fileEntryIterator0.root;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator14 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file15 = null;
        fileEntryIterator14.current = file15;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive17 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest18 = explodedArchive17.manifest;
        explodedArchive17.recursive = false;
        java.util.jar.Manifest manifest21 = explodedArchive17.manifest;
        java.io.File file22 = explodedArchive17.manifestFile;
        java.io.File file23 = null;
        java.io.File file24 = explodedArchive17.getManifestFile(file23);
        java.util.Iterator<java.io.File> fileItor25 = fileEntryIterator14.listFiles(file24);
        java.util.ArrayDeque<java.util.Iterator<java.io.File>> fileItorQueue26 = new java.util.ArrayDeque<java.util.Iterator<java.io.File>>();
        boolean boolean27 = fileItorQueue26.add(fileItor25);
        fileEntryIterator0.stack = fileItorQueue26;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator29 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file30 = null;
        fileEntryIterator29.current = file30;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive32 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest33 = explodedArchive32.manifest;
        explodedArchive32.recursive = false;
        java.util.jar.Manifest manifest36 = explodedArchive32.manifest;
        java.io.File file37 = explodedArchive32.manifestFile;
        java.io.File file38 = null;
        java.io.File file39 = explodedArchive32.getManifestFile(file38);
        java.util.Iterator<java.io.File> fileItor40 = fileEntryIterator29.listFiles(file39);
        java.io.File file41 = fileEntryIterator29.root;
        java.io.File file42 = fileEntryIterator29.root;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator43 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file44 = null;
        fileEntryIterator43.current = file44;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive46 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest47 = explodedArchive46.manifest;
        explodedArchive46.recursive = false;
        java.util.jar.Manifest manifest50 = explodedArchive46.manifest;
        java.io.File file51 = explodedArchive46.manifestFile;
        java.io.File file52 = null;
        java.io.File file53 = explodedArchive46.getManifestFile(file52);
        java.util.Iterator<java.io.File> fileItor54 = fileEntryIterator43.listFiles(file53);
        java.util.ArrayDeque<java.util.Iterator<java.io.File>> fileItorQueue55 = new java.util.ArrayDeque<java.util.Iterator<java.io.File>>();
        boolean boolean56 = fileItorQueue55.add(fileItor54);
        fileEntryIterator29.stack = fileItorQueue55;
        fileEntryIterator0.stack = fileItorQueue55;
        boolean boolean59 = fileEntryIterator0.recursive;
        java.util.Deque<java.util.Iterator<java.io.File>> fileItorQueue60 = fileEntryIterator0.stack;
        java.io.File file61 = fileEntryIterator0.poll();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file24.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file24.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file39.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file39.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file53.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file53.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItorQueue60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file61);
    }

    @Test
    public void test838() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test838");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntry fileEntry0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntry();
        java.lang.String str1 = fileEntry0.name;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator2 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file3 = null;
        fileEntryIterator2.current = file3;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive5 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.lang.String str6 = explodedArchive5.toString();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive7 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file8 = explodedArchive7.root;
        java.io.File file9 = null;
        explodedArchive7.manifestFile = file9;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive11 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest12 = explodedArchive11.manifest;
        explodedArchive11.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive15 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest16 = explodedArchive15.manifest;
        explodedArchive15.recursive = false;
        java.util.jar.Manifest manifest19 = explodedArchive15.manifest;
        java.io.File file20 = explodedArchive15.manifestFile;
        java.io.File file21 = null;
        java.io.File file22 = explodedArchive15.getManifestFile(file21);
        explodedArchive11.manifestFile = file21;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive24 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest25 = explodedArchive24.manifest;
        explodedArchive24.recursive = false;
        java.util.jar.Manifest manifest28 = explodedArchive24.manifest;
        java.io.File file29 = explodedArchive24.manifestFile;
        java.io.File file30 = null;
        java.io.File file31 = explodedArchive24.getManifestFile(file30);
        explodedArchive11.manifestFile = file31;
        java.io.File file33 = explodedArchive7.getManifestFile(file31);
        java.io.File file34 = explodedArchive5.getManifestFile(file31);
        fileEntryIterator2.root = file31;
        fileEntry0.file = file31;
        java.io.File file37 = fileEntry0.getFile();
        java.io.File file38 = fileEntry0.getFile();
        java.io.File file39 = fileEntry0.getFile();
        java.lang.String str40 = fileEntry0.name;
        fileEntry0.name = "file:/server/study-execution/new-nimrod/nimrod-hunoroutput-test-dest/spring-boot/af20dc6cc45c032573413c401f9f73aa75371744/randoop_1/META-INF/MANIFEST.MF/META-INF/MANIFEST.MF";
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "exploded archive" + "'", str6.equals("exploded archive"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file22.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file22.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file31.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file31.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file33.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file33.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file34.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file34.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file37.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file37.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file38.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file38.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file39.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file39.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str40);
    }

    @Test
    public void test839() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test839");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator1 = entryComparator0.reversed();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator2 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator3 = entryComparator2.reversed();
        java.util.Comparator<java.io.File> fileComparator4 = entryComparator0.thenComparing(fileComparator3);
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator5 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        boolean boolean6 = fileEntryIterator5.hasNext();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator7 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator8 = entryComparator7.reversed();
        java.util.Comparator<java.io.File> fileComparator9 = fileComparator8.reversed();
        fileEntryIterator5.entryComparator = fileComparator9;
        java.util.Comparator<java.io.File> fileComparator11 = entryComparator0.thenComparing(fileComparator9);
        java.util.Comparator<java.io.File> fileComparator12 = entryComparator0.reversed();
        java.lang.Class<?> wildcardClass13 = entryComparator0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test840() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test840");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        boolean boolean1 = fileEntryIterator0.recursive;
        java.io.File file2 = fileEntryIterator0.current;
        boolean boolean3 = fileEntryIterator0.hasNext();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator4 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file5 = null;
        fileEntryIterator4.current = file5;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive7 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest8 = explodedArchive7.manifest;
        explodedArchive7.recursive = false;
        java.util.jar.Manifest manifest11 = explodedArchive7.manifest;
        java.io.File file12 = explodedArchive7.manifestFile;
        java.io.File file13 = null;
        java.io.File file14 = explodedArchive7.getManifestFile(file13);
        java.util.Iterator<java.io.File> fileItor15 = fileEntryIterator4.listFiles(file14);
        java.io.File file16 = fileEntryIterator4.root;
        java.io.File file17 = fileEntryIterator4.root;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator18 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file19 = null;
        fileEntryIterator18.current = file19;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive21 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest22 = explodedArchive21.manifest;
        explodedArchive21.recursive = false;
        java.util.jar.Manifest manifest25 = explodedArchive21.manifest;
        java.io.File file26 = explodedArchive21.manifestFile;
        java.io.File file27 = null;
        java.io.File file28 = explodedArchive21.getManifestFile(file27);
        java.util.Iterator<java.io.File> fileItor29 = fileEntryIterator18.listFiles(file28);
        java.util.ArrayDeque<java.util.Iterator<java.io.File>> fileItorQueue30 = new java.util.ArrayDeque<java.util.Iterator<java.io.File>>();
        boolean boolean31 = fileItorQueue30.add(fileItor29);
        fileEntryIterator4.stack = fileItorQueue30;
        fileEntryIterator0.stack = fileItorQueue30;
        boolean boolean34 = fileEntryIterator0.recursive;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator35 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        boolean boolean36 = fileEntryIterator35.hasNext();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator37 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator38 = entryComparator37.reversed();
        java.util.Comparator<java.io.File> fileComparator39 = fileComparator38.reversed();
        fileEntryIterator35.entryComparator = fileComparator39;
        java.util.Comparator<java.io.File> fileComparator41 = fileEntryIterator35.entryComparator;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator42 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator43 = entryComparator42.reversed();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator44 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator45 = entryComparator44.reversed();
        java.util.Comparator<java.io.File> fileComparator46 = entryComparator42.thenComparing(fileComparator45);
        java.util.Comparator<java.io.File> fileComparator47 = fileComparator41.thenComparing(fileComparator45);
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator48 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator49 = entryComparator48.reversed();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator50 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator51 = entryComparator50.reversed();
        java.util.Comparator<java.io.File> fileComparator52 = entryComparator48.thenComparing(fileComparator51);
        java.util.Comparator<java.io.File> fileComparator53 = fileComparator45.thenComparing(fileComparator51);
        fileEntryIterator0.entryComparator = fileComparator45;
        java.lang.Class<?> wildcardClass55 = fileEntryIterator0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file14.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file14.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file28.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file28.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass55);
    }

    @Test
    public void test841() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test841");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file1 = null;
        fileEntryIterator0.current = file1;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive3 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.lang.String str4 = explodedArchive3.toString();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive5 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file6 = explodedArchive5.root;
        java.io.File file7 = null;
        explodedArchive5.manifestFile = file7;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive9 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest10 = explodedArchive9.manifest;
        explodedArchive9.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive13 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest14 = explodedArchive13.manifest;
        explodedArchive13.recursive = false;
        java.util.jar.Manifest manifest17 = explodedArchive13.manifest;
        java.io.File file18 = explodedArchive13.manifestFile;
        java.io.File file19 = null;
        java.io.File file20 = explodedArchive13.getManifestFile(file19);
        explodedArchive9.manifestFile = file19;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive22 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest23 = explodedArchive22.manifest;
        explodedArchive22.recursive = false;
        java.util.jar.Manifest manifest26 = explodedArchive22.manifest;
        java.io.File file27 = explodedArchive22.manifestFile;
        java.io.File file28 = null;
        java.io.File file29 = explodedArchive22.getManifestFile(file28);
        explodedArchive9.manifestFile = file29;
        java.io.File file31 = explodedArchive5.getManifestFile(file29);
        java.io.File file32 = explodedArchive3.getManifestFile(file29);
        fileEntryIterator0.root = file29;
        boolean boolean34 = fileEntryIterator0.recursive;
        fileEntryIterator0.recursive = true;
        java.io.File file37 = fileEntryIterator0.poll();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str4 + "' != '" + "exploded archive" + "'", str4.equals("exploded archive"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file20.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file20.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file29.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file29.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file31.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file31.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file32.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file32.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file37);
    }

    @Test
    public void test842() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test842");
        java.util.Set<java.lang.String> strSet0 = org.springframework.boot.loader.archive.ExplodedArchive.SKIPPED_NAMES;
        org.springframework.boot.loader.archive.ExplodedArchive.SKIPPED_NAMES = strSet0;
        org.springframework.boot.loader.archive.ExplodedArchive.SKIPPED_NAMES = strSet0;
        org.springframework.boot.loader.archive.ExplodedArchive.SKIPPED_NAMES = strSet0;
        org.springframework.boot.loader.archive.ExplodedArchive.SKIPPED_NAMES = strSet0;
        org.springframework.boot.loader.archive.ExplodedArchive.SKIPPED_NAMES = strSet0;
        org.springframework.boot.loader.archive.ExplodedArchive.SKIPPED_NAMES = strSet0;
        org.springframework.boot.loader.archive.ExplodedArchive.SKIPPED_NAMES = strSet0;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strSet0);
    }

    @Test
    public void test843() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test843");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file1 = null;
        fileEntryIterator0.current = file1;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive3 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.lang.String str4 = explodedArchive3.toString();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive5 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file6 = explodedArchive5.root;
        java.io.File file7 = null;
        explodedArchive5.manifestFile = file7;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive9 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest10 = explodedArchive9.manifest;
        explodedArchive9.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive13 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest14 = explodedArchive13.manifest;
        explodedArchive13.recursive = false;
        java.util.jar.Manifest manifest17 = explodedArchive13.manifest;
        java.io.File file18 = explodedArchive13.manifestFile;
        java.io.File file19 = null;
        java.io.File file20 = explodedArchive13.getManifestFile(file19);
        explodedArchive9.manifestFile = file19;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive22 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest23 = explodedArchive22.manifest;
        explodedArchive22.recursive = false;
        java.util.jar.Manifest manifest26 = explodedArchive22.manifest;
        java.io.File file27 = explodedArchive22.manifestFile;
        java.io.File file28 = null;
        java.io.File file29 = explodedArchive22.getManifestFile(file28);
        explodedArchive9.manifestFile = file29;
        java.io.File file31 = explodedArchive5.getManifestFile(file29);
        java.io.File file32 = explodedArchive3.getManifestFile(file29);
        fileEntryIterator0.root = file29;
        boolean boolean34 = fileEntryIterator0.recursive;
        java.io.File file35 = fileEntryIterator0.current;
        boolean boolean36 = fileEntryIterator0.recursive;
        java.io.File file37 = fileEntryIterator0.root;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator38 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator39 = entryComparator38.reversed();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator40 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator41 = entryComparator40.reversed();
        java.util.Comparator<java.io.File> fileComparator42 = entryComparator38.thenComparing(fileComparator41);
        java.util.Comparator<java.io.File> fileComparator43 = entryComparator38.reversed();
        fileEntryIterator0.entryComparator = entryComparator38;
        java.io.File file45 = fileEntryIterator0.current;
        java.io.File file46 = null;
        fileEntryIterator0.current = file46;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str4 + "' != '" + "exploded archive" + "'", str4.equals("exploded archive"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file20.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file20.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file29.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file29.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file31.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file31.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file32.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file32.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file37.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file37.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file45);
    }

    @Test
    public void test844() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test844");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest1 = explodedArchive0.manifest;
        explodedArchive0.recursive = false;
        java.io.File file4 = null;
        explodedArchive0.root = file4;
        java.io.File file6 = explodedArchive0.manifestFile;
        java.lang.String str7 = explodedArchive0.toString();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str7 + "' != '" + "exploded archive" + "'", str7.equals("exploded archive"));
    }

    @Test
    public void test845() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test845");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file1 = explodedArchive0.root;
        java.io.File file2 = null;
        explodedArchive0.manifestFile = file2;
        java.io.File file4 = explodedArchive0.root;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Spliterator<org.springframework.boot.loader.archive.Archive.Entry> entrySpliterator5 = explodedArchive0.spliterator();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file4);
    }

    @Test
    public void test846() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test846");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntry fileEntry0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntry();
        java.io.File file1 = fileEntry0.file;
        java.lang.String str2 = fileEntry0.name;
        java.io.File file3 = fileEntry0.file;
        java.lang.String str4 = fileEntry0.getName();
        java.lang.String str5 = fileEntry0.name;
        java.lang.String str6 = fileEntry0.getName();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str6);
    }

    @Test
    public void test847() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test847");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file1 = explodedArchive0.root;
        java.io.File file2 = explodedArchive0.manifestFile;
        java.util.jar.Manifest manifest3 = null;
        explodedArchive0.manifest = manifest3;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator5 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file6 = null;
        fileEntryIterator5.current = file6;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive8 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.lang.String str9 = explodedArchive8.toString();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive10 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file11 = explodedArchive10.root;
        java.io.File file12 = null;
        explodedArchive10.manifestFile = file12;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive14 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest15 = explodedArchive14.manifest;
        explodedArchive14.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive18 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest19 = explodedArchive18.manifest;
        explodedArchive18.recursive = false;
        java.util.jar.Manifest manifest22 = explodedArchive18.manifest;
        java.io.File file23 = explodedArchive18.manifestFile;
        java.io.File file24 = null;
        java.io.File file25 = explodedArchive18.getManifestFile(file24);
        explodedArchive14.manifestFile = file24;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive27 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest28 = explodedArchive27.manifest;
        explodedArchive27.recursive = false;
        java.util.jar.Manifest manifest31 = explodedArchive27.manifest;
        java.io.File file32 = explodedArchive27.manifestFile;
        java.io.File file33 = null;
        java.io.File file34 = explodedArchive27.getManifestFile(file33);
        explodedArchive14.manifestFile = file34;
        java.io.File file36 = explodedArchive10.getManifestFile(file34);
        java.io.File file37 = explodedArchive8.getManifestFile(file34);
        fileEntryIterator5.root = file34;
        java.io.File file39 = explodedArchive0.getManifestFile(file34);
        java.io.File file40 = explodedArchive0.root;
        java.lang.String str41 = explodedArchive0.toString();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str9 + "' != '" + "exploded archive" + "'", str9.equals("exploded archive"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file25.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file25.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file34.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file34.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file36.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file36.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file37.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file37.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file39.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file39.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str41 + "' != '" + "exploded archive" + "'", str41.equals("exploded archive"));
    }

    @Test
    public void test848() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test848");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file1 = null;
        fileEntryIterator0.current = file1;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive3 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest4 = explodedArchive3.manifest;
        explodedArchive3.recursive = false;
        java.util.jar.Manifest manifest7 = explodedArchive3.manifest;
        java.io.File file8 = explodedArchive3.manifestFile;
        java.io.File file9 = null;
        java.io.File file10 = explodedArchive3.getManifestFile(file9);
        java.util.Iterator<java.io.File> fileItor11 = fileEntryIterator0.listFiles(file10);
        boolean boolean12 = fileEntryIterator0.hasNext();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator13 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator14 = entryComparator13.reversed();
        java.util.Comparator<java.io.File> fileComparator15 = entryComparator13.reversed();
        fileEntryIterator0.entryComparator = fileComparator15;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator17 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file18 = null;
        fileEntryIterator17.current = file18;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive20 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.lang.String str21 = explodedArchive20.toString();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive22 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file23 = explodedArchive22.root;
        java.io.File file24 = null;
        explodedArchive22.manifestFile = file24;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive26 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest27 = explodedArchive26.manifest;
        explodedArchive26.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive30 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest31 = explodedArchive30.manifest;
        explodedArchive30.recursive = false;
        java.util.jar.Manifest manifest34 = explodedArchive30.manifest;
        java.io.File file35 = explodedArchive30.manifestFile;
        java.io.File file36 = null;
        java.io.File file37 = explodedArchive30.getManifestFile(file36);
        explodedArchive26.manifestFile = file36;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive39 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest40 = explodedArchive39.manifest;
        explodedArchive39.recursive = false;
        java.util.jar.Manifest manifest43 = explodedArchive39.manifest;
        java.io.File file44 = explodedArchive39.manifestFile;
        java.io.File file45 = null;
        java.io.File file46 = explodedArchive39.getManifestFile(file45);
        explodedArchive26.manifestFile = file46;
        java.io.File file48 = explodedArchive22.getManifestFile(file46);
        java.io.File file49 = explodedArchive20.getManifestFile(file46);
        fileEntryIterator17.root = file46;
        fileEntryIterator0.current = file46;
        boolean boolean52 = fileEntryIterator0.hasNext();
        java.io.File file53 = fileEntryIterator0.current;
        boolean boolean54 = fileEntryIterator0.hasNext();
        // The following exception was thrown during execution in test generation
        try {
            org.springframework.boot.loader.archive.Archive.Entry entry55 = fileEntryIterator0.next();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str21 + "' != '" + "exploded archive" + "'", str21.equals("exploded archive"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file37.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file37.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file46.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file46.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file48.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file48.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file49.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file49.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file53.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file53.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
    }

    @Test
    public void test849() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test849");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        boolean boolean1 = fileEntryIterator0.recursive;
        java.util.Deque<java.util.Iterator<java.io.File>> fileItorQueue2 = fileEntryIterator0.stack;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator3 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file4 = null;
        fileEntryIterator3.current = file4;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive6 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest7 = explodedArchive6.manifest;
        explodedArchive6.recursive = false;
        java.util.jar.Manifest manifest10 = explodedArchive6.manifest;
        java.io.File file11 = explodedArchive6.manifestFile;
        java.io.File file12 = null;
        java.io.File file13 = explodedArchive6.getManifestFile(file12);
        java.util.Iterator<java.io.File> fileItor14 = fileEntryIterator3.listFiles(file13);
        java.util.Iterator<java.io.File> fileItor15 = fileEntryIterator0.listFiles(file13);
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator16 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file17 = null;
        fileEntryIterator16.current = file17;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive19 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest20 = explodedArchive19.manifest;
        explodedArchive19.recursive = false;
        java.util.jar.Manifest manifest23 = explodedArchive19.manifest;
        java.io.File file24 = explodedArchive19.manifestFile;
        java.io.File file25 = null;
        java.io.File file26 = explodedArchive19.getManifestFile(file25);
        java.util.Iterator<java.io.File> fileItor27 = fileEntryIterator16.listFiles(file26);
        java.io.File file28 = fileEntryIterator16.root;
        java.io.File file29 = fileEntryIterator16.poll();
        java.util.Comparator<java.io.File> fileComparator30 = fileEntryIterator16.entryComparator;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator31 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        boolean boolean32 = fileEntryIterator31.hasNext();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator33 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator34 = entryComparator33.reversed();
        java.util.Comparator<java.io.File> fileComparator35 = fileComparator34.reversed();
        fileEntryIterator31.entryComparator = fileComparator35;
        java.util.Comparator<java.io.File> fileComparator37 = fileEntryIterator31.entryComparator;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator38 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator39 = entryComparator38.reversed();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator40 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator41 = entryComparator40.reversed();
        java.util.Comparator<java.io.File> fileComparator42 = entryComparator38.thenComparing(fileComparator41);
        java.util.Comparator<java.io.File> fileComparator43 = fileComparator37.thenComparing(fileComparator41);
        fileEntryIterator16.entryComparator = fileComparator43;
        java.io.File file45 = fileEntryIterator16.root;
        java.util.Deque<java.util.Iterator<java.io.File>> fileItorQueue46 = fileEntryIterator16.stack;
        fileEntryIterator0.stack = fileItorQueue46;
        fileEntryIterator0.recursive = false;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItorQueue2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file13.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file13.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file26.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file26.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItorQueue46);
    }

    @Test
    public void test850() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test850");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file1 = null;
        fileEntryIterator0.current = file1;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive3 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest4 = explodedArchive3.manifest;
        explodedArchive3.recursive = false;
        java.util.jar.Manifest manifest7 = explodedArchive3.manifest;
        java.io.File file8 = explodedArchive3.manifestFile;
        java.io.File file9 = null;
        java.io.File file10 = explodedArchive3.getManifestFile(file9);
        java.util.Iterator<java.io.File> fileItor11 = fileEntryIterator0.listFiles(file10);
        java.io.File file12 = fileEntryIterator0.current;
        java.util.Deque<java.util.Iterator<java.io.File>> fileItorQueue13 = fileEntryIterator0.stack;
        fileEntryIterator0.recursive = true;
        java.util.Comparator<java.io.File> fileComparator16 = fileEntryIterator0.entryComparator;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator17 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file18 = null;
        fileEntryIterator17.current = file18;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive20 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest21 = explodedArchive20.manifest;
        explodedArchive20.recursive = false;
        java.util.jar.Manifest manifest24 = explodedArchive20.manifest;
        java.io.File file25 = explodedArchive20.manifestFile;
        java.io.File file26 = null;
        java.io.File file27 = explodedArchive20.getManifestFile(file26);
        java.util.Iterator<java.io.File> fileItor28 = fileEntryIterator17.listFiles(file27);
        boolean boolean29 = fileEntryIterator17.hasNext();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator30 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator31 = entryComparator30.reversed();
        java.util.Comparator<java.io.File> fileComparator32 = entryComparator30.reversed();
        fileEntryIterator17.entryComparator = fileComparator32;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator34 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file35 = null;
        fileEntryIterator34.current = file35;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive37 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.lang.String str38 = explodedArchive37.toString();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive39 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file40 = explodedArchive39.root;
        java.io.File file41 = null;
        explodedArchive39.manifestFile = file41;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive43 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest44 = explodedArchive43.manifest;
        explodedArchive43.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive47 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest48 = explodedArchive47.manifest;
        explodedArchive47.recursive = false;
        java.util.jar.Manifest manifest51 = explodedArchive47.manifest;
        java.io.File file52 = explodedArchive47.manifestFile;
        java.io.File file53 = null;
        java.io.File file54 = explodedArchive47.getManifestFile(file53);
        explodedArchive43.manifestFile = file53;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive56 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest57 = explodedArchive56.manifest;
        explodedArchive56.recursive = false;
        java.util.jar.Manifest manifest60 = explodedArchive56.manifest;
        java.io.File file61 = explodedArchive56.manifestFile;
        java.io.File file62 = null;
        java.io.File file63 = explodedArchive56.getManifestFile(file62);
        explodedArchive43.manifestFile = file63;
        java.io.File file65 = explodedArchive39.getManifestFile(file63);
        java.io.File file66 = explodedArchive37.getManifestFile(file63);
        fileEntryIterator34.root = file63;
        fileEntryIterator17.current = file63;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive69 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file70 = explodedArchive69.root;
        java.io.File file71 = null;
        explodedArchive69.manifestFile = file71;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive73 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest74 = explodedArchive73.manifest;
        explodedArchive73.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive77 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest78 = explodedArchive77.manifest;
        explodedArchive77.recursive = false;
        java.util.jar.Manifest manifest81 = explodedArchive77.manifest;
        java.io.File file82 = explodedArchive77.manifestFile;
        java.io.File file83 = null;
        java.io.File file84 = explodedArchive77.getManifestFile(file83);
        explodedArchive73.manifestFile = file83;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive86 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest87 = explodedArchive86.manifest;
        explodedArchive86.recursive = false;
        java.util.jar.Manifest manifest90 = explodedArchive86.manifest;
        java.io.File file91 = explodedArchive86.manifestFile;
        java.io.File file92 = null;
        java.io.File file93 = explodedArchive86.getManifestFile(file92);
        explodedArchive73.manifestFile = file93;
        java.io.File file95 = explodedArchive69.getManifestFile(file93);
        fileEntryIterator17.root = file95;
        java.io.File file97 = fileEntryIterator17.poll();
        java.io.File file98 = fileEntryIterator17.current;
        java.util.Iterator<java.io.File> fileItor99 = fileEntryIterator0.listFiles(file98);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItorQueue13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file27.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file27.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str38 + "' != '" + "exploded archive" + "'", str38.equals("exploded archive"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file54.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file54.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file63.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file63.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file65.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file65.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file66.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file66.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest78);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest81);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file82);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file84);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file84.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file84.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest87);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest90);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file91);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file93);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file93.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file93.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file95);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file95.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file95.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file97);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file98);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file98.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file98.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor99);
    }

    @Test
    public void test851() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test851");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file1 = null;
        fileEntryIterator0.current = file1;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive3 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest4 = explodedArchive3.manifest;
        explodedArchive3.recursive = false;
        java.util.jar.Manifest manifest7 = explodedArchive3.manifest;
        java.io.File file8 = explodedArchive3.manifestFile;
        java.io.File file9 = null;
        java.io.File file10 = explodedArchive3.getManifestFile(file9);
        java.util.Iterator<java.io.File> fileItor11 = fileEntryIterator0.listFiles(file10);
        java.io.File file12 = fileEntryIterator0.current;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator13 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file14 = null;
        fileEntryIterator13.current = file14;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive16 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest17 = explodedArchive16.manifest;
        explodedArchive16.recursive = false;
        java.util.jar.Manifest manifest20 = explodedArchive16.manifest;
        java.io.File file21 = explodedArchive16.manifestFile;
        java.io.File file22 = null;
        java.io.File file23 = explodedArchive16.getManifestFile(file22);
        java.util.Iterator<java.io.File> fileItor24 = fileEntryIterator13.listFiles(file23);
        java.util.ArrayDeque<java.util.Iterator<java.io.File>> fileItorQueue25 = new java.util.ArrayDeque<java.util.Iterator<java.io.File>>();
        boolean boolean26 = fileItorQueue25.add(fileItor24);
        fileEntryIterator0.stack = fileItorQueue25;
        java.io.File file28 = fileEntryIterator0.poll();
        java.io.File file29 = fileEntryIterator0.poll();
        // The following exception was thrown during execution in test generation
        try {
            org.springframework.boot.loader.archive.Archive.Entry entry30 = fileEntryIterator0.next();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file23.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file23.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file29);
    }

    @Test
    public void test852() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test852");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file1 = null;
        fileEntryIterator0.current = file1;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive3 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest4 = explodedArchive3.manifest;
        explodedArchive3.recursive = false;
        java.util.jar.Manifest manifest7 = explodedArchive3.manifest;
        java.io.File file8 = explodedArchive3.manifestFile;
        java.io.File file9 = null;
        java.io.File file10 = explodedArchive3.getManifestFile(file9);
        java.util.Iterator<java.io.File> fileItor11 = fileEntryIterator0.listFiles(file10);
        java.io.File file12 = fileEntryIterator0.current;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator13 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file14 = null;
        fileEntryIterator13.current = file14;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive16 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest17 = explodedArchive16.manifest;
        explodedArchive16.recursive = false;
        java.util.jar.Manifest manifest20 = explodedArchive16.manifest;
        java.io.File file21 = explodedArchive16.manifestFile;
        java.io.File file22 = null;
        java.io.File file23 = explodedArchive16.getManifestFile(file22);
        java.util.Iterator<java.io.File> fileItor24 = fileEntryIterator13.listFiles(file23);
        java.util.ArrayDeque<java.util.Iterator<java.io.File>> fileItorQueue25 = new java.util.ArrayDeque<java.util.Iterator<java.io.File>>();
        boolean boolean26 = fileItorQueue25.add(fileItor24);
        fileEntryIterator0.stack = fileItorQueue25;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive28 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest29 = explodedArchive28.manifest;
        explodedArchive28.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive32 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest33 = explodedArchive32.manifest;
        explodedArchive32.recursive = false;
        java.util.jar.Manifest manifest36 = explodedArchive32.manifest;
        java.io.File file37 = explodedArchive32.manifestFile;
        java.io.File file38 = null;
        java.io.File file39 = explodedArchive32.getManifestFile(file38);
        explodedArchive28.manifestFile = file38;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive41 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest42 = explodedArchive41.manifest;
        explodedArchive41.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive45 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest46 = explodedArchive45.manifest;
        explodedArchive45.recursive = false;
        java.util.jar.Manifest manifest49 = explodedArchive45.manifest;
        java.io.File file50 = explodedArchive45.manifestFile;
        java.io.File file51 = null;
        java.io.File file52 = explodedArchive45.getManifestFile(file51);
        explodedArchive41.manifestFile = file51;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive54 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest55 = explodedArchive54.manifest;
        explodedArchive54.recursive = false;
        java.util.jar.Manifest manifest58 = explodedArchive54.manifest;
        java.io.File file59 = explodedArchive54.manifestFile;
        java.io.File file60 = null;
        java.io.File file61 = explodedArchive54.getManifestFile(file60);
        explodedArchive41.manifestFile = file61;
        explodedArchive28.root = file61;
        java.util.Iterator<java.io.File> fileItor64 = fileEntryIterator0.listFiles(file61);
        java.io.File file65 = fileEntryIterator0.root;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator66 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file67 = null;
        fileEntryIterator66.current = file67;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive69 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest70 = explodedArchive69.manifest;
        explodedArchive69.recursive = false;
        java.util.jar.Manifest manifest73 = explodedArchive69.manifest;
        java.io.File file74 = explodedArchive69.manifestFile;
        java.io.File file75 = null;
        java.io.File file76 = explodedArchive69.getManifestFile(file75);
        java.util.Iterator<java.io.File> fileItor77 = fileEntryIterator66.listFiles(file76);
        java.util.Comparator<java.io.File> fileComparator78 = fileEntryIterator66.entryComparator;
        java.util.Deque<java.util.Iterator<java.io.File>> fileItorQueue79 = fileEntryIterator66.stack;
        fileEntryIterator0.stack = fileItorQueue79;
        java.lang.Class<?> wildcardClass81 = fileEntryIterator0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file23.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file23.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file39.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file39.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file52.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file52.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file61.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file61.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest73);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file76);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file76.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file76.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor77);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator78);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItorQueue79);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass81);
    }

    @Test
    public void test853() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test853");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest1 = explodedArchive0.manifest;
        explodedArchive0.recursive = false;
        java.io.File file4 = null;
        explodedArchive0.root = file4;
        java.io.File file6 = explodedArchive0.root;
        java.util.jar.Manifest manifest7 = null;
        explodedArchive0.manifest = manifest7;
        explodedArchive0.recursive = false;
        java.util.jar.Manifest manifest11 = null;
        explodedArchive0.manifest = manifest11;
        java.lang.String str13 = explodedArchive0.toString();
        java.lang.String str14 = explodedArchive0.toString();
        java.util.jar.Manifest manifest15 = explodedArchive0.manifest;
        // The following exception was thrown during execution in test generation
        try {
            java.util.jar.Manifest manifest16 = explodedArchive0.getManifest();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str13 + "' != '" + "exploded archive" + "'", str13.equals("exploded archive"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str14 + "' != '" + "exploded archive" + "'", str14.equals("exploded archive"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest15);
    }

    @Test
    public void test854() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test854");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file1 = null;
        fileEntryIterator0.current = file1;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive3 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest4 = explodedArchive3.manifest;
        explodedArchive3.recursive = false;
        java.util.jar.Manifest manifest7 = explodedArchive3.manifest;
        java.io.File file8 = explodedArchive3.manifestFile;
        java.io.File file9 = null;
        java.io.File file10 = explodedArchive3.getManifestFile(file9);
        java.util.Iterator<java.io.File> fileItor11 = fileEntryIterator0.listFiles(file10);
        java.util.Comparator<java.io.File> fileComparator12 = fileEntryIterator0.entryComparator;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator13 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        boolean boolean14 = fileEntryIterator13.hasNext();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator15 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator16 = entryComparator15.reversed();
        java.util.Comparator<java.io.File> fileComparator17 = fileComparator16.reversed();
        fileEntryIterator13.entryComparator = fileComparator17;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive19 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file20 = explodedArchive19.root;
        java.io.File file21 = null;
        explodedArchive19.manifestFile = file21;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive23 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest24 = explodedArchive23.manifest;
        explodedArchive23.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive27 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest28 = explodedArchive27.manifest;
        explodedArchive27.recursive = false;
        java.util.jar.Manifest manifest31 = explodedArchive27.manifest;
        java.io.File file32 = explodedArchive27.manifestFile;
        java.io.File file33 = null;
        java.io.File file34 = explodedArchive27.getManifestFile(file33);
        explodedArchive23.manifestFile = file33;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive36 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest37 = explodedArchive36.manifest;
        explodedArchive36.recursive = false;
        java.util.jar.Manifest manifest40 = explodedArchive36.manifest;
        java.io.File file41 = explodedArchive36.manifestFile;
        java.io.File file42 = null;
        java.io.File file43 = explodedArchive36.getManifestFile(file42);
        explodedArchive23.manifestFile = file43;
        java.io.File file45 = explodedArchive19.getManifestFile(file43);
        java.util.Iterator<java.io.File> fileItor46 = fileEntryIterator13.listFiles(file45);
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntry fileEntry47 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntry();
        java.lang.String str48 = fileEntry47.name;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator49 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file50 = null;
        fileEntryIterator49.current = file50;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive52 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.lang.String str53 = explodedArchive52.toString();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive54 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file55 = explodedArchive54.root;
        java.io.File file56 = null;
        explodedArchive54.manifestFile = file56;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive58 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest59 = explodedArchive58.manifest;
        explodedArchive58.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive62 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest63 = explodedArchive62.manifest;
        explodedArchive62.recursive = false;
        java.util.jar.Manifest manifest66 = explodedArchive62.manifest;
        java.io.File file67 = explodedArchive62.manifestFile;
        java.io.File file68 = null;
        java.io.File file69 = explodedArchive62.getManifestFile(file68);
        explodedArchive58.manifestFile = file68;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive71 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest72 = explodedArchive71.manifest;
        explodedArchive71.recursive = false;
        java.util.jar.Manifest manifest75 = explodedArchive71.manifest;
        java.io.File file76 = explodedArchive71.manifestFile;
        java.io.File file77 = null;
        java.io.File file78 = explodedArchive71.getManifestFile(file77);
        explodedArchive58.manifestFile = file78;
        java.io.File file80 = explodedArchive54.getManifestFile(file78);
        java.io.File file81 = explodedArchive52.getManifestFile(file78);
        fileEntryIterator49.root = file78;
        fileEntry47.file = file78;
        java.io.File file84 = fileEntry47.getFile();
        java.io.File file85 = fileEntry47.getFile();
        java.util.Iterator<java.io.File> fileItor86 = fileEntryIterator13.listFiles(file85);
        java.util.Iterator<java.io.File> fileItor87 = fileEntryIterator0.listFiles(file85);
        java.lang.Class<?> wildcardClass88 = fileItor87.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file34.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file34.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file43.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file43.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file45.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file45.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str53 + "' != '" + "exploded archive" + "'", str53.equals("exploded archive"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file69.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file69.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest75);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file76);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file78);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file78.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file78.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file80);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file80.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file80.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file81);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file81.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file81.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file84);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file84.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file84.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file85);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file85.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file85.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor86);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor87);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass88);
    }

    @Test
    public void test855() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test855");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        boolean boolean1 = fileEntryIterator0.recursive;
        java.io.File file2 = fileEntryIterator0.current;
        boolean boolean3 = fileEntryIterator0.hasNext();
        boolean boolean4 = fileEntryIterator0.recursive;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator5 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator6 = entryComparator5.reversed();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator7 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator8 = entryComparator7.reversed();
        java.util.Comparator<java.io.File> fileComparator9 = entryComparator5.thenComparing(fileComparator8);
        fileEntryIterator0.entryComparator = fileComparator9;
        java.io.File file11 = fileEntryIterator0.current;
        fileEntryIterator0.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator14 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file15 = null;
        fileEntryIterator14.current = file15;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive17 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest18 = explodedArchive17.manifest;
        explodedArchive17.recursive = false;
        java.util.jar.Manifest manifest21 = explodedArchive17.manifest;
        java.io.File file22 = explodedArchive17.manifestFile;
        java.io.File file23 = null;
        java.io.File file24 = explodedArchive17.getManifestFile(file23);
        java.util.Iterator<java.io.File> fileItor25 = fileEntryIterator14.listFiles(file24);
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator26 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file27 = null;
        fileEntryIterator26.current = file27;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive29 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest30 = explodedArchive29.manifest;
        explodedArchive29.recursive = false;
        java.util.jar.Manifest manifest33 = explodedArchive29.manifest;
        java.io.File file34 = explodedArchive29.manifestFile;
        java.io.File file35 = null;
        java.io.File file36 = explodedArchive29.getManifestFile(file35);
        java.util.Iterator<java.io.File> fileItor37 = fileEntryIterator26.listFiles(file36);
        java.io.File file38 = fileEntryIterator26.current;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator39 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file40 = null;
        fileEntryIterator39.current = file40;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive42 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest43 = explodedArchive42.manifest;
        explodedArchive42.recursive = false;
        java.util.jar.Manifest manifest46 = explodedArchive42.manifest;
        java.io.File file47 = explodedArchive42.manifestFile;
        java.io.File file48 = null;
        java.io.File file49 = explodedArchive42.getManifestFile(file48);
        java.util.Iterator<java.io.File> fileItor50 = fileEntryIterator39.listFiles(file49);
        java.util.ArrayDeque<java.util.Iterator<java.io.File>> fileItorQueue51 = new java.util.ArrayDeque<java.util.Iterator<java.io.File>>();
        boolean boolean52 = fileItorQueue51.add(fileItor50);
        fileEntryIterator26.stack = fileItorQueue51;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive54 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest55 = explodedArchive54.manifest;
        explodedArchive54.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive58 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest59 = explodedArchive58.manifest;
        explodedArchive58.recursive = false;
        java.util.jar.Manifest manifest62 = explodedArchive58.manifest;
        java.io.File file63 = explodedArchive58.manifestFile;
        java.io.File file64 = null;
        java.io.File file65 = explodedArchive58.getManifestFile(file64);
        explodedArchive54.manifestFile = file64;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive67 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest68 = explodedArchive67.manifest;
        explodedArchive67.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive71 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest72 = explodedArchive71.manifest;
        explodedArchive71.recursive = false;
        java.util.jar.Manifest manifest75 = explodedArchive71.manifest;
        java.io.File file76 = explodedArchive71.manifestFile;
        java.io.File file77 = null;
        java.io.File file78 = explodedArchive71.getManifestFile(file77);
        explodedArchive67.manifestFile = file77;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive80 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest81 = explodedArchive80.manifest;
        explodedArchive80.recursive = false;
        java.util.jar.Manifest manifest84 = explodedArchive80.manifest;
        java.io.File file85 = explodedArchive80.manifestFile;
        java.io.File file86 = null;
        java.io.File file87 = explodedArchive80.getManifestFile(file86);
        explodedArchive67.manifestFile = file87;
        explodedArchive54.root = file87;
        java.util.Iterator<java.io.File> fileItor90 = fileEntryIterator26.listFiles(file87);
        java.util.Comparator<java.io.File> fileComparator91 = fileEntryIterator26.entryComparator;
        fileEntryIterator14.entryComparator = fileComparator91;
        fileEntryIterator0.entryComparator = fileComparator91;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file24.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file24.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file36.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file36.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file49.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file49.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file65.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file65.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest75);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file76);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file78);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file78.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file78.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest81);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest84);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file85);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file87);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file87.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file87.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor90);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator91);
    }

    @Test
    public void test856() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test856");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest1 = explodedArchive0.manifest;
        explodedArchive0.recursive = false;
        java.io.File file4 = null;
        explodedArchive0.root = file4;
        java.io.File file6 = explodedArchive0.root;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive7 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest8 = explodedArchive7.manifest;
        explodedArchive7.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive11 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest12 = explodedArchive11.manifest;
        explodedArchive11.recursive = false;
        java.util.jar.Manifest manifest15 = explodedArchive11.manifest;
        java.io.File file16 = explodedArchive11.manifestFile;
        java.io.File file17 = null;
        java.io.File file18 = explodedArchive11.getManifestFile(file17);
        explodedArchive7.manifestFile = file17;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive20 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest21 = explodedArchive20.manifest;
        explodedArchive20.recursive = false;
        java.util.jar.Manifest manifest24 = explodedArchive20.manifest;
        java.io.File file25 = explodedArchive20.manifestFile;
        java.io.File file26 = null;
        java.io.File file27 = explodedArchive20.getManifestFile(file26);
        explodedArchive7.manifestFile = file27;
        java.io.File file29 = explodedArchive0.getManifestFile(file27);
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntry fileEntry30 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntry();
        java.lang.String str31 = fileEntry30.name;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator32 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file33 = null;
        fileEntryIterator32.current = file33;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive35 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.lang.String str36 = explodedArchive35.toString();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive37 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file38 = explodedArchive37.root;
        java.io.File file39 = null;
        explodedArchive37.manifestFile = file39;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive41 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest42 = explodedArchive41.manifest;
        explodedArchive41.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive45 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest46 = explodedArchive45.manifest;
        explodedArchive45.recursive = false;
        java.util.jar.Manifest manifest49 = explodedArchive45.manifest;
        java.io.File file50 = explodedArchive45.manifestFile;
        java.io.File file51 = null;
        java.io.File file52 = explodedArchive45.getManifestFile(file51);
        explodedArchive41.manifestFile = file51;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive54 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest55 = explodedArchive54.manifest;
        explodedArchive54.recursive = false;
        java.util.jar.Manifest manifest58 = explodedArchive54.manifest;
        java.io.File file59 = explodedArchive54.manifestFile;
        java.io.File file60 = null;
        java.io.File file61 = explodedArchive54.getManifestFile(file60);
        explodedArchive41.manifestFile = file61;
        java.io.File file63 = explodedArchive37.getManifestFile(file61);
        java.io.File file64 = explodedArchive35.getManifestFile(file61);
        fileEntryIterator32.root = file61;
        fileEntry30.file = file61;
        java.io.File file67 = fileEntry30.file;
        explodedArchive0.root = file67;
        java.io.File file69 = explodedArchive0.manifestFile;
        java.util.Spliterator<org.springframework.boot.loader.archive.Archive.Entry> entrySpliterator70 = explodedArchive0.spliterator();
        explodedArchive0.recursive = false;
        java.io.File file73 = explodedArchive0.root;
        // The following exception was thrown during execution in test generation
        try {
            org.springframework.boot.loader.archive.ExplodedArchive explodedArchive75 = new org.springframework.boot.loader.archive.ExplodedArchive(file73, true);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid source folder META-INF/MANIFEST.MF");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file18.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file18.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file27.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file27.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file29.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file29.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str36 + "' != '" + "exploded archive" + "'", str36.equals("exploded archive"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file52.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file52.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file61.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file61.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file63.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file63.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file64.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file64.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file67.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file67.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(entrySpliterator70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file73);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file73.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file73.toString(), "META-INF/MANIFEST.MF");
    }

    @Test
    public void test857() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test857");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file1 = explodedArchive0.root;
        java.io.File file2 = null;
        explodedArchive0.manifestFile = file2;
        java.io.File file4 = explodedArchive0.root;
        org.springframework.boot.loader.archive.Archive.EntryFilter entryFilter5 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<org.springframework.boot.loader.archive.Archive> archiveList6 = explodedArchive0.getNestedArchives(entryFilter5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file4);
    }

    @Test
    public void test858() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test858");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest1 = explodedArchive0.manifest;
        explodedArchive0.recursive = false;
        java.util.jar.Manifest manifest4 = explodedArchive0.manifest;
        java.util.jar.Manifest manifest5 = null;
        explodedArchive0.manifest = manifest5;
        java.io.File file7 = explodedArchive0.root;
        explodedArchive0.recursive = false;
        // The following exception was thrown during execution in test generation
        try {
            java.util.jar.Manifest manifest10 = explodedArchive0.getManifest();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file7);
    }

    @Test
    public void test859() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test859");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file1 = null;
        fileEntryIterator0.current = file1;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive3 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest4 = explodedArchive3.manifest;
        explodedArchive3.recursive = false;
        java.util.jar.Manifest manifest7 = explodedArchive3.manifest;
        java.io.File file8 = explodedArchive3.manifestFile;
        java.io.File file9 = null;
        java.io.File file10 = explodedArchive3.getManifestFile(file9);
        java.util.Iterator<java.io.File> fileItor11 = fileEntryIterator0.listFiles(file10);
        java.io.File file12 = fileEntryIterator0.root;
        java.io.File file13 = fileEntryIterator0.poll();
        java.io.File file14 = fileEntryIterator0.poll();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator15 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        boolean boolean16 = fileEntryIterator15.hasNext();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator17 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator18 = entryComparator17.reversed();
        java.util.Comparator<java.io.File> fileComparator19 = fileComparator18.reversed();
        fileEntryIterator15.entryComparator = fileComparator19;
        java.util.Comparator<java.io.File> fileComparator21 = fileEntryIterator15.entryComparator;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator22 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator23 = entryComparator22.reversed();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator24 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator25 = entryComparator24.reversed();
        java.util.Comparator<java.io.File> fileComparator26 = entryComparator22.thenComparing(fileComparator25);
        java.util.Comparator<java.io.File> fileComparator27 = fileComparator21.thenComparing(fileComparator25);
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator28 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator29 = entryComparator28.reversed();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator30 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file31 = null;
        fileEntryIterator30.current = file31;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive33 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest34 = explodedArchive33.manifest;
        explodedArchive33.recursive = false;
        java.util.jar.Manifest manifest37 = explodedArchive33.manifest;
        java.io.File file38 = explodedArchive33.manifestFile;
        java.io.File file39 = null;
        java.io.File file40 = explodedArchive33.getManifestFile(file39);
        java.util.Iterator<java.io.File> fileItor41 = fileEntryIterator30.listFiles(file40);
        java.io.File file42 = fileEntryIterator30.current;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator43 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file44 = null;
        fileEntryIterator43.current = file44;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive46 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest47 = explodedArchive46.manifest;
        explodedArchive46.recursive = false;
        java.util.jar.Manifest manifest50 = explodedArchive46.manifest;
        java.io.File file51 = explodedArchive46.manifestFile;
        java.io.File file52 = null;
        java.io.File file53 = explodedArchive46.getManifestFile(file52);
        java.util.Iterator<java.io.File> fileItor54 = fileEntryIterator43.listFiles(file53);
        java.util.ArrayDeque<java.util.Iterator<java.io.File>> fileItorQueue55 = new java.util.ArrayDeque<java.util.Iterator<java.io.File>>();
        boolean boolean56 = fileItorQueue55.add(fileItor54);
        fileEntryIterator30.stack = fileItorQueue55;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive58 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest59 = explodedArchive58.manifest;
        explodedArchive58.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive62 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest63 = explodedArchive62.manifest;
        explodedArchive62.recursive = false;
        java.util.jar.Manifest manifest66 = explodedArchive62.manifest;
        java.io.File file67 = explodedArchive62.manifestFile;
        java.io.File file68 = null;
        java.io.File file69 = explodedArchive62.getManifestFile(file68);
        explodedArchive58.manifestFile = file68;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive71 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest72 = explodedArchive71.manifest;
        explodedArchive71.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive75 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest76 = explodedArchive75.manifest;
        explodedArchive75.recursive = false;
        java.util.jar.Manifest manifest79 = explodedArchive75.manifest;
        java.io.File file80 = explodedArchive75.manifestFile;
        java.io.File file81 = null;
        java.io.File file82 = explodedArchive75.getManifestFile(file81);
        explodedArchive71.manifestFile = file81;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive84 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest85 = explodedArchive84.manifest;
        explodedArchive84.recursive = false;
        java.util.jar.Manifest manifest88 = explodedArchive84.manifest;
        java.io.File file89 = explodedArchive84.manifestFile;
        java.io.File file90 = null;
        java.io.File file91 = explodedArchive84.getManifestFile(file90);
        explodedArchive71.manifestFile = file91;
        explodedArchive58.root = file91;
        java.util.Iterator<java.io.File> fileItor94 = fileEntryIterator30.listFiles(file91);
        java.util.Comparator<java.io.File> fileComparator95 = fileEntryIterator30.entryComparator;
        java.util.Comparator<java.io.File> fileComparator96 = entryComparator28.thenComparing(fileComparator95);
        java.util.Comparator<java.io.File> fileComparator97 = fileComparator27.thenComparing(fileComparator96);
        fileEntryIterator0.entryComparator = fileComparator96;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file40.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file40.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file53.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file53.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file69.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file69.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest76);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest79);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file80);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file82);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file82.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file82.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest85);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest88);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file89);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file91);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file91.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file91.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor94);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator95);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator96);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator97);
    }

    @Test
    public void test860() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test860");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest1 = explodedArchive0.manifest;
        explodedArchive0.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive4 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest5 = explodedArchive4.manifest;
        explodedArchive4.recursive = false;
        java.util.jar.Manifest manifest8 = explodedArchive4.manifest;
        java.io.File file9 = explodedArchive4.manifestFile;
        java.io.File file10 = null;
        java.io.File file11 = explodedArchive4.getManifestFile(file10);
        explodedArchive0.manifestFile = file10;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive13 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest14 = explodedArchive13.manifest;
        explodedArchive13.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive17 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest18 = explodedArchive17.manifest;
        explodedArchive17.recursive = false;
        java.util.jar.Manifest manifest21 = explodedArchive17.manifest;
        java.io.File file22 = explodedArchive17.manifestFile;
        java.io.File file23 = null;
        java.io.File file24 = explodedArchive17.getManifestFile(file23);
        explodedArchive13.manifestFile = file23;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive26 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest27 = explodedArchive26.manifest;
        explodedArchive26.recursive = false;
        java.util.jar.Manifest manifest30 = explodedArchive26.manifest;
        java.io.File file31 = explodedArchive26.manifestFile;
        java.io.File file32 = null;
        java.io.File file33 = explodedArchive26.getManifestFile(file32);
        explodedArchive13.manifestFile = file33;
        explodedArchive0.root = file33;
        java.net.URL uRL36 = explodedArchive0.getUrl();
        java.util.jar.Manifest manifest37 = null;
        explodedArchive0.manifest = manifest37;
        org.springframework.boot.loader.archive.Archive.EntryFilter entryFilter39 = null;
        java.util.List<org.springframework.boot.loader.archive.Archive> archiveList40 = explodedArchive0.getNestedArchives(entryFilter39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file11.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file11.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file24.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file24.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file33.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file33.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(uRL36);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(uRL36.toString(), "file:/server/study-execution/new-nimrod/nimrod-hunoroutput-test-dest/spring-boot/af20dc6cc45c032573413c401f9f73aa75371744/randoop_1/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(archiveList40);
    }

    @Test
    public void test861() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test861");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntry fileEntry0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntry();
        java.lang.String str1 = fileEntry0.name;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator2 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file3 = null;
        fileEntryIterator2.current = file3;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive5 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.lang.String str6 = explodedArchive5.toString();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive7 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file8 = explodedArchive7.root;
        java.io.File file9 = null;
        explodedArchive7.manifestFile = file9;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive11 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest12 = explodedArchive11.manifest;
        explodedArchive11.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive15 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest16 = explodedArchive15.manifest;
        explodedArchive15.recursive = false;
        java.util.jar.Manifest manifest19 = explodedArchive15.manifest;
        java.io.File file20 = explodedArchive15.manifestFile;
        java.io.File file21 = null;
        java.io.File file22 = explodedArchive15.getManifestFile(file21);
        explodedArchive11.manifestFile = file21;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive24 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest25 = explodedArchive24.manifest;
        explodedArchive24.recursive = false;
        java.util.jar.Manifest manifest28 = explodedArchive24.manifest;
        java.io.File file29 = explodedArchive24.manifestFile;
        java.io.File file30 = null;
        java.io.File file31 = explodedArchive24.getManifestFile(file30);
        explodedArchive11.manifestFile = file31;
        java.io.File file33 = explodedArchive7.getManifestFile(file31);
        java.io.File file34 = explodedArchive5.getManifestFile(file31);
        fileEntryIterator2.root = file31;
        fileEntry0.file = file31;
        java.io.File file37 = fileEntry0.file;
        java.lang.String str38 = fileEntry0.name;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive39 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest40 = explodedArchive39.manifest;
        explodedArchive39.recursive = false;
        java.io.File file43 = null;
        explodedArchive39.root = file43;
        java.io.File file45 = explodedArchive39.manifestFile;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive46 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file47 = explodedArchive46.root;
        java.io.File file48 = null;
        explodedArchive46.manifestFile = file48;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive50 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest51 = explodedArchive50.manifest;
        explodedArchive50.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive54 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest55 = explodedArchive54.manifest;
        explodedArchive54.recursive = false;
        java.util.jar.Manifest manifest58 = explodedArchive54.manifest;
        java.io.File file59 = explodedArchive54.manifestFile;
        java.io.File file60 = null;
        java.io.File file61 = explodedArchive54.getManifestFile(file60);
        explodedArchive50.manifestFile = file60;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive63 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest64 = explodedArchive63.manifest;
        explodedArchive63.recursive = false;
        java.util.jar.Manifest manifest67 = explodedArchive63.manifest;
        java.io.File file68 = explodedArchive63.manifestFile;
        java.io.File file69 = null;
        java.io.File file70 = explodedArchive63.getManifestFile(file69);
        explodedArchive50.manifestFile = file70;
        java.io.File file72 = explodedArchive46.getManifestFile(file70);
        java.io.File file73 = explodedArchive39.getManifestFile(file70);
        fileEntry0.file = file70;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "exploded archive" + "'", str6.equals("exploded archive"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file22.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file22.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file31.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file31.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file33.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file33.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file34.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file34.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file37.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file37.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file61.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file61.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file70.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file70.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file72.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file72.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file73);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file73.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file73.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
    }

    @Test
    public void test862() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test862");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest1 = explodedArchive0.manifest;
        explodedArchive0.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive4 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest5 = explodedArchive4.manifest;
        explodedArchive4.recursive = false;
        java.util.jar.Manifest manifest8 = explodedArchive4.manifest;
        java.io.File file9 = explodedArchive4.manifestFile;
        java.io.File file10 = null;
        java.io.File file11 = explodedArchive4.getManifestFile(file10);
        explodedArchive0.manifestFile = file10;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive13 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest14 = explodedArchive13.manifest;
        explodedArchive13.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive17 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest18 = explodedArchive17.manifest;
        explodedArchive17.recursive = false;
        java.util.jar.Manifest manifest21 = explodedArchive17.manifest;
        java.io.File file22 = explodedArchive17.manifestFile;
        java.io.File file23 = null;
        java.io.File file24 = explodedArchive17.getManifestFile(file23);
        explodedArchive13.manifestFile = file23;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive26 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest27 = explodedArchive26.manifest;
        explodedArchive26.recursive = false;
        java.util.jar.Manifest manifest30 = explodedArchive26.manifest;
        java.io.File file31 = explodedArchive26.manifestFile;
        java.io.File file32 = null;
        java.io.File file33 = explodedArchive26.getManifestFile(file32);
        explodedArchive13.manifestFile = file33;
        explodedArchive0.root = file33;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntry fileEntry36 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntry();
        java.io.File file37 = fileEntry36.getFile();
        java.io.File file38 = fileEntry36.getFile();
        java.lang.String str39 = fileEntry36.name;
        java.io.File file40 = fileEntry36.getFile();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator41 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file42 = null;
        fileEntryIterator41.current = file42;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive44 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest45 = explodedArchive44.manifest;
        explodedArchive44.recursive = false;
        java.util.jar.Manifest manifest48 = explodedArchive44.manifest;
        java.io.File file49 = explodedArchive44.manifestFile;
        java.io.File file50 = null;
        java.io.File file51 = explodedArchive44.getManifestFile(file50);
        java.util.Iterator<java.io.File> fileItor52 = fileEntryIterator41.listFiles(file51);
        fileEntry36.file = file51;
        explodedArchive0.root = file51;
        java.util.Spliterator<org.springframework.boot.loader.archive.Archive.Entry> entrySpliterator55 = explodedArchive0.spliterator();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntry fileEntry56 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntry();
        java.io.File file57 = fileEntry56.getFile();
        java.io.File file58 = fileEntry56.getFile();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive59 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file60 = explodedArchive59.root;
        java.io.File file61 = null;
        explodedArchive59.manifestFile = file61;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive63 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest64 = explodedArchive63.manifest;
        explodedArchive63.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive67 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest68 = explodedArchive67.manifest;
        explodedArchive67.recursive = false;
        java.util.jar.Manifest manifest71 = explodedArchive67.manifest;
        java.io.File file72 = explodedArchive67.manifestFile;
        java.io.File file73 = null;
        java.io.File file74 = explodedArchive67.getManifestFile(file73);
        explodedArchive63.manifestFile = file73;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive76 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest77 = explodedArchive76.manifest;
        explodedArchive76.recursive = false;
        java.util.jar.Manifest manifest80 = explodedArchive76.manifest;
        java.io.File file81 = explodedArchive76.manifestFile;
        java.io.File file82 = null;
        java.io.File file83 = explodedArchive76.getManifestFile(file82);
        explodedArchive63.manifestFile = file83;
        java.io.File file85 = explodedArchive59.getManifestFile(file83);
        fileEntry56.file = file85;
        java.io.File file87 = fileEntry56.file;
        java.io.File file88 = explodedArchive0.getManifestFile(file87);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file11.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file11.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file24.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file24.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file33.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file33.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file51.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file51.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(entrySpliterator55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file74.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file74.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest77);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest80);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file81);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file83);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file83.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file83.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file85);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file85.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file85.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file87);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file87.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file87.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file88);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file88.getParent(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file88.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
    }

    @Test
    public void test863() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test863");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntry fileEntry0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntry();
        java.io.File file1 = fileEntry0.getFile();
        java.io.File file2 = fileEntry0.getFile();
        java.lang.String str3 = fileEntry0.name;
        fileEntry0.name = "";
        java.io.File file6 = fileEntry0.file;
        java.io.File file7 = fileEntry0.getFile();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntry fileEntry8 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntry();
        java.io.File file9 = fileEntry8.getFile();
        java.io.File file10 = fileEntry8.getFile();
        java.lang.String str11 = fileEntry8.name;
        fileEntry8.name = "";
        java.io.File file14 = fileEntry8.file;
        java.io.File file15 = fileEntry8.getFile();
        java.io.File file16 = fileEntry8.file;
        java.lang.String str17 = fileEntry8.name;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator18 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file19 = null;
        fileEntryIterator18.current = file19;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive21 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest22 = explodedArchive21.manifest;
        explodedArchive21.recursive = false;
        java.util.jar.Manifest manifest25 = explodedArchive21.manifest;
        java.io.File file26 = explodedArchive21.manifestFile;
        java.io.File file27 = null;
        java.io.File file28 = explodedArchive21.getManifestFile(file27);
        java.util.Iterator<java.io.File> fileItor29 = fileEntryIterator18.listFiles(file28);
        java.io.File file30 = fileEntryIterator18.root;
        boolean boolean31 = fileEntryIterator18.hasNext();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator32 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file33 = null;
        fileEntryIterator32.current = file33;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive35 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.lang.String str36 = explodedArchive35.toString();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive37 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file38 = explodedArchive37.root;
        java.io.File file39 = null;
        explodedArchive37.manifestFile = file39;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive41 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest42 = explodedArchive41.manifest;
        explodedArchive41.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive45 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest46 = explodedArchive45.manifest;
        explodedArchive45.recursive = false;
        java.util.jar.Manifest manifest49 = explodedArchive45.manifest;
        java.io.File file50 = explodedArchive45.manifestFile;
        java.io.File file51 = null;
        java.io.File file52 = explodedArchive45.getManifestFile(file51);
        explodedArchive41.manifestFile = file51;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive54 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest55 = explodedArchive54.manifest;
        explodedArchive54.recursive = false;
        java.util.jar.Manifest manifest58 = explodedArchive54.manifest;
        java.io.File file59 = explodedArchive54.manifestFile;
        java.io.File file60 = null;
        java.io.File file61 = explodedArchive54.getManifestFile(file60);
        explodedArchive41.manifestFile = file61;
        java.io.File file63 = explodedArchive37.getManifestFile(file61);
        java.io.File file64 = explodedArchive35.getManifestFile(file61);
        fileEntryIterator32.root = file61;
        java.io.File file66 = fileEntryIterator32.poll();
        java.io.File file67 = fileEntryIterator32.root;
        java.util.Iterator<java.io.File> fileItor68 = fileEntryIterator18.listFiles(file67);
        fileEntry8.file = file67;
        fileEntry0.file = file67;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str17 + "' != '" + "" + "'", str17.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file28.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file28.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str36 + "' != '" + "exploded archive" + "'", str36.equals("exploded archive"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file52.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file52.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file61.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file61.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file63.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file63.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file64.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file64.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file67.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file67.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor68);
    }

    @Test
    public void test864() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test864");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file1 = explodedArchive0.root;
        java.io.File file2 = null;
        explodedArchive0.manifestFile = file2;
        java.io.File file4 = explodedArchive0.root;
        boolean boolean5 = explodedArchive0.recursive;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive6 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest7 = explodedArchive6.manifest;
        explodedArchive6.recursive = false;
        java.io.File file10 = null;
        explodedArchive6.root = file10;
        java.io.File file12 = explodedArchive6.root;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive13 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest14 = explodedArchive13.manifest;
        explodedArchive13.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive17 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest18 = explodedArchive17.manifest;
        explodedArchive17.recursive = false;
        java.util.jar.Manifest manifest21 = explodedArchive17.manifest;
        java.io.File file22 = explodedArchive17.manifestFile;
        java.io.File file23 = null;
        java.io.File file24 = explodedArchive17.getManifestFile(file23);
        explodedArchive13.manifestFile = file23;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive26 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest27 = explodedArchive26.manifest;
        explodedArchive26.recursive = false;
        java.util.jar.Manifest manifest30 = explodedArchive26.manifest;
        java.io.File file31 = explodedArchive26.manifestFile;
        java.io.File file32 = null;
        java.io.File file33 = explodedArchive26.getManifestFile(file32);
        explodedArchive13.manifestFile = file33;
        java.io.File file35 = explodedArchive6.getManifestFile(file33);
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive36 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest37 = explodedArchive36.manifest;
        explodedArchive36.recursive = false;
        java.io.File file40 = null;
        explodedArchive36.root = file40;
        java.io.File file42 = explodedArchive36.manifestFile;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive43 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file44 = explodedArchive43.root;
        java.io.File file45 = null;
        explodedArchive43.manifestFile = file45;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive47 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest48 = explodedArchive47.manifest;
        explodedArchive47.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive51 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest52 = explodedArchive51.manifest;
        explodedArchive51.recursive = false;
        java.util.jar.Manifest manifest55 = explodedArchive51.manifest;
        java.io.File file56 = explodedArchive51.manifestFile;
        java.io.File file57 = null;
        java.io.File file58 = explodedArchive51.getManifestFile(file57);
        explodedArchive47.manifestFile = file57;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive60 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest61 = explodedArchive60.manifest;
        explodedArchive60.recursive = false;
        java.util.jar.Manifest manifest64 = explodedArchive60.manifest;
        java.io.File file65 = explodedArchive60.manifestFile;
        java.io.File file66 = null;
        java.io.File file67 = explodedArchive60.getManifestFile(file66);
        explodedArchive47.manifestFile = file67;
        java.io.File file69 = explodedArchive43.getManifestFile(file67);
        java.io.File file70 = explodedArchive36.getManifestFile(file67);
        explodedArchive6.manifestFile = file67;
        explodedArchive0.root = file67;
        java.io.File file73 = explodedArchive0.root;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file24.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file24.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file33.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file33.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file35.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file35.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file58.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file58.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file67.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file67.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file69.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file69.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file70.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file70.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file73);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file73.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file73.toString(), "META-INF/MANIFEST.MF");
    }

    @Test
    public void test865() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test865");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file1 = explodedArchive0.root;
        java.io.File file2 = null;
        explodedArchive0.manifestFile = file2;
        java.io.File file4 = explodedArchive0.root;
        java.lang.String str5 = explodedArchive0.toString();
        java.util.jar.Manifest manifest6 = null;
        explodedArchive0.manifest = manifest6;
        java.io.File file8 = explodedArchive0.root;
        boolean boolean9 = explodedArchive0.recursive;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive10 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest11 = explodedArchive10.manifest;
        explodedArchive10.recursive = false;
        java.io.File file14 = null;
        explodedArchive10.root = file14;
        java.io.File file16 = explodedArchive10.manifestFile;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive17 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file18 = explodedArchive17.root;
        java.io.File file19 = null;
        explodedArchive17.manifestFile = file19;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive21 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest22 = explodedArchive21.manifest;
        explodedArchive21.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive25 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest26 = explodedArchive25.manifest;
        explodedArchive25.recursive = false;
        java.util.jar.Manifest manifest29 = explodedArchive25.manifest;
        java.io.File file30 = explodedArchive25.manifestFile;
        java.io.File file31 = null;
        java.io.File file32 = explodedArchive25.getManifestFile(file31);
        explodedArchive21.manifestFile = file31;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive34 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest35 = explodedArchive34.manifest;
        explodedArchive34.recursive = false;
        java.util.jar.Manifest manifest38 = explodedArchive34.manifest;
        java.io.File file39 = explodedArchive34.manifestFile;
        java.io.File file40 = null;
        java.io.File file41 = explodedArchive34.getManifestFile(file40);
        explodedArchive21.manifestFile = file41;
        java.io.File file43 = explodedArchive17.getManifestFile(file41);
        java.io.File file44 = explodedArchive17.root;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator45 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        boolean boolean46 = fileEntryIterator45.hasNext();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator47 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator48 = entryComparator47.reversed();
        java.util.Comparator<java.io.File> fileComparator49 = fileComparator48.reversed();
        fileEntryIterator45.entryComparator = fileComparator49;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive51 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file52 = explodedArchive51.root;
        java.io.File file53 = null;
        explodedArchive51.manifestFile = file53;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive55 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest56 = explodedArchive55.manifest;
        explodedArchive55.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive59 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest60 = explodedArchive59.manifest;
        explodedArchive59.recursive = false;
        java.util.jar.Manifest manifest63 = explodedArchive59.manifest;
        java.io.File file64 = explodedArchive59.manifestFile;
        java.io.File file65 = null;
        java.io.File file66 = explodedArchive59.getManifestFile(file65);
        explodedArchive55.manifestFile = file65;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive68 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest69 = explodedArchive68.manifest;
        explodedArchive68.recursive = false;
        java.util.jar.Manifest manifest72 = explodedArchive68.manifest;
        java.io.File file73 = explodedArchive68.manifestFile;
        java.io.File file74 = null;
        java.io.File file75 = explodedArchive68.getManifestFile(file74);
        explodedArchive55.manifestFile = file75;
        java.io.File file77 = explodedArchive51.getManifestFile(file75);
        java.util.Iterator<java.io.File> fileItor78 = fileEntryIterator45.listFiles(file77);
        explodedArchive17.manifestFile = file77;
        java.io.File file80 = explodedArchive17.manifestFile;
        java.io.File file81 = explodedArchive10.getManifestFile(file80);
        java.io.File file82 = explodedArchive0.getManifestFile(file81);
        java.lang.String str83 = explodedArchive0.toString();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntry fileEntry84 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntry();
        java.io.File file85 = fileEntry84.file;
        java.lang.String str86 = fileEntry84.name;
        java.io.File file87 = fileEntry84.file;
        java.io.File file88 = fileEntry84.file;
        java.lang.String str89 = fileEntry84.name;
        java.lang.String str90 = fileEntry84.getName();
        java.io.File file91 = fileEntry84.getFile();
        // The following exception was thrown during execution in test generation
        try {
            org.springframework.boot.loader.archive.Archive archive92 = explodedArchive0.getNestedArchive((org.springframework.boot.loader.archive.Archive.Entry) fileEntry84);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "exploded archive" + "'", str5.equals("exploded archive"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file32.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file32.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file41.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file41.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file43.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file43.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file66.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file66.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file73);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file75);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file75.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file75.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file77);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file77.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file77.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor78);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file80);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file80.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file80.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file81);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file81.getParent(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file81.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file82);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file82.getParent(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF/META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file82.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF/META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str83 + "' != '" + "exploded archive" + "'", str83.equals("exploded archive"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file85);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str86);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file87);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file88);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str89);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str90);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file91);
    }

    @Test
    public void test866() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test866");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        boolean boolean1 = explodedArchive0.recursive;
        boolean boolean2 = explodedArchive0.recursive;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive3 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file4 = explodedArchive3.root;
        java.io.File file5 = null;
        explodedArchive3.manifestFile = file5;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive7 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest8 = explodedArchive7.manifest;
        explodedArchive7.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive11 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest12 = explodedArchive11.manifest;
        explodedArchive11.recursive = false;
        java.util.jar.Manifest manifest15 = explodedArchive11.manifest;
        java.io.File file16 = explodedArchive11.manifestFile;
        java.io.File file17 = null;
        java.io.File file18 = explodedArchive11.getManifestFile(file17);
        explodedArchive7.manifestFile = file17;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive20 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest21 = explodedArchive20.manifest;
        explodedArchive20.recursive = false;
        java.util.jar.Manifest manifest24 = explodedArchive20.manifest;
        java.io.File file25 = explodedArchive20.manifestFile;
        java.io.File file26 = null;
        java.io.File file27 = explodedArchive20.getManifestFile(file26);
        explodedArchive7.manifestFile = file27;
        java.io.File file29 = explodedArchive3.getManifestFile(file27);
        explodedArchive0.manifestFile = file27;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator<org.springframework.boot.loader.archive.Archive.Entry> entryItor31 = explodedArchive0.iterator();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file18.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file18.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file27.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file27.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file29.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file29.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
    }

    @Test
    public void test867() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test867");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        boolean boolean1 = fileEntryIterator0.hasNext();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator2 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator3 = entryComparator2.reversed();
        java.util.Comparator<java.io.File> fileComparator4 = fileComparator3.reversed();
        fileEntryIterator0.entryComparator = fileComparator4;
        java.util.Comparator<java.io.File> fileComparator6 = fileEntryIterator0.entryComparator;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator7 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator8 = entryComparator7.reversed();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator9 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator10 = entryComparator9.reversed();
        java.util.Comparator<java.io.File> fileComparator11 = entryComparator7.thenComparing(fileComparator10);
        java.util.Comparator<java.io.File> fileComparator12 = fileComparator6.thenComparing(fileComparator10);
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator13 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator14 = entryComparator13.reversed();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator15 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator16 = entryComparator15.reversed();
        java.util.Comparator<java.io.File> fileComparator17 = entryComparator13.thenComparing(fileComparator16);
        java.util.Comparator<java.io.File> fileComparator18 = fileComparator12.thenComparing((java.util.Comparator<java.io.File>) entryComparator13);
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator19 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file20 = null;
        fileEntryIterator19.current = file20;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive22 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest23 = explodedArchive22.manifest;
        explodedArchive22.recursive = false;
        java.util.jar.Manifest manifest26 = explodedArchive22.manifest;
        java.io.File file27 = explodedArchive22.manifestFile;
        java.io.File file28 = null;
        java.io.File file29 = explodedArchive22.getManifestFile(file28);
        java.util.Iterator<java.io.File> fileItor30 = fileEntryIterator19.listFiles(file29);
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator31 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file32 = null;
        fileEntryIterator31.current = file32;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive34 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest35 = explodedArchive34.manifest;
        explodedArchive34.recursive = false;
        java.util.jar.Manifest manifest38 = explodedArchive34.manifest;
        java.io.File file39 = explodedArchive34.manifestFile;
        java.io.File file40 = null;
        java.io.File file41 = explodedArchive34.getManifestFile(file40);
        java.util.Iterator<java.io.File> fileItor42 = fileEntryIterator31.listFiles(file41);
        java.io.File file43 = fileEntryIterator31.current;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator44 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file45 = null;
        fileEntryIterator44.current = file45;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive47 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest48 = explodedArchive47.manifest;
        explodedArchive47.recursive = false;
        java.util.jar.Manifest manifest51 = explodedArchive47.manifest;
        java.io.File file52 = explodedArchive47.manifestFile;
        java.io.File file53 = null;
        java.io.File file54 = explodedArchive47.getManifestFile(file53);
        java.util.Iterator<java.io.File> fileItor55 = fileEntryIterator44.listFiles(file54);
        java.util.ArrayDeque<java.util.Iterator<java.io.File>> fileItorQueue56 = new java.util.ArrayDeque<java.util.Iterator<java.io.File>>();
        boolean boolean57 = fileItorQueue56.add(fileItor55);
        fileEntryIterator31.stack = fileItorQueue56;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive59 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest60 = explodedArchive59.manifest;
        explodedArchive59.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive63 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest64 = explodedArchive63.manifest;
        explodedArchive63.recursive = false;
        java.util.jar.Manifest manifest67 = explodedArchive63.manifest;
        java.io.File file68 = explodedArchive63.manifestFile;
        java.io.File file69 = null;
        java.io.File file70 = explodedArchive63.getManifestFile(file69);
        explodedArchive59.manifestFile = file69;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive72 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest73 = explodedArchive72.manifest;
        explodedArchive72.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive76 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest77 = explodedArchive76.manifest;
        explodedArchive76.recursive = false;
        java.util.jar.Manifest manifest80 = explodedArchive76.manifest;
        java.io.File file81 = explodedArchive76.manifestFile;
        java.io.File file82 = null;
        java.io.File file83 = explodedArchive76.getManifestFile(file82);
        explodedArchive72.manifestFile = file82;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive85 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest86 = explodedArchive85.manifest;
        explodedArchive85.recursive = false;
        java.util.jar.Manifest manifest89 = explodedArchive85.manifest;
        java.io.File file90 = explodedArchive85.manifestFile;
        java.io.File file91 = null;
        java.io.File file92 = explodedArchive85.getManifestFile(file91);
        explodedArchive72.manifestFile = file92;
        explodedArchive59.root = file92;
        java.util.Iterator<java.io.File> fileItor95 = fileEntryIterator31.listFiles(file92);
        java.util.Comparator<java.io.File> fileComparator96 = fileEntryIterator31.entryComparator;
        fileEntryIterator19.entryComparator = fileComparator96;
        java.util.Comparator<java.io.File> fileComparator98 = fileComparator18.thenComparing(fileComparator96);
        java.util.Comparator<java.io.File> fileComparator99 = fileComparator18.reversed();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file29.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file29.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file41.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file41.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file54.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file54.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file70.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file70.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest73);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest77);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest80);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file81);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file83);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file83.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file83.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest86);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest89);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file90);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file92);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file92.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file92.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor95);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator96);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator98);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator99);
    }

    @Test
    public void test868() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test868");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest1 = explodedArchive0.manifest;
        explodedArchive0.recursive = false;
        java.io.File file4 = null;
        explodedArchive0.root = file4;
        java.io.File file6 = explodedArchive0.root;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive7 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest8 = explodedArchive7.manifest;
        explodedArchive7.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive11 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest12 = explodedArchive11.manifest;
        explodedArchive11.recursive = false;
        java.util.jar.Manifest manifest15 = explodedArchive11.manifest;
        java.io.File file16 = explodedArchive11.manifestFile;
        java.io.File file17 = null;
        java.io.File file18 = explodedArchive11.getManifestFile(file17);
        explodedArchive7.manifestFile = file17;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive20 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest21 = explodedArchive20.manifest;
        explodedArchive20.recursive = false;
        java.util.jar.Manifest manifest24 = explodedArchive20.manifest;
        java.io.File file25 = explodedArchive20.manifestFile;
        java.io.File file26 = null;
        java.io.File file27 = explodedArchive20.getManifestFile(file26);
        explodedArchive7.manifestFile = file27;
        java.io.File file29 = explodedArchive0.getManifestFile(file27);
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntry fileEntry30 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntry();
        java.lang.String str31 = fileEntry30.name;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator32 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file33 = null;
        fileEntryIterator32.current = file33;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive35 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.lang.String str36 = explodedArchive35.toString();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive37 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file38 = explodedArchive37.root;
        java.io.File file39 = null;
        explodedArchive37.manifestFile = file39;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive41 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest42 = explodedArchive41.manifest;
        explodedArchive41.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive45 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest46 = explodedArchive45.manifest;
        explodedArchive45.recursive = false;
        java.util.jar.Manifest manifest49 = explodedArchive45.manifest;
        java.io.File file50 = explodedArchive45.manifestFile;
        java.io.File file51 = null;
        java.io.File file52 = explodedArchive45.getManifestFile(file51);
        explodedArchive41.manifestFile = file51;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive54 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest55 = explodedArchive54.manifest;
        explodedArchive54.recursive = false;
        java.util.jar.Manifest manifest58 = explodedArchive54.manifest;
        java.io.File file59 = explodedArchive54.manifestFile;
        java.io.File file60 = null;
        java.io.File file61 = explodedArchive54.getManifestFile(file60);
        explodedArchive41.manifestFile = file61;
        java.io.File file63 = explodedArchive37.getManifestFile(file61);
        java.io.File file64 = explodedArchive35.getManifestFile(file61);
        fileEntryIterator32.root = file61;
        fileEntry30.file = file61;
        java.io.File file67 = fileEntry30.file;
        explodedArchive0.root = file67;
        java.io.File file69 = explodedArchive0.manifestFile;
        java.util.Spliterator<org.springframework.boot.loader.archive.Archive.Entry> entrySpliterator70 = explodedArchive0.spliterator();
        explodedArchive0.recursive = false;
        java.lang.String str73 = explodedArchive0.toString();
        explodedArchive0.recursive = true;
        java.io.File file76 = explodedArchive0.manifestFile;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file18.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file18.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file27.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file27.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file29.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file29.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str36 + "' != '" + "exploded archive" + "'", str36.equals("exploded archive"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file52.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file52.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file61.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file61.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file63.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file63.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file64.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file64.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file67.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file67.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(entrySpliterator70);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertTrue("'" + str73 + "' != '" + "file:/server/study-execution/new-nimrod/nimrod-hunoroutput-test-dest/spring-boot/af20dc6cc45c032573413c401f9f73aa75371744/randoop_1/META-INF/MANIFEST.MF" + "'", str73.equals("file:/server/study-execution/new-nimrod/nimrod-hunoroutput-test-dest/spring-boot/af20dc6cc45c032573413c401f9f73aa75371744/randoop_1/META-INF/MANIFEST.MF"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file76);
    }

    @Test
    public void test869() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test869");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest1 = explodedArchive0.manifest;
        java.util.jar.Manifest manifest2 = null;
        explodedArchive0.manifest = manifest2;
        java.io.File file4 = explodedArchive0.root;
        java.util.jar.Manifest manifest5 = null;
        explodedArchive0.manifest = manifest5;
        explodedArchive0.recursive = true;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator<org.springframework.boot.loader.archive.Archive.Entry> entryItor9 = explodedArchive0.iterator();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file4);
    }

    @Test
    public void test870() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test870");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntry fileEntry0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntry();
        java.lang.String str1 = fileEntry0.getName();
        fileEntry0.name = "hi!";
        java.lang.String str4 = fileEntry0.name;
        java.lang.String str5 = fileEntry0.getName();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str4 + "' != '" + "hi!" + "'", str4.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "hi!" + "'", str5.equals("hi!"));
    }

    @Test
    public void test871() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test871");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file1 = explodedArchive0.root;
        java.io.File file2 = explodedArchive0.manifestFile;
        java.util.jar.Manifest manifest3 = null;
        explodedArchive0.manifest = manifest3;
        explodedArchive0.recursive = true;
        java.io.File file7 = explodedArchive0.manifestFile;
        java.lang.String str8 = explodedArchive0.toString();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str8 + "' != '" + "exploded archive" + "'", str8.equals("exploded archive"));
    }

    @Test
    public void test872() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test872");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file1 = null;
        fileEntryIterator0.current = file1;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive3 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest4 = explodedArchive3.manifest;
        explodedArchive3.recursive = false;
        java.util.jar.Manifest manifest7 = explodedArchive3.manifest;
        java.io.File file8 = explodedArchive3.manifestFile;
        java.io.File file9 = null;
        java.io.File file10 = explodedArchive3.getManifestFile(file9);
        java.util.Iterator<java.io.File> fileItor11 = fileEntryIterator0.listFiles(file10);
        java.io.File file12 = fileEntryIterator0.root;
        java.io.File file13 = fileEntryIterator0.root;
        java.io.File file14 = fileEntryIterator0.current;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive15 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest16 = explodedArchive15.manifest;
        java.util.jar.Manifest manifest17 = null;
        explodedArchive15.manifest = manifest17;
        java.io.File file19 = explodedArchive15.root;
        java.util.jar.Manifest manifest20 = null;
        explodedArchive15.manifest = manifest20;
        java.util.jar.Manifest manifest22 = explodedArchive15.manifest;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive23 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest24 = explodedArchive23.manifest;
        explodedArchive23.recursive = false;
        java.io.File file27 = null;
        explodedArchive23.root = file27;
        java.io.File file29 = explodedArchive23.root;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive30 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest31 = explodedArchive30.manifest;
        explodedArchive30.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive34 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest35 = explodedArchive34.manifest;
        explodedArchive34.recursive = false;
        java.util.jar.Manifest manifest38 = explodedArchive34.manifest;
        java.io.File file39 = explodedArchive34.manifestFile;
        java.io.File file40 = null;
        java.io.File file41 = explodedArchive34.getManifestFile(file40);
        explodedArchive30.manifestFile = file40;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive43 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest44 = explodedArchive43.manifest;
        explodedArchive43.recursive = false;
        java.util.jar.Manifest manifest47 = explodedArchive43.manifest;
        java.io.File file48 = explodedArchive43.manifestFile;
        java.io.File file49 = null;
        java.io.File file50 = explodedArchive43.getManifestFile(file49);
        explodedArchive30.manifestFile = file50;
        java.io.File file52 = explodedArchive23.getManifestFile(file50);
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntry fileEntry53 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntry();
        java.lang.String str54 = fileEntry53.name;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator55 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file56 = null;
        fileEntryIterator55.current = file56;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive58 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.lang.String str59 = explodedArchive58.toString();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive60 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file61 = explodedArchive60.root;
        java.io.File file62 = null;
        explodedArchive60.manifestFile = file62;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive64 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest65 = explodedArchive64.manifest;
        explodedArchive64.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive68 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest69 = explodedArchive68.manifest;
        explodedArchive68.recursive = false;
        java.util.jar.Manifest manifest72 = explodedArchive68.manifest;
        java.io.File file73 = explodedArchive68.manifestFile;
        java.io.File file74 = null;
        java.io.File file75 = explodedArchive68.getManifestFile(file74);
        explodedArchive64.manifestFile = file74;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive77 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest78 = explodedArchive77.manifest;
        explodedArchive77.recursive = false;
        java.util.jar.Manifest manifest81 = explodedArchive77.manifest;
        java.io.File file82 = explodedArchive77.manifestFile;
        java.io.File file83 = null;
        java.io.File file84 = explodedArchive77.getManifestFile(file83);
        explodedArchive64.manifestFile = file84;
        java.io.File file86 = explodedArchive60.getManifestFile(file84);
        java.io.File file87 = explodedArchive58.getManifestFile(file84);
        fileEntryIterator55.root = file84;
        fileEntry53.file = file84;
        java.io.File file90 = fileEntry53.file;
        explodedArchive23.root = file90;
        java.io.File file92 = explodedArchive23.manifestFile;
        java.io.File file93 = explodedArchive23.root;
        java.io.File file94 = explodedArchive15.getManifestFile(file93);
        fileEntryIterator0.root = file94;
        // The following exception was thrown during execution in test generation
        try {
            org.springframework.boot.loader.archive.ExplodedArchive explodedArchive96 = new org.springframework.boot.loader.archive.ExplodedArchive(file94);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid source folder META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file41.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file41.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file50.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file50.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file52.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file52.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str59 + "' != '" + "exploded archive" + "'", str59.equals("exploded archive"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file73);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file75);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file75.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file75.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest78);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest81);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file82);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file84);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file84.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file84.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file86);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file86.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file86.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file87);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file87.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file87.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file90);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file90.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file90.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file92);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file93);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file93.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file93.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file94);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file94.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file94.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
    }

    @Test
    public void test873() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test873");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntry fileEntry0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntry();
        java.lang.String str1 = fileEntry0.getName();
        java.io.File file2 = fileEntry0.getFile();
        java.lang.String str3 = fileEntry0.getName();
        java.io.File file4 = fileEntry0.file;
        java.lang.String str5 = fileEntry0.getName();
        java.io.File file6 = fileEntry0.getFile();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive7 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file8 = explodedArchive7.root;
        java.io.File file9 = null;
        explodedArchive7.manifestFile = file9;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive11 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest12 = explodedArchive11.manifest;
        explodedArchive11.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive15 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest16 = explodedArchive15.manifest;
        explodedArchive15.recursive = false;
        java.util.jar.Manifest manifest19 = explodedArchive15.manifest;
        java.io.File file20 = explodedArchive15.manifestFile;
        java.io.File file21 = null;
        java.io.File file22 = explodedArchive15.getManifestFile(file21);
        explodedArchive11.manifestFile = file21;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive24 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest25 = explodedArchive24.manifest;
        explodedArchive24.recursive = false;
        java.util.jar.Manifest manifest28 = explodedArchive24.manifest;
        java.io.File file29 = explodedArchive24.manifestFile;
        java.io.File file30 = null;
        java.io.File file31 = explodedArchive24.getManifestFile(file30);
        explodedArchive11.manifestFile = file31;
        java.io.File file33 = explodedArchive7.getManifestFile(file31);
        java.io.File file34 = explodedArchive7.root;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator35 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        boolean boolean36 = fileEntryIterator35.hasNext();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator37 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator38 = entryComparator37.reversed();
        java.util.Comparator<java.io.File> fileComparator39 = fileComparator38.reversed();
        fileEntryIterator35.entryComparator = fileComparator39;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive41 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file42 = explodedArchive41.root;
        java.io.File file43 = null;
        explodedArchive41.manifestFile = file43;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive45 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest46 = explodedArchive45.manifest;
        explodedArchive45.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive49 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest50 = explodedArchive49.manifest;
        explodedArchive49.recursive = false;
        java.util.jar.Manifest manifest53 = explodedArchive49.manifest;
        java.io.File file54 = explodedArchive49.manifestFile;
        java.io.File file55 = null;
        java.io.File file56 = explodedArchive49.getManifestFile(file55);
        explodedArchive45.manifestFile = file55;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive58 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest59 = explodedArchive58.manifest;
        explodedArchive58.recursive = false;
        java.util.jar.Manifest manifest62 = explodedArchive58.manifest;
        java.io.File file63 = explodedArchive58.manifestFile;
        java.io.File file64 = null;
        java.io.File file65 = explodedArchive58.getManifestFile(file64);
        explodedArchive45.manifestFile = file65;
        java.io.File file67 = explodedArchive41.getManifestFile(file65);
        java.util.Iterator<java.io.File> fileItor68 = fileEntryIterator35.listFiles(file67);
        explodedArchive7.manifestFile = file67;
        java.io.File file70 = explodedArchive7.manifestFile;
        fileEntry0.file = file70;
        java.lang.String str72 = fileEntry0.getName();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file22.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file22.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file31.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file31.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file33.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file33.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file56.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file56.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file65.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file65.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file67.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file67.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file70.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file70.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str72);
    }

    @Test
    public void test874() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test874");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntry fileEntry0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntry();
        java.io.File file1 = fileEntry0.getFile();
        java.io.File file2 = fileEntry0.getFile();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive3 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file4 = explodedArchive3.root;
        java.io.File file5 = null;
        explodedArchive3.manifestFile = file5;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive7 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest8 = explodedArchive7.manifest;
        explodedArchive7.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive11 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest12 = explodedArchive11.manifest;
        explodedArchive11.recursive = false;
        java.util.jar.Manifest manifest15 = explodedArchive11.manifest;
        java.io.File file16 = explodedArchive11.manifestFile;
        java.io.File file17 = null;
        java.io.File file18 = explodedArchive11.getManifestFile(file17);
        explodedArchive7.manifestFile = file17;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive20 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest21 = explodedArchive20.manifest;
        explodedArchive20.recursive = false;
        java.util.jar.Manifest manifest24 = explodedArchive20.manifest;
        java.io.File file25 = explodedArchive20.manifestFile;
        java.io.File file26 = null;
        java.io.File file27 = explodedArchive20.getManifestFile(file26);
        explodedArchive7.manifestFile = file27;
        java.io.File file29 = explodedArchive3.getManifestFile(file27);
        fileEntry0.file = file29;
        java.io.File file31 = fileEntry0.file;
        fileEntry0.name = "exploded archive";
        java.io.File file34 = fileEntry0.file;
        java.lang.String str35 = fileEntry0.getName();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file18.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file18.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file27.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file27.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file29.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file29.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file31.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file31.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file34.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file34.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str35 + "' != '" + "exploded archive" + "'", str35.equals("exploded archive"));
    }

    @Test
    public void test875() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test875");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file1 = null;
        fileEntryIterator0.current = file1;
        fileEntryIterator0.recursive = true;
        boolean boolean5 = fileEntryIterator0.hasNext();
        // The following exception was thrown during execution in test generation
        try {
            org.springframework.boot.loader.archive.Archive.Entry entry6 = fileEntryIterator0.next();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test876() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test876");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        boolean boolean1 = fileEntryIterator0.recursive;
        java.io.File file2 = fileEntryIterator0.current;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator3 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file4 = null;
        fileEntryIterator3.current = file4;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive6 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest7 = explodedArchive6.manifest;
        explodedArchive6.recursive = false;
        java.util.jar.Manifest manifest10 = explodedArchive6.manifest;
        java.io.File file11 = explodedArchive6.manifestFile;
        java.io.File file12 = null;
        java.io.File file13 = explodedArchive6.getManifestFile(file12);
        java.util.Iterator<java.io.File> fileItor14 = fileEntryIterator3.listFiles(file13);
        java.io.File file15 = fileEntryIterator3.root;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive16 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.lang.String str17 = explodedArchive16.toString();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive18 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file19 = explodedArchive18.root;
        java.io.File file20 = null;
        explodedArchive18.manifestFile = file20;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive22 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest23 = explodedArchive22.manifest;
        explodedArchive22.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive26 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest27 = explodedArchive26.manifest;
        explodedArchive26.recursive = false;
        java.util.jar.Manifest manifest30 = explodedArchive26.manifest;
        java.io.File file31 = explodedArchive26.manifestFile;
        java.io.File file32 = null;
        java.io.File file33 = explodedArchive26.getManifestFile(file32);
        explodedArchive22.manifestFile = file32;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive35 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest36 = explodedArchive35.manifest;
        explodedArchive35.recursive = false;
        java.util.jar.Manifest manifest39 = explodedArchive35.manifest;
        java.io.File file40 = explodedArchive35.manifestFile;
        java.io.File file41 = null;
        java.io.File file42 = explodedArchive35.getManifestFile(file41);
        explodedArchive22.manifestFile = file42;
        java.io.File file44 = explodedArchive18.getManifestFile(file42);
        java.io.File file45 = explodedArchive16.getManifestFile(file42);
        fileEntryIterator3.root = file42;
        java.util.Iterator<java.io.File> fileItor47 = fileEntryIterator0.listFiles(file42);
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator48 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        boolean boolean49 = fileEntryIterator48.hasNext();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator50 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator51 = entryComparator50.reversed();
        java.util.Comparator<java.io.File> fileComparator52 = fileComparator51.reversed();
        fileEntryIterator48.entryComparator = fileComparator52;
        java.util.Comparator<java.io.File> fileComparator54 = fileEntryIterator48.entryComparator;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator55 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator56 = entryComparator55.reversed();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator57 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator58 = entryComparator57.reversed();
        java.util.Comparator<java.io.File> fileComparator59 = entryComparator55.thenComparing(fileComparator58);
        java.util.Comparator<java.io.File> fileComparator60 = fileComparator54.thenComparing(fileComparator58);
        fileEntryIterator0.entryComparator = fileComparator58;
        java.io.File file62 = null;
        fileEntryIterator0.current = file62;
        java.lang.Class<?> wildcardClass64 = fileEntryIterator0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file13.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file13.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str17 + "' != '" + "exploded archive" + "'", str17.equals("exploded archive"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file33.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file33.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file42.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file42.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file44.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file44.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file45.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file45.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass64);
    }

    @Test
    public void test877() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test877");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest1 = explodedArchive0.manifest;
        explodedArchive0.recursive = false;
        java.io.File file4 = null;
        explodedArchive0.root = file4;
        java.io.File file6 = explodedArchive0.root;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive7 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest8 = explodedArchive7.manifest;
        explodedArchive7.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive11 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest12 = explodedArchive11.manifest;
        explodedArchive11.recursive = false;
        java.util.jar.Manifest manifest15 = explodedArchive11.manifest;
        java.io.File file16 = explodedArchive11.manifestFile;
        java.io.File file17 = null;
        java.io.File file18 = explodedArchive11.getManifestFile(file17);
        explodedArchive7.manifestFile = file17;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive20 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest21 = explodedArchive20.manifest;
        explodedArchive20.recursive = false;
        java.util.jar.Manifest manifest24 = explodedArchive20.manifest;
        java.io.File file25 = explodedArchive20.manifestFile;
        java.io.File file26 = null;
        java.io.File file27 = explodedArchive20.getManifestFile(file26);
        explodedArchive7.manifestFile = file27;
        java.io.File file29 = explodedArchive0.getManifestFile(file27);
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntry fileEntry30 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntry();
        java.lang.String str31 = fileEntry30.name;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator32 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file33 = null;
        fileEntryIterator32.current = file33;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive35 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.lang.String str36 = explodedArchive35.toString();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive37 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file38 = explodedArchive37.root;
        java.io.File file39 = null;
        explodedArchive37.manifestFile = file39;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive41 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest42 = explodedArchive41.manifest;
        explodedArchive41.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive45 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest46 = explodedArchive45.manifest;
        explodedArchive45.recursive = false;
        java.util.jar.Manifest manifest49 = explodedArchive45.manifest;
        java.io.File file50 = explodedArchive45.manifestFile;
        java.io.File file51 = null;
        java.io.File file52 = explodedArchive45.getManifestFile(file51);
        explodedArchive41.manifestFile = file51;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive54 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest55 = explodedArchive54.manifest;
        explodedArchive54.recursive = false;
        java.util.jar.Manifest manifest58 = explodedArchive54.manifest;
        java.io.File file59 = explodedArchive54.manifestFile;
        java.io.File file60 = null;
        java.io.File file61 = explodedArchive54.getManifestFile(file60);
        explodedArchive41.manifestFile = file61;
        java.io.File file63 = explodedArchive37.getManifestFile(file61);
        java.io.File file64 = explodedArchive35.getManifestFile(file61);
        fileEntryIterator32.root = file61;
        fileEntry30.file = file61;
        java.io.File file67 = fileEntry30.file;
        explodedArchive0.root = file67;
        java.util.jar.Manifest manifest69 = null;
        explodedArchive0.manifest = manifest69;
        java.lang.String str71 = explodedArchive0.toString();
        java.util.Spliterator<org.springframework.boot.loader.archive.Archive.Entry> entrySpliterator72 = explodedArchive0.spliterator();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file18.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file18.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file27.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file27.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file29.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file29.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str36 + "' != '" + "exploded archive" + "'", str36.equals("exploded archive"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file52.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file52.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file61.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file61.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file63.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file63.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file64.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file64.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file67.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file67.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertTrue("'" + str71 + "' != '" + "file:/server/study-execution/new-nimrod/nimrod-hunoroutput-test-dest/spring-boot/af20dc6cc45c032573413c401f9f73aa75371744/randoop_1/META-INF/MANIFEST.MF" + "'", str71.equals("file:/server/study-execution/new-nimrod/nimrod-hunoroutput-test-dest/spring-boot/af20dc6cc45c032573413c401f9f73aa75371744/randoop_1/META-INF/MANIFEST.MF"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(entrySpliterator72);
    }

    @Test
    public void test878() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test878");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file1 = null;
        fileEntryIterator0.current = file1;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive3 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest4 = explodedArchive3.manifest;
        explodedArchive3.recursive = false;
        java.util.jar.Manifest manifest7 = explodedArchive3.manifest;
        java.io.File file8 = explodedArchive3.manifestFile;
        java.io.File file9 = null;
        java.io.File file10 = explodedArchive3.getManifestFile(file9);
        java.util.Iterator<java.io.File> fileItor11 = fileEntryIterator0.listFiles(file10);
        java.io.File file12 = fileEntryIterator0.root;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive13 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.lang.String str14 = explodedArchive13.toString();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive15 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file16 = explodedArchive15.root;
        java.io.File file17 = null;
        explodedArchive15.manifestFile = file17;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive19 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest20 = explodedArchive19.manifest;
        explodedArchive19.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive23 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest24 = explodedArchive23.manifest;
        explodedArchive23.recursive = false;
        java.util.jar.Manifest manifest27 = explodedArchive23.manifest;
        java.io.File file28 = explodedArchive23.manifestFile;
        java.io.File file29 = null;
        java.io.File file30 = explodedArchive23.getManifestFile(file29);
        explodedArchive19.manifestFile = file29;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive32 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest33 = explodedArchive32.manifest;
        explodedArchive32.recursive = false;
        java.util.jar.Manifest manifest36 = explodedArchive32.manifest;
        java.io.File file37 = explodedArchive32.manifestFile;
        java.io.File file38 = null;
        java.io.File file39 = explodedArchive32.getManifestFile(file38);
        explodedArchive19.manifestFile = file39;
        java.io.File file41 = explodedArchive15.getManifestFile(file39);
        java.io.File file42 = explodedArchive13.getManifestFile(file39);
        fileEntryIterator0.root = file39;
        boolean boolean44 = fileEntryIterator0.hasNext();
        // The following exception was thrown during execution in test generation
        try {
            fileEntryIterator0.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: remove");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str14 + "' != '" + "exploded archive" + "'", str14.equals("exploded archive"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file30.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file30.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file39.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file39.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file41.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file41.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file42.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file42.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
    }

    @Test
    public void test879() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test879");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest1 = explodedArchive0.manifest;
        java.util.jar.Manifest manifest2 = null;
        explodedArchive0.manifest = manifest2;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator4 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        boolean boolean5 = fileEntryIterator4.hasNext();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator6 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator7 = entryComparator6.reversed();
        java.util.Comparator<java.io.File> fileComparator8 = fileComparator7.reversed();
        fileEntryIterator4.entryComparator = fileComparator8;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive10 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file11 = explodedArchive10.root;
        java.io.File file12 = null;
        explodedArchive10.manifestFile = file12;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive14 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest15 = explodedArchive14.manifest;
        explodedArchive14.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive18 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest19 = explodedArchive18.manifest;
        explodedArchive18.recursive = false;
        java.util.jar.Manifest manifest22 = explodedArchive18.manifest;
        java.io.File file23 = explodedArchive18.manifestFile;
        java.io.File file24 = null;
        java.io.File file25 = explodedArchive18.getManifestFile(file24);
        explodedArchive14.manifestFile = file24;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive27 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest28 = explodedArchive27.manifest;
        explodedArchive27.recursive = false;
        java.util.jar.Manifest manifest31 = explodedArchive27.manifest;
        java.io.File file32 = explodedArchive27.manifestFile;
        java.io.File file33 = null;
        java.io.File file34 = explodedArchive27.getManifestFile(file33);
        explodedArchive14.manifestFile = file34;
        java.io.File file36 = explodedArchive10.getManifestFile(file34);
        java.util.Iterator<java.io.File> fileItor37 = fileEntryIterator4.listFiles(file36);
        java.io.File file38 = explodedArchive0.getManifestFile(file36);
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntry fileEntry39 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntry();
        java.io.File file40 = fileEntry39.file;
        java.lang.String str41 = fileEntry39.name;
        java.io.File file42 = fileEntry39.file;
        java.io.File file43 = fileEntry39.file;
        java.lang.String str44 = fileEntry39.name;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive45 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.lang.String str46 = explodedArchive45.toString();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive47 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file48 = explodedArchive47.root;
        java.io.File file49 = null;
        explodedArchive47.manifestFile = file49;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive51 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest52 = explodedArchive51.manifest;
        explodedArchive51.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive55 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest56 = explodedArchive55.manifest;
        explodedArchive55.recursive = false;
        java.util.jar.Manifest manifest59 = explodedArchive55.manifest;
        java.io.File file60 = explodedArchive55.manifestFile;
        java.io.File file61 = null;
        java.io.File file62 = explodedArchive55.getManifestFile(file61);
        explodedArchive51.manifestFile = file61;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive64 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest65 = explodedArchive64.manifest;
        explodedArchive64.recursive = false;
        java.util.jar.Manifest manifest68 = explodedArchive64.manifest;
        java.io.File file69 = explodedArchive64.manifestFile;
        java.io.File file70 = null;
        java.io.File file71 = explodedArchive64.getManifestFile(file70);
        explodedArchive51.manifestFile = file71;
        java.io.File file73 = explodedArchive47.getManifestFile(file71);
        java.io.File file74 = explodedArchive45.getManifestFile(file71);
        fileEntry39.file = file71;
        explodedArchive0.manifestFile = file71;
        java.util.jar.Manifest manifest77 = null;
        explodedArchive0.manifest = manifest77;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Spliterator<org.springframework.boot.loader.archive.Archive.Entry> entrySpliterator79 = explodedArchive0.spliterator();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file25.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file25.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file34.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file34.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file36.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file36.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file38.getParent(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file38.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str46 + "' != '" + "exploded archive" + "'", str46.equals("exploded archive"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file62.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file62.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file71.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file71.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file73);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file73.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file73.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file74.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file74.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
    }

    @Test
    public void test880() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test880");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest1 = explodedArchive0.manifest;
        explodedArchive0.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive4 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest5 = explodedArchive4.manifest;
        explodedArchive4.recursive = false;
        java.util.jar.Manifest manifest8 = explodedArchive4.manifest;
        java.io.File file9 = explodedArchive4.manifestFile;
        java.io.File file10 = null;
        java.io.File file11 = explodedArchive4.getManifestFile(file10);
        explodedArchive0.manifestFile = file10;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive13 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest14 = explodedArchive13.manifest;
        explodedArchive13.recursive = false;
        java.util.jar.Manifest manifest17 = explodedArchive13.manifest;
        java.io.File file18 = explodedArchive13.manifestFile;
        java.io.File file19 = null;
        java.io.File file20 = explodedArchive13.getManifestFile(file19);
        explodedArchive0.manifestFile = file20;
        boolean boolean22 = explodedArchive0.recursive;
        java.io.File file23 = explodedArchive0.root;
        java.util.jar.Manifest manifest24 = explodedArchive0.getManifest();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file11.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file11.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file20.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file20.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest24);
    }

    @Test
    public void test881() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test881");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file1 = null;
        fileEntryIterator0.current = file1;
        fileEntryIterator0.recursive = true;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator5 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator6 = entryComparator5.reversed();
        java.util.Comparator<java.io.File> fileComparator7 = entryComparator5.reversed();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive8 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest9 = explodedArchive8.manifest;
        explodedArchive8.recursive = false;
        java.util.jar.Manifest manifest12 = explodedArchive8.manifest;
        java.io.File file13 = explodedArchive8.manifestFile;
        java.io.File file14 = null;
        java.io.File file15 = explodedArchive8.getManifestFile(file14);
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive16 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest17 = explodedArchive16.manifest;
        explodedArchive16.recursive = false;
        java.io.File file20 = null;
        explodedArchive16.root = file20;
        java.io.File file22 = explodedArchive16.root;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive23 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest24 = explodedArchive23.manifest;
        explodedArchive23.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive27 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest28 = explodedArchive27.manifest;
        explodedArchive27.recursive = false;
        java.util.jar.Manifest manifest31 = explodedArchive27.manifest;
        java.io.File file32 = explodedArchive27.manifestFile;
        java.io.File file33 = null;
        java.io.File file34 = explodedArchive27.getManifestFile(file33);
        explodedArchive23.manifestFile = file33;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive36 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest37 = explodedArchive36.manifest;
        explodedArchive36.recursive = false;
        java.util.jar.Manifest manifest40 = explodedArchive36.manifest;
        java.io.File file41 = explodedArchive36.manifestFile;
        java.io.File file42 = null;
        java.io.File file43 = explodedArchive36.getManifestFile(file42);
        explodedArchive23.manifestFile = file43;
        java.io.File file45 = explodedArchive16.getManifestFile(file43);
        int int46 = entryComparator5.compare(file15, file43);
        java.util.Iterator<java.io.File> fileItor47 = fileEntryIterator0.listFiles(file15);
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator48 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        boolean boolean49 = fileEntryIterator48.hasNext();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator50 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator51 = entryComparator50.reversed();
        java.util.Comparator<java.io.File> fileComparator52 = fileComparator51.reversed();
        fileEntryIterator48.entryComparator = fileComparator52;
        java.util.Comparator<java.io.File> fileComparator54 = fileEntryIterator48.entryComparator;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator55 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator56 = entryComparator55.reversed();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator57 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator58 = entryComparator57.reversed();
        java.util.Comparator<java.io.File> fileComparator59 = entryComparator55.thenComparing(fileComparator58);
        java.util.Comparator<java.io.File> fileComparator60 = fileComparator54.thenComparing(fileComparator58);
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator61 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator62 = entryComparator61.reversed();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator63 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator64 = entryComparator63.reversed();
        java.util.Comparator<java.io.File> fileComparator65 = entryComparator61.thenComparing(fileComparator64);
        java.util.Comparator<java.io.File> fileComparator66 = fileComparator58.thenComparing(fileComparator64);
        fileEntryIterator0.entryComparator = fileComparator64;
        java.util.Comparator<java.io.File> fileComparator68 = fileEntryIterator0.entryComparator;
        java.io.File file69 = fileEntryIterator0.root;
        java.util.Comparator<java.io.File> fileComparator70 = fileEntryIterator0.entryComparator;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator71 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        boolean boolean72 = fileEntryIterator71.recursive;
        java.io.File file73 = fileEntryIterator71.current;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator74 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        boolean boolean75 = fileEntryIterator74.hasNext();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator76 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator77 = entryComparator76.reversed();
        java.util.Comparator<java.io.File> fileComparator78 = fileComparator77.reversed();
        fileEntryIterator74.entryComparator = fileComparator78;
        java.util.Comparator<java.io.File> fileComparator80 = fileEntryIterator74.entryComparator;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator81 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator82 = entryComparator81.reversed();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator83 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator84 = entryComparator83.reversed();
        java.util.Comparator<java.io.File> fileComparator85 = entryComparator81.thenComparing(fileComparator84);
        java.util.Comparator<java.io.File> fileComparator86 = fileComparator80.thenComparing(fileComparator84);
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator87 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator88 = entryComparator87.reversed();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator89 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator90 = entryComparator89.reversed();
        java.util.Comparator<java.io.File> fileComparator91 = entryComparator87.thenComparing(fileComparator90);
        java.util.Comparator<java.io.File> fileComparator92 = fileComparator86.thenComparing((java.util.Comparator<java.io.File>) entryComparator87);
        fileEntryIterator71.entryComparator = fileComparator86;
        java.util.Comparator<java.io.File> fileComparator94 = fileComparator86.reversed();
        java.util.Comparator<java.io.File> fileComparator95 = fileComparator94.reversed();
        java.util.Comparator<java.io.File> fileComparator96 = fileComparator95.reversed();
        java.util.Comparator<java.io.File> fileComparator97 = fileComparator96.reversed();
        java.util.Comparator<java.io.File> fileComparator98 = fileComparator70.thenComparing(fileComparator97);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file15.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file15.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file34.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file34.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file43.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file43.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file45.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file45.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file73);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator77);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator78);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator80);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator82);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator84);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator85);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator86);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator88);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator90);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator91);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator92);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator94);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator95);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator96);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator97);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator98);
    }

    @Test
    public void test882() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test882");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.lang.String str1 = explodedArchive0.toString();
        explodedArchive0.recursive = true;
        java.io.File file4 = null;
        java.io.File file5 = explodedArchive0.getManifestFile(file4);
        java.io.File file6 = explodedArchive0.root;
        explodedArchive0.recursive = false;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str1 + "' != '" + "exploded archive" + "'", str1.equals("exploded archive"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file5.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file5.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file6);
    }

    @Test
    public void test883() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test883");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest1 = explodedArchive0.manifest;
        explodedArchive0.recursive = false;
        java.util.jar.Manifest manifest4 = explodedArchive0.manifest;
        explodedArchive0.recursive = true;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator7 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file8 = null;
        fileEntryIterator7.current = file8;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive10 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.lang.String str11 = explodedArchive10.toString();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive12 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file13 = explodedArchive12.root;
        java.io.File file14 = null;
        explodedArchive12.manifestFile = file14;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive16 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest17 = explodedArchive16.manifest;
        explodedArchive16.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive20 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest21 = explodedArchive20.manifest;
        explodedArchive20.recursive = false;
        java.util.jar.Manifest manifest24 = explodedArchive20.manifest;
        java.io.File file25 = explodedArchive20.manifestFile;
        java.io.File file26 = null;
        java.io.File file27 = explodedArchive20.getManifestFile(file26);
        explodedArchive16.manifestFile = file26;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive29 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest30 = explodedArchive29.manifest;
        explodedArchive29.recursive = false;
        java.util.jar.Manifest manifest33 = explodedArchive29.manifest;
        java.io.File file34 = explodedArchive29.manifestFile;
        java.io.File file35 = null;
        java.io.File file36 = explodedArchive29.getManifestFile(file35);
        explodedArchive16.manifestFile = file36;
        java.io.File file38 = explodedArchive12.getManifestFile(file36);
        java.io.File file39 = explodedArchive10.getManifestFile(file36);
        fileEntryIterator7.root = file36;
        java.io.File file41 = fileEntryIterator7.root;
        explodedArchive0.root = file41;
        java.lang.Class<?> wildcardClass43 = file41.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str11 + "' != '" + "exploded archive" + "'", str11.equals("exploded archive"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file27.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file27.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file36.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file36.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file38.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file38.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file39.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file39.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file41.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file41.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass43);
    }

    @Test
    public void test884() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test884");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntry fileEntry0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntry();
        java.lang.String str1 = fileEntry0.getName();
        fileEntry0.name = "hi!";
        fileEntry0.name = "exploded archive";
        java.io.File file6 = fileEntry0.file;
        java.lang.String str7 = fileEntry0.name;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str7 + "' != '" + "exploded archive" + "'", str7.equals("exploded archive"));
    }

    @Test
    public void test885() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test885");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest1 = explodedArchive0.manifest;
        explodedArchive0.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive4 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest5 = explodedArchive4.manifest;
        explodedArchive4.recursive = false;
        java.util.jar.Manifest manifest8 = explodedArchive4.manifest;
        java.io.File file9 = explodedArchive4.manifestFile;
        java.io.File file10 = null;
        java.io.File file11 = explodedArchive4.getManifestFile(file10);
        explodedArchive0.manifestFile = file10;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive13 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest14 = explodedArchive13.manifest;
        explodedArchive13.recursive = false;
        java.util.jar.Manifest manifest17 = explodedArchive13.manifest;
        java.io.File file18 = explodedArchive13.manifestFile;
        java.io.File file19 = null;
        java.io.File file20 = explodedArchive13.getManifestFile(file19);
        explodedArchive0.manifestFile = file20;
        java.lang.String str22 = explodedArchive0.toString();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file11.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file11.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file20.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file20.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str22 + "' != '" + "exploded archive" + "'", str22.equals("exploded archive"));
    }

    @Test
    public void test886() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test886");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest1 = explodedArchive0.manifest;
        explodedArchive0.recursive = false;
        java.util.jar.Manifest manifest4 = explodedArchive0.manifest;
        java.util.jar.Manifest manifest5 = null;
        explodedArchive0.manifest = manifest5;
        java.io.File file7 = explodedArchive0.root;
        java.util.jar.Manifest manifest8 = null;
        explodedArchive0.manifest = manifest8;
        explodedArchive0.recursive = true;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file7);
    }

    @Test
    public void test887() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test887");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file1 = explodedArchive0.root;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive2 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest3 = explodedArchive2.manifest;
        explodedArchive2.recursive = false;
        java.util.jar.Manifest manifest6 = explodedArchive2.manifest;
        java.io.File file7 = explodedArchive2.manifestFile;
        java.io.File file8 = null;
        java.io.File file9 = explodedArchive2.getManifestFile(file8);
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator10 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file11 = null;
        fileEntryIterator10.current = file11;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive13 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.lang.String str14 = explodedArchive13.toString();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive15 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file16 = explodedArchive15.root;
        java.io.File file17 = null;
        explodedArchive15.manifestFile = file17;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive19 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest20 = explodedArchive19.manifest;
        explodedArchive19.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive23 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest24 = explodedArchive23.manifest;
        explodedArchive23.recursive = false;
        java.util.jar.Manifest manifest27 = explodedArchive23.manifest;
        java.io.File file28 = explodedArchive23.manifestFile;
        java.io.File file29 = null;
        java.io.File file30 = explodedArchive23.getManifestFile(file29);
        explodedArchive19.manifestFile = file29;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive32 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest33 = explodedArchive32.manifest;
        explodedArchive32.recursive = false;
        java.util.jar.Manifest manifest36 = explodedArchive32.manifest;
        java.io.File file37 = explodedArchive32.manifestFile;
        java.io.File file38 = null;
        java.io.File file39 = explodedArchive32.getManifestFile(file38);
        explodedArchive19.manifestFile = file39;
        java.io.File file41 = explodedArchive15.getManifestFile(file39);
        java.io.File file42 = explodedArchive13.getManifestFile(file39);
        fileEntryIterator10.root = file39;
        explodedArchive2.root = file39;
        java.io.File file45 = explodedArchive0.getManifestFile(file39);
        boolean boolean46 = explodedArchive0.recursive;
        java.lang.String str47 = explodedArchive0.toString();
        boolean boolean48 = explodedArchive0.recursive;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Spliterator<org.springframework.boot.loader.archive.Archive.Entry> entrySpliterator49 = explodedArchive0.spliterator();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file9.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file9.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str14 + "' != '" + "exploded archive" + "'", str14.equals("exploded archive"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file30.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file30.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file39.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file39.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file41.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file41.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file42.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file42.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file45.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file45.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str47 + "' != '" + "exploded archive" + "'", str47.equals("exploded archive"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
    }

    @Test
    public void test888() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test888");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.lang.String str1 = explodedArchive0.toString();
        explodedArchive0.recursive = true;
        java.lang.String str4 = explodedArchive0.toString();
        java.util.jar.Manifest manifest5 = explodedArchive0.manifest;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive6 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest7 = explodedArchive6.manifest;
        explodedArchive6.recursive = false;
        java.io.File file10 = null;
        explodedArchive6.root = file10;
        java.io.File file12 = explodedArchive6.manifestFile;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive13 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file14 = explodedArchive13.root;
        java.io.File file15 = null;
        explodedArchive13.manifestFile = file15;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive17 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest18 = explodedArchive17.manifest;
        explodedArchive17.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive21 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest22 = explodedArchive21.manifest;
        explodedArchive21.recursive = false;
        java.util.jar.Manifest manifest25 = explodedArchive21.manifest;
        java.io.File file26 = explodedArchive21.manifestFile;
        java.io.File file27 = null;
        java.io.File file28 = explodedArchive21.getManifestFile(file27);
        explodedArchive17.manifestFile = file27;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive30 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest31 = explodedArchive30.manifest;
        explodedArchive30.recursive = false;
        java.util.jar.Manifest manifest34 = explodedArchive30.manifest;
        java.io.File file35 = explodedArchive30.manifestFile;
        java.io.File file36 = null;
        java.io.File file37 = explodedArchive30.getManifestFile(file36);
        explodedArchive17.manifestFile = file37;
        java.io.File file39 = explodedArchive13.getManifestFile(file37);
        java.io.File file40 = explodedArchive6.getManifestFile(file37);
        java.io.File file41 = explodedArchive0.getManifestFile(file40);
        java.lang.String str42 = explodedArchive0.toString();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str1 + "' != '" + "exploded archive" + "'", str1.equals("exploded archive"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str4 + "' != '" + "exploded archive" + "'", str4.equals("exploded archive"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file28.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file28.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file37.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file37.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file39.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file39.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file40.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file40.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file41.getParent(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file41.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str42 + "' != '" + "exploded archive" + "'", str42.equals("exploded archive"));
    }

    @Test
    public void test889() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test889");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntry fileEntry0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntry();
        java.io.File file1 = fileEntry0.getFile();
        fileEntry0.name = "hi!";
        java.io.File file4 = null;
        fileEntry0.file = file4;
        java.lang.String str6 = fileEntry0.name;
        java.io.File file7 = fileEntry0.getFile();
        java.lang.String str8 = fileEntry0.name;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "hi!" + "'", str6.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str8 + "' != '" + "hi!" + "'", str8.equals("hi!"));
    }

    @Test
    public void test890() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test890");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file1 = explodedArchive0.root;
        java.io.File file2 = null;
        explodedArchive0.manifestFile = file2;
        java.io.File file4 = explodedArchive0.root;
        boolean boolean5 = explodedArchive0.recursive;
        explodedArchive0.recursive = true;
        explodedArchive0.recursive = true;
        // The following exception was thrown during execution in test generation
        try {
            java.util.jar.Manifest manifest10 = explodedArchive0.getManifest();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test891() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test891");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntry fileEntry0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntry();
        java.io.File file1 = fileEntry0.getFile();
        fileEntry0.name = "hi!";
        java.io.File file4 = null;
        fileEntry0.file = file4;
        fileEntry0.name = "file:/server/study-execution/new-nimrod/nimrod-hunoroutput-test-dest/spring-boot/af20dc6cc45c032573413c401f9f73aa75371744/randoop_1/META-INF/MANIFEST.MF/META-INF/MANIFEST.MF";
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file1);
    }

    @Test
    public void test892() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test892");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        boolean boolean1 = fileEntryIterator0.recursive;
        java.io.File file2 = fileEntryIterator0.current;
        boolean boolean3 = fileEntryIterator0.hasNext();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator4 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file5 = null;
        fileEntryIterator4.current = file5;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive7 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest8 = explodedArchive7.manifest;
        explodedArchive7.recursive = false;
        java.util.jar.Manifest manifest11 = explodedArchive7.manifest;
        java.io.File file12 = explodedArchive7.manifestFile;
        java.io.File file13 = null;
        java.io.File file14 = explodedArchive7.getManifestFile(file13);
        java.util.Iterator<java.io.File> fileItor15 = fileEntryIterator4.listFiles(file14);
        java.io.File file16 = fileEntryIterator4.root;
        java.io.File file17 = fileEntryIterator4.root;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator18 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file19 = null;
        fileEntryIterator18.current = file19;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive21 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest22 = explodedArchive21.manifest;
        explodedArchive21.recursive = false;
        java.util.jar.Manifest manifest25 = explodedArchive21.manifest;
        java.io.File file26 = explodedArchive21.manifestFile;
        java.io.File file27 = null;
        java.io.File file28 = explodedArchive21.getManifestFile(file27);
        java.util.Iterator<java.io.File> fileItor29 = fileEntryIterator18.listFiles(file28);
        java.util.ArrayDeque<java.util.Iterator<java.io.File>> fileItorQueue30 = new java.util.ArrayDeque<java.util.Iterator<java.io.File>>();
        boolean boolean31 = fileItorQueue30.add(fileItor29);
        fileEntryIterator4.stack = fileItorQueue30;
        fileEntryIterator0.stack = fileItorQueue30;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator34 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive35 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest36 = explodedArchive35.manifest;
        explodedArchive35.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive39 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest40 = explodedArchive39.manifest;
        explodedArchive39.recursive = false;
        java.util.jar.Manifest manifest43 = explodedArchive39.manifest;
        java.io.File file44 = explodedArchive39.manifestFile;
        java.io.File file45 = null;
        java.io.File file46 = explodedArchive39.getManifestFile(file45);
        explodedArchive35.manifestFile = file45;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive48 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest49 = explodedArchive48.manifest;
        explodedArchive48.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive52 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest53 = explodedArchive52.manifest;
        explodedArchive52.recursive = false;
        java.util.jar.Manifest manifest56 = explodedArchive52.manifest;
        java.io.File file57 = explodedArchive52.manifestFile;
        java.io.File file58 = null;
        java.io.File file59 = explodedArchive52.getManifestFile(file58);
        explodedArchive48.manifestFile = file58;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive61 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest62 = explodedArchive61.manifest;
        explodedArchive61.recursive = false;
        java.util.jar.Manifest manifest65 = explodedArchive61.manifest;
        java.io.File file66 = explodedArchive61.manifestFile;
        java.io.File file67 = null;
        java.io.File file68 = explodedArchive61.getManifestFile(file67);
        explodedArchive48.manifestFile = file68;
        explodedArchive35.root = file68;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator71 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file72 = null;
        fileEntryIterator71.current = file72;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive74 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest75 = explodedArchive74.manifest;
        explodedArchive74.recursive = false;
        java.util.jar.Manifest manifest78 = explodedArchive74.manifest;
        java.io.File file79 = explodedArchive74.manifestFile;
        java.io.File file80 = null;
        java.io.File file81 = explodedArchive74.getManifestFile(file80);
        java.util.Iterator<java.io.File> fileItor82 = fileEntryIterator71.listFiles(file81);
        int int83 = entryComparator34.compare(file68, file81);
        fileEntryIterator0.current = file81;
        java.io.File file85 = fileEntryIterator0.current;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file14.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file14.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file28.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file28.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file46.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file46.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file59.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file59.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file68.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file68.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest75);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest78);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file79);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file81);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file81.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file81.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor82);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file85);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file85.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file85.toString(), "META-INF/MANIFEST.MF");
    }

    @Test
    public void test893() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test893");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file1 = null;
        fileEntryIterator0.current = file1;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive3 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.lang.String str4 = explodedArchive3.toString();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive5 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file6 = explodedArchive5.root;
        java.io.File file7 = null;
        explodedArchive5.manifestFile = file7;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive9 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest10 = explodedArchive9.manifest;
        explodedArchive9.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive13 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest14 = explodedArchive13.manifest;
        explodedArchive13.recursive = false;
        java.util.jar.Manifest manifest17 = explodedArchive13.manifest;
        java.io.File file18 = explodedArchive13.manifestFile;
        java.io.File file19 = null;
        java.io.File file20 = explodedArchive13.getManifestFile(file19);
        explodedArchive9.manifestFile = file19;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive22 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest23 = explodedArchive22.manifest;
        explodedArchive22.recursive = false;
        java.util.jar.Manifest manifest26 = explodedArchive22.manifest;
        java.io.File file27 = explodedArchive22.manifestFile;
        java.io.File file28 = null;
        java.io.File file29 = explodedArchive22.getManifestFile(file28);
        explodedArchive9.manifestFile = file29;
        java.io.File file31 = explodedArchive5.getManifestFile(file29);
        java.io.File file32 = explodedArchive3.getManifestFile(file29);
        fileEntryIterator0.root = file29;
        boolean boolean34 = fileEntryIterator0.recursive;
        fileEntryIterator0.recursive = true;
        boolean boolean37 = fileEntryIterator0.hasNext();
        java.io.File file38 = fileEntryIterator0.root;
        boolean boolean39 = fileEntryIterator0.recursive;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str4 + "' != '" + "exploded archive" + "'", str4.equals("exploded archive"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file20.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file20.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file29.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file29.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file31.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file31.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file32.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file32.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file38.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file38.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
    }

    @Test
    public void test894() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test894");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest1 = explodedArchive0.manifest;
        explodedArchive0.recursive = false;
        java.io.File file4 = null;
        explodedArchive0.root = file4;
        java.io.File file6 = explodedArchive0.root;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive7 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest8 = explodedArchive7.manifest;
        explodedArchive7.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive11 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest12 = explodedArchive11.manifest;
        explodedArchive11.recursive = false;
        java.util.jar.Manifest manifest15 = explodedArchive11.manifest;
        java.io.File file16 = explodedArchive11.manifestFile;
        java.io.File file17 = null;
        java.io.File file18 = explodedArchive11.getManifestFile(file17);
        explodedArchive7.manifestFile = file17;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive20 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest21 = explodedArchive20.manifest;
        explodedArchive20.recursive = false;
        java.util.jar.Manifest manifest24 = explodedArchive20.manifest;
        java.io.File file25 = explodedArchive20.manifestFile;
        java.io.File file26 = null;
        java.io.File file27 = explodedArchive20.getManifestFile(file26);
        explodedArchive7.manifestFile = file27;
        java.io.File file29 = explodedArchive0.getManifestFile(file27);
        java.util.jar.Manifest manifest30 = explodedArchive0.manifest;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntry fileEntry31 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntry();
        java.lang.String str32 = fileEntry31.name;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator33 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file34 = null;
        fileEntryIterator33.current = file34;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive36 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.lang.String str37 = explodedArchive36.toString();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive38 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file39 = explodedArchive38.root;
        java.io.File file40 = null;
        explodedArchive38.manifestFile = file40;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive42 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest43 = explodedArchive42.manifest;
        explodedArchive42.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive46 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest47 = explodedArchive46.manifest;
        explodedArchive46.recursive = false;
        java.util.jar.Manifest manifest50 = explodedArchive46.manifest;
        java.io.File file51 = explodedArchive46.manifestFile;
        java.io.File file52 = null;
        java.io.File file53 = explodedArchive46.getManifestFile(file52);
        explodedArchive42.manifestFile = file52;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive55 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest56 = explodedArchive55.manifest;
        explodedArchive55.recursive = false;
        java.util.jar.Manifest manifest59 = explodedArchive55.manifest;
        java.io.File file60 = explodedArchive55.manifestFile;
        java.io.File file61 = null;
        java.io.File file62 = explodedArchive55.getManifestFile(file61);
        explodedArchive42.manifestFile = file62;
        java.io.File file64 = explodedArchive38.getManifestFile(file62);
        java.io.File file65 = explodedArchive36.getManifestFile(file62);
        fileEntryIterator33.root = file62;
        fileEntry31.file = file62;
        java.io.File file68 = fileEntry31.file;
        explodedArchive0.manifestFile = file68;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive70 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest71 = explodedArchive70.manifest;
        explodedArchive70.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive74 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest75 = explodedArchive74.manifest;
        explodedArchive74.recursive = false;
        java.util.jar.Manifest manifest78 = explodedArchive74.manifest;
        java.io.File file79 = explodedArchive74.manifestFile;
        java.io.File file80 = null;
        java.io.File file81 = explodedArchive74.getManifestFile(file80);
        explodedArchive70.manifestFile = file80;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive83 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest84 = explodedArchive83.manifest;
        explodedArchive83.recursive = false;
        java.util.jar.Manifest manifest87 = explodedArchive83.manifest;
        java.io.File file88 = explodedArchive83.manifestFile;
        java.io.File file89 = null;
        java.io.File file90 = explodedArchive83.getManifestFile(file89);
        explodedArchive70.manifestFile = file90;
        explodedArchive0.manifestFile = file90;
        org.springframework.boot.loader.archive.Archive.EntryFilter entryFilter93 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<org.springframework.boot.loader.archive.Archive> archiveList94 = explodedArchive0.getNestedArchives(entryFilter93);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file18.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file18.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file27.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file27.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file29.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file29.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str37 + "' != '" + "exploded archive" + "'", str37.equals("exploded archive"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file53.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file53.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file62.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file62.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file64.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file64.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file65.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file65.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file68.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file68.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest75);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest78);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file79);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file81);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file81.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file81.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest84);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest87);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file88);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file90);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file90.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file90.toString(), "META-INF/MANIFEST.MF");
    }

    @Test
    public void test895() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test895");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file1 = null;
        fileEntryIterator0.current = file1;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive3 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest4 = explodedArchive3.manifest;
        explodedArchive3.recursive = false;
        java.util.jar.Manifest manifest7 = explodedArchive3.manifest;
        java.io.File file8 = explodedArchive3.manifestFile;
        java.io.File file9 = null;
        java.io.File file10 = explodedArchive3.getManifestFile(file9);
        java.util.Iterator<java.io.File> fileItor11 = fileEntryIterator0.listFiles(file10);
        boolean boolean12 = fileEntryIterator0.hasNext();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator13 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator14 = entryComparator13.reversed();
        java.util.Comparator<java.io.File> fileComparator15 = entryComparator13.reversed();
        fileEntryIterator0.entryComparator = fileComparator15;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator17 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file18 = null;
        fileEntryIterator17.current = file18;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive20 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest21 = explodedArchive20.manifest;
        explodedArchive20.recursive = false;
        java.util.jar.Manifest manifest24 = explodedArchive20.manifest;
        java.io.File file25 = explodedArchive20.manifestFile;
        java.io.File file26 = null;
        java.io.File file27 = explodedArchive20.getManifestFile(file26);
        java.util.Iterator<java.io.File> fileItor28 = fileEntryIterator17.listFiles(file27);
        java.util.Comparator<java.io.File> fileComparator29 = fileEntryIterator17.entryComparator;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator30 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file31 = null;
        fileEntryIterator30.current = file31;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive33 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest34 = explodedArchive33.manifest;
        explodedArchive33.recursive = false;
        java.util.jar.Manifest manifest37 = explodedArchive33.manifest;
        java.io.File file38 = explodedArchive33.manifestFile;
        java.io.File file39 = null;
        java.io.File file40 = explodedArchive33.getManifestFile(file39);
        java.util.Iterator<java.io.File> fileItor41 = fileEntryIterator30.listFiles(file40);
        java.io.File file42 = fileEntryIterator30.current;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator43 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file44 = null;
        fileEntryIterator43.current = file44;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive46 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest47 = explodedArchive46.manifest;
        explodedArchive46.recursive = false;
        java.util.jar.Manifest manifest50 = explodedArchive46.manifest;
        java.io.File file51 = explodedArchive46.manifestFile;
        java.io.File file52 = null;
        java.io.File file53 = explodedArchive46.getManifestFile(file52);
        java.util.Iterator<java.io.File> fileItor54 = fileEntryIterator43.listFiles(file53);
        java.io.File file55 = fileEntryIterator43.current;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator56 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file57 = null;
        fileEntryIterator56.current = file57;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive59 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest60 = explodedArchive59.manifest;
        explodedArchive59.recursive = false;
        java.util.jar.Manifest manifest63 = explodedArchive59.manifest;
        java.io.File file64 = explodedArchive59.manifestFile;
        java.io.File file65 = null;
        java.io.File file66 = explodedArchive59.getManifestFile(file65);
        java.util.Iterator<java.io.File> fileItor67 = fileEntryIterator56.listFiles(file66);
        java.util.ArrayDeque<java.util.Iterator<java.io.File>> fileItorQueue68 = new java.util.ArrayDeque<java.util.Iterator<java.io.File>>();
        boolean boolean69 = fileItorQueue68.add(fileItor67);
        fileEntryIterator43.stack = fileItorQueue68;
        fileEntryIterator30.stack = fileItorQueue68;
        fileEntryIterator17.stack = fileItorQueue68;
        fileEntryIterator0.stack = fileItorQueue68;
        boolean boolean74 = fileEntryIterator0.recursive;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file27.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file27.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file40.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file40.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file53.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file53.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file66.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file66.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
    }

    @Test
    public void test896() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test896");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file1 = null;
        fileEntryIterator0.current = file1;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive3 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest4 = explodedArchive3.manifest;
        explodedArchive3.recursive = false;
        java.util.jar.Manifest manifest7 = explodedArchive3.manifest;
        java.io.File file8 = explodedArchive3.manifestFile;
        java.io.File file9 = null;
        java.io.File file10 = explodedArchive3.getManifestFile(file9);
        java.util.Iterator<java.io.File> fileItor11 = fileEntryIterator0.listFiles(file10);
        java.io.File file12 = fileEntryIterator0.current;
        java.util.Deque<java.util.Iterator<java.io.File>> fileItorQueue13 = fileEntryIterator0.stack;
        fileEntryIterator0.recursive = true;
        java.util.Deque<java.util.Iterator<java.io.File>> fileItorQueue16 = fileEntryIterator0.stack;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItorQueue13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItorQueue16);
    }

    @Test
    public void test897() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test897");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        boolean boolean1 = fileEntryIterator0.hasNext();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator2 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator3 = entryComparator2.reversed();
        java.util.Comparator<java.io.File> fileComparator4 = fileComparator3.reversed();
        fileEntryIterator0.entryComparator = fileComparator4;
        java.util.Comparator<java.io.File> fileComparator6 = fileEntryIterator0.entryComparator;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator7 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        boolean boolean8 = fileEntryIterator7.recursive;
        java.io.File file9 = fileEntryIterator7.current;
        boolean boolean10 = fileEntryIterator7.hasNext();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator11 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator12 = entryComparator11.reversed();
        java.util.Comparator<java.io.File> fileComparator13 = entryComparator11.reversed();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive14 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest15 = explodedArchive14.manifest;
        explodedArchive14.recursive = false;
        java.util.jar.Manifest manifest18 = explodedArchive14.manifest;
        java.io.File file19 = explodedArchive14.manifestFile;
        java.io.File file20 = null;
        java.io.File file21 = explodedArchive14.getManifestFile(file20);
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive22 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest23 = explodedArchive22.manifest;
        explodedArchive22.recursive = false;
        java.io.File file26 = null;
        explodedArchive22.root = file26;
        java.io.File file28 = explodedArchive22.root;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive29 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest30 = explodedArchive29.manifest;
        explodedArchive29.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive33 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest34 = explodedArchive33.manifest;
        explodedArchive33.recursive = false;
        java.util.jar.Manifest manifest37 = explodedArchive33.manifest;
        java.io.File file38 = explodedArchive33.manifestFile;
        java.io.File file39 = null;
        java.io.File file40 = explodedArchive33.getManifestFile(file39);
        explodedArchive29.manifestFile = file39;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive42 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest43 = explodedArchive42.manifest;
        explodedArchive42.recursive = false;
        java.util.jar.Manifest manifest46 = explodedArchive42.manifest;
        java.io.File file47 = explodedArchive42.manifestFile;
        java.io.File file48 = null;
        java.io.File file49 = explodedArchive42.getManifestFile(file48);
        explodedArchive29.manifestFile = file49;
        java.io.File file51 = explodedArchive22.getManifestFile(file49);
        int int52 = entryComparator11.compare(file21, file49);
        java.util.Iterator<java.io.File> fileItor53 = fileEntryIterator7.listFiles(file21);
        java.util.Deque<java.util.Iterator<java.io.File>> fileItorQueue54 = fileEntryIterator7.stack;
        fileEntryIterator0.stack = fileItorQueue54;
        java.io.File file56 = fileEntryIterator0.root;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive57 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file58 = explodedArchive57.root;
        java.io.File file59 = null;
        explodedArchive57.manifestFile = file59;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive61 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest62 = explodedArchive61.manifest;
        explodedArchive61.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive65 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest66 = explodedArchive65.manifest;
        explodedArchive65.recursive = false;
        java.util.jar.Manifest manifest69 = explodedArchive65.manifest;
        java.io.File file70 = explodedArchive65.manifestFile;
        java.io.File file71 = null;
        java.io.File file72 = explodedArchive65.getManifestFile(file71);
        explodedArchive61.manifestFile = file71;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive74 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest75 = explodedArchive74.manifest;
        explodedArchive74.recursive = false;
        java.util.jar.Manifest manifest78 = explodedArchive74.manifest;
        java.io.File file79 = explodedArchive74.manifestFile;
        java.io.File file80 = null;
        java.io.File file81 = explodedArchive74.getManifestFile(file80);
        explodedArchive61.manifestFile = file81;
        java.io.File file83 = explodedArchive57.getManifestFile(file81);
        java.util.Iterator<java.io.File> fileItor84 = fileEntryIterator0.listFiles(file81);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file21.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file21.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file40.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file40.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file49.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file49.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file51.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file51.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItorQueue54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file72.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file72.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest75);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest78);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file79);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file81);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file81.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file81.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file83);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file83.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file83.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor84);
    }

    @Test
    public void test898() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test898");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file1 = null;
        fileEntryIterator0.current = file1;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive3 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest4 = explodedArchive3.manifest;
        explodedArchive3.recursive = false;
        java.util.jar.Manifest manifest7 = explodedArchive3.manifest;
        java.io.File file8 = explodedArchive3.manifestFile;
        java.io.File file9 = null;
        java.io.File file10 = explodedArchive3.getManifestFile(file9);
        java.util.Iterator<java.io.File> fileItor11 = fileEntryIterator0.listFiles(file10);
        java.io.File file12 = fileEntryIterator0.root;
        java.io.File file13 = fileEntryIterator0.root;
        java.util.Deque<java.util.Iterator<java.io.File>> fileItorQueue14 = fileEntryIterator0.stack;
        java.io.File file15 = fileEntryIterator0.root;
        java.util.Comparator<java.io.File> fileComparator16 = fileEntryIterator0.entryComparator;
        boolean boolean17 = fileEntryIterator0.hasNext();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItorQueue14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test899() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test899");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file1 = explodedArchive0.root;
        java.io.File file2 = null;
        explodedArchive0.manifestFile = file2;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive4 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest5 = explodedArchive4.manifest;
        explodedArchive4.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive8 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest9 = explodedArchive8.manifest;
        explodedArchive8.recursive = false;
        java.util.jar.Manifest manifest12 = explodedArchive8.manifest;
        java.io.File file13 = explodedArchive8.manifestFile;
        java.io.File file14 = null;
        java.io.File file15 = explodedArchive8.getManifestFile(file14);
        explodedArchive4.manifestFile = file14;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive17 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest18 = explodedArchive17.manifest;
        explodedArchive17.recursive = false;
        java.util.jar.Manifest manifest21 = explodedArchive17.manifest;
        java.io.File file22 = explodedArchive17.manifestFile;
        java.io.File file23 = null;
        java.io.File file24 = explodedArchive17.getManifestFile(file23);
        explodedArchive4.manifestFile = file24;
        java.io.File file26 = explodedArchive0.getManifestFile(file24);
        java.util.jar.Manifest manifest27 = null;
        explodedArchive0.manifest = manifest27;
        java.io.File file29 = explodedArchive0.root;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntry fileEntry30 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntry();
        java.io.File file31 = fileEntry30.file;
        java.lang.String str32 = fileEntry30.name;
        java.io.File file33 = fileEntry30.file;
        java.io.File file34 = fileEntry30.file;
        java.lang.String str35 = fileEntry30.name;
        java.lang.String str36 = fileEntry30.getName();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntry fileEntry37 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntry();
        java.io.File file38 = fileEntry37.getFile();
        java.io.File file39 = fileEntry37.getFile();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive40 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file41 = explodedArchive40.root;
        java.io.File file42 = null;
        explodedArchive40.manifestFile = file42;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive44 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest45 = explodedArchive44.manifest;
        explodedArchive44.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive48 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest49 = explodedArchive48.manifest;
        explodedArchive48.recursive = false;
        java.util.jar.Manifest manifest52 = explodedArchive48.manifest;
        java.io.File file53 = explodedArchive48.manifestFile;
        java.io.File file54 = null;
        java.io.File file55 = explodedArchive48.getManifestFile(file54);
        explodedArchive44.manifestFile = file54;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive57 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest58 = explodedArchive57.manifest;
        explodedArchive57.recursive = false;
        java.util.jar.Manifest manifest61 = explodedArchive57.manifest;
        java.io.File file62 = explodedArchive57.manifestFile;
        java.io.File file63 = null;
        java.io.File file64 = explodedArchive57.getManifestFile(file63);
        explodedArchive44.manifestFile = file64;
        java.io.File file66 = explodedArchive40.getManifestFile(file64);
        fileEntry37.file = file66;
        java.io.File file68 = fileEntry37.file;
        fileEntry37.name = "exploded archive";
        java.io.File file71 = fileEntry37.file;
        java.io.File file72 = fileEntry37.getFile();
        java.io.File file73 = fileEntry37.file;
        fileEntry30.file = file73;
        java.io.File file75 = explodedArchive0.getManifestFile(file73);
        // The following exception was thrown during execution in test generation
        try {
            org.springframework.boot.loader.archive.ExplodedArchive explodedArchive76 = new org.springframework.boot.loader.archive.ExplodedArchive(file75);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid source folder META-INF/MANIFEST.MF/META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file15.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file15.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file24.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file24.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file26.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file26.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file55.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file55.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file64.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file64.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file66.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file66.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file68.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file68.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file71.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file71.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file72.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file72.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file73);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file73.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file73.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file75);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file75.getParent(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file75.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
    }

    @Test
    public void test900() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test900");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntry fileEntry0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntry();
        java.io.File file1 = fileEntry0.getFile();
        java.io.File file2 = fileEntry0.getFile();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive3 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file4 = explodedArchive3.root;
        java.io.File file5 = null;
        explodedArchive3.manifestFile = file5;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive7 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest8 = explodedArchive7.manifest;
        explodedArchive7.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive11 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest12 = explodedArchive11.manifest;
        explodedArchive11.recursive = false;
        java.util.jar.Manifest manifest15 = explodedArchive11.manifest;
        java.io.File file16 = explodedArchive11.manifestFile;
        java.io.File file17 = null;
        java.io.File file18 = explodedArchive11.getManifestFile(file17);
        explodedArchive7.manifestFile = file17;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive20 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest21 = explodedArchive20.manifest;
        explodedArchive20.recursive = false;
        java.util.jar.Manifest manifest24 = explodedArchive20.manifest;
        java.io.File file25 = explodedArchive20.manifestFile;
        java.io.File file26 = null;
        java.io.File file27 = explodedArchive20.getManifestFile(file26);
        explodedArchive7.manifestFile = file27;
        java.io.File file29 = explodedArchive3.getManifestFile(file27);
        fileEntry0.file = file29;
        fileEntry0.name = "";
        java.lang.String str33 = fileEntry0.getName();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive34 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest35 = explodedArchive34.manifest;
        explodedArchive34.recursive = false;
        java.io.File file38 = null;
        explodedArchive34.root = file38;
        java.io.File file40 = explodedArchive34.root;
        java.util.jar.Manifest manifest41 = null;
        explodedArchive34.manifest = manifest41;
        explodedArchive34.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator45 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file46 = null;
        fileEntryIterator45.current = file46;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive48 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest49 = explodedArchive48.manifest;
        explodedArchive48.recursive = false;
        java.util.jar.Manifest manifest52 = explodedArchive48.manifest;
        java.io.File file53 = explodedArchive48.manifestFile;
        java.io.File file54 = null;
        java.io.File file55 = explodedArchive48.getManifestFile(file54);
        java.util.Iterator<java.io.File> fileItor56 = fileEntryIterator45.listFiles(file55);
        explodedArchive34.root = file55;
        java.util.jar.Manifest manifest58 = null;
        explodedArchive34.manifest = manifest58;
        java.io.File file60 = explodedArchive34.root;
        fileEntry0.file = file60;
        fileEntry0.name = "";
        java.io.File file64 = fileEntry0.getFile();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file18.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file18.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file27.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file27.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file29.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file29.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str33 + "' != '" + "" + "'", str33.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file55.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file55.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file60.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file60.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file64.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file64.toString(), "META-INF/MANIFEST.MF");
    }

    @Test
    public void test901() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test901");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        boolean boolean1 = explodedArchive0.recursive;
        boolean boolean2 = explodedArchive0.recursive;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive3 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file4 = explodedArchive3.root;
        java.io.File file5 = null;
        explodedArchive3.manifestFile = file5;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive7 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest8 = explodedArchive7.manifest;
        explodedArchive7.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive11 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest12 = explodedArchive11.manifest;
        explodedArchive11.recursive = false;
        java.util.jar.Manifest manifest15 = explodedArchive11.manifest;
        java.io.File file16 = explodedArchive11.manifestFile;
        java.io.File file17 = null;
        java.io.File file18 = explodedArchive11.getManifestFile(file17);
        explodedArchive7.manifestFile = file17;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive20 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest21 = explodedArchive20.manifest;
        explodedArchive20.recursive = false;
        java.util.jar.Manifest manifest24 = explodedArchive20.manifest;
        java.io.File file25 = explodedArchive20.manifestFile;
        java.io.File file26 = null;
        java.io.File file27 = explodedArchive20.getManifestFile(file26);
        explodedArchive7.manifestFile = file27;
        java.io.File file29 = explodedArchive3.getManifestFile(file27);
        explodedArchive0.manifestFile = file27;
        boolean boolean31 = explodedArchive0.recursive;
        java.util.jar.Manifest manifest32 = explodedArchive0.manifest;
        java.util.jar.Manifest manifest33 = explodedArchive0.getManifest();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntry fileEntry34 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntry();
        java.lang.String str35 = fileEntry34.name;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator36 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file37 = null;
        fileEntryIterator36.current = file37;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive39 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.lang.String str40 = explodedArchive39.toString();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive41 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file42 = explodedArchive41.root;
        java.io.File file43 = null;
        explodedArchive41.manifestFile = file43;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive45 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest46 = explodedArchive45.manifest;
        explodedArchive45.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive49 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest50 = explodedArchive49.manifest;
        explodedArchive49.recursive = false;
        java.util.jar.Manifest manifest53 = explodedArchive49.manifest;
        java.io.File file54 = explodedArchive49.manifestFile;
        java.io.File file55 = null;
        java.io.File file56 = explodedArchive49.getManifestFile(file55);
        explodedArchive45.manifestFile = file55;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive58 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest59 = explodedArchive58.manifest;
        explodedArchive58.recursive = false;
        java.util.jar.Manifest manifest62 = explodedArchive58.manifest;
        java.io.File file63 = explodedArchive58.manifestFile;
        java.io.File file64 = null;
        java.io.File file65 = explodedArchive58.getManifestFile(file64);
        explodedArchive45.manifestFile = file65;
        java.io.File file67 = explodedArchive41.getManifestFile(file65);
        java.io.File file68 = explodedArchive39.getManifestFile(file65);
        fileEntryIterator36.root = file65;
        fileEntry34.file = file65;
        java.io.File file71 = fileEntry34.getFile();
        java.io.File file72 = fileEntry34.getFile();
        java.io.File file73 = fileEntry34.getFile();
        explodedArchive0.root = file73;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file18.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file18.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file27.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file27.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file29.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file29.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str40 + "' != '" + "exploded archive" + "'", str40.equals("exploded archive"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file56.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file56.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file65.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file65.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file67.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file67.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file68.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file68.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file71.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file71.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file72.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file72.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file73);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file73.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file73.toString(), "META-INF/MANIFEST.MF");
    }

    @Test
    public void test902() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test902");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntry fileEntry0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntry();
        java.lang.String str1 = fileEntry0.name;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator2 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file3 = null;
        fileEntryIterator2.current = file3;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive5 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.lang.String str6 = explodedArchive5.toString();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive7 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file8 = explodedArchive7.root;
        java.io.File file9 = null;
        explodedArchive7.manifestFile = file9;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive11 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest12 = explodedArchive11.manifest;
        explodedArchive11.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive15 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest16 = explodedArchive15.manifest;
        explodedArchive15.recursive = false;
        java.util.jar.Manifest manifest19 = explodedArchive15.manifest;
        java.io.File file20 = explodedArchive15.manifestFile;
        java.io.File file21 = null;
        java.io.File file22 = explodedArchive15.getManifestFile(file21);
        explodedArchive11.manifestFile = file21;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive24 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest25 = explodedArchive24.manifest;
        explodedArchive24.recursive = false;
        java.util.jar.Manifest manifest28 = explodedArchive24.manifest;
        java.io.File file29 = explodedArchive24.manifestFile;
        java.io.File file30 = null;
        java.io.File file31 = explodedArchive24.getManifestFile(file30);
        explodedArchive11.manifestFile = file31;
        java.io.File file33 = explodedArchive7.getManifestFile(file31);
        java.io.File file34 = explodedArchive5.getManifestFile(file31);
        fileEntryIterator2.root = file31;
        fileEntry0.file = file31;
        java.io.File file37 = fileEntry0.file;
        fileEntry0.name = "hi!";
        boolean boolean40 = fileEntry0.isDirectory();
        java.lang.String str41 = fileEntry0.getName();
        java.io.File file42 = fileEntry0.getFile();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "exploded archive" + "'", str6.equals("exploded archive"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file22.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file22.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file31.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file31.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file33.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file33.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file34.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file34.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file37.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file37.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str41 + "' != '" + "hi!" + "'", str41.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file42.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file42.toString(), "META-INF/MANIFEST.MF");
    }

    @Test
    public void test903() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test903");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file1 = null;
        fileEntryIterator0.current = file1;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive3 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.lang.String str4 = explodedArchive3.toString();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive5 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file6 = explodedArchive5.root;
        java.io.File file7 = null;
        explodedArchive5.manifestFile = file7;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive9 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest10 = explodedArchive9.manifest;
        explodedArchive9.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive13 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest14 = explodedArchive13.manifest;
        explodedArchive13.recursive = false;
        java.util.jar.Manifest manifest17 = explodedArchive13.manifest;
        java.io.File file18 = explodedArchive13.manifestFile;
        java.io.File file19 = null;
        java.io.File file20 = explodedArchive13.getManifestFile(file19);
        explodedArchive9.manifestFile = file19;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive22 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest23 = explodedArchive22.manifest;
        explodedArchive22.recursive = false;
        java.util.jar.Manifest manifest26 = explodedArchive22.manifest;
        java.io.File file27 = explodedArchive22.manifestFile;
        java.io.File file28 = null;
        java.io.File file29 = explodedArchive22.getManifestFile(file28);
        explodedArchive9.manifestFile = file29;
        java.io.File file31 = explodedArchive5.getManifestFile(file29);
        java.io.File file32 = explodedArchive3.getManifestFile(file29);
        fileEntryIterator0.root = file29;
        java.io.File file34 = fileEntryIterator0.poll();
        java.util.Comparator<java.io.File> fileComparator35 = fileEntryIterator0.entryComparator;
        java.util.Deque<java.util.Iterator<java.io.File>> fileItorQueue36 = fileEntryIterator0.stack;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str4 + "' != '" + "exploded archive" + "'", str4.equals("exploded archive"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file20.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file20.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file29.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file29.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file31.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file31.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file32.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file32.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItorQueue36);
    }

    @Test
    public void test904() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test904");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file1 = null;
        fileEntryIterator0.current = file1;
        java.util.Comparator<java.io.File> fileComparator3 = fileEntryIterator0.entryComparator;
        java.util.Comparator<java.io.File> fileComparator4 = fileEntryIterator0.entryComparator;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator4);
    }

    @Test
    public void test905() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test905");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file1 = null;
        fileEntryIterator0.current = file1;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive3 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest4 = explodedArchive3.manifest;
        explodedArchive3.recursive = false;
        java.util.jar.Manifest manifest7 = explodedArchive3.manifest;
        java.io.File file8 = explodedArchive3.manifestFile;
        java.io.File file9 = null;
        java.io.File file10 = explodedArchive3.getManifestFile(file9);
        java.util.Iterator<java.io.File> fileItor11 = fileEntryIterator0.listFiles(file10);
        boolean boolean12 = fileEntryIterator0.hasNext();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator13 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator14 = entryComparator13.reversed();
        java.util.Comparator<java.io.File> fileComparator15 = entryComparator13.reversed();
        fileEntryIterator0.entryComparator = fileComparator15;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator17 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file18 = null;
        fileEntryIterator17.current = file18;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive20 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest21 = explodedArchive20.manifest;
        explodedArchive20.recursive = false;
        java.util.jar.Manifest manifest24 = explodedArchive20.manifest;
        java.io.File file25 = explodedArchive20.manifestFile;
        java.io.File file26 = null;
        java.io.File file27 = explodedArchive20.getManifestFile(file26);
        java.util.Iterator<java.io.File> fileItor28 = fileEntryIterator17.listFiles(file27);
        java.util.Comparator<java.io.File> fileComparator29 = fileEntryIterator17.entryComparator;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator30 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file31 = null;
        fileEntryIterator30.current = file31;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive33 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest34 = explodedArchive33.manifest;
        explodedArchive33.recursive = false;
        java.util.jar.Manifest manifest37 = explodedArchive33.manifest;
        java.io.File file38 = explodedArchive33.manifestFile;
        java.io.File file39 = null;
        java.io.File file40 = explodedArchive33.getManifestFile(file39);
        java.util.Iterator<java.io.File> fileItor41 = fileEntryIterator30.listFiles(file40);
        java.io.File file42 = fileEntryIterator30.current;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator43 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file44 = null;
        fileEntryIterator43.current = file44;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive46 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest47 = explodedArchive46.manifest;
        explodedArchive46.recursive = false;
        java.util.jar.Manifest manifest50 = explodedArchive46.manifest;
        java.io.File file51 = explodedArchive46.manifestFile;
        java.io.File file52 = null;
        java.io.File file53 = explodedArchive46.getManifestFile(file52);
        java.util.Iterator<java.io.File> fileItor54 = fileEntryIterator43.listFiles(file53);
        java.io.File file55 = fileEntryIterator43.current;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator56 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file57 = null;
        fileEntryIterator56.current = file57;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive59 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest60 = explodedArchive59.manifest;
        explodedArchive59.recursive = false;
        java.util.jar.Manifest manifest63 = explodedArchive59.manifest;
        java.io.File file64 = explodedArchive59.manifestFile;
        java.io.File file65 = null;
        java.io.File file66 = explodedArchive59.getManifestFile(file65);
        java.util.Iterator<java.io.File> fileItor67 = fileEntryIterator56.listFiles(file66);
        java.util.ArrayDeque<java.util.Iterator<java.io.File>> fileItorQueue68 = new java.util.ArrayDeque<java.util.Iterator<java.io.File>>();
        boolean boolean69 = fileItorQueue68.add(fileItor67);
        fileEntryIterator43.stack = fileItorQueue68;
        fileEntryIterator30.stack = fileItorQueue68;
        fileEntryIterator17.stack = fileItorQueue68;
        fileEntryIterator0.stack = fileItorQueue68;
        java.util.Comparator<java.io.File> fileComparator74 = fileEntryIterator0.entryComparator;
        java.io.File file75 = fileEntryIterator0.root;
        java.util.Comparator<java.io.File> fileComparator76 = fileEntryIterator0.entryComparator;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file27.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file27.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file40.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file40.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file53.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file53.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file66.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file66.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file75);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator76);
    }

    @Test
    public void test906() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test906");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest1 = explodedArchive0.manifest;
        explodedArchive0.recursive = false;
        java.util.jar.Manifest manifest4 = explodedArchive0.manifest;
        java.io.File file5 = explodedArchive0.manifestFile;
        java.io.File file6 = null;
        java.io.File file7 = explodedArchive0.getManifestFile(file6);
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator8 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file9 = null;
        fileEntryIterator8.current = file9;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive11 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.lang.String str12 = explodedArchive11.toString();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive13 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file14 = explodedArchive13.root;
        java.io.File file15 = null;
        explodedArchive13.manifestFile = file15;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive17 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest18 = explodedArchive17.manifest;
        explodedArchive17.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive21 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest22 = explodedArchive21.manifest;
        explodedArchive21.recursive = false;
        java.util.jar.Manifest manifest25 = explodedArchive21.manifest;
        java.io.File file26 = explodedArchive21.manifestFile;
        java.io.File file27 = null;
        java.io.File file28 = explodedArchive21.getManifestFile(file27);
        explodedArchive17.manifestFile = file27;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive30 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest31 = explodedArchive30.manifest;
        explodedArchive30.recursive = false;
        java.util.jar.Manifest manifest34 = explodedArchive30.manifest;
        java.io.File file35 = explodedArchive30.manifestFile;
        java.io.File file36 = null;
        java.io.File file37 = explodedArchive30.getManifestFile(file36);
        explodedArchive17.manifestFile = file37;
        java.io.File file39 = explodedArchive13.getManifestFile(file37);
        java.io.File file40 = explodedArchive11.getManifestFile(file37);
        fileEntryIterator8.root = file37;
        explodedArchive0.root = file37;
        explodedArchive0.recursive = false;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file7.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file7.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str12 + "' != '" + "exploded archive" + "'", str12.equals("exploded archive"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file28.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file28.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file37.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file37.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file39.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file39.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file40.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file40.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
    }

    @Test
    public void test907() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test907");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file1 = explodedArchive0.root;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator2 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file3 = null;
        fileEntryIterator2.current = file3;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive5 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest6 = explodedArchive5.manifest;
        explodedArchive5.recursive = false;
        java.util.jar.Manifest manifest9 = explodedArchive5.manifest;
        java.io.File file10 = explodedArchive5.manifestFile;
        java.io.File file11 = null;
        java.io.File file12 = explodedArchive5.getManifestFile(file11);
        java.util.Iterator<java.io.File> fileItor13 = fileEntryIterator2.listFiles(file12);
        boolean boolean14 = fileEntryIterator2.hasNext();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator15 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator16 = entryComparator15.reversed();
        java.util.Comparator<java.io.File> fileComparator17 = entryComparator15.reversed();
        fileEntryIterator2.entryComparator = fileComparator17;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator19 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file20 = null;
        fileEntryIterator19.current = file20;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive22 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.lang.String str23 = explodedArchive22.toString();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive24 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file25 = explodedArchive24.root;
        java.io.File file26 = null;
        explodedArchive24.manifestFile = file26;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive28 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest29 = explodedArchive28.manifest;
        explodedArchive28.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive32 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest33 = explodedArchive32.manifest;
        explodedArchive32.recursive = false;
        java.util.jar.Manifest manifest36 = explodedArchive32.manifest;
        java.io.File file37 = explodedArchive32.manifestFile;
        java.io.File file38 = null;
        java.io.File file39 = explodedArchive32.getManifestFile(file38);
        explodedArchive28.manifestFile = file38;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive41 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest42 = explodedArchive41.manifest;
        explodedArchive41.recursive = false;
        java.util.jar.Manifest manifest45 = explodedArchive41.manifest;
        java.io.File file46 = explodedArchive41.manifestFile;
        java.io.File file47 = null;
        java.io.File file48 = explodedArchive41.getManifestFile(file47);
        explodedArchive28.manifestFile = file48;
        java.io.File file50 = explodedArchive24.getManifestFile(file48);
        java.io.File file51 = explodedArchive22.getManifestFile(file48);
        fileEntryIterator19.root = file48;
        fileEntryIterator2.current = file48;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive54 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file55 = explodedArchive54.root;
        java.io.File file56 = null;
        explodedArchive54.manifestFile = file56;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive58 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest59 = explodedArchive58.manifest;
        explodedArchive58.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive62 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest63 = explodedArchive62.manifest;
        explodedArchive62.recursive = false;
        java.util.jar.Manifest manifest66 = explodedArchive62.manifest;
        java.io.File file67 = explodedArchive62.manifestFile;
        java.io.File file68 = null;
        java.io.File file69 = explodedArchive62.getManifestFile(file68);
        explodedArchive58.manifestFile = file68;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive71 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest72 = explodedArchive71.manifest;
        explodedArchive71.recursive = false;
        java.util.jar.Manifest manifest75 = explodedArchive71.manifest;
        java.io.File file76 = explodedArchive71.manifestFile;
        java.io.File file77 = null;
        java.io.File file78 = explodedArchive71.getManifestFile(file77);
        explodedArchive58.manifestFile = file78;
        java.io.File file80 = explodedArchive54.getManifestFile(file78);
        fileEntryIterator2.root = file80;
        explodedArchive0.root = file80;
        java.lang.Class<?> wildcardClass83 = file80.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file12.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file12.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str23 + "' != '" + "exploded archive" + "'", str23.equals("exploded archive"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file39.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file39.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file48.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file48.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file50.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file50.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file51.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file51.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file69.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file69.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest75);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file76);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file78);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file78.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file78.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file80);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file80.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file80.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass83);
    }

    @Test
    public void test908() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test908");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file1 = null;
        fileEntryIterator0.current = file1;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive3 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest4 = explodedArchive3.manifest;
        explodedArchive3.recursive = false;
        java.util.jar.Manifest manifest7 = explodedArchive3.manifest;
        java.io.File file8 = explodedArchive3.manifestFile;
        java.io.File file9 = null;
        java.io.File file10 = explodedArchive3.getManifestFile(file9);
        java.util.Iterator<java.io.File> fileItor11 = fileEntryIterator0.listFiles(file10);
        java.io.File file12 = fileEntryIterator0.root;
        java.io.File file13 = fileEntryIterator0.root;
        java.util.Deque<java.util.Iterator<java.io.File>> fileItorQueue14 = fileEntryIterator0.stack;
        java.io.File file15 = fileEntryIterator0.current;
        java.io.File file16 = fileEntryIterator0.poll();
        java.util.Comparator<java.io.File> fileComparator17 = fileEntryIterator0.entryComparator;
        java.io.File file18 = fileEntryIterator0.root;
        boolean boolean19 = fileEntryIterator0.hasNext();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItorQueue14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test909() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test909");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator1 = entryComparator0.reversed();
        java.util.Comparator<java.io.File> fileComparator2 = entryComparator0.reversed();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator3 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file4 = null;
        fileEntryIterator3.current = file4;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive6 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest7 = explodedArchive6.manifest;
        explodedArchive6.recursive = false;
        java.util.jar.Manifest manifest10 = explodedArchive6.manifest;
        java.io.File file11 = explodedArchive6.manifestFile;
        java.io.File file12 = null;
        java.io.File file13 = explodedArchive6.getManifestFile(file12);
        java.util.Iterator<java.io.File> fileItor14 = fileEntryIterator3.listFiles(file13);
        java.util.Comparator<java.io.File> fileComparator15 = fileEntryIterator3.entryComparator;
        boolean boolean16 = fileEntryIterator3.recursive;
        java.io.File file17 = fileEntryIterator3.root;
        java.util.Comparator<java.io.File> fileComparator18 = fileEntryIterator3.entryComparator;
        java.util.Comparator<java.io.File> fileComparator19 = entryComparator0.thenComparing(fileComparator18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file13.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file13.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator19);
    }

    @Test
    public void test910() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test910");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file1 = null;
        fileEntryIterator0.current = file1;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive3 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest4 = explodedArchive3.manifest;
        explodedArchive3.recursive = false;
        java.util.jar.Manifest manifest7 = explodedArchive3.manifest;
        java.io.File file8 = explodedArchive3.manifestFile;
        java.io.File file9 = null;
        java.io.File file10 = explodedArchive3.getManifestFile(file9);
        java.util.Iterator<java.io.File> fileItor11 = fileEntryIterator0.listFiles(file10);
        java.io.File file12 = fileEntryIterator0.root;
        java.io.File file13 = fileEntryIterator0.poll();
        java.util.Comparator<java.io.File> fileComparator14 = fileEntryIterator0.entryComparator;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator15 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        boolean boolean16 = fileEntryIterator15.hasNext();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator17 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator18 = entryComparator17.reversed();
        java.util.Comparator<java.io.File> fileComparator19 = fileComparator18.reversed();
        fileEntryIterator15.entryComparator = fileComparator19;
        java.util.Comparator<java.io.File> fileComparator21 = fileEntryIterator15.entryComparator;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator22 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator23 = entryComparator22.reversed();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator24 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator25 = entryComparator24.reversed();
        java.util.Comparator<java.io.File> fileComparator26 = entryComparator22.thenComparing(fileComparator25);
        java.util.Comparator<java.io.File> fileComparator27 = fileComparator21.thenComparing(fileComparator25);
        fileEntryIterator0.entryComparator = fileComparator27;
        java.io.File file29 = fileEntryIterator0.root;
        java.util.Deque<java.util.Iterator<java.io.File>> fileItorQueue30 = fileEntryIterator0.stack;
        java.io.File file31 = fileEntryIterator0.current;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItorQueue30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file31);
    }

    @Test
    public void test911() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test911");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        boolean boolean1 = fileEntryIterator0.hasNext();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator2 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator3 = entryComparator2.reversed();
        java.util.Comparator<java.io.File> fileComparator4 = fileComparator3.reversed();
        fileEntryIterator0.entryComparator = fileComparator4;
        java.util.Comparator<java.io.File> fileComparator6 = fileEntryIterator0.entryComparator;
        boolean boolean7 = fileEntryIterator0.hasNext();
        java.util.Comparator<java.io.File> fileComparator8 = fileEntryIterator0.entryComparator;
        boolean boolean9 = fileEntryIterator0.recursive;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive10 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest11 = explodedArchive10.manifest;
        explodedArchive10.recursive = false;
        java.util.jar.Manifest manifest14 = explodedArchive10.manifest;
        java.util.jar.Manifest manifest15 = null;
        explodedArchive10.manifest = manifest15;
        java.io.File file17 = explodedArchive10.root;
        java.io.File file18 = null;
        java.io.File file19 = explodedArchive10.getManifestFile(file18);
        fileEntryIterator0.current = file19;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file19.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file19.toString(), "META-INF/MANIFEST.MF");
    }

    @Test
    public void test912() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test912");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file1 = null;
        fileEntryIterator0.current = file1;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive3 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest4 = explodedArchive3.manifest;
        explodedArchive3.recursive = false;
        java.util.jar.Manifest manifest7 = explodedArchive3.manifest;
        java.io.File file8 = explodedArchive3.manifestFile;
        java.io.File file9 = null;
        java.io.File file10 = explodedArchive3.getManifestFile(file9);
        java.util.Iterator<java.io.File> fileItor11 = fileEntryIterator0.listFiles(file10);
        boolean boolean12 = fileEntryIterator0.hasNext();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator13 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator14 = entryComparator13.reversed();
        java.util.Comparator<java.io.File> fileComparator15 = entryComparator13.reversed();
        fileEntryIterator0.entryComparator = fileComparator15;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator17 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file18 = null;
        fileEntryIterator17.current = file18;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive20 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.lang.String str21 = explodedArchive20.toString();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive22 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file23 = explodedArchive22.root;
        java.io.File file24 = null;
        explodedArchive22.manifestFile = file24;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive26 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest27 = explodedArchive26.manifest;
        explodedArchive26.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive30 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest31 = explodedArchive30.manifest;
        explodedArchive30.recursive = false;
        java.util.jar.Manifest manifest34 = explodedArchive30.manifest;
        java.io.File file35 = explodedArchive30.manifestFile;
        java.io.File file36 = null;
        java.io.File file37 = explodedArchive30.getManifestFile(file36);
        explodedArchive26.manifestFile = file36;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive39 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest40 = explodedArchive39.manifest;
        explodedArchive39.recursive = false;
        java.util.jar.Manifest manifest43 = explodedArchive39.manifest;
        java.io.File file44 = explodedArchive39.manifestFile;
        java.io.File file45 = null;
        java.io.File file46 = explodedArchive39.getManifestFile(file45);
        explodedArchive26.manifestFile = file46;
        java.io.File file48 = explodedArchive22.getManifestFile(file46);
        java.io.File file49 = explodedArchive20.getManifestFile(file46);
        fileEntryIterator17.root = file46;
        fileEntryIterator0.current = file46;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive52 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file53 = explodedArchive52.root;
        java.io.File file54 = null;
        explodedArchive52.manifestFile = file54;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive56 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest57 = explodedArchive56.manifest;
        explodedArchive56.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive60 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest61 = explodedArchive60.manifest;
        explodedArchive60.recursive = false;
        java.util.jar.Manifest manifest64 = explodedArchive60.manifest;
        java.io.File file65 = explodedArchive60.manifestFile;
        java.io.File file66 = null;
        java.io.File file67 = explodedArchive60.getManifestFile(file66);
        explodedArchive56.manifestFile = file66;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive69 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest70 = explodedArchive69.manifest;
        explodedArchive69.recursive = false;
        java.util.jar.Manifest manifest73 = explodedArchive69.manifest;
        java.io.File file74 = explodedArchive69.manifestFile;
        java.io.File file75 = null;
        java.io.File file76 = explodedArchive69.getManifestFile(file75);
        explodedArchive56.manifestFile = file76;
        java.io.File file78 = explodedArchive52.getManifestFile(file76);
        fileEntryIterator0.root = file78;
        java.io.File file80 = fileEntryIterator0.poll();
        boolean boolean81 = fileEntryIterator0.recursive;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str21 + "' != '" + "exploded archive" + "'", str21.equals("exploded archive"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file37.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file37.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file46.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file46.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file48.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file48.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file49.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file49.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file67.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file67.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest73);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file76);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file76.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file76.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file78);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file78.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file78.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file80);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
    }

    @Test
    public void test913() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test913");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file1 = null;
        fileEntryIterator0.current = file1;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive3 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest4 = explodedArchive3.manifest;
        explodedArchive3.recursive = false;
        java.util.jar.Manifest manifest7 = explodedArchive3.manifest;
        java.io.File file8 = explodedArchive3.manifestFile;
        java.io.File file9 = null;
        java.io.File file10 = explodedArchive3.getManifestFile(file9);
        java.util.Iterator<java.io.File> fileItor11 = fileEntryIterator0.listFiles(file10);
        java.io.File file12 = fileEntryIterator0.root;
        fileEntryIterator0.recursive = true;
        boolean boolean15 = fileEntryIterator0.recursive;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
    }

    @Test
    public void test914() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test914");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        boolean boolean1 = fileEntryIterator0.hasNext();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator2 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator3 = entryComparator2.reversed();
        java.util.Comparator<java.io.File> fileComparator4 = fileComparator3.reversed();
        fileEntryIterator0.entryComparator = fileComparator4;
        java.util.Comparator<java.io.File> fileComparator6 = fileEntryIterator0.entryComparator;
        java.io.File file7 = fileEntryIterator0.current;
        boolean boolean8 = fileEntryIterator0.hasNext();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntry fileEntry9 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntry();
        java.io.File file10 = fileEntry9.file;
        java.lang.String str11 = fileEntry9.name;
        java.io.File file12 = fileEntry9.file;
        java.io.File file13 = fileEntry9.file;
        java.lang.String str14 = fileEntry9.getName();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntry fileEntry15 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntry();
        java.lang.String str16 = fileEntry15.name;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator17 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file18 = null;
        fileEntryIterator17.current = file18;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive20 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.lang.String str21 = explodedArchive20.toString();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive22 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file23 = explodedArchive22.root;
        java.io.File file24 = null;
        explodedArchive22.manifestFile = file24;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive26 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest27 = explodedArchive26.manifest;
        explodedArchive26.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive30 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest31 = explodedArchive30.manifest;
        explodedArchive30.recursive = false;
        java.util.jar.Manifest manifest34 = explodedArchive30.manifest;
        java.io.File file35 = explodedArchive30.manifestFile;
        java.io.File file36 = null;
        java.io.File file37 = explodedArchive30.getManifestFile(file36);
        explodedArchive26.manifestFile = file36;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive39 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest40 = explodedArchive39.manifest;
        explodedArchive39.recursive = false;
        java.util.jar.Manifest manifest43 = explodedArchive39.manifest;
        java.io.File file44 = explodedArchive39.manifestFile;
        java.io.File file45 = null;
        java.io.File file46 = explodedArchive39.getManifestFile(file45);
        explodedArchive26.manifestFile = file46;
        java.io.File file48 = explodedArchive22.getManifestFile(file46);
        java.io.File file49 = explodedArchive20.getManifestFile(file46);
        fileEntryIterator17.root = file46;
        fileEntry15.file = file46;
        fileEntry9.file = file46;
        fileEntry9.name = "exploded archive";
        boolean boolean55 = fileEntry9.isDirectory();
        java.io.File file56 = fileEntry9.getFile();
        fileEntryIterator0.root = file56;
        java.util.Deque<java.util.Iterator<java.io.File>> fileItorQueue58 = fileEntryIterator0.stack;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str21 + "' != '" + "exploded archive" + "'", str21.equals("exploded archive"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file37.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file37.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file46.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file46.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file48.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file48.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file49.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file49.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file56.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file56.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItorQueue58);
    }

    @Test
    public void test915() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test915");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file1 = null;
        fileEntryIterator0.current = file1;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive3 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest4 = explodedArchive3.manifest;
        explodedArchive3.recursive = false;
        java.util.jar.Manifest manifest7 = explodedArchive3.manifest;
        java.io.File file8 = explodedArchive3.manifestFile;
        java.io.File file9 = null;
        java.io.File file10 = explodedArchive3.getManifestFile(file9);
        java.util.Iterator<java.io.File> fileItor11 = fileEntryIterator0.listFiles(file10);
        java.io.File file12 = fileEntryIterator0.root;
        java.io.File file13 = fileEntryIterator0.root;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator14 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file15 = null;
        fileEntryIterator14.current = file15;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive17 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest18 = explodedArchive17.manifest;
        explodedArchive17.recursive = false;
        java.util.jar.Manifest manifest21 = explodedArchive17.manifest;
        java.io.File file22 = explodedArchive17.manifestFile;
        java.io.File file23 = null;
        java.io.File file24 = explodedArchive17.getManifestFile(file23);
        java.util.Iterator<java.io.File> fileItor25 = fileEntryIterator14.listFiles(file24);
        java.util.ArrayDeque<java.util.Iterator<java.io.File>> fileItorQueue26 = new java.util.ArrayDeque<java.util.Iterator<java.io.File>>();
        boolean boolean27 = fileItorQueue26.add(fileItor25);
        fileEntryIterator0.stack = fileItorQueue26;
        java.util.Deque<java.util.Iterator<java.io.File>> fileItorQueue29 = fileEntryIterator0.stack;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator30 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        boolean boolean31 = fileEntryIterator30.hasNext();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator32 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator33 = entryComparator32.reversed();
        java.util.Comparator<java.io.File> fileComparator34 = fileComparator33.reversed();
        fileEntryIterator30.entryComparator = fileComparator34;
        java.util.Comparator<java.io.File> fileComparator36 = fileEntryIterator30.entryComparator;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator37 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator38 = entryComparator37.reversed();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator39 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator40 = entryComparator39.reversed();
        java.util.Comparator<java.io.File> fileComparator41 = entryComparator37.thenComparing(fileComparator40);
        java.util.Comparator<java.io.File> fileComparator42 = fileComparator36.thenComparing(fileComparator40);
        fileEntryIterator0.entryComparator = fileComparator42;
        boolean boolean44 = fileEntryIterator0.hasNext();
        // The following exception was thrown during execution in test generation
        try {
            fileEntryIterator0.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: remove");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file24.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file24.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItorQueue29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
    }

    @Test
    public void test916() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test916");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        boolean boolean1 = fileEntryIterator0.hasNext();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator2 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator3 = entryComparator2.reversed();
        java.util.Comparator<java.io.File> fileComparator4 = fileComparator3.reversed();
        fileEntryIterator0.entryComparator = fileComparator4;
        java.util.Comparator<java.io.File> fileComparator6 = fileEntryIterator0.entryComparator;
        java.io.File file7 = fileEntryIterator0.current;
        boolean boolean8 = fileEntryIterator0.hasNext();
        boolean boolean9 = fileEntryIterator0.hasNext();
        java.util.Deque<java.util.Iterator<java.io.File>> fileItorQueue10 = fileEntryIterator0.stack;
        fileEntryIterator0.recursive = false;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItorQueue10);
    }

    @Test
    public void test917() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test917");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file1 = null;
        fileEntryIterator0.current = file1;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive3 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest4 = explodedArchive3.manifest;
        explodedArchive3.recursive = false;
        java.util.jar.Manifest manifest7 = explodedArchive3.manifest;
        java.io.File file8 = explodedArchive3.manifestFile;
        java.io.File file9 = null;
        java.io.File file10 = explodedArchive3.getManifestFile(file9);
        java.util.Iterator<java.io.File> fileItor11 = fileEntryIterator0.listFiles(file10);
        java.io.File file12 = fileEntryIterator0.root;
        java.io.File file13 = fileEntryIterator0.poll();
        java.util.Comparator<java.io.File> fileComparator14 = fileEntryIterator0.entryComparator;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator15 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        boolean boolean16 = fileEntryIterator15.hasNext();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator17 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator18 = entryComparator17.reversed();
        java.util.Comparator<java.io.File> fileComparator19 = fileComparator18.reversed();
        fileEntryIterator15.entryComparator = fileComparator19;
        java.util.Comparator<java.io.File> fileComparator21 = fileEntryIterator15.entryComparator;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator22 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator23 = entryComparator22.reversed();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator24 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator25 = entryComparator24.reversed();
        java.util.Comparator<java.io.File> fileComparator26 = entryComparator22.thenComparing(fileComparator25);
        java.util.Comparator<java.io.File> fileComparator27 = fileComparator21.thenComparing(fileComparator25);
        fileEntryIterator0.entryComparator = fileComparator27;
        java.io.File file29 = fileEntryIterator0.root;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive30 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.lang.String str31 = explodedArchive30.toString();
        explodedArchive30.recursive = true;
        java.io.File file34 = null;
        java.io.File file35 = explodedArchive30.getManifestFile(file34);
        fileEntryIterator0.root = file34;
        java.util.Comparator<java.io.File> fileComparator37 = fileEntryIterator0.entryComparator;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str31 + "' != '" + "exploded archive" + "'", str31.equals("exploded archive"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file35.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file35.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator37);
    }

    @Test
    public void test918() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test918");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntry fileEntry0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntry();
        java.lang.String str1 = fileEntry0.name;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator2 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file3 = null;
        fileEntryIterator2.current = file3;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive5 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.lang.String str6 = explodedArchive5.toString();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive7 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file8 = explodedArchive7.root;
        java.io.File file9 = null;
        explodedArchive7.manifestFile = file9;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive11 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest12 = explodedArchive11.manifest;
        explodedArchive11.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive15 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest16 = explodedArchive15.manifest;
        explodedArchive15.recursive = false;
        java.util.jar.Manifest manifest19 = explodedArchive15.manifest;
        java.io.File file20 = explodedArchive15.manifestFile;
        java.io.File file21 = null;
        java.io.File file22 = explodedArchive15.getManifestFile(file21);
        explodedArchive11.manifestFile = file21;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive24 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest25 = explodedArchive24.manifest;
        explodedArchive24.recursive = false;
        java.util.jar.Manifest manifest28 = explodedArchive24.manifest;
        java.io.File file29 = explodedArchive24.manifestFile;
        java.io.File file30 = null;
        java.io.File file31 = explodedArchive24.getManifestFile(file30);
        explodedArchive11.manifestFile = file31;
        java.io.File file33 = explodedArchive7.getManifestFile(file31);
        java.io.File file34 = explodedArchive5.getManifestFile(file31);
        fileEntryIterator2.root = file31;
        fileEntry0.file = file31;
        java.io.File file37 = fileEntry0.getFile();
        java.io.File file38 = fileEntry0.getFile();
        fileEntry0.name = "";
        java.lang.String str41 = fileEntry0.getName();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "exploded archive" + "'", str6.equals("exploded archive"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file22.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file22.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file31.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file31.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file33.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file33.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file34.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file34.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file37.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file37.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file38.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file38.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str41 + "' != '" + "" + "'", str41.equals(""));
    }

    @Test
    public void test919() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test919");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntry fileEntry0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntry();
        java.io.File file1 = fileEntry0.file;
        java.lang.String str2 = fileEntry0.name;
        java.lang.String str3 = fileEntry0.name;
        java.lang.String str4 = fileEntry0.getName();
        java.lang.Class<?> wildcardClass5 = fileEntry0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void test920() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test920");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest1 = explodedArchive0.manifest;
        explodedArchive0.recursive = false;
        java.util.jar.Manifest manifest4 = explodedArchive0.manifest;
        java.io.File file5 = explodedArchive0.manifestFile;
        java.io.File file6 = explodedArchive0.root;
        explodedArchive0.recursive = true;
        boolean boolean9 = explodedArchive0.recursive;
        java.util.jar.Manifest manifest10 = explodedArchive0.manifest;
        java.util.jar.Manifest manifest11 = null;
        explodedArchive0.manifest = manifest11;
        // The following exception was thrown during execution in test generation
        try {
            java.net.URL uRL13 = explodedArchive0.getUrl();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest10);
    }

    @Test
    public void test921() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test921");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntry fileEntry0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntry();
        java.lang.String str1 = fileEntry0.name;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator2 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file3 = null;
        fileEntryIterator2.current = file3;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive5 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.lang.String str6 = explodedArchive5.toString();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive7 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file8 = explodedArchive7.root;
        java.io.File file9 = null;
        explodedArchive7.manifestFile = file9;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive11 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest12 = explodedArchive11.manifest;
        explodedArchive11.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive15 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest16 = explodedArchive15.manifest;
        explodedArchive15.recursive = false;
        java.util.jar.Manifest manifest19 = explodedArchive15.manifest;
        java.io.File file20 = explodedArchive15.manifestFile;
        java.io.File file21 = null;
        java.io.File file22 = explodedArchive15.getManifestFile(file21);
        explodedArchive11.manifestFile = file21;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive24 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest25 = explodedArchive24.manifest;
        explodedArchive24.recursive = false;
        java.util.jar.Manifest manifest28 = explodedArchive24.manifest;
        java.io.File file29 = explodedArchive24.manifestFile;
        java.io.File file30 = null;
        java.io.File file31 = explodedArchive24.getManifestFile(file30);
        explodedArchive11.manifestFile = file31;
        java.io.File file33 = explodedArchive7.getManifestFile(file31);
        java.io.File file34 = explodedArchive5.getManifestFile(file31);
        fileEntryIterator2.root = file31;
        fileEntry0.file = file31;
        java.io.File file37 = fileEntry0.file;
        fileEntry0.name = "hi!";
        fileEntry0.name = "hi!";
        java.lang.String str42 = fileEntry0.name;
        boolean boolean43 = fileEntry0.isDirectory();
        java.io.File file44 = fileEntry0.file;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "exploded archive" + "'", str6.equals("exploded archive"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file22.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file22.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file31.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file31.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file33.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file33.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file34.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file34.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file37.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file37.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str42 + "' != '" + "hi!" + "'", str42.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file44.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file44.toString(), "META-INF/MANIFEST.MF");
    }

    @Test
    public void test922() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test922");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest1 = explodedArchive0.manifest;
        explodedArchive0.recursive = false;
        java.io.File file4 = null;
        explodedArchive0.root = file4;
        java.io.File file6 = explodedArchive0.manifestFile;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive7 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file8 = explodedArchive7.root;
        java.io.File file9 = null;
        explodedArchive7.manifestFile = file9;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive11 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest12 = explodedArchive11.manifest;
        explodedArchive11.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive15 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest16 = explodedArchive15.manifest;
        explodedArchive15.recursive = false;
        java.util.jar.Manifest manifest19 = explodedArchive15.manifest;
        java.io.File file20 = explodedArchive15.manifestFile;
        java.io.File file21 = null;
        java.io.File file22 = explodedArchive15.getManifestFile(file21);
        explodedArchive11.manifestFile = file21;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive24 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest25 = explodedArchive24.manifest;
        explodedArchive24.recursive = false;
        java.util.jar.Manifest manifest28 = explodedArchive24.manifest;
        java.io.File file29 = explodedArchive24.manifestFile;
        java.io.File file30 = null;
        java.io.File file31 = explodedArchive24.getManifestFile(file30);
        explodedArchive11.manifestFile = file31;
        java.io.File file33 = explodedArchive7.getManifestFile(file31);
        java.io.File file34 = explodedArchive7.root;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator35 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        boolean boolean36 = fileEntryIterator35.hasNext();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator37 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator38 = entryComparator37.reversed();
        java.util.Comparator<java.io.File> fileComparator39 = fileComparator38.reversed();
        fileEntryIterator35.entryComparator = fileComparator39;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive41 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file42 = explodedArchive41.root;
        java.io.File file43 = null;
        explodedArchive41.manifestFile = file43;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive45 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest46 = explodedArchive45.manifest;
        explodedArchive45.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive49 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest50 = explodedArchive49.manifest;
        explodedArchive49.recursive = false;
        java.util.jar.Manifest manifest53 = explodedArchive49.manifest;
        java.io.File file54 = explodedArchive49.manifestFile;
        java.io.File file55 = null;
        java.io.File file56 = explodedArchive49.getManifestFile(file55);
        explodedArchive45.manifestFile = file55;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive58 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest59 = explodedArchive58.manifest;
        explodedArchive58.recursive = false;
        java.util.jar.Manifest manifest62 = explodedArchive58.manifest;
        java.io.File file63 = explodedArchive58.manifestFile;
        java.io.File file64 = null;
        java.io.File file65 = explodedArchive58.getManifestFile(file64);
        explodedArchive45.manifestFile = file65;
        java.io.File file67 = explodedArchive41.getManifestFile(file65);
        java.util.Iterator<java.io.File> fileItor68 = fileEntryIterator35.listFiles(file67);
        explodedArchive7.manifestFile = file67;
        java.io.File file70 = explodedArchive7.manifestFile;
        java.io.File file71 = explodedArchive0.getManifestFile(file70);
        java.util.jar.Manifest manifest72 = null;
        explodedArchive0.manifest = manifest72;
        java.util.jar.Manifest manifest74 = null;
        explodedArchive0.manifest = manifest74;
        java.io.File file76 = explodedArchive0.manifestFile;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file22.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file22.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file31.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file31.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file33.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file33.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file56.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file56.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file65.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file65.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file67.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file67.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file70.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file70.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file71.getParent(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file71.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file76);
    }

    @Test
    public void test923() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test923");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntry fileEntry0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntry();
        java.io.File file1 = fileEntry0.file;
        java.lang.String str2 = fileEntry0.name;
        java.lang.String str3 = fileEntry0.name;
        java.io.File file4 = fileEntry0.file;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file4);
    }

    @Test
    public void test924() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test924");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file1 = explodedArchive0.root;
        java.io.File file2 = null;
        explodedArchive0.manifestFile = file2;
        java.io.File file4 = explodedArchive0.root;
        boolean boolean5 = explodedArchive0.recursive;
        explodedArchive0.recursive = true;
        java.util.jar.Manifest manifest8 = explodedArchive0.manifest;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive9 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest10 = explodedArchive9.manifest;
        explodedArchive9.recursive = false;
        java.util.jar.Manifest manifest13 = explodedArchive9.manifest;
        java.io.File file14 = explodedArchive9.manifestFile;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntry fileEntry15 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntry();
        java.lang.String str16 = fileEntry15.getName();
        java.io.File file17 = fileEntry15.getFile();
        java.lang.String str18 = fileEntry15.getName();
        java.lang.String str19 = fileEntry15.getName();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator20 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        boolean boolean21 = fileEntryIterator20.recursive;
        java.io.File file22 = fileEntryIterator20.current;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator23 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file24 = null;
        fileEntryIterator23.current = file24;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive26 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest27 = explodedArchive26.manifest;
        explodedArchive26.recursive = false;
        java.util.jar.Manifest manifest30 = explodedArchive26.manifest;
        java.io.File file31 = explodedArchive26.manifestFile;
        java.io.File file32 = null;
        java.io.File file33 = explodedArchive26.getManifestFile(file32);
        java.util.Iterator<java.io.File> fileItor34 = fileEntryIterator23.listFiles(file33);
        java.io.File file35 = fileEntryIterator23.root;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive36 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.lang.String str37 = explodedArchive36.toString();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive38 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file39 = explodedArchive38.root;
        java.io.File file40 = null;
        explodedArchive38.manifestFile = file40;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive42 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest43 = explodedArchive42.manifest;
        explodedArchive42.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive46 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest47 = explodedArchive46.manifest;
        explodedArchive46.recursive = false;
        java.util.jar.Manifest manifest50 = explodedArchive46.manifest;
        java.io.File file51 = explodedArchive46.manifestFile;
        java.io.File file52 = null;
        java.io.File file53 = explodedArchive46.getManifestFile(file52);
        explodedArchive42.manifestFile = file52;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive55 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest56 = explodedArchive55.manifest;
        explodedArchive55.recursive = false;
        java.util.jar.Manifest manifest59 = explodedArchive55.manifest;
        java.io.File file60 = explodedArchive55.manifestFile;
        java.io.File file61 = null;
        java.io.File file62 = explodedArchive55.getManifestFile(file61);
        explodedArchive42.manifestFile = file62;
        java.io.File file64 = explodedArchive38.getManifestFile(file62);
        java.io.File file65 = explodedArchive36.getManifestFile(file62);
        fileEntryIterator23.root = file62;
        java.util.Iterator<java.io.File> fileItor67 = fileEntryIterator20.listFiles(file62);
        fileEntry15.file = file62;
        explodedArchive9.manifestFile = file62;
        java.io.File file70 = explodedArchive9.manifestFile;
        explodedArchive0.root = file70;
        java.util.Iterator<org.springframework.boot.loader.archive.Archive.Entry> entryItor72 = explodedArchive0.iterator();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file33.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file33.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str37 + "' != '" + "exploded archive" + "'", str37.equals("exploded archive"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file53.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file53.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file62.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file62.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file64.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file64.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file65.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file65.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file70.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file70.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(entryItor72);
    }

    @Test
    public void test925() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test925");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file1 = null;
        fileEntryIterator0.current = file1;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive3 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest4 = explodedArchive3.manifest;
        explodedArchive3.recursive = false;
        java.util.jar.Manifest manifest7 = explodedArchive3.manifest;
        java.io.File file8 = explodedArchive3.manifestFile;
        java.io.File file9 = null;
        java.io.File file10 = explodedArchive3.getManifestFile(file9);
        java.util.Iterator<java.io.File> fileItor11 = fileEntryIterator0.listFiles(file10);
        java.io.File file12 = fileEntryIterator0.root;
        java.io.File file13 = fileEntryIterator0.root;
        java.util.Deque<java.util.Iterator<java.io.File>> fileItorQueue14 = fileEntryIterator0.stack;
        java.io.File file15 = fileEntryIterator0.current;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive16 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.lang.String str17 = explodedArchive16.toString();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive18 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file19 = explodedArchive18.root;
        java.io.File file20 = null;
        explodedArchive18.manifestFile = file20;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive22 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest23 = explodedArchive22.manifest;
        explodedArchive22.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive26 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest27 = explodedArchive26.manifest;
        explodedArchive26.recursive = false;
        java.util.jar.Manifest manifest30 = explodedArchive26.manifest;
        java.io.File file31 = explodedArchive26.manifestFile;
        java.io.File file32 = null;
        java.io.File file33 = explodedArchive26.getManifestFile(file32);
        explodedArchive22.manifestFile = file32;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive35 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest36 = explodedArchive35.manifest;
        explodedArchive35.recursive = false;
        java.util.jar.Manifest manifest39 = explodedArchive35.manifest;
        java.io.File file40 = explodedArchive35.manifestFile;
        java.io.File file41 = null;
        java.io.File file42 = explodedArchive35.getManifestFile(file41);
        explodedArchive22.manifestFile = file42;
        java.io.File file44 = explodedArchive18.getManifestFile(file42);
        java.io.File file45 = explodedArchive16.getManifestFile(file42);
        fileEntryIterator0.root = file45;
        fileEntryIterator0.recursive = false;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItorQueue14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str17 + "' != '" + "exploded archive" + "'", str17.equals("exploded archive"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file33.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file33.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file42.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file42.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file44.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file44.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file45.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file45.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
    }

    @Test
    public void test926() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test926");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file1 = null;
        fileEntryIterator0.current = file1;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive3 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest4 = explodedArchive3.manifest;
        explodedArchive3.recursive = false;
        java.util.jar.Manifest manifest7 = explodedArchive3.manifest;
        java.io.File file8 = explodedArchive3.manifestFile;
        java.io.File file9 = null;
        java.io.File file10 = explodedArchive3.getManifestFile(file9);
        java.util.Iterator<java.io.File> fileItor11 = fileEntryIterator0.listFiles(file10);
        java.io.File file12 = fileEntryIterator0.current;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator13 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file14 = null;
        fileEntryIterator13.current = file14;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive16 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest17 = explodedArchive16.manifest;
        explodedArchive16.recursive = false;
        java.util.jar.Manifest manifest20 = explodedArchive16.manifest;
        java.io.File file21 = explodedArchive16.manifestFile;
        java.io.File file22 = null;
        java.io.File file23 = explodedArchive16.getManifestFile(file22);
        java.util.Iterator<java.io.File> fileItor24 = fileEntryIterator13.listFiles(file23);
        java.util.ArrayDeque<java.util.Iterator<java.io.File>> fileItorQueue25 = new java.util.ArrayDeque<java.util.Iterator<java.io.File>>();
        boolean boolean26 = fileItorQueue25.add(fileItor24);
        fileEntryIterator0.stack = fileItorQueue25;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive28 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest29 = explodedArchive28.manifest;
        explodedArchive28.recursive = false;
        java.io.File file32 = null;
        explodedArchive28.root = file32;
        java.io.File file34 = explodedArchive28.root;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive35 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest36 = explodedArchive35.manifest;
        explodedArchive35.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive39 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest40 = explodedArchive39.manifest;
        explodedArchive39.recursive = false;
        java.util.jar.Manifest manifest43 = explodedArchive39.manifest;
        java.io.File file44 = explodedArchive39.manifestFile;
        java.io.File file45 = null;
        java.io.File file46 = explodedArchive39.getManifestFile(file45);
        explodedArchive35.manifestFile = file45;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive48 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest49 = explodedArchive48.manifest;
        explodedArchive48.recursive = false;
        java.util.jar.Manifest manifest52 = explodedArchive48.manifest;
        java.io.File file53 = explodedArchive48.manifestFile;
        java.io.File file54 = null;
        java.io.File file55 = explodedArchive48.getManifestFile(file54);
        explodedArchive35.manifestFile = file55;
        java.io.File file57 = explodedArchive28.getManifestFile(file55);
        fileEntryIterator0.root = file55;
        // The following exception was thrown during execution in test generation
        try {
            org.springframework.boot.loader.archive.ExplodedArchive explodedArchive59 = new org.springframework.boot.loader.archive.ExplodedArchive(file55);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid source folder META-INF/MANIFEST.MF");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file23.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file23.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file46.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file46.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file55.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file55.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file57.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file57.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
    }

    @Test
    public void test927() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test927");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file1 = null;
        fileEntryIterator0.current = file1;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive3 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest4 = explodedArchive3.manifest;
        explodedArchive3.recursive = false;
        java.util.jar.Manifest manifest7 = explodedArchive3.manifest;
        java.io.File file8 = explodedArchive3.manifestFile;
        java.io.File file9 = null;
        java.io.File file10 = explodedArchive3.getManifestFile(file9);
        java.util.Iterator<java.io.File> fileItor11 = fileEntryIterator0.listFiles(file10);
        java.io.File file12 = fileEntryIterator0.current;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator13 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file14 = null;
        fileEntryIterator13.current = file14;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive16 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest17 = explodedArchive16.manifest;
        explodedArchive16.recursive = false;
        java.util.jar.Manifest manifest20 = explodedArchive16.manifest;
        java.io.File file21 = explodedArchive16.manifestFile;
        java.io.File file22 = null;
        java.io.File file23 = explodedArchive16.getManifestFile(file22);
        java.util.Iterator<java.io.File> fileItor24 = fileEntryIterator13.listFiles(file23);
        java.util.ArrayDeque<java.util.Iterator<java.io.File>> fileItorQueue25 = new java.util.ArrayDeque<java.util.Iterator<java.io.File>>();
        boolean boolean26 = fileItorQueue25.add(fileItor24);
        fileEntryIterator0.stack = fileItorQueue25;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive28 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest29 = explodedArchive28.manifest;
        explodedArchive28.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive32 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest33 = explodedArchive32.manifest;
        explodedArchive32.recursive = false;
        java.util.jar.Manifest manifest36 = explodedArchive32.manifest;
        java.io.File file37 = explodedArchive32.manifestFile;
        java.io.File file38 = null;
        java.io.File file39 = explodedArchive32.getManifestFile(file38);
        explodedArchive28.manifestFile = file38;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive41 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest42 = explodedArchive41.manifest;
        explodedArchive41.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive45 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest46 = explodedArchive45.manifest;
        explodedArchive45.recursive = false;
        java.util.jar.Manifest manifest49 = explodedArchive45.manifest;
        java.io.File file50 = explodedArchive45.manifestFile;
        java.io.File file51 = null;
        java.io.File file52 = explodedArchive45.getManifestFile(file51);
        explodedArchive41.manifestFile = file51;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive54 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest55 = explodedArchive54.manifest;
        explodedArchive54.recursive = false;
        java.util.jar.Manifest manifest58 = explodedArchive54.manifest;
        java.io.File file59 = explodedArchive54.manifestFile;
        java.io.File file60 = null;
        java.io.File file61 = explodedArchive54.getManifestFile(file60);
        explodedArchive41.manifestFile = file61;
        explodedArchive28.root = file61;
        java.util.Iterator<java.io.File> fileItor64 = fileEntryIterator0.listFiles(file61);
        java.util.Comparator<java.io.File> fileComparator65 = fileEntryIterator0.entryComparator;
        boolean boolean66 = fileEntryIterator0.recursive;
        java.io.File file67 = fileEntryIterator0.current;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file23.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file23.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file39.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file39.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file52.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file52.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file61.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file61.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file67);
    }

    @Test
    public void test928() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test928");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        boolean boolean1 = explodedArchive0.recursive;
        java.lang.String str2 = explodedArchive0.toString();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator3 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file4 = null;
        fileEntryIterator3.current = file4;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive6 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest7 = explodedArchive6.manifest;
        explodedArchive6.recursive = false;
        java.util.jar.Manifest manifest10 = explodedArchive6.manifest;
        java.io.File file11 = explodedArchive6.manifestFile;
        java.io.File file12 = null;
        java.io.File file13 = explodedArchive6.getManifestFile(file12);
        java.util.Iterator<java.io.File> fileItor14 = fileEntryIterator3.listFiles(file13);
        java.io.File file15 = fileEntryIterator3.current;
        boolean boolean16 = fileEntryIterator3.recursive;
        java.io.File file17 = fileEntryIterator3.poll();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator18 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file19 = null;
        fileEntryIterator18.current = file19;
        fileEntryIterator18.recursive = true;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator23 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator24 = entryComparator23.reversed();
        java.util.Comparator<java.io.File> fileComparator25 = entryComparator23.reversed();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive26 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest27 = explodedArchive26.manifest;
        explodedArchive26.recursive = false;
        java.util.jar.Manifest manifest30 = explodedArchive26.manifest;
        java.io.File file31 = explodedArchive26.manifestFile;
        java.io.File file32 = null;
        java.io.File file33 = explodedArchive26.getManifestFile(file32);
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive34 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest35 = explodedArchive34.manifest;
        explodedArchive34.recursive = false;
        java.io.File file38 = null;
        explodedArchive34.root = file38;
        java.io.File file40 = explodedArchive34.root;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive41 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest42 = explodedArchive41.manifest;
        explodedArchive41.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive45 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest46 = explodedArchive45.manifest;
        explodedArchive45.recursive = false;
        java.util.jar.Manifest manifest49 = explodedArchive45.manifest;
        java.io.File file50 = explodedArchive45.manifestFile;
        java.io.File file51 = null;
        java.io.File file52 = explodedArchive45.getManifestFile(file51);
        explodedArchive41.manifestFile = file51;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive54 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest55 = explodedArchive54.manifest;
        explodedArchive54.recursive = false;
        java.util.jar.Manifest manifest58 = explodedArchive54.manifest;
        java.io.File file59 = explodedArchive54.manifestFile;
        java.io.File file60 = null;
        java.io.File file61 = explodedArchive54.getManifestFile(file60);
        explodedArchive41.manifestFile = file61;
        java.io.File file63 = explodedArchive34.getManifestFile(file61);
        int int64 = entryComparator23.compare(file33, file61);
        java.util.Iterator<java.io.File> fileItor65 = fileEntryIterator18.listFiles(file33);
        fileEntryIterator3.current = file33;
        explodedArchive0.root = file33;
        java.io.File file68 = null;
        java.io.File file69 = explodedArchive0.getManifestFile(file68);
        java.io.File file70 = explodedArchive0.manifestFile;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str2 + "' != '" + "exploded archive" + "'", str2.equals("exploded archive"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file13.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file13.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file33.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file33.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file52.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file52.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file61.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file61.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file63.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file63.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file69.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file69.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file70);
    }

    @Test
    public void test929() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test929");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest1 = explodedArchive0.manifest;
        explodedArchive0.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive4 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest5 = explodedArchive4.manifest;
        explodedArchive4.recursive = false;
        java.util.jar.Manifest manifest8 = explodedArchive4.manifest;
        java.io.File file9 = explodedArchive4.manifestFile;
        java.io.File file10 = null;
        java.io.File file11 = explodedArchive4.getManifestFile(file10);
        explodedArchive0.manifestFile = file10;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive13 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest14 = explodedArchive13.manifest;
        explodedArchive13.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive17 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest18 = explodedArchive17.manifest;
        explodedArchive17.recursive = false;
        java.util.jar.Manifest manifest21 = explodedArchive17.manifest;
        java.io.File file22 = explodedArchive17.manifestFile;
        java.io.File file23 = null;
        java.io.File file24 = explodedArchive17.getManifestFile(file23);
        explodedArchive13.manifestFile = file23;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive26 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest27 = explodedArchive26.manifest;
        explodedArchive26.recursive = false;
        java.util.jar.Manifest manifest30 = explodedArchive26.manifest;
        java.io.File file31 = explodedArchive26.manifestFile;
        java.io.File file32 = null;
        java.io.File file33 = explodedArchive26.getManifestFile(file32);
        explodedArchive13.manifestFile = file33;
        explodedArchive0.root = file33;
        java.net.URL uRL36 = explodedArchive0.getUrl();
        java.net.URL uRL37 = explodedArchive0.getUrl();
        boolean boolean38 = explodedArchive0.recursive;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file11.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file11.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file24.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file24.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file33.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file33.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(uRL36);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(uRL36.toString(), "file:/server/study-execution/new-nimrod/nimrod-hunoroutput-test-dest/spring-boot/af20dc6cc45c032573413c401f9f73aa75371744/randoop_1/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(uRL37);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(uRL37.toString(), "file:/server/study-execution/new-nimrod/nimrod-hunoroutput-test-dest/spring-boot/af20dc6cc45c032573413c401f9f73aa75371744/randoop_1/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
    }

    @Test
    public void test930() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test930");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest1 = explodedArchive0.manifest;
        explodedArchive0.recursive = false;
        java.io.File file4 = null;
        explodedArchive0.root = file4;
        java.io.File file6 = explodedArchive0.root;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive7 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest8 = explodedArchive7.manifest;
        explodedArchive7.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive11 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest12 = explodedArchive11.manifest;
        explodedArchive11.recursive = false;
        java.util.jar.Manifest manifest15 = explodedArchive11.manifest;
        java.io.File file16 = explodedArchive11.manifestFile;
        java.io.File file17 = null;
        java.io.File file18 = explodedArchive11.getManifestFile(file17);
        explodedArchive7.manifestFile = file17;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive20 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest21 = explodedArchive20.manifest;
        explodedArchive20.recursive = false;
        java.util.jar.Manifest manifest24 = explodedArchive20.manifest;
        java.io.File file25 = explodedArchive20.manifestFile;
        java.io.File file26 = null;
        java.io.File file27 = explodedArchive20.getManifestFile(file26);
        explodedArchive7.manifestFile = file27;
        java.io.File file29 = explodedArchive0.getManifestFile(file27);
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator30 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file31 = null;
        fileEntryIterator30.current = file31;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive33 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.lang.String str34 = explodedArchive33.toString();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive35 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file36 = explodedArchive35.root;
        java.io.File file37 = null;
        explodedArchive35.manifestFile = file37;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive39 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest40 = explodedArchive39.manifest;
        explodedArchive39.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive43 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest44 = explodedArchive43.manifest;
        explodedArchive43.recursive = false;
        java.util.jar.Manifest manifest47 = explodedArchive43.manifest;
        java.io.File file48 = explodedArchive43.manifestFile;
        java.io.File file49 = null;
        java.io.File file50 = explodedArchive43.getManifestFile(file49);
        explodedArchive39.manifestFile = file49;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive52 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest53 = explodedArchive52.manifest;
        explodedArchive52.recursive = false;
        java.util.jar.Manifest manifest56 = explodedArchive52.manifest;
        java.io.File file57 = explodedArchive52.manifestFile;
        java.io.File file58 = null;
        java.io.File file59 = explodedArchive52.getManifestFile(file58);
        explodedArchive39.manifestFile = file59;
        java.io.File file61 = explodedArchive35.getManifestFile(file59);
        java.io.File file62 = explodedArchive33.getManifestFile(file59);
        fileEntryIterator30.root = file59;
        explodedArchive0.manifestFile = file59;
        java.util.jar.Manifest manifest65 = explodedArchive0.getManifest();
        // The following exception was thrown during execution in test generation
        try {
            java.net.URL uRL66 = explodedArchive0.getUrl();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file18.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file18.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file27.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file27.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file29.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file29.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str34 + "' != '" + "exploded archive" + "'", str34.equals("exploded archive"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file50.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file50.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file59.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file59.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file61.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file61.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file62.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file62.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest65);
    }

    @Test
    public void test931() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test931");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file1 = null;
        fileEntryIterator0.current = file1;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive3 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest4 = explodedArchive3.manifest;
        explodedArchive3.recursive = false;
        java.util.jar.Manifest manifest7 = explodedArchive3.manifest;
        java.io.File file8 = explodedArchive3.manifestFile;
        java.io.File file9 = null;
        java.io.File file10 = explodedArchive3.getManifestFile(file9);
        java.util.Iterator<java.io.File> fileItor11 = fileEntryIterator0.listFiles(file10);
        boolean boolean12 = fileEntryIterator0.hasNext();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator13 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator14 = entryComparator13.reversed();
        java.util.Comparator<java.io.File> fileComparator15 = entryComparator13.reversed();
        fileEntryIterator0.entryComparator = entryComparator13;
        boolean boolean17 = fileEntryIterator0.hasNext();
        fileEntryIterator0.recursive = true;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntry fileEntry20 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntry();
        java.lang.String str21 = fileEntry20.getName();
        java.io.File file22 = fileEntry20.getFile();
        java.io.File file23 = fileEntry20.file;
        fileEntry20.name = "exploded archive";
        java.io.File file26 = fileEntry20.file;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive27 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file28 = explodedArchive27.root;
        java.io.File file29 = null;
        explodedArchive27.manifestFile = file29;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive31 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest32 = explodedArchive31.manifest;
        explodedArchive31.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive35 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest36 = explodedArchive35.manifest;
        explodedArchive35.recursive = false;
        java.util.jar.Manifest manifest39 = explodedArchive35.manifest;
        java.io.File file40 = explodedArchive35.manifestFile;
        java.io.File file41 = null;
        java.io.File file42 = explodedArchive35.getManifestFile(file41);
        explodedArchive31.manifestFile = file41;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive44 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest45 = explodedArchive44.manifest;
        explodedArchive44.recursive = false;
        java.util.jar.Manifest manifest48 = explodedArchive44.manifest;
        java.io.File file49 = explodedArchive44.manifestFile;
        java.io.File file50 = null;
        java.io.File file51 = explodedArchive44.getManifestFile(file50);
        explodedArchive31.manifestFile = file51;
        java.io.File file53 = explodedArchive27.getManifestFile(file51);
        java.io.File file54 = explodedArchive27.root;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator55 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        boolean boolean56 = fileEntryIterator55.hasNext();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator57 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator58 = entryComparator57.reversed();
        java.util.Comparator<java.io.File> fileComparator59 = fileComparator58.reversed();
        fileEntryIterator55.entryComparator = fileComparator59;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive61 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file62 = explodedArchive61.root;
        java.io.File file63 = null;
        explodedArchive61.manifestFile = file63;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive65 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest66 = explodedArchive65.manifest;
        explodedArchive65.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive69 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest70 = explodedArchive69.manifest;
        explodedArchive69.recursive = false;
        java.util.jar.Manifest manifest73 = explodedArchive69.manifest;
        java.io.File file74 = explodedArchive69.manifestFile;
        java.io.File file75 = null;
        java.io.File file76 = explodedArchive69.getManifestFile(file75);
        explodedArchive65.manifestFile = file75;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive78 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest79 = explodedArchive78.manifest;
        explodedArchive78.recursive = false;
        java.util.jar.Manifest manifest82 = explodedArchive78.manifest;
        java.io.File file83 = explodedArchive78.manifestFile;
        java.io.File file84 = null;
        java.io.File file85 = explodedArchive78.getManifestFile(file84);
        explodedArchive65.manifestFile = file85;
        java.io.File file87 = explodedArchive61.getManifestFile(file85);
        java.util.Iterator<java.io.File> fileItor88 = fileEntryIterator55.listFiles(file87);
        explodedArchive27.manifestFile = file87;
        java.io.File file90 = explodedArchive27.manifestFile;
        fileEntry20.file = file90;
        fileEntryIterator0.current = file90;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file42.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file42.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file51.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file51.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file53.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file53.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest73);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file76);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file76.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file76.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest79);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest82);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file83);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file85);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file85.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file85.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file87);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file87.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file87.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor88);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file90);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file90.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file90.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
    }

    @Test
    public void test932() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test932");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        boolean boolean1 = fileEntryIterator0.recursive;
        java.io.File file2 = fileEntryIterator0.current;
        boolean boolean3 = fileEntryIterator0.hasNext();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator4 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file5 = null;
        fileEntryIterator4.current = file5;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive7 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest8 = explodedArchive7.manifest;
        explodedArchive7.recursive = false;
        java.util.jar.Manifest manifest11 = explodedArchive7.manifest;
        java.io.File file12 = explodedArchive7.manifestFile;
        java.io.File file13 = null;
        java.io.File file14 = explodedArchive7.getManifestFile(file13);
        java.util.Iterator<java.io.File> fileItor15 = fileEntryIterator4.listFiles(file14);
        java.io.File file16 = fileEntryIterator4.root;
        java.io.File file17 = fileEntryIterator4.root;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator18 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file19 = null;
        fileEntryIterator18.current = file19;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive21 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest22 = explodedArchive21.manifest;
        explodedArchive21.recursive = false;
        java.util.jar.Manifest manifest25 = explodedArchive21.manifest;
        java.io.File file26 = explodedArchive21.manifestFile;
        java.io.File file27 = null;
        java.io.File file28 = explodedArchive21.getManifestFile(file27);
        java.util.Iterator<java.io.File> fileItor29 = fileEntryIterator18.listFiles(file28);
        java.util.ArrayDeque<java.util.Iterator<java.io.File>> fileItorQueue30 = new java.util.ArrayDeque<java.util.Iterator<java.io.File>>();
        boolean boolean31 = fileItorQueue30.add(fileItor29);
        fileEntryIterator4.stack = fileItorQueue30;
        fileEntryIterator0.stack = fileItorQueue30;
        boolean boolean34 = fileEntryIterator0.recursive;
        java.util.Deque<java.util.Iterator<java.io.File>> fileItorQueue35 = fileEntryIterator0.stack;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator36 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator37 = entryComparator36.reversed();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator38 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator39 = entryComparator38.reversed();
        java.util.Comparator<java.io.File> fileComparator40 = entryComparator36.thenComparing(fileComparator39);
        fileEntryIterator0.entryComparator = fileComparator40;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file14.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file14.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file28.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file28.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItorQueue35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator40);
    }

    @Test
    public void test933() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test933");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file1 = null;
        fileEntryIterator0.current = file1;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive3 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest4 = explodedArchive3.manifest;
        explodedArchive3.recursive = false;
        java.util.jar.Manifest manifest7 = explodedArchive3.manifest;
        java.io.File file8 = explodedArchive3.manifestFile;
        java.io.File file9 = null;
        java.io.File file10 = explodedArchive3.getManifestFile(file9);
        java.util.Iterator<java.io.File> fileItor11 = fileEntryIterator0.listFiles(file10);
        java.io.File file12 = fileEntryIterator0.root;
        java.io.File file13 = fileEntryIterator0.root;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator14 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file15 = null;
        fileEntryIterator14.current = file15;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive17 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest18 = explodedArchive17.manifest;
        explodedArchive17.recursive = false;
        java.util.jar.Manifest manifest21 = explodedArchive17.manifest;
        java.io.File file22 = explodedArchive17.manifestFile;
        java.io.File file23 = null;
        java.io.File file24 = explodedArchive17.getManifestFile(file23);
        java.util.Iterator<java.io.File> fileItor25 = fileEntryIterator14.listFiles(file24);
        java.util.ArrayDeque<java.util.Iterator<java.io.File>> fileItorQueue26 = new java.util.ArrayDeque<java.util.Iterator<java.io.File>>();
        boolean boolean27 = fileItorQueue26.add(fileItor25);
        fileEntryIterator0.stack = fileItorQueue26;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive29 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest30 = explodedArchive29.manifest;
        explodedArchive29.recursive = false;
        java.io.File file33 = null;
        explodedArchive29.root = file33;
        java.io.File file35 = explodedArchive29.root;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive36 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest37 = explodedArchive36.manifest;
        explodedArchive36.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive40 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest41 = explodedArchive40.manifest;
        explodedArchive40.recursive = false;
        java.util.jar.Manifest manifest44 = explodedArchive40.manifest;
        java.io.File file45 = explodedArchive40.manifestFile;
        java.io.File file46 = null;
        java.io.File file47 = explodedArchive40.getManifestFile(file46);
        explodedArchive36.manifestFile = file46;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive49 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest50 = explodedArchive49.manifest;
        explodedArchive49.recursive = false;
        java.util.jar.Manifest manifest53 = explodedArchive49.manifest;
        java.io.File file54 = explodedArchive49.manifestFile;
        java.io.File file55 = null;
        java.io.File file56 = explodedArchive49.getManifestFile(file55);
        explodedArchive36.manifestFile = file56;
        java.io.File file58 = explodedArchive29.getManifestFile(file56);
        fileEntryIterator0.current = file56;
        java.util.Deque<java.util.Iterator<java.io.File>> fileItorQueue60 = fileEntryIterator0.stack;
        boolean boolean61 = fileEntryIterator0.hasNext();
        boolean boolean62 = fileEntryIterator0.hasNext();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file24.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file24.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file47.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file47.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file56.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file56.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file58.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file58.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItorQueue60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
    }

    @Test
    public void test934() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test934");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file1 = null;
        fileEntryIterator0.current = file1;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive3 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest4 = explodedArchive3.manifest;
        explodedArchive3.recursive = false;
        java.util.jar.Manifest manifest7 = explodedArchive3.manifest;
        java.io.File file8 = explodedArchive3.manifestFile;
        java.io.File file9 = null;
        java.io.File file10 = explodedArchive3.getManifestFile(file9);
        java.util.Iterator<java.io.File> fileItor11 = fileEntryIterator0.listFiles(file10);
        java.io.File file12 = fileEntryIterator0.root;
        java.io.File file13 = fileEntryIterator0.current;
        java.io.File file14 = fileEntryIterator0.poll();
        java.io.File file15 = fileEntryIterator0.poll();
        fileEntryIterator0.recursive = false;
        boolean boolean18 = fileEntryIterator0.hasNext();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test935() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test935");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntry fileEntry0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntry();
        java.io.File file1 = fileEntry0.getFile();
        java.io.File file2 = fileEntry0.getFile();
        java.lang.String str3 = fileEntry0.name;
        fileEntry0.name = "";
        java.io.File file6 = fileEntry0.file;
        java.io.File file7 = fileEntry0.getFile();
        java.io.File file8 = fileEntry0.file;
        java.lang.String str9 = fileEntry0.name;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator10 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file11 = null;
        fileEntryIterator10.current = file11;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive13 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest14 = explodedArchive13.manifest;
        explodedArchive13.recursive = false;
        java.util.jar.Manifest manifest17 = explodedArchive13.manifest;
        java.io.File file18 = explodedArchive13.manifestFile;
        java.io.File file19 = null;
        java.io.File file20 = explodedArchive13.getManifestFile(file19);
        java.util.Iterator<java.io.File> fileItor21 = fileEntryIterator10.listFiles(file20);
        java.io.File file22 = fileEntryIterator10.root;
        boolean boolean23 = fileEntryIterator10.hasNext();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator24 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file25 = null;
        fileEntryIterator24.current = file25;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive27 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.lang.String str28 = explodedArchive27.toString();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive29 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file30 = explodedArchive29.root;
        java.io.File file31 = null;
        explodedArchive29.manifestFile = file31;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive33 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest34 = explodedArchive33.manifest;
        explodedArchive33.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive37 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest38 = explodedArchive37.manifest;
        explodedArchive37.recursive = false;
        java.util.jar.Manifest manifest41 = explodedArchive37.manifest;
        java.io.File file42 = explodedArchive37.manifestFile;
        java.io.File file43 = null;
        java.io.File file44 = explodedArchive37.getManifestFile(file43);
        explodedArchive33.manifestFile = file43;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive46 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest47 = explodedArchive46.manifest;
        explodedArchive46.recursive = false;
        java.util.jar.Manifest manifest50 = explodedArchive46.manifest;
        java.io.File file51 = explodedArchive46.manifestFile;
        java.io.File file52 = null;
        java.io.File file53 = explodedArchive46.getManifestFile(file52);
        explodedArchive33.manifestFile = file53;
        java.io.File file55 = explodedArchive29.getManifestFile(file53);
        java.io.File file56 = explodedArchive27.getManifestFile(file53);
        fileEntryIterator24.root = file53;
        java.io.File file58 = fileEntryIterator24.poll();
        java.io.File file59 = fileEntryIterator24.root;
        java.util.Iterator<java.io.File> fileItor60 = fileEntryIterator10.listFiles(file59);
        fileEntry0.file = file59;
        // The following exception was thrown during execution in test generation
        try {
            org.springframework.boot.loader.archive.ExplodedArchive explodedArchive63 = new org.springframework.boot.loader.archive.ExplodedArchive(file59, true);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid source folder META-INF/MANIFEST.MF");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str9 + "' != '" + "" + "'", str9.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file20.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file20.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str28 + "' != '" + "exploded archive" + "'", str28.equals("exploded archive"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file44.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file44.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file53.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file53.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file55.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file55.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file56.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file56.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file59.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file59.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor60);
    }

    @Test
    public void test936() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test936");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest1 = explodedArchive0.manifest;
        explodedArchive0.recursive = false;
        java.util.jar.Manifest manifest4 = explodedArchive0.manifest;
        explodedArchive0.recursive = true;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator7 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file8 = null;
        fileEntryIterator7.current = file8;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive10 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.lang.String str11 = explodedArchive10.toString();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive12 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file13 = explodedArchive12.root;
        java.io.File file14 = null;
        explodedArchive12.manifestFile = file14;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive16 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest17 = explodedArchive16.manifest;
        explodedArchive16.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive20 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest21 = explodedArchive20.manifest;
        explodedArchive20.recursive = false;
        java.util.jar.Manifest manifest24 = explodedArchive20.manifest;
        java.io.File file25 = explodedArchive20.manifestFile;
        java.io.File file26 = null;
        java.io.File file27 = explodedArchive20.getManifestFile(file26);
        explodedArchive16.manifestFile = file26;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive29 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest30 = explodedArchive29.manifest;
        explodedArchive29.recursive = false;
        java.util.jar.Manifest manifest33 = explodedArchive29.manifest;
        java.io.File file34 = explodedArchive29.manifestFile;
        java.io.File file35 = null;
        java.io.File file36 = explodedArchive29.getManifestFile(file35);
        explodedArchive16.manifestFile = file36;
        java.io.File file38 = explodedArchive12.getManifestFile(file36);
        java.io.File file39 = explodedArchive10.getManifestFile(file36);
        fileEntryIterator7.root = file36;
        java.io.File file41 = fileEntryIterator7.root;
        explodedArchive0.root = file41;
        explodedArchive0.recursive = true;
        java.net.URL uRL45 = explodedArchive0.getUrl();
        java.util.Iterator<org.springframework.boot.loader.archive.Archive.Entry> entryItor46 = explodedArchive0.iterator();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str11 + "' != '" + "exploded archive" + "'", str11.equals("exploded archive"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file27.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file27.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file36.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file36.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file38.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file38.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file39.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file39.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file41.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file41.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(uRL45);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(uRL45.toString(), "file:/server/study-execution/new-nimrod/nimrod-hunoroutput-test-dest/spring-boot/af20dc6cc45c032573413c401f9f73aa75371744/randoop_1/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(entryItor46);
    }

    @Test
    public void test937() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test937");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file1 = null;
        fileEntryIterator0.current = file1;
        fileEntryIterator0.recursive = true;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator5 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file6 = null;
        fileEntryIterator5.current = file6;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive8 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest9 = explodedArchive8.manifest;
        explodedArchive8.recursive = false;
        java.util.jar.Manifest manifest12 = explodedArchive8.manifest;
        java.io.File file13 = explodedArchive8.manifestFile;
        java.io.File file14 = null;
        java.io.File file15 = explodedArchive8.getManifestFile(file14);
        java.util.Iterator<java.io.File> fileItor16 = fileEntryIterator5.listFiles(file15);
        java.io.File file17 = fileEntryIterator5.root;
        java.io.File file18 = fileEntryIterator5.root;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator19 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file20 = null;
        fileEntryIterator19.current = file20;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive22 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest23 = explodedArchive22.manifest;
        explodedArchive22.recursive = false;
        java.util.jar.Manifest manifest26 = explodedArchive22.manifest;
        java.io.File file27 = explodedArchive22.manifestFile;
        java.io.File file28 = null;
        java.io.File file29 = explodedArchive22.getManifestFile(file28);
        java.util.Iterator<java.io.File> fileItor30 = fileEntryIterator19.listFiles(file29);
        java.util.ArrayDeque<java.util.Iterator<java.io.File>> fileItorQueue31 = new java.util.ArrayDeque<java.util.Iterator<java.io.File>>();
        boolean boolean32 = fileItorQueue31.add(fileItor30);
        fileEntryIterator5.stack = fileItorQueue31;
        java.util.Deque<java.util.Iterator<java.io.File>> fileItorQueue34 = fileEntryIterator5.stack;
        fileEntryIterator0.stack = fileItorQueue34;
        java.util.Comparator<java.io.File> fileComparator36 = fileEntryIterator0.entryComparator;
        boolean boolean37 = fileEntryIterator0.recursive;
        fileEntryIterator0.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive40 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file41 = explodedArchive40.root;
        java.io.File file42 = explodedArchive40.manifestFile;
        java.util.jar.Manifest manifest43 = null;
        explodedArchive40.manifest = manifest43;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator45 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file46 = null;
        fileEntryIterator45.current = file46;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive48 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.lang.String str49 = explodedArchive48.toString();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive50 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file51 = explodedArchive50.root;
        java.io.File file52 = null;
        explodedArchive50.manifestFile = file52;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive54 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest55 = explodedArchive54.manifest;
        explodedArchive54.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive58 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest59 = explodedArchive58.manifest;
        explodedArchive58.recursive = false;
        java.util.jar.Manifest manifest62 = explodedArchive58.manifest;
        java.io.File file63 = explodedArchive58.manifestFile;
        java.io.File file64 = null;
        java.io.File file65 = explodedArchive58.getManifestFile(file64);
        explodedArchive54.manifestFile = file64;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive67 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest68 = explodedArchive67.manifest;
        explodedArchive67.recursive = false;
        java.util.jar.Manifest manifest71 = explodedArchive67.manifest;
        java.io.File file72 = explodedArchive67.manifestFile;
        java.io.File file73 = null;
        java.io.File file74 = explodedArchive67.getManifestFile(file73);
        explodedArchive54.manifestFile = file74;
        java.io.File file76 = explodedArchive50.getManifestFile(file74);
        java.io.File file77 = explodedArchive48.getManifestFile(file74);
        fileEntryIterator45.root = file74;
        java.io.File file79 = explodedArchive40.getManifestFile(file74);
        java.util.Iterator<java.io.File> fileItor80 = fileEntryIterator0.listFiles(file74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file15.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file15.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file29.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file29.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItorQueue34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str49 + "' != '" + "exploded archive" + "'", str49.equals("exploded archive"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file65.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file65.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file74.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file74.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file76);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file76.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file76.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file77);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file77.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file77.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file79);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file79.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file79.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor80);
    }

    @Test
    public void test938() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test938");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        boolean boolean1 = fileEntryIterator0.hasNext();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator2 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator3 = entryComparator2.reversed();
        java.util.Comparator<java.io.File> fileComparator4 = fileComparator3.reversed();
        fileEntryIterator0.entryComparator = fileComparator4;
        java.util.Comparator<java.io.File> fileComparator6 = fileEntryIterator0.entryComparator;
        boolean boolean7 = fileEntryIterator0.hasNext();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntry fileEntry8 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntry();
        java.io.File file9 = fileEntry8.file;
        java.lang.String str10 = fileEntry8.name;
        java.io.File file11 = fileEntry8.file;
        java.io.File file12 = fileEntry8.file;
        java.lang.String str13 = fileEntry8.name;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive14 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.lang.String str15 = explodedArchive14.toString();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive16 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file17 = explodedArchive16.root;
        java.io.File file18 = null;
        explodedArchive16.manifestFile = file18;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive20 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest21 = explodedArchive20.manifest;
        explodedArchive20.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive24 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest25 = explodedArchive24.manifest;
        explodedArchive24.recursive = false;
        java.util.jar.Manifest manifest28 = explodedArchive24.manifest;
        java.io.File file29 = explodedArchive24.manifestFile;
        java.io.File file30 = null;
        java.io.File file31 = explodedArchive24.getManifestFile(file30);
        explodedArchive20.manifestFile = file30;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive33 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest34 = explodedArchive33.manifest;
        explodedArchive33.recursive = false;
        java.util.jar.Manifest manifest37 = explodedArchive33.manifest;
        java.io.File file38 = explodedArchive33.manifestFile;
        java.io.File file39 = null;
        java.io.File file40 = explodedArchive33.getManifestFile(file39);
        explodedArchive20.manifestFile = file40;
        java.io.File file42 = explodedArchive16.getManifestFile(file40);
        java.io.File file43 = explodedArchive14.getManifestFile(file40);
        fileEntry8.file = file40;
        java.io.File file45 = fileEntry8.getFile();
        java.util.Iterator<java.io.File> fileItor46 = fileEntryIterator0.listFiles(file45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str15 + "' != '" + "exploded archive" + "'", str15.equals("exploded archive"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file31.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file31.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file40.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file40.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file42.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file42.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file43.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file43.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file45.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file45.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor46);
    }

    @Test
    public void test939() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test939");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntry fileEntry0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntry();
        java.lang.String str1 = fileEntry0.name;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator2 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file3 = null;
        fileEntryIterator2.current = file3;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive5 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.lang.String str6 = explodedArchive5.toString();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive7 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file8 = explodedArchive7.root;
        java.io.File file9 = null;
        explodedArchive7.manifestFile = file9;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive11 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest12 = explodedArchive11.manifest;
        explodedArchive11.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive15 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest16 = explodedArchive15.manifest;
        explodedArchive15.recursive = false;
        java.util.jar.Manifest manifest19 = explodedArchive15.manifest;
        java.io.File file20 = explodedArchive15.manifestFile;
        java.io.File file21 = null;
        java.io.File file22 = explodedArchive15.getManifestFile(file21);
        explodedArchive11.manifestFile = file21;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive24 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest25 = explodedArchive24.manifest;
        explodedArchive24.recursive = false;
        java.util.jar.Manifest manifest28 = explodedArchive24.manifest;
        java.io.File file29 = explodedArchive24.manifestFile;
        java.io.File file30 = null;
        java.io.File file31 = explodedArchive24.getManifestFile(file30);
        explodedArchive11.manifestFile = file31;
        java.io.File file33 = explodedArchive7.getManifestFile(file31);
        java.io.File file34 = explodedArchive5.getManifestFile(file31);
        fileEntryIterator2.root = file31;
        fileEntry0.file = file31;
        java.io.File file37 = fileEntry0.file;
        boolean boolean38 = fileEntry0.isDirectory();
        java.lang.String str39 = fileEntry0.name;
        fileEntry0.name = "";
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "exploded archive" + "'", str6.equals("exploded archive"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file22.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file22.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file31.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file31.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file33.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file33.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file34.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file34.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file37.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file37.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str39);
    }

    @Test
    public void test940() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test940");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file1 = null;
        fileEntryIterator0.current = file1;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive3 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.lang.String str4 = explodedArchive3.toString();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive5 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file6 = explodedArchive5.root;
        java.io.File file7 = null;
        explodedArchive5.manifestFile = file7;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive9 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest10 = explodedArchive9.manifest;
        explodedArchive9.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive13 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest14 = explodedArchive13.manifest;
        explodedArchive13.recursive = false;
        java.util.jar.Manifest manifest17 = explodedArchive13.manifest;
        java.io.File file18 = explodedArchive13.manifestFile;
        java.io.File file19 = null;
        java.io.File file20 = explodedArchive13.getManifestFile(file19);
        explodedArchive9.manifestFile = file19;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive22 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest23 = explodedArchive22.manifest;
        explodedArchive22.recursive = false;
        java.util.jar.Manifest manifest26 = explodedArchive22.manifest;
        java.io.File file27 = explodedArchive22.manifestFile;
        java.io.File file28 = null;
        java.io.File file29 = explodedArchive22.getManifestFile(file28);
        explodedArchive9.manifestFile = file29;
        java.io.File file31 = explodedArchive5.getManifestFile(file29);
        java.io.File file32 = explodedArchive3.getManifestFile(file29);
        fileEntryIterator0.root = file29;
        java.io.File file34 = fileEntryIterator0.poll();
        java.io.File file35 = fileEntryIterator0.root;
        boolean boolean36 = fileEntryIterator0.recursive;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive37 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest38 = explodedArchive37.manifest;
        explodedArchive37.recursive = false;
        java.util.jar.Manifest manifest41 = explodedArchive37.manifest;
        java.io.File file42 = explodedArchive37.manifestFile;
        java.io.File file43 = null;
        java.io.File file44 = explodedArchive37.getManifestFile(file43);
        fileEntryIterator0.root = file44;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str4 + "' != '" + "exploded archive" + "'", str4.equals("exploded archive"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file20.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file20.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file29.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file29.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file31.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file31.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file32.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file32.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file35.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file35.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file44.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file44.toString(), "META-INF/MANIFEST.MF");
    }

    @Test
    public void test941() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test941");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file1 = null;
        fileEntryIterator0.current = file1;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive3 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.lang.String str4 = explodedArchive3.toString();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive5 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file6 = explodedArchive5.root;
        java.io.File file7 = null;
        explodedArchive5.manifestFile = file7;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive9 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest10 = explodedArchive9.manifest;
        explodedArchive9.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive13 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest14 = explodedArchive13.manifest;
        explodedArchive13.recursive = false;
        java.util.jar.Manifest manifest17 = explodedArchive13.manifest;
        java.io.File file18 = explodedArchive13.manifestFile;
        java.io.File file19 = null;
        java.io.File file20 = explodedArchive13.getManifestFile(file19);
        explodedArchive9.manifestFile = file19;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive22 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest23 = explodedArchive22.manifest;
        explodedArchive22.recursive = false;
        java.util.jar.Manifest manifest26 = explodedArchive22.manifest;
        java.io.File file27 = explodedArchive22.manifestFile;
        java.io.File file28 = null;
        java.io.File file29 = explodedArchive22.getManifestFile(file28);
        explodedArchive9.manifestFile = file29;
        java.io.File file31 = explodedArchive5.getManifestFile(file29);
        java.io.File file32 = explodedArchive3.getManifestFile(file29);
        fileEntryIterator0.root = file29;
        java.io.File file34 = fileEntryIterator0.poll();
        java.io.File file35 = fileEntryIterator0.root;
        boolean boolean36 = fileEntryIterator0.recursive;
        java.io.File file37 = fileEntryIterator0.poll();
        java.util.Deque<java.util.Iterator<java.io.File>> fileItorQueue38 = fileEntryIterator0.stack;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str4 + "' != '" + "exploded archive" + "'", str4.equals("exploded archive"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file20.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file20.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file29.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file29.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file31.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file31.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file32.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file32.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file35.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file35.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItorQueue38);
    }

    @Test
    public void test942() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test942");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file1 = null;
        fileEntryIterator0.current = file1;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive3 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest4 = explodedArchive3.manifest;
        explodedArchive3.recursive = false;
        java.util.jar.Manifest manifest7 = explodedArchive3.manifest;
        java.io.File file8 = explodedArchive3.manifestFile;
        java.io.File file9 = null;
        java.io.File file10 = explodedArchive3.getManifestFile(file9);
        java.util.Iterator<java.io.File> fileItor11 = fileEntryIterator0.listFiles(file10);
        boolean boolean12 = fileEntryIterator0.hasNext();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator13 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator14 = entryComparator13.reversed();
        java.util.Comparator<java.io.File> fileComparator15 = entryComparator13.reversed();
        fileEntryIterator0.entryComparator = fileComparator15;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator17 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file18 = null;
        fileEntryIterator17.current = file18;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive20 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.lang.String str21 = explodedArchive20.toString();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive22 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file23 = explodedArchive22.root;
        java.io.File file24 = null;
        explodedArchive22.manifestFile = file24;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive26 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest27 = explodedArchive26.manifest;
        explodedArchive26.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive30 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest31 = explodedArchive30.manifest;
        explodedArchive30.recursive = false;
        java.util.jar.Manifest manifest34 = explodedArchive30.manifest;
        java.io.File file35 = explodedArchive30.manifestFile;
        java.io.File file36 = null;
        java.io.File file37 = explodedArchive30.getManifestFile(file36);
        explodedArchive26.manifestFile = file36;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive39 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest40 = explodedArchive39.manifest;
        explodedArchive39.recursive = false;
        java.util.jar.Manifest manifest43 = explodedArchive39.manifest;
        java.io.File file44 = explodedArchive39.manifestFile;
        java.io.File file45 = null;
        java.io.File file46 = explodedArchive39.getManifestFile(file45);
        explodedArchive26.manifestFile = file46;
        java.io.File file48 = explodedArchive22.getManifestFile(file46);
        java.io.File file49 = explodedArchive20.getManifestFile(file46);
        fileEntryIterator17.root = file46;
        fileEntryIterator0.current = file46;
        java.io.File file52 = fileEntryIterator0.root;
        java.util.Comparator<java.io.File> fileComparator53 = fileEntryIterator0.entryComparator;
        // The following exception was thrown during execution in test generation
        try {
            fileEntryIterator0.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: remove");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str21 + "' != '" + "exploded archive" + "'", str21.equals("exploded archive"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file37.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file37.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file46.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file46.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file48.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file48.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file49.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file49.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator53);
    }
}
