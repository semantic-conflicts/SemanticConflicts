/*
 * This file was automatically generated by EvoSuite
 * Thu Apr 30 00:10:05 GMT 2020
 */

package org.springframework.boot.loader.archive;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.net.URI;
import java.net.URL;
import java.nio.file.Path;
import java.util.Comparator;
import java.util.Deque;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.NoSuchElementException;
import java.util.Spliterator;
import java.util.function.Consumer;
import java.util.function.ToIntFunction;
import java.util.jar.Manifest;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import org.springframework.boot.loader.archive.Archive;
import org.springframework.boot.loader.archive.ExplodedArchive;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ExplodedArchive_ESTest extends ExplodedArchive_ESTest_scaffolding {

  @Test(timeout = 11000)
  public void test00()  throws Throwable  {
      String string0 = null;
      String string1 = "";
      MockFile mockFile0 = new MockFile(string0, string1);
      boolean boolean0 = true;
      boolean boolean1 = false;
      ExplodedArchive explodedArchive0 = new ExplodedArchive(mockFile0, boolean1);
      mockFile0.deleteOnExit();
      boolean boolean2 = mockFile0.createNewFile();
      explodedArchive0.manifestFile = (File) mockFile0;
      boolean boolean3 = mockFile0.delete();
      boolean boolean4 = mockFile0.setReadable(boolean2, boolean3);
      Manifest manifest0 = explodedArchive0.getManifest();
      ExplodedArchive.FileEntry explodedArchive_FileEntry0 = new ExplodedArchive.FileEntry();
      Manifest manifest1 = explodedArchive0.getManifest();
      Spliterator<Archive.Entry> spliterator0 = explodedArchive0.spliterator();
      explodedArchive_FileEntry0.file = explodedArchive0.root;
      try { 
        explodedArchive0.getNestedArchive(explodedArchive_FileEntry0);
      } catch(FileNotFoundException e) {
         //
         //  (Arquivo ou diret\u00F3rio n\u00E3o encontrado)
         //
         verifyException("java.util.zip.ZipFile", e);
      }
  }

  @Test(timeout = 11000)
  public void test01()  throws Throwable  {
      ExplodedArchive explodedArchive0 = new ExplodedArchive();
      String string0 = explodedArchive0.toString();
      ExplodedArchive.FileEntryIterator explodedArchive_FileEntryIterator0 = new ExplodedArchive.FileEntryIterator();
      // Undeclared exception!
      try { 
        explodedArchive_FileEntryIterator0.remove();
      } catch(UnsupportedOperationException e) {
         //
         // remove
         //
         verifyException("org.springframework.boot.loader.archive.ExplodedArchive$FileEntryIterator", e);
      }
  }

  @Test(timeout = 11000)
  public void test02()  throws Throwable  {
      ExplodedArchive.FileEntry explodedArchive_FileEntry0 = new ExplodedArchive.FileEntry();
      explodedArchive_FileEntry0.file = explodedArchive_FileEntry0.file;
      String string0 = "";
      MockFile mockFile0 = new MockFile(explodedArchive_FileEntry0.file, string0);
      explodedArchive_FileEntry0.file = (File) mockFile0;
      explodedArchive_FileEntry0.file = (File) mockFile0;
      String string1 = explodedArchive_FileEntry0.getName();
      ExplodedArchive explodedArchive0 = new ExplodedArchive(explodedArchive_FileEntry0.file);
      Manifest manifest0 = explodedArchive0.getManifest();
      boolean boolean0 = explodedArchive_FileEntry0.isDirectory();
      ExplodedArchive.FileEntryIterator explodedArchive_FileEntryIterator0 = new ExplodedArchive.FileEntryIterator(mockFile0, explodedArchive0.recursive);
      File file0 = explodedArchive_FileEntryIterator0.poll();
      boolean boolean1 = explodedArchive_FileEntryIterator0.hasNext();
      Archive.EntryFilter archive_EntryFilter0 = mock(Archive.EntryFilter.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        explodedArchive_FileEntryIterator0.next();
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springframework.boot.loader.archive.ExplodedArchive$FileEntryIterator", e);
      }
  }

  @Test(timeout = 11000)
  public void test03()  throws Throwable  {
      String string0 = "";
      MockFile mockFile0 = new MockFile(string0, string0);
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      boolean boolean1 = false;
      ExplodedArchive.FileEntryIterator explodedArchive_FileEntryIterator0 = new ExplodedArchive.FileEntryIterator(mockFile0, boolean1);
      ExplodedArchive explodedArchive0 = new ExplodedArchive(explodedArchive_FileEntryIterator0.root);
      Archive.Entry archive_Entry0 = explodedArchive_FileEntryIterator0.next();
      Archive.EntryFilter archive_EntryFilter0 = mock(Archive.EntryFilter.class, new ViolatedAssumptionAnswer());
      doReturn(boolean1, explodedArchive0.recursive, boolean1, boolean1, boolean1).when(archive_EntryFilter0).matches(any(org.springframework.boot.loader.archive.Archive.Entry.class));
      List<Archive> list0 = explodedArchive0.getNestedArchives(archive_EntryFilter0);
  }

  @Test(timeout = 11000)
  public void test04()  throws Throwable  {
      String string0 = "!m0{7.j\"l:.dj)}6w>";
      File file0 = MockFile.createTempFile(string0, string0);
      boolean boolean0 = true;
      ExplodedArchive explodedArchive0 = null;
      try {
        explodedArchive0 = new ExplodedArchive(file0, boolean0);
      } catch(IllegalArgumentException e) {
         //
         // Invalid source folder /tmp/!m0{7.j\"l:.dj)}6w>0!m0{7.j\"l:.dj)}6w>
         //
         verifyException("org.springframework.boot.loader.archive.ExplodedArchive", e);
      }
  }

  @Test(timeout = 11000)
  public void test05()  throws Throwable  {
      String string0 = "o)+V";
      MockFile mockFile0 = new MockFile(string0);
      ExplodedArchive explodedArchive0 = null;
      try {
        explodedArchive0 = new ExplodedArchive(mockFile0);
      } catch(IllegalArgumentException e) {
         //
         // Invalid source folder o)+V
         //
         verifyException("org.springframework.boot.loader.archive.ExplodedArchive", e);
      }
  }

  @Test(timeout = 11000)
  public void test06()  throws Throwable  {
      ExplodedArchive.FileEntry explodedArchive_FileEntry0 = new ExplodedArchive.FileEntry();
      File file0 = explodedArchive_FileEntry0.getFile();
      boolean boolean0 = true;
      ExplodedArchive explodedArchive0 = null;
      try {
        explodedArchive0 = new ExplodedArchive(explodedArchive_FileEntry0.file, boolean0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springframework.boot.loader.archive.ExplodedArchive", e);
      }
  }

  @Test(timeout = 11000)
  public void test07()  throws Throwable  {
      ExplodedArchive.FileEntryIterator explodedArchive_FileEntryIterator0 = new ExplodedArchive.FileEntryIterator();
      ExplodedArchive explodedArchive0 = new ExplodedArchive();
      // Undeclared exception!
      try { 
        explodedArchive0.iterator();
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springframework.boot.loader.archive.ExplodedArchive$FileEntryIterator", e);
      }
  }

  @Test(timeout = 11000)
  public void test08()  throws Throwable  {
      String string0 = "MANIFEST.MF";
      File file0 = MockFile.createTempFile(string0, string0);
      boolean boolean0 = true;
      ExplodedArchive.FileEntryIterator explodedArchive_FileEntryIterator0 = new ExplodedArchive.FileEntryIterator(file0, boolean0);
      Iterator<File> iterator0 = explodedArchive_FileEntryIterator0.listFiles(file0);
      ExplodedArchive.FileEntry explodedArchive_FileEntry0 = new ExplodedArchive.FileEntry();
      explodedArchive_FileEntryIterator0.root = file0;
      ExplodedArchive.FileEntryIterator.EntryComparator explodedArchive_FileEntryIterator_EntryComparator0 = new ExplodedArchive.FileEntryIterator.EntryComparator();
      // Undeclared exception!
      try { 
        explodedArchive_FileEntryIterator_EntryComparator0.compare(file0, explodedArchive_FileEntryIterator0.current);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springframework.boot.loader.archive.ExplodedArchive$FileEntryIterator$EntryComparator", e);
      }
  }

  @Test(timeout = 11000)
  public void test09()  throws Throwable  {
      ExplodedArchive.FileEntryIterator explodedArchive_FileEntryIterator0 = new ExplodedArchive.FileEntryIterator();
      // Undeclared exception!
      try { 
        explodedArchive_FileEntryIterator0.remove();
      } catch(UnsupportedOperationException e) {
         //
         // remove
         //
         verifyException("org.springframework.boot.loader.archive.ExplodedArchive$FileEntryIterator", e);
      }
  }

  @Test(timeout = 11000)
  public void test10()  throws Throwable  {
      String string0 = "o)+V";
      MockFile mockFile0 = new MockFile(string0);
      ExplodedArchive explodedArchive0 = null;
      try {
        explodedArchive0 = new ExplodedArchive(mockFile0);
      } catch(IllegalArgumentException e) {
         //
         // Invalid source folder o)+V
         //
         verifyException("org.springframework.boot.loader.archive.ExplodedArchive", e);
      }
  }

  @Test(timeout = 11000)
  public void test11()  throws Throwable  {
      ExplodedArchive.FileEntry explodedArchive_FileEntry0 = new ExplodedArchive.FileEntry();
      File file0 = explodedArchive_FileEntry0.getFile();
      boolean boolean0 = false;
      ExplodedArchive explodedArchive0 = null;
      try {
        explodedArchive0 = new ExplodedArchive(explodedArchive_FileEntry0.file, boolean0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springframework.boot.loader.archive.ExplodedArchive", e);
      }
  }

  @Test(timeout = 11000)
  public void test12()  throws Throwable  {
      String string0 = "MANIFEST.MF";
      String string1 = "_.2\"~.p%dl,@q`;r";
      MockFile mockFile0 = new MockFile(string1);
      ExplodedArchive.FileEntry explodedArchive_FileEntry0 = new ExplodedArchive.FileEntry(string0, mockFile0);
      boolean boolean0 = explodedArchive_FileEntry0.isDirectory();
  }

  @Test(timeout = 11000)
  public void test13()  throws Throwable  {
      ExplodedArchive explodedArchive0 = new ExplodedArchive();
      Archive.EntryFilter archive_EntryFilter0 = mock(Archive.EntryFilter.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        explodedArchive0.getNestedArchives(archive_EntryFilter0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springframework.boot.loader.archive.ExplodedArchive$FileEntryIterator", e);
      }
  }

  @Test(timeout = 11000)
  public void test14()  throws Throwable  {
      ExplodedArchive.FileEntryIterator explodedArchive_FileEntryIterator0 = new ExplodedArchive.FileEntryIterator();
      ExplodedArchive explodedArchive0 = new ExplodedArchive();
      Archive.EntryFilter archive_EntryFilter0 = mock(Archive.EntryFilter.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        explodedArchive0.getNestedArchives(archive_EntryFilter0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springframework.boot.loader.archive.ExplodedArchive$FileEntryIterator", e);
      }
  }

  @Test(timeout = 11000)
  public void test15()  throws Throwable  {
      String string0 = "7d\"g'hFM:sP";
      MockFile mockFile0 = new MockFile(string0);
      String string1 = "openConnection";
      MockFile mockFile1 = new MockFile(mockFile0, string1);
      boolean boolean0 = false;
      ExplodedArchive.FileEntryIterator explodedArchive_FileEntryIterator0 = new ExplodedArchive.FileEntryIterator(mockFile1, boolean0);
      File file0 = explodedArchive_FileEntryIterator0.poll();
      boolean boolean1 = explodedArchive_FileEntryIterator0.hasNext();
      URI uRI0 = mockFile1.toURI();
      Iterator<File> iterator0 = explodedArchive_FileEntryIterator0.listFiles(mockFile0);
      ExplodedArchive explodedArchive0 = null;
      try {
        explodedArchive0 = new ExplodedArchive(explodedArchive_FileEntryIterator0.current);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springframework.boot.loader.archive.ExplodedArchive", e);
      }
  }

  @Test(timeout = 11000)
  public void test16()  throws Throwable  {
      ExplodedArchive explodedArchive0 = new ExplodedArchive();
      // Undeclared exception!
      try { 
        explodedArchive0.getUrl();
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springframework.boot.loader.archive.ExplodedArchive", e);
      }
  }

  @Test(timeout = 11000)
  public void test17()  throws Throwable  {
      ExplodedArchive.FileEntryIterator explodedArchive_FileEntryIterator0 = new ExplodedArchive.FileEntryIterator();
      // Undeclared exception!
      try { 
        explodedArchive_FileEntryIterator0.next();
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springframework.boot.loader.archive.ExplodedArchive$FileEntryIterator", e);
      }
  }

  @Test(timeout = 11000)
  public void test18()  throws Throwable  {
      String string0 = "";
      MockFile mockFile0 = new MockFile(string0);
      boolean boolean0 = true;
      ExplodedArchive explodedArchive0 = new ExplodedArchive(mockFile0, boolean0);
      String string1 = explodedArchive0.toString();
  }

  @Test(timeout = 11000)
  public void test19()  throws Throwable  {
      ExplodedArchive.FileEntryIterator explodedArchive_FileEntryIterator0 = new ExplodedArchive.FileEntryIterator();
      String string0 = " QL,;*0CrVLVu";
      String string1 = "";
      MockFile mockFile0 = new MockFile(string0, string1);
      File file0 = mockFile0.getCanonicalFile();
      boolean boolean0 = true;
      boolean boolean1 = mockFile0.setExecutable(boolean0);
      Iterator<File> iterator0 = explodedArchive_FileEntryIterator0.listFiles(mockFile0);
      ExplodedArchive explodedArchive0 = new ExplodedArchive();
      String string2 = explodedArchive0.toString();
      explodedArchive0.manifestFile = explodedArchive_FileEntryIterator0.root;
      ExplodedArchive.FileEntry explodedArchive_FileEntry0 = new ExplodedArchive.FileEntry();
      // Undeclared exception!
      try { 
        explodedArchive0.getNestedArchive(explodedArchive_FileEntry0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springframework.boot.loader.archive.ExplodedArchive", e);
      }
  }

  @Test(timeout = 11000)
  public void test20()  throws Throwable  {
      ExplodedArchive explodedArchive0 = new ExplodedArchive();
      // Undeclared exception!
      try { 
        explodedArchive0.getUrl();
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springframework.boot.loader.archive.ExplodedArchive", e);
      }
  }

  @Test(timeout = 11000)
  public void test21()  throws Throwable  {
      ExplodedArchive explodedArchive0 = new ExplodedArchive();
      // Undeclared exception!
      try { 
        explodedArchive0.getManifest();
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springframework.boot.loader.archive.ExplodedArchive", e);
      }
  }

  @Test(timeout = 11000)
  public void test22()  throws Throwable  {
      ExplodedArchive explodedArchive0 = new ExplodedArchive();
      // Undeclared exception!
      try { 
        explodedArchive0.getManifest();
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springframework.boot.loader.archive.ExplodedArchive", e);
      }
  }

  @Test(timeout = 11000)
  public void test23()  throws Throwable  {
      String string0 = "";
      String string1 = "7,PR$Sm";
      MockFile mockFile0 = new MockFile(string0, string1);
      ExplodedArchive.FileEntry explodedArchive_FileEntry0 = new ExplodedArchive.FileEntry(string0, mockFile0);
      ExplodedArchive explodedArchive0 = new ExplodedArchive();
      ExplodedArchive.FileEntry explodedArchive_FileEntry1 = new ExplodedArchive.FileEntry();
      // Undeclared exception!
      try { 
        explodedArchive0.getNestedArchive(explodedArchive_FileEntry1);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springframework.boot.loader.archive.ExplodedArchive", e);
      }
  }

  @Test(timeout = 11000)
  public void test24()  throws Throwable  {
      ExplodedArchive explodedArchive0 = new ExplodedArchive();
      ExplodedArchive.FileEntry explodedArchive_FileEntry0 = new ExplodedArchive.FileEntry();
      String string0 = explodedArchive_FileEntry0.getName();
      ExplodedArchive.FileEntryIterator explodedArchive_FileEntryIterator0 = new ExplodedArchive.FileEntryIterator();
      // Undeclared exception!
      try { 
        explodedArchive_FileEntryIterator0.remove();
      } catch(UnsupportedOperationException e) {
         //
         // remove
         //
         verifyException("org.springframework.boot.loader.archive.ExplodedArchive$FileEntryIterator", e);
      }
  }

  @Test(timeout = 11000)
  public void test25()  throws Throwable  {
      String string0 = null;
      String string1 = "";
      MockFile mockFile0 = new MockFile(string0, string1);
      boolean boolean0 = false;
      boolean boolean1 = mockFile0.setReadable(boolean0, boolean0);
      boolean boolean2 = false;
      ExplodedArchive explodedArchive0 = new ExplodedArchive(mockFile0, boolean2);
      mockFile0.deleteOnExit();
      boolean boolean3 = mockFile0.createNewFile();
      explodedArchive0.manifestFile = (File) mockFile0;
      boolean boolean4 = mockFile0.delete();
      URL uRL0 = explodedArchive0.getUrl();
      Iterator<Archive.Entry> iterator0 = explodedArchive0.iterator();
      boolean boolean5 = false;
      boolean boolean6 = mockFile0.setReadable(boolean5, boolean4);
      URL uRL1 = explodedArchive0.getUrl();
      ExplodedArchive.FileEntryIterator explodedArchive_FileEntryIterator0 = new ExplodedArchive.FileEntryIterator(mockFile0, boolean2);
      explodedArchive_FileEntryIterator0.recursive = explodedArchive0.recursive;
      boolean boolean7 = true;
      explodedArchive_FileEntryIterator0.recursive = boolean7;
      File file0 = explodedArchive_FileEntryIterator0.poll();
      File file1 = explodedArchive_FileEntryIterator0.poll();
      try { 
        explodedArchive0.getManifest();
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 11000)
  public void test26()  throws Throwable  {
      ExplodedArchive.FileEntry explodedArchive_FileEntry0 = new ExplodedArchive.FileEntry();
      String string0 = "META-INF";
      String string1 = ".<[XXN*9";
      MockFile mockFile0 = new MockFile(string0, string1);
      boolean boolean0 = mockFile0.mkdirs();
      boolean boolean1 = true;
      ExplodedArchive explodedArchive0 = new ExplodedArchive(mockFile0, boolean1);
      // Undeclared exception!
      try { 
        explodedArchive0.getNestedArchive(explodedArchive_FileEntry0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springframework.boot.loader.archive.ExplodedArchive", e);
      }
  }

  @Test(timeout = 11000)
  public void test27()  throws Throwable  {
      ExplodedArchive.FileEntry explodedArchive_FileEntry0 = new ExplodedArchive.FileEntry();
      String string0 = "Not a file URL";
      MockFile mockFile0 = new MockFile(string0, string0);
      explodedArchive_FileEntry0.file = (File) mockFile0;
      explodedArchive_FileEntry0.name = string0;
      String string1 = explodedArchive_FileEntry0.getName();
      ExplodedArchive explodedArchive0 = new ExplodedArchive();
      String string2 = null;
      File file0 = MockFile.createTempFile(explodedArchive_FileEntry0.name, string2);
      File file1 = explodedArchive0.getManifestFile(file0);
      String string3 = explodedArchive0.toString();
      boolean boolean0 = true;
      ExplodedArchive.FileEntryIterator explodedArchive_FileEntryIterator0 = new ExplodedArchive.FileEntryIterator(mockFile0, boolean0);
      boolean boolean1 = false;
      explodedArchive0.recursive = boolean1;
      // Undeclared exception!
      try { 
        explodedArchive_FileEntryIterator0.remove();
      } catch(UnsupportedOperationException e) {
         //
         // remove
         //
         verifyException("org.springframework.boot.loader.archive.ExplodedArchive$FileEntryIterator", e);
      }
  }

  @Test(timeout = 11000)
  public void test28()  throws Throwable  {
      String string0 = "q9i~Y;";
      String string1 = "!2U,}OSF){wnGvX";
      File file0 = null;
      File file1 = MockFile.createTempFile(string0, string1, file0);
      ExplodedArchive.FileEntry explodedArchive_FileEntry0 = new ExplodedArchive.FileEntry(string0, file1);
      explodedArchive_FileEntry0.file = file0;
      ExplodedArchive explodedArchive0 = null;
      try {
        explodedArchive0 = new ExplodedArchive(explodedArchive_FileEntry0.file);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springframework.boot.loader.archive.ExplodedArchive", e);
      }
  }

  @Test(timeout = 11000)
  public void test29()  throws Throwable  {
      ExplodedArchive explodedArchive0 = new ExplodedArchive();
      String string0 = "";
      MockFile mockFile0 = new MockFile(explodedArchive0.manifestFile, string0);
      boolean boolean0 = false;
      ExplodedArchive.FileEntryIterator explodedArchive_FileEntryIterator0 = new ExplodedArchive.FileEntryIterator(mockFile0, boolean0);
      // Undeclared exception!
      try { 
        explodedArchive_FileEntryIterator0.next();
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springframework.boot.loader.archive.ExplodedArchive$FileEntryIterator", e);
      }
  }

  @Test(timeout = 11000)
  public void test30()  throws Throwable  {
      String string0 = "";
      MockFile mockFile0 = new MockFile(string0);
      ExplodedArchive explodedArchive0 = new ExplodedArchive(mockFile0);
      String string1 = explodedArchive0.toString();
      String string2 = "Lq%xA,w~,+dl]A\"";
      ExplodedArchive.FileEntry explodedArchive_FileEntry0 = new ExplodedArchive.FileEntry(string2, explodedArchive0.root);
      String string3 = explodedArchive_FileEntry0.getName();
      Manifest manifest0 = explodedArchive0.getManifest();
      URL uRL0 = explodedArchive0.getUrl();
      ExplodedArchive.FileEntryIterator explodedArchive_FileEntryIterator0 = new ExplodedArchive.FileEntryIterator();
      boolean boolean0 = explodedArchive_FileEntryIterator0.hasNext();
      Iterator<Archive.Entry> iterator0 = explodedArchive0.iterator();
      // Undeclared exception!
      try { 
        explodedArchive_FileEntryIterator0.next();
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springframework.boot.loader.archive.ExplodedArchive$FileEntryIterator", e);
      }
  }

  @Test(timeout = 11000)
  public void test31()  throws Throwable  {
      String string0 = "";
      String string1 = "-=,A's}wP_";
      File file0 = MockFile.createTempFile(string1, string1);
      ExplodedArchive.FileEntry explodedArchive_FileEntry0 = new ExplodedArchive.FileEntry(string0, file0);
      boolean boolean0 = explodedArchive_FileEntry0.isDirectory();
      ExplodedArchive explodedArchive0 = new ExplodedArchive();
      try { 
        explodedArchive0.getNestedArchive(explodedArchive_FileEntry0);
      } catch(FileNotFoundException e) {
         //
         // /tmp/-=,A's}wP_0-=,A's}wP_ (Arquivo ou diret\u00F3rio n\u00E3o encontrado)
         //
         verifyException("java.util.zip.ZipFile", e);
      }
  }

  @Test(timeout = 11000)
  public void test32()  throws Throwable  {
      String string0 = "]?l.D3i+6/H";
      MockFile mockFile0 = new MockFile(string0);
      String string1 = null;
      File file0 = MockFile.createTempFile(string0, string1, (File) mockFile0);
      boolean boolean0 = true;
      boolean boolean1 = false;
      boolean boolean2 = false;
      boolean boolean3 = mockFile0.setExecutable(boolean1, boolean2);
      ExplodedArchive.FileEntryIterator explodedArchive_FileEntryIterator0 = new ExplodedArchive.FileEntryIterator(mockFile0, boolean0);
      LinkedList<Iterator<File>> linkedList0 = new LinkedList<Iterator<File>>();
      explodedArchive_FileEntryIterator0.stack = (Deque<Iterator<File>>) linkedList0;
      explodedArchive_FileEntryIterator0.root = (File) mockFile0;
      // Undeclared exception!
      try { 
        explodedArchive_FileEntryIterator0.remove();
      } catch(UnsupportedOperationException e) {
         //
         // remove
         //
         verifyException("org.springframework.boot.loader.archive.ExplodedArchive$FileEntryIterator", e);
      }
  }

  @Test(timeout = 11000)
  public void test33()  throws Throwable  {
      String string0 = "lbX<jcJ%6 Q{Mkm:";
      String string1 = "jar:";
      MockFile mockFile0 = new MockFile(string1);
      File file0 = MockFile.createTempFile(string0, string1, (File) mockFile0);
      MockFile mockFile1 = new MockFile(file0, string1);
      ExplodedArchive.FileEntry explodedArchive_FileEntry0 = new ExplodedArchive.FileEntry(string0, mockFile1);
      String string2 = "..";
      explodedArchive_FileEntry0.name = string2;
      String string3 = explodedArchive_FileEntry0.getName();
      File file1 = mockFile1.getCanonicalFile();
      explodedArchive_FileEntry0.name = string0;
      ExplodedArchive.FileEntryIterator explodedArchive_FileEntryIterator0 = new ExplodedArchive.FileEntryIterator();
      File file2 = MockFile.createTempFile(explodedArchive_FileEntry0.name, string3);
      Iterator<File> iterator0 = explodedArchive_FileEntryIterator0.listFiles(mockFile0);
      explodedArchive_FileEntry0.name = string3;
      boolean boolean0 = true;
      explodedArchive_FileEntry0.name = string2;
      boolean boolean1 = mockFile1.setWritable(boolean0);
      ExplodedArchive explodedArchive0 = new ExplodedArchive(mockFile0);
      // Undeclared exception!
      try { 
        explodedArchive0.getNestedArchive(explodedArchive_FileEntry0);
      } catch(IllegalArgumentException e) {
         //
         // File must exist
         //
         verifyException("org.springframework.boot.loader.data.RandomAccessDataFile", e);
      }
  }

  @Test(timeout = 11000)
  public void test34()  throws Throwable  {
      String string0 = null;
      String string1 = "";
      MockFile mockFile0 = new MockFile(string0, string1);
      boolean boolean0 = false;
      boolean boolean1 = mockFile0.setReadable(boolean0, boolean0);
      boolean boolean2 = false;
      ExplodedArchive explodedArchive0 = new ExplodedArchive(mockFile0, boolean2);
      mockFile0.deleteOnExit();
      boolean boolean3 = mockFile0.createNewFile();
      explodedArchive0.manifestFile = (File) mockFile0;
      boolean boolean4 = mockFile0.delete();
      URL uRL0 = explodedArchive0.getUrl();
      Iterator<Archive.Entry> iterator0 = explodedArchive0.iterator();
      boolean boolean5 = true;
      boolean boolean6 = mockFile0.setReadable(boolean5, boolean4);
      URL uRL1 = explodedArchive0.getUrl();
      ExplodedArchive.FileEntryIterator explodedArchive_FileEntryIterator0 = new ExplodedArchive.FileEntryIterator(mockFile0, boolean2);
      explodedArchive_FileEntryIterator0.recursive = explodedArchive0.recursive;
      boolean boolean7 = true;
      explodedArchive_FileEntryIterator0.recursive = boolean7;
      explodedArchive_FileEntryIterator0.recursive = boolean5;
      File file0 = explodedArchive_FileEntryIterator0.poll();
      File file1 = explodedArchive_FileEntryIterator0.poll();
      Manifest manifest0 = explodedArchive0.getManifest();
      Archive.EntryFilter archive_EntryFilter0 = mock(Archive.EntryFilter.class, new ViolatedAssumptionAnswer());
      List<Archive> list0 = explodedArchive0.getNestedArchives(archive_EntryFilter0);
      ExplodedArchive.FileEntryIterator.EntryComparator explodedArchive_FileEntryIterator_EntryComparator0 = new ExplodedArchive.FileEntryIterator.EntryComparator();
      int int0 = explodedArchive_FileEntryIterator_EntryComparator0.compare(explodedArchive0.manifestFile, (File) mockFile0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      explodedArchive0.forEach(consumer0);
      ExplodedArchive.FileEntry explodedArchive_FileEntry0 = new ExplodedArchive.FileEntry();
      // Undeclared exception!
      try { 
        explodedArchive0.getNestedArchive(explodedArchive_FileEntry0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springframework.boot.loader.archive.ExplodedArchive", e);
      }
  }

  @Test(timeout = 11000)
  public void test35()  throws Throwable  {
      String string0 = "";
      MockFile mockFile0 = new MockFile(string0);
      boolean boolean0 = false;
      ExplodedArchive explodedArchive0 = new ExplodedArchive(mockFile0, boolean0);
      ExplodedArchive.FileEntry explodedArchive_FileEntry0 = new ExplodedArchive.FileEntry(string0, mockFile0);
      Archive archive0 = explodedArchive0.getNestedArchive(explodedArchive_FileEntry0);
  }

  @Test(timeout = 11000)
  public void test36()  throws Throwable  {
      String string0 = "NG(Nn:w'K#=ri]i;~a";
      File file0 = null;
      ExplodedArchive.FileEntry explodedArchive_FileEntry0 = new ExplodedArchive.FileEntry(string0, file0);
      ExplodedArchive explodedArchive0 = new ExplodedArchive();
      File file1 = explodedArchive0.getManifestFile(explodedArchive_FileEntry0.file);
      String string1 = explodedArchive0.toString();
      String string2 = "";
      explodedArchive_FileEntry0.name = string2;
      String string3 = explodedArchive_FileEntry0.getName();
      File file2 = explodedArchive0.getManifestFile(file1);
      String string4 = explodedArchive0.toString();
      ExplodedArchive.FileEntryIterator explodedArchive_FileEntryIterator0 = new ExplodedArchive.FileEntryIterator();
      explodedArchive_FileEntryIterator0.current = file1;
      boolean boolean0 = explodedArchive_FileEntryIterator0.hasNext();
      // Undeclared exception!
      try { 
        explodedArchive_FileEntry0.isDirectory();
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springframework.boot.loader.archive.ExplodedArchive$FileEntry", e);
      }
  }

  @Test(timeout = 11000)
  public void test37()  throws Throwable  {
      String string0 = "2'w";
      MockFile mockFile0 = new MockFile(string0, string0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("2'w/2'w/META-INF/MANIFEST.MF");
      String string1 = "]?l.D3i+6";
      boolean boolean0 = FileSystemHandling.appendStringToFile(evoSuiteFile0, string1);
      boolean boolean1 = false;
      boolean boolean2 = true;
      ExplodedArchive.FileEntryIterator explodedArchive_FileEntryIterator0 = new ExplodedArchive.FileEntryIterator(mockFile0, boolean2);
      Archive.Entry archive_Entry0 = explodedArchive_FileEntryIterator0.next();
      ExplodedArchive explodedArchive0 = new ExplodedArchive();
      boolean boolean3 = false;
      boolean boolean4 = mockFile0.setWritable(boolean3);
      File file0 = explodedArchive0.getManifestFile(mockFile0);
      Iterator<Archive.Entry> iterator0 = new ExplodedArchive.FileEntryIterator();
      File file1 = explodedArchive0.getManifestFile(file0);
      ExplodedArchive.FileEntry explodedArchive_FileEntry0 = new ExplodedArchive.FileEntry(string0, explodedArchive0.root);
      explodedArchive_FileEntry0.name = string0;
      // Undeclared exception!
      try { 
        explodedArchive0.getNestedArchive(explodedArchive_FileEntry0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springframework.boot.loader.archive.ExplodedArchive", e);
      }
  }

  @Test(timeout = 11000)
  public void test38()  throws Throwable  {
      String string0 = "";
      MockFile mockFile0 = new MockFile(string0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("META-INF/MANIFEST.MF");
      String string1 = "0B9+reqvkv#9m[59,}";
      boolean boolean0 = FileSystemHandling.appendLineToFile(evoSuiteFile0, string1);
      ExplodedArchive explodedArchive0 = new ExplodedArchive(mockFile0);
      String string2 = explodedArchive0.toString();
      String string3 = "Lq%xA,w~,+dl]A\"";
      ExplodedArchive.FileEntry explodedArchive_FileEntry0 = new ExplodedArchive.FileEntry(string3, explodedArchive0.root);
      String string4 = explodedArchive_FileEntry0.getName();
      try { 
        explodedArchive0.getManifest();
      } catch(IOException e) {
         //
         // invalid header field
         //
         verifyException("java.util.jar.Attributes", e);
      }
  }

  @Test(timeout = 11000)
  public void test39()  throws Throwable  {
      String string0 = "";
      EvoSuiteFile evoSuiteFile0 = null;
      String string1 = "'";
      boolean boolean0 = FileSystemHandling.appendStringToFile(evoSuiteFile0, string1);
      MockFile mockFile0 = new MockFile(string0, string0);
      byte[] byteArray0 = new byte[7];
      byte byte0 = (byte)2;
      byteArray0[0] = byte0;
      byte byte1 = (byte) (-68);
      byteArray0[1] = byte1;
      byte byte2 = (byte)41;
      byteArray0[2] = byte2;
      byte byte3 = (byte) (-4);
      byteArray0[3] = byte3;
      byte byte4 = (byte) (-31);
      byteArray0[4] = byte4;
      byte byte5 = (byte)16;
      byteArray0[5] = byte5;
      byte byte6 = (byte)0;
      byteArray0[6] = byte6;
      boolean boolean1 = FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      Path path0 = mockFile0.toPath();
      boolean boolean2 = false;
      ExplodedArchive.FileEntryIterator explodedArchive_FileEntryIterator0 = new ExplodedArchive.FileEntryIterator(mockFile0, boolean2);
      ExplodedArchive explodedArchive0 = new ExplodedArchive(explodedArchive_FileEntryIterator0.root);
      Archive.Entry archive_Entry0 = explodedArchive_FileEntryIterator0.next();
      Archive.EntryFilter archive_EntryFilter0 = mock(Archive.EntryFilter.class, new ViolatedAssumptionAnswer());
      doReturn(false, false, false, false, false).when(archive_EntryFilter0).matches(any(org.springframework.boot.loader.archive.Archive.Entry.class));
      List<Archive> list0 = explodedArchive0.getNestedArchives(archive_EntryFilter0);
      Archive.EntryFilter archive_EntryFilter1 = mock(Archive.EntryFilter.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        explodedArchive_FileEntryIterator0.remove();
      } catch(UnsupportedOperationException e) {
         //
         // remove
         //
         verifyException("org.springframework.boot.loader.archive.ExplodedArchive$FileEntryIterator", e);
      }
  }

  @Test(timeout = 11000)
  public void test40()  throws Throwable  {
      String string0 = "";
      EvoSuiteFile evoSuiteFile0 = null;
      String string1 = "'";
      boolean boolean0 = FileSystemHandling.appendStringToFile(evoSuiteFile0, string1);
      MockFile mockFile0 = new MockFile(string0, string0);
      byte[] byteArray0 = new byte[7];
      byte byte0 = (byte)2;
      byteArray0[0] = byte0;
      byte byte1 = (byte) (-68);
      byteArray0[1] = byte1;
      byte byte2 = (byte)41;
      byteArray0[2] = byte2;
      byte byte3 = (byte) (-4);
      byteArray0[3] = byte3;
      byte byte4 = (byte) (-31);
      byteArray0[4] = byte4;
      byte byte5 = (byte)16;
      byteArray0[5] = byte5;
      byte byte6 = (byte)0;
      byteArray0[6] = byte6;
      boolean boolean1 = FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      boolean boolean2 = false;
      ExplodedArchive.FileEntryIterator explodedArchive_FileEntryIterator0 = new ExplodedArchive.FileEntryIterator(mockFile0, boolean2);
      ExplodedArchive explodedArchive0 = new ExplodedArchive(explodedArchive_FileEntryIterator0.root);
      Archive.Entry archive_Entry0 = explodedArchive_FileEntryIterator0.next();
      boolean boolean3 = true;
      Archive.EntryFilter archive_EntryFilter0 = mock(Archive.EntryFilter.class, new ViolatedAssumptionAnswer());
      doReturn(boolean2, explodedArchive0.recursive, boolean2, boolean3, boolean3).when(archive_EntryFilter0).matches(any(org.springframework.boot.loader.archive.Archive.Entry.class));
      List<Archive> list0 = explodedArchive0.getNestedArchives(archive_EntryFilter0);
      Archive.EntryFilter archive_EntryFilter1 = mock(Archive.EntryFilter.class, new ViolatedAssumptionAnswer());
  }

  @Test(timeout = 11000)
  public void test41()  throws Throwable  {
      String string0 = "";
      EvoSuiteFile evoSuiteFile0 = null;
      String string1 = "'";
      boolean boolean0 = FileSystemHandling.appendStringToFile(evoSuiteFile0, string1);
      MockFile mockFile0 = new MockFile(string0, string0);
      byte[] byteArray0 = new byte[7];
      byte byte0 = (byte)2;
      byteArray0[0] = byte0;
      byte byte1 = (byte) (-68);
      byteArray0[1] = byte1;
      byte byte2 = (byte)41;
      String string2 = "@_iIPy/";
      File file0 = MockFile.createTempFile(string2, string2);
      byteArray0[2] = byte2;
      byte byte3 = (byte) (-4);
      byteArray0[3] = byte3;
      byte byte4 = (byte) (-31);
      byteArray0[4] = byte4;
      byte byte5 = (byte)16;
      byteArray0[5] = byte5;
      byte byte6 = (byte)0;
      byteArray0[6] = byte6;
      boolean boolean1 = FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      boolean boolean2 = false;
      ExplodedArchive.FileEntryIterator explodedArchive_FileEntryIterator0 = new ExplodedArchive.FileEntryIterator(mockFile0, boolean2);
      ExplodedArchive explodedArchive0 = new ExplodedArchive(explodedArchive_FileEntryIterator0.root);
      Archive.Entry archive_Entry0 = explodedArchive_FileEntryIterator0.next();
      boolean boolean3 = true;
      Manifest manifest0 = explodedArchive0.getManifest();
      Archive.EntryFilter archive_EntryFilter0 = mock(Archive.EntryFilter.class, new ViolatedAssumptionAnswer());
      doReturn(boolean2, explodedArchive0.recursive, boolean2, boolean3, boolean3).when(archive_EntryFilter0).matches(any(org.springframework.boot.loader.archive.Archive.Entry.class));
      try { 
        explodedArchive0.getNestedArchives(archive_EntryFilter0);
      } catch(FileNotFoundException e) {
         //
         // /tmp/@_iIPy/0@_iIPy (Arquivo ou diret\u00F3rio n\u00E3o encontrado)
         //
         verifyException("java.util.zip.ZipFile", e);
      }
  }
}
