import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest0 {

    public static boolean debug = false;

    @Test
    public void test0001() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0001");
        java.io.File file0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.springframework.boot.loader.archive.ExplodedArchive explodedArchive2 = new org.springframework.boot.loader.archive.ExplodedArchive(file0, true);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0002() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0002");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.lang.Class<?> wildcardClass1 = entryComparator0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass1);
    }

    @Test
    public void test0003() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0003");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.io.File file1 = null;
        java.io.File file2 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int3 = entryComparator0.compare(file1, file2);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0004() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0004");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest1 = explodedArchive0.manifest;
        java.util.jar.Manifest manifest2 = null;
        explodedArchive0.manifest = manifest2;
        // The following exception was thrown during execution in test generation
        try {
            java.net.URL uRL4 = explodedArchive0.getUrl();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest1);
    }

    @Test
    public void test0005() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0005");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator1 = entryComparator0.reversed();
        java.io.File file2 = null;
        java.io.File file3 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int4 = entryComparator0.compare(file2, file3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator1);
    }

    @Test
    public void test0006() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0006");
        java.io.File file0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.springframework.boot.loader.archive.ExplodedArchive explodedArchive2 = new org.springframework.boot.loader.archive.ExplodedArchive(file0, false);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0007() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0007");
        java.io.File file0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.springframework.boot.loader.archive.ExplodedArchive explodedArchive1 = new org.springframework.boot.loader.archive.ExplodedArchive(file0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0008() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0008");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntry fileEntry0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntry();
        java.io.File file1 = fileEntry0.file;
        java.io.File file2 = fileEntry0.getFile();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass3 = file2.getClass();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file2);
    }

    @Test
    public void test0009() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0009");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest1 = explodedArchive0.manifest;
        explodedArchive0.recursive = false;
        java.io.File file4 = explodedArchive0.manifestFile;
        org.springframework.boot.loader.archive.Archive.EntryFilter entryFilter5 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<org.springframework.boot.loader.archive.Archive> archiveList6 = explodedArchive0.getNestedArchives(entryFilter5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file4);
    }

    @Test
    public void test0010() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0010");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator1 = entryComparator0.reversed();
        java.util.Comparator<java.io.File> fileComparator2 = entryComparator0.reversed();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive3 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest4 = explodedArchive3.manifest;
        explodedArchive3.recursive = false;
        java.util.jar.Manifest manifest7 = explodedArchive3.manifest;
        java.io.File file8 = explodedArchive3.manifestFile;
        java.io.File file9 = null;
        java.io.File file10 = explodedArchive3.getManifestFile(file9);
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive11 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest12 = explodedArchive11.manifest;
        explodedArchive11.recursive = false;
        java.util.jar.Manifest manifest15 = explodedArchive11.manifest;
        java.io.File file16 = explodedArchive11.manifestFile;
        java.io.File file17 = null;
        java.io.File file18 = explodedArchive11.getManifestFile(file17);
        // The following exception was thrown during execution in test generation
        try {
            int int19 = entryComparator0.compare(file9, file18);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file18.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file18.toString(), "META-INF/MANIFEST.MF");
    }

    @Test
    public void test0011() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0011");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest1 = explodedArchive0.manifest;
        explodedArchive0.recursive = false;
        java.io.File file4 = null;
        explodedArchive0.root = file4;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator<org.springframework.boot.loader.archive.Archive.Entry> entryItor6 = explodedArchive0.iterator();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest1);
    }

    @Test
    public void test0012() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0012");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file1 = explodedArchive0.root;
        java.io.File file2 = null;
        explodedArchive0.manifestFile = file2;
        // The following exception was thrown during execution in test generation
        try {
            java.util.jar.Manifest manifest4 = explodedArchive0.getManifest();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file1);
    }

    @Test
    public void test0013() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0013");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest1 = explodedArchive0.manifest;
        explodedArchive0.recursive = false;
        java.io.File file4 = null;
        explodedArchive0.root = file4;
        // The following exception was thrown during execution in test generation
        try {
            java.net.URL uRL6 = explodedArchive0.getUrl();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest1);
    }

    @Test
    public void test0014() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0014");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        // The following exception was thrown during execution in test generation
        try {
            fileEntryIterator0.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: remove");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0015() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0015");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file1 = null;
        fileEntryIterator0.current = file1;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive3 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest4 = explodedArchive3.manifest;
        explodedArchive3.recursive = false;
        java.util.jar.Manifest manifest7 = explodedArchive3.manifest;
        java.io.File file8 = explodedArchive3.manifestFile;
        java.io.File file9 = null;
        java.io.File file10 = explodedArchive3.getManifestFile(file9);
        java.util.Iterator<java.io.File> fileItor11 = fileEntryIterator0.listFiles(file10);
        // The following exception was thrown during execution in test generation
        try {
            fileEntryIterator0.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: remove");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor11);
    }

    @Test
    public void test0016() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0016");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest1 = explodedArchive0.manifest;
        explodedArchive0.recursive = false;
        java.io.File file4 = null;
        explodedArchive0.root = file4;
        // The following exception was thrown during execution in test generation
        try {
            java.util.jar.Manifest manifest6 = explodedArchive0.getManifest();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest1);
    }

    @Test
    public void test0017() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0017");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest1 = explodedArchive0.manifest;
        explodedArchive0.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive4 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest5 = explodedArchive4.manifest;
        explodedArchive4.recursive = false;
        java.util.jar.Manifest manifest8 = explodedArchive4.manifest;
        java.io.File file9 = explodedArchive4.manifestFile;
        java.io.File file10 = null;
        java.io.File file11 = explodedArchive4.getManifestFile(file10);
        explodedArchive0.manifestFile = file10;
        // The following exception was thrown during execution in test generation
        try {
            java.util.jar.Manifest manifest13 = explodedArchive0.getManifest();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file11.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file11.toString(), "META-INF/MANIFEST.MF");
    }

    @Test
    public void test0018() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0018");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file1 = explodedArchive0.root;
        explodedArchive0.recursive = false;
        org.springframework.boot.loader.archive.Archive.EntryFilter entryFilter4 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<org.springframework.boot.loader.archive.Archive> archiveList5 = explodedArchive0.getNestedArchives(entryFilter4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file1);
    }

    @Test
    public void test0019() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0019");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntry fileEntry0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntry();
        java.io.File file1 = fileEntry0.file;
        java.lang.Class<?> wildcardClass2 = fileEntry0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
    }

    @Test
    public void test0020() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0020");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file1 = null;
        fileEntryIterator0.current = file1;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive3 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest4 = explodedArchive3.manifest;
        explodedArchive3.recursive = false;
        java.util.jar.Manifest manifest7 = explodedArchive3.manifest;
        java.io.File file8 = explodedArchive3.manifestFile;
        java.io.File file9 = null;
        java.io.File file10 = explodedArchive3.getManifestFile(file9);
        java.util.Iterator<java.io.File> fileItor11 = fileEntryIterator0.listFiles(file10);
        java.io.File file12 = fileEntryIterator0.root;
        boolean boolean13 = fileEntryIterator0.hasNext();
        java.io.File file14 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator<java.io.File> fileItor15 = fileEntryIterator0.listFiles(file14);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test0021() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0021");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file1 = null;
        fileEntryIterator0.current = file1;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive3 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest4 = explodedArchive3.manifest;
        explodedArchive3.recursive = false;
        java.util.jar.Manifest manifest7 = explodedArchive3.manifest;
        java.io.File file8 = explodedArchive3.manifestFile;
        java.io.File file9 = null;
        java.io.File file10 = explodedArchive3.getManifestFile(file9);
        java.util.Iterator<java.io.File> fileItor11 = fileEntryIterator0.listFiles(file10);
        // The following exception was thrown during execution in test generation
        try {
            org.springframework.boot.loader.archive.ExplodedArchive explodedArchive13 = new org.springframework.boot.loader.archive.ExplodedArchive(file10, true);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid source folder META-INF/MANIFEST.MF");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor11);
    }

    @Test
    public void test0022() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0022");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest1 = explodedArchive0.manifest;
        explodedArchive0.recursive = false;
        java.util.jar.Manifest manifest4 = explodedArchive0.manifest;
        java.io.File file5 = explodedArchive0.manifestFile;
        java.io.File file6 = null;
        java.io.File file7 = explodedArchive0.getManifestFile(file6);
        java.util.jar.Manifest manifest8 = explodedArchive0.manifest;
        // The following exception was thrown during execution in test generation
        try {
            java.net.URL uRL9 = explodedArchive0.getUrl();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file7.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file7.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest8);
    }

    @Test
    public void test0023() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0023");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest1 = explodedArchive0.manifest;
        explodedArchive0.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive4 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest5 = explodedArchive4.manifest;
        explodedArchive4.recursive = false;
        java.util.jar.Manifest manifest8 = explodedArchive4.manifest;
        java.io.File file9 = explodedArchive4.manifestFile;
        java.io.File file10 = null;
        java.io.File file11 = explodedArchive4.getManifestFile(file10);
        explodedArchive0.manifestFile = file10;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive13 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest14 = explodedArchive13.manifest;
        explodedArchive13.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive17 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest18 = explodedArchive17.manifest;
        explodedArchive17.recursive = false;
        java.util.jar.Manifest manifest21 = explodedArchive17.manifest;
        java.io.File file22 = explodedArchive17.manifestFile;
        java.io.File file23 = null;
        java.io.File file24 = explodedArchive17.getManifestFile(file23);
        explodedArchive13.manifestFile = file23;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive26 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest27 = explodedArchive26.manifest;
        explodedArchive26.recursive = false;
        java.util.jar.Manifest manifest30 = explodedArchive26.manifest;
        java.io.File file31 = explodedArchive26.manifestFile;
        java.io.File file32 = null;
        java.io.File file33 = explodedArchive26.getManifestFile(file32);
        explodedArchive13.manifestFile = file33;
        explodedArchive0.root = file33;
        // The following exception was thrown during execution in test generation
        try {
            org.springframework.boot.loader.archive.ExplodedArchive explodedArchive36 = new org.springframework.boot.loader.archive.ExplodedArchive(file33);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid source folder META-INF/MANIFEST.MF");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file11.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file11.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file24.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file24.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file33.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file33.toString(), "META-INF/MANIFEST.MF");
    }

    @Test
    public void test0024() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0024");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest1 = explodedArchive0.manifest;
        explodedArchive0.recursive = false;
        java.util.jar.Manifest manifest4 = explodedArchive0.manifest;
        java.io.File file5 = explodedArchive0.manifestFile;
        java.io.File file6 = null;
        java.io.File file7 = explodedArchive0.getManifestFile(file6);
        java.util.jar.Manifest manifest8 = explodedArchive0.manifest;
        // The following exception was thrown during execution in test generation
        try {
            java.util.jar.Manifest manifest9 = explodedArchive0.getManifest();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file7.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file7.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest8);
    }

    @Test
    public void test0025() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0025");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file1 = null;
        fileEntryIterator0.current = file1;
        fileEntryIterator0.recursive = true;
        java.lang.Class<?> wildcardClass5 = fileEntryIterator0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void test0026() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0026");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file1 = null;
        fileEntryIterator0.current = file1;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive3 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest4 = explodedArchive3.manifest;
        explodedArchive3.recursive = false;
        java.util.jar.Manifest manifest7 = explodedArchive3.manifest;
        java.io.File file8 = explodedArchive3.manifestFile;
        java.io.File file9 = null;
        java.io.File file10 = explodedArchive3.getManifestFile(file9);
        java.util.Iterator<java.io.File> fileItor11 = fileEntryIterator0.listFiles(file10);
        java.io.File file12 = fileEntryIterator0.current;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator13 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file14 = null;
        fileEntryIterator13.current = file14;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive16 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest17 = explodedArchive16.manifest;
        explodedArchive16.recursive = false;
        java.util.jar.Manifest manifest20 = explodedArchive16.manifest;
        java.io.File file21 = explodedArchive16.manifestFile;
        java.io.File file22 = null;
        java.io.File file23 = explodedArchive16.getManifestFile(file22);
        java.util.Iterator<java.io.File> fileItor24 = fileEntryIterator13.listFiles(file23);
        java.util.ArrayDeque<java.util.Iterator<java.io.File>> fileItorQueue25 = new java.util.ArrayDeque<java.util.Iterator<java.io.File>>();
        boolean boolean26 = fileItorQueue25.add(fileItor24);
        fileEntryIterator0.stack = fileItorQueue25;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive28 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest29 = explodedArchive28.manifest;
        explodedArchive28.recursive = false;
        java.io.File file32 = null;
        explodedArchive28.root = file32;
        java.io.File file34 = explodedArchive28.root;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive35 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest36 = explodedArchive35.manifest;
        explodedArchive35.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive39 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest40 = explodedArchive39.manifest;
        explodedArchive39.recursive = false;
        java.util.jar.Manifest manifest43 = explodedArchive39.manifest;
        java.io.File file44 = explodedArchive39.manifestFile;
        java.io.File file45 = null;
        java.io.File file46 = explodedArchive39.getManifestFile(file45);
        explodedArchive35.manifestFile = file45;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive48 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest49 = explodedArchive48.manifest;
        explodedArchive48.recursive = false;
        java.util.jar.Manifest manifest52 = explodedArchive48.manifest;
        java.io.File file53 = explodedArchive48.manifestFile;
        java.io.File file54 = null;
        java.io.File file55 = explodedArchive48.getManifestFile(file54);
        explodedArchive35.manifestFile = file55;
        java.io.File file57 = explodedArchive28.getManifestFile(file55);
        fileEntryIterator0.root = file55;
        // The following exception was thrown during execution in test generation
        try {
            org.springframework.boot.loader.archive.ExplodedArchive explodedArchive60 = new org.springframework.boot.loader.archive.ExplodedArchive(file55, false);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid source folder META-INF/MANIFEST.MF");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file23.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file23.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file46.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file46.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file55.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file55.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file57.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file57.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
    }

    @Test
    public void test0027() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0027");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file1 = null;
        fileEntryIterator0.current = file1;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive3 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest4 = explodedArchive3.manifest;
        explodedArchive3.recursive = false;
        java.util.jar.Manifest manifest7 = explodedArchive3.manifest;
        java.io.File file8 = explodedArchive3.manifestFile;
        java.io.File file9 = null;
        java.io.File file10 = explodedArchive3.getManifestFile(file9);
        java.util.Iterator<java.io.File> fileItor11 = fileEntryIterator0.listFiles(file10);
        java.io.File file12 = fileEntryIterator0.current;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator13 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file14 = null;
        fileEntryIterator13.current = file14;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive16 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest17 = explodedArchive16.manifest;
        explodedArchive16.recursive = false;
        java.util.jar.Manifest manifest20 = explodedArchive16.manifest;
        java.io.File file21 = explodedArchive16.manifestFile;
        java.io.File file22 = null;
        java.io.File file23 = explodedArchive16.getManifestFile(file22);
        java.util.Iterator<java.io.File> fileItor24 = fileEntryIterator13.listFiles(file23);
        java.io.File file25 = fileEntryIterator13.current;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator26 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file27 = null;
        fileEntryIterator26.current = file27;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive29 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest30 = explodedArchive29.manifest;
        explodedArchive29.recursive = false;
        java.util.jar.Manifest manifest33 = explodedArchive29.manifest;
        java.io.File file34 = explodedArchive29.manifestFile;
        java.io.File file35 = null;
        java.io.File file36 = explodedArchive29.getManifestFile(file35);
        java.util.Iterator<java.io.File> fileItor37 = fileEntryIterator26.listFiles(file36);
        java.util.ArrayDeque<java.util.Iterator<java.io.File>> fileItorQueue38 = new java.util.ArrayDeque<java.util.Iterator<java.io.File>>();
        boolean boolean39 = fileItorQueue38.add(fileItor37);
        fileEntryIterator13.stack = fileItorQueue38;
        fileEntryIterator0.stack = fileItorQueue38;
        java.lang.Class<?> wildcardClass42 = fileEntryIterator0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file23.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file23.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file36.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file36.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass42);
    }

    @Test
    public void test0028() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0028");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file1 = explodedArchive0.root;
        java.io.File file2 = null;
        explodedArchive0.manifestFile = file2;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Spliterator<org.springframework.boot.loader.archive.Archive.Entry> entrySpliterator4 = explodedArchive0.spliterator();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file1);
    }

    @Test
    public void test0029() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0029");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file1 = null;
        fileEntryIterator0.current = file1;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive3 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest4 = explodedArchive3.manifest;
        explodedArchive3.recursive = false;
        java.util.jar.Manifest manifest7 = explodedArchive3.manifest;
        java.io.File file8 = explodedArchive3.manifestFile;
        java.io.File file9 = null;
        java.io.File file10 = explodedArchive3.getManifestFile(file9);
        java.util.Iterator<java.io.File> fileItor11 = fileEntryIterator0.listFiles(file10);
        boolean boolean12 = fileEntryIterator0.hasNext();
        java.util.Comparator<java.io.File> fileComparator13 = fileEntryIterator0.entryComparator;
        java.lang.Class<?> wildcardClass14 = fileEntryIterator0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test0030() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0030");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest1 = explodedArchive0.manifest;
        java.util.jar.Manifest manifest2 = null;
        explodedArchive0.manifest = manifest2;
        java.io.File file4 = explodedArchive0.root;
        java.util.jar.Manifest manifest5 = null;
        explodedArchive0.manifest = manifest5;
        org.springframework.boot.loader.archive.Archive.EntryFilter entryFilter7 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<org.springframework.boot.loader.archive.Archive> archiveList8 = explodedArchive0.getNestedArchives(entryFilter7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file4);
    }

    @Test
    public void test0031() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0031");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator1 = entryComparator0.reversed();
        java.util.Comparator<java.io.File> fileComparator2 = entryComparator0.reversed();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive3 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest4 = explodedArchive3.manifest;
        explodedArchive3.recursive = false;
        java.util.jar.Manifest manifest7 = explodedArchive3.manifest;
        java.io.File file8 = explodedArchive3.manifestFile;
        java.io.File file9 = null;
        java.io.File file10 = explodedArchive3.getManifestFile(file9);
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive11 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest12 = explodedArchive11.manifest;
        explodedArchive11.recursive = false;
        java.io.File file15 = null;
        explodedArchive11.root = file15;
        java.io.File file17 = explodedArchive11.root;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive18 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest19 = explodedArchive18.manifest;
        explodedArchive18.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive22 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest23 = explodedArchive22.manifest;
        explodedArchive22.recursive = false;
        java.util.jar.Manifest manifest26 = explodedArchive22.manifest;
        java.io.File file27 = explodedArchive22.manifestFile;
        java.io.File file28 = null;
        java.io.File file29 = explodedArchive22.getManifestFile(file28);
        explodedArchive18.manifestFile = file28;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive31 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest32 = explodedArchive31.manifest;
        explodedArchive31.recursive = false;
        java.util.jar.Manifest manifest35 = explodedArchive31.manifest;
        java.io.File file36 = explodedArchive31.manifestFile;
        java.io.File file37 = null;
        java.io.File file38 = explodedArchive31.getManifestFile(file37);
        explodedArchive18.manifestFile = file38;
        java.io.File file40 = explodedArchive11.getManifestFile(file38);
        int int41 = entryComparator0.compare(file10, file38);
        // The following exception was thrown during execution in test generation
        try {
            org.springframework.boot.loader.archive.ExplodedArchive explodedArchive43 = new org.springframework.boot.loader.archive.ExplodedArchive(file10, true);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid source folder META-INF/MANIFEST.MF");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file29.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file29.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file38.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file38.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file40.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file40.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
    }

    @Test
    public void test0032() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0032");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file1 = explodedArchive0.root;
        java.io.File file2 = null;
        explodedArchive0.manifestFile = file2;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive4 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest5 = explodedArchive4.manifest;
        explodedArchive4.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive8 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest9 = explodedArchive8.manifest;
        explodedArchive8.recursive = false;
        java.util.jar.Manifest manifest12 = explodedArchive8.manifest;
        java.io.File file13 = explodedArchive8.manifestFile;
        java.io.File file14 = null;
        java.io.File file15 = explodedArchive8.getManifestFile(file14);
        explodedArchive4.manifestFile = file14;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive17 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest18 = explodedArchive17.manifest;
        explodedArchive17.recursive = false;
        java.util.jar.Manifest manifest21 = explodedArchive17.manifest;
        java.io.File file22 = explodedArchive17.manifestFile;
        java.io.File file23 = null;
        java.io.File file24 = explodedArchive17.getManifestFile(file23);
        explodedArchive4.manifestFile = file24;
        java.io.File file26 = explodedArchive0.getManifestFile(file24);
        // The following exception was thrown during execution in test generation
        try {
            org.springframework.boot.loader.archive.ExplodedArchive explodedArchive27 = new org.springframework.boot.loader.archive.ExplodedArchive(file24);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid source folder META-INF/MANIFEST.MF");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file15.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file15.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file24.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file24.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file26.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file26.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
    }

    @Test
    public void test0033() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0033");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest1 = explodedArchive0.manifest;
        explodedArchive0.recursive = false;
        java.io.File file4 = null;
        explodedArchive0.root = file4;
        java.io.File file6 = explodedArchive0.root;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Spliterator<org.springframework.boot.loader.archive.Archive.Entry> entrySpliterator7 = explodedArchive0.spliterator();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file6);
    }

    @Test
    public void test0034() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0034");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest1 = explodedArchive0.manifest;
        org.springframework.boot.loader.archive.Archive.EntryFilter entryFilter2 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<org.springframework.boot.loader.archive.Archive> archiveList3 = explodedArchive0.getNestedArchives(entryFilter2);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest1);
    }

    @Test
    public void test0035() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0035");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest1 = explodedArchive0.manifest;
        explodedArchive0.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive4 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest5 = explodedArchive4.manifest;
        explodedArchive4.recursive = false;
        java.util.jar.Manifest manifest8 = explodedArchive4.manifest;
        java.io.File file9 = explodedArchive4.manifestFile;
        java.io.File file10 = null;
        java.io.File file11 = explodedArchive4.getManifestFile(file10);
        explodedArchive0.manifestFile = file10;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive13 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest14 = explodedArchive13.manifest;
        explodedArchive13.recursive = false;
        java.util.jar.Manifest manifest17 = explodedArchive13.manifest;
        java.io.File file18 = explodedArchive13.manifestFile;
        java.io.File file19 = null;
        java.io.File file20 = explodedArchive13.getManifestFile(file19);
        explodedArchive0.manifestFile = file20;
        org.springframework.boot.loader.archive.Archive.EntryFilter entryFilter22 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<org.springframework.boot.loader.archive.Archive> archiveList23 = explodedArchive0.getNestedArchives(entryFilter22);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file11.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file11.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file20.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file20.toString(), "META-INF/MANIFEST.MF");
    }

    @Test
    public void test0036() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0036");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file1 = null;
        fileEntryIterator0.current = file1;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive3 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.lang.String str4 = explodedArchive3.toString();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive5 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file6 = explodedArchive5.root;
        java.io.File file7 = null;
        explodedArchive5.manifestFile = file7;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive9 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest10 = explodedArchive9.manifest;
        explodedArchive9.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive13 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest14 = explodedArchive13.manifest;
        explodedArchive13.recursive = false;
        java.util.jar.Manifest manifest17 = explodedArchive13.manifest;
        java.io.File file18 = explodedArchive13.manifestFile;
        java.io.File file19 = null;
        java.io.File file20 = explodedArchive13.getManifestFile(file19);
        explodedArchive9.manifestFile = file19;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive22 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest23 = explodedArchive22.manifest;
        explodedArchive22.recursive = false;
        java.util.jar.Manifest manifest26 = explodedArchive22.manifest;
        java.io.File file27 = explodedArchive22.manifestFile;
        java.io.File file28 = null;
        java.io.File file29 = explodedArchive22.getManifestFile(file28);
        explodedArchive9.manifestFile = file29;
        java.io.File file31 = explodedArchive5.getManifestFile(file29);
        java.io.File file32 = explodedArchive3.getManifestFile(file29);
        fileEntryIterator0.root = file29;
        boolean boolean34 = fileEntryIterator0.recursive;
        fileEntryIterator0.recursive = true;
        // The following exception was thrown during execution in test generation
        try {
            org.springframework.boot.loader.archive.Archive.Entry entry37 = fileEntryIterator0.next();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str4 + "' != '" + "exploded archive" + "'", str4.equals("exploded archive"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file20.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file20.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file29.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file29.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file31.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file31.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file32.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file32.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
    }

    @Test
    public void test0037() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0037");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest1 = explodedArchive0.manifest;
        java.util.jar.Manifest manifest2 = null;
        explodedArchive0.manifest = manifest2;
        java.io.File file4 = explodedArchive0.root;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntry fileEntry5 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntry();
        java.lang.String str6 = fileEntry5.name;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator7 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file8 = null;
        fileEntryIterator7.current = file8;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive10 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.lang.String str11 = explodedArchive10.toString();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive12 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file13 = explodedArchive12.root;
        java.io.File file14 = null;
        explodedArchive12.manifestFile = file14;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive16 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest17 = explodedArchive16.manifest;
        explodedArchive16.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive20 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest21 = explodedArchive20.manifest;
        explodedArchive20.recursive = false;
        java.util.jar.Manifest manifest24 = explodedArchive20.manifest;
        java.io.File file25 = explodedArchive20.manifestFile;
        java.io.File file26 = null;
        java.io.File file27 = explodedArchive20.getManifestFile(file26);
        explodedArchive16.manifestFile = file26;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive29 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest30 = explodedArchive29.manifest;
        explodedArchive29.recursive = false;
        java.util.jar.Manifest manifest33 = explodedArchive29.manifest;
        java.io.File file34 = explodedArchive29.manifestFile;
        java.io.File file35 = null;
        java.io.File file36 = explodedArchive29.getManifestFile(file35);
        explodedArchive16.manifestFile = file36;
        java.io.File file38 = explodedArchive12.getManifestFile(file36);
        java.io.File file39 = explodedArchive10.getManifestFile(file36);
        fileEntryIterator7.root = file36;
        fileEntry5.file = file36;
        // The following exception was thrown during execution in test generation
        try {
            org.springframework.boot.loader.archive.Archive archive42 = explodedArchive0.getNestedArchive((org.springframework.boot.loader.archive.Archive.Entry) fileEntry5);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: File must exist");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str11 + "' != '" + "exploded archive" + "'", str11.equals("exploded archive"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file27.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file27.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file36.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file36.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file38.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file38.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file39.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file39.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
    }

    @Test
    public void test0038() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0038");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file1 = null;
        fileEntryIterator0.current = file1;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive3 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest4 = explodedArchive3.manifest;
        explodedArchive3.recursive = false;
        java.util.jar.Manifest manifest7 = explodedArchive3.manifest;
        java.io.File file8 = explodedArchive3.manifestFile;
        java.io.File file9 = null;
        java.io.File file10 = explodedArchive3.getManifestFile(file9);
        java.util.Iterator<java.io.File> fileItor11 = fileEntryIterator0.listFiles(file10);
        java.io.File file12 = fileEntryIterator0.root;
        java.io.File file13 = fileEntryIterator0.root;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator14 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file15 = null;
        fileEntryIterator14.current = file15;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive17 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest18 = explodedArchive17.manifest;
        explodedArchive17.recursive = false;
        java.util.jar.Manifest manifest21 = explodedArchive17.manifest;
        java.io.File file22 = explodedArchive17.manifestFile;
        java.io.File file23 = null;
        java.io.File file24 = explodedArchive17.getManifestFile(file23);
        java.util.Iterator<java.io.File> fileItor25 = fileEntryIterator14.listFiles(file24);
        java.util.ArrayDeque<java.util.Iterator<java.io.File>> fileItorQueue26 = new java.util.ArrayDeque<java.util.Iterator<java.io.File>>();
        boolean boolean27 = fileItorQueue26.add(fileItor25);
        fileEntryIterator0.stack = fileItorQueue26;
        java.lang.Class<?> wildcardClass29 = fileItorQueue26.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file24.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file24.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass29);
    }

    @Test
    public void test0039() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0039");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file1 = null;
        fileEntryIterator0.current = file1;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive3 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest4 = explodedArchive3.manifest;
        explodedArchive3.recursive = false;
        java.util.jar.Manifest manifest7 = explodedArchive3.manifest;
        java.io.File file8 = explodedArchive3.manifestFile;
        java.io.File file9 = null;
        java.io.File file10 = explodedArchive3.getManifestFile(file9);
        java.util.Iterator<java.io.File> fileItor11 = fileEntryIterator0.listFiles(file10);
        java.io.File file12 = fileEntryIterator0.root;
        java.lang.Class<?> wildcardClass13 = fileEntryIterator0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test0040() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0040");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest1 = explodedArchive0.manifest;
        explodedArchive0.recursive = false;
        java.io.File file4 = explodedArchive0.manifestFile;
        java.lang.Class<?> wildcardClass5 = explodedArchive0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void test0041() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0041");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file1 = null;
        fileEntryIterator0.current = file1;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive3 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest4 = explodedArchive3.manifest;
        explodedArchive3.recursive = false;
        java.util.jar.Manifest manifest7 = explodedArchive3.manifest;
        java.io.File file8 = explodedArchive3.manifestFile;
        java.io.File file9 = null;
        java.io.File file10 = explodedArchive3.getManifestFile(file9);
        java.util.Iterator<java.io.File> fileItor11 = fileEntryIterator0.listFiles(file10);
        java.io.File file12 = fileEntryIterator0.root;
        java.io.File file13 = fileEntryIterator0.root;
        java.util.Deque<java.util.Iterator<java.io.File>> fileItorQueue14 = fileEntryIterator0.stack;
        java.lang.Class<?> wildcardClass15 = fileEntryIterator0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItorQueue14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test0042() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0042");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file1 = null;
        fileEntryIterator0.current = file1;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive3 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest4 = explodedArchive3.manifest;
        explodedArchive3.recursive = false;
        java.util.jar.Manifest manifest7 = explodedArchive3.manifest;
        java.io.File file8 = explodedArchive3.manifestFile;
        java.io.File file9 = null;
        java.io.File file10 = explodedArchive3.getManifestFile(file9);
        java.util.Iterator<java.io.File> fileItor11 = fileEntryIterator0.listFiles(file10);
        java.io.File file12 = fileEntryIterator0.current;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator13 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file14 = null;
        fileEntryIterator13.current = file14;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive16 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest17 = explodedArchive16.manifest;
        explodedArchive16.recursive = false;
        java.util.jar.Manifest manifest20 = explodedArchive16.manifest;
        java.io.File file21 = explodedArchive16.manifestFile;
        java.io.File file22 = null;
        java.io.File file23 = explodedArchive16.getManifestFile(file22);
        java.util.Iterator<java.io.File> fileItor24 = fileEntryIterator13.listFiles(file23);
        java.util.ArrayDeque<java.util.Iterator<java.io.File>> fileItorQueue25 = new java.util.ArrayDeque<java.util.Iterator<java.io.File>>();
        boolean boolean26 = fileItorQueue25.add(fileItor24);
        fileEntryIterator0.stack = fileItorQueue25;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive28 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest29 = explodedArchive28.manifest;
        explodedArchive28.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive32 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest33 = explodedArchive32.manifest;
        explodedArchive32.recursive = false;
        java.util.jar.Manifest manifest36 = explodedArchive32.manifest;
        java.io.File file37 = explodedArchive32.manifestFile;
        java.io.File file38 = null;
        java.io.File file39 = explodedArchive32.getManifestFile(file38);
        explodedArchive28.manifestFile = file38;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive41 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest42 = explodedArchive41.manifest;
        explodedArchive41.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive45 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest46 = explodedArchive45.manifest;
        explodedArchive45.recursive = false;
        java.util.jar.Manifest manifest49 = explodedArchive45.manifest;
        java.io.File file50 = explodedArchive45.manifestFile;
        java.io.File file51 = null;
        java.io.File file52 = explodedArchive45.getManifestFile(file51);
        explodedArchive41.manifestFile = file51;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive54 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest55 = explodedArchive54.manifest;
        explodedArchive54.recursive = false;
        java.util.jar.Manifest manifest58 = explodedArchive54.manifest;
        java.io.File file59 = explodedArchive54.manifestFile;
        java.io.File file60 = null;
        java.io.File file61 = explodedArchive54.getManifestFile(file60);
        explodedArchive41.manifestFile = file61;
        explodedArchive28.root = file61;
        java.util.Iterator<java.io.File> fileItor64 = fileEntryIterator0.listFiles(file61);
        // The following exception was thrown during execution in test generation
        try {
            org.springframework.boot.loader.archive.ExplodedArchive explodedArchive65 = new org.springframework.boot.loader.archive.ExplodedArchive(file61);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid source folder META-INF/MANIFEST.MF");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file23.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file23.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file39.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file39.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file52.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file52.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file61.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file61.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor64);
    }

    @Test
    public void test0043() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0043");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest1 = explodedArchive0.manifest;
        explodedArchive0.recursive = false;
        java.util.jar.Manifest manifest4 = explodedArchive0.manifest;
        java.io.File file5 = explodedArchive0.manifestFile;
        org.springframework.boot.loader.archive.Archive.EntryFilter entryFilter6 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<org.springframework.boot.loader.archive.Archive> archiveList7 = explodedArchive0.getNestedArchives(entryFilter6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file5);
    }

    @Test
    public void test0044() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0044");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        boolean boolean1 = fileEntryIterator0.hasNext();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator2 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator3 = entryComparator2.reversed();
        java.util.Comparator<java.io.File> fileComparator4 = fileComparator3.reversed();
        fileEntryIterator0.entryComparator = fileComparator4;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive6 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file7 = explodedArchive6.root;
        java.io.File file8 = null;
        explodedArchive6.manifestFile = file8;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive10 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest11 = explodedArchive10.manifest;
        explodedArchive10.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive14 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest15 = explodedArchive14.manifest;
        explodedArchive14.recursive = false;
        java.util.jar.Manifest manifest18 = explodedArchive14.manifest;
        java.io.File file19 = explodedArchive14.manifestFile;
        java.io.File file20 = null;
        java.io.File file21 = explodedArchive14.getManifestFile(file20);
        explodedArchive10.manifestFile = file20;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive23 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest24 = explodedArchive23.manifest;
        explodedArchive23.recursive = false;
        java.util.jar.Manifest manifest27 = explodedArchive23.manifest;
        java.io.File file28 = explodedArchive23.manifestFile;
        java.io.File file29 = null;
        java.io.File file30 = explodedArchive23.getManifestFile(file29);
        explodedArchive10.manifestFile = file30;
        java.io.File file32 = explodedArchive6.getManifestFile(file30);
        java.util.Iterator<java.io.File> fileItor33 = fileEntryIterator0.listFiles(file32);
        boolean boolean34 = fileEntryIterator0.recursive;
        // The following exception was thrown during execution in test generation
        try {
            fileEntryIterator0.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: remove");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file21.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file21.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file30.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file30.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file32.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file32.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
    }

    @Test
    public void test0045() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0045");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file1 = null;
        fileEntryIterator0.current = file1;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive3 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest4 = explodedArchive3.manifest;
        explodedArchive3.recursive = false;
        java.util.jar.Manifest manifest7 = explodedArchive3.manifest;
        java.io.File file8 = explodedArchive3.manifestFile;
        java.io.File file9 = null;
        java.io.File file10 = explodedArchive3.getManifestFile(file9);
        java.util.Iterator<java.io.File> fileItor11 = fileEntryIterator0.listFiles(file10);
        java.io.File file12 = fileEntryIterator0.current;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator13 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file14 = null;
        fileEntryIterator13.current = file14;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive16 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest17 = explodedArchive16.manifest;
        explodedArchive16.recursive = false;
        java.util.jar.Manifest manifest20 = explodedArchive16.manifest;
        java.io.File file21 = explodedArchive16.manifestFile;
        java.io.File file22 = null;
        java.io.File file23 = explodedArchive16.getManifestFile(file22);
        java.util.Iterator<java.io.File> fileItor24 = fileEntryIterator13.listFiles(file23);
        java.util.ArrayDeque<java.util.Iterator<java.io.File>> fileItorQueue25 = new java.util.ArrayDeque<java.util.Iterator<java.io.File>>();
        boolean boolean26 = fileItorQueue25.add(fileItor24);
        fileEntryIterator0.stack = fileItorQueue25;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive28 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest29 = explodedArchive28.manifest;
        explodedArchive28.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive32 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest33 = explodedArchive32.manifest;
        explodedArchive32.recursive = false;
        java.util.jar.Manifest manifest36 = explodedArchive32.manifest;
        java.io.File file37 = explodedArchive32.manifestFile;
        java.io.File file38 = null;
        java.io.File file39 = explodedArchive32.getManifestFile(file38);
        explodedArchive28.manifestFile = file38;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive41 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest42 = explodedArchive41.manifest;
        explodedArchive41.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive45 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest46 = explodedArchive45.manifest;
        explodedArchive45.recursive = false;
        java.util.jar.Manifest manifest49 = explodedArchive45.manifest;
        java.io.File file50 = explodedArchive45.manifestFile;
        java.io.File file51 = null;
        java.io.File file52 = explodedArchive45.getManifestFile(file51);
        explodedArchive41.manifestFile = file51;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive54 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest55 = explodedArchive54.manifest;
        explodedArchive54.recursive = false;
        java.util.jar.Manifest manifest58 = explodedArchive54.manifest;
        java.io.File file59 = explodedArchive54.manifestFile;
        java.io.File file60 = null;
        java.io.File file61 = explodedArchive54.getManifestFile(file60);
        explodedArchive41.manifestFile = file61;
        explodedArchive28.root = file61;
        java.util.Iterator<java.io.File> fileItor64 = fileEntryIterator0.listFiles(file61);
        java.util.Comparator<java.io.File> fileComparator65 = fileEntryIterator0.entryComparator;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive66 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest67 = explodedArchive66.manifest;
        explodedArchive66.recursive = false;
        java.io.File file70 = null;
        explodedArchive66.root = file70;
        java.io.File file72 = explodedArchive66.root;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive73 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest74 = explodedArchive73.manifest;
        explodedArchive73.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive77 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest78 = explodedArchive77.manifest;
        explodedArchive77.recursive = false;
        java.util.jar.Manifest manifest81 = explodedArchive77.manifest;
        java.io.File file82 = explodedArchive77.manifestFile;
        java.io.File file83 = null;
        java.io.File file84 = explodedArchive77.getManifestFile(file83);
        explodedArchive73.manifestFile = file83;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive86 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest87 = explodedArchive86.manifest;
        explodedArchive86.recursive = false;
        java.util.jar.Manifest manifest90 = explodedArchive86.manifest;
        java.io.File file91 = explodedArchive86.manifestFile;
        java.io.File file92 = null;
        java.io.File file93 = explodedArchive86.getManifestFile(file92);
        explodedArchive73.manifestFile = file93;
        java.io.File file95 = explodedArchive66.getManifestFile(file93);
        fileEntryIterator0.current = file93;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file23.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file23.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file39.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file39.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file52.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file52.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file61.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file61.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest78);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest81);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file82);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file84);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file84.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file84.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest87);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest90);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file91);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file93);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file93.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file93.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file95);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file95.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file95.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
    }

    @Test
    public void test0046() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0046");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file1 = null;
        fileEntryIterator0.current = file1;
        fileEntryIterator0.recursive = true;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator5 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator6 = entryComparator5.reversed();
        java.util.Comparator<java.io.File> fileComparator7 = entryComparator5.reversed();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive8 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest9 = explodedArchive8.manifest;
        explodedArchive8.recursive = false;
        java.util.jar.Manifest manifest12 = explodedArchive8.manifest;
        java.io.File file13 = explodedArchive8.manifestFile;
        java.io.File file14 = null;
        java.io.File file15 = explodedArchive8.getManifestFile(file14);
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive16 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest17 = explodedArchive16.manifest;
        explodedArchive16.recursive = false;
        java.io.File file20 = null;
        explodedArchive16.root = file20;
        java.io.File file22 = explodedArchive16.root;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive23 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest24 = explodedArchive23.manifest;
        explodedArchive23.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive27 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest28 = explodedArchive27.manifest;
        explodedArchive27.recursive = false;
        java.util.jar.Manifest manifest31 = explodedArchive27.manifest;
        java.io.File file32 = explodedArchive27.manifestFile;
        java.io.File file33 = null;
        java.io.File file34 = explodedArchive27.getManifestFile(file33);
        explodedArchive23.manifestFile = file33;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive36 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest37 = explodedArchive36.manifest;
        explodedArchive36.recursive = false;
        java.util.jar.Manifest manifest40 = explodedArchive36.manifest;
        java.io.File file41 = explodedArchive36.manifestFile;
        java.io.File file42 = null;
        java.io.File file43 = explodedArchive36.getManifestFile(file42);
        explodedArchive23.manifestFile = file43;
        java.io.File file45 = explodedArchive16.getManifestFile(file43);
        int int46 = entryComparator5.compare(file15, file43);
        java.util.Iterator<java.io.File> fileItor47 = fileEntryIterator0.listFiles(file15);
        // The following exception was thrown during execution in test generation
        try {
            org.springframework.boot.loader.archive.Archive.Entry entry48 = fileEntryIterator0.next();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file15.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file15.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file34.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file34.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file43.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file43.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file45.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file45.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor47);
    }

    @Test
    public void test0047() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0047");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file1 = explodedArchive0.root;
        java.io.File file2 = null;
        explodedArchive0.manifestFile = file2;
        java.io.File file4 = explodedArchive0.root;
        java.lang.String str5 = explodedArchive0.toString();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator<org.springframework.boot.loader.archive.Archive.Entry> entryItor6 = explodedArchive0.iterator();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "exploded archive" + "'", str5.equals("exploded archive"));
    }

    @Test
    public void test0048() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0048");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        boolean boolean1 = explodedArchive0.recursive;
        java.lang.String str2 = explodedArchive0.toString();
        boolean boolean3 = explodedArchive0.recursive;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntry fileEntry4 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntry();
        java.lang.String str5 = fileEntry4.name;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator6 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file7 = null;
        fileEntryIterator6.current = file7;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive9 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest10 = explodedArchive9.manifest;
        explodedArchive9.recursive = false;
        java.util.jar.Manifest manifest13 = explodedArchive9.manifest;
        java.io.File file14 = explodedArchive9.manifestFile;
        java.io.File file15 = null;
        java.io.File file16 = explodedArchive9.getManifestFile(file15);
        java.util.Iterator<java.io.File> fileItor17 = fileEntryIterator6.listFiles(file16);
        java.io.File file18 = fileEntryIterator6.current;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator19 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file20 = null;
        fileEntryIterator19.current = file20;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive22 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest23 = explodedArchive22.manifest;
        explodedArchive22.recursive = false;
        java.util.jar.Manifest manifest26 = explodedArchive22.manifest;
        java.io.File file27 = explodedArchive22.manifestFile;
        java.io.File file28 = null;
        java.io.File file29 = explodedArchive22.getManifestFile(file28);
        java.util.Iterator<java.io.File> fileItor30 = fileEntryIterator19.listFiles(file29);
        java.util.ArrayDeque<java.util.Iterator<java.io.File>> fileItorQueue31 = new java.util.ArrayDeque<java.util.Iterator<java.io.File>>();
        boolean boolean32 = fileItorQueue31.add(fileItor30);
        fileEntryIterator6.stack = fileItorQueue31;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive34 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest35 = explodedArchive34.manifest;
        explodedArchive34.recursive = false;
        java.io.File file38 = null;
        explodedArchive34.root = file38;
        java.io.File file40 = explodedArchive34.root;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive41 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest42 = explodedArchive41.manifest;
        explodedArchive41.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive45 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest46 = explodedArchive45.manifest;
        explodedArchive45.recursive = false;
        java.util.jar.Manifest manifest49 = explodedArchive45.manifest;
        java.io.File file50 = explodedArchive45.manifestFile;
        java.io.File file51 = null;
        java.io.File file52 = explodedArchive45.getManifestFile(file51);
        explodedArchive41.manifestFile = file51;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive54 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest55 = explodedArchive54.manifest;
        explodedArchive54.recursive = false;
        java.util.jar.Manifest manifest58 = explodedArchive54.manifest;
        java.io.File file59 = explodedArchive54.manifestFile;
        java.io.File file60 = null;
        java.io.File file61 = explodedArchive54.getManifestFile(file60);
        explodedArchive41.manifestFile = file61;
        java.io.File file63 = explodedArchive34.getManifestFile(file61);
        fileEntryIterator6.root = file61;
        fileEntry4.file = file61;
        boolean boolean66 = fileEntry4.isDirectory();
        boolean boolean67 = fileEntry4.isDirectory();
        // The following exception was thrown during execution in test generation
        try {
            org.springframework.boot.loader.archive.Archive archive68 = explodedArchive0.getNestedArchive((org.springframework.boot.loader.archive.Archive.Entry) fileEntry4);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: File must exist");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str2 + "' != '" + "exploded archive" + "'", str2.equals("exploded archive"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file16.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file16.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file29.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file29.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file52.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file52.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file61.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file61.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file63.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file63.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
    }

    @Test
    public void test0049() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0049");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file1 = null;
        fileEntryIterator0.current = file1;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive3 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest4 = explodedArchive3.manifest;
        explodedArchive3.recursive = false;
        java.util.jar.Manifest manifest7 = explodedArchive3.manifest;
        java.io.File file8 = explodedArchive3.manifestFile;
        java.io.File file9 = null;
        java.io.File file10 = explodedArchive3.getManifestFile(file9);
        java.util.Iterator<java.io.File> fileItor11 = fileEntryIterator0.listFiles(file10);
        java.io.File file12 = fileEntryIterator0.root;
        // The following exception was thrown during execution in test generation
        try {
            fileEntryIterator0.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: remove");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file12);
    }

    @Test
    public void test0050() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0050");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest1 = explodedArchive0.manifest;
        explodedArchive0.recursive = false;
        java.io.File file4 = null;
        explodedArchive0.root = file4;
        java.io.File file6 = explodedArchive0.root;
        // The following exception was thrown during execution in test generation
        try {
            java.util.jar.Manifest manifest7 = explodedArchive0.getManifest();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file6);
    }

    @Test
    public void test0051() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0051");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest1 = explodedArchive0.manifest;
        java.util.jar.Manifest manifest2 = null;
        explodedArchive0.manifest = manifest2;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntry fileEntry4 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntry();
        java.lang.String str5 = fileEntry4.name;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator6 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file7 = null;
        fileEntryIterator6.current = file7;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive9 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest10 = explodedArchive9.manifest;
        explodedArchive9.recursive = false;
        java.util.jar.Manifest manifest13 = explodedArchive9.manifest;
        java.io.File file14 = explodedArchive9.manifestFile;
        java.io.File file15 = null;
        java.io.File file16 = explodedArchive9.getManifestFile(file15);
        java.util.Iterator<java.io.File> fileItor17 = fileEntryIterator6.listFiles(file16);
        java.io.File file18 = fileEntryIterator6.current;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator19 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file20 = null;
        fileEntryIterator19.current = file20;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive22 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest23 = explodedArchive22.manifest;
        explodedArchive22.recursive = false;
        java.util.jar.Manifest manifest26 = explodedArchive22.manifest;
        java.io.File file27 = explodedArchive22.manifestFile;
        java.io.File file28 = null;
        java.io.File file29 = explodedArchive22.getManifestFile(file28);
        java.util.Iterator<java.io.File> fileItor30 = fileEntryIterator19.listFiles(file29);
        java.util.ArrayDeque<java.util.Iterator<java.io.File>> fileItorQueue31 = new java.util.ArrayDeque<java.util.Iterator<java.io.File>>();
        boolean boolean32 = fileItorQueue31.add(fileItor30);
        fileEntryIterator6.stack = fileItorQueue31;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive34 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest35 = explodedArchive34.manifest;
        explodedArchive34.recursive = false;
        java.io.File file38 = null;
        explodedArchive34.root = file38;
        java.io.File file40 = explodedArchive34.root;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive41 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest42 = explodedArchive41.manifest;
        explodedArchive41.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive45 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest46 = explodedArchive45.manifest;
        explodedArchive45.recursive = false;
        java.util.jar.Manifest manifest49 = explodedArchive45.manifest;
        java.io.File file50 = explodedArchive45.manifestFile;
        java.io.File file51 = null;
        java.io.File file52 = explodedArchive45.getManifestFile(file51);
        explodedArchive41.manifestFile = file51;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive54 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest55 = explodedArchive54.manifest;
        explodedArchive54.recursive = false;
        java.util.jar.Manifest manifest58 = explodedArchive54.manifest;
        java.io.File file59 = explodedArchive54.manifestFile;
        java.io.File file60 = null;
        java.io.File file61 = explodedArchive54.getManifestFile(file60);
        explodedArchive41.manifestFile = file61;
        java.io.File file63 = explodedArchive34.getManifestFile(file61);
        fileEntryIterator6.root = file61;
        fileEntry4.file = file61;
        java.io.File file66 = explodedArchive0.getManifestFile(file61);
        java.util.jar.Manifest manifest67 = null;
        explodedArchive0.manifest = manifest67;
        java.lang.Class<?> wildcardClass69 = explodedArchive0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file16.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file16.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file29.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file29.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file52.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file52.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file61.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file61.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file63.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file63.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file66.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file66.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass69);
    }

    @Test
    public void test0052() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0052");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        boolean boolean1 = explodedArchive0.recursive;
        boolean boolean2 = explodedArchive0.recursive;
        java.io.File file3 = explodedArchive0.root;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file3);
    }

    @Test
    public void test0053() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0053");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest1 = explodedArchive0.manifest;
        java.util.jar.Manifest manifest2 = null;
        explodedArchive0.manifest = manifest2;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntry fileEntry4 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntry();
        java.lang.String str5 = fileEntry4.name;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator6 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file7 = null;
        fileEntryIterator6.current = file7;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive9 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest10 = explodedArchive9.manifest;
        explodedArchive9.recursive = false;
        java.util.jar.Manifest manifest13 = explodedArchive9.manifest;
        java.io.File file14 = explodedArchive9.manifestFile;
        java.io.File file15 = null;
        java.io.File file16 = explodedArchive9.getManifestFile(file15);
        java.util.Iterator<java.io.File> fileItor17 = fileEntryIterator6.listFiles(file16);
        java.io.File file18 = fileEntryIterator6.current;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator19 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file20 = null;
        fileEntryIterator19.current = file20;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive22 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest23 = explodedArchive22.manifest;
        explodedArchive22.recursive = false;
        java.util.jar.Manifest manifest26 = explodedArchive22.manifest;
        java.io.File file27 = explodedArchive22.manifestFile;
        java.io.File file28 = null;
        java.io.File file29 = explodedArchive22.getManifestFile(file28);
        java.util.Iterator<java.io.File> fileItor30 = fileEntryIterator19.listFiles(file29);
        java.util.ArrayDeque<java.util.Iterator<java.io.File>> fileItorQueue31 = new java.util.ArrayDeque<java.util.Iterator<java.io.File>>();
        boolean boolean32 = fileItorQueue31.add(fileItor30);
        fileEntryIterator6.stack = fileItorQueue31;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive34 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest35 = explodedArchive34.manifest;
        explodedArchive34.recursive = false;
        java.io.File file38 = null;
        explodedArchive34.root = file38;
        java.io.File file40 = explodedArchive34.root;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive41 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest42 = explodedArchive41.manifest;
        explodedArchive41.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive45 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest46 = explodedArchive45.manifest;
        explodedArchive45.recursive = false;
        java.util.jar.Manifest manifest49 = explodedArchive45.manifest;
        java.io.File file50 = explodedArchive45.manifestFile;
        java.io.File file51 = null;
        java.io.File file52 = explodedArchive45.getManifestFile(file51);
        explodedArchive41.manifestFile = file51;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive54 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest55 = explodedArchive54.manifest;
        explodedArchive54.recursive = false;
        java.util.jar.Manifest manifest58 = explodedArchive54.manifest;
        java.io.File file59 = explodedArchive54.manifestFile;
        java.io.File file60 = null;
        java.io.File file61 = explodedArchive54.getManifestFile(file60);
        explodedArchive41.manifestFile = file61;
        java.io.File file63 = explodedArchive34.getManifestFile(file61);
        fileEntryIterator6.root = file61;
        fileEntry4.file = file61;
        java.io.File file66 = explodedArchive0.getManifestFile(file61);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator<org.springframework.boot.loader.archive.Archive.Entry> entryItor67 = explodedArchive0.iterator();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file16.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file16.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file29.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file29.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file52.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file52.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file61.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file61.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file63.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file63.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file66.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file66.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
    }

    @Test
    public void test0054() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0054");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file1 = null;
        fileEntryIterator0.current = file1;
        fileEntryIterator0.recursive = true;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator5 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file6 = null;
        fileEntryIterator5.current = file6;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive8 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest9 = explodedArchive8.manifest;
        explodedArchive8.recursive = false;
        java.util.jar.Manifest manifest12 = explodedArchive8.manifest;
        java.io.File file13 = explodedArchive8.manifestFile;
        java.io.File file14 = null;
        java.io.File file15 = explodedArchive8.getManifestFile(file14);
        java.util.Iterator<java.io.File> fileItor16 = fileEntryIterator5.listFiles(file15);
        java.io.File file17 = fileEntryIterator5.root;
        java.io.File file18 = fileEntryIterator5.root;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator19 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file20 = null;
        fileEntryIterator19.current = file20;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive22 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest23 = explodedArchive22.manifest;
        explodedArchive22.recursive = false;
        java.util.jar.Manifest manifest26 = explodedArchive22.manifest;
        java.io.File file27 = explodedArchive22.manifestFile;
        java.io.File file28 = null;
        java.io.File file29 = explodedArchive22.getManifestFile(file28);
        java.util.Iterator<java.io.File> fileItor30 = fileEntryIterator19.listFiles(file29);
        java.util.ArrayDeque<java.util.Iterator<java.io.File>> fileItorQueue31 = new java.util.ArrayDeque<java.util.Iterator<java.io.File>>();
        boolean boolean32 = fileItorQueue31.add(fileItor30);
        fileEntryIterator5.stack = fileItorQueue31;
        java.util.Deque<java.util.Iterator<java.io.File>> fileItorQueue34 = fileEntryIterator5.stack;
        fileEntryIterator0.stack = fileItorQueue34;
        // The following exception was thrown during execution in test generation
        try {
            fileEntryIterator0.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: remove");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file15.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file15.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file29.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file29.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItorQueue34);
    }

    @Test
    public void test0055() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0055");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest1 = explodedArchive0.manifest;
        explodedArchive0.recursive = false;
        java.util.jar.Manifest manifest4 = explodedArchive0.manifest;
        java.util.jar.Manifest manifest5 = null;
        explodedArchive0.manifest = manifest5;
        // The following exception was thrown during execution in test generation
        try {
            java.util.jar.Manifest manifest7 = explodedArchive0.getManifest();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest4);
    }

    @Test
    public void test0056() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0056");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntry fileEntry0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntry();
        java.lang.String str1 = fileEntry0.name;
        java.lang.Class<?> wildcardClass2 = fileEntry0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass2);
    }

    @Test
    public void test0057() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0057");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest1 = explodedArchive0.manifest;
        explodedArchive0.recursive = false;
        java.util.jar.Manifest manifest4 = explodedArchive0.manifest;
        java.util.jar.Manifest manifest5 = null;
        explodedArchive0.manifest = manifest5;
        boolean boolean7 = explodedArchive0.recursive;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test0058() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0058");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntry fileEntry0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntry();
        java.io.File file1 = fileEntry0.getFile();
        java.io.File file2 = fileEntry0.getFile();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive3 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file4 = explodedArchive3.root;
        java.io.File file5 = null;
        explodedArchive3.manifestFile = file5;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive7 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest8 = explodedArchive7.manifest;
        explodedArchive7.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive11 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest12 = explodedArchive11.manifest;
        explodedArchive11.recursive = false;
        java.util.jar.Manifest manifest15 = explodedArchive11.manifest;
        java.io.File file16 = explodedArchive11.manifestFile;
        java.io.File file17 = null;
        java.io.File file18 = explodedArchive11.getManifestFile(file17);
        explodedArchive7.manifestFile = file17;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive20 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest21 = explodedArchive20.manifest;
        explodedArchive20.recursive = false;
        java.util.jar.Manifest manifest24 = explodedArchive20.manifest;
        java.io.File file25 = explodedArchive20.manifestFile;
        java.io.File file26 = null;
        java.io.File file27 = explodedArchive20.getManifestFile(file26);
        explodedArchive7.manifestFile = file27;
        java.io.File file29 = explodedArchive3.getManifestFile(file27);
        fileEntry0.file = file29;
        // The following exception was thrown during execution in test generation
        try {
            org.springframework.boot.loader.archive.ExplodedArchive explodedArchive31 = new org.springframework.boot.loader.archive.ExplodedArchive(file29);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid source folder META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file18.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file18.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file27.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file27.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file29.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file29.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
    }

    @Test
    public void test0059() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0059");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file1 = null;
        fileEntryIterator0.current = file1;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive3 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest4 = explodedArchive3.manifest;
        explodedArchive3.recursive = false;
        java.util.jar.Manifest manifest7 = explodedArchive3.manifest;
        java.io.File file8 = explodedArchive3.manifestFile;
        java.io.File file9 = null;
        java.io.File file10 = explodedArchive3.getManifestFile(file9);
        java.util.Iterator<java.io.File> fileItor11 = fileEntryIterator0.listFiles(file10);
        java.io.File file12 = fileEntryIterator0.current;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator13 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file14 = null;
        fileEntryIterator13.current = file14;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive16 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest17 = explodedArchive16.manifest;
        explodedArchive16.recursive = false;
        java.util.jar.Manifest manifest20 = explodedArchive16.manifest;
        java.io.File file21 = explodedArchive16.manifestFile;
        java.io.File file22 = null;
        java.io.File file23 = explodedArchive16.getManifestFile(file22);
        java.util.Iterator<java.io.File> fileItor24 = fileEntryIterator13.listFiles(file23);
        java.util.ArrayDeque<java.util.Iterator<java.io.File>> fileItorQueue25 = new java.util.ArrayDeque<java.util.Iterator<java.io.File>>();
        boolean boolean26 = fileItorQueue25.add(fileItor24);
        fileEntryIterator0.stack = fileItorQueue25;
        // The following exception was thrown during execution in test generation
        try {
            fileEntryIterator0.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: remove");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file23.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file23.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
    }

    @Test
    public void test0060() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0060");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest1 = explodedArchive0.manifest;
        explodedArchive0.recursive = false;
        java.io.File file4 = null;
        explodedArchive0.root = file4;
        java.io.File file6 = explodedArchive0.root;
        java.util.jar.Manifest manifest7 = null;
        explodedArchive0.manifest = manifest7;
        explodedArchive0.recursive = false;
        org.springframework.boot.loader.archive.Archive.EntryFilter entryFilter11 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<org.springframework.boot.loader.archive.Archive> archiveList12 = explodedArchive0.getNestedArchives(entryFilter11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file6);
    }

    @Test
    public void test0061() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0061");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntry fileEntry0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntry();
        java.lang.String str1 = fileEntry0.name;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator2 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file3 = null;
        fileEntryIterator2.current = file3;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive5 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.lang.String str6 = explodedArchive5.toString();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive7 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file8 = explodedArchive7.root;
        java.io.File file9 = null;
        explodedArchive7.manifestFile = file9;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive11 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest12 = explodedArchive11.manifest;
        explodedArchive11.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive15 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest16 = explodedArchive15.manifest;
        explodedArchive15.recursive = false;
        java.util.jar.Manifest manifest19 = explodedArchive15.manifest;
        java.io.File file20 = explodedArchive15.manifestFile;
        java.io.File file21 = null;
        java.io.File file22 = explodedArchive15.getManifestFile(file21);
        explodedArchive11.manifestFile = file21;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive24 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest25 = explodedArchive24.manifest;
        explodedArchive24.recursive = false;
        java.util.jar.Manifest manifest28 = explodedArchive24.manifest;
        java.io.File file29 = explodedArchive24.manifestFile;
        java.io.File file30 = null;
        java.io.File file31 = explodedArchive24.getManifestFile(file30);
        explodedArchive11.manifestFile = file31;
        java.io.File file33 = explodedArchive7.getManifestFile(file31);
        java.io.File file34 = explodedArchive5.getManifestFile(file31);
        fileEntryIterator2.root = file31;
        fileEntry0.file = file31;
        java.io.File file37 = fileEntry0.getFile();
        // The following exception was thrown during execution in test generation
        try {
            org.springframework.boot.loader.archive.ExplodedArchive explodedArchive39 = new org.springframework.boot.loader.archive.ExplodedArchive(file37, false);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid source folder META-INF/MANIFEST.MF");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "exploded archive" + "'", str6.equals("exploded archive"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file22.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file22.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file31.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file31.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file33.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file33.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file34.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file34.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file37.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file37.toString(), "META-INF/MANIFEST.MF");
    }

    @Test
    public void test0062() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0062");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file1 = null;
        fileEntryIterator0.current = file1;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive3 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.lang.String str4 = explodedArchive3.toString();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive5 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file6 = explodedArchive5.root;
        java.io.File file7 = null;
        explodedArchive5.manifestFile = file7;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive9 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest10 = explodedArchive9.manifest;
        explodedArchive9.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive13 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest14 = explodedArchive13.manifest;
        explodedArchive13.recursive = false;
        java.util.jar.Manifest manifest17 = explodedArchive13.manifest;
        java.io.File file18 = explodedArchive13.manifestFile;
        java.io.File file19 = null;
        java.io.File file20 = explodedArchive13.getManifestFile(file19);
        explodedArchive9.manifestFile = file19;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive22 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest23 = explodedArchive22.manifest;
        explodedArchive22.recursive = false;
        java.util.jar.Manifest manifest26 = explodedArchive22.manifest;
        java.io.File file27 = explodedArchive22.manifestFile;
        java.io.File file28 = null;
        java.io.File file29 = explodedArchive22.getManifestFile(file28);
        explodedArchive9.manifestFile = file29;
        java.io.File file31 = explodedArchive5.getManifestFile(file29);
        java.io.File file32 = explodedArchive3.getManifestFile(file29);
        fileEntryIterator0.root = file29;
        boolean boolean34 = fileEntryIterator0.recursive;
        fileEntryIterator0.recursive = true;
        // The following exception was thrown during execution in test generation
        try {
            fileEntryIterator0.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: remove");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str4 + "' != '" + "exploded archive" + "'", str4.equals("exploded archive"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file20.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file20.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file29.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file29.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file31.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file31.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file32.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file32.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
    }

    @Test
    public void test0063() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0063");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file1 = null;
        fileEntryIterator0.current = file1;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive3 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest4 = explodedArchive3.manifest;
        explodedArchive3.recursive = false;
        java.util.jar.Manifest manifest7 = explodedArchive3.manifest;
        java.io.File file8 = explodedArchive3.manifestFile;
        java.io.File file9 = null;
        java.io.File file10 = explodedArchive3.getManifestFile(file9);
        java.util.Iterator<java.io.File> fileItor11 = fileEntryIterator0.listFiles(file10);
        java.io.File file12 = fileEntryIterator0.current;
        java.lang.Class<?> wildcardClass13 = fileEntryIterator0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test0064() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0064");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file1 = null;
        fileEntryIterator0.current = file1;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive3 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest4 = explodedArchive3.manifest;
        explodedArchive3.recursive = false;
        java.util.jar.Manifest manifest7 = explodedArchive3.manifest;
        java.io.File file8 = explodedArchive3.manifestFile;
        java.io.File file9 = null;
        java.io.File file10 = explodedArchive3.getManifestFile(file9);
        java.util.Iterator<java.io.File> fileItor11 = fileEntryIterator0.listFiles(file10);
        java.io.File file12 = fileEntryIterator0.current;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator13 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file14 = null;
        fileEntryIterator13.current = file14;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive16 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest17 = explodedArchive16.manifest;
        explodedArchive16.recursive = false;
        java.util.jar.Manifest manifest20 = explodedArchive16.manifest;
        java.io.File file21 = explodedArchive16.manifestFile;
        java.io.File file22 = null;
        java.io.File file23 = explodedArchive16.getManifestFile(file22);
        java.util.Iterator<java.io.File> fileItor24 = fileEntryIterator13.listFiles(file23);
        java.util.ArrayDeque<java.util.Iterator<java.io.File>> fileItorQueue25 = new java.util.ArrayDeque<java.util.Iterator<java.io.File>>();
        boolean boolean26 = fileItorQueue25.add(fileItor24);
        fileEntryIterator0.stack = fileItorQueue25;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive28 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest29 = explodedArchive28.manifest;
        explodedArchive28.recursive = false;
        java.io.File file32 = null;
        explodedArchive28.root = file32;
        java.io.File file34 = explodedArchive28.root;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive35 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest36 = explodedArchive35.manifest;
        explodedArchive35.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive39 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest40 = explodedArchive39.manifest;
        explodedArchive39.recursive = false;
        java.util.jar.Manifest manifest43 = explodedArchive39.manifest;
        java.io.File file44 = explodedArchive39.manifestFile;
        java.io.File file45 = null;
        java.io.File file46 = explodedArchive39.getManifestFile(file45);
        explodedArchive35.manifestFile = file45;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive48 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest49 = explodedArchive48.manifest;
        explodedArchive48.recursive = false;
        java.util.jar.Manifest manifest52 = explodedArchive48.manifest;
        java.io.File file53 = explodedArchive48.manifestFile;
        java.io.File file54 = null;
        java.io.File file55 = explodedArchive48.getManifestFile(file54);
        explodedArchive35.manifestFile = file55;
        java.io.File file57 = explodedArchive28.getManifestFile(file55);
        fileEntryIterator0.root = file55;
        // The following exception was thrown during execution in test generation
        try {
            fileEntryIterator0.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: remove");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file23.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file23.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file46.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file46.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file55.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file55.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file57.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file57.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
    }

    @Test
    public void test0065() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0065");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.lang.String str1 = explodedArchive0.toString();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive2 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file3 = explodedArchive2.root;
        java.io.File file4 = null;
        explodedArchive2.manifestFile = file4;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive6 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest7 = explodedArchive6.manifest;
        explodedArchive6.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive10 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest11 = explodedArchive10.manifest;
        explodedArchive10.recursive = false;
        java.util.jar.Manifest manifest14 = explodedArchive10.manifest;
        java.io.File file15 = explodedArchive10.manifestFile;
        java.io.File file16 = null;
        java.io.File file17 = explodedArchive10.getManifestFile(file16);
        explodedArchive6.manifestFile = file16;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive19 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest20 = explodedArchive19.manifest;
        explodedArchive19.recursive = false;
        java.util.jar.Manifest manifest23 = explodedArchive19.manifest;
        java.io.File file24 = explodedArchive19.manifestFile;
        java.io.File file25 = null;
        java.io.File file26 = explodedArchive19.getManifestFile(file25);
        explodedArchive6.manifestFile = file26;
        java.io.File file28 = explodedArchive2.getManifestFile(file26);
        java.io.File file29 = explodedArchive0.getManifestFile(file26);
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntry fileEntry30 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntry();
        java.lang.String str31 = fileEntry30.getName();
        java.io.File file32 = fileEntry30.getFile();
        java.io.File file33 = fileEntry30.file;
        // The following exception was thrown during execution in test generation
        try {
            org.springframework.boot.loader.archive.Archive archive34 = explodedArchive0.getNestedArchive((org.springframework.boot.loader.archive.Archive.Entry) fileEntry30);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str1 + "' != '" + "exploded archive" + "'", str1.equals("exploded archive"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file17.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file17.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file26.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file26.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file28.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file28.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file29.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file29.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file33);
    }

    @Test
    public void test0066() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0066");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file1 = null;
        fileEntryIterator0.current = file1;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive3 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest4 = explodedArchive3.manifest;
        explodedArchive3.recursive = false;
        java.util.jar.Manifest manifest7 = explodedArchive3.manifest;
        java.io.File file8 = explodedArchive3.manifestFile;
        java.io.File file9 = null;
        java.io.File file10 = explodedArchive3.getManifestFile(file9);
        java.util.Iterator<java.io.File> fileItor11 = fileEntryIterator0.listFiles(file10);
        java.io.File file12 = fileEntryIterator0.root;
        java.io.File file13 = fileEntryIterator0.poll();
        // The following exception was thrown during execution in test generation
        try {
            fileEntryIterator0.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: remove");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file13);
    }

    @Test
    public void test0067() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0067");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file1 = null;
        fileEntryIterator0.current = file1;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive3 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest4 = explodedArchive3.manifest;
        explodedArchive3.recursive = false;
        java.util.jar.Manifest manifest7 = explodedArchive3.manifest;
        java.io.File file8 = explodedArchive3.manifestFile;
        java.io.File file9 = null;
        java.io.File file10 = explodedArchive3.getManifestFile(file9);
        java.util.Iterator<java.io.File> fileItor11 = fileEntryIterator0.listFiles(file10);
        java.io.File file12 = fileEntryIterator0.current;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator13 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file14 = null;
        fileEntryIterator13.current = file14;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive16 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest17 = explodedArchive16.manifest;
        explodedArchive16.recursive = false;
        java.util.jar.Manifest manifest20 = explodedArchive16.manifest;
        java.io.File file21 = explodedArchive16.manifestFile;
        java.io.File file22 = null;
        java.io.File file23 = explodedArchive16.getManifestFile(file22);
        java.util.Iterator<java.io.File> fileItor24 = fileEntryIterator13.listFiles(file23);
        java.util.ArrayDeque<java.util.Iterator<java.io.File>> fileItorQueue25 = new java.util.ArrayDeque<java.util.Iterator<java.io.File>>();
        boolean boolean26 = fileItorQueue25.add(fileItor24);
        fileEntryIterator0.stack = fileItorQueue25;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive28 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest29 = explodedArchive28.manifest;
        explodedArchive28.recursive = false;
        java.io.File file32 = null;
        explodedArchive28.root = file32;
        java.io.File file34 = explodedArchive28.root;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive35 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest36 = explodedArchive35.manifest;
        explodedArchive35.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive39 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest40 = explodedArchive39.manifest;
        explodedArchive39.recursive = false;
        java.util.jar.Manifest manifest43 = explodedArchive39.manifest;
        java.io.File file44 = explodedArchive39.manifestFile;
        java.io.File file45 = null;
        java.io.File file46 = explodedArchive39.getManifestFile(file45);
        explodedArchive35.manifestFile = file45;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive48 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest49 = explodedArchive48.manifest;
        explodedArchive48.recursive = false;
        java.util.jar.Manifest manifest52 = explodedArchive48.manifest;
        java.io.File file53 = explodedArchive48.manifestFile;
        java.io.File file54 = null;
        java.io.File file55 = explodedArchive48.getManifestFile(file54);
        explodedArchive35.manifestFile = file55;
        java.io.File file57 = explodedArchive28.getManifestFile(file55);
        fileEntryIterator0.root = file55;
        boolean boolean59 = fileEntryIterator0.recursive;
        // The following exception was thrown during execution in test generation
        try {
            fileEntryIterator0.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: remove");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file23.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file23.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file46.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file46.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file55.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file55.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file57.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file57.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
    }

    @Test
    public void test0068() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0068");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        boolean boolean1 = fileEntryIterator0.hasNext();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator2 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator3 = entryComparator2.reversed();
        java.util.Comparator<java.io.File> fileComparator4 = fileComparator3.reversed();
        fileEntryIterator0.entryComparator = fileComparator4;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive6 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file7 = explodedArchive6.root;
        java.io.File file8 = null;
        explodedArchive6.manifestFile = file8;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive10 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest11 = explodedArchive10.manifest;
        explodedArchive10.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive14 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest15 = explodedArchive14.manifest;
        explodedArchive14.recursive = false;
        java.util.jar.Manifest manifest18 = explodedArchive14.manifest;
        java.io.File file19 = explodedArchive14.manifestFile;
        java.io.File file20 = null;
        java.io.File file21 = explodedArchive14.getManifestFile(file20);
        explodedArchive10.manifestFile = file20;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive23 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest24 = explodedArchive23.manifest;
        explodedArchive23.recursive = false;
        java.util.jar.Manifest manifest27 = explodedArchive23.manifest;
        java.io.File file28 = explodedArchive23.manifestFile;
        java.io.File file29 = null;
        java.io.File file30 = explodedArchive23.getManifestFile(file29);
        explodedArchive10.manifestFile = file30;
        java.io.File file32 = explodedArchive6.getManifestFile(file30);
        java.util.Iterator<java.io.File> fileItor33 = fileEntryIterator0.listFiles(file32);
        boolean boolean34 = fileEntryIterator0.recursive;
        java.util.Deque<java.util.Iterator<java.io.File>> fileItorQueue35 = fileEntryIterator0.stack;
        java.lang.Class<?> wildcardClass36 = fileEntryIterator0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file21.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file21.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file30.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file30.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file32.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file32.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItorQueue35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass36);
    }

    @Test
    public void test0069() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0069");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest1 = explodedArchive0.manifest;
        java.util.jar.Manifest manifest2 = null;
        explodedArchive0.manifest = manifest2;
        java.io.File file4 = explodedArchive0.root;
        java.util.jar.Manifest manifest5 = null;
        explodedArchive0.manifest = manifest5;
        java.lang.Class<?> wildcardClass7 = explodedArchive0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test0070() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0070");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest1 = explodedArchive0.manifest;
        java.util.jar.Manifest manifest2 = null;
        explodedArchive0.manifest = manifest2;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntry fileEntry4 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntry();
        java.lang.String str5 = fileEntry4.name;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator6 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file7 = null;
        fileEntryIterator6.current = file7;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive9 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest10 = explodedArchive9.manifest;
        explodedArchive9.recursive = false;
        java.util.jar.Manifest manifest13 = explodedArchive9.manifest;
        java.io.File file14 = explodedArchive9.manifestFile;
        java.io.File file15 = null;
        java.io.File file16 = explodedArchive9.getManifestFile(file15);
        java.util.Iterator<java.io.File> fileItor17 = fileEntryIterator6.listFiles(file16);
        java.io.File file18 = fileEntryIterator6.current;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator19 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file20 = null;
        fileEntryIterator19.current = file20;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive22 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest23 = explodedArchive22.manifest;
        explodedArchive22.recursive = false;
        java.util.jar.Manifest manifest26 = explodedArchive22.manifest;
        java.io.File file27 = explodedArchive22.manifestFile;
        java.io.File file28 = null;
        java.io.File file29 = explodedArchive22.getManifestFile(file28);
        java.util.Iterator<java.io.File> fileItor30 = fileEntryIterator19.listFiles(file29);
        java.util.ArrayDeque<java.util.Iterator<java.io.File>> fileItorQueue31 = new java.util.ArrayDeque<java.util.Iterator<java.io.File>>();
        boolean boolean32 = fileItorQueue31.add(fileItor30);
        fileEntryIterator6.stack = fileItorQueue31;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive34 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest35 = explodedArchive34.manifest;
        explodedArchive34.recursive = false;
        java.io.File file38 = null;
        explodedArchive34.root = file38;
        java.io.File file40 = explodedArchive34.root;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive41 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest42 = explodedArchive41.manifest;
        explodedArchive41.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive45 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest46 = explodedArchive45.manifest;
        explodedArchive45.recursive = false;
        java.util.jar.Manifest manifest49 = explodedArchive45.manifest;
        java.io.File file50 = explodedArchive45.manifestFile;
        java.io.File file51 = null;
        java.io.File file52 = explodedArchive45.getManifestFile(file51);
        explodedArchive41.manifestFile = file51;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive54 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest55 = explodedArchive54.manifest;
        explodedArchive54.recursive = false;
        java.util.jar.Manifest manifest58 = explodedArchive54.manifest;
        java.io.File file59 = explodedArchive54.manifestFile;
        java.io.File file60 = null;
        java.io.File file61 = explodedArchive54.getManifestFile(file60);
        explodedArchive41.manifestFile = file61;
        java.io.File file63 = explodedArchive34.getManifestFile(file61);
        fileEntryIterator6.root = file61;
        fileEntry4.file = file61;
        java.io.File file66 = explodedArchive0.getManifestFile(file61);
        java.util.jar.Manifest manifest67 = null;
        explodedArchive0.manifest = manifest67;
        java.io.File file69 = explodedArchive0.root;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file16.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file16.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file29.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file29.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file52.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file52.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file61.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file61.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file63.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file63.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file66.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file66.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file69);
    }

    @Test
    public void test0071() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0071");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file1 = null;
        fileEntryIterator0.current = file1;
        fileEntryIterator0.recursive = true;
        fileEntryIterator0.recursive = true;
        java.lang.Class<?> wildcardClass7 = fileEntryIterator0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test0072() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0072");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest1 = explodedArchive0.manifest;
        explodedArchive0.recursive = false;
        java.io.File file4 = null;
        explodedArchive0.root = file4;
        java.io.File file6 = explodedArchive0.root;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive7 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest8 = explodedArchive7.manifest;
        explodedArchive7.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive11 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest12 = explodedArchive11.manifest;
        explodedArchive11.recursive = false;
        java.util.jar.Manifest manifest15 = explodedArchive11.manifest;
        java.io.File file16 = explodedArchive11.manifestFile;
        java.io.File file17 = null;
        java.io.File file18 = explodedArchive11.getManifestFile(file17);
        explodedArchive7.manifestFile = file17;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive20 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest21 = explodedArchive20.manifest;
        explodedArchive20.recursive = false;
        java.util.jar.Manifest manifest24 = explodedArchive20.manifest;
        java.io.File file25 = explodedArchive20.manifestFile;
        java.io.File file26 = null;
        java.io.File file27 = explodedArchive20.getManifestFile(file26);
        explodedArchive7.manifestFile = file27;
        java.io.File file29 = explodedArchive0.getManifestFile(file27);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Spliterator<org.springframework.boot.loader.archive.Archive.Entry> entrySpliterator30 = explodedArchive0.spliterator();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file18.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file18.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file27.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file27.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file29.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file29.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
    }

    @Test
    public void test0073() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0073");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest1 = explodedArchive0.manifest;
        explodedArchive0.recursive = false;
        java.io.File file4 = null;
        explodedArchive0.root = file4;
        boolean boolean6 = explodedArchive0.recursive;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntry fileEntry7 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntry();
        java.lang.String str8 = fileEntry7.name;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator9 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file10 = null;
        fileEntryIterator9.current = file10;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive12 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest13 = explodedArchive12.manifest;
        explodedArchive12.recursive = false;
        java.util.jar.Manifest manifest16 = explodedArchive12.manifest;
        java.io.File file17 = explodedArchive12.manifestFile;
        java.io.File file18 = null;
        java.io.File file19 = explodedArchive12.getManifestFile(file18);
        java.util.Iterator<java.io.File> fileItor20 = fileEntryIterator9.listFiles(file19);
        java.io.File file21 = fileEntryIterator9.current;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator22 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file23 = null;
        fileEntryIterator22.current = file23;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive25 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest26 = explodedArchive25.manifest;
        explodedArchive25.recursive = false;
        java.util.jar.Manifest manifest29 = explodedArchive25.manifest;
        java.io.File file30 = explodedArchive25.manifestFile;
        java.io.File file31 = null;
        java.io.File file32 = explodedArchive25.getManifestFile(file31);
        java.util.Iterator<java.io.File> fileItor33 = fileEntryIterator22.listFiles(file32);
        java.util.ArrayDeque<java.util.Iterator<java.io.File>> fileItorQueue34 = new java.util.ArrayDeque<java.util.Iterator<java.io.File>>();
        boolean boolean35 = fileItorQueue34.add(fileItor33);
        fileEntryIterator9.stack = fileItorQueue34;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive37 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest38 = explodedArchive37.manifest;
        explodedArchive37.recursive = false;
        java.io.File file41 = null;
        explodedArchive37.root = file41;
        java.io.File file43 = explodedArchive37.root;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive44 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest45 = explodedArchive44.manifest;
        explodedArchive44.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive48 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest49 = explodedArchive48.manifest;
        explodedArchive48.recursive = false;
        java.util.jar.Manifest manifest52 = explodedArchive48.manifest;
        java.io.File file53 = explodedArchive48.manifestFile;
        java.io.File file54 = null;
        java.io.File file55 = explodedArchive48.getManifestFile(file54);
        explodedArchive44.manifestFile = file54;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive57 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest58 = explodedArchive57.manifest;
        explodedArchive57.recursive = false;
        java.util.jar.Manifest manifest61 = explodedArchive57.manifest;
        java.io.File file62 = explodedArchive57.manifestFile;
        java.io.File file63 = null;
        java.io.File file64 = explodedArchive57.getManifestFile(file63);
        explodedArchive44.manifestFile = file64;
        java.io.File file66 = explodedArchive37.getManifestFile(file64);
        fileEntryIterator9.root = file64;
        fileEntry7.file = file64;
        boolean boolean69 = fileEntry7.isDirectory();
        boolean boolean70 = fileEntry7.isDirectory();
        java.io.File file71 = fileEntry7.file;
        java.io.File file72 = fileEntry7.getFile();
        // The following exception was thrown during execution in test generation
        try {
            org.springframework.boot.loader.archive.Archive archive73 = explodedArchive0.getNestedArchive((org.springframework.boot.loader.archive.Archive.Entry) fileEntry7);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: File must exist");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file19.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file19.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file32.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file32.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file55.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file55.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file64.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file64.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file66.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file66.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file71.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file71.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file72.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file72.toString(), "META-INF/MANIFEST.MF");
    }

    @Test
    public void test0074() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0074");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest1 = explodedArchive0.manifest;
        explodedArchive0.recursive = false;
        java.io.File file4 = null;
        explodedArchive0.root = file4;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Spliterator<org.springframework.boot.loader.archive.Archive.Entry> entrySpliterator6 = explodedArchive0.spliterator();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest1);
    }

    @Test
    public void test0075() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0075");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file1 = null;
        fileEntryIterator0.current = file1;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive3 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest4 = explodedArchive3.manifest;
        explodedArchive3.recursive = false;
        java.util.jar.Manifest manifest7 = explodedArchive3.manifest;
        java.io.File file8 = explodedArchive3.manifestFile;
        java.io.File file9 = null;
        java.io.File file10 = explodedArchive3.getManifestFile(file9);
        java.util.Iterator<java.io.File> fileItor11 = fileEntryIterator0.listFiles(file10);
        java.io.File file12 = fileEntryIterator0.root;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive13 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.lang.String str14 = explodedArchive13.toString();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive15 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file16 = explodedArchive15.root;
        java.io.File file17 = null;
        explodedArchive15.manifestFile = file17;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive19 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest20 = explodedArchive19.manifest;
        explodedArchive19.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive23 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest24 = explodedArchive23.manifest;
        explodedArchive23.recursive = false;
        java.util.jar.Manifest manifest27 = explodedArchive23.manifest;
        java.io.File file28 = explodedArchive23.manifestFile;
        java.io.File file29 = null;
        java.io.File file30 = explodedArchive23.getManifestFile(file29);
        explodedArchive19.manifestFile = file29;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive32 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest33 = explodedArchive32.manifest;
        explodedArchive32.recursive = false;
        java.util.jar.Manifest manifest36 = explodedArchive32.manifest;
        java.io.File file37 = explodedArchive32.manifestFile;
        java.io.File file38 = null;
        java.io.File file39 = explodedArchive32.getManifestFile(file38);
        explodedArchive19.manifestFile = file39;
        java.io.File file41 = explodedArchive15.getManifestFile(file39);
        java.io.File file42 = explodedArchive13.getManifestFile(file39);
        fileEntryIterator0.root = file39;
        // The following exception was thrown during execution in test generation
        try {
            org.springframework.boot.loader.archive.ExplodedArchive explodedArchive45 = new org.springframework.boot.loader.archive.ExplodedArchive(file39, true);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid source folder META-INF/MANIFEST.MF");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str14 + "' != '" + "exploded archive" + "'", str14.equals("exploded archive"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file30.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file30.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file39.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file39.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file41.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file41.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file42.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file42.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
    }

    @Test
    public void test0076() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0076");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file1 = null;
        fileEntryIterator0.current = file1;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive3 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest4 = explodedArchive3.manifest;
        explodedArchive3.recursive = false;
        java.util.jar.Manifest manifest7 = explodedArchive3.manifest;
        java.io.File file8 = explodedArchive3.manifestFile;
        java.io.File file9 = null;
        java.io.File file10 = explodedArchive3.getManifestFile(file9);
        java.util.Iterator<java.io.File> fileItor11 = fileEntryIterator0.listFiles(file10);
        java.io.File file12 = fileEntryIterator0.current;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator13 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file14 = null;
        fileEntryIterator13.current = file14;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive16 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest17 = explodedArchive16.manifest;
        explodedArchive16.recursive = false;
        java.util.jar.Manifest manifest20 = explodedArchive16.manifest;
        java.io.File file21 = explodedArchive16.manifestFile;
        java.io.File file22 = null;
        java.io.File file23 = explodedArchive16.getManifestFile(file22);
        java.util.Iterator<java.io.File> fileItor24 = fileEntryIterator13.listFiles(file23);
        java.util.ArrayDeque<java.util.Iterator<java.io.File>> fileItorQueue25 = new java.util.ArrayDeque<java.util.Iterator<java.io.File>>();
        boolean boolean26 = fileItorQueue25.add(fileItor24);
        fileEntryIterator0.stack = fileItorQueue25;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive28 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest29 = explodedArchive28.manifest;
        explodedArchive28.recursive = false;
        java.io.File file32 = null;
        explodedArchive28.root = file32;
        java.io.File file34 = explodedArchive28.root;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive35 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest36 = explodedArchive35.manifest;
        explodedArchive35.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive39 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest40 = explodedArchive39.manifest;
        explodedArchive39.recursive = false;
        java.util.jar.Manifest manifest43 = explodedArchive39.manifest;
        java.io.File file44 = explodedArchive39.manifestFile;
        java.io.File file45 = null;
        java.io.File file46 = explodedArchive39.getManifestFile(file45);
        explodedArchive35.manifestFile = file45;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive48 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest49 = explodedArchive48.manifest;
        explodedArchive48.recursive = false;
        java.util.jar.Manifest manifest52 = explodedArchive48.manifest;
        java.io.File file53 = explodedArchive48.manifestFile;
        java.io.File file54 = null;
        java.io.File file55 = explodedArchive48.getManifestFile(file54);
        explodedArchive35.manifestFile = file55;
        java.io.File file57 = explodedArchive28.getManifestFile(file55);
        fileEntryIterator0.root = file55;
        // The following exception was thrown during execution in test generation
        try {
            org.springframework.boot.loader.archive.Archive.Entry entry59 = fileEntryIterator0.next();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file23.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file23.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file46.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file46.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file55.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file55.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file57.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file57.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
    }

    @Test
    public void test0077() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0077");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        boolean boolean1 = fileEntryIterator0.hasNext();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator2 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator3 = entryComparator2.reversed();
        java.util.Comparator<java.io.File> fileComparator4 = fileComparator3.reversed();
        fileEntryIterator0.entryComparator = fileComparator4;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive6 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file7 = explodedArchive6.root;
        java.io.File file8 = null;
        explodedArchive6.manifestFile = file8;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive10 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest11 = explodedArchive10.manifest;
        explodedArchive10.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive14 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest15 = explodedArchive14.manifest;
        explodedArchive14.recursive = false;
        java.util.jar.Manifest manifest18 = explodedArchive14.manifest;
        java.io.File file19 = explodedArchive14.manifestFile;
        java.io.File file20 = null;
        java.io.File file21 = explodedArchive14.getManifestFile(file20);
        explodedArchive10.manifestFile = file20;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive23 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest24 = explodedArchive23.manifest;
        explodedArchive23.recursive = false;
        java.util.jar.Manifest manifest27 = explodedArchive23.manifest;
        java.io.File file28 = explodedArchive23.manifestFile;
        java.io.File file29 = null;
        java.io.File file30 = explodedArchive23.getManifestFile(file29);
        explodedArchive10.manifestFile = file30;
        java.io.File file32 = explodedArchive6.getManifestFile(file30);
        java.util.Iterator<java.io.File> fileItor33 = fileEntryIterator0.listFiles(file32);
        // The following exception was thrown during execution in test generation
        try {
            org.springframework.boot.loader.archive.ExplodedArchive explodedArchive35 = new org.springframework.boot.loader.archive.ExplodedArchive(file32, false);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid source folder META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file21.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file21.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file30.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file30.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file32.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file32.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor33);
    }

    @Test
    public void test0078() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0078");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest1 = explodedArchive0.manifest;
        explodedArchive0.recursive = false;
        java.io.File file4 = null;
        explodedArchive0.root = file4;
        java.io.File file6 = explodedArchive0.root;
        java.util.jar.Manifest manifest7 = null;
        explodedArchive0.manifest = manifest7;
        explodedArchive0.recursive = false;
        // The following exception was thrown during execution in test generation
        try {
            java.util.jar.Manifest manifest11 = explodedArchive0.getManifest();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file6);
    }

    @Test
    public void test0079() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0079");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        boolean boolean1 = fileEntryIterator0.hasNext();
        java.io.File file2 = fileEntryIterator0.root;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator3 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file4 = null;
        fileEntryIterator3.current = file4;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive6 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest7 = explodedArchive6.manifest;
        explodedArchive6.recursive = false;
        java.util.jar.Manifest manifest10 = explodedArchive6.manifest;
        java.io.File file11 = explodedArchive6.manifestFile;
        java.io.File file12 = null;
        java.io.File file13 = explodedArchive6.getManifestFile(file12);
        java.util.Iterator<java.io.File> fileItor14 = fileEntryIterator3.listFiles(file13);
        java.io.File file15 = fileEntryIterator3.current;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator16 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file17 = null;
        fileEntryIterator16.current = file17;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive19 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest20 = explodedArchive19.manifest;
        explodedArchive19.recursive = false;
        java.util.jar.Manifest manifest23 = explodedArchive19.manifest;
        java.io.File file24 = explodedArchive19.manifestFile;
        java.io.File file25 = null;
        java.io.File file26 = explodedArchive19.getManifestFile(file25);
        java.util.Iterator<java.io.File> fileItor27 = fileEntryIterator16.listFiles(file26);
        java.util.ArrayDeque<java.util.Iterator<java.io.File>> fileItorQueue28 = new java.util.ArrayDeque<java.util.Iterator<java.io.File>>();
        boolean boolean29 = fileItorQueue28.add(fileItor27);
        fileEntryIterator3.stack = fileItorQueue28;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive31 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest32 = explodedArchive31.manifest;
        explodedArchive31.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive35 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest36 = explodedArchive35.manifest;
        explodedArchive35.recursive = false;
        java.util.jar.Manifest manifest39 = explodedArchive35.manifest;
        java.io.File file40 = explodedArchive35.manifestFile;
        java.io.File file41 = null;
        java.io.File file42 = explodedArchive35.getManifestFile(file41);
        explodedArchive31.manifestFile = file41;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive44 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest45 = explodedArchive44.manifest;
        explodedArchive44.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive48 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest49 = explodedArchive48.manifest;
        explodedArchive48.recursive = false;
        java.util.jar.Manifest manifest52 = explodedArchive48.manifest;
        java.io.File file53 = explodedArchive48.manifestFile;
        java.io.File file54 = null;
        java.io.File file55 = explodedArchive48.getManifestFile(file54);
        explodedArchive44.manifestFile = file54;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive57 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest58 = explodedArchive57.manifest;
        explodedArchive57.recursive = false;
        java.util.jar.Manifest manifest61 = explodedArchive57.manifest;
        java.io.File file62 = explodedArchive57.manifestFile;
        java.io.File file63 = null;
        java.io.File file64 = explodedArchive57.getManifestFile(file63);
        explodedArchive44.manifestFile = file64;
        explodedArchive31.root = file64;
        java.util.Iterator<java.io.File> fileItor67 = fileEntryIterator3.listFiles(file64);
        java.util.Comparator<java.io.File> fileComparator68 = fileEntryIterator3.entryComparator;
        fileEntryIterator0.entryComparator = fileComparator68;
        // The following exception was thrown during execution in test generation
        try {
            fileEntryIterator0.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: remove");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file13.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file13.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file26.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file26.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file42.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file42.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file55.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file55.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file64.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file64.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator68);
    }

    @Test
    public void test0080() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0080");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        boolean boolean1 = fileEntryIterator0.recursive;
        java.io.File file2 = fileEntryIterator0.current;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator3 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file4 = null;
        fileEntryIterator3.current = file4;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive6 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest7 = explodedArchive6.manifest;
        explodedArchive6.recursive = false;
        java.util.jar.Manifest manifest10 = explodedArchive6.manifest;
        java.io.File file11 = explodedArchive6.manifestFile;
        java.io.File file12 = null;
        java.io.File file13 = explodedArchive6.getManifestFile(file12);
        java.util.Iterator<java.io.File> fileItor14 = fileEntryIterator3.listFiles(file13);
        java.io.File file15 = fileEntryIterator3.root;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive16 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.lang.String str17 = explodedArchive16.toString();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive18 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file19 = explodedArchive18.root;
        java.io.File file20 = null;
        explodedArchive18.manifestFile = file20;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive22 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest23 = explodedArchive22.manifest;
        explodedArchive22.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive26 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest27 = explodedArchive26.manifest;
        explodedArchive26.recursive = false;
        java.util.jar.Manifest manifest30 = explodedArchive26.manifest;
        java.io.File file31 = explodedArchive26.manifestFile;
        java.io.File file32 = null;
        java.io.File file33 = explodedArchive26.getManifestFile(file32);
        explodedArchive22.manifestFile = file32;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive35 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest36 = explodedArchive35.manifest;
        explodedArchive35.recursive = false;
        java.util.jar.Manifest manifest39 = explodedArchive35.manifest;
        java.io.File file40 = explodedArchive35.manifestFile;
        java.io.File file41 = null;
        java.io.File file42 = explodedArchive35.getManifestFile(file41);
        explodedArchive22.manifestFile = file42;
        java.io.File file44 = explodedArchive18.getManifestFile(file42);
        java.io.File file45 = explodedArchive16.getManifestFile(file42);
        fileEntryIterator3.root = file42;
        java.util.Iterator<java.io.File> fileItor47 = fileEntryIterator0.listFiles(file42);
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator48 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        boolean boolean49 = fileEntryIterator48.hasNext();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator50 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator51 = entryComparator50.reversed();
        java.util.Comparator<java.io.File> fileComparator52 = fileComparator51.reversed();
        fileEntryIterator48.entryComparator = fileComparator52;
        java.util.Comparator<java.io.File> fileComparator54 = fileEntryIterator48.entryComparator;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator55 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator56 = entryComparator55.reversed();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator57 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator58 = entryComparator57.reversed();
        java.util.Comparator<java.io.File> fileComparator59 = entryComparator55.thenComparing(fileComparator58);
        java.util.Comparator<java.io.File> fileComparator60 = fileComparator54.thenComparing(fileComparator58);
        fileEntryIterator0.entryComparator = fileComparator58;
        java.util.Comparator<java.io.File> fileComparator62 = fileComparator58.reversed();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file13.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file13.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str17 + "' != '" + "exploded archive" + "'", str17.equals("exploded archive"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file33.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file33.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file42.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file42.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file44.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file44.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file45.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file45.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator62);
    }

    @Test
    public void test0081() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0081");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file1 = null;
        fileEntryIterator0.current = file1;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive3 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest4 = explodedArchive3.manifest;
        explodedArchive3.recursive = false;
        java.util.jar.Manifest manifest7 = explodedArchive3.manifest;
        java.io.File file8 = explodedArchive3.manifestFile;
        java.io.File file9 = null;
        java.io.File file10 = explodedArchive3.getManifestFile(file9);
        java.util.Iterator<java.io.File> fileItor11 = fileEntryIterator0.listFiles(file10);
        boolean boolean12 = fileEntryIterator0.hasNext();
        java.util.Comparator<java.io.File> fileComparator13 = fileEntryIterator0.entryComparator;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator14 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file15 = null;
        fileEntryIterator14.current = file15;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive17 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest18 = explodedArchive17.manifest;
        explodedArchive17.recursive = false;
        java.util.jar.Manifest manifest21 = explodedArchive17.manifest;
        java.io.File file22 = explodedArchive17.manifestFile;
        java.io.File file23 = null;
        java.io.File file24 = explodedArchive17.getManifestFile(file23);
        java.util.Iterator<java.io.File> fileItor25 = fileEntryIterator14.listFiles(file24);
        java.io.File file26 = fileEntryIterator14.current;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator27 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file28 = null;
        fileEntryIterator27.current = file28;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive30 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest31 = explodedArchive30.manifest;
        explodedArchive30.recursive = false;
        java.util.jar.Manifest manifest34 = explodedArchive30.manifest;
        java.io.File file35 = explodedArchive30.manifestFile;
        java.io.File file36 = null;
        java.io.File file37 = explodedArchive30.getManifestFile(file36);
        java.util.Iterator<java.io.File> fileItor38 = fileEntryIterator27.listFiles(file37);
        java.util.ArrayDeque<java.util.Iterator<java.io.File>> fileItorQueue39 = new java.util.ArrayDeque<java.util.Iterator<java.io.File>>();
        boolean boolean40 = fileItorQueue39.add(fileItor38);
        fileEntryIterator14.stack = fileItorQueue39;
        fileEntryIterator0.stack = fileItorQueue39;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator43 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file44 = null;
        fileEntryIterator43.current = file44;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive46 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.lang.String str47 = explodedArchive46.toString();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive48 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file49 = explodedArchive48.root;
        java.io.File file50 = null;
        explodedArchive48.manifestFile = file50;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive52 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest53 = explodedArchive52.manifest;
        explodedArchive52.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive56 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest57 = explodedArchive56.manifest;
        explodedArchive56.recursive = false;
        java.util.jar.Manifest manifest60 = explodedArchive56.manifest;
        java.io.File file61 = explodedArchive56.manifestFile;
        java.io.File file62 = null;
        java.io.File file63 = explodedArchive56.getManifestFile(file62);
        explodedArchive52.manifestFile = file62;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive65 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest66 = explodedArchive65.manifest;
        explodedArchive65.recursive = false;
        java.util.jar.Manifest manifest69 = explodedArchive65.manifest;
        java.io.File file70 = explodedArchive65.manifestFile;
        java.io.File file71 = null;
        java.io.File file72 = explodedArchive65.getManifestFile(file71);
        explodedArchive52.manifestFile = file72;
        java.io.File file74 = explodedArchive48.getManifestFile(file72);
        java.io.File file75 = explodedArchive46.getManifestFile(file72);
        fileEntryIterator43.root = file72;
        fileEntryIterator0.root = file72;
        // The following exception was thrown during execution in test generation
        try {
            org.springframework.boot.loader.archive.Archive.Entry entry78 = fileEntryIterator0.next();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file24.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file24.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file37.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file37.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str47 + "' != '" + "exploded archive" + "'", str47.equals("exploded archive"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file63.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file63.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file72.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file72.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file74.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file74.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file75);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file75.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file75.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
    }

    @Test
    public void test0082() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0082");
        java.util.Set<java.lang.String> strSet0 = null;
        org.springframework.boot.loader.archive.ExplodedArchive.SKIPPED_NAMES = strSet0;
    }

    @Test
    public void test0083() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0083");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator1 = entryComparator0.reversed();
        java.util.Comparator<java.io.File> fileComparator2 = entryComparator0.reversed();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator3 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        boolean boolean4 = fileEntryIterator3.hasNext();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator5 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator6 = entryComparator5.reversed();
        java.util.Comparator<java.io.File> fileComparator7 = fileComparator6.reversed();
        fileEntryIterator3.entryComparator = fileComparator7;
        java.util.Comparator<java.io.File> fileComparator9 = fileEntryIterator3.entryComparator;
        java.util.Comparator<java.io.File> fileComparator10 = entryComparator0.thenComparing(fileComparator9);
        java.util.Comparator<java.io.File> fileComparator11 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Comparator<java.io.File> fileComparator12 = entryComparator0.thenComparing(fileComparator11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator10);
    }

    @Test
    public void test0084() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0084");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest1 = explodedArchive0.manifest;
        explodedArchive0.recursive = false;
        java.io.File file4 = null;
        explodedArchive0.root = file4;
        java.io.File file6 = explodedArchive0.root;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive7 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest8 = explodedArchive7.manifest;
        explodedArchive7.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive11 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest12 = explodedArchive11.manifest;
        explodedArchive11.recursive = false;
        java.util.jar.Manifest manifest15 = explodedArchive11.manifest;
        java.io.File file16 = explodedArchive11.manifestFile;
        java.io.File file17 = null;
        java.io.File file18 = explodedArchive11.getManifestFile(file17);
        explodedArchive7.manifestFile = file17;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive20 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest21 = explodedArchive20.manifest;
        explodedArchive20.recursive = false;
        java.util.jar.Manifest manifest24 = explodedArchive20.manifest;
        java.io.File file25 = explodedArchive20.manifestFile;
        java.io.File file26 = null;
        java.io.File file27 = explodedArchive20.getManifestFile(file26);
        explodedArchive7.manifestFile = file27;
        java.io.File file29 = explodedArchive0.getManifestFile(file27);
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntry fileEntry30 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntry();
        java.lang.String str31 = fileEntry30.name;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator32 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file33 = null;
        fileEntryIterator32.current = file33;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive35 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.lang.String str36 = explodedArchive35.toString();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive37 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file38 = explodedArchive37.root;
        java.io.File file39 = null;
        explodedArchive37.manifestFile = file39;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive41 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest42 = explodedArchive41.manifest;
        explodedArchive41.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive45 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest46 = explodedArchive45.manifest;
        explodedArchive45.recursive = false;
        java.util.jar.Manifest manifest49 = explodedArchive45.manifest;
        java.io.File file50 = explodedArchive45.manifestFile;
        java.io.File file51 = null;
        java.io.File file52 = explodedArchive45.getManifestFile(file51);
        explodedArchive41.manifestFile = file51;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive54 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest55 = explodedArchive54.manifest;
        explodedArchive54.recursive = false;
        java.util.jar.Manifest manifest58 = explodedArchive54.manifest;
        java.io.File file59 = explodedArchive54.manifestFile;
        java.io.File file60 = null;
        java.io.File file61 = explodedArchive54.getManifestFile(file60);
        explodedArchive41.manifestFile = file61;
        java.io.File file63 = explodedArchive37.getManifestFile(file61);
        java.io.File file64 = explodedArchive35.getManifestFile(file61);
        fileEntryIterator32.root = file61;
        fileEntry30.file = file61;
        java.io.File file67 = fileEntry30.file;
        explodedArchive0.root = file67;
        java.io.File file69 = explodedArchive0.manifestFile;
        java.io.File file70 = explodedArchive0.root;
        // The following exception was thrown during execution in test generation
        try {
            org.springframework.boot.loader.archive.ExplodedArchive explodedArchive71 = new org.springframework.boot.loader.archive.ExplodedArchive(file70);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid source folder META-INF/MANIFEST.MF");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file18.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file18.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file27.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file27.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file29.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file29.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str36 + "' != '" + "exploded archive" + "'", str36.equals("exploded archive"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file52.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file52.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file61.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file61.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file63.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file63.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file64.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file64.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file67.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file67.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file70.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file70.toString(), "META-INF/MANIFEST.MF");
    }

    @Test
    public void test0085() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0085");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        boolean boolean1 = fileEntryIterator0.hasNext();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator2 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator3 = entryComparator2.reversed();
        java.util.Comparator<java.io.File> fileComparator4 = fileComparator3.reversed();
        fileEntryIterator0.entryComparator = fileComparator4;
        // The following exception was thrown during execution in test generation
        try {
            fileEntryIterator0.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: remove");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator4);
    }

    @Test
    public void test0086() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0086");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        boolean boolean1 = fileEntryIterator0.hasNext();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator2 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator3 = entryComparator2.reversed();
        java.util.Comparator<java.io.File> fileComparator4 = fileComparator3.reversed();
        fileEntryIterator0.entryComparator = fileComparator4;
        java.util.Comparator<java.io.File> fileComparator6 = fileEntryIterator0.entryComparator;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator7 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator8 = entryComparator7.reversed();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator9 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator10 = entryComparator9.reversed();
        java.util.Comparator<java.io.File> fileComparator11 = entryComparator7.thenComparing(fileComparator10);
        java.util.Comparator<java.io.File> fileComparator12 = fileComparator6.thenComparing(fileComparator10);
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator13 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator14 = entryComparator13.reversed();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator15 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator16 = entryComparator15.reversed();
        java.util.Comparator<java.io.File> fileComparator17 = entryComparator13.thenComparing(fileComparator16);
        java.util.Comparator<java.io.File> fileComparator18 = fileComparator12.thenComparing((java.util.Comparator<java.io.File>) entryComparator13);
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator19 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file20 = null;
        fileEntryIterator19.current = file20;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive22 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest23 = explodedArchive22.manifest;
        explodedArchive22.recursive = false;
        java.util.jar.Manifest manifest26 = explodedArchive22.manifest;
        java.io.File file27 = explodedArchive22.manifestFile;
        java.io.File file28 = null;
        java.io.File file29 = explodedArchive22.getManifestFile(file28);
        java.util.Iterator<java.io.File> fileItor30 = fileEntryIterator19.listFiles(file29);
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator31 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file32 = null;
        fileEntryIterator31.current = file32;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive34 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest35 = explodedArchive34.manifest;
        explodedArchive34.recursive = false;
        java.util.jar.Manifest manifest38 = explodedArchive34.manifest;
        java.io.File file39 = explodedArchive34.manifestFile;
        java.io.File file40 = null;
        java.io.File file41 = explodedArchive34.getManifestFile(file40);
        java.util.Iterator<java.io.File> fileItor42 = fileEntryIterator31.listFiles(file41);
        java.io.File file43 = fileEntryIterator31.current;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator44 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file45 = null;
        fileEntryIterator44.current = file45;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive47 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest48 = explodedArchive47.manifest;
        explodedArchive47.recursive = false;
        java.util.jar.Manifest manifest51 = explodedArchive47.manifest;
        java.io.File file52 = explodedArchive47.manifestFile;
        java.io.File file53 = null;
        java.io.File file54 = explodedArchive47.getManifestFile(file53);
        java.util.Iterator<java.io.File> fileItor55 = fileEntryIterator44.listFiles(file54);
        java.util.ArrayDeque<java.util.Iterator<java.io.File>> fileItorQueue56 = new java.util.ArrayDeque<java.util.Iterator<java.io.File>>();
        boolean boolean57 = fileItorQueue56.add(fileItor55);
        fileEntryIterator31.stack = fileItorQueue56;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive59 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest60 = explodedArchive59.manifest;
        explodedArchive59.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive63 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest64 = explodedArchive63.manifest;
        explodedArchive63.recursive = false;
        java.util.jar.Manifest manifest67 = explodedArchive63.manifest;
        java.io.File file68 = explodedArchive63.manifestFile;
        java.io.File file69 = null;
        java.io.File file70 = explodedArchive63.getManifestFile(file69);
        explodedArchive59.manifestFile = file69;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive72 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest73 = explodedArchive72.manifest;
        explodedArchive72.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive76 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest77 = explodedArchive76.manifest;
        explodedArchive76.recursive = false;
        java.util.jar.Manifest manifest80 = explodedArchive76.manifest;
        java.io.File file81 = explodedArchive76.manifestFile;
        java.io.File file82 = null;
        java.io.File file83 = explodedArchive76.getManifestFile(file82);
        explodedArchive72.manifestFile = file82;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive85 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest86 = explodedArchive85.manifest;
        explodedArchive85.recursive = false;
        java.util.jar.Manifest manifest89 = explodedArchive85.manifest;
        java.io.File file90 = explodedArchive85.manifestFile;
        java.io.File file91 = null;
        java.io.File file92 = explodedArchive85.getManifestFile(file91);
        explodedArchive72.manifestFile = file92;
        explodedArchive59.root = file92;
        java.util.Iterator<java.io.File> fileItor95 = fileEntryIterator31.listFiles(file92);
        java.util.Comparator<java.io.File> fileComparator96 = fileEntryIterator31.entryComparator;
        fileEntryIterator19.entryComparator = fileComparator96;
        java.util.Comparator<java.io.File> fileComparator98 = fileComparator18.thenComparing(fileComparator96);
        java.util.Comparator<java.io.File> fileComparator99 = fileComparator98.reversed();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file29.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file29.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file41.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file41.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file54.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file54.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file70.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file70.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest73);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest77);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest80);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file81);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file83);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file83.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file83.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest86);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest89);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file90);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file92);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file92.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file92.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor95);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator96);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator98);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator99);
    }

    @Test
    public void test0087() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0087");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest1 = explodedArchive0.manifest;
        java.util.jar.Manifest manifest2 = null;
        explodedArchive0.manifest = manifest2;
        java.io.File file4 = explodedArchive0.root;
        java.util.jar.Manifest manifest5 = null;
        explodedArchive0.manifest = manifest5;
        // The following exception was thrown during execution in test generation
        try {
            java.net.URL uRL7 = explodedArchive0.getUrl();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file4);
    }

    @Test
    public void test0088() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0088");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest1 = explodedArchive0.manifest;
        explodedArchive0.recursive = false;
        java.io.File file4 = null;
        explodedArchive0.root = file4;
        java.io.File file6 = explodedArchive0.root;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive7 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest8 = explodedArchive7.manifest;
        explodedArchive7.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive11 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest12 = explodedArchive11.manifest;
        explodedArchive11.recursive = false;
        java.util.jar.Manifest manifest15 = explodedArchive11.manifest;
        java.io.File file16 = explodedArchive11.manifestFile;
        java.io.File file17 = null;
        java.io.File file18 = explodedArchive11.getManifestFile(file17);
        explodedArchive7.manifestFile = file17;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive20 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest21 = explodedArchive20.manifest;
        explodedArchive20.recursive = false;
        java.util.jar.Manifest manifest24 = explodedArchive20.manifest;
        java.io.File file25 = explodedArchive20.manifestFile;
        java.io.File file26 = null;
        java.io.File file27 = explodedArchive20.getManifestFile(file26);
        explodedArchive7.manifestFile = file27;
        java.io.File file29 = explodedArchive0.getManifestFile(file27);
        java.io.File file30 = explodedArchive0.manifestFile;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Spliterator<org.springframework.boot.loader.archive.Archive.Entry> entrySpliterator31 = explodedArchive0.spliterator();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file18.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file18.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file27.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file27.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file29.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file29.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file30);
    }

    @Test
    public void test0089() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0089");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        boolean boolean1 = fileEntryIterator0.hasNext();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator2 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator3 = entryComparator2.reversed();
        java.util.Comparator<java.io.File> fileComparator4 = fileComparator3.reversed();
        fileEntryIterator0.entryComparator = fileComparator4;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive6 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file7 = explodedArchive6.root;
        java.io.File file8 = null;
        explodedArchive6.manifestFile = file8;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive10 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest11 = explodedArchive10.manifest;
        explodedArchive10.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive14 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest15 = explodedArchive14.manifest;
        explodedArchive14.recursive = false;
        java.util.jar.Manifest manifest18 = explodedArchive14.manifest;
        java.io.File file19 = explodedArchive14.manifestFile;
        java.io.File file20 = null;
        java.io.File file21 = explodedArchive14.getManifestFile(file20);
        explodedArchive10.manifestFile = file20;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive23 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest24 = explodedArchive23.manifest;
        explodedArchive23.recursive = false;
        java.util.jar.Manifest manifest27 = explodedArchive23.manifest;
        java.io.File file28 = explodedArchive23.manifestFile;
        java.io.File file29 = null;
        java.io.File file30 = explodedArchive23.getManifestFile(file29);
        explodedArchive10.manifestFile = file30;
        java.io.File file32 = explodedArchive6.getManifestFile(file30);
        java.util.Iterator<java.io.File> fileItor33 = fileEntryIterator0.listFiles(file32);
        boolean boolean34 = fileEntryIterator0.recursive;
        java.util.Deque<java.util.Iterator<java.io.File>> fileItorQueue35 = fileEntryIterator0.stack;
        fileEntryIterator0.recursive = false;
        // The following exception was thrown during execution in test generation
        try {
            fileEntryIterator0.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: remove");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file21.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file21.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file30.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file30.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file32.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file32.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItorQueue35);
    }

    @Test
    public void test0090() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0090");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file1 = null;
        fileEntryIterator0.current = file1;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive3 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest4 = explodedArchive3.manifest;
        explodedArchive3.recursive = false;
        java.util.jar.Manifest manifest7 = explodedArchive3.manifest;
        java.io.File file8 = explodedArchive3.manifestFile;
        java.io.File file9 = null;
        java.io.File file10 = explodedArchive3.getManifestFile(file9);
        java.util.Iterator<java.io.File> fileItor11 = fileEntryIterator0.listFiles(file10);
        java.io.File file12 = fileEntryIterator0.current;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator13 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file14 = null;
        fileEntryIterator13.current = file14;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive16 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest17 = explodedArchive16.manifest;
        explodedArchive16.recursive = false;
        java.util.jar.Manifest manifest20 = explodedArchive16.manifest;
        java.io.File file21 = explodedArchive16.manifestFile;
        java.io.File file22 = null;
        java.io.File file23 = explodedArchive16.getManifestFile(file22);
        java.util.Iterator<java.io.File> fileItor24 = fileEntryIterator13.listFiles(file23);
        java.util.ArrayDeque<java.util.Iterator<java.io.File>> fileItorQueue25 = new java.util.ArrayDeque<java.util.Iterator<java.io.File>>();
        boolean boolean26 = fileItorQueue25.add(fileItor24);
        fileEntryIterator0.stack = fileItorQueue25;
        java.io.File file28 = fileEntryIterator0.poll();
        boolean boolean29 = fileEntryIterator0.recursive;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file23.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file23.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
    }

    @Test
    public void test0091() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0091");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest1 = explodedArchive0.manifest;
        explodedArchive0.recursive = false;
        java.io.File file4 = null;
        explodedArchive0.root = file4;
        java.io.File file6 = explodedArchive0.root;
        org.springframework.boot.loader.archive.Archive.EntryFilter entryFilter7 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<org.springframework.boot.loader.archive.Archive> archiveList8 = explodedArchive0.getNestedArchives(entryFilter7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file6);
    }

    @Test
    public void test0092() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0092");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        boolean boolean1 = fileEntryIterator0.recursive;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator2 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        boolean boolean3 = fileEntryIterator2.hasNext();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator4 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator5 = entryComparator4.reversed();
        java.util.Comparator<java.io.File> fileComparator6 = fileComparator5.reversed();
        fileEntryIterator2.entryComparator = fileComparator6;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive8 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file9 = explodedArchive8.root;
        java.io.File file10 = null;
        explodedArchive8.manifestFile = file10;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive12 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest13 = explodedArchive12.manifest;
        explodedArchive12.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive16 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest17 = explodedArchive16.manifest;
        explodedArchive16.recursive = false;
        java.util.jar.Manifest manifest20 = explodedArchive16.manifest;
        java.io.File file21 = explodedArchive16.manifestFile;
        java.io.File file22 = null;
        java.io.File file23 = explodedArchive16.getManifestFile(file22);
        explodedArchive12.manifestFile = file22;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive25 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest26 = explodedArchive25.manifest;
        explodedArchive25.recursive = false;
        java.util.jar.Manifest manifest29 = explodedArchive25.manifest;
        java.io.File file30 = explodedArchive25.manifestFile;
        java.io.File file31 = null;
        java.io.File file32 = explodedArchive25.getManifestFile(file31);
        explodedArchive12.manifestFile = file32;
        java.io.File file34 = explodedArchive8.getManifestFile(file32);
        java.util.Iterator<java.io.File> fileItor35 = fileEntryIterator2.listFiles(file34);
        fileEntryIterator0.root = file34;
        // The following exception was thrown during execution in test generation
        try {
            org.springframework.boot.loader.archive.ExplodedArchive explodedArchive38 = new org.springframework.boot.loader.archive.ExplodedArchive(file34, true);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid source folder META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file23.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file23.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file32.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file32.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file34.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file34.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor35);
    }

    @Test
    public void test0093() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0093");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        boolean boolean1 = fileEntryIterator0.recursive;
        java.io.File file2 = fileEntryIterator0.current;
        boolean boolean3 = fileEntryIterator0.hasNext();
        boolean boolean4 = fileEntryIterator0.recursive;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator5 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator6 = entryComparator5.reversed();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator7 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator8 = entryComparator7.reversed();
        java.util.Comparator<java.io.File> fileComparator9 = entryComparator5.thenComparing(fileComparator8);
        fileEntryIterator0.entryComparator = fileComparator9;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator11 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file12 = null;
        fileEntryIterator11.current = file12;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive14 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest15 = explodedArchive14.manifest;
        explodedArchive14.recursive = false;
        java.util.jar.Manifest manifest18 = explodedArchive14.manifest;
        java.io.File file19 = explodedArchive14.manifestFile;
        java.io.File file20 = null;
        java.io.File file21 = explodedArchive14.getManifestFile(file20);
        java.util.Iterator<java.io.File> fileItor22 = fileEntryIterator11.listFiles(file21);
        java.io.File file23 = fileEntryIterator11.root;
        java.io.File file24 = fileEntryIterator11.root;
        java.io.File file25 = fileEntryIterator11.current;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator26 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        boolean boolean27 = fileEntryIterator26.hasNext();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator28 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator29 = entryComparator28.reversed();
        java.util.Comparator<java.io.File> fileComparator30 = fileComparator29.reversed();
        fileEntryIterator26.entryComparator = fileComparator30;
        java.util.Comparator<java.io.File> fileComparator32 = fileEntryIterator26.entryComparator;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator33 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator34 = entryComparator33.reversed();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator35 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator36 = entryComparator35.reversed();
        java.util.Comparator<java.io.File> fileComparator37 = entryComparator33.thenComparing(fileComparator36);
        java.util.Comparator<java.io.File> fileComparator38 = fileComparator32.thenComparing(fileComparator36);
        fileEntryIterator11.entryComparator = fileComparator32;
        java.util.Comparator<java.io.File> fileComparator40 = fileComparator9.thenComparing(fileComparator32);
        java.util.Comparator<java.io.File> fileComparator41 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Comparator<java.io.File> fileComparator42 = fileComparator40.thenComparing(fileComparator41);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file21.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file21.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator40);
    }

    @Test
    public void test0094() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0094");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file1 = null;
        fileEntryIterator0.current = file1;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive3 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest4 = explodedArchive3.manifest;
        explodedArchive3.recursive = false;
        java.util.jar.Manifest manifest7 = explodedArchive3.manifest;
        java.io.File file8 = explodedArchive3.manifestFile;
        java.io.File file9 = null;
        java.io.File file10 = explodedArchive3.getManifestFile(file9);
        java.util.Iterator<java.io.File> fileItor11 = fileEntryIterator0.listFiles(file10);
        java.io.File file12 = fileEntryIterator0.root;
        java.io.File file13 = fileEntryIterator0.root;
        java.util.Deque<java.util.Iterator<java.io.File>> fileItorQueue14 = fileEntryIterator0.stack;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator15 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator16 = entryComparator15.reversed();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator17 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file18 = null;
        fileEntryIterator17.current = file18;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive20 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest21 = explodedArchive20.manifest;
        explodedArchive20.recursive = false;
        java.util.jar.Manifest manifest24 = explodedArchive20.manifest;
        java.io.File file25 = explodedArchive20.manifestFile;
        java.io.File file26 = null;
        java.io.File file27 = explodedArchive20.getManifestFile(file26);
        java.util.Iterator<java.io.File> fileItor28 = fileEntryIterator17.listFiles(file27);
        java.io.File file29 = fileEntryIterator17.current;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator30 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file31 = null;
        fileEntryIterator30.current = file31;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive33 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest34 = explodedArchive33.manifest;
        explodedArchive33.recursive = false;
        java.util.jar.Manifest manifest37 = explodedArchive33.manifest;
        java.io.File file38 = explodedArchive33.manifestFile;
        java.io.File file39 = null;
        java.io.File file40 = explodedArchive33.getManifestFile(file39);
        java.util.Iterator<java.io.File> fileItor41 = fileEntryIterator30.listFiles(file40);
        java.util.ArrayDeque<java.util.Iterator<java.io.File>> fileItorQueue42 = new java.util.ArrayDeque<java.util.Iterator<java.io.File>>();
        boolean boolean43 = fileItorQueue42.add(fileItor41);
        fileEntryIterator17.stack = fileItorQueue42;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive45 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest46 = explodedArchive45.manifest;
        explodedArchive45.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive49 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest50 = explodedArchive49.manifest;
        explodedArchive49.recursive = false;
        java.util.jar.Manifest manifest53 = explodedArchive49.manifest;
        java.io.File file54 = explodedArchive49.manifestFile;
        java.io.File file55 = null;
        java.io.File file56 = explodedArchive49.getManifestFile(file55);
        explodedArchive45.manifestFile = file55;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive58 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest59 = explodedArchive58.manifest;
        explodedArchive58.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive62 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest63 = explodedArchive62.manifest;
        explodedArchive62.recursive = false;
        java.util.jar.Manifest manifest66 = explodedArchive62.manifest;
        java.io.File file67 = explodedArchive62.manifestFile;
        java.io.File file68 = null;
        java.io.File file69 = explodedArchive62.getManifestFile(file68);
        explodedArchive58.manifestFile = file68;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive71 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest72 = explodedArchive71.manifest;
        explodedArchive71.recursive = false;
        java.util.jar.Manifest manifest75 = explodedArchive71.manifest;
        java.io.File file76 = explodedArchive71.manifestFile;
        java.io.File file77 = null;
        java.io.File file78 = explodedArchive71.getManifestFile(file77);
        explodedArchive58.manifestFile = file78;
        explodedArchive45.root = file78;
        java.util.Iterator<java.io.File> fileItor81 = fileEntryIterator17.listFiles(file78);
        java.util.Comparator<java.io.File> fileComparator82 = fileEntryIterator17.entryComparator;
        java.util.Comparator<java.io.File> fileComparator83 = entryComparator15.thenComparing(fileComparator82);
        fileEntryIterator0.entryComparator = fileComparator83;
        // The following exception was thrown during execution in test generation
        try {
            fileEntryIterator0.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: remove");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItorQueue14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file27.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file27.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file40.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file40.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file56.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file56.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file69.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file69.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest75);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file76);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file78);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file78.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file78.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor81);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator82);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator83);
    }

    @Test
    public void test0095() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0095");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file1 = null;
        fileEntryIterator0.current = file1;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive3 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest4 = explodedArchive3.manifest;
        explodedArchive3.recursive = false;
        java.util.jar.Manifest manifest7 = explodedArchive3.manifest;
        java.io.File file8 = explodedArchive3.manifestFile;
        java.io.File file9 = null;
        java.io.File file10 = explodedArchive3.getManifestFile(file9);
        java.util.Iterator<java.io.File> fileItor11 = fileEntryIterator0.listFiles(file10);
        java.io.File file12 = fileEntryIterator0.current;
        // The following exception was thrown during execution in test generation
        try {
            org.springframework.boot.loader.archive.Archive.Entry entry13 = fileEntryIterator0.next();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file12);
    }

    @Test
    public void test0096() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0096");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest1 = explodedArchive0.manifest;
        explodedArchive0.recursive = false;
        java.io.File file4 = null;
        explodedArchive0.root = file4;
        java.io.File file6 = explodedArchive0.root;
        java.util.jar.Manifest manifest7 = null;
        explodedArchive0.manifest = manifest7;
        explodedArchive0.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator11 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file12 = null;
        fileEntryIterator11.current = file12;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive14 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest15 = explodedArchive14.manifest;
        explodedArchive14.recursive = false;
        java.util.jar.Manifest manifest18 = explodedArchive14.manifest;
        java.io.File file19 = explodedArchive14.manifestFile;
        java.io.File file20 = null;
        java.io.File file21 = explodedArchive14.getManifestFile(file20);
        java.util.Iterator<java.io.File> fileItor22 = fileEntryIterator11.listFiles(file21);
        explodedArchive0.root = file21;
        // The following exception was thrown during execution in test generation
        try {
            org.springframework.boot.loader.archive.ExplodedArchive explodedArchive25 = new org.springframework.boot.loader.archive.ExplodedArchive(file21, false);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid source folder META-INF/MANIFEST.MF");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file21.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file21.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor22);
    }

    @Test
    public void test0097() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0097");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.lang.String str1 = explodedArchive0.toString();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive2 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file3 = explodedArchive2.root;
        java.io.File file4 = null;
        explodedArchive2.manifestFile = file4;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive6 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest7 = explodedArchive6.manifest;
        explodedArchive6.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive10 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest11 = explodedArchive10.manifest;
        explodedArchive10.recursive = false;
        java.util.jar.Manifest manifest14 = explodedArchive10.manifest;
        java.io.File file15 = explodedArchive10.manifestFile;
        java.io.File file16 = null;
        java.io.File file17 = explodedArchive10.getManifestFile(file16);
        explodedArchive6.manifestFile = file16;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive19 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest20 = explodedArchive19.manifest;
        explodedArchive19.recursive = false;
        java.util.jar.Manifest manifest23 = explodedArchive19.manifest;
        java.io.File file24 = explodedArchive19.manifestFile;
        java.io.File file25 = null;
        java.io.File file26 = explodedArchive19.getManifestFile(file25);
        explodedArchive6.manifestFile = file26;
        java.io.File file28 = explodedArchive2.getManifestFile(file26);
        java.io.File file29 = explodedArchive0.getManifestFile(file26);
        // The following exception was thrown during execution in test generation
        try {
            org.springframework.boot.loader.archive.ExplodedArchive explodedArchive30 = new org.springframework.boot.loader.archive.ExplodedArchive(file26);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid source folder META-INF/MANIFEST.MF");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str1 + "' != '" + "exploded archive" + "'", str1.equals("exploded archive"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file17.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file17.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file26.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file26.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file28.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file28.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file29.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file29.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
    }

    @Test
    public void test0098() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0098");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest1 = explodedArchive0.manifest;
        explodedArchive0.recursive = false;
        java.io.File file4 = null;
        explodedArchive0.root = file4;
        java.io.File file6 = explodedArchive0.root;
        java.util.jar.Manifest manifest7 = null;
        explodedArchive0.manifest = manifest7;
        java.io.File file9 = explodedArchive0.root;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file9);
    }

    @Test
    public void test0099() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0099");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file1 = null;
        fileEntryIterator0.current = file1;
        fileEntryIterator0.recursive = true;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator5 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file6 = null;
        fileEntryIterator5.current = file6;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive8 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest9 = explodedArchive8.manifest;
        explodedArchive8.recursive = false;
        java.util.jar.Manifest manifest12 = explodedArchive8.manifest;
        java.io.File file13 = explodedArchive8.manifestFile;
        java.io.File file14 = null;
        java.io.File file15 = explodedArchive8.getManifestFile(file14);
        java.util.Iterator<java.io.File> fileItor16 = fileEntryIterator5.listFiles(file15);
        java.io.File file17 = fileEntryIterator5.root;
        java.io.File file18 = fileEntryIterator5.root;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator19 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file20 = null;
        fileEntryIterator19.current = file20;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive22 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest23 = explodedArchive22.manifest;
        explodedArchive22.recursive = false;
        java.util.jar.Manifest manifest26 = explodedArchive22.manifest;
        java.io.File file27 = explodedArchive22.manifestFile;
        java.io.File file28 = null;
        java.io.File file29 = explodedArchive22.getManifestFile(file28);
        java.util.Iterator<java.io.File> fileItor30 = fileEntryIterator19.listFiles(file29);
        java.util.ArrayDeque<java.util.Iterator<java.io.File>> fileItorQueue31 = new java.util.ArrayDeque<java.util.Iterator<java.io.File>>();
        boolean boolean32 = fileItorQueue31.add(fileItor30);
        fileEntryIterator5.stack = fileItorQueue31;
        java.util.Deque<java.util.Iterator<java.io.File>> fileItorQueue34 = fileEntryIterator5.stack;
        fileEntryIterator0.stack = fileItorQueue34;
        boolean boolean36 = fileEntryIterator0.recursive;
        java.lang.Class<?> wildcardClass37 = fileEntryIterator0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file15.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file15.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file29.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file29.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItorQueue34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass37);
    }

    @Test
    public void test0100() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0100");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest1 = explodedArchive0.manifest;
        java.util.jar.Manifest manifest2 = null;
        explodedArchive0.manifest = manifest2;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntry fileEntry4 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntry();
        java.lang.String str5 = fileEntry4.name;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator6 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file7 = null;
        fileEntryIterator6.current = file7;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive9 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest10 = explodedArchive9.manifest;
        explodedArchive9.recursive = false;
        java.util.jar.Manifest manifest13 = explodedArchive9.manifest;
        java.io.File file14 = explodedArchive9.manifestFile;
        java.io.File file15 = null;
        java.io.File file16 = explodedArchive9.getManifestFile(file15);
        java.util.Iterator<java.io.File> fileItor17 = fileEntryIterator6.listFiles(file16);
        java.io.File file18 = fileEntryIterator6.current;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator19 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file20 = null;
        fileEntryIterator19.current = file20;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive22 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest23 = explodedArchive22.manifest;
        explodedArchive22.recursive = false;
        java.util.jar.Manifest manifest26 = explodedArchive22.manifest;
        java.io.File file27 = explodedArchive22.manifestFile;
        java.io.File file28 = null;
        java.io.File file29 = explodedArchive22.getManifestFile(file28);
        java.util.Iterator<java.io.File> fileItor30 = fileEntryIterator19.listFiles(file29);
        java.util.ArrayDeque<java.util.Iterator<java.io.File>> fileItorQueue31 = new java.util.ArrayDeque<java.util.Iterator<java.io.File>>();
        boolean boolean32 = fileItorQueue31.add(fileItor30);
        fileEntryIterator6.stack = fileItorQueue31;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive34 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest35 = explodedArchive34.manifest;
        explodedArchive34.recursive = false;
        java.io.File file38 = null;
        explodedArchive34.root = file38;
        java.io.File file40 = explodedArchive34.root;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive41 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest42 = explodedArchive41.manifest;
        explodedArchive41.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive45 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest46 = explodedArchive45.manifest;
        explodedArchive45.recursive = false;
        java.util.jar.Manifest manifest49 = explodedArchive45.manifest;
        java.io.File file50 = explodedArchive45.manifestFile;
        java.io.File file51 = null;
        java.io.File file52 = explodedArchive45.getManifestFile(file51);
        explodedArchive41.manifestFile = file51;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive54 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest55 = explodedArchive54.manifest;
        explodedArchive54.recursive = false;
        java.util.jar.Manifest manifest58 = explodedArchive54.manifest;
        java.io.File file59 = explodedArchive54.manifestFile;
        java.io.File file60 = null;
        java.io.File file61 = explodedArchive54.getManifestFile(file60);
        explodedArchive41.manifestFile = file61;
        java.io.File file63 = explodedArchive34.getManifestFile(file61);
        fileEntryIterator6.root = file61;
        fileEntry4.file = file61;
        java.io.File file66 = explodedArchive0.getManifestFile(file61);
        java.util.jar.Manifest manifest67 = null;
        explodedArchive0.manifest = manifest67;
        java.io.File file69 = null;
        java.io.File file70 = explodedArchive0.getManifestFile(file69);
        // The following exception was thrown during execution in test generation
        try {
            org.springframework.boot.loader.archive.ExplodedArchive explodedArchive71 = new org.springframework.boot.loader.archive.ExplodedArchive(file70);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid source folder META-INF/MANIFEST.MF");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file16.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file16.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file29.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file29.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file52.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file52.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file61.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file61.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file63.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file63.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file66.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file66.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file70.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file70.toString(), "META-INF/MANIFEST.MF");
    }

    @Test
    public void test0101() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0101");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.lang.String str1 = explodedArchive0.toString();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive2 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file3 = explodedArchive2.root;
        java.io.File file4 = null;
        explodedArchive2.manifestFile = file4;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive6 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest7 = explodedArchive6.manifest;
        explodedArchive6.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive10 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest11 = explodedArchive10.manifest;
        explodedArchive10.recursive = false;
        java.util.jar.Manifest manifest14 = explodedArchive10.manifest;
        java.io.File file15 = explodedArchive10.manifestFile;
        java.io.File file16 = null;
        java.io.File file17 = explodedArchive10.getManifestFile(file16);
        explodedArchive6.manifestFile = file16;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive19 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest20 = explodedArchive19.manifest;
        explodedArchive19.recursive = false;
        java.util.jar.Manifest manifest23 = explodedArchive19.manifest;
        java.io.File file24 = explodedArchive19.manifestFile;
        java.io.File file25 = null;
        java.io.File file26 = explodedArchive19.getManifestFile(file25);
        explodedArchive6.manifestFile = file26;
        java.io.File file28 = explodedArchive2.getManifestFile(file26);
        java.io.File file29 = explodedArchive0.getManifestFile(file26);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator<org.springframework.boot.loader.archive.Archive.Entry> entryItor30 = explodedArchive0.iterator();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str1 + "' != '" + "exploded archive" + "'", str1.equals("exploded archive"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file17.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file17.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file26.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file26.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file28.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file28.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file29.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file29.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
    }

    @Test
    public void test0102() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0102");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file1 = explodedArchive0.root;
        java.io.File file2 = null;
        explodedArchive0.manifestFile = file2;
        java.io.File file4 = explodedArchive0.root;
        java.lang.String str5 = explodedArchive0.toString();
        org.springframework.boot.loader.archive.Archive.EntryFilter entryFilter6 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<org.springframework.boot.loader.archive.Archive> archiveList7 = explodedArchive0.getNestedArchives(entryFilter6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "exploded archive" + "'", str5.equals("exploded archive"));
    }

    @Test
    public void test0103() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0103");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.lang.String str1 = explodedArchive0.toString();
        explodedArchive0.recursive = true;
        org.springframework.boot.loader.archive.Archive.EntryFilter entryFilter4 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<org.springframework.boot.loader.archive.Archive> archiveList5 = explodedArchive0.getNestedArchives(entryFilter4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str1 + "' != '" + "exploded archive" + "'", str1.equals("exploded archive"));
    }

    @Test
    public void test0104() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0104");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        boolean boolean1 = explodedArchive0.recursive;
        boolean boolean2 = explodedArchive0.recursive;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive3 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file4 = explodedArchive3.root;
        java.io.File file5 = null;
        explodedArchive3.manifestFile = file5;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive7 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest8 = explodedArchive7.manifest;
        explodedArchive7.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive11 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest12 = explodedArchive11.manifest;
        explodedArchive11.recursive = false;
        java.util.jar.Manifest manifest15 = explodedArchive11.manifest;
        java.io.File file16 = explodedArchive11.manifestFile;
        java.io.File file17 = null;
        java.io.File file18 = explodedArchive11.getManifestFile(file17);
        explodedArchive7.manifestFile = file17;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive20 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest21 = explodedArchive20.manifest;
        explodedArchive20.recursive = false;
        java.util.jar.Manifest manifest24 = explodedArchive20.manifest;
        java.io.File file25 = explodedArchive20.manifestFile;
        java.io.File file26 = null;
        java.io.File file27 = explodedArchive20.getManifestFile(file26);
        explodedArchive7.manifestFile = file27;
        java.io.File file29 = explodedArchive3.getManifestFile(file27);
        explodedArchive0.manifestFile = file27;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntry fileEntry31 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntry();
        java.io.File file32 = fileEntry31.getFile();
        java.io.File file33 = fileEntry31.getFile();
        java.lang.String str34 = fileEntry31.name;
        java.lang.String str35 = fileEntry31.name;
        // The following exception was thrown during execution in test generation
        try {
            org.springframework.boot.loader.archive.Archive archive36 = explodedArchive0.getNestedArchive((org.springframework.boot.loader.archive.Archive.Entry) fileEntry31);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file18.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file18.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file27.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file27.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file29.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file29.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str35);
    }

    @Test
    public void test0105() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0105");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest1 = explodedArchive0.manifest;
        explodedArchive0.recursive = false;
        java.io.File file4 = null;
        explodedArchive0.root = file4;
        java.io.File file6 = explodedArchive0.manifestFile;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive7 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file8 = explodedArchive7.root;
        java.io.File file9 = null;
        explodedArchive7.manifestFile = file9;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive11 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest12 = explodedArchive11.manifest;
        explodedArchive11.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive15 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest16 = explodedArchive15.manifest;
        explodedArchive15.recursive = false;
        java.util.jar.Manifest manifest19 = explodedArchive15.manifest;
        java.io.File file20 = explodedArchive15.manifestFile;
        java.io.File file21 = null;
        java.io.File file22 = explodedArchive15.getManifestFile(file21);
        explodedArchive11.manifestFile = file21;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive24 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest25 = explodedArchive24.manifest;
        explodedArchive24.recursive = false;
        java.util.jar.Manifest manifest28 = explodedArchive24.manifest;
        java.io.File file29 = explodedArchive24.manifestFile;
        java.io.File file30 = null;
        java.io.File file31 = explodedArchive24.getManifestFile(file30);
        explodedArchive11.manifestFile = file31;
        java.io.File file33 = explodedArchive7.getManifestFile(file31);
        java.io.File file34 = explodedArchive0.getManifestFile(file31);
        org.springframework.boot.loader.archive.Archive.EntryFilter entryFilter35 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<org.springframework.boot.loader.archive.Archive> archiveList36 = explodedArchive0.getNestedArchives(entryFilter35);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file22.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file22.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file31.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file31.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file33.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file33.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file34.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file34.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
    }

    @Test
    public void test0106() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0106");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        boolean boolean1 = explodedArchive0.recursive;
        java.io.File file2 = explodedArchive0.root;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file2);
    }

    @Test
    public void test0107() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0107");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file1 = null;
        fileEntryIterator0.current = file1;
        fileEntryIterator0.recursive = true;
        fileEntryIterator0.recursive = true;
        boolean boolean7 = fileEntryIterator0.hasNext();
        // The following exception was thrown during execution in test generation
        try {
            fileEntryIterator0.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: remove");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test0108() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0108");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        boolean boolean1 = explodedArchive0.recursive;
        boolean boolean2 = explodedArchive0.recursive;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive3 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file4 = explodedArchive3.root;
        java.io.File file5 = null;
        explodedArchive3.manifestFile = file5;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive7 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest8 = explodedArchive7.manifest;
        explodedArchive7.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive11 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest12 = explodedArchive11.manifest;
        explodedArchive11.recursive = false;
        java.util.jar.Manifest manifest15 = explodedArchive11.manifest;
        java.io.File file16 = explodedArchive11.manifestFile;
        java.io.File file17 = null;
        java.io.File file18 = explodedArchive11.getManifestFile(file17);
        explodedArchive7.manifestFile = file17;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive20 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest21 = explodedArchive20.manifest;
        explodedArchive20.recursive = false;
        java.util.jar.Manifest manifest24 = explodedArchive20.manifest;
        java.io.File file25 = explodedArchive20.manifestFile;
        java.io.File file26 = null;
        java.io.File file27 = explodedArchive20.getManifestFile(file26);
        explodedArchive7.manifestFile = file27;
        java.io.File file29 = explodedArchive3.getManifestFile(file27);
        explodedArchive0.manifestFile = file27;
        // The following exception was thrown during execution in test generation
        try {
            org.springframework.boot.loader.archive.ExplodedArchive explodedArchive31 = new org.springframework.boot.loader.archive.ExplodedArchive(file27);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid source folder META-INF/MANIFEST.MF");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file18.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file18.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file27.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file27.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file29.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file29.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
    }

    @Test
    public void test0109() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0109");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntry fileEntry0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntry();
        java.lang.String str1 = fileEntry0.name;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator2 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file3 = null;
        fileEntryIterator2.current = file3;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive5 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.lang.String str6 = explodedArchive5.toString();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive7 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file8 = explodedArchive7.root;
        java.io.File file9 = null;
        explodedArchive7.manifestFile = file9;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive11 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest12 = explodedArchive11.manifest;
        explodedArchive11.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive15 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest16 = explodedArchive15.manifest;
        explodedArchive15.recursive = false;
        java.util.jar.Manifest manifest19 = explodedArchive15.manifest;
        java.io.File file20 = explodedArchive15.manifestFile;
        java.io.File file21 = null;
        java.io.File file22 = explodedArchive15.getManifestFile(file21);
        explodedArchive11.manifestFile = file21;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive24 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest25 = explodedArchive24.manifest;
        explodedArchive24.recursive = false;
        java.util.jar.Manifest manifest28 = explodedArchive24.manifest;
        java.io.File file29 = explodedArchive24.manifestFile;
        java.io.File file30 = null;
        java.io.File file31 = explodedArchive24.getManifestFile(file30);
        explodedArchive11.manifestFile = file31;
        java.io.File file33 = explodedArchive7.getManifestFile(file31);
        java.io.File file34 = explodedArchive5.getManifestFile(file31);
        fileEntryIterator2.root = file31;
        fileEntry0.file = file31;
        java.io.File file37 = fileEntry0.file;
        java.io.File file38 = fileEntry0.file;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "exploded archive" + "'", str6.equals("exploded archive"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file22.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file22.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file31.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file31.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file33.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file33.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file34.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file34.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file37.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file37.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file38.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file38.toString(), "META-INF/MANIFEST.MF");
    }

    @Test
    public void test0110() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0110");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest1 = explodedArchive0.manifest;
        explodedArchive0.recursive = false;
        java.io.File file4 = null;
        explodedArchive0.root = file4;
        java.io.File file6 = explodedArchive0.root;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive7 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest8 = explodedArchive7.manifest;
        explodedArchive7.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive11 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest12 = explodedArchive11.manifest;
        explodedArchive11.recursive = false;
        java.util.jar.Manifest manifest15 = explodedArchive11.manifest;
        java.io.File file16 = explodedArchive11.manifestFile;
        java.io.File file17 = null;
        java.io.File file18 = explodedArchive11.getManifestFile(file17);
        explodedArchive7.manifestFile = file17;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive20 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest21 = explodedArchive20.manifest;
        explodedArchive20.recursive = false;
        java.util.jar.Manifest manifest24 = explodedArchive20.manifest;
        java.io.File file25 = explodedArchive20.manifestFile;
        java.io.File file26 = null;
        java.io.File file27 = explodedArchive20.getManifestFile(file26);
        explodedArchive7.manifestFile = file27;
        java.io.File file29 = explodedArchive0.getManifestFile(file27);
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntry fileEntry30 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntry();
        java.lang.String str31 = fileEntry30.name;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator32 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file33 = null;
        fileEntryIterator32.current = file33;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive35 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.lang.String str36 = explodedArchive35.toString();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive37 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file38 = explodedArchive37.root;
        java.io.File file39 = null;
        explodedArchive37.manifestFile = file39;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive41 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest42 = explodedArchive41.manifest;
        explodedArchive41.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive45 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest46 = explodedArchive45.manifest;
        explodedArchive45.recursive = false;
        java.util.jar.Manifest manifest49 = explodedArchive45.manifest;
        java.io.File file50 = explodedArchive45.manifestFile;
        java.io.File file51 = null;
        java.io.File file52 = explodedArchive45.getManifestFile(file51);
        explodedArchive41.manifestFile = file51;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive54 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest55 = explodedArchive54.manifest;
        explodedArchive54.recursive = false;
        java.util.jar.Manifest manifest58 = explodedArchive54.manifest;
        java.io.File file59 = explodedArchive54.manifestFile;
        java.io.File file60 = null;
        java.io.File file61 = explodedArchive54.getManifestFile(file60);
        explodedArchive41.manifestFile = file61;
        java.io.File file63 = explodedArchive37.getManifestFile(file61);
        java.io.File file64 = explodedArchive35.getManifestFile(file61);
        fileEntryIterator32.root = file61;
        fileEntry30.file = file61;
        java.io.File file67 = fileEntry30.file;
        explodedArchive0.root = file67;
        java.io.File file69 = explodedArchive0.manifestFile;
        java.util.Spliterator<org.springframework.boot.loader.archive.Archive.Entry> entrySpliterator70 = explodedArchive0.spliterator();
        java.io.File file71 = explodedArchive0.manifestFile;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file18.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file18.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file27.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file27.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file29.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file29.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str36 + "' != '" + "exploded archive" + "'", str36.equals("exploded archive"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file52.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file52.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file61.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file61.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file63.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file63.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file64.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file64.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file67.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file67.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(entrySpliterator70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file71);
    }

    @Test
    public void test0111() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0111");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file1 = explodedArchive0.root;
        java.io.File file2 = null;
        explodedArchive0.manifestFile = file2;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive4 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest5 = explodedArchive4.manifest;
        explodedArchive4.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive8 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest9 = explodedArchive8.manifest;
        explodedArchive8.recursive = false;
        java.util.jar.Manifest manifest12 = explodedArchive8.manifest;
        java.io.File file13 = explodedArchive8.manifestFile;
        java.io.File file14 = null;
        java.io.File file15 = explodedArchive8.getManifestFile(file14);
        explodedArchive4.manifestFile = file14;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive17 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest18 = explodedArchive17.manifest;
        explodedArchive17.recursive = false;
        java.util.jar.Manifest manifest21 = explodedArchive17.manifest;
        java.io.File file22 = explodedArchive17.manifestFile;
        java.io.File file23 = null;
        java.io.File file24 = explodedArchive17.getManifestFile(file23);
        explodedArchive4.manifestFile = file24;
        java.io.File file26 = explodedArchive0.getManifestFile(file24);
        java.io.File file27 = explodedArchive0.root;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator28 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        boolean boolean29 = fileEntryIterator28.hasNext();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator30 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator31 = entryComparator30.reversed();
        java.util.Comparator<java.io.File> fileComparator32 = fileComparator31.reversed();
        fileEntryIterator28.entryComparator = fileComparator32;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive34 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file35 = explodedArchive34.root;
        java.io.File file36 = null;
        explodedArchive34.manifestFile = file36;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive38 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest39 = explodedArchive38.manifest;
        explodedArchive38.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive42 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest43 = explodedArchive42.manifest;
        explodedArchive42.recursive = false;
        java.util.jar.Manifest manifest46 = explodedArchive42.manifest;
        java.io.File file47 = explodedArchive42.manifestFile;
        java.io.File file48 = null;
        java.io.File file49 = explodedArchive42.getManifestFile(file48);
        explodedArchive38.manifestFile = file48;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive51 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest52 = explodedArchive51.manifest;
        explodedArchive51.recursive = false;
        java.util.jar.Manifest manifest55 = explodedArchive51.manifest;
        java.io.File file56 = explodedArchive51.manifestFile;
        java.io.File file57 = null;
        java.io.File file58 = explodedArchive51.getManifestFile(file57);
        explodedArchive38.manifestFile = file58;
        java.io.File file60 = explodedArchive34.getManifestFile(file58);
        java.util.Iterator<java.io.File> fileItor61 = fileEntryIterator28.listFiles(file60);
        explodedArchive0.manifestFile = file60;
        java.io.File file63 = explodedArchive0.manifestFile;
        java.lang.Class<?> wildcardClass64 = explodedArchive0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file15.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file15.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file24.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file24.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file26.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file26.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file49.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file49.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file58.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file58.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file60.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file60.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file63.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file63.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass64);
    }

    @Test
    public void test0112() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0112");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest1 = explodedArchive0.manifest;
        explodedArchive0.recursive = false;
        java.io.File file4 = null;
        explodedArchive0.root = file4;
        java.io.File file6 = explodedArchive0.root;
        java.util.jar.Manifest manifest7 = null;
        explodedArchive0.manifest = manifest7;
        explodedArchive0.recursive = false;
        java.util.jar.Manifest manifest11 = null;
        explodedArchive0.manifest = manifest11;
        java.lang.String str13 = explodedArchive0.toString();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntry fileEntry14 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntry();
        java.lang.String str15 = fileEntry14.getName();
        java.io.File file16 = fileEntry14.getFile();
        java.lang.String str17 = fileEntry14.getName();
        java.io.File file18 = fileEntry14.file;
        // The following exception was thrown during execution in test generation
        try {
            org.springframework.boot.loader.archive.Archive archive19 = explodedArchive0.getNestedArchive((org.springframework.boot.loader.archive.Archive.Entry) fileEntry14);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str13 + "' != '" + "exploded archive" + "'", str13.equals("exploded archive"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file18);
    }

    @Test
    public void test0113() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0113");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file1 = explodedArchive0.root;
        explodedArchive0.recursive = false;
        boolean boolean4 = explodedArchive0.recursive;
        java.lang.Class<?> wildcardClass5 = explodedArchive0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void test0114() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0114");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file1 = null;
        fileEntryIterator0.current = file1;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive3 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest4 = explodedArchive3.manifest;
        explodedArchive3.recursive = false;
        java.util.jar.Manifest manifest7 = explodedArchive3.manifest;
        java.io.File file8 = explodedArchive3.manifestFile;
        java.io.File file9 = null;
        java.io.File file10 = explodedArchive3.getManifestFile(file9);
        java.util.Iterator<java.io.File> fileItor11 = fileEntryIterator0.listFiles(file10);
        java.io.File file12 = fileEntryIterator0.root;
        java.io.File file13 = fileEntryIterator0.root;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator14 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file15 = null;
        fileEntryIterator14.current = file15;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive17 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest18 = explodedArchive17.manifest;
        explodedArchive17.recursive = false;
        java.util.jar.Manifest manifest21 = explodedArchive17.manifest;
        java.io.File file22 = explodedArchive17.manifestFile;
        java.io.File file23 = null;
        java.io.File file24 = explodedArchive17.getManifestFile(file23);
        java.util.Iterator<java.io.File> fileItor25 = fileEntryIterator14.listFiles(file24);
        java.util.ArrayDeque<java.util.Iterator<java.io.File>> fileItorQueue26 = new java.util.ArrayDeque<java.util.Iterator<java.io.File>>();
        boolean boolean27 = fileItorQueue26.add(fileItor25);
        fileEntryIterator0.stack = fileItorQueue26;
        java.util.Deque<java.util.Iterator<java.io.File>> fileItorQueue29 = fileEntryIterator0.stack;
        java.io.File file30 = fileEntryIterator0.poll();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file24.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file24.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItorQueue29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file30);
    }

    @Test
    public void test0115() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0115");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntry fileEntry0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntry();
        java.lang.String str1 = fileEntry0.getName();
        java.lang.String str2 = fileEntry0.getName();
        java.io.File file3 = fileEntry0.file;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file3);
    }

    @Test
    public void test0116() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0116");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator1 = entryComparator0.reversed();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive2 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file3 = explodedArchive2.root;
        java.io.File file4 = null;
        explodedArchive2.manifestFile = file4;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive6 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest7 = explodedArchive6.manifest;
        explodedArchive6.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive10 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest11 = explodedArchive10.manifest;
        explodedArchive10.recursive = false;
        java.util.jar.Manifest manifest14 = explodedArchive10.manifest;
        java.io.File file15 = explodedArchive10.manifestFile;
        java.io.File file16 = null;
        java.io.File file17 = explodedArchive10.getManifestFile(file16);
        explodedArchive6.manifestFile = file16;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive19 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest20 = explodedArchive19.manifest;
        explodedArchive19.recursive = false;
        java.util.jar.Manifest manifest23 = explodedArchive19.manifest;
        java.io.File file24 = explodedArchive19.manifestFile;
        java.io.File file25 = null;
        java.io.File file26 = explodedArchive19.getManifestFile(file25);
        explodedArchive6.manifestFile = file26;
        java.io.File file28 = explodedArchive2.getManifestFile(file26);
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive29 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest30 = explodedArchive29.manifest;
        explodedArchive29.recursive = false;
        java.io.File file33 = null;
        explodedArchive29.root = file33;
        java.io.File file35 = explodedArchive29.root;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive36 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest37 = explodedArchive36.manifest;
        explodedArchive36.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive40 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest41 = explodedArchive40.manifest;
        explodedArchive40.recursive = false;
        java.util.jar.Manifest manifest44 = explodedArchive40.manifest;
        java.io.File file45 = explodedArchive40.manifestFile;
        java.io.File file46 = null;
        java.io.File file47 = explodedArchive40.getManifestFile(file46);
        explodedArchive36.manifestFile = file46;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive49 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest50 = explodedArchive49.manifest;
        explodedArchive49.recursive = false;
        java.util.jar.Manifest manifest53 = explodedArchive49.manifest;
        java.io.File file54 = explodedArchive49.manifestFile;
        java.io.File file55 = null;
        java.io.File file56 = explodedArchive49.getManifestFile(file55);
        explodedArchive36.manifestFile = file56;
        java.io.File file58 = explodedArchive29.getManifestFile(file56);
        int int59 = entryComparator0.compare(file28, file56);
        java.lang.Class<?> wildcardClass60 = entryComparator0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file17.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file17.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file26.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file26.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file28.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file28.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file47.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file47.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file56.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file56.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file58.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file58.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 21 + "'", int59 == 21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass60);
    }

    @Test
    public void test0117() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0117");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file1 = null;
        fileEntryIterator0.current = file1;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive3 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest4 = explodedArchive3.manifest;
        explodedArchive3.recursive = false;
        java.util.jar.Manifest manifest7 = explodedArchive3.manifest;
        java.io.File file8 = explodedArchive3.manifestFile;
        java.io.File file9 = null;
        java.io.File file10 = explodedArchive3.getManifestFile(file9);
        java.util.Iterator<java.io.File> fileItor11 = fileEntryIterator0.listFiles(file10);
        boolean boolean12 = fileEntryIterator0.hasNext();
        java.util.Comparator<java.io.File> fileComparator13 = fileEntryIterator0.entryComparator;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator14 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file15 = null;
        fileEntryIterator14.current = file15;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive17 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest18 = explodedArchive17.manifest;
        explodedArchive17.recursive = false;
        java.util.jar.Manifest manifest21 = explodedArchive17.manifest;
        java.io.File file22 = explodedArchive17.manifestFile;
        java.io.File file23 = null;
        java.io.File file24 = explodedArchive17.getManifestFile(file23);
        java.util.Iterator<java.io.File> fileItor25 = fileEntryIterator14.listFiles(file24);
        java.io.File file26 = fileEntryIterator14.current;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator27 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file28 = null;
        fileEntryIterator27.current = file28;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive30 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest31 = explodedArchive30.manifest;
        explodedArchive30.recursive = false;
        java.util.jar.Manifest manifest34 = explodedArchive30.manifest;
        java.io.File file35 = explodedArchive30.manifestFile;
        java.io.File file36 = null;
        java.io.File file37 = explodedArchive30.getManifestFile(file36);
        java.util.Iterator<java.io.File> fileItor38 = fileEntryIterator27.listFiles(file37);
        java.util.ArrayDeque<java.util.Iterator<java.io.File>> fileItorQueue39 = new java.util.ArrayDeque<java.util.Iterator<java.io.File>>();
        boolean boolean40 = fileItorQueue39.add(fileItor38);
        fileEntryIterator14.stack = fileItorQueue39;
        fileEntryIterator0.stack = fileItorQueue39;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator43 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file44 = null;
        fileEntryIterator43.current = file44;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive46 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.lang.String str47 = explodedArchive46.toString();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive48 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file49 = explodedArchive48.root;
        java.io.File file50 = null;
        explodedArchive48.manifestFile = file50;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive52 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest53 = explodedArchive52.manifest;
        explodedArchive52.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive56 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest57 = explodedArchive56.manifest;
        explodedArchive56.recursive = false;
        java.util.jar.Manifest manifest60 = explodedArchive56.manifest;
        java.io.File file61 = explodedArchive56.manifestFile;
        java.io.File file62 = null;
        java.io.File file63 = explodedArchive56.getManifestFile(file62);
        explodedArchive52.manifestFile = file62;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive65 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest66 = explodedArchive65.manifest;
        explodedArchive65.recursive = false;
        java.util.jar.Manifest manifest69 = explodedArchive65.manifest;
        java.io.File file70 = explodedArchive65.manifestFile;
        java.io.File file71 = null;
        java.io.File file72 = explodedArchive65.getManifestFile(file71);
        explodedArchive52.manifestFile = file72;
        java.io.File file74 = explodedArchive48.getManifestFile(file72);
        java.io.File file75 = explodedArchive46.getManifestFile(file72);
        fileEntryIterator43.root = file72;
        fileEntryIterator0.root = file72;
        // The following exception was thrown during execution in test generation
        try {
            org.springframework.boot.loader.archive.ExplodedArchive explodedArchive78 = new org.springframework.boot.loader.archive.ExplodedArchive(file72);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid source folder META-INF/MANIFEST.MF");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file24.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file24.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file37.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file37.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str47 + "' != '" + "exploded archive" + "'", str47.equals("exploded archive"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file63.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file63.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file72.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file72.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file74.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file74.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file75);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file75.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file75.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
    }

    @Test
    public void test0118() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0118");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file1 = null;
        fileEntryIterator0.current = file1;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive3 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest4 = explodedArchive3.manifest;
        explodedArchive3.recursive = false;
        java.util.jar.Manifest manifest7 = explodedArchive3.manifest;
        java.io.File file8 = explodedArchive3.manifestFile;
        java.io.File file9 = null;
        java.io.File file10 = explodedArchive3.getManifestFile(file9);
        java.util.Iterator<java.io.File> fileItor11 = fileEntryIterator0.listFiles(file10);
        boolean boolean12 = fileEntryIterator0.hasNext();
        java.util.Comparator<java.io.File> fileComparator13 = fileEntryIterator0.entryComparator;
        java.util.Comparator<java.io.File> fileComparator14 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Comparator<java.io.File> fileComparator15 = fileComparator13.thenComparing(fileComparator14);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator13);
    }

    @Test
    public void test0119() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0119");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        boolean boolean1 = fileEntryIterator0.recursive;
        java.io.File file2 = fileEntryIterator0.current;
        boolean boolean3 = fileEntryIterator0.hasNext();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator4 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator5 = entryComparator4.reversed();
        java.util.Comparator<java.io.File> fileComparator6 = entryComparator4.reversed();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive7 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest8 = explodedArchive7.manifest;
        explodedArchive7.recursive = false;
        java.util.jar.Manifest manifest11 = explodedArchive7.manifest;
        java.io.File file12 = explodedArchive7.manifestFile;
        java.io.File file13 = null;
        java.io.File file14 = explodedArchive7.getManifestFile(file13);
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive15 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest16 = explodedArchive15.manifest;
        explodedArchive15.recursive = false;
        java.io.File file19 = null;
        explodedArchive15.root = file19;
        java.io.File file21 = explodedArchive15.root;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive22 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest23 = explodedArchive22.manifest;
        explodedArchive22.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive26 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest27 = explodedArchive26.manifest;
        explodedArchive26.recursive = false;
        java.util.jar.Manifest manifest30 = explodedArchive26.manifest;
        java.io.File file31 = explodedArchive26.manifestFile;
        java.io.File file32 = null;
        java.io.File file33 = explodedArchive26.getManifestFile(file32);
        explodedArchive22.manifestFile = file32;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive35 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest36 = explodedArchive35.manifest;
        explodedArchive35.recursive = false;
        java.util.jar.Manifest manifest39 = explodedArchive35.manifest;
        java.io.File file40 = explodedArchive35.manifestFile;
        java.io.File file41 = null;
        java.io.File file42 = explodedArchive35.getManifestFile(file41);
        explodedArchive22.manifestFile = file42;
        java.io.File file44 = explodedArchive15.getManifestFile(file42);
        int int45 = entryComparator4.compare(file14, file42);
        java.util.Iterator<java.io.File> fileItor46 = fileEntryIterator0.listFiles(file14);
        java.util.Deque<java.util.Iterator<java.io.File>> fileItorQueue47 = fileEntryIterator0.stack;
        // The following exception was thrown during execution in test generation
        try {
            org.springframework.boot.loader.archive.Archive.Entry entry48 = fileEntryIterator0.next();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file14.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file14.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file33.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file33.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file42.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file42.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file44.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file44.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItorQueue47);
    }

    @Test
    public void test0120() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0120");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest1 = explodedArchive0.manifest;
        explodedArchive0.recursive = false;
        java.io.File file4 = null;
        explodedArchive0.root = file4;
        java.io.File file6 = explodedArchive0.root;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive7 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest8 = explodedArchive7.manifest;
        explodedArchive7.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive11 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest12 = explodedArchive11.manifest;
        explodedArchive11.recursive = false;
        java.util.jar.Manifest manifest15 = explodedArchive11.manifest;
        java.io.File file16 = explodedArchive11.manifestFile;
        java.io.File file17 = null;
        java.io.File file18 = explodedArchive11.getManifestFile(file17);
        explodedArchive7.manifestFile = file17;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive20 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest21 = explodedArchive20.manifest;
        explodedArchive20.recursive = false;
        java.util.jar.Manifest manifest24 = explodedArchive20.manifest;
        java.io.File file25 = explodedArchive20.manifestFile;
        java.io.File file26 = null;
        java.io.File file27 = explodedArchive20.getManifestFile(file26);
        explodedArchive7.manifestFile = file27;
        java.io.File file29 = explodedArchive0.getManifestFile(file27);
        // The following exception was thrown during execution in test generation
        try {
            org.springframework.boot.loader.archive.ExplodedArchive explodedArchive30 = new org.springframework.boot.loader.archive.ExplodedArchive(file29);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid source folder META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file18.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file18.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file27.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file27.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file29.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file29.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
    }

    @Test
    public void test0121() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0121");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest1 = explodedArchive0.manifest;
        java.util.jar.Manifest manifest2 = null;
        explodedArchive0.manifest = manifest2;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntry fileEntry4 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntry();
        java.lang.String str5 = fileEntry4.name;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator6 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file7 = null;
        fileEntryIterator6.current = file7;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive9 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest10 = explodedArchive9.manifest;
        explodedArchive9.recursive = false;
        java.util.jar.Manifest manifest13 = explodedArchive9.manifest;
        java.io.File file14 = explodedArchive9.manifestFile;
        java.io.File file15 = null;
        java.io.File file16 = explodedArchive9.getManifestFile(file15);
        java.util.Iterator<java.io.File> fileItor17 = fileEntryIterator6.listFiles(file16);
        java.io.File file18 = fileEntryIterator6.current;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator19 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file20 = null;
        fileEntryIterator19.current = file20;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive22 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest23 = explodedArchive22.manifest;
        explodedArchive22.recursive = false;
        java.util.jar.Manifest manifest26 = explodedArchive22.manifest;
        java.io.File file27 = explodedArchive22.manifestFile;
        java.io.File file28 = null;
        java.io.File file29 = explodedArchive22.getManifestFile(file28);
        java.util.Iterator<java.io.File> fileItor30 = fileEntryIterator19.listFiles(file29);
        java.util.ArrayDeque<java.util.Iterator<java.io.File>> fileItorQueue31 = new java.util.ArrayDeque<java.util.Iterator<java.io.File>>();
        boolean boolean32 = fileItorQueue31.add(fileItor30);
        fileEntryIterator6.stack = fileItorQueue31;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive34 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest35 = explodedArchive34.manifest;
        explodedArchive34.recursive = false;
        java.io.File file38 = null;
        explodedArchive34.root = file38;
        java.io.File file40 = explodedArchive34.root;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive41 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest42 = explodedArchive41.manifest;
        explodedArchive41.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive45 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest46 = explodedArchive45.manifest;
        explodedArchive45.recursive = false;
        java.util.jar.Manifest manifest49 = explodedArchive45.manifest;
        java.io.File file50 = explodedArchive45.manifestFile;
        java.io.File file51 = null;
        java.io.File file52 = explodedArchive45.getManifestFile(file51);
        explodedArchive41.manifestFile = file51;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive54 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest55 = explodedArchive54.manifest;
        explodedArchive54.recursive = false;
        java.util.jar.Manifest manifest58 = explodedArchive54.manifest;
        java.io.File file59 = explodedArchive54.manifestFile;
        java.io.File file60 = null;
        java.io.File file61 = explodedArchive54.getManifestFile(file60);
        explodedArchive41.manifestFile = file61;
        java.io.File file63 = explodedArchive34.getManifestFile(file61);
        fileEntryIterator6.root = file61;
        fileEntry4.file = file61;
        java.io.File file66 = explodedArchive0.getManifestFile(file61);
        java.util.jar.Manifest manifest67 = null;
        explodedArchive0.manifest = manifest67;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator<org.springframework.boot.loader.archive.Archive.Entry> entryItor69 = explodedArchive0.iterator();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file16.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file16.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file29.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file29.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file52.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file52.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file61.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file61.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file63.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file63.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file66.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file66.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
    }

    @Test
    public void test0122() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0122");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest1 = explodedArchive0.manifest;
        explodedArchive0.recursive = false;
        java.util.jar.Manifest manifest4 = explodedArchive0.manifest;
        java.io.File file5 = explodedArchive0.manifestFile;
        java.io.File file6 = null;
        java.io.File file7 = explodedArchive0.getManifestFile(file6);
        java.util.jar.Manifest manifest8 = explodedArchive0.manifest;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator<org.springframework.boot.loader.archive.Archive.Entry> entryItor9 = explodedArchive0.iterator();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file7.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file7.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest8);
    }

    @Test
    public void test0123() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0123");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        boolean boolean1 = fileEntryIterator0.hasNext();
        java.io.File file2 = fileEntryIterator0.root;
        java.io.File file3 = fileEntryIterator0.current;
        java.util.Comparator<java.io.File> fileComparator4 = fileEntryIterator0.entryComparator;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator4);
    }

    @Test
    public void test0124() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0124");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest1 = explodedArchive0.manifest;
        explodedArchive0.recursive = false;
        java.io.File file4 = null;
        explodedArchive0.root = file4;
        java.io.File file6 = explodedArchive0.root;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntry fileEntry7 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntry();
        java.lang.String str8 = fileEntry7.getName();
        fileEntry7.name = "hi!";
        // The following exception was thrown during execution in test generation
        try {
            org.springframework.boot.loader.archive.Archive archive11 = explodedArchive0.getNestedArchive((org.springframework.boot.loader.archive.Archive.Entry) fileEntry7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str8);
    }

    @Test
    public void test0125() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0125");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file1 = explodedArchive0.root;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive2 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest3 = explodedArchive2.manifest;
        explodedArchive2.recursive = false;
        java.util.jar.Manifest manifest6 = explodedArchive2.manifest;
        java.io.File file7 = explodedArchive2.manifestFile;
        java.io.File file8 = null;
        java.io.File file9 = explodedArchive2.getManifestFile(file8);
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator10 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file11 = null;
        fileEntryIterator10.current = file11;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive13 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.lang.String str14 = explodedArchive13.toString();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive15 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file16 = explodedArchive15.root;
        java.io.File file17 = null;
        explodedArchive15.manifestFile = file17;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive19 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest20 = explodedArchive19.manifest;
        explodedArchive19.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive23 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest24 = explodedArchive23.manifest;
        explodedArchive23.recursive = false;
        java.util.jar.Manifest manifest27 = explodedArchive23.manifest;
        java.io.File file28 = explodedArchive23.manifestFile;
        java.io.File file29 = null;
        java.io.File file30 = explodedArchive23.getManifestFile(file29);
        explodedArchive19.manifestFile = file29;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive32 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest33 = explodedArchive32.manifest;
        explodedArchive32.recursive = false;
        java.util.jar.Manifest manifest36 = explodedArchive32.manifest;
        java.io.File file37 = explodedArchive32.manifestFile;
        java.io.File file38 = null;
        java.io.File file39 = explodedArchive32.getManifestFile(file38);
        explodedArchive19.manifestFile = file39;
        java.io.File file41 = explodedArchive15.getManifestFile(file39);
        java.io.File file42 = explodedArchive13.getManifestFile(file39);
        fileEntryIterator10.root = file39;
        explodedArchive2.root = file39;
        java.io.File file45 = explodedArchive0.getManifestFile(file39);
        // The following exception was thrown during execution in test generation
        try {
            org.springframework.boot.loader.archive.ExplodedArchive explodedArchive47 = new org.springframework.boot.loader.archive.ExplodedArchive(file45, false);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid source folder META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file9.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file9.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str14 + "' != '" + "exploded archive" + "'", str14.equals("exploded archive"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file30.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file30.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file39.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file39.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file41.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file41.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file42.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file42.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file45.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file45.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
    }

    @Test
    public void test0126() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0126");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator1 = entryComparator0.reversed();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator2 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file3 = null;
        fileEntryIterator2.current = file3;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive5 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest6 = explodedArchive5.manifest;
        explodedArchive5.recursive = false;
        java.util.jar.Manifest manifest9 = explodedArchive5.manifest;
        java.io.File file10 = explodedArchive5.manifestFile;
        java.io.File file11 = null;
        java.io.File file12 = explodedArchive5.getManifestFile(file11);
        java.util.Iterator<java.io.File> fileItor13 = fileEntryIterator2.listFiles(file12);
        java.io.File file14 = fileEntryIterator2.current;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator15 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file16 = null;
        fileEntryIterator15.current = file16;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive18 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest19 = explodedArchive18.manifest;
        explodedArchive18.recursive = false;
        java.util.jar.Manifest manifest22 = explodedArchive18.manifest;
        java.io.File file23 = explodedArchive18.manifestFile;
        java.io.File file24 = null;
        java.io.File file25 = explodedArchive18.getManifestFile(file24);
        java.util.Iterator<java.io.File> fileItor26 = fileEntryIterator15.listFiles(file25);
        java.util.ArrayDeque<java.util.Iterator<java.io.File>> fileItorQueue27 = new java.util.ArrayDeque<java.util.Iterator<java.io.File>>();
        boolean boolean28 = fileItorQueue27.add(fileItor26);
        fileEntryIterator2.stack = fileItorQueue27;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive30 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest31 = explodedArchive30.manifest;
        explodedArchive30.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive34 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest35 = explodedArchive34.manifest;
        explodedArchive34.recursive = false;
        java.util.jar.Manifest manifest38 = explodedArchive34.manifest;
        java.io.File file39 = explodedArchive34.manifestFile;
        java.io.File file40 = null;
        java.io.File file41 = explodedArchive34.getManifestFile(file40);
        explodedArchive30.manifestFile = file40;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive43 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest44 = explodedArchive43.manifest;
        explodedArchive43.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive47 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest48 = explodedArchive47.manifest;
        explodedArchive47.recursive = false;
        java.util.jar.Manifest manifest51 = explodedArchive47.manifest;
        java.io.File file52 = explodedArchive47.manifestFile;
        java.io.File file53 = null;
        java.io.File file54 = explodedArchive47.getManifestFile(file53);
        explodedArchive43.manifestFile = file53;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive56 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest57 = explodedArchive56.manifest;
        explodedArchive56.recursive = false;
        java.util.jar.Manifest manifest60 = explodedArchive56.manifest;
        java.io.File file61 = explodedArchive56.manifestFile;
        java.io.File file62 = null;
        java.io.File file63 = explodedArchive56.getManifestFile(file62);
        explodedArchive43.manifestFile = file63;
        explodedArchive30.root = file63;
        java.util.Iterator<java.io.File> fileItor66 = fileEntryIterator2.listFiles(file63);
        java.util.Comparator<java.io.File> fileComparator67 = fileEntryIterator2.entryComparator;
        java.util.Comparator<java.io.File> fileComparator68 = entryComparator0.thenComparing(fileComparator67);
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator69 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file70 = null;
        fileEntryIterator69.current = file70;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive72 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest73 = explodedArchive72.manifest;
        explodedArchive72.recursive = false;
        java.util.jar.Manifest manifest76 = explodedArchive72.manifest;
        java.io.File file77 = explodedArchive72.manifestFile;
        java.io.File file78 = null;
        java.io.File file79 = explodedArchive72.getManifestFile(file78);
        java.util.Iterator<java.io.File> fileItor80 = fileEntryIterator69.listFiles(file79);
        java.io.File file81 = fileEntryIterator69.current;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator82 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file83 = null;
        fileEntryIterator82.current = file83;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive85 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest86 = explodedArchive85.manifest;
        explodedArchive85.recursive = false;
        java.util.jar.Manifest manifest89 = explodedArchive85.manifest;
        java.io.File file90 = explodedArchive85.manifestFile;
        java.io.File file91 = null;
        java.io.File file92 = explodedArchive85.getManifestFile(file91);
        java.util.Iterator<java.io.File> fileItor93 = fileEntryIterator82.listFiles(file92);
        java.util.ArrayDeque<java.util.Iterator<java.io.File>> fileItorQueue94 = new java.util.ArrayDeque<java.util.Iterator<java.io.File>>();
        boolean boolean95 = fileItorQueue94.add(fileItor93);
        fileEntryIterator69.stack = fileItorQueue94;
        boolean boolean97 = fileEntryIterator69.recursive;
        java.util.Comparator<java.io.File> fileComparator98 = fileEntryIterator69.entryComparator;
        java.util.Comparator<java.io.File> fileComparator99 = fileComparator67.thenComparing(fileComparator98);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file12.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file12.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file25.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file25.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file41.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file41.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file54.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file54.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file63.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file63.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest73);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest76);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file77);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file79);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file79.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file79.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor80);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file81);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest86);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest89);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file90);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file92);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file92.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file92.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor93);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + true + "'", boolean95 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator98);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator99);
    }

    @Test
    public void test0127() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0127");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntry fileEntry0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntry();
        java.lang.String str1 = fileEntry0.getName();
        java.io.File file2 = fileEntry0.getFile();
        java.io.File file3 = fileEntry0.file;
        fileEntry0.name = "exploded archive";
        java.io.File file6 = fileEntry0.file;
        fileEntry0.name = "";
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file6);
    }

    @Test
    public void test0128() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0128");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file1 = null;
        fileEntryIterator0.current = file1;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive3 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest4 = explodedArchive3.manifest;
        explodedArchive3.recursive = false;
        java.util.jar.Manifest manifest7 = explodedArchive3.manifest;
        java.io.File file8 = explodedArchive3.manifestFile;
        java.io.File file9 = null;
        java.io.File file10 = explodedArchive3.getManifestFile(file9);
        java.util.Iterator<java.io.File> fileItor11 = fileEntryIterator0.listFiles(file10);
        java.io.File file12 = fileEntryIterator0.root;
        java.io.File file13 = fileEntryIterator0.root;
        java.io.File file14 = fileEntryIterator0.current;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator15 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        boolean boolean16 = fileEntryIterator15.hasNext();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator17 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator18 = entryComparator17.reversed();
        java.util.Comparator<java.io.File> fileComparator19 = fileComparator18.reversed();
        fileEntryIterator15.entryComparator = fileComparator19;
        java.util.Comparator<java.io.File> fileComparator21 = fileEntryIterator15.entryComparator;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator22 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator23 = entryComparator22.reversed();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator24 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator25 = entryComparator24.reversed();
        java.util.Comparator<java.io.File> fileComparator26 = entryComparator22.thenComparing(fileComparator25);
        java.util.Comparator<java.io.File> fileComparator27 = fileComparator21.thenComparing(fileComparator25);
        fileEntryIterator0.entryComparator = fileComparator21;
        java.util.Comparator<java.io.File> fileComparator29 = fileComparator21.reversed();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator30 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        boolean boolean31 = fileEntryIterator30.hasNext();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator32 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator33 = entryComparator32.reversed();
        java.util.Comparator<java.io.File> fileComparator34 = fileComparator33.reversed();
        fileEntryIterator30.entryComparator = fileComparator34;
        java.util.Comparator<java.io.File> fileComparator36 = fileComparator21.thenComparing(fileComparator34);
        java.util.Comparator<java.io.File> fileComparator37 = fileComparator21.reversed();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator37);
    }

    @Test
    public void test0129() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0129");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator1 = entryComparator0.reversed();
        java.util.Comparator<java.io.File> fileComparator2 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Comparator<java.io.File> fileComparator3 = fileComparator1.thenComparing(fileComparator2);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator1);
    }

    @Test
    public void test0130() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0130");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file1 = null;
        fileEntryIterator0.current = file1;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive3 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.lang.String str4 = explodedArchive3.toString();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive5 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file6 = explodedArchive5.root;
        java.io.File file7 = null;
        explodedArchive5.manifestFile = file7;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive9 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest10 = explodedArchive9.manifest;
        explodedArchive9.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive13 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest14 = explodedArchive13.manifest;
        explodedArchive13.recursive = false;
        java.util.jar.Manifest manifest17 = explodedArchive13.manifest;
        java.io.File file18 = explodedArchive13.manifestFile;
        java.io.File file19 = null;
        java.io.File file20 = explodedArchive13.getManifestFile(file19);
        explodedArchive9.manifestFile = file19;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive22 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest23 = explodedArchive22.manifest;
        explodedArchive22.recursive = false;
        java.util.jar.Manifest manifest26 = explodedArchive22.manifest;
        java.io.File file27 = explodedArchive22.manifestFile;
        java.io.File file28 = null;
        java.io.File file29 = explodedArchive22.getManifestFile(file28);
        explodedArchive9.manifestFile = file29;
        java.io.File file31 = explodedArchive5.getManifestFile(file29);
        java.io.File file32 = explodedArchive3.getManifestFile(file29);
        fileEntryIterator0.root = file29;
        boolean boolean34 = fileEntryIterator0.recursive;
        java.io.File file35 = fileEntryIterator0.current;
        boolean boolean36 = fileEntryIterator0.recursive;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator37 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        boolean boolean38 = fileEntryIterator37.hasNext();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator39 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator40 = entryComparator39.reversed();
        java.util.Comparator<java.io.File> fileComparator41 = fileComparator40.reversed();
        fileEntryIterator37.entryComparator = fileComparator41;
        java.util.Comparator<java.io.File> fileComparator43 = fileEntryIterator37.entryComparator;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator44 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator45 = entryComparator44.reversed();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator46 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator47 = entryComparator46.reversed();
        java.util.Comparator<java.io.File> fileComparator48 = entryComparator44.thenComparing(fileComparator47);
        java.util.Comparator<java.io.File> fileComparator49 = fileComparator43.thenComparing(fileComparator47);
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator50 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator51 = entryComparator50.reversed();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator52 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator53 = entryComparator52.reversed();
        java.util.Comparator<java.io.File> fileComparator54 = entryComparator50.thenComparing(fileComparator53);
        java.util.Comparator<java.io.File> fileComparator55 = fileComparator49.thenComparing((java.util.Comparator<java.io.File>) entryComparator50);
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator56 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        boolean boolean57 = fileEntryIterator56.hasNext();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator58 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator59 = entryComparator58.reversed();
        java.util.Comparator<java.io.File> fileComparator60 = fileComparator59.reversed();
        fileEntryIterator56.entryComparator = fileComparator60;
        java.util.Comparator<java.io.File> fileComparator62 = fileComparator49.thenComparing(fileComparator60);
        java.util.Comparator<java.io.File> fileComparator63 = fileComparator60.reversed();
        fileEntryIterator0.entryComparator = fileComparator63;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str4 + "' != '" + "exploded archive" + "'", str4.equals("exploded archive"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file20.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file20.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file29.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file29.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file31.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file31.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file32.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file32.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator63);
    }

    @Test
    public void test0131() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0131");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest1 = explodedArchive0.manifest;
        explodedArchive0.recursive = false;
        java.io.File file4 = null;
        explodedArchive0.root = file4;
        java.io.File file6 = explodedArchive0.manifestFile;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive7 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file8 = explodedArchive7.root;
        java.io.File file9 = null;
        explodedArchive7.manifestFile = file9;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive11 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest12 = explodedArchive11.manifest;
        explodedArchive11.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive15 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest16 = explodedArchive15.manifest;
        explodedArchive15.recursive = false;
        java.util.jar.Manifest manifest19 = explodedArchive15.manifest;
        java.io.File file20 = explodedArchive15.manifestFile;
        java.io.File file21 = null;
        java.io.File file22 = explodedArchive15.getManifestFile(file21);
        explodedArchive11.manifestFile = file21;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive24 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest25 = explodedArchive24.manifest;
        explodedArchive24.recursive = false;
        java.util.jar.Manifest manifest28 = explodedArchive24.manifest;
        java.io.File file29 = explodedArchive24.manifestFile;
        java.io.File file30 = null;
        java.io.File file31 = explodedArchive24.getManifestFile(file30);
        explodedArchive11.manifestFile = file31;
        java.io.File file33 = explodedArchive7.getManifestFile(file31);
        java.io.File file34 = explodedArchive0.getManifestFile(file31);
        // The following exception was thrown during execution in test generation
        try {
            org.springframework.boot.loader.archive.ExplodedArchive explodedArchive36 = new org.springframework.boot.loader.archive.ExplodedArchive(file31, false);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid source folder META-INF/MANIFEST.MF");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file22.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file22.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file31.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file31.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file33.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file33.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file34.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file34.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
    }

    @Test
    public void test0132() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0132");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.lang.String str1 = explodedArchive0.toString();
        explodedArchive0.recursive = true;
        java.io.File file4 = null;
        java.io.File file5 = explodedArchive0.getManifestFile(file4);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Spliterator<org.springframework.boot.loader.archive.Archive.Entry> entrySpliterator6 = explodedArchive0.spliterator();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str1 + "' != '" + "exploded archive" + "'", str1.equals("exploded archive"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file5.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file5.toString(), "META-INF/MANIFEST.MF");
    }

    @Test
    public void test0133() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0133");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest1 = explodedArchive0.manifest;
        explodedArchive0.recursive = false;
        java.io.File file4 = null;
        explodedArchive0.root = file4;
        java.io.File file6 = explodedArchive0.root;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive7 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest8 = explodedArchive7.manifest;
        explodedArchive7.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive11 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest12 = explodedArchive11.manifest;
        explodedArchive11.recursive = false;
        java.util.jar.Manifest manifest15 = explodedArchive11.manifest;
        java.io.File file16 = explodedArchive11.manifestFile;
        java.io.File file17 = null;
        java.io.File file18 = explodedArchive11.getManifestFile(file17);
        explodedArchive7.manifestFile = file17;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive20 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest21 = explodedArchive20.manifest;
        explodedArchive20.recursive = false;
        java.util.jar.Manifest manifest24 = explodedArchive20.manifest;
        java.io.File file25 = explodedArchive20.manifestFile;
        java.io.File file26 = null;
        java.io.File file27 = explodedArchive20.getManifestFile(file26);
        explodedArchive7.manifestFile = file27;
        java.io.File file29 = explodedArchive0.getManifestFile(file27);
        boolean boolean30 = explodedArchive0.recursive;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Spliterator<org.springframework.boot.loader.archive.Archive.Entry> entrySpliterator31 = explodedArchive0.spliterator();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file18.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file18.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file27.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file27.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file29.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file29.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
    }

    @Test
    public void test0134() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0134");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest1 = explodedArchive0.manifest;
        explodedArchive0.recursive = false;
        java.io.File file4 = null;
        explodedArchive0.root = file4;
        java.io.File file6 = explodedArchive0.root;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive7 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest8 = explodedArchive7.manifest;
        explodedArchive7.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive11 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest12 = explodedArchive11.manifest;
        explodedArchive11.recursive = false;
        java.util.jar.Manifest manifest15 = explodedArchive11.manifest;
        java.io.File file16 = explodedArchive11.manifestFile;
        java.io.File file17 = null;
        java.io.File file18 = explodedArchive11.getManifestFile(file17);
        explodedArchive7.manifestFile = file17;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive20 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest21 = explodedArchive20.manifest;
        explodedArchive20.recursive = false;
        java.util.jar.Manifest manifest24 = explodedArchive20.manifest;
        java.io.File file25 = explodedArchive20.manifestFile;
        java.io.File file26 = null;
        java.io.File file27 = explodedArchive20.getManifestFile(file26);
        explodedArchive7.manifestFile = file27;
        java.io.File file29 = explodedArchive0.getManifestFile(file27);
        boolean boolean30 = explodedArchive0.recursive;
        org.springframework.boot.loader.archive.Archive.EntryFilter entryFilter31 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<org.springframework.boot.loader.archive.Archive> archiveList32 = explodedArchive0.getNestedArchives(entryFilter31);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file18.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file18.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file27.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file27.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file29.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file29.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
    }

    @Test
    public void test0135() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0135");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        boolean boolean1 = explodedArchive0.recursive;
        java.lang.String str2 = explodedArchive0.toString();
        explodedArchive0.recursive = true;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str2 + "' != '" + "exploded archive" + "'", str2.equals("exploded archive"));
    }

    @Test
    public void test0136() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0136");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest1 = explodedArchive0.manifest;
        explodedArchive0.recursive = false;
        java.io.File file4 = null;
        explodedArchive0.root = file4;
        java.io.File file6 = explodedArchive0.root;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive7 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest8 = explodedArchive7.manifest;
        explodedArchive7.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive11 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest12 = explodedArchive11.manifest;
        explodedArchive11.recursive = false;
        java.util.jar.Manifest manifest15 = explodedArchive11.manifest;
        java.io.File file16 = explodedArchive11.manifestFile;
        java.io.File file17 = null;
        java.io.File file18 = explodedArchive11.getManifestFile(file17);
        explodedArchive7.manifestFile = file17;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive20 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest21 = explodedArchive20.manifest;
        explodedArchive20.recursive = false;
        java.util.jar.Manifest manifest24 = explodedArchive20.manifest;
        java.io.File file25 = explodedArchive20.manifestFile;
        java.io.File file26 = null;
        java.io.File file27 = explodedArchive20.getManifestFile(file26);
        explodedArchive7.manifestFile = file27;
        java.io.File file29 = explodedArchive0.getManifestFile(file27);
        boolean boolean30 = explodedArchive0.recursive;
        // The following exception was thrown during execution in test generation
        try {
            java.net.URL uRL31 = explodedArchive0.getUrl();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file18.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file18.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file27.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file27.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file29.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file29.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
    }

    @Test
    public void test0137() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0137");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        boolean boolean1 = fileEntryIterator0.recursive;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator2 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        boolean boolean3 = fileEntryIterator2.hasNext();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator4 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator5 = entryComparator4.reversed();
        java.util.Comparator<java.io.File> fileComparator6 = fileComparator5.reversed();
        fileEntryIterator2.entryComparator = fileComparator6;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive8 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file9 = explodedArchive8.root;
        java.io.File file10 = null;
        explodedArchive8.manifestFile = file10;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive12 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest13 = explodedArchive12.manifest;
        explodedArchive12.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive16 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest17 = explodedArchive16.manifest;
        explodedArchive16.recursive = false;
        java.util.jar.Manifest manifest20 = explodedArchive16.manifest;
        java.io.File file21 = explodedArchive16.manifestFile;
        java.io.File file22 = null;
        java.io.File file23 = explodedArchive16.getManifestFile(file22);
        explodedArchive12.manifestFile = file22;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive25 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest26 = explodedArchive25.manifest;
        explodedArchive25.recursive = false;
        java.util.jar.Manifest manifest29 = explodedArchive25.manifest;
        java.io.File file30 = explodedArchive25.manifestFile;
        java.io.File file31 = null;
        java.io.File file32 = explodedArchive25.getManifestFile(file31);
        explodedArchive12.manifestFile = file32;
        java.io.File file34 = explodedArchive8.getManifestFile(file32);
        java.util.Iterator<java.io.File> fileItor35 = fileEntryIterator2.listFiles(file34);
        fileEntryIterator0.root = file34;
        java.io.File file37 = fileEntryIterator0.current;
        // The following exception was thrown during execution in test generation
        try {
            fileEntryIterator0.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: remove");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file23.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file23.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file32.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file32.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file34.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file34.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file37);
    }

    @Test
    public void test0138() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0138");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        // The following exception was thrown during execution in test generation
        try {
            org.springframework.boot.loader.archive.Archive.Entry entry1 = fileEntryIterator0.next();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0139() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0139");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file1 = null;
        fileEntryIterator0.current = file1;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive3 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest4 = explodedArchive3.manifest;
        explodedArchive3.recursive = false;
        java.util.jar.Manifest manifest7 = explodedArchive3.manifest;
        java.io.File file8 = explodedArchive3.manifestFile;
        java.io.File file9 = null;
        java.io.File file10 = explodedArchive3.getManifestFile(file9);
        java.util.Iterator<java.io.File> fileItor11 = fileEntryIterator0.listFiles(file10);
        java.io.File file12 = fileEntryIterator0.root;
        java.io.File file13 = fileEntryIterator0.root;
        java.util.Deque<java.util.Iterator<java.io.File>> fileItorQueue14 = fileEntryIterator0.stack;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator15 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator16 = entryComparator15.reversed();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator17 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file18 = null;
        fileEntryIterator17.current = file18;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive20 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest21 = explodedArchive20.manifest;
        explodedArchive20.recursive = false;
        java.util.jar.Manifest manifest24 = explodedArchive20.manifest;
        java.io.File file25 = explodedArchive20.manifestFile;
        java.io.File file26 = null;
        java.io.File file27 = explodedArchive20.getManifestFile(file26);
        java.util.Iterator<java.io.File> fileItor28 = fileEntryIterator17.listFiles(file27);
        java.io.File file29 = fileEntryIterator17.current;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator30 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file31 = null;
        fileEntryIterator30.current = file31;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive33 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest34 = explodedArchive33.manifest;
        explodedArchive33.recursive = false;
        java.util.jar.Manifest manifest37 = explodedArchive33.manifest;
        java.io.File file38 = explodedArchive33.manifestFile;
        java.io.File file39 = null;
        java.io.File file40 = explodedArchive33.getManifestFile(file39);
        java.util.Iterator<java.io.File> fileItor41 = fileEntryIterator30.listFiles(file40);
        java.util.ArrayDeque<java.util.Iterator<java.io.File>> fileItorQueue42 = new java.util.ArrayDeque<java.util.Iterator<java.io.File>>();
        boolean boolean43 = fileItorQueue42.add(fileItor41);
        fileEntryIterator17.stack = fileItorQueue42;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive45 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest46 = explodedArchive45.manifest;
        explodedArchive45.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive49 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest50 = explodedArchive49.manifest;
        explodedArchive49.recursive = false;
        java.util.jar.Manifest manifest53 = explodedArchive49.manifest;
        java.io.File file54 = explodedArchive49.manifestFile;
        java.io.File file55 = null;
        java.io.File file56 = explodedArchive49.getManifestFile(file55);
        explodedArchive45.manifestFile = file55;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive58 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest59 = explodedArchive58.manifest;
        explodedArchive58.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive62 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest63 = explodedArchive62.manifest;
        explodedArchive62.recursive = false;
        java.util.jar.Manifest manifest66 = explodedArchive62.manifest;
        java.io.File file67 = explodedArchive62.manifestFile;
        java.io.File file68 = null;
        java.io.File file69 = explodedArchive62.getManifestFile(file68);
        explodedArchive58.manifestFile = file68;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive71 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest72 = explodedArchive71.manifest;
        explodedArchive71.recursive = false;
        java.util.jar.Manifest manifest75 = explodedArchive71.manifest;
        java.io.File file76 = explodedArchive71.manifestFile;
        java.io.File file77 = null;
        java.io.File file78 = explodedArchive71.getManifestFile(file77);
        explodedArchive58.manifestFile = file78;
        explodedArchive45.root = file78;
        java.util.Iterator<java.io.File> fileItor81 = fileEntryIterator17.listFiles(file78);
        java.util.Comparator<java.io.File> fileComparator82 = fileEntryIterator17.entryComparator;
        java.util.Comparator<java.io.File> fileComparator83 = entryComparator15.thenComparing(fileComparator82);
        fileEntryIterator0.entryComparator = fileComparator83;
        java.lang.Class<?> wildcardClass85 = fileEntryIterator0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItorQueue14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file27.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file27.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file40.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file40.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file56.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file56.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file69.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file69.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest75);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file76);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file78);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file78.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file78.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor81);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator82);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator83);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass85);
    }

    @Test
    public void test0140() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0140");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        boolean boolean1 = fileEntryIterator0.recursive;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator2 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        boolean boolean3 = fileEntryIterator2.hasNext();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator4 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator5 = entryComparator4.reversed();
        java.util.Comparator<java.io.File> fileComparator6 = fileComparator5.reversed();
        fileEntryIterator2.entryComparator = fileComparator6;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive8 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file9 = explodedArchive8.root;
        java.io.File file10 = null;
        explodedArchive8.manifestFile = file10;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive12 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest13 = explodedArchive12.manifest;
        explodedArchive12.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive16 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest17 = explodedArchive16.manifest;
        explodedArchive16.recursive = false;
        java.util.jar.Manifest manifest20 = explodedArchive16.manifest;
        java.io.File file21 = explodedArchive16.manifestFile;
        java.io.File file22 = null;
        java.io.File file23 = explodedArchive16.getManifestFile(file22);
        explodedArchive12.manifestFile = file22;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive25 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest26 = explodedArchive25.manifest;
        explodedArchive25.recursive = false;
        java.util.jar.Manifest manifest29 = explodedArchive25.manifest;
        java.io.File file30 = explodedArchive25.manifestFile;
        java.io.File file31 = null;
        java.io.File file32 = explodedArchive25.getManifestFile(file31);
        explodedArchive12.manifestFile = file32;
        java.io.File file34 = explodedArchive8.getManifestFile(file32);
        java.util.Iterator<java.io.File> fileItor35 = fileEntryIterator2.listFiles(file34);
        fileEntryIterator0.root = file34;
        java.lang.Class<?> wildcardClass37 = fileEntryIterator0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file23.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file23.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file32.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file32.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file34.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file34.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass37);
    }

    @Test
    public void test0141() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0141");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest1 = explodedArchive0.manifest;
        explodedArchive0.recursive = false;
        java.util.jar.Manifest manifest4 = explodedArchive0.manifest;
        org.springframework.boot.loader.archive.Archive.EntryFilter entryFilter5 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<org.springframework.boot.loader.archive.Archive> archiveList6 = explodedArchive0.getNestedArchives(entryFilter5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest4);
    }

    @Test
    public void test0142() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0142");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file1 = null;
        fileEntryIterator0.current = file1;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive3 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest4 = explodedArchive3.manifest;
        explodedArchive3.recursive = false;
        java.util.jar.Manifest manifest7 = explodedArchive3.manifest;
        java.io.File file8 = explodedArchive3.manifestFile;
        java.io.File file9 = null;
        java.io.File file10 = explodedArchive3.getManifestFile(file9);
        java.util.Iterator<java.io.File> fileItor11 = fileEntryIterator0.listFiles(file10);
        java.io.File file12 = fileEntryIterator0.root;
        java.io.File file13 = fileEntryIterator0.current;
        java.io.File file14 = fileEntryIterator0.poll();
        java.io.File file15 = fileEntryIterator0.poll();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator16 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file17 = null;
        fileEntryIterator16.current = file17;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive19 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest20 = explodedArchive19.manifest;
        explodedArchive19.recursive = false;
        java.util.jar.Manifest manifest23 = explodedArchive19.manifest;
        java.io.File file24 = explodedArchive19.manifestFile;
        java.io.File file25 = null;
        java.io.File file26 = explodedArchive19.getManifestFile(file25);
        java.util.Iterator<java.io.File> fileItor27 = fileEntryIterator16.listFiles(file26);
        java.io.File file28 = fileEntryIterator16.current;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator29 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file30 = null;
        fileEntryIterator29.current = file30;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive32 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest33 = explodedArchive32.manifest;
        explodedArchive32.recursive = false;
        java.util.jar.Manifest manifest36 = explodedArchive32.manifest;
        java.io.File file37 = explodedArchive32.manifestFile;
        java.io.File file38 = null;
        java.io.File file39 = explodedArchive32.getManifestFile(file38);
        java.util.Iterator<java.io.File> fileItor40 = fileEntryIterator29.listFiles(file39);
        java.util.ArrayDeque<java.util.Iterator<java.io.File>> fileItorQueue41 = new java.util.ArrayDeque<java.util.Iterator<java.io.File>>();
        boolean boolean42 = fileItorQueue41.add(fileItor40);
        fileEntryIterator16.stack = fileItorQueue41;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive44 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest45 = explodedArchive44.manifest;
        explodedArchive44.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive48 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest49 = explodedArchive48.manifest;
        explodedArchive48.recursive = false;
        java.util.jar.Manifest manifest52 = explodedArchive48.manifest;
        java.io.File file53 = explodedArchive48.manifestFile;
        java.io.File file54 = null;
        java.io.File file55 = explodedArchive48.getManifestFile(file54);
        explodedArchive44.manifestFile = file54;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive57 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest58 = explodedArchive57.manifest;
        explodedArchive57.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive61 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest62 = explodedArchive61.manifest;
        explodedArchive61.recursive = false;
        java.util.jar.Manifest manifest65 = explodedArchive61.manifest;
        java.io.File file66 = explodedArchive61.manifestFile;
        java.io.File file67 = null;
        java.io.File file68 = explodedArchive61.getManifestFile(file67);
        explodedArchive57.manifestFile = file67;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive70 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest71 = explodedArchive70.manifest;
        explodedArchive70.recursive = false;
        java.util.jar.Manifest manifest74 = explodedArchive70.manifest;
        java.io.File file75 = explodedArchive70.manifestFile;
        java.io.File file76 = null;
        java.io.File file77 = explodedArchive70.getManifestFile(file76);
        explodedArchive57.manifestFile = file77;
        explodedArchive44.root = file77;
        java.util.Iterator<java.io.File> fileItor80 = fileEntryIterator16.listFiles(file77);
        java.util.Comparator<java.io.File> fileComparator81 = fileEntryIterator16.entryComparator;
        java.util.Deque<java.util.Iterator<java.io.File>> fileItorQueue82 = fileEntryIterator16.stack;
        fileEntryIterator0.stack = fileItorQueue82;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file26.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file26.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file39.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file39.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file55.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file55.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file68.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file68.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file75);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file77);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file77.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file77.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor80);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator81);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItorQueue82);
    }

    @Test
    public void test0143() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0143");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntry fileEntry0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntry();
        java.lang.String str1 = fileEntry0.getName();
        fileEntry0.name = "hi!";
        java.io.File file4 = fileEntry0.file;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file4);
    }

    @Test
    public void test0144() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0144");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntry fileEntry0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntry();
        java.lang.String str1 = fileEntry0.getName();
        java.io.File file2 = fileEntry0.getFile();
        java.io.File file3 = fileEntry0.file;
        java.io.File file4 = fileEntry0.getFile();
        java.lang.String str5 = fileEntry0.name;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str5);
    }

    @Test
    public void test0145() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0145");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest1 = explodedArchive0.manifest;
        explodedArchive0.recursive = false;
        java.util.jar.Manifest manifest4 = explodedArchive0.manifest;
        java.io.File file5 = explodedArchive0.manifestFile;
        java.io.File file6 = null;
        java.io.File file7 = explodedArchive0.getManifestFile(file6);
        org.springframework.boot.loader.archive.Archive.EntryFilter entryFilter8 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<org.springframework.boot.loader.archive.Archive> archiveList9 = explodedArchive0.getNestedArchives(entryFilter8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file7.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file7.toString(), "META-INF/MANIFEST.MF");
    }

    @Test
    public void test0146() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0146");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest1 = explodedArchive0.manifest;
        explodedArchive0.recursive = false;
        java.io.File file4 = null;
        explodedArchive0.root = file4;
        java.io.File file6 = explodedArchive0.root;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive7 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest8 = explodedArchive7.manifest;
        explodedArchive7.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive11 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest12 = explodedArchive11.manifest;
        explodedArchive11.recursive = false;
        java.util.jar.Manifest manifest15 = explodedArchive11.manifest;
        java.io.File file16 = explodedArchive11.manifestFile;
        java.io.File file17 = null;
        java.io.File file18 = explodedArchive11.getManifestFile(file17);
        explodedArchive7.manifestFile = file17;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive20 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest21 = explodedArchive20.manifest;
        explodedArchive20.recursive = false;
        java.util.jar.Manifest manifest24 = explodedArchive20.manifest;
        java.io.File file25 = explodedArchive20.manifestFile;
        java.io.File file26 = null;
        java.io.File file27 = explodedArchive20.getManifestFile(file26);
        explodedArchive7.manifestFile = file27;
        java.io.File file29 = explodedArchive0.getManifestFile(file27);
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive30 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest31 = explodedArchive30.manifest;
        explodedArchive30.recursive = false;
        java.io.File file34 = null;
        explodedArchive30.root = file34;
        java.io.File file36 = explodedArchive30.manifestFile;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive37 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file38 = explodedArchive37.root;
        java.io.File file39 = null;
        explodedArchive37.manifestFile = file39;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive41 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest42 = explodedArchive41.manifest;
        explodedArchive41.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive45 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest46 = explodedArchive45.manifest;
        explodedArchive45.recursive = false;
        java.util.jar.Manifest manifest49 = explodedArchive45.manifest;
        java.io.File file50 = explodedArchive45.manifestFile;
        java.io.File file51 = null;
        java.io.File file52 = explodedArchive45.getManifestFile(file51);
        explodedArchive41.manifestFile = file51;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive54 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest55 = explodedArchive54.manifest;
        explodedArchive54.recursive = false;
        java.util.jar.Manifest manifest58 = explodedArchive54.manifest;
        java.io.File file59 = explodedArchive54.manifestFile;
        java.io.File file60 = null;
        java.io.File file61 = explodedArchive54.getManifestFile(file60);
        explodedArchive41.manifestFile = file61;
        java.io.File file63 = explodedArchive37.getManifestFile(file61);
        java.io.File file64 = explodedArchive30.getManifestFile(file61);
        explodedArchive0.manifestFile = file61;
        boolean boolean66 = explodedArchive0.recursive;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Spliterator<org.springframework.boot.loader.archive.Archive.Entry> entrySpliterator67 = explodedArchive0.spliterator();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file18.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file18.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file27.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file27.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file29.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file29.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file52.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file52.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file61.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file61.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file63.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file63.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file64.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file64.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
    }

    @Test
    public void test0147() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0147");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file1 = null;
        fileEntryIterator0.current = file1;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive3 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest4 = explodedArchive3.manifest;
        explodedArchive3.recursive = false;
        java.util.jar.Manifest manifest7 = explodedArchive3.manifest;
        java.io.File file8 = explodedArchive3.manifestFile;
        java.io.File file9 = null;
        java.io.File file10 = explodedArchive3.getManifestFile(file9);
        java.util.Iterator<java.io.File> fileItor11 = fileEntryIterator0.listFiles(file10);
        java.io.File file12 = fileEntryIterator0.root;
        java.io.File file13 = fileEntryIterator0.root;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator14 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file15 = null;
        fileEntryIterator14.current = file15;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive17 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest18 = explodedArchive17.manifest;
        explodedArchive17.recursive = false;
        java.util.jar.Manifest manifest21 = explodedArchive17.manifest;
        java.io.File file22 = explodedArchive17.manifestFile;
        java.io.File file23 = null;
        java.io.File file24 = explodedArchive17.getManifestFile(file23);
        java.util.Iterator<java.io.File> fileItor25 = fileEntryIterator14.listFiles(file24);
        java.util.ArrayDeque<java.util.Iterator<java.io.File>> fileItorQueue26 = new java.util.ArrayDeque<java.util.Iterator<java.io.File>>();
        boolean boolean27 = fileItorQueue26.add(fileItor25);
        fileEntryIterator0.stack = fileItorQueue26;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator29 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file30 = null;
        fileEntryIterator29.current = file30;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive32 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest33 = explodedArchive32.manifest;
        explodedArchive32.recursive = false;
        java.util.jar.Manifest manifest36 = explodedArchive32.manifest;
        java.io.File file37 = explodedArchive32.manifestFile;
        java.io.File file38 = null;
        java.io.File file39 = explodedArchive32.getManifestFile(file38);
        java.util.Iterator<java.io.File> fileItor40 = fileEntryIterator29.listFiles(file39);
        java.io.File file41 = fileEntryIterator29.root;
        java.io.File file42 = fileEntryIterator29.root;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator43 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file44 = null;
        fileEntryIterator43.current = file44;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive46 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest47 = explodedArchive46.manifest;
        explodedArchive46.recursive = false;
        java.util.jar.Manifest manifest50 = explodedArchive46.manifest;
        java.io.File file51 = explodedArchive46.manifestFile;
        java.io.File file52 = null;
        java.io.File file53 = explodedArchive46.getManifestFile(file52);
        java.util.Iterator<java.io.File> fileItor54 = fileEntryIterator43.listFiles(file53);
        java.util.ArrayDeque<java.util.Iterator<java.io.File>> fileItorQueue55 = new java.util.ArrayDeque<java.util.Iterator<java.io.File>>();
        boolean boolean56 = fileItorQueue55.add(fileItor54);
        fileEntryIterator29.stack = fileItorQueue55;
        fileEntryIterator0.stack = fileItorQueue55;
        boolean boolean59 = fileEntryIterator0.recursive;
        // The following exception was thrown during execution in test generation
        try {
            org.springframework.boot.loader.archive.Archive.Entry entry60 = fileEntryIterator0.next();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file24.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file24.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file39.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file39.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file53.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file53.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
    }

    @Test
    public void test0148() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0148");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator1 = entryComparator0.reversed();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive2 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file3 = explodedArchive2.root;
        java.io.File file4 = null;
        explodedArchive2.manifestFile = file4;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive6 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest7 = explodedArchive6.manifest;
        explodedArchive6.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive10 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest11 = explodedArchive10.manifest;
        explodedArchive10.recursive = false;
        java.util.jar.Manifest manifest14 = explodedArchive10.manifest;
        java.io.File file15 = explodedArchive10.manifestFile;
        java.io.File file16 = null;
        java.io.File file17 = explodedArchive10.getManifestFile(file16);
        explodedArchive6.manifestFile = file16;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive19 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest20 = explodedArchive19.manifest;
        explodedArchive19.recursive = false;
        java.util.jar.Manifest manifest23 = explodedArchive19.manifest;
        java.io.File file24 = explodedArchive19.manifestFile;
        java.io.File file25 = null;
        java.io.File file26 = explodedArchive19.getManifestFile(file25);
        explodedArchive6.manifestFile = file26;
        java.io.File file28 = explodedArchive2.getManifestFile(file26);
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive29 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest30 = explodedArchive29.manifest;
        explodedArchive29.recursive = false;
        java.io.File file33 = null;
        explodedArchive29.root = file33;
        java.io.File file35 = explodedArchive29.root;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive36 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest37 = explodedArchive36.manifest;
        explodedArchive36.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive40 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest41 = explodedArchive40.manifest;
        explodedArchive40.recursive = false;
        java.util.jar.Manifest manifest44 = explodedArchive40.manifest;
        java.io.File file45 = explodedArchive40.manifestFile;
        java.io.File file46 = null;
        java.io.File file47 = explodedArchive40.getManifestFile(file46);
        explodedArchive36.manifestFile = file46;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive49 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest50 = explodedArchive49.manifest;
        explodedArchive49.recursive = false;
        java.util.jar.Manifest manifest53 = explodedArchive49.manifest;
        java.io.File file54 = explodedArchive49.manifestFile;
        java.io.File file55 = null;
        java.io.File file56 = explodedArchive49.getManifestFile(file55);
        explodedArchive36.manifestFile = file56;
        java.io.File file58 = explodedArchive29.getManifestFile(file56);
        int int59 = entryComparator0.compare(file28, file56);
        java.lang.Class<?> wildcardClass60 = file56.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file17.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file17.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file26.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file26.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file28.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file28.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file47.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file47.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file56.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file56.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file58.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file58.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 21 + "'", int59 == 21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass60);
    }

    @Test
    public void test0149() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0149");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file1 = null;
        fileEntryIterator0.current = file1;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive3 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.lang.String str4 = explodedArchive3.toString();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive5 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file6 = explodedArchive5.root;
        java.io.File file7 = null;
        explodedArchive5.manifestFile = file7;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive9 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest10 = explodedArchive9.manifest;
        explodedArchive9.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive13 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest14 = explodedArchive13.manifest;
        explodedArchive13.recursive = false;
        java.util.jar.Manifest manifest17 = explodedArchive13.manifest;
        java.io.File file18 = explodedArchive13.manifestFile;
        java.io.File file19 = null;
        java.io.File file20 = explodedArchive13.getManifestFile(file19);
        explodedArchive9.manifestFile = file19;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive22 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest23 = explodedArchive22.manifest;
        explodedArchive22.recursive = false;
        java.util.jar.Manifest manifest26 = explodedArchive22.manifest;
        java.io.File file27 = explodedArchive22.manifestFile;
        java.io.File file28 = null;
        java.io.File file29 = explodedArchive22.getManifestFile(file28);
        explodedArchive9.manifestFile = file29;
        java.io.File file31 = explodedArchive5.getManifestFile(file29);
        java.io.File file32 = explodedArchive3.getManifestFile(file29);
        fileEntryIterator0.root = file29;
        boolean boolean34 = fileEntryIterator0.recursive;
        java.io.File file35 = fileEntryIterator0.current;
        boolean boolean36 = fileEntryIterator0.recursive;
        java.io.File file37 = fileEntryIterator0.root;
        // The following exception was thrown during execution in test generation
        try {
            fileEntryIterator0.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: remove");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str4 + "' != '" + "exploded archive" + "'", str4.equals("exploded archive"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file20.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file20.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file29.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file29.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file31.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file31.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file32.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file32.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file37.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file37.toString(), "META-INF/MANIFEST.MF");
    }

    @Test
    public void test0150() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0150");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest1 = explodedArchive0.manifest;
        explodedArchive0.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive4 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest5 = explodedArchive4.manifest;
        explodedArchive4.recursive = false;
        java.util.jar.Manifest manifest8 = explodedArchive4.manifest;
        java.io.File file9 = explodedArchive4.manifestFile;
        java.io.File file10 = null;
        java.io.File file11 = explodedArchive4.getManifestFile(file10);
        explodedArchive0.manifestFile = file10;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive13 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest14 = explodedArchive13.manifest;
        explodedArchive13.recursive = false;
        java.util.jar.Manifest manifest17 = explodedArchive13.manifest;
        java.io.File file18 = explodedArchive13.manifestFile;
        java.io.File file19 = null;
        java.io.File file20 = explodedArchive13.getManifestFile(file19);
        explodedArchive0.manifestFile = file20;
        boolean boolean22 = explodedArchive0.recursive;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Spliterator<org.springframework.boot.loader.archive.Archive.Entry> entrySpliterator23 = explodedArchive0.spliterator();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file11.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file11.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file20.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file20.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test0151() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0151");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive1 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest2 = explodedArchive1.manifest;
        explodedArchive1.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive5 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest6 = explodedArchive5.manifest;
        explodedArchive5.recursive = false;
        java.util.jar.Manifest manifest9 = explodedArchive5.manifest;
        java.io.File file10 = explodedArchive5.manifestFile;
        java.io.File file11 = null;
        java.io.File file12 = explodedArchive5.getManifestFile(file11);
        explodedArchive1.manifestFile = file11;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive14 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest15 = explodedArchive14.manifest;
        explodedArchive14.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive18 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest19 = explodedArchive18.manifest;
        explodedArchive18.recursive = false;
        java.util.jar.Manifest manifest22 = explodedArchive18.manifest;
        java.io.File file23 = explodedArchive18.manifestFile;
        java.io.File file24 = null;
        java.io.File file25 = explodedArchive18.getManifestFile(file24);
        explodedArchive14.manifestFile = file24;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive27 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest28 = explodedArchive27.manifest;
        explodedArchive27.recursive = false;
        java.util.jar.Manifest manifest31 = explodedArchive27.manifest;
        java.io.File file32 = explodedArchive27.manifestFile;
        java.io.File file33 = null;
        java.io.File file34 = explodedArchive27.getManifestFile(file33);
        explodedArchive14.manifestFile = file34;
        explodedArchive1.root = file34;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator37 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file38 = null;
        fileEntryIterator37.current = file38;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive40 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest41 = explodedArchive40.manifest;
        explodedArchive40.recursive = false;
        java.util.jar.Manifest manifest44 = explodedArchive40.manifest;
        java.io.File file45 = explodedArchive40.manifestFile;
        java.io.File file46 = null;
        java.io.File file47 = explodedArchive40.getManifestFile(file46);
        java.util.Iterator<java.io.File> fileItor48 = fileEntryIterator37.listFiles(file47);
        int int49 = entryComparator0.compare(file34, file47);
        java.lang.Class<?> wildcardClass50 = file47.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file12.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file12.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file25.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file25.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file34.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file34.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file47.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file47.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass50);
    }

    @Test
    public void test0152() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0152");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest1 = explodedArchive0.manifest;
        explodedArchive0.recursive = false;
        java.util.jar.Manifest manifest4 = explodedArchive0.manifest;
        java.io.File file5 = explodedArchive0.manifestFile;
        java.io.File file6 = null;
        java.io.File file7 = explodedArchive0.getManifestFile(file6);
        java.lang.String str8 = explodedArchive0.toString();
        org.springframework.boot.loader.archive.Archive.EntryFilter entryFilter9 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<org.springframework.boot.loader.archive.Archive> archiveList10 = explodedArchive0.getNestedArchives(entryFilter9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file7.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file7.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str8 + "' != '" + "exploded archive" + "'", str8.equals("exploded archive"));
    }

    @Test
    public void test0153() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0153");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        boolean boolean1 = fileEntryIterator0.hasNext();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator2 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator3 = entryComparator2.reversed();
        java.util.Comparator<java.io.File> fileComparator4 = fileComparator3.reversed();
        fileEntryIterator0.entryComparator = fileComparator4;
        java.util.Comparator<java.io.File> fileComparator6 = fileEntryIterator0.entryComparator;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator7 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator8 = entryComparator7.reversed();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator9 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator10 = entryComparator9.reversed();
        java.util.Comparator<java.io.File> fileComparator11 = entryComparator7.thenComparing(fileComparator10);
        java.util.Comparator<java.io.File> fileComparator12 = fileComparator6.thenComparing(fileComparator10);
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator13 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator14 = entryComparator13.reversed();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator15 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file16 = null;
        fileEntryIterator15.current = file16;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive18 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest19 = explodedArchive18.manifest;
        explodedArchive18.recursive = false;
        java.util.jar.Manifest manifest22 = explodedArchive18.manifest;
        java.io.File file23 = explodedArchive18.manifestFile;
        java.io.File file24 = null;
        java.io.File file25 = explodedArchive18.getManifestFile(file24);
        java.util.Iterator<java.io.File> fileItor26 = fileEntryIterator15.listFiles(file25);
        java.io.File file27 = fileEntryIterator15.current;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator28 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file29 = null;
        fileEntryIterator28.current = file29;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive31 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest32 = explodedArchive31.manifest;
        explodedArchive31.recursive = false;
        java.util.jar.Manifest manifest35 = explodedArchive31.manifest;
        java.io.File file36 = explodedArchive31.manifestFile;
        java.io.File file37 = null;
        java.io.File file38 = explodedArchive31.getManifestFile(file37);
        java.util.Iterator<java.io.File> fileItor39 = fileEntryIterator28.listFiles(file38);
        java.util.ArrayDeque<java.util.Iterator<java.io.File>> fileItorQueue40 = new java.util.ArrayDeque<java.util.Iterator<java.io.File>>();
        boolean boolean41 = fileItorQueue40.add(fileItor39);
        fileEntryIterator15.stack = fileItorQueue40;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive43 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest44 = explodedArchive43.manifest;
        explodedArchive43.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive47 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest48 = explodedArchive47.manifest;
        explodedArchive47.recursive = false;
        java.util.jar.Manifest manifest51 = explodedArchive47.manifest;
        java.io.File file52 = explodedArchive47.manifestFile;
        java.io.File file53 = null;
        java.io.File file54 = explodedArchive47.getManifestFile(file53);
        explodedArchive43.manifestFile = file53;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive56 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest57 = explodedArchive56.manifest;
        explodedArchive56.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive60 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest61 = explodedArchive60.manifest;
        explodedArchive60.recursive = false;
        java.util.jar.Manifest manifest64 = explodedArchive60.manifest;
        java.io.File file65 = explodedArchive60.manifestFile;
        java.io.File file66 = null;
        java.io.File file67 = explodedArchive60.getManifestFile(file66);
        explodedArchive56.manifestFile = file66;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive69 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest70 = explodedArchive69.manifest;
        explodedArchive69.recursive = false;
        java.util.jar.Manifest manifest73 = explodedArchive69.manifest;
        java.io.File file74 = explodedArchive69.manifestFile;
        java.io.File file75 = null;
        java.io.File file76 = explodedArchive69.getManifestFile(file75);
        explodedArchive56.manifestFile = file76;
        explodedArchive43.root = file76;
        java.util.Iterator<java.io.File> fileItor79 = fileEntryIterator15.listFiles(file76);
        java.util.Comparator<java.io.File> fileComparator80 = fileEntryIterator15.entryComparator;
        java.util.Comparator<java.io.File> fileComparator81 = entryComparator13.thenComparing(fileComparator80);
        java.util.Comparator<java.io.File> fileComparator82 = fileComparator12.thenComparing(fileComparator81);
        java.util.Comparator<java.io.File> fileComparator83 = fileComparator81.reversed();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file25.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file25.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file38.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file38.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file54.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file54.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file67.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file67.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest73);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file76);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file76.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file76.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor79);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator80);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator81);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator82);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator83);
    }

    @Test
    public void test0154() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0154");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest1 = explodedArchive0.manifest;
        explodedArchive0.recursive = false;
        java.io.File file4 = null;
        explodedArchive0.root = file4;
        java.io.File file6 = explodedArchive0.root;
        java.util.jar.Manifest manifest7 = null;
        explodedArchive0.manifest = manifest7;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntry fileEntry9 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntry();
        java.lang.String str10 = fileEntry9.name;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator11 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file12 = null;
        fileEntryIterator11.current = file12;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive14 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.lang.String str15 = explodedArchive14.toString();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive16 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file17 = explodedArchive16.root;
        java.io.File file18 = null;
        explodedArchive16.manifestFile = file18;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive20 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest21 = explodedArchive20.manifest;
        explodedArchive20.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive24 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest25 = explodedArchive24.manifest;
        explodedArchive24.recursive = false;
        java.util.jar.Manifest manifest28 = explodedArchive24.manifest;
        java.io.File file29 = explodedArchive24.manifestFile;
        java.io.File file30 = null;
        java.io.File file31 = explodedArchive24.getManifestFile(file30);
        explodedArchive20.manifestFile = file30;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive33 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest34 = explodedArchive33.manifest;
        explodedArchive33.recursive = false;
        java.util.jar.Manifest manifest37 = explodedArchive33.manifest;
        java.io.File file38 = explodedArchive33.manifestFile;
        java.io.File file39 = null;
        java.io.File file40 = explodedArchive33.getManifestFile(file39);
        explodedArchive20.manifestFile = file40;
        java.io.File file42 = explodedArchive16.getManifestFile(file40);
        java.io.File file43 = explodedArchive14.getManifestFile(file40);
        fileEntryIterator11.root = file40;
        fileEntry9.file = file40;
        java.io.File file46 = fileEntry9.getFile();
        java.io.File file47 = fileEntry9.getFile();
        fileEntry9.name = "";
        // The following exception was thrown during execution in test generation
        try {
            org.springframework.boot.loader.archive.Archive archive50 = explodedArchive0.getNestedArchive((org.springframework.boot.loader.archive.Archive.Entry) fileEntry9);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: File must exist");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str15 + "' != '" + "exploded archive" + "'", str15.equals("exploded archive"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file31.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file31.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file40.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file40.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file42.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file42.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file43.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file43.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file46.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file46.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file47.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file47.toString(), "META-INF/MANIFEST.MF");
    }

    @Test
    public void test0155() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0155");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.lang.String str1 = explodedArchive0.toString();
        explodedArchive0.recursive = true;
        java.io.File file4 = null;
        java.io.File file5 = explodedArchive0.getManifestFile(file4);
        java.lang.Class<?> wildcardClass6 = file5.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str1 + "' != '" + "exploded archive" + "'", str1.equals("exploded archive"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file5.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file5.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void test0156() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0156");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file1 = null;
        fileEntryIterator0.current = file1;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive3 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.lang.String str4 = explodedArchive3.toString();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive5 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file6 = explodedArchive5.root;
        java.io.File file7 = null;
        explodedArchive5.manifestFile = file7;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive9 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest10 = explodedArchive9.manifest;
        explodedArchive9.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive13 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest14 = explodedArchive13.manifest;
        explodedArchive13.recursive = false;
        java.util.jar.Manifest manifest17 = explodedArchive13.manifest;
        java.io.File file18 = explodedArchive13.manifestFile;
        java.io.File file19 = null;
        java.io.File file20 = explodedArchive13.getManifestFile(file19);
        explodedArchive9.manifestFile = file19;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive22 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest23 = explodedArchive22.manifest;
        explodedArchive22.recursive = false;
        java.util.jar.Manifest manifest26 = explodedArchive22.manifest;
        java.io.File file27 = explodedArchive22.manifestFile;
        java.io.File file28 = null;
        java.io.File file29 = explodedArchive22.getManifestFile(file28);
        explodedArchive9.manifestFile = file29;
        java.io.File file31 = explodedArchive5.getManifestFile(file29);
        java.io.File file32 = explodedArchive3.getManifestFile(file29);
        fileEntryIterator0.root = file29;
        java.io.File file34 = fileEntryIterator0.root;
        // The following exception was thrown during execution in test generation
        try {
            org.springframework.boot.loader.archive.ExplodedArchive explodedArchive35 = new org.springframework.boot.loader.archive.ExplodedArchive(file34);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid source folder META-INF/MANIFEST.MF");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str4 + "' != '" + "exploded archive" + "'", str4.equals("exploded archive"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file20.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file20.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file29.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file29.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file31.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file31.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file32.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file32.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file34.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file34.toString(), "META-INF/MANIFEST.MF");
    }

    @Test
    public void test0157() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0157");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file1 = explodedArchive0.root;
        java.io.File file2 = null;
        explodedArchive0.manifestFile = file2;
        java.io.File file4 = explodedArchive0.root;
        java.util.jar.Manifest manifest5 = null;
        explodedArchive0.manifest = manifest5;
        java.lang.String str7 = explodedArchive0.toString();
        org.springframework.boot.loader.archive.Archive.EntryFilter entryFilter8 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<org.springframework.boot.loader.archive.Archive> archiveList9 = explodedArchive0.getNestedArchives(entryFilter8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str7 + "' != '" + "exploded archive" + "'", str7.equals("exploded archive"));
    }

    @Test
    public void test0158() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0158");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file1 = explodedArchive0.root;
        java.io.File file2 = explodedArchive0.manifestFile;
        java.util.jar.Manifest manifest3 = null;
        explodedArchive0.manifest = manifest3;
        explodedArchive0.recursive = true;
        java.io.File file7 = explodedArchive0.root;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file7);
    }

    @Test
    public void test0159() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0159");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntry fileEntry0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntry();
        java.lang.String str1 = fileEntry0.getName();
        java.io.File file2 = fileEntry0.getFile();
        java.io.File file3 = fileEntry0.file;
        fileEntry0.name = "exploded archive";
        java.io.File file6 = fileEntry0.file;
        java.lang.String str7 = fileEntry0.getName();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str7 + "' != '" + "exploded archive" + "'", str7.equals("exploded archive"));
    }

    @Test
    public void test0160() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0160");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file1 = null;
        fileEntryIterator0.current = file1;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive3 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest4 = explodedArchive3.manifest;
        explodedArchive3.recursive = false;
        java.util.jar.Manifest manifest7 = explodedArchive3.manifest;
        java.io.File file8 = explodedArchive3.manifestFile;
        java.io.File file9 = null;
        java.io.File file10 = explodedArchive3.getManifestFile(file9);
        java.util.Iterator<java.io.File> fileItor11 = fileEntryIterator0.listFiles(file10);
        java.io.File file12 = fileEntryIterator0.root;
        java.io.File file13 = fileEntryIterator0.poll();
        java.util.Comparator<java.io.File> fileComparator14 = fileEntryIterator0.entryComparator;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator15 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        boolean boolean16 = fileEntryIterator15.hasNext();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator17 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator18 = entryComparator17.reversed();
        java.util.Comparator<java.io.File> fileComparator19 = fileComparator18.reversed();
        fileEntryIterator15.entryComparator = fileComparator19;
        java.util.Comparator<java.io.File> fileComparator21 = fileEntryIterator15.entryComparator;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator22 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator23 = entryComparator22.reversed();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator24 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator25 = entryComparator24.reversed();
        java.util.Comparator<java.io.File> fileComparator26 = entryComparator22.thenComparing(fileComparator25);
        java.util.Comparator<java.io.File> fileComparator27 = fileComparator21.thenComparing(fileComparator25);
        fileEntryIterator0.entryComparator = fileComparator27;
        java.io.File file29 = fileEntryIterator0.root;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator30 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file31 = null;
        fileEntryIterator30.current = file31;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive33 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest34 = explodedArchive33.manifest;
        explodedArchive33.recursive = false;
        java.util.jar.Manifest manifest37 = explodedArchive33.manifest;
        java.io.File file38 = explodedArchive33.manifestFile;
        java.io.File file39 = null;
        java.io.File file40 = explodedArchive33.getManifestFile(file39);
        java.util.Iterator<java.io.File> fileItor41 = fileEntryIterator30.listFiles(file40);
        boolean boolean42 = fileEntryIterator30.hasNext();
        java.util.Comparator<java.io.File> fileComparator43 = fileEntryIterator30.entryComparator;
        fileEntryIterator0.entryComparator = fileComparator43;
        java.io.File file45 = fileEntryIterator0.root;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator46 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file47 = null;
        fileEntryIterator46.current = file47;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive49 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.lang.String str50 = explodedArchive49.toString();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive51 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file52 = explodedArchive51.root;
        java.io.File file53 = null;
        explodedArchive51.manifestFile = file53;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive55 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest56 = explodedArchive55.manifest;
        explodedArchive55.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive59 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest60 = explodedArchive59.manifest;
        explodedArchive59.recursive = false;
        java.util.jar.Manifest manifest63 = explodedArchive59.manifest;
        java.io.File file64 = explodedArchive59.manifestFile;
        java.io.File file65 = null;
        java.io.File file66 = explodedArchive59.getManifestFile(file65);
        explodedArchive55.manifestFile = file65;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive68 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest69 = explodedArchive68.manifest;
        explodedArchive68.recursive = false;
        java.util.jar.Manifest manifest72 = explodedArchive68.manifest;
        java.io.File file73 = explodedArchive68.manifestFile;
        java.io.File file74 = null;
        java.io.File file75 = explodedArchive68.getManifestFile(file74);
        explodedArchive55.manifestFile = file75;
        java.io.File file77 = explodedArchive51.getManifestFile(file75);
        java.io.File file78 = explodedArchive49.getManifestFile(file75);
        fileEntryIterator46.root = file75;
        boolean boolean80 = fileEntryIterator46.recursive;
        java.io.File file81 = fileEntryIterator46.current;
        boolean boolean82 = fileEntryIterator46.recursive;
        java.io.File file83 = fileEntryIterator46.root;
        fileEntryIterator0.root = file83;
        fileEntryIterator0.recursive = true;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file40.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file40.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str50 + "' != '" + "exploded archive" + "'", str50.equals("exploded archive"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file66.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file66.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file73);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file75);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file75.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file75.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file77);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file77.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file77.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file78);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file78.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file78.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file81);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file83);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file83.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file83.toString(), "META-INF/MANIFEST.MF");
    }

    @Test
    public void test0161() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0161");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        boolean boolean1 = explodedArchive0.recursive;
        java.lang.String str2 = explodedArchive0.toString();
        boolean boolean3 = explodedArchive0.recursive;
        org.springframework.boot.loader.archive.Archive.EntryFilter entryFilter4 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<org.springframework.boot.loader.archive.Archive> archiveList5 = explodedArchive0.getNestedArchives(entryFilter4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str2 + "' != '" + "exploded archive" + "'", str2.equals("exploded archive"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test0162() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0162");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest1 = explodedArchive0.manifest;
        explodedArchive0.recursive = false;
        java.util.jar.Manifest manifest4 = explodedArchive0.manifest;
        java.io.File file5 = explodedArchive0.manifestFile;
        java.io.File file6 = null;
        java.io.File file7 = explodedArchive0.getManifestFile(file6);
        java.lang.Class<?> wildcardClass8 = explodedArchive0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file7.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file7.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test0163() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0163");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator1 = entryComparator0.reversed();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator2 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file3 = null;
        fileEntryIterator2.current = file3;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive5 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest6 = explodedArchive5.manifest;
        explodedArchive5.recursive = false;
        java.util.jar.Manifest manifest9 = explodedArchive5.manifest;
        java.io.File file10 = explodedArchive5.manifestFile;
        java.io.File file11 = null;
        java.io.File file12 = explodedArchive5.getManifestFile(file11);
        java.util.Iterator<java.io.File> fileItor13 = fileEntryIterator2.listFiles(file12);
        java.io.File file14 = fileEntryIterator2.current;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator15 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file16 = null;
        fileEntryIterator15.current = file16;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive18 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest19 = explodedArchive18.manifest;
        explodedArchive18.recursive = false;
        java.util.jar.Manifest manifest22 = explodedArchive18.manifest;
        java.io.File file23 = explodedArchive18.manifestFile;
        java.io.File file24 = null;
        java.io.File file25 = explodedArchive18.getManifestFile(file24);
        java.util.Iterator<java.io.File> fileItor26 = fileEntryIterator15.listFiles(file25);
        java.util.ArrayDeque<java.util.Iterator<java.io.File>> fileItorQueue27 = new java.util.ArrayDeque<java.util.Iterator<java.io.File>>();
        boolean boolean28 = fileItorQueue27.add(fileItor26);
        fileEntryIterator2.stack = fileItorQueue27;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive30 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest31 = explodedArchive30.manifest;
        explodedArchive30.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive34 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest35 = explodedArchive34.manifest;
        explodedArchive34.recursive = false;
        java.util.jar.Manifest manifest38 = explodedArchive34.manifest;
        java.io.File file39 = explodedArchive34.manifestFile;
        java.io.File file40 = null;
        java.io.File file41 = explodedArchive34.getManifestFile(file40);
        explodedArchive30.manifestFile = file40;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive43 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest44 = explodedArchive43.manifest;
        explodedArchive43.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive47 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest48 = explodedArchive47.manifest;
        explodedArchive47.recursive = false;
        java.util.jar.Manifest manifest51 = explodedArchive47.manifest;
        java.io.File file52 = explodedArchive47.manifestFile;
        java.io.File file53 = null;
        java.io.File file54 = explodedArchive47.getManifestFile(file53);
        explodedArchive43.manifestFile = file53;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive56 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest57 = explodedArchive56.manifest;
        explodedArchive56.recursive = false;
        java.util.jar.Manifest manifest60 = explodedArchive56.manifest;
        java.io.File file61 = explodedArchive56.manifestFile;
        java.io.File file62 = null;
        java.io.File file63 = explodedArchive56.getManifestFile(file62);
        explodedArchive43.manifestFile = file63;
        explodedArchive30.root = file63;
        java.util.Iterator<java.io.File> fileItor66 = fileEntryIterator2.listFiles(file63);
        java.util.Comparator<java.io.File> fileComparator67 = fileEntryIterator2.entryComparator;
        java.util.Comparator<java.io.File> fileComparator68 = entryComparator0.thenComparing(fileComparator67);
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator69 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        boolean boolean70 = fileEntryIterator69.recursive;
        java.io.File file71 = fileEntryIterator69.current;
        boolean boolean72 = fileEntryIterator69.hasNext();
        boolean boolean73 = fileEntryIterator69.recursive;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator74 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator75 = entryComparator74.reversed();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator76 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator77 = entryComparator76.reversed();
        java.util.Comparator<java.io.File> fileComparator78 = entryComparator74.thenComparing(fileComparator77);
        fileEntryIterator69.entryComparator = fileComparator78;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator80 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator81 = entryComparator80.reversed();
        java.util.Comparator<java.io.File> fileComparator82 = entryComparator80.reversed();
        java.util.Comparator<java.io.File> fileComparator83 = fileComparator78.thenComparing(fileComparator82);
        java.util.Comparator<java.io.File> fileComparator84 = fileComparator68.thenComparing(fileComparator83);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file12.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file12.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file25.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file25.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file41.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file41.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file54.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file54.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file63.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file63.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator75);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator77);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator78);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator81);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator82);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator83);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator84);
    }

    @Test
    public void test0164() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0164");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file1 = explodedArchive0.root;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive2 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest3 = explodedArchive2.manifest;
        explodedArchive2.recursive = false;
        java.util.jar.Manifest manifest6 = explodedArchive2.manifest;
        java.io.File file7 = explodedArchive2.manifestFile;
        java.io.File file8 = null;
        java.io.File file9 = explodedArchive2.getManifestFile(file8);
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator10 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file11 = null;
        fileEntryIterator10.current = file11;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive13 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.lang.String str14 = explodedArchive13.toString();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive15 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file16 = explodedArchive15.root;
        java.io.File file17 = null;
        explodedArchive15.manifestFile = file17;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive19 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest20 = explodedArchive19.manifest;
        explodedArchive19.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive23 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest24 = explodedArchive23.manifest;
        explodedArchive23.recursive = false;
        java.util.jar.Manifest manifest27 = explodedArchive23.manifest;
        java.io.File file28 = explodedArchive23.manifestFile;
        java.io.File file29 = null;
        java.io.File file30 = explodedArchive23.getManifestFile(file29);
        explodedArchive19.manifestFile = file29;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive32 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest33 = explodedArchive32.manifest;
        explodedArchive32.recursive = false;
        java.util.jar.Manifest manifest36 = explodedArchive32.manifest;
        java.io.File file37 = explodedArchive32.manifestFile;
        java.io.File file38 = null;
        java.io.File file39 = explodedArchive32.getManifestFile(file38);
        explodedArchive19.manifestFile = file39;
        java.io.File file41 = explodedArchive15.getManifestFile(file39);
        java.io.File file42 = explodedArchive13.getManifestFile(file39);
        fileEntryIterator10.root = file39;
        explodedArchive2.root = file39;
        java.io.File file45 = explodedArchive0.getManifestFile(file39);
        java.util.jar.Manifest manifest46 = null;
        explodedArchive0.manifest = manifest46;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Spliterator<org.springframework.boot.loader.archive.Archive.Entry> entrySpliterator48 = explodedArchive0.spliterator();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file9.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file9.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str14 + "' != '" + "exploded archive" + "'", str14.equals("exploded archive"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file30.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file30.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file39.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file39.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file41.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file41.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file42.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file42.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file45.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file45.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
    }

    @Test
    public void test0165() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0165");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntry fileEntry0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntry();
        java.io.File file1 = fileEntry0.file;
        java.lang.String str2 = fileEntry0.name;
        java.io.File file3 = fileEntry0.file;
        java.lang.String str4 = fileEntry0.name;
        java.io.File file5 = fileEntry0.file;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file5);
    }

    @Test
    public void test0166() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0166");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest1 = explodedArchive0.manifest;
        explodedArchive0.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive4 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest5 = explodedArchive4.manifest;
        explodedArchive4.recursive = false;
        java.util.jar.Manifest manifest8 = explodedArchive4.manifest;
        java.io.File file9 = explodedArchive4.manifestFile;
        java.io.File file10 = null;
        java.io.File file11 = explodedArchive4.getManifestFile(file10);
        explodedArchive0.manifestFile = file10;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive13 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest14 = explodedArchive13.manifest;
        explodedArchive13.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive17 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest18 = explodedArchive17.manifest;
        explodedArchive17.recursive = false;
        java.util.jar.Manifest manifest21 = explodedArchive17.manifest;
        java.io.File file22 = explodedArchive17.manifestFile;
        java.io.File file23 = null;
        java.io.File file24 = explodedArchive17.getManifestFile(file23);
        explodedArchive13.manifestFile = file23;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive26 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest27 = explodedArchive26.manifest;
        explodedArchive26.recursive = false;
        java.util.jar.Manifest manifest30 = explodedArchive26.manifest;
        java.io.File file31 = explodedArchive26.manifestFile;
        java.io.File file32 = null;
        java.io.File file33 = explodedArchive26.getManifestFile(file32);
        explodedArchive13.manifestFile = file33;
        explodedArchive0.root = file33;
        java.net.URL uRL36 = explodedArchive0.getUrl();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntry fileEntry37 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntry();
        java.lang.String str38 = fileEntry37.name;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator39 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file40 = null;
        fileEntryIterator39.current = file40;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive42 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.lang.String str43 = explodedArchive42.toString();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive44 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file45 = explodedArchive44.root;
        java.io.File file46 = null;
        explodedArchive44.manifestFile = file46;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive48 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest49 = explodedArchive48.manifest;
        explodedArchive48.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive52 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest53 = explodedArchive52.manifest;
        explodedArchive52.recursive = false;
        java.util.jar.Manifest manifest56 = explodedArchive52.manifest;
        java.io.File file57 = explodedArchive52.manifestFile;
        java.io.File file58 = null;
        java.io.File file59 = explodedArchive52.getManifestFile(file58);
        explodedArchive48.manifestFile = file58;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive61 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest62 = explodedArchive61.manifest;
        explodedArchive61.recursive = false;
        java.util.jar.Manifest manifest65 = explodedArchive61.manifest;
        java.io.File file66 = explodedArchive61.manifestFile;
        java.io.File file67 = null;
        java.io.File file68 = explodedArchive61.getManifestFile(file67);
        explodedArchive48.manifestFile = file68;
        java.io.File file70 = explodedArchive44.getManifestFile(file68);
        java.io.File file71 = explodedArchive42.getManifestFile(file68);
        fileEntryIterator39.root = file68;
        fileEntry37.file = file68;
        java.io.File file74 = fileEntry37.file;
        fileEntry37.name = "hi!";
        fileEntry37.name = "hi!";
        // The following exception was thrown during execution in test generation
        try {
            org.springframework.boot.loader.archive.Archive archive79 = explodedArchive0.getNestedArchive((org.springframework.boot.loader.archive.Archive.Entry) fileEntry37);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: File must exist");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file11.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file11.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file24.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file24.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file33.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file33.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(uRL36);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(uRL36.toString(), "file:/server/study-execution/new-nimrod/nimrod-hunoroutput-test-dest/spring-boot/af20dc6cc45c032573413c401f9f73aa75371744/randoop_6/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str43 + "' != '" + "exploded archive" + "'", str43.equals("exploded archive"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file59.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file59.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file68.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file68.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file70.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file70.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file71.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file71.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file74.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file74.toString(), "META-INF/MANIFEST.MF");
    }

    @Test
    public void test0167() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0167");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        boolean boolean1 = explodedArchive0.recursive;
        explodedArchive0.recursive = true;
        org.springframework.boot.loader.archive.Archive.EntryFilter entryFilter4 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<org.springframework.boot.loader.archive.Archive> archiveList5 = explodedArchive0.getNestedArchives(entryFilter4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
    }

    @Test
    public void test0168() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0168");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntry fileEntry0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntry();
        java.io.File file1 = fileEntry0.file;
        java.lang.String str2 = fileEntry0.name;
        java.io.File file3 = fileEntry0.file;
        java.io.File file4 = fileEntry0.file;
        java.lang.String str5 = fileEntry0.getName();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntry fileEntry6 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntry();
        java.lang.String str7 = fileEntry6.name;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator8 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file9 = null;
        fileEntryIterator8.current = file9;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive11 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.lang.String str12 = explodedArchive11.toString();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive13 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file14 = explodedArchive13.root;
        java.io.File file15 = null;
        explodedArchive13.manifestFile = file15;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive17 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest18 = explodedArchive17.manifest;
        explodedArchive17.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive21 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest22 = explodedArchive21.manifest;
        explodedArchive21.recursive = false;
        java.util.jar.Manifest manifest25 = explodedArchive21.manifest;
        java.io.File file26 = explodedArchive21.manifestFile;
        java.io.File file27 = null;
        java.io.File file28 = explodedArchive21.getManifestFile(file27);
        explodedArchive17.manifestFile = file27;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive30 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest31 = explodedArchive30.manifest;
        explodedArchive30.recursive = false;
        java.util.jar.Manifest manifest34 = explodedArchive30.manifest;
        java.io.File file35 = explodedArchive30.manifestFile;
        java.io.File file36 = null;
        java.io.File file37 = explodedArchive30.getManifestFile(file36);
        explodedArchive17.manifestFile = file37;
        java.io.File file39 = explodedArchive13.getManifestFile(file37);
        java.io.File file40 = explodedArchive11.getManifestFile(file37);
        fileEntryIterator8.root = file37;
        fileEntry6.file = file37;
        fileEntry0.file = file37;
        // The following exception was thrown during execution in test generation
        try {
            org.springframework.boot.loader.archive.ExplodedArchive explodedArchive44 = new org.springframework.boot.loader.archive.ExplodedArchive(file37);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid source folder META-INF/MANIFEST.MF");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str12 + "' != '" + "exploded archive" + "'", str12.equals("exploded archive"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file28.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file28.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file37.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file37.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file39.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file39.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file40.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file40.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
    }

    @Test
    public void test0169() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0169");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file1 = null;
        fileEntryIterator0.current = file1;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive3 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest4 = explodedArchive3.manifest;
        explodedArchive3.recursive = false;
        java.util.jar.Manifest manifest7 = explodedArchive3.manifest;
        java.io.File file8 = explodedArchive3.manifestFile;
        java.io.File file9 = null;
        java.io.File file10 = explodedArchive3.getManifestFile(file9);
        java.util.Iterator<java.io.File> fileItor11 = fileEntryIterator0.listFiles(file10);
        boolean boolean12 = fileEntryIterator0.hasNext();
        java.util.Comparator<java.io.File> fileComparator13 = fileEntryIterator0.entryComparator;
        // The following exception was thrown during execution in test generation
        try {
            fileEntryIterator0.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: remove");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator13);
    }

    @Test
    public void test0170() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0170");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest1 = explodedArchive0.manifest;
        explodedArchive0.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive4 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest5 = explodedArchive4.manifest;
        explodedArchive4.recursive = false;
        java.util.jar.Manifest manifest8 = explodedArchive4.manifest;
        java.io.File file9 = explodedArchive4.manifestFile;
        java.io.File file10 = null;
        java.io.File file11 = explodedArchive4.getManifestFile(file10);
        explodedArchive0.manifestFile = file10;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive13 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest14 = explodedArchive13.manifest;
        explodedArchive13.recursive = false;
        java.util.jar.Manifest manifest17 = explodedArchive13.manifest;
        java.io.File file18 = explodedArchive13.manifestFile;
        java.io.File file19 = null;
        java.io.File file20 = explodedArchive13.getManifestFile(file19);
        explodedArchive0.manifestFile = file20;
        // The following exception was thrown during execution in test generation
        try {
            org.springframework.boot.loader.archive.ExplodedArchive explodedArchive22 = new org.springframework.boot.loader.archive.ExplodedArchive(file20);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid source folder META-INF/MANIFEST.MF");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file11.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file11.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file20.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file20.toString(), "META-INF/MANIFEST.MF");
    }

    @Test
    public void test0171() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0171");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest1 = explodedArchive0.manifest;
        explodedArchive0.recursive = false;
        java.io.File file4 = null;
        explodedArchive0.root = file4;
        java.io.File file6 = explodedArchive0.root;
        java.util.jar.Manifest manifest7 = null;
        explodedArchive0.manifest = manifest7;
        explodedArchive0.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator11 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file12 = null;
        fileEntryIterator11.current = file12;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive14 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest15 = explodedArchive14.manifest;
        explodedArchive14.recursive = false;
        java.util.jar.Manifest manifest18 = explodedArchive14.manifest;
        java.io.File file19 = explodedArchive14.manifestFile;
        java.io.File file20 = null;
        java.io.File file21 = explodedArchive14.getManifestFile(file20);
        java.util.Iterator<java.io.File> fileItor22 = fileEntryIterator11.listFiles(file21);
        explodedArchive0.root = file21;
        // The following exception was thrown during execution in test generation
        try {
            org.springframework.boot.loader.archive.ExplodedArchive explodedArchive25 = new org.springframework.boot.loader.archive.ExplodedArchive(file21, true);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid source folder META-INF/MANIFEST.MF");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file21.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file21.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor22);
    }

    @Test
    public void test0172() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0172");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        boolean boolean1 = fileEntryIterator0.recursive;
        java.io.File file2 = fileEntryIterator0.current;
        boolean boolean3 = fileEntryIterator0.hasNext();
        // The following exception was thrown during execution in test generation
        try {
            org.springframework.boot.loader.archive.Archive.Entry entry4 = fileEntryIterator0.next();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test0173() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0173");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file1 = explodedArchive0.root;
        java.io.File file2 = null;
        explodedArchive0.manifestFile = file2;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive4 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest5 = explodedArchive4.manifest;
        explodedArchive4.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive8 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest9 = explodedArchive8.manifest;
        explodedArchive8.recursive = false;
        java.util.jar.Manifest manifest12 = explodedArchive8.manifest;
        java.io.File file13 = explodedArchive8.manifestFile;
        java.io.File file14 = null;
        java.io.File file15 = explodedArchive8.getManifestFile(file14);
        explodedArchive4.manifestFile = file14;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive17 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest18 = explodedArchive17.manifest;
        explodedArchive17.recursive = false;
        java.util.jar.Manifest manifest21 = explodedArchive17.manifest;
        java.io.File file22 = explodedArchive17.manifestFile;
        java.io.File file23 = null;
        java.io.File file24 = explodedArchive17.getManifestFile(file23);
        explodedArchive4.manifestFile = file24;
        java.io.File file26 = explodedArchive0.getManifestFile(file24);
        java.util.jar.Manifest manifest27 = null;
        explodedArchive0.manifest = manifest27;
        java.lang.Class<?> wildcardClass29 = explodedArchive0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file15.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file15.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file24.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file24.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file26.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file26.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass29);
    }

    @Test
    public void test0174() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0174");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file1 = null;
        fileEntryIterator0.current = file1;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive3 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest4 = explodedArchive3.manifest;
        explodedArchive3.recursive = false;
        java.util.jar.Manifest manifest7 = explodedArchive3.manifest;
        java.io.File file8 = explodedArchive3.manifestFile;
        java.io.File file9 = null;
        java.io.File file10 = explodedArchive3.getManifestFile(file9);
        java.util.Iterator<java.io.File> fileItor11 = fileEntryIterator0.listFiles(file10);
        java.io.File file12 = fileEntryIterator0.current;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator13 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file14 = null;
        fileEntryIterator13.current = file14;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive16 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest17 = explodedArchive16.manifest;
        explodedArchive16.recursive = false;
        java.util.jar.Manifest manifest20 = explodedArchive16.manifest;
        java.io.File file21 = explodedArchive16.manifestFile;
        java.io.File file22 = null;
        java.io.File file23 = explodedArchive16.getManifestFile(file22);
        java.util.Iterator<java.io.File> fileItor24 = fileEntryIterator13.listFiles(file23);
        java.util.ArrayDeque<java.util.Iterator<java.io.File>> fileItorQueue25 = new java.util.ArrayDeque<java.util.Iterator<java.io.File>>();
        boolean boolean26 = fileItorQueue25.add(fileItor24);
        fileEntryIterator0.stack = fileItorQueue25;
        boolean boolean28 = fileEntryIterator0.recursive;
        java.util.Comparator<java.io.File> fileComparator29 = fileEntryIterator0.entryComparator;
        java.lang.Class<?> wildcardClass30 = fileComparator29.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file23.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file23.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass30);
    }

    @Test
    public void test0175() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0175");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest1 = explodedArchive0.manifest;
        explodedArchive0.recursive = false;
        java.util.jar.Manifest manifest4 = explodedArchive0.manifest;
        java.util.jar.Manifest manifest5 = null;
        explodedArchive0.manifest = manifest5;
        java.io.File file7 = explodedArchive0.root;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive8 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest9 = explodedArchive8.manifest;
        explodedArchive8.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive12 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest13 = explodedArchive12.manifest;
        explodedArchive12.recursive = false;
        java.util.jar.Manifest manifest16 = explodedArchive12.manifest;
        java.io.File file17 = explodedArchive12.manifestFile;
        java.io.File file18 = null;
        java.io.File file19 = explodedArchive12.getManifestFile(file18);
        explodedArchive8.manifestFile = file18;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive21 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest22 = explodedArchive21.manifest;
        explodedArchive21.recursive = false;
        java.util.jar.Manifest manifest25 = explodedArchive21.manifest;
        java.io.File file26 = explodedArchive21.manifestFile;
        java.io.File file27 = null;
        java.io.File file28 = explodedArchive21.getManifestFile(file27);
        explodedArchive8.manifestFile = file28;
        explodedArchive0.manifestFile = file28;
        org.springframework.boot.loader.archive.Archive.EntryFilter entryFilter31 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<org.springframework.boot.loader.archive.Archive> archiveList32 = explodedArchive0.getNestedArchives(entryFilter31);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file19.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file19.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file28.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file28.toString(), "META-INF/MANIFEST.MF");
    }

    @Test
    public void test0176() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0176");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest1 = explodedArchive0.manifest;
        java.util.jar.Manifest manifest2 = null;
        explodedArchive0.manifest = manifest2;
        java.io.File file4 = explodedArchive0.root;
        java.lang.String str5 = explodedArchive0.toString();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntry fileEntry6 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntry();
        java.io.File file7 = fileEntry6.getFile();
        java.io.File file8 = fileEntry6.getFile();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive9 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file10 = explodedArchive9.root;
        java.io.File file11 = null;
        explodedArchive9.manifestFile = file11;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive13 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest14 = explodedArchive13.manifest;
        explodedArchive13.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive17 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest18 = explodedArchive17.manifest;
        explodedArchive17.recursive = false;
        java.util.jar.Manifest manifest21 = explodedArchive17.manifest;
        java.io.File file22 = explodedArchive17.manifestFile;
        java.io.File file23 = null;
        java.io.File file24 = explodedArchive17.getManifestFile(file23);
        explodedArchive13.manifestFile = file23;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive26 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest27 = explodedArchive26.manifest;
        explodedArchive26.recursive = false;
        java.util.jar.Manifest manifest30 = explodedArchive26.manifest;
        java.io.File file31 = explodedArchive26.manifestFile;
        java.io.File file32 = null;
        java.io.File file33 = explodedArchive26.getManifestFile(file32);
        explodedArchive13.manifestFile = file33;
        java.io.File file35 = explodedArchive9.getManifestFile(file33);
        fileEntry6.file = file35;
        java.io.File file37 = fileEntry6.file;
        fileEntry6.name = "exploded archive";
        java.io.File file40 = fileEntry6.file;
        fileEntry6.name = "hi!";
        // The following exception was thrown during execution in test generation
        try {
            org.springframework.boot.loader.archive.Archive archive43 = explodedArchive0.getNestedArchive((org.springframework.boot.loader.archive.Archive.Entry) fileEntry6);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: File must exist");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "exploded archive" + "'", str5.equals("exploded archive"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file24.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file24.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file33.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file33.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file35.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file35.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file37.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file37.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file40.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file40.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
    }

    @Test
    public void test0177() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0177");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest1 = explodedArchive0.manifest;
        explodedArchive0.recursive = false;
        java.io.File file4 = null;
        explodedArchive0.root = file4;
        java.io.File file6 = explodedArchive0.root;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive7 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest8 = explodedArchive7.manifest;
        explodedArchive7.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive11 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest12 = explodedArchive11.manifest;
        explodedArchive11.recursive = false;
        java.util.jar.Manifest manifest15 = explodedArchive11.manifest;
        java.io.File file16 = explodedArchive11.manifestFile;
        java.io.File file17 = null;
        java.io.File file18 = explodedArchive11.getManifestFile(file17);
        explodedArchive7.manifestFile = file17;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive20 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest21 = explodedArchive20.manifest;
        explodedArchive20.recursive = false;
        java.util.jar.Manifest manifest24 = explodedArchive20.manifest;
        java.io.File file25 = explodedArchive20.manifestFile;
        java.io.File file26 = null;
        java.io.File file27 = explodedArchive20.getManifestFile(file26);
        explodedArchive7.manifestFile = file27;
        java.io.File file29 = explodedArchive0.getManifestFile(file27);
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive30 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest31 = explodedArchive30.manifest;
        explodedArchive30.recursive = false;
        java.io.File file34 = null;
        explodedArchive30.root = file34;
        java.io.File file36 = explodedArchive30.manifestFile;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive37 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file38 = explodedArchive37.root;
        java.io.File file39 = null;
        explodedArchive37.manifestFile = file39;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive41 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest42 = explodedArchive41.manifest;
        explodedArchive41.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive45 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest46 = explodedArchive45.manifest;
        explodedArchive45.recursive = false;
        java.util.jar.Manifest manifest49 = explodedArchive45.manifest;
        java.io.File file50 = explodedArchive45.manifestFile;
        java.io.File file51 = null;
        java.io.File file52 = explodedArchive45.getManifestFile(file51);
        explodedArchive41.manifestFile = file51;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive54 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest55 = explodedArchive54.manifest;
        explodedArchive54.recursive = false;
        java.util.jar.Manifest manifest58 = explodedArchive54.manifest;
        java.io.File file59 = explodedArchive54.manifestFile;
        java.io.File file60 = null;
        java.io.File file61 = explodedArchive54.getManifestFile(file60);
        explodedArchive41.manifestFile = file61;
        java.io.File file63 = explodedArchive37.getManifestFile(file61);
        java.io.File file64 = explodedArchive30.getManifestFile(file61);
        explodedArchive0.manifestFile = file61;
        boolean boolean66 = explodedArchive0.recursive;
        java.util.jar.Manifest manifest67 = explodedArchive0.getManifest();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator<org.springframework.boot.loader.archive.Archive.Entry> entryItor68 = explodedArchive0.iterator();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file18.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file18.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file27.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file27.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file29.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file29.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file52.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file52.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file61.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file61.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file63.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file63.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file64.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file64.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest67);
    }

    @Test
    public void test0178() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0178");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntry fileEntry0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntry();
        java.lang.String str1 = fileEntry0.name;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator2 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file3 = null;
        fileEntryIterator2.current = file3;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive5 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.lang.String str6 = explodedArchive5.toString();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive7 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file8 = explodedArchive7.root;
        java.io.File file9 = null;
        explodedArchive7.manifestFile = file9;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive11 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest12 = explodedArchive11.manifest;
        explodedArchive11.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive15 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest16 = explodedArchive15.manifest;
        explodedArchive15.recursive = false;
        java.util.jar.Manifest manifest19 = explodedArchive15.manifest;
        java.io.File file20 = explodedArchive15.manifestFile;
        java.io.File file21 = null;
        java.io.File file22 = explodedArchive15.getManifestFile(file21);
        explodedArchive11.manifestFile = file21;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive24 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest25 = explodedArchive24.manifest;
        explodedArchive24.recursive = false;
        java.util.jar.Manifest manifest28 = explodedArchive24.manifest;
        java.io.File file29 = explodedArchive24.manifestFile;
        java.io.File file30 = null;
        java.io.File file31 = explodedArchive24.getManifestFile(file30);
        explodedArchive11.manifestFile = file31;
        java.io.File file33 = explodedArchive7.getManifestFile(file31);
        java.io.File file34 = explodedArchive5.getManifestFile(file31);
        fileEntryIterator2.root = file31;
        fileEntry0.file = file31;
        java.io.File file37 = fileEntry0.file;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive38 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest39 = explodedArchive38.manifest;
        explodedArchive38.recursive = false;
        java.io.File file42 = null;
        explodedArchive38.root = file42;
        java.io.File file44 = explodedArchive38.manifestFile;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive45 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file46 = explodedArchive45.root;
        java.io.File file47 = null;
        explodedArchive45.manifestFile = file47;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive49 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest50 = explodedArchive49.manifest;
        explodedArchive49.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive53 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest54 = explodedArchive53.manifest;
        explodedArchive53.recursive = false;
        java.util.jar.Manifest manifest57 = explodedArchive53.manifest;
        java.io.File file58 = explodedArchive53.manifestFile;
        java.io.File file59 = null;
        java.io.File file60 = explodedArchive53.getManifestFile(file59);
        explodedArchive49.manifestFile = file59;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive62 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest63 = explodedArchive62.manifest;
        explodedArchive62.recursive = false;
        java.util.jar.Manifest manifest66 = explodedArchive62.manifest;
        java.io.File file67 = explodedArchive62.manifestFile;
        java.io.File file68 = null;
        java.io.File file69 = explodedArchive62.getManifestFile(file68);
        explodedArchive49.manifestFile = file69;
        java.io.File file71 = explodedArchive45.getManifestFile(file69);
        java.io.File file72 = explodedArchive38.getManifestFile(file69);
        fileEntry0.file = file72;
        // The following exception was thrown during execution in test generation
        try {
            org.springframework.boot.loader.archive.ExplodedArchive explodedArchive75 = new org.springframework.boot.loader.archive.ExplodedArchive(file72, false);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid source folder META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "exploded archive" + "'", str6.equals("exploded archive"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file22.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file22.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file31.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file31.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file33.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file33.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file34.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file34.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file37.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file37.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file60.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file60.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file69.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file69.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file71.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file71.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file72.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file72.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
    }

    @Test
    public void test0179() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0179");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator1 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator2 = entryComparator1.reversed();
        java.util.Comparator<java.io.File> fileComparator3 = entryComparator1.reversed();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive4 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest5 = explodedArchive4.manifest;
        explodedArchive4.recursive = false;
        java.util.jar.Manifest manifest8 = explodedArchive4.manifest;
        java.io.File file9 = explodedArchive4.manifestFile;
        java.io.File file10 = null;
        java.io.File file11 = explodedArchive4.getManifestFile(file10);
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive12 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest13 = explodedArchive12.manifest;
        explodedArchive12.recursive = false;
        java.io.File file16 = null;
        explodedArchive12.root = file16;
        java.io.File file18 = explodedArchive12.root;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive19 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest20 = explodedArchive19.manifest;
        explodedArchive19.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive23 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest24 = explodedArchive23.manifest;
        explodedArchive23.recursive = false;
        java.util.jar.Manifest manifest27 = explodedArchive23.manifest;
        java.io.File file28 = explodedArchive23.manifestFile;
        java.io.File file29 = null;
        java.io.File file30 = explodedArchive23.getManifestFile(file29);
        explodedArchive19.manifestFile = file29;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive32 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest33 = explodedArchive32.manifest;
        explodedArchive32.recursive = false;
        java.util.jar.Manifest manifest36 = explodedArchive32.manifest;
        java.io.File file37 = explodedArchive32.manifestFile;
        java.io.File file38 = null;
        java.io.File file39 = explodedArchive32.getManifestFile(file38);
        explodedArchive19.manifestFile = file39;
        java.io.File file41 = explodedArchive12.getManifestFile(file39);
        int int42 = entryComparator1.compare(file11, file39);
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive43 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest44 = explodedArchive43.manifest;
        explodedArchive43.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive47 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest48 = explodedArchive47.manifest;
        explodedArchive47.recursive = false;
        java.util.jar.Manifest manifest51 = explodedArchive47.manifest;
        java.io.File file52 = explodedArchive47.manifestFile;
        java.io.File file53 = null;
        java.io.File file54 = explodedArchive47.getManifestFile(file53);
        explodedArchive43.manifestFile = file53;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive56 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest57 = explodedArchive56.manifest;
        explodedArchive56.recursive = false;
        java.util.jar.Manifest manifest60 = explodedArchive56.manifest;
        java.io.File file61 = explodedArchive56.manifestFile;
        java.io.File file62 = null;
        java.io.File file63 = explodedArchive56.getManifestFile(file62);
        explodedArchive43.manifestFile = file63;
        int int65 = entryComparator0.compare(file11, file63);
        // The following exception was thrown during execution in test generation
        try {
            org.springframework.boot.loader.archive.ExplodedArchive explodedArchive67 = new org.springframework.boot.loader.archive.ExplodedArchive(file63, false);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid source folder META-INF/MANIFEST.MF");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file11.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file11.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file30.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file30.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file39.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file39.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file41.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file41.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file54.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file54.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file63.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file63.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
    }

    @Test
    public void test0180() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0180");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file1 = null;
        fileEntryIterator0.current = file1;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive3 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest4 = explodedArchive3.manifest;
        explodedArchive3.recursive = false;
        java.util.jar.Manifest manifest7 = explodedArchive3.manifest;
        java.io.File file8 = explodedArchive3.manifestFile;
        java.io.File file9 = null;
        java.io.File file10 = explodedArchive3.getManifestFile(file9);
        java.util.Iterator<java.io.File> fileItor11 = fileEntryIterator0.listFiles(file10);
        java.io.File file12 = fileEntryIterator0.current;
        boolean boolean13 = fileEntryIterator0.hasNext();
        // The following exception was thrown during execution in test generation
        try {
            fileEntryIterator0.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: remove");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test0181() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0181");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest1 = explodedArchive0.manifest;
        explodedArchive0.recursive = false;
        java.util.jar.Manifest manifest4 = explodedArchive0.manifest;
        java.io.File file5 = explodedArchive0.manifestFile;
        java.io.File file6 = explodedArchive0.root;
        explodedArchive0.recursive = true;
        org.springframework.boot.loader.archive.Archive.EntryFilter entryFilter9 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<org.springframework.boot.loader.archive.Archive> archiveList10 = explodedArchive0.getNestedArchives(entryFilter9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file6);
    }

    @Test
    public void test0182() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0182");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest1 = explodedArchive0.manifest;
        java.util.jar.Manifest manifest2 = null;
        explodedArchive0.manifest = manifest2;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator4 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        boolean boolean5 = fileEntryIterator4.hasNext();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator6 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator7 = entryComparator6.reversed();
        java.util.Comparator<java.io.File> fileComparator8 = fileComparator7.reversed();
        fileEntryIterator4.entryComparator = fileComparator8;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive10 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file11 = explodedArchive10.root;
        java.io.File file12 = null;
        explodedArchive10.manifestFile = file12;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive14 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest15 = explodedArchive14.manifest;
        explodedArchive14.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive18 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest19 = explodedArchive18.manifest;
        explodedArchive18.recursive = false;
        java.util.jar.Manifest manifest22 = explodedArchive18.manifest;
        java.io.File file23 = explodedArchive18.manifestFile;
        java.io.File file24 = null;
        java.io.File file25 = explodedArchive18.getManifestFile(file24);
        explodedArchive14.manifestFile = file24;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive27 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest28 = explodedArchive27.manifest;
        explodedArchive27.recursive = false;
        java.util.jar.Manifest manifest31 = explodedArchive27.manifest;
        java.io.File file32 = explodedArchive27.manifestFile;
        java.io.File file33 = null;
        java.io.File file34 = explodedArchive27.getManifestFile(file33);
        explodedArchive14.manifestFile = file34;
        java.io.File file36 = explodedArchive10.getManifestFile(file34);
        java.util.Iterator<java.io.File> fileItor37 = fileEntryIterator4.listFiles(file36);
        java.io.File file38 = explodedArchive0.getManifestFile(file36);
        java.lang.String str39 = explodedArchive0.toString();
        org.springframework.boot.loader.archive.Archive.EntryFilter entryFilter40 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<org.springframework.boot.loader.archive.Archive> archiveList41 = explodedArchive0.getNestedArchives(entryFilter40);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file25.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file25.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file34.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file34.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file36.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file36.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file38.getParent(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file38.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str39 + "' != '" + "exploded archive" + "'", str39.equals("exploded archive"));
    }

    @Test
    public void test0183() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0183");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.lang.String str1 = explodedArchive0.toString();
        explodedArchive0.recursive = true;
        java.io.File file4 = explodedArchive0.root;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str1 + "' != '" + "exploded archive" + "'", str1.equals("exploded archive"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file4);
    }

    @Test
    public void test0184() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0184");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntry fileEntry0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntry();
        java.io.File file1 = fileEntry0.file;
        java.lang.String str2 = fileEntry0.name;
        java.io.File file3 = fileEntry0.file;
        java.lang.String str4 = fileEntry0.getName();
        java.lang.String str5 = fileEntry0.name;
        java.io.File file6 = fileEntry0.file;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file6);
    }

    @Test
    public void test0185() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0185");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.lang.String str1 = explodedArchive0.toString();
        explodedArchive0.recursive = true;
        java.io.File file4 = null;
        java.io.File file5 = explodedArchive0.getManifestFile(file4);
        org.springframework.boot.loader.archive.Archive.EntryFilter entryFilter6 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<org.springframework.boot.loader.archive.Archive> archiveList7 = explodedArchive0.getNestedArchives(entryFilter6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str1 + "' != '" + "exploded archive" + "'", str1.equals("exploded archive"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file5.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file5.toString(), "META-INF/MANIFEST.MF");
    }

    @Test
    public void test0186() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0186");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file1 = null;
        fileEntryIterator0.current = file1;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive3 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest4 = explodedArchive3.manifest;
        explodedArchive3.recursive = false;
        java.util.jar.Manifest manifest7 = explodedArchive3.manifest;
        java.io.File file8 = explodedArchive3.manifestFile;
        java.io.File file9 = null;
        java.io.File file10 = explodedArchive3.getManifestFile(file9);
        java.util.Iterator<java.io.File> fileItor11 = fileEntryIterator0.listFiles(file10);
        java.util.Comparator<java.io.File> fileComparator12 = fileEntryIterator0.entryComparator;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator13 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file14 = null;
        fileEntryIterator13.current = file14;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive16 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest17 = explodedArchive16.manifest;
        explodedArchive16.recursive = false;
        java.util.jar.Manifest manifest20 = explodedArchive16.manifest;
        java.io.File file21 = explodedArchive16.manifestFile;
        java.io.File file22 = null;
        java.io.File file23 = explodedArchive16.getManifestFile(file22);
        java.util.Iterator<java.io.File> fileItor24 = fileEntryIterator13.listFiles(file23);
        java.io.File file25 = fileEntryIterator13.current;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator26 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file27 = null;
        fileEntryIterator26.current = file27;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive29 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest30 = explodedArchive29.manifest;
        explodedArchive29.recursive = false;
        java.util.jar.Manifest manifest33 = explodedArchive29.manifest;
        java.io.File file34 = explodedArchive29.manifestFile;
        java.io.File file35 = null;
        java.io.File file36 = explodedArchive29.getManifestFile(file35);
        java.util.Iterator<java.io.File> fileItor37 = fileEntryIterator26.listFiles(file36);
        java.io.File file38 = fileEntryIterator26.current;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator39 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file40 = null;
        fileEntryIterator39.current = file40;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive42 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest43 = explodedArchive42.manifest;
        explodedArchive42.recursive = false;
        java.util.jar.Manifest manifest46 = explodedArchive42.manifest;
        java.io.File file47 = explodedArchive42.manifestFile;
        java.io.File file48 = null;
        java.io.File file49 = explodedArchive42.getManifestFile(file48);
        java.util.Iterator<java.io.File> fileItor50 = fileEntryIterator39.listFiles(file49);
        java.util.ArrayDeque<java.util.Iterator<java.io.File>> fileItorQueue51 = new java.util.ArrayDeque<java.util.Iterator<java.io.File>>();
        boolean boolean52 = fileItorQueue51.add(fileItor50);
        fileEntryIterator26.stack = fileItorQueue51;
        fileEntryIterator13.stack = fileItorQueue51;
        fileEntryIterator0.stack = fileItorQueue51;
        java.io.File file56 = fileEntryIterator0.current;
        boolean boolean57 = fileEntryIterator0.recursive;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator58 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        boolean boolean59 = fileEntryIterator58.recursive;
        java.io.File file60 = fileEntryIterator58.current;
        boolean boolean61 = fileEntryIterator58.hasNext();
        boolean boolean62 = fileEntryIterator58.recursive;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator63 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator64 = entryComparator63.reversed();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator65 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator66 = entryComparator65.reversed();
        java.util.Comparator<java.io.File> fileComparator67 = entryComparator63.thenComparing(fileComparator66);
        fileEntryIterator58.entryComparator = fileComparator67;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator69 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file70 = null;
        fileEntryIterator69.current = file70;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive72 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest73 = explodedArchive72.manifest;
        explodedArchive72.recursive = false;
        java.util.jar.Manifest manifest76 = explodedArchive72.manifest;
        java.io.File file77 = explodedArchive72.manifestFile;
        java.io.File file78 = null;
        java.io.File file79 = explodedArchive72.getManifestFile(file78);
        java.util.Iterator<java.io.File> fileItor80 = fileEntryIterator69.listFiles(file79);
        java.io.File file81 = fileEntryIterator69.root;
        java.io.File file82 = fileEntryIterator69.root;
        java.io.File file83 = fileEntryIterator69.current;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator84 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        boolean boolean85 = fileEntryIterator84.hasNext();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator86 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator87 = entryComparator86.reversed();
        java.util.Comparator<java.io.File> fileComparator88 = fileComparator87.reversed();
        fileEntryIterator84.entryComparator = fileComparator88;
        java.util.Comparator<java.io.File> fileComparator90 = fileEntryIterator84.entryComparator;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator91 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator92 = entryComparator91.reversed();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator93 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator94 = entryComparator93.reversed();
        java.util.Comparator<java.io.File> fileComparator95 = entryComparator91.thenComparing(fileComparator94);
        java.util.Comparator<java.io.File> fileComparator96 = fileComparator90.thenComparing(fileComparator94);
        fileEntryIterator69.entryComparator = fileComparator90;
        java.util.Comparator<java.io.File> fileComparator98 = fileComparator67.thenComparing(fileComparator90);
        fileEntryIterator0.entryComparator = fileComparator67;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file23.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file23.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file36.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file36.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file49.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file49.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest73);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest76);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file77);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file79);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file79.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file79.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor80);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file81);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file82);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file83);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator87);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator88);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator90);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator92);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator94);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator95);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator96);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator98);
    }

    @Test
    public void test0187() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0187");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest1 = explodedArchive0.manifest;
        explodedArchive0.recursive = false;
        java.util.jar.Manifest manifest4 = explodedArchive0.manifest;
        java.io.File file5 = explodedArchive0.manifestFile;
        java.io.File file6 = null;
        java.io.File file7 = explodedArchive0.getManifestFile(file6);
        java.lang.String str8 = explodedArchive0.toString();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntry fileEntry9 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntry();
        java.io.File file10 = fileEntry9.file;
        java.lang.String str11 = fileEntry9.name;
        java.io.File file12 = fileEntry9.file;
        java.io.File file13 = fileEntry9.file;
        java.lang.String str14 = fileEntry9.name;
        // The following exception was thrown during execution in test generation
        try {
            org.springframework.boot.loader.archive.Archive archive15 = explodedArchive0.getNestedArchive((org.springframework.boot.loader.archive.Archive.Entry) fileEntry9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file7.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file7.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str8 + "' != '" + "exploded archive" + "'", str8.equals("exploded archive"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str14);
    }

    @Test
    public void test0188() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0188");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntry fileEntry0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntry();
        java.lang.String str1 = fileEntry0.name;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator2 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file3 = null;
        fileEntryIterator2.current = file3;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive5 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest6 = explodedArchive5.manifest;
        explodedArchive5.recursive = false;
        java.util.jar.Manifest manifest9 = explodedArchive5.manifest;
        java.io.File file10 = explodedArchive5.manifestFile;
        java.io.File file11 = null;
        java.io.File file12 = explodedArchive5.getManifestFile(file11);
        java.util.Iterator<java.io.File> fileItor13 = fileEntryIterator2.listFiles(file12);
        java.io.File file14 = fileEntryIterator2.current;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator15 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file16 = null;
        fileEntryIterator15.current = file16;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive18 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest19 = explodedArchive18.manifest;
        explodedArchive18.recursive = false;
        java.util.jar.Manifest manifest22 = explodedArchive18.manifest;
        java.io.File file23 = explodedArchive18.manifestFile;
        java.io.File file24 = null;
        java.io.File file25 = explodedArchive18.getManifestFile(file24);
        java.util.Iterator<java.io.File> fileItor26 = fileEntryIterator15.listFiles(file25);
        java.util.ArrayDeque<java.util.Iterator<java.io.File>> fileItorQueue27 = new java.util.ArrayDeque<java.util.Iterator<java.io.File>>();
        boolean boolean28 = fileItorQueue27.add(fileItor26);
        fileEntryIterator2.stack = fileItorQueue27;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive30 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest31 = explodedArchive30.manifest;
        explodedArchive30.recursive = false;
        java.io.File file34 = null;
        explodedArchive30.root = file34;
        java.io.File file36 = explodedArchive30.root;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive37 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest38 = explodedArchive37.manifest;
        explodedArchive37.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive41 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest42 = explodedArchive41.manifest;
        explodedArchive41.recursive = false;
        java.util.jar.Manifest manifest45 = explodedArchive41.manifest;
        java.io.File file46 = explodedArchive41.manifestFile;
        java.io.File file47 = null;
        java.io.File file48 = explodedArchive41.getManifestFile(file47);
        explodedArchive37.manifestFile = file47;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive50 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest51 = explodedArchive50.manifest;
        explodedArchive50.recursive = false;
        java.util.jar.Manifest manifest54 = explodedArchive50.manifest;
        java.io.File file55 = explodedArchive50.manifestFile;
        java.io.File file56 = null;
        java.io.File file57 = explodedArchive50.getManifestFile(file56);
        explodedArchive37.manifestFile = file57;
        java.io.File file59 = explodedArchive30.getManifestFile(file57);
        fileEntryIterator2.root = file57;
        fileEntry0.file = file57;
        boolean boolean62 = fileEntry0.isDirectory();
        boolean boolean63 = fileEntry0.isDirectory();
        fileEntry0.name = "";
        boolean boolean66 = fileEntry0.isDirectory();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file12.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file12.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file25.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file25.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file48.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file48.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file57.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file57.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file59.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file59.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
    }

    @Test
    public void test0189() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0189");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest1 = explodedArchive0.manifest;
        explodedArchive0.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive4 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest5 = explodedArchive4.manifest;
        explodedArchive4.recursive = false;
        java.util.jar.Manifest manifest8 = explodedArchive4.manifest;
        java.io.File file9 = explodedArchive4.manifestFile;
        java.io.File file10 = null;
        java.io.File file11 = explodedArchive4.getManifestFile(file10);
        explodedArchive0.manifestFile = file10;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive13 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest14 = explodedArchive13.manifest;
        explodedArchive13.recursive = false;
        java.util.jar.Manifest manifest17 = explodedArchive13.manifest;
        java.io.File file18 = explodedArchive13.manifestFile;
        java.io.File file19 = null;
        java.io.File file20 = explodedArchive13.getManifestFile(file19);
        explodedArchive0.manifestFile = file20;
        boolean boolean22 = explodedArchive0.recursive;
        explodedArchive0.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntry fileEntry25 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntry();
        java.lang.String str26 = fileEntry25.getName();
        java.io.File file27 = fileEntry25.getFile();
        java.lang.String str28 = fileEntry25.getName();
        java.io.File file29 = fileEntry25.getFile();
        java.lang.String str30 = fileEntry25.name;
        java.lang.String str31 = fileEntry25.name;
        // The following exception was thrown during execution in test generation
        try {
            org.springframework.boot.loader.archive.Archive archive32 = explodedArchive0.getNestedArchive((org.springframework.boot.loader.archive.Archive.Entry) fileEntry25);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file11.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file11.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file20.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file20.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str31);
    }

    @Test
    public void test0190() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0190");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntry fileEntry0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntry();
        java.io.File file1 = fileEntry0.file;
        java.lang.String str2 = fileEntry0.name;
        fileEntry0.name = "";
        fileEntry0.name = "exploded archive";
        java.lang.String str7 = fileEntry0.name;
        java.lang.String str8 = fileEntry0.name;
        java.lang.String str9 = fileEntry0.getName();
        java.lang.String str10 = fileEntry0.name;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str7 + "' != '" + "exploded archive" + "'", str7.equals("exploded archive"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str8 + "' != '" + "exploded archive" + "'", str8.equals("exploded archive"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str9 + "' != '" + "exploded archive" + "'", str9.equals("exploded archive"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str10 + "' != '" + "exploded archive" + "'", str10.equals("exploded archive"));
    }

    @Test
    public void test0191() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0191");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file1 = explodedArchive0.root;
        java.io.File file2 = explodedArchive0.manifestFile;
        java.util.jar.Manifest manifest3 = null;
        explodedArchive0.manifest = manifest3;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator5 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file6 = null;
        fileEntryIterator5.current = file6;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive8 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.lang.String str9 = explodedArchive8.toString();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive10 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file11 = explodedArchive10.root;
        java.io.File file12 = null;
        explodedArchive10.manifestFile = file12;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive14 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest15 = explodedArchive14.manifest;
        explodedArchive14.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive18 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest19 = explodedArchive18.manifest;
        explodedArchive18.recursive = false;
        java.util.jar.Manifest manifest22 = explodedArchive18.manifest;
        java.io.File file23 = explodedArchive18.manifestFile;
        java.io.File file24 = null;
        java.io.File file25 = explodedArchive18.getManifestFile(file24);
        explodedArchive14.manifestFile = file24;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive27 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest28 = explodedArchive27.manifest;
        explodedArchive27.recursive = false;
        java.util.jar.Manifest manifest31 = explodedArchive27.manifest;
        java.io.File file32 = explodedArchive27.manifestFile;
        java.io.File file33 = null;
        java.io.File file34 = explodedArchive27.getManifestFile(file33);
        explodedArchive14.manifestFile = file34;
        java.io.File file36 = explodedArchive10.getManifestFile(file34);
        java.io.File file37 = explodedArchive8.getManifestFile(file34);
        fileEntryIterator5.root = file34;
        java.io.File file39 = explodedArchive0.getManifestFile(file34);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator<org.springframework.boot.loader.archive.Archive.Entry> entryItor40 = explodedArchive0.iterator();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str9 + "' != '" + "exploded archive" + "'", str9.equals("exploded archive"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file25.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file25.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file34.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file34.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file36.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file36.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file37.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file37.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file39.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file39.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
    }

    @Test
    public void test0192() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0192");
        java.lang.String[] strArray1 = new java.lang.String[] { "" };
        java.util.LinkedHashSet<java.lang.String> strSet2 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet2, strArray1);
        org.springframework.boot.loader.archive.ExplodedArchive.SKIPPED_NAMES = strSet2;
        org.springframework.boot.loader.archive.ExplodedArchive.SKIPPED_NAMES = strSet2;
        org.springframework.boot.loader.archive.ExplodedArchive.SKIPPED_NAMES = strSet2;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(strArray1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
    }

    @Test
    public void test0193() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0193");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        boolean boolean1 = fileEntryIterator0.recursive;
        java.io.File file2 = fileEntryIterator0.current;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator3 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        boolean boolean4 = fileEntryIterator3.hasNext();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator5 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator6 = entryComparator5.reversed();
        java.util.Comparator<java.io.File> fileComparator7 = fileComparator6.reversed();
        fileEntryIterator3.entryComparator = fileComparator7;
        java.util.Comparator<java.io.File> fileComparator9 = fileEntryIterator3.entryComparator;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator10 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator11 = entryComparator10.reversed();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator12 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator13 = entryComparator12.reversed();
        java.util.Comparator<java.io.File> fileComparator14 = entryComparator10.thenComparing(fileComparator13);
        java.util.Comparator<java.io.File> fileComparator15 = fileComparator9.thenComparing(fileComparator13);
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator16 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator17 = entryComparator16.reversed();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator18 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator19 = entryComparator18.reversed();
        java.util.Comparator<java.io.File> fileComparator20 = entryComparator16.thenComparing(fileComparator19);
        java.util.Comparator<java.io.File> fileComparator21 = fileComparator15.thenComparing((java.util.Comparator<java.io.File>) entryComparator16);
        fileEntryIterator0.entryComparator = fileComparator15;
        // The following exception was thrown during execution in test generation
        try {
            fileEntryIterator0.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: remove");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator21);
    }

    @Test
    public void test0194() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0194");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest1 = explodedArchive0.manifest;
        explodedArchive0.recursive = false;
        java.io.File file4 = null;
        explodedArchive0.root = file4;
        java.io.File file6 = explodedArchive0.root;
        java.util.jar.Manifest manifest7 = null;
        explodedArchive0.manifest = manifest7;
        explodedArchive0.recursive = false;
        // The following exception was thrown during execution in test generation
        try {
            java.net.URL uRL11 = explodedArchive0.getUrl();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file6);
    }

    @Test
    public void test0195() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0195");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        boolean boolean1 = fileEntryIterator0.hasNext();
        java.io.File file2 = fileEntryIterator0.root;
        boolean boolean3 = fileEntryIterator0.hasNext();
        java.util.Comparator<java.io.File> fileComparator4 = fileEntryIterator0.entryComparator;
        java.io.File file5 = fileEntryIterator0.current;
        // The following exception was thrown during execution in test generation
        try {
            fileEntryIterator0.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: remove");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file5);
    }

    @Test
    public void test0196() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0196");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file1 = explodedArchive0.root;
        java.io.File file2 = null;
        explodedArchive0.manifestFile = file2;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive4 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest5 = explodedArchive4.manifest;
        explodedArchive4.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive8 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest9 = explodedArchive8.manifest;
        explodedArchive8.recursive = false;
        java.util.jar.Manifest manifest12 = explodedArchive8.manifest;
        java.io.File file13 = explodedArchive8.manifestFile;
        java.io.File file14 = null;
        java.io.File file15 = explodedArchive8.getManifestFile(file14);
        explodedArchive4.manifestFile = file14;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive17 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest18 = explodedArchive17.manifest;
        explodedArchive17.recursive = false;
        java.util.jar.Manifest manifest21 = explodedArchive17.manifest;
        java.io.File file22 = explodedArchive17.manifestFile;
        java.io.File file23 = null;
        java.io.File file24 = explodedArchive17.getManifestFile(file23);
        explodedArchive4.manifestFile = file24;
        java.io.File file26 = explodedArchive0.getManifestFile(file24);
        java.io.File file27 = explodedArchive0.root;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator28 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        boolean boolean29 = fileEntryIterator28.hasNext();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator30 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator31 = entryComparator30.reversed();
        java.util.Comparator<java.io.File> fileComparator32 = fileComparator31.reversed();
        fileEntryIterator28.entryComparator = fileComparator32;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive34 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file35 = explodedArchive34.root;
        java.io.File file36 = null;
        explodedArchive34.manifestFile = file36;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive38 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest39 = explodedArchive38.manifest;
        explodedArchive38.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive42 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest43 = explodedArchive42.manifest;
        explodedArchive42.recursive = false;
        java.util.jar.Manifest manifest46 = explodedArchive42.manifest;
        java.io.File file47 = explodedArchive42.manifestFile;
        java.io.File file48 = null;
        java.io.File file49 = explodedArchive42.getManifestFile(file48);
        explodedArchive38.manifestFile = file48;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive51 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest52 = explodedArchive51.manifest;
        explodedArchive51.recursive = false;
        java.util.jar.Manifest manifest55 = explodedArchive51.manifest;
        java.io.File file56 = explodedArchive51.manifestFile;
        java.io.File file57 = null;
        java.io.File file58 = explodedArchive51.getManifestFile(file57);
        explodedArchive38.manifestFile = file58;
        java.io.File file60 = explodedArchive34.getManifestFile(file58);
        java.util.Iterator<java.io.File> fileItor61 = fileEntryIterator28.listFiles(file60);
        explodedArchive0.manifestFile = file60;
        // The following exception was thrown during execution in test generation
        try {
            org.springframework.boot.loader.archive.ExplodedArchive explodedArchive63 = new org.springframework.boot.loader.archive.ExplodedArchive(file60);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid source folder META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file15.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file15.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file24.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file24.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file26.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file26.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file49.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file49.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file58.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file58.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file60.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file60.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor61);
    }

    @Test
    public void test0197() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0197");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        boolean boolean1 = fileEntryIterator0.hasNext();
        java.io.File file2 = fileEntryIterator0.root;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator3 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file4 = null;
        fileEntryIterator3.current = file4;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive6 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest7 = explodedArchive6.manifest;
        explodedArchive6.recursive = false;
        java.util.jar.Manifest manifest10 = explodedArchive6.manifest;
        java.io.File file11 = explodedArchive6.manifestFile;
        java.io.File file12 = null;
        java.io.File file13 = explodedArchive6.getManifestFile(file12);
        java.util.Iterator<java.io.File> fileItor14 = fileEntryIterator3.listFiles(file13);
        java.io.File file15 = fileEntryIterator3.current;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator16 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file17 = null;
        fileEntryIterator16.current = file17;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive19 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest20 = explodedArchive19.manifest;
        explodedArchive19.recursive = false;
        java.util.jar.Manifest manifest23 = explodedArchive19.manifest;
        java.io.File file24 = explodedArchive19.manifestFile;
        java.io.File file25 = null;
        java.io.File file26 = explodedArchive19.getManifestFile(file25);
        java.util.Iterator<java.io.File> fileItor27 = fileEntryIterator16.listFiles(file26);
        java.util.ArrayDeque<java.util.Iterator<java.io.File>> fileItorQueue28 = new java.util.ArrayDeque<java.util.Iterator<java.io.File>>();
        boolean boolean29 = fileItorQueue28.add(fileItor27);
        fileEntryIterator3.stack = fileItorQueue28;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive31 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest32 = explodedArchive31.manifest;
        explodedArchive31.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive35 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest36 = explodedArchive35.manifest;
        explodedArchive35.recursive = false;
        java.util.jar.Manifest manifest39 = explodedArchive35.manifest;
        java.io.File file40 = explodedArchive35.manifestFile;
        java.io.File file41 = null;
        java.io.File file42 = explodedArchive35.getManifestFile(file41);
        explodedArchive31.manifestFile = file41;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive44 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest45 = explodedArchive44.manifest;
        explodedArchive44.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive48 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest49 = explodedArchive48.manifest;
        explodedArchive48.recursive = false;
        java.util.jar.Manifest manifest52 = explodedArchive48.manifest;
        java.io.File file53 = explodedArchive48.manifestFile;
        java.io.File file54 = null;
        java.io.File file55 = explodedArchive48.getManifestFile(file54);
        explodedArchive44.manifestFile = file54;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive57 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest58 = explodedArchive57.manifest;
        explodedArchive57.recursive = false;
        java.util.jar.Manifest manifest61 = explodedArchive57.manifest;
        java.io.File file62 = explodedArchive57.manifestFile;
        java.io.File file63 = null;
        java.io.File file64 = explodedArchive57.getManifestFile(file63);
        explodedArchive44.manifestFile = file64;
        explodedArchive31.root = file64;
        java.util.Iterator<java.io.File> fileItor67 = fileEntryIterator3.listFiles(file64);
        java.util.Comparator<java.io.File> fileComparator68 = fileEntryIterator3.entryComparator;
        fileEntryIterator0.entryComparator = fileComparator68;
        java.io.File file70 = fileEntryIterator0.root;
        java.io.File file71 = fileEntryIterator0.root;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file13.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file13.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file26.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file26.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file42.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file42.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file55.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file55.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file64.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file64.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file71);
    }

    @Test
    public void test0198() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0198");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file1 = null;
        fileEntryIterator0.current = file1;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive3 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest4 = explodedArchive3.manifest;
        explodedArchive3.recursive = false;
        java.util.jar.Manifest manifest7 = explodedArchive3.manifest;
        java.io.File file8 = explodedArchive3.manifestFile;
        java.io.File file9 = null;
        java.io.File file10 = explodedArchive3.getManifestFile(file9);
        java.util.Iterator<java.io.File> fileItor11 = fileEntryIterator0.listFiles(file10);
        java.io.File file12 = fileEntryIterator0.root;
        java.io.File file13 = fileEntryIterator0.root;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator14 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file15 = null;
        fileEntryIterator14.current = file15;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive17 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest18 = explodedArchive17.manifest;
        explodedArchive17.recursive = false;
        java.util.jar.Manifest manifest21 = explodedArchive17.manifest;
        java.io.File file22 = explodedArchive17.manifestFile;
        java.io.File file23 = null;
        java.io.File file24 = explodedArchive17.getManifestFile(file23);
        java.util.Iterator<java.io.File> fileItor25 = fileEntryIterator14.listFiles(file24);
        java.util.ArrayDeque<java.util.Iterator<java.io.File>> fileItorQueue26 = new java.util.ArrayDeque<java.util.Iterator<java.io.File>>();
        boolean boolean27 = fileItorQueue26.add(fileItor25);
        fileEntryIterator0.stack = fileItorQueue26;
        java.util.Deque<java.util.Iterator<java.io.File>> fileItorQueue29 = fileEntryIterator0.stack;
        // The following exception was thrown during execution in test generation
        try {
            org.springframework.boot.loader.archive.Archive.Entry entry30 = fileEntryIterator0.next();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file24.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file24.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItorQueue29);
    }

    @Test
    public void test0199() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0199");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file1 = explodedArchive0.root;
        java.io.File file2 = null;
        explodedArchive0.manifestFile = file2;
        java.io.File file4 = explodedArchive0.root;
        boolean boolean5 = explodedArchive0.recursive;
        java.lang.String str6 = explodedArchive0.toString();
        java.lang.Class<?> wildcardClass7 = explodedArchive0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "exploded archive" + "'", str6.equals("exploded archive"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test0200() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0200");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest1 = explodedArchive0.manifest;
        explodedArchive0.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive4 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest5 = explodedArchive4.manifest;
        explodedArchive4.recursive = false;
        java.util.jar.Manifest manifest8 = explodedArchive4.manifest;
        java.io.File file9 = explodedArchive4.manifestFile;
        java.io.File file10 = null;
        java.io.File file11 = explodedArchive4.getManifestFile(file10);
        explodedArchive0.manifestFile = file10;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive13 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest14 = explodedArchive13.manifest;
        explodedArchive13.recursive = false;
        java.util.jar.Manifest manifest17 = explodedArchive13.manifest;
        java.io.File file18 = explodedArchive13.manifestFile;
        java.io.File file19 = null;
        java.io.File file20 = explodedArchive13.getManifestFile(file19);
        explodedArchive0.manifestFile = file20;
        boolean boolean22 = explodedArchive0.recursive;
        explodedArchive0.recursive = false;
        // The following exception was thrown during execution in test generation
        try {
            java.net.URL uRL25 = explodedArchive0.getUrl();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file11.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file11.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file20.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file20.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test0201() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0201");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file1 = explodedArchive0.root;
        java.io.File file2 = null;
        explodedArchive0.manifestFile = file2;
        java.io.File file4 = explodedArchive0.root;
        java.lang.String str5 = explodedArchive0.toString();
        java.util.jar.Manifest manifest6 = null;
        explodedArchive0.manifest = manifest6;
        java.io.File file8 = explodedArchive0.root;
        // The following exception was thrown during execution in test generation
        try {
            java.net.URL uRL9 = explodedArchive0.getUrl();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "exploded archive" + "'", str5.equals("exploded archive"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file8);
    }

    @Test
    public void test0202() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0202");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntry fileEntry0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntry();
        java.io.File file1 = fileEntry0.file;
        java.lang.String str2 = fileEntry0.name;
        fileEntry0.name = "";
        fileEntry0.name = "exploded archive";
        java.lang.String str7 = fileEntry0.name;
        java.lang.String str8 = fileEntry0.name;
        java.io.File file9 = fileEntry0.getFile();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str7 + "' != '" + "exploded archive" + "'", str7.equals("exploded archive"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str8 + "' != '" + "exploded archive" + "'", str8.equals("exploded archive"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file9);
    }

    @Test
    public void test0203() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0203");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        boolean boolean1 = fileEntryIterator0.hasNext();
        java.io.File file2 = fileEntryIterator0.root;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator3 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file4 = null;
        fileEntryIterator3.current = file4;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive6 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest7 = explodedArchive6.manifest;
        explodedArchive6.recursive = false;
        java.util.jar.Manifest manifest10 = explodedArchive6.manifest;
        java.io.File file11 = explodedArchive6.manifestFile;
        java.io.File file12 = null;
        java.io.File file13 = explodedArchive6.getManifestFile(file12);
        java.util.Iterator<java.io.File> fileItor14 = fileEntryIterator3.listFiles(file13);
        java.io.File file15 = fileEntryIterator3.current;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator16 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file17 = null;
        fileEntryIterator16.current = file17;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive19 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest20 = explodedArchive19.manifest;
        explodedArchive19.recursive = false;
        java.util.jar.Manifest manifest23 = explodedArchive19.manifest;
        java.io.File file24 = explodedArchive19.manifestFile;
        java.io.File file25 = null;
        java.io.File file26 = explodedArchive19.getManifestFile(file25);
        java.util.Iterator<java.io.File> fileItor27 = fileEntryIterator16.listFiles(file26);
        java.util.ArrayDeque<java.util.Iterator<java.io.File>> fileItorQueue28 = new java.util.ArrayDeque<java.util.Iterator<java.io.File>>();
        boolean boolean29 = fileItorQueue28.add(fileItor27);
        fileEntryIterator3.stack = fileItorQueue28;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive31 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest32 = explodedArchive31.manifest;
        explodedArchive31.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive35 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest36 = explodedArchive35.manifest;
        explodedArchive35.recursive = false;
        java.util.jar.Manifest manifest39 = explodedArchive35.manifest;
        java.io.File file40 = explodedArchive35.manifestFile;
        java.io.File file41 = null;
        java.io.File file42 = explodedArchive35.getManifestFile(file41);
        explodedArchive31.manifestFile = file41;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive44 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest45 = explodedArchive44.manifest;
        explodedArchive44.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive48 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest49 = explodedArchive48.manifest;
        explodedArchive48.recursive = false;
        java.util.jar.Manifest manifest52 = explodedArchive48.manifest;
        java.io.File file53 = explodedArchive48.manifestFile;
        java.io.File file54 = null;
        java.io.File file55 = explodedArchive48.getManifestFile(file54);
        explodedArchive44.manifestFile = file54;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive57 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest58 = explodedArchive57.manifest;
        explodedArchive57.recursive = false;
        java.util.jar.Manifest manifest61 = explodedArchive57.manifest;
        java.io.File file62 = explodedArchive57.manifestFile;
        java.io.File file63 = null;
        java.io.File file64 = explodedArchive57.getManifestFile(file63);
        explodedArchive44.manifestFile = file64;
        explodedArchive31.root = file64;
        java.util.Iterator<java.io.File> fileItor67 = fileEntryIterator3.listFiles(file64);
        java.util.Comparator<java.io.File> fileComparator68 = fileEntryIterator3.entryComparator;
        fileEntryIterator0.entryComparator = fileComparator68;
        java.io.File file70 = fileEntryIterator0.root;
        java.io.File file71 = fileEntryIterator0.poll();
        boolean boolean72 = fileEntryIterator0.hasNext();
        java.io.File file73 = fileEntryIterator0.current;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file13.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file13.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file26.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file26.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file42.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file42.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file55.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file55.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file64.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file64.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file73);
    }

    @Test
    public void test0204() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0204");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file1 = explodedArchive0.root;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive2 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest3 = explodedArchive2.manifest;
        explodedArchive2.recursive = false;
        java.util.jar.Manifest manifest6 = explodedArchive2.manifest;
        java.io.File file7 = explodedArchive2.manifestFile;
        java.io.File file8 = null;
        java.io.File file9 = explodedArchive2.getManifestFile(file8);
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator10 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file11 = null;
        fileEntryIterator10.current = file11;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive13 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.lang.String str14 = explodedArchive13.toString();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive15 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file16 = explodedArchive15.root;
        java.io.File file17 = null;
        explodedArchive15.manifestFile = file17;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive19 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest20 = explodedArchive19.manifest;
        explodedArchive19.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive23 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest24 = explodedArchive23.manifest;
        explodedArchive23.recursive = false;
        java.util.jar.Manifest manifest27 = explodedArchive23.manifest;
        java.io.File file28 = explodedArchive23.manifestFile;
        java.io.File file29 = null;
        java.io.File file30 = explodedArchive23.getManifestFile(file29);
        explodedArchive19.manifestFile = file29;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive32 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest33 = explodedArchive32.manifest;
        explodedArchive32.recursive = false;
        java.util.jar.Manifest manifest36 = explodedArchive32.manifest;
        java.io.File file37 = explodedArchive32.manifestFile;
        java.io.File file38 = null;
        java.io.File file39 = explodedArchive32.getManifestFile(file38);
        explodedArchive19.manifestFile = file39;
        java.io.File file41 = explodedArchive15.getManifestFile(file39);
        java.io.File file42 = explodedArchive13.getManifestFile(file39);
        fileEntryIterator10.root = file39;
        explodedArchive2.root = file39;
        java.io.File file45 = explodedArchive0.getManifestFile(file39);
        boolean boolean46 = explodedArchive0.recursive;
        java.lang.String str47 = explodedArchive0.toString();
        org.springframework.boot.loader.archive.Archive.EntryFilter entryFilter48 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<org.springframework.boot.loader.archive.Archive> archiveList49 = explodedArchive0.getNestedArchives(entryFilter48);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file9.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file9.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str14 + "' != '" + "exploded archive" + "'", str14.equals("exploded archive"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file30.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file30.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file39.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file39.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file41.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file41.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file42.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file42.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file45.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file45.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str47 + "' != '" + "exploded archive" + "'", str47.equals("exploded archive"));
    }

    @Test
    public void test0205() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0205");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file1 = null;
        fileEntryIterator0.current = file1;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive3 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest4 = explodedArchive3.manifest;
        explodedArchive3.recursive = false;
        java.util.jar.Manifest manifest7 = explodedArchive3.manifest;
        java.io.File file8 = explodedArchive3.manifestFile;
        java.io.File file9 = null;
        java.io.File file10 = explodedArchive3.getManifestFile(file9);
        java.util.Iterator<java.io.File> fileItor11 = fileEntryIterator0.listFiles(file10);
        java.io.File file12 = fileEntryIterator0.root;
        java.io.File file13 = fileEntryIterator0.poll();
        java.util.Comparator<java.io.File> fileComparator14 = fileEntryIterator0.entryComparator;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator15 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        boolean boolean16 = fileEntryIterator15.hasNext();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator17 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator18 = entryComparator17.reversed();
        java.util.Comparator<java.io.File> fileComparator19 = fileComparator18.reversed();
        fileEntryIterator15.entryComparator = fileComparator19;
        java.util.Comparator<java.io.File> fileComparator21 = fileEntryIterator15.entryComparator;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator22 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator23 = entryComparator22.reversed();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator24 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator25 = entryComparator24.reversed();
        java.util.Comparator<java.io.File> fileComparator26 = entryComparator22.thenComparing(fileComparator25);
        java.util.Comparator<java.io.File> fileComparator27 = fileComparator21.thenComparing(fileComparator25);
        fileEntryIterator0.entryComparator = fileComparator27;
        java.util.Comparator<java.io.File> fileComparator29 = fileComparator27.reversed();
        java.util.Comparator<java.io.File> fileComparator30 = fileComparator29.reversed();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator30);
    }

    @Test
    public void test0206() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0206");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest1 = explodedArchive0.manifest;
        explodedArchive0.recursive = false;
        java.io.File file4 = null;
        explodedArchive0.root = file4;
        java.io.File file6 = explodedArchive0.root;
        java.util.jar.Manifest manifest7 = null;
        explodedArchive0.manifest = manifest7;
        explodedArchive0.recursive = false;
        java.util.jar.Manifest manifest11 = null;
        explodedArchive0.manifest = manifest11;
        java.lang.String str13 = explodedArchive0.toString();
        // The following exception was thrown during execution in test generation
        try {
            java.net.URL uRL14 = explodedArchive0.getUrl();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str13 + "' != '" + "exploded archive" + "'", str13.equals("exploded archive"));
    }

    @Test
    public void test0207() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0207");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file1 = null;
        fileEntryIterator0.current = file1;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive3 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest4 = explodedArchive3.manifest;
        explodedArchive3.recursive = false;
        java.util.jar.Manifest manifest7 = explodedArchive3.manifest;
        java.io.File file8 = explodedArchive3.manifestFile;
        java.io.File file9 = null;
        java.io.File file10 = explodedArchive3.getManifestFile(file9);
        java.util.Iterator<java.io.File> fileItor11 = fileEntryIterator0.listFiles(file10);
        java.io.File file12 = fileEntryIterator0.current;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator13 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file14 = null;
        fileEntryIterator13.current = file14;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive16 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest17 = explodedArchive16.manifest;
        explodedArchive16.recursive = false;
        java.util.jar.Manifest manifest20 = explodedArchive16.manifest;
        java.io.File file21 = explodedArchive16.manifestFile;
        java.io.File file22 = null;
        java.io.File file23 = explodedArchive16.getManifestFile(file22);
        java.util.Iterator<java.io.File> fileItor24 = fileEntryIterator13.listFiles(file23);
        java.util.ArrayDeque<java.util.Iterator<java.io.File>> fileItorQueue25 = new java.util.ArrayDeque<java.util.Iterator<java.io.File>>();
        boolean boolean26 = fileItorQueue25.add(fileItor24);
        fileEntryIterator0.stack = fileItorQueue25;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive28 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest29 = explodedArchive28.manifest;
        explodedArchive28.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive32 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest33 = explodedArchive32.manifest;
        explodedArchive32.recursive = false;
        java.util.jar.Manifest manifest36 = explodedArchive32.manifest;
        java.io.File file37 = explodedArchive32.manifestFile;
        java.io.File file38 = null;
        java.io.File file39 = explodedArchive32.getManifestFile(file38);
        explodedArchive28.manifestFile = file38;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive41 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest42 = explodedArchive41.manifest;
        explodedArchive41.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive45 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest46 = explodedArchive45.manifest;
        explodedArchive45.recursive = false;
        java.util.jar.Manifest manifest49 = explodedArchive45.manifest;
        java.io.File file50 = explodedArchive45.manifestFile;
        java.io.File file51 = null;
        java.io.File file52 = explodedArchive45.getManifestFile(file51);
        explodedArchive41.manifestFile = file51;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive54 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest55 = explodedArchive54.manifest;
        explodedArchive54.recursive = false;
        java.util.jar.Manifest manifest58 = explodedArchive54.manifest;
        java.io.File file59 = explodedArchive54.manifestFile;
        java.io.File file60 = null;
        java.io.File file61 = explodedArchive54.getManifestFile(file60);
        explodedArchive41.manifestFile = file61;
        explodedArchive28.root = file61;
        java.util.Iterator<java.io.File> fileItor64 = fileEntryIterator0.listFiles(file61);
        java.io.File file65 = fileEntryIterator0.root;
        fileEntryIterator0.recursive = false;
        java.io.File file68 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator<java.io.File> fileItor69 = fileEntryIterator0.listFiles(file68);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file23.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file23.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file39.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file39.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file52.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file52.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file61.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file61.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file65);
    }

    @Test
    public void test0208() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0208");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest1 = explodedArchive0.manifest;
        java.util.jar.Manifest manifest2 = null;
        explodedArchive0.manifest = manifest2;
        java.io.File file4 = explodedArchive0.root;
        java.util.jar.Manifest manifest5 = null;
        explodedArchive0.manifest = manifest5;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive7 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest8 = explodedArchive7.manifest;
        java.util.jar.Manifest manifest9 = null;
        explodedArchive7.manifest = manifest9;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntry fileEntry11 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntry();
        java.lang.String str12 = fileEntry11.name;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator13 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file14 = null;
        fileEntryIterator13.current = file14;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive16 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest17 = explodedArchive16.manifest;
        explodedArchive16.recursive = false;
        java.util.jar.Manifest manifest20 = explodedArchive16.manifest;
        java.io.File file21 = explodedArchive16.manifestFile;
        java.io.File file22 = null;
        java.io.File file23 = explodedArchive16.getManifestFile(file22);
        java.util.Iterator<java.io.File> fileItor24 = fileEntryIterator13.listFiles(file23);
        java.io.File file25 = fileEntryIterator13.current;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator26 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file27 = null;
        fileEntryIterator26.current = file27;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive29 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest30 = explodedArchive29.manifest;
        explodedArchive29.recursive = false;
        java.util.jar.Manifest manifest33 = explodedArchive29.manifest;
        java.io.File file34 = explodedArchive29.manifestFile;
        java.io.File file35 = null;
        java.io.File file36 = explodedArchive29.getManifestFile(file35);
        java.util.Iterator<java.io.File> fileItor37 = fileEntryIterator26.listFiles(file36);
        java.util.ArrayDeque<java.util.Iterator<java.io.File>> fileItorQueue38 = new java.util.ArrayDeque<java.util.Iterator<java.io.File>>();
        boolean boolean39 = fileItorQueue38.add(fileItor37);
        fileEntryIterator13.stack = fileItorQueue38;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive41 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest42 = explodedArchive41.manifest;
        explodedArchive41.recursive = false;
        java.io.File file45 = null;
        explodedArchive41.root = file45;
        java.io.File file47 = explodedArchive41.root;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive48 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest49 = explodedArchive48.manifest;
        explodedArchive48.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive52 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest53 = explodedArchive52.manifest;
        explodedArchive52.recursive = false;
        java.util.jar.Manifest manifest56 = explodedArchive52.manifest;
        java.io.File file57 = explodedArchive52.manifestFile;
        java.io.File file58 = null;
        java.io.File file59 = explodedArchive52.getManifestFile(file58);
        explodedArchive48.manifestFile = file58;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive61 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest62 = explodedArchive61.manifest;
        explodedArchive61.recursive = false;
        java.util.jar.Manifest manifest65 = explodedArchive61.manifest;
        java.io.File file66 = explodedArchive61.manifestFile;
        java.io.File file67 = null;
        java.io.File file68 = explodedArchive61.getManifestFile(file67);
        explodedArchive48.manifestFile = file68;
        java.io.File file70 = explodedArchive41.getManifestFile(file68);
        fileEntryIterator13.root = file68;
        fileEntry11.file = file68;
        java.io.File file73 = explodedArchive7.getManifestFile(file68);
        explodedArchive0.manifestFile = file68;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file23.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file23.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file36.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file36.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file59.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file59.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file68.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file68.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file70.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file70.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file73);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file73.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file73.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
    }

    @Test
    public void test0209() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0209");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file1 = null;
        fileEntryIterator0.current = file1;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive3 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest4 = explodedArchive3.manifest;
        explodedArchive3.recursive = false;
        java.util.jar.Manifest manifest7 = explodedArchive3.manifest;
        java.io.File file8 = explodedArchive3.manifestFile;
        java.io.File file9 = null;
        java.io.File file10 = explodedArchive3.getManifestFile(file9);
        java.util.Iterator<java.io.File> fileItor11 = fileEntryIterator0.listFiles(file10);
        java.io.File file12 = fileEntryIterator0.root;
        java.io.File file13 = fileEntryIterator0.root;
        java.util.Deque<java.util.Iterator<java.io.File>> fileItorQueue14 = fileEntryIterator0.stack;
        java.io.File file15 = fileEntryIterator0.current;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive16 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.lang.String str17 = explodedArchive16.toString();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive18 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file19 = explodedArchive18.root;
        java.io.File file20 = null;
        explodedArchive18.manifestFile = file20;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive22 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest23 = explodedArchive22.manifest;
        explodedArchive22.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive26 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest27 = explodedArchive26.manifest;
        explodedArchive26.recursive = false;
        java.util.jar.Manifest manifest30 = explodedArchive26.manifest;
        java.io.File file31 = explodedArchive26.manifestFile;
        java.io.File file32 = null;
        java.io.File file33 = explodedArchive26.getManifestFile(file32);
        explodedArchive22.manifestFile = file32;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive35 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest36 = explodedArchive35.manifest;
        explodedArchive35.recursive = false;
        java.util.jar.Manifest manifest39 = explodedArchive35.manifest;
        java.io.File file40 = explodedArchive35.manifestFile;
        java.io.File file41 = null;
        java.io.File file42 = explodedArchive35.getManifestFile(file41);
        explodedArchive22.manifestFile = file42;
        java.io.File file44 = explodedArchive18.getManifestFile(file42);
        java.io.File file45 = explodedArchive16.getManifestFile(file42);
        fileEntryIterator0.root = file45;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntry fileEntry47 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntry();
        java.io.File file48 = fileEntry47.getFile();
        java.io.File file49 = fileEntry47.getFile();
        java.lang.String str50 = fileEntry47.name;
        java.io.File file51 = fileEntry47.getFile();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator52 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file53 = null;
        fileEntryIterator52.current = file53;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive55 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest56 = explodedArchive55.manifest;
        explodedArchive55.recursive = false;
        java.util.jar.Manifest manifest59 = explodedArchive55.manifest;
        java.io.File file60 = explodedArchive55.manifestFile;
        java.io.File file61 = null;
        java.io.File file62 = explodedArchive55.getManifestFile(file61);
        java.util.Iterator<java.io.File> fileItor63 = fileEntryIterator52.listFiles(file62);
        fileEntry47.file = file62;
        java.util.Iterator<java.io.File> fileItor65 = fileEntryIterator0.listFiles(file62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItorQueue14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str17 + "' != '" + "exploded archive" + "'", str17.equals("exploded archive"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file33.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file33.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file42.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file42.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file44.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file44.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file45.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file45.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file62.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file62.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor65);
    }

    @Test
    public void test0210() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0210");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file1 = null;
        fileEntryIterator0.current = file1;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive3 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest4 = explodedArchive3.manifest;
        explodedArchive3.recursive = false;
        java.util.jar.Manifest manifest7 = explodedArchive3.manifest;
        java.io.File file8 = explodedArchive3.manifestFile;
        java.io.File file9 = null;
        java.io.File file10 = explodedArchive3.getManifestFile(file9);
        java.util.Iterator<java.io.File> fileItor11 = fileEntryIterator0.listFiles(file10);
        java.io.File file12 = fileEntryIterator0.root;
        java.io.File file13 = fileEntryIterator0.root;
        java.util.Deque<java.util.Iterator<java.io.File>> fileItorQueue14 = fileEntryIterator0.stack;
        java.io.File file15 = fileEntryIterator0.current;
        java.io.File file16 = fileEntryIterator0.root;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntry fileEntry17 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntry();
        java.io.File file18 = fileEntry17.file;
        java.lang.String str19 = fileEntry17.name;
        java.io.File file20 = fileEntry17.file;
        java.io.File file21 = fileEntry17.file;
        java.lang.String str22 = fileEntry17.getName();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntry fileEntry23 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntry();
        java.lang.String str24 = fileEntry23.name;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator25 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file26 = null;
        fileEntryIterator25.current = file26;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive28 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.lang.String str29 = explodedArchive28.toString();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive30 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file31 = explodedArchive30.root;
        java.io.File file32 = null;
        explodedArchive30.manifestFile = file32;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive34 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest35 = explodedArchive34.manifest;
        explodedArchive34.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive38 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest39 = explodedArchive38.manifest;
        explodedArchive38.recursive = false;
        java.util.jar.Manifest manifest42 = explodedArchive38.manifest;
        java.io.File file43 = explodedArchive38.manifestFile;
        java.io.File file44 = null;
        java.io.File file45 = explodedArchive38.getManifestFile(file44);
        explodedArchive34.manifestFile = file44;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive47 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest48 = explodedArchive47.manifest;
        explodedArchive47.recursive = false;
        java.util.jar.Manifest manifest51 = explodedArchive47.manifest;
        java.io.File file52 = explodedArchive47.manifestFile;
        java.io.File file53 = null;
        java.io.File file54 = explodedArchive47.getManifestFile(file53);
        explodedArchive34.manifestFile = file54;
        java.io.File file56 = explodedArchive30.getManifestFile(file54);
        java.io.File file57 = explodedArchive28.getManifestFile(file54);
        fileEntryIterator25.root = file54;
        fileEntry23.file = file54;
        fileEntry17.file = file54;
        fileEntryIterator0.root = file54;
        boolean boolean62 = fileEntryIterator0.recursive;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItorQueue14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str29 + "' != '" + "exploded archive" + "'", str29.equals("exploded archive"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file45.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file45.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file54.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file54.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file56.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file56.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file57.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file57.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
    }

    @Test
    public void test0211() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0211");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        boolean boolean1 = fileEntryIterator0.hasNext();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator2 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator3 = entryComparator2.reversed();
        java.util.Comparator<java.io.File> fileComparator4 = fileComparator3.reversed();
        fileEntryIterator0.entryComparator = fileComparator4;
        java.util.Comparator<java.io.File> fileComparator6 = fileEntryIterator0.entryComparator;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator7 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator8 = entryComparator7.reversed();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator9 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator10 = entryComparator9.reversed();
        java.util.Comparator<java.io.File> fileComparator11 = entryComparator7.thenComparing(fileComparator10);
        java.util.Comparator<java.io.File> fileComparator12 = fileComparator6.thenComparing(fileComparator10);
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator13 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator14 = entryComparator13.reversed();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator15 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator16 = entryComparator15.reversed();
        java.util.Comparator<java.io.File> fileComparator17 = entryComparator13.thenComparing(fileComparator16);
        java.util.Comparator<java.io.File> fileComparator18 = fileComparator12.thenComparing((java.util.Comparator<java.io.File>) entryComparator13);
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator19 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file20 = null;
        fileEntryIterator19.current = file20;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive22 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest23 = explodedArchive22.manifest;
        explodedArchive22.recursive = false;
        java.util.jar.Manifest manifest26 = explodedArchive22.manifest;
        java.io.File file27 = explodedArchive22.manifestFile;
        java.io.File file28 = null;
        java.io.File file29 = explodedArchive22.getManifestFile(file28);
        java.util.Iterator<java.io.File> fileItor30 = fileEntryIterator19.listFiles(file29);
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator31 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file32 = null;
        fileEntryIterator31.current = file32;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive34 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest35 = explodedArchive34.manifest;
        explodedArchive34.recursive = false;
        java.util.jar.Manifest manifest38 = explodedArchive34.manifest;
        java.io.File file39 = explodedArchive34.manifestFile;
        java.io.File file40 = null;
        java.io.File file41 = explodedArchive34.getManifestFile(file40);
        java.util.Iterator<java.io.File> fileItor42 = fileEntryIterator31.listFiles(file41);
        java.io.File file43 = fileEntryIterator31.current;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator44 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file45 = null;
        fileEntryIterator44.current = file45;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive47 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest48 = explodedArchive47.manifest;
        explodedArchive47.recursive = false;
        java.util.jar.Manifest manifest51 = explodedArchive47.manifest;
        java.io.File file52 = explodedArchive47.manifestFile;
        java.io.File file53 = null;
        java.io.File file54 = explodedArchive47.getManifestFile(file53);
        java.util.Iterator<java.io.File> fileItor55 = fileEntryIterator44.listFiles(file54);
        java.util.ArrayDeque<java.util.Iterator<java.io.File>> fileItorQueue56 = new java.util.ArrayDeque<java.util.Iterator<java.io.File>>();
        boolean boolean57 = fileItorQueue56.add(fileItor55);
        fileEntryIterator31.stack = fileItorQueue56;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive59 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest60 = explodedArchive59.manifest;
        explodedArchive59.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive63 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest64 = explodedArchive63.manifest;
        explodedArchive63.recursive = false;
        java.util.jar.Manifest manifest67 = explodedArchive63.manifest;
        java.io.File file68 = explodedArchive63.manifestFile;
        java.io.File file69 = null;
        java.io.File file70 = explodedArchive63.getManifestFile(file69);
        explodedArchive59.manifestFile = file69;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive72 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest73 = explodedArchive72.manifest;
        explodedArchive72.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive76 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest77 = explodedArchive76.manifest;
        explodedArchive76.recursive = false;
        java.util.jar.Manifest manifest80 = explodedArchive76.manifest;
        java.io.File file81 = explodedArchive76.manifestFile;
        java.io.File file82 = null;
        java.io.File file83 = explodedArchive76.getManifestFile(file82);
        explodedArchive72.manifestFile = file82;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive85 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest86 = explodedArchive85.manifest;
        explodedArchive85.recursive = false;
        java.util.jar.Manifest manifest89 = explodedArchive85.manifest;
        java.io.File file90 = explodedArchive85.manifestFile;
        java.io.File file91 = null;
        java.io.File file92 = explodedArchive85.getManifestFile(file91);
        explodedArchive72.manifestFile = file92;
        explodedArchive59.root = file92;
        java.util.Iterator<java.io.File> fileItor95 = fileEntryIterator31.listFiles(file92);
        java.util.Comparator<java.io.File> fileComparator96 = fileEntryIterator31.entryComparator;
        fileEntryIterator19.entryComparator = fileComparator96;
        java.util.Comparator<java.io.File> fileComparator98 = fileComparator18.thenComparing(fileComparator96);
        java.util.Comparator<java.io.File> fileComparator99 = fileComparator96.reversed();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file29.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file29.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file41.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file41.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file54.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file54.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file70.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file70.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest73);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest77);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest80);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file81);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file83);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file83.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file83.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest86);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest89);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file90);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file92);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file92.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file92.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor95);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator96);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator98);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator99);
    }

    @Test
    public void test0212() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0212");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file1 = explodedArchive0.root;
        java.io.File file2 = null;
        explodedArchive0.manifestFile = file2;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive4 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest5 = explodedArchive4.manifest;
        explodedArchive4.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive8 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest9 = explodedArchive8.manifest;
        explodedArchive8.recursive = false;
        java.util.jar.Manifest manifest12 = explodedArchive8.manifest;
        java.io.File file13 = explodedArchive8.manifestFile;
        java.io.File file14 = null;
        java.io.File file15 = explodedArchive8.getManifestFile(file14);
        explodedArchive4.manifestFile = file14;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive17 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest18 = explodedArchive17.manifest;
        explodedArchive17.recursive = false;
        java.util.jar.Manifest manifest21 = explodedArchive17.manifest;
        java.io.File file22 = explodedArchive17.manifestFile;
        java.io.File file23 = null;
        java.io.File file24 = explodedArchive17.getManifestFile(file23);
        explodedArchive4.manifestFile = file24;
        java.io.File file26 = explodedArchive0.getManifestFile(file24);
        java.util.jar.Manifest manifest27 = null;
        explodedArchive0.manifest = manifest27;
        java.io.File file29 = explodedArchive0.root;
        org.springframework.boot.loader.archive.Archive.EntryFilter entryFilter30 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<org.springframework.boot.loader.archive.Archive> archiveList31 = explodedArchive0.getNestedArchives(entryFilter30);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file15.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file15.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file24.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file24.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file26.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file26.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file29);
    }

    @Test
    public void test0213() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0213");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator1 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator2 = entryComparator1.reversed();
        java.util.Comparator<java.io.File> fileComparator3 = entryComparator1.reversed();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive4 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest5 = explodedArchive4.manifest;
        explodedArchive4.recursive = false;
        java.util.jar.Manifest manifest8 = explodedArchive4.manifest;
        java.io.File file9 = explodedArchive4.manifestFile;
        java.io.File file10 = null;
        java.io.File file11 = explodedArchive4.getManifestFile(file10);
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive12 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest13 = explodedArchive12.manifest;
        explodedArchive12.recursive = false;
        java.io.File file16 = null;
        explodedArchive12.root = file16;
        java.io.File file18 = explodedArchive12.root;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive19 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest20 = explodedArchive19.manifest;
        explodedArchive19.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive23 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest24 = explodedArchive23.manifest;
        explodedArchive23.recursive = false;
        java.util.jar.Manifest manifest27 = explodedArchive23.manifest;
        java.io.File file28 = explodedArchive23.manifestFile;
        java.io.File file29 = null;
        java.io.File file30 = explodedArchive23.getManifestFile(file29);
        explodedArchive19.manifestFile = file29;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive32 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest33 = explodedArchive32.manifest;
        explodedArchive32.recursive = false;
        java.util.jar.Manifest manifest36 = explodedArchive32.manifest;
        java.io.File file37 = explodedArchive32.manifestFile;
        java.io.File file38 = null;
        java.io.File file39 = explodedArchive32.getManifestFile(file38);
        explodedArchive19.manifestFile = file39;
        java.io.File file41 = explodedArchive12.getManifestFile(file39);
        int int42 = entryComparator1.compare(file11, file39);
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive43 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest44 = explodedArchive43.manifest;
        explodedArchive43.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive47 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest48 = explodedArchive47.manifest;
        explodedArchive47.recursive = false;
        java.util.jar.Manifest manifest51 = explodedArchive47.manifest;
        java.io.File file52 = explodedArchive47.manifestFile;
        java.io.File file53 = null;
        java.io.File file54 = explodedArchive47.getManifestFile(file53);
        explodedArchive43.manifestFile = file53;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive56 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest57 = explodedArchive56.manifest;
        explodedArchive56.recursive = false;
        java.util.jar.Manifest manifest60 = explodedArchive56.manifest;
        java.io.File file61 = explodedArchive56.manifestFile;
        java.io.File file62 = null;
        java.io.File file63 = explodedArchive56.getManifestFile(file62);
        explodedArchive43.manifestFile = file63;
        int int65 = entryComparator0.compare(file11, file63);
        // The following exception was thrown during execution in test generation
        try {
            org.springframework.boot.loader.archive.ExplodedArchive explodedArchive66 = new org.springframework.boot.loader.archive.ExplodedArchive(file11);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid source folder META-INF/MANIFEST.MF");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file11.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file11.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file30.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file30.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file39.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file39.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file41.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file41.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file54.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file54.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file63.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file63.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
    }

    @Test
    public void test0214() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0214");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest1 = explodedArchive0.manifest;
        explodedArchive0.recursive = false;
        java.io.File file4 = null;
        explodedArchive0.root = file4;
        java.io.File file6 = explodedArchive0.root;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive7 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest8 = explodedArchive7.manifest;
        explodedArchive7.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive11 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest12 = explodedArchive11.manifest;
        explodedArchive11.recursive = false;
        java.util.jar.Manifest manifest15 = explodedArchive11.manifest;
        java.io.File file16 = explodedArchive11.manifestFile;
        java.io.File file17 = null;
        java.io.File file18 = explodedArchive11.getManifestFile(file17);
        explodedArchive7.manifestFile = file17;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive20 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest21 = explodedArchive20.manifest;
        explodedArchive20.recursive = false;
        java.util.jar.Manifest manifest24 = explodedArchive20.manifest;
        java.io.File file25 = explodedArchive20.manifestFile;
        java.io.File file26 = null;
        java.io.File file27 = explodedArchive20.getManifestFile(file26);
        explodedArchive7.manifestFile = file27;
        java.io.File file29 = explodedArchive0.getManifestFile(file27);
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive30 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest31 = explodedArchive30.manifest;
        explodedArchive30.recursive = false;
        java.io.File file34 = null;
        explodedArchive30.root = file34;
        java.io.File file36 = explodedArchive30.manifestFile;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive37 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file38 = explodedArchive37.root;
        java.io.File file39 = null;
        explodedArchive37.manifestFile = file39;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive41 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest42 = explodedArchive41.manifest;
        explodedArchive41.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive45 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest46 = explodedArchive45.manifest;
        explodedArchive45.recursive = false;
        java.util.jar.Manifest manifest49 = explodedArchive45.manifest;
        java.io.File file50 = explodedArchive45.manifestFile;
        java.io.File file51 = null;
        java.io.File file52 = explodedArchive45.getManifestFile(file51);
        explodedArchive41.manifestFile = file51;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive54 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest55 = explodedArchive54.manifest;
        explodedArchive54.recursive = false;
        java.util.jar.Manifest manifest58 = explodedArchive54.manifest;
        java.io.File file59 = explodedArchive54.manifestFile;
        java.io.File file60 = null;
        java.io.File file61 = explodedArchive54.getManifestFile(file60);
        explodedArchive41.manifestFile = file61;
        java.io.File file63 = explodedArchive37.getManifestFile(file61);
        java.io.File file64 = explodedArchive30.getManifestFile(file61);
        explodedArchive0.manifestFile = file61;
        boolean boolean66 = explodedArchive0.recursive;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator<org.springframework.boot.loader.archive.Archive.Entry> entryItor67 = explodedArchive0.iterator();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file18.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file18.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file27.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file27.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file29.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file29.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file52.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file52.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file61.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file61.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file63.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file63.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file64.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file64.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
    }

    @Test
    public void test0215() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0215");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file1 = null;
        fileEntryIterator0.current = file1;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive3 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest4 = explodedArchive3.manifest;
        explodedArchive3.recursive = false;
        java.util.jar.Manifest manifest7 = explodedArchive3.manifest;
        java.io.File file8 = explodedArchive3.manifestFile;
        java.io.File file9 = null;
        java.io.File file10 = explodedArchive3.getManifestFile(file9);
        java.util.Iterator<java.io.File> fileItor11 = fileEntryIterator0.listFiles(file10);
        java.io.File file12 = fileEntryIterator0.current;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator13 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file14 = null;
        fileEntryIterator13.current = file14;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive16 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest17 = explodedArchive16.manifest;
        explodedArchive16.recursive = false;
        java.util.jar.Manifest manifest20 = explodedArchive16.manifest;
        java.io.File file21 = explodedArchive16.manifestFile;
        java.io.File file22 = null;
        java.io.File file23 = explodedArchive16.getManifestFile(file22);
        java.util.Iterator<java.io.File> fileItor24 = fileEntryIterator13.listFiles(file23);
        java.util.ArrayDeque<java.util.Iterator<java.io.File>> fileItorQueue25 = new java.util.ArrayDeque<java.util.Iterator<java.io.File>>();
        boolean boolean26 = fileItorQueue25.add(fileItor24);
        fileEntryIterator0.stack = fileItorQueue25;
        java.util.Deque<java.util.Iterator<java.io.File>> fileItorQueue28 = fileEntryIterator0.stack;
        // The following exception was thrown during execution in test generation
        try {
            fileEntryIterator0.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: remove");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file23.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file23.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItorQueue28);
    }

    @Test
    public void test0216() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0216");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest1 = explodedArchive0.manifest;
        explodedArchive0.recursive = false;
        java.io.File file4 = null;
        explodedArchive0.root = file4;
        java.io.File file6 = explodedArchive0.root;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive7 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest8 = explodedArchive7.manifest;
        explodedArchive7.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive11 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest12 = explodedArchive11.manifest;
        explodedArchive11.recursive = false;
        java.util.jar.Manifest manifest15 = explodedArchive11.manifest;
        java.io.File file16 = explodedArchive11.manifestFile;
        java.io.File file17 = null;
        java.io.File file18 = explodedArchive11.getManifestFile(file17);
        explodedArchive7.manifestFile = file17;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive20 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest21 = explodedArchive20.manifest;
        explodedArchive20.recursive = false;
        java.util.jar.Manifest manifest24 = explodedArchive20.manifest;
        java.io.File file25 = explodedArchive20.manifestFile;
        java.io.File file26 = null;
        java.io.File file27 = explodedArchive20.getManifestFile(file26);
        explodedArchive7.manifestFile = file27;
        java.io.File file29 = explodedArchive0.getManifestFile(file27);
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive30 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest31 = explodedArchive30.manifest;
        explodedArchive30.recursive = false;
        java.io.File file34 = null;
        explodedArchive30.root = file34;
        java.io.File file36 = explodedArchive30.manifestFile;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive37 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file38 = explodedArchive37.root;
        java.io.File file39 = null;
        explodedArchive37.manifestFile = file39;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive41 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest42 = explodedArchive41.manifest;
        explodedArchive41.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive45 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest46 = explodedArchive45.manifest;
        explodedArchive45.recursive = false;
        java.util.jar.Manifest manifest49 = explodedArchive45.manifest;
        java.io.File file50 = explodedArchive45.manifestFile;
        java.io.File file51 = null;
        java.io.File file52 = explodedArchive45.getManifestFile(file51);
        explodedArchive41.manifestFile = file51;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive54 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest55 = explodedArchive54.manifest;
        explodedArchive54.recursive = false;
        java.util.jar.Manifest manifest58 = explodedArchive54.manifest;
        java.io.File file59 = explodedArchive54.manifestFile;
        java.io.File file60 = null;
        java.io.File file61 = explodedArchive54.getManifestFile(file60);
        explodedArchive41.manifestFile = file61;
        java.io.File file63 = explodedArchive37.getManifestFile(file61);
        java.io.File file64 = explodedArchive30.getManifestFile(file61);
        explodedArchive0.manifestFile = file61;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator<org.springframework.boot.loader.archive.Archive.Entry> entryItor66 = explodedArchive0.iterator();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file18.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file18.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file27.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file27.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file29.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file29.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file52.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file52.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file61.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file61.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file63.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file63.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file64.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file64.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
    }

    @Test
    public void test0217() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0217");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file1 = null;
        fileEntryIterator0.current = file1;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive3 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.lang.String str4 = explodedArchive3.toString();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive5 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file6 = explodedArchive5.root;
        java.io.File file7 = null;
        explodedArchive5.manifestFile = file7;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive9 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest10 = explodedArchive9.manifest;
        explodedArchive9.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive13 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest14 = explodedArchive13.manifest;
        explodedArchive13.recursive = false;
        java.util.jar.Manifest manifest17 = explodedArchive13.manifest;
        java.io.File file18 = explodedArchive13.manifestFile;
        java.io.File file19 = null;
        java.io.File file20 = explodedArchive13.getManifestFile(file19);
        explodedArchive9.manifestFile = file19;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive22 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest23 = explodedArchive22.manifest;
        explodedArchive22.recursive = false;
        java.util.jar.Manifest manifest26 = explodedArchive22.manifest;
        java.io.File file27 = explodedArchive22.manifestFile;
        java.io.File file28 = null;
        java.io.File file29 = explodedArchive22.getManifestFile(file28);
        explodedArchive9.manifestFile = file29;
        java.io.File file31 = explodedArchive5.getManifestFile(file29);
        java.io.File file32 = explodedArchive3.getManifestFile(file29);
        fileEntryIterator0.root = file29;
        java.io.File file34 = fileEntryIterator0.poll();
        boolean boolean35 = fileEntryIterator0.hasNext();
        // The following exception was thrown during execution in test generation
        try {
            org.springframework.boot.loader.archive.Archive.Entry entry36 = fileEntryIterator0.next();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str4 + "' != '" + "exploded archive" + "'", str4.equals("exploded archive"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file20.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file20.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file29.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file29.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file31.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file31.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file32.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file32.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
    }

    @Test
    public void test0218() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0218");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file1 = explodedArchive0.root;
        explodedArchive0.recursive = false;
        boolean boolean4 = explodedArchive0.recursive;
        org.springframework.boot.loader.archive.Archive.Entry entry5 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.springframework.boot.loader.archive.Archive archive6 = explodedArchive0.getNestedArchive(entry5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test0219() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0219");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest1 = explodedArchive0.manifest;
        explodedArchive0.recursive = false;
        java.util.jar.Manifest manifest4 = explodedArchive0.manifest;
        java.util.jar.Manifest manifest5 = null;
        explodedArchive0.manifest = manifest5;
        java.io.File file7 = explodedArchive0.root;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Spliterator<org.springframework.boot.loader.archive.Archive.Entry> entrySpliterator8 = explodedArchive0.spliterator();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file7);
    }

    @Test
    public void test0220() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0220");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        boolean boolean1 = fileEntryIterator0.hasNext();
        java.io.File file2 = fileEntryIterator0.root;
        boolean boolean3 = fileEntryIterator0.hasNext();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator4 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator5 = entryComparator4.reversed();
        java.util.Comparator<java.io.File> fileComparator6 = entryComparator4.reversed();
        fileEntryIterator0.entryComparator = entryComparator4;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator8 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        boolean boolean9 = fileEntryIterator8.hasNext();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator10 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator11 = entryComparator10.reversed();
        java.util.Comparator<java.io.File> fileComparator12 = fileComparator11.reversed();
        fileEntryIterator8.entryComparator = fileComparator12;
        java.util.Comparator<java.io.File> fileComparator14 = fileEntryIterator8.entryComparator;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator15 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator16 = entryComparator15.reversed();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator17 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator18 = entryComparator17.reversed();
        java.util.Comparator<java.io.File> fileComparator19 = entryComparator15.thenComparing(fileComparator18);
        java.util.Comparator<java.io.File> fileComparator20 = fileComparator14.thenComparing(fileComparator18);
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator21 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator22 = entryComparator21.reversed();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator23 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file24 = null;
        fileEntryIterator23.current = file24;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive26 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest27 = explodedArchive26.manifest;
        explodedArchive26.recursive = false;
        java.util.jar.Manifest manifest30 = explodedArchive26.manifest;
        java.io.File file31 = explodedArchive26.manifestFile;
        java.io.File file32 = null;
        java.io.File file33 = explodedArchive26.getManifestFile(file32);
        java.util.Iterator<java.io.File> fileItor34 = fileEntryIterator23.listFiles(file33);
        java.io.File file35 = fileEntryIterator23.current;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator36 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file37 = null;
        fileEntryIterator36.current = file37;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive39 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest40 = explodedArchive39.manifest;
        explodedArchive39.recursive = false;
        java.util.jar.Manifest manifest43 = explodedArchive39.manifest;
        java.io.File file44 = explodedArchive39.manifestFile;
        java.io.File file45 = null;
        java.io.File file46 = explodedArchive39.getManifestFile(file45);
        java.util.Iterator<java.io.File> fileItor47 = fileEntryIterator36.listFiles(file46);
        java.util.ArrayDeque<java.util.Iterator<java.io.File>> fileItorQueue48 = new java.util.ArrayDeque<java.util.Iterator<java.io.File>>();
        boolean boolean49 = fileItorQueue48.add(fileItor47);
        fileEntryIterator23.stack = fileItorQueue48;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive51 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest52 = explodedArchive51.manifest;
        explodedArchive51.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive55 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest56 = explodedArchive55.manifest;
        explodedArchive55.recursive = false;
        java.util.jar.Manifest manifest59 = explodedArchive55.manifest;
        java.io.File file60 = explodedArchive55.manifestFile;
        java.io.File file61 = null;
        java.io.File file62 = explodedArchive55.getManifestFile(file61);
        explodedArchive51.manifestFile = file61;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive64 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest65 = explodedArchive64.manifest;
        explodedArchive64.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive68 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest69 = explodedArchive68.manifest;
        explodedArchive68.recursive = false;
        java.util.jar.Manifest manifest72 = explodedArchive68.manifest;
        java.io.File file73 = explodedArchive68.manifestFile;
        java.io.File file74 = null;
        java.io.File file75 = explodedArchive68.getManifestFile(file74);
        explodedArchive64.manifestFile = file74;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive77 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest78 = explodedArchive77.manifest;
        explodedArchive77.recursive = false;
        java.util.jar.Manifest manifest81 = explodedArchive77.manifest;
        java.io.File file82 = explodedArchive77.manifestFile;
        java.io.File file83 = null;
        java.io.File file84 = explodedArchive77.getManifestFile(file83);
        explodedArchive64.manifestFile = file84;
        explodedArchive51.root = file84;
        java.util.Iterator<java.io.File> fileItor87 = fileEntryIterator23.listFiles(file84);
        java.util.Comparator<java.io.File> fileComparator88 = fileEntryIterator23.entryComparator;
        java.util.Comparator<java.io.File> fileComparator89 = entryComparator21.thenComparing(fileComparator88);
        java.util.Comparator<java.io.File> fileComparator90 = fileComparator20.thenComparing(fileComparator89);
        fileEntryIterator0.entryComparator = fileComparator89;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file33.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file33.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file46.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file46.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file62.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file62.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file73);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file75);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file75.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file75.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest78);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest81);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file82);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file84);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file84.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file84.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor87);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator88);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator89);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator90);
    }

    @Test
    public void test0221() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0221");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        boolean boolean1 = fileEntryIterator0.hasNext();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive2 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.lang.String str3 = explodedArchive2.toString();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive4 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file5 = explodedArchive4.root;
        java.io.File file6 = null;
        explodedArchive4.manifestFile = file6;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive8 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest9 = explodedArchive8.manifest;
        explodedArchive8.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive12 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest13 = explodedArchive12.manifest;
        explodedArchive12.recursive = false;
        java.util.jar.Manifest manifest16 = explodedArchive12.manifest;
        java.io.File file17 = explodedArchive12.manifestFile;
        java.io.File file18 = null;
        java.io.File file19 = explodedArchive12.getManifestFile(file18);
        explodedArchive8.manifestFile = file18;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive21 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest22 = explodedArchive21.manifest;
        explodedArchive21.recursive = false;
        java.util.jar.Manifest manifest25 = explodedArchive21.manifest;
        java.io.File file26 = explodedArchive21.manifestFile;
        java.io.File file27 = null;
        java.io.File file28 = explodedArchive21.getManifestFile(file27);
        explodedArchive8.manifestFile = file28;
        java.io.File file30 = explodedArchive4.getManifestFile(file28);
        java.io.File file31 = explodedArchive2.getManifestFile(file28);
        java.io.File file32 = null;
        java.io.File file33 = explodedArchive2.getManifestFile(file32);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator<java.io.File> fileItor34 = fileEntryIterator0.listFiles(file32);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str3 + "' != '" + "exploded archive" + "'", str3.equals("exploded archive"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file19.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file19.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file28.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file28.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file30.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file30.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file31.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file31.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file33.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file33.toString(), "META-INF/MANIFEST.MF");
    }

    @Test
    public void test0222() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0222");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file1 = explodedArchive0.root;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive2 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest3 = explodedArchive2.manifest;
        explodedArchive2.recursive = false;
        java.util.jar.Manifest manifest6 = explodedArchive2.manifest;
        java.io.File file7 = explodedArchive2.manifestFile;
        java.io.File file8 = null;
        java.io.File file9 = explodedArchive2.getManifestFile(file8);
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator10 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file11 = null;
        fileEntryIterator10.current = file11;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive13 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.lang.String str14 = explodedArchive13.toString();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive15 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file16 = explodedArchive15.root;
        java.io.File file17 = null;
        explodedArchive15.manifestFile = file17;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive19 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest20 = explodedArchive19.manifest;
        explodedArchive19.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive23 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest24 = explodedArchive23.manifest;
        explodedArchive23.recursive = false;
        java.util.jar.Manifest manifest27 = explodedArchive23.manifest;
        java.io.File file28 = explodedArchive23.manifestFile;
        java.io.File file29 = null;
        java.io.File file30 = explodedArchive23.getManifestFile(file29);
        explodedArchive19.manifestFile = file29;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive32 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest33 = explodedArchive32.manifest;
        explodedArchive32.recursive = false;
        java.util.jar.Manifest manifest36 = explodedArchive32.manifest;
        java.io.File file37 = explodedArchive32.manifestFile;
        java.io.File file38 = null;
        java.io.File file39 = explodedArchive32.getManifestFile(file38);
        explodedArchive19.manifestFile = file39;
        java.io.File file41 = explodedArchive15.getManifestFile(file39);
        java.io.File file42 = explodedArchive13.getManifestFile(file39);
        fileEntryIterator10.root = file39;
        explodedArchive2.root = file39;
        java.io.File file45 = explodedArchive0.getManifestFile(file39);
        java.util.jar.Manifest manifest46 = null;
        explodedArchive0.manifest = manifest46;
        java.lang.String str48 = explodedArchive0.toString();
        org.springframework.boot.loader.archive.Archive.EntryFilter entryFilter49 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<org.springframework.boot.loader.archive.Archive> archiveList50 = explodedArchive0.getNestedArchives(entryFilter49);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file9.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file9.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str14 + "' != '" + "exploded archive" + "'", str14.equals("exploded archive"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file30.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file30.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file39.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file39.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file41.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file41.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file42.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file42.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file45.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file45.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str48 + "' != '" + "exploded archive" + "'", str48.equals("exploded archive"));
    }

    @Test
    public void test0223() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0223");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file1 = null;
        fileEntryIterator0.current = file1;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive3 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest4 = explodedArchive3.manifest;
        explodedArchive3.recursive = false;
        java.util.jar.Manifest manifest7 = explodedArchive3.manifest;
        java.io.File file8 = explodedArchive3.manifestFile;
        java.io.File file9 = null;
        java.io.File file10 = explodedArchive3.getManifestFile(file9);
        java.util.Iterator<java.io.File> fileItor11 = fileEntryIterator0.listFiles(file10);
        java.io.File file12 = fileEntryIterator0.root;
        java.io.File file13 = fileEntryIterator0.poll();
        java.util.Comparator<java.io.File> fileComparator14 = fileEntryIterator0.entryComparator;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator15 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        boolean boolean16 = fileEntryIterator15.hasNext();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator17 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator18 = entryComparator17.reversed();
        java.util.Comparator<java.io.File> fileComparator19 = fileComparator18.reversed();
        fileEntryIterator15.entryComparator = fileComparator19;
        java.util.Comparator<java.io.File> fileComparator21 = fileEntryIterator15.entryComparator;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator22 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator23 = entryComparator22.reversed();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator24 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator25 = entryComparator24.reversed();
        java.util.Comparator<java.io.File> fileComparator26 = entryComparator22.thenComparing(fileComparator25);
        java.util.Comparator<java.io.File> fileComparator27 = fileComparator21.thenComparing(fileComparator25);
        fileEntryIterator0.entryComparator = fileComparator27;
        java.io.File file29 = fileEntryIterator0.root;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive30 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.lang.String str31 = explodedArchive30.toString();
        explodedArchive30.recursive = true;
        java.io.File file34 = null;
        java.io.File file35 = explodedArchive30.getManifestFile(file34);
        fileEntryIterator0.root = file34;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator37 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        boolean boolean38 = fileEntryIterator37.recursive;
        java.io.File file39 = fileEntryIterator37.current;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator40 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file41 = null;
        fileEntryIterator40.current = file41;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive43 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest44 = explodedArchive43.manifest;
        explodedArchive43.recursive = false;
        java.util.jar.Manifest manifest47 = explodedArchive43.manifest;
        java.io.File file48 = explodedArchive43.manifestFile;
        java.io.File file49 = null;
        java.io.File file50 = explodedArchive43.getManifestFile(file49);
        java.util.Iterator<java.io.File> fileItor51 = fileEntryIterator40.listFiles(file50);
        java.io.File file52 = fileEntryIterator40.root;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive53 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.lang.String str54 = explodedArchive53.toString();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive55 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file56 = explodedArchive55.root;
        java.io.File file57 = null;
        explodedArchive55.manifestFile = file57;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive59 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest60 = explodedArchive59.manifest;
        explodedArchive59.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive63 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest64 = explodedArchive63.manifest;
        explodedArchive63.recursive = false;
        java.util.jar.Manifest manifest67 = explodedArchive63.manifest;
        java.io.File file68 = explodedArchive63.manifestFile;
        java.io.File file69 = null;
        java.io.File file70 = explodedArchive63.getManifestFile(file69);
        explodedArchive59.manifestFile = file69;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive72 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest73 = explodedArchive72.manifest;
        explodedArchive72.recursive = false;
        java.util.jar.Manifest manifest76 = explodedArchive72.manifest;
        java.io.File file77 = explodedArchive72.manifestFile;
        java.io.File file78 = null;
        java.io.File file79 = explodedArchive72.getManifestFile(file78);
        explodedArchive59.manifestFile = file79;
        java.io.File file81 = explodedArchive55.getManifestFile(file79);
        java.io.File file82 = explodedArchive53.getManifestFile(file79);
        fileEntryIterator40.root = file79;
        java.util.Iterator<java.io.File> fileItor84 = fileEntryIterator37.listFiles(file79);
        fileEntryIterator0.current = file79;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str31 + "' != '" + "exploded archive" + "'", str31.equals("exploded archive"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file35.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file35.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file50.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file50.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str54 + "' != '" + "exploded archive" + "'", str54.equals("exploded archive"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file70.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file70.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest73);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest76);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file77);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file79);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file79.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file79.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file81);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file81.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file81.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file82);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file82.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file82.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor84);
    }

    @Test
    public void test0224() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0224");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest1 = explodedArchive0.manifest;
        explodedArchive0.recursive = false;
        java.io.File file4 = null;
        explodedArchive0.root = file4;
        java.io.File file6 = explodedArchive0.root;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive7 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest8 = explodedArchive7.manifest;
        explodedArchive7.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive11 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest12 = explodedArchive11.manifest;
        explodedArchive11.recursive = false;
        java.util.jar.Manifest manifest15 = explodedArchive11.manifest;
        java.io.File file16 = explodedArchive11.manifestFile;
        java.io.File file17 = null;
        java.io.File file18 = explodedArchive11.getManifestFile(file17);
        explodedArchive7.manifestFile = file17;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive20 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest21 = explodedArchive20.manifest;
        explodedArchive20.recursive = false;
        java.util.jar.Manifest manifest24 = explodedArchive20.manifest;
        java.io.File file25 = explodedArchive20.manifestFile;
        java.io.File file26 = null;
        java.io.File file27 = explodedArchive20.getManifestFile(file26);
        explodedArchive7.manifestFile = file27;
        java.io.File file29 = explodedArchive0.getManifestFile(file27);
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive30 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest31 = explodedArchive30.manifest;
        explodedArchive30.recursive = false;
        java.io.File file34 = null;
        explodedArchive30.root = file34;
        java.io.File file36 = explodedArchive30.manifestFile;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive37 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file38 = explodedArchive37.root;
        java.io.File file39 = null;
        explodedArchive37.manifestFile = file39;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive41 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest42 = explodedArchive41.manifest;
        explodedArchive41.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive45 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest46 = explodedArchive45.manifest;
        explodedArchive45.recursive = false;
        java.util.jar.Manifest manifest49 = explodedArchive45.manifest;
        java.io.File file50 = explodedArchive45.manifestFile;
        java.io.File file51 = null;
        java.io.File file52 = explodedArchive45.getManifestFile(file51);
        explodedArchive41.manifestFile = file51;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive54 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest55 = explodedArchive54.manifest;
        explodedArchive54.recursive = false;
        java.util.jar.Manifest manifest58 = explodedArchive54.manifest;
        java.io.File file59 = explodedArchive54.manifestFile;
        java.io.File file60 = null;
        java.io.File file61 = explodedArchive54.getManifestFile(file60);
        explodedArchive41.manifestFile = file61;
        java.io.File file63 = explodedArchive37.getManifestFile(file61);
        java.io.File file64 = explodedArchive30.getManifestFile(file61);
        explodedArchive0.manifestFile = file61;
        explodedArchive0.recursive = true;
        org.springframework.boot.loader.archive.Archive.EntryFilter entryFilter68 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<org.springframework.boot.loader.archive.Archive> archiveList69 = explodedArchive0.getNestedArchives(entryFilter68);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file18.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file18.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file27.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file27.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file29.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file29.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file52.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file52.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file61.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file61.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file63.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file63.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file64.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file64.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
    }

    @Test
    public void test0225() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0225");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest1 = explodedArchive0.manifest;
        explodedArchive0.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive4 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest5 = explodedArchive4.manifest;
        explodedArchive4.recursive = false;
        java.util.jar.Manifest manifest8 = explodedArchive4.manifest;
        java.io.File file9 = explodedArchive4.manifestFile;
        java.io.File file10 = null;
        java.io.File file11 = explodedArchive4.getManifestFile(file10);
        explodedArchive0.manifestFile = file10;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive13 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest14 = explodedArchive13.manifest;
        explodedArchive13.recursive = false;
        java.util.jar.Manifest manifest17 = explodedArchive13.manifest;
        java.io.File file18 = explodedArchive13.manifestFile;
        java.io.File file19 = null;
        java.io.File file20 = explodedArchive13.getManifestFile(file19);
        explodedArchive0.manifestFile = file20;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Spliterator<org.springframework.boot.loader.archive.Archive.Entry> entrySpliterator22 = explodedArchive0.spliterator();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file11.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file11.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file20.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file20.toString(), "META-INF/MANIFEST.MF");
    }

    @Test
    public void test0226() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0226");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator1 = entryComparator0.reversed();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive2 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file3 = explodedArchive2.root;
        java.io.File file4 = null;
        explodedArchive2.manifestFile = file4;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive6 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest7 = explodedArchive6.manifest;
        explodedArchive6.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive10 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest11 = explodedArchive10.manifest;
        explodedArchive10.recursive = false;
        java.util.jar.Manifest manifest14 = explodedArchive10.manifest;
        java.io.File file15 = explodedArchive10.manifestFile;
        java.io.File file16 = null;
        java.io.File file17 = explodedArchive10.getManifestFile(file16);
        explodedArchive6.manifestFile = file16;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive19 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest20 = explodedArchive19.manifest;
        explodedArchive19.recursive = false;
        java.util.jar.Manifest manifest23 = explodedArchive19.manifest;
        java.io.File file24 = explodedArchive19.manifestFile;
        java.io.File file25 = null;
        java.io.File file26 = explodedArchive19.getManifestFile(file25);
        explodedArchive6.manifestFile = file26;
        java.io.File file28 = explodedArchive2.getManifestFile(file26);
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive29 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest30 = explodedArchive29.manifest;
        explodedArchive29.recursive = false;
        java.io.File file33 = null;
        explodedArchive29.root = file33;
        java.io.File file35 = explodedArchive29.root;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive36 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest37 = explodedArchive36.manifest;
        explodedArchive36.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive40 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest41 = explodedArchive40.manifest;
        explodedArchive40.recursive = false;
        java.util.jar.Manifest manifest44 = explodedArchive40.manifest;
        java.io.File file45 = explodedArchive40.manifestFile;
        java.io.File file46 = null;
        java.io.File file47 = explodedArchive40.getManifestFile(file46);
        explodedArchive36.manifestFile = file46;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive49 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest50 = explodedArchive49.manifest;
        explodedArchive49.recursive = false;
        java.util.jar.Manifest manifest53 = explodedArchive49.manifest;
        java.io.File file54 = explodedArchive49.manifestFile;
        java.io.File file55 = null;
        java.io.File file56 = explodedArchive49.getManifestFile(file55);
        explodedArchive36.manifestFile = file56;
        java.io.File file58 = explodedArchive29.getManifestFile(file56);
        int int59 = entryComparator0.compare(file28, file56);
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator60 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file61 = null;
        fileEntryIterator60.current = file61;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive63 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest64 = explodedArchive63.manifest;
        explodedArchive63.recursive = false;
        java.util.jar.Manifest manifest67 = explodedArchive63.manifest;
        java.io.File file68 = explodedArchive63.manifestFile;
        java.io.File file69 = null;
        java.io.File file70 = explodedArchive63.getManifestFile(file69);
        java.util.Iterator<java.io.File> fileItor71 = fileEntryIterator60.listFiles(file70);
        java.io.File file72 = fileEntryIterator60.root;
        java.io.File file73 = fileEntryIterator60.root;
        java.io.File file74 = fileEntryIterator60.current;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator75 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        boolean boolean76 = fileEntryIterator75.hasNext();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator77 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator78 = entryComparator77.reversed();
        java.util.Comparator<java.io.File> fileComparator79 = fileComparator78.reversed();
        fileEntryIterator75.entryComparator = fileComparator79;
        java.util.Comparator<java.io.File> fileComparator81 = fileEntryIterator75.entryComparator;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator82 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator83 = entryComparator82.reversed();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator84 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator85 = entryComparator84.reversed();
        java.util.Comparator<java.io.File> fileComparator86 = entryComparator82.thenComparing(fileComparator85);
        java.util.Comparator<java.io.File> fileComparator87 = fileComparator81.thenComparing(fileComparator85);
        fileEntryIterator60.entryComparator = fileComparator81;
        java.util.Comparator<java.io.File> fileComparator89 = fileComparator81.reversed();
        java.util.Comparator<java.io.File> fileComparator90 = entryComparator0.thenComparing(fileComparator89);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file17.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file17.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file26.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file26.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file28.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file28.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file47.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file47.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file56.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file56.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file58.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file58.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 21 + "'", int59 == 21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file70.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file70.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file73);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator78);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator79);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator81);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator83);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator85);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator86);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator87);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator89);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator90);
    }

    @Test
    public void test0227() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0227");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file1 = null;
        fileEntryIterator0.current = file1;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive3 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.lang.String str4 = explodedArchive3.toString();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive5 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file6 = explodedArchive5.root;
        java.io.File file7 = null;
        explodedArchive5.manifestFile = file7;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive9 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest10 = explodedArchive9.manifest;
        explodedArchive9.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive13 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest14 = explodedArchive13.manifest;
        explodedArchive13.recursive = false;
        java.util.jar.Manifest manifest17 = explodedArchive13.manifest;
        java.io.File file18 = explodedArchive13.manifestFile;
        java.io.File file19 = null;
        java.io.File file20 = explodedArchive13.getManifestFile(file19);
        explodedArchive9.manifestFile = file19;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive22 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest23 = explodedArchive22.manifest;
        explodedArchive22.recursive = false;
        java.util.jar.Manifest manifest26 = explodedArchive22.manifest;
        java.io.File file27 = explodedArchive22.manifestFile;
        java.io.File file28 = null;
        java.io.File file29 = explodedArchive22.getManifestFile(file28);
        explodedArchive9.manifestFile = file29;
        java.io.File file31 = explodedArchive5.getManifestFile(file29);
        java.io.File file32 = explodedArchive3.getManifestFile(file29);
        fileEntryIterator0.root = file29;
        boolean boolean34 = fileEntryIterator0.recursive;
        java.io.File file35 = fileEntryIterator0.current;
        // The following exception was thrown during execution in test generation
        try {
            fileEntryIterator0.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: remove");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str4 + "' != '" + "exploded archive" + "'", str4.equals("exploded archive"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file20.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file20.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file29.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file29.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file31.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file31.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file32.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file32.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file35);
    }

    @Test
    public void test0228() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0228");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator1 = entryComparator0.reversed();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive2 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file3 = explodedArchive2.root;
        java.io.File file4 = null;
        explodedArchive2.manifestFile = file4;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive6 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest7 = explodedArchive6.manifest;
        explodedArchive6.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive10 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest11 = explodedArchive10.manifest;
        explodedArchive10.recursive = false;
        java.util.jar.Manifest manifest14 = explodedArchive10.manifest;
        java.io.File file15 = explodedArchive10.manifestFile;
        java.io.File file16 = null;
        java.io.File file17 = explodedArchive10.getManifestFile(file16);
        explodedArchive6.manifestFile = file16;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive19 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest20 = explodedArchive19.manifest;
        explodedArchive19.recursive = false;
        java.util.jar.Manifest manifest23 = explodedArchive19.manifest;
        java.io.File file24 = explodedArchive19.manifestFile;
        java.io.File file25 = null;
        java.io.File file26 = explodedArchive19.getManifestFile(file25);
        explodedArchive6.manifestFile = file26;
        java.io.File file28 = explodedArchive2.getManifestFile(file26);
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive29 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest30 = explodedArchive29.manifest;
        explodedArchive29.recursive = false;
        java.io.File file33 = null;
        explodedArchive29.root = file33;
        java.io.File file35 = explodedArchive29.root;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive36 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest37 = explodedArchive36.manifest;
        explodedArchive36.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive40 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest41 = explodedArchive40.manifest;
        explodedArchive40.recursive = false;
        java.util.jar.Manifest manifest44 = explodedArchive40.manifest;
        java.io.File file45 = explodedArchive40.manifestFile;
        java.io.File file46 = null;
        java.io.File file47 = explodedArchive40.getManifestFile(file46);
        explodedArchive36.manifestFile = file46;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive49 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest50 = explodedArchive49.manifest;
        explodedArchive49.recursive = false;
        java.util.jar.Manifest manifest53 = explodedArchive49.manifest;
        java.io.File file54 = explodedArchive49.manifestFile;
        java.io.File file55 = null;
        java.io.File file56 = explodedArchive49.getManifestFile(file55);
        explodedArchive36.manifestFile = file56;
        java.io.File file58 = explodedArchive29.getManifestFile(file56);
        int int59 = entryComparator0.compare(file28, file56);
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator60 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        boolean boolean61 = fileEntryIterator60.hasNext();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator62 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator63 = entryComparator62.reversed();
        java.util.Comparator<java.io.File> fileComparator64 = fileComparator63.reversed();
        fileEntryIterator60.entryComparator = fileComparator64;
        java.util.Comparator<java.io.File> fileComparator66 = fileEntryIterator60.entryComparator;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator67 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator68 = entryComparator67.reversed();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator69 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator70 = entryComparator69.reversed();
        java.util.Comparator<java.io.File> fileComparator71 = entryComparator67.thenComparing(fileComparator70);
        java.util.Comparator<java.io.File> fileComparator72 = fileComparator66.thenComparing(fileComparator70);
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator73 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator74 = entryComparator73.reversed();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator75 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator76 = entryComparator75.reversed();
        java.util.Comparator<java.io.File> fileComparator77 = entryComparator73.thenComparing(fileComparator76);
        java.util.Comparator<java.io.File> fileComparator78 = fileComparator72.thenComparing((java.util.Comparator<java.io.File>) entryComparator73);
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator79 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        boolean boolean80 = fileEntryIterator79.hasNext();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator81 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator82 = entryComparator81.reversed();
        java.util.Comparator<java.io.File> fileComparator83 = fileComparator82.reversed();
        fileEntryIterator79.entryComparator = fileComparator83;
        java.util.Comparator<java.io.File> fileComparator85 = fileComparator72.thenComparing(fileComparator83);
        java.util.Comparator<java.io.File> fileComparator86 = fileComparator83.reversed();
        java.util.Comparator<java.io.File> fileComparator87 = entryComparator0.thenComparing(fileComparator86);
        java.util.Comparator<java.io.File> fileComparator88 = fileComparator87.reversed();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file17.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file17.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file26.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file26.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file28.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file28.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file47.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file47.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file56.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file56.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file58.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file58.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 21 + "'", int59 == 21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator76);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator77);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator78);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator82);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator83);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator85);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator86);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator87);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator88);
    }

    @Test
    public void test0229() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0229");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file1 = null;
        fileEntryIterator0.current = file1;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive3 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest4 = explodedArchive3.manifest;
        explodedArchive3.recursive = false;
        java.util.jar.Manifest manifest7 = explodedArchive3.manifest;
        java.io.File file8 = explodedArchive3.manifestFile;
        java.io.File file9 = null;
        java.io.File file10 = explodedArchive3.getManifestFile(file9);
        java.util.Iterator<java.io.File> fileItor11 = fileEntryIterator0.listFiles(file10);
        boolean boolean12 = fileEntryIterator0.hasNext();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator13 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator14 = entryComparator13.reversed();
        java.util.Comparator<java.io.File> fileComparator15 = entryComparator13.reversed();
        fileEntryIterator0.entryComparator = fileComparator15;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator17 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file18 = null;
        fileEntryIterator17.current = file18;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive20 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest21 = explodedArchive20.manifest;
        explodedArchive20.recursive = false;
        java.util.jar.Manifest manifest24 = explodedArchive20.manifest;
        java.io.File file25 = explodedArchive20.manifestFile;
        java.io.File file26 = null;
        java.io.File file27 = explodedArchive20.getManifestFile(file26);
        java.util.Iterator<java.io.File> fileItor28 = fileEntryIterator17.listFiles(file27);
        java.util.Comparator<java.io.File> fileComparator29 = fileEntryIterator17.entryComparator;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator30 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file31 = null;
        fileEntryIterator30.current = file31;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive33 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest34 = explodedArchive33.manifest;
        explodedArchive33.recursive = false;
        java.util.jar.Manifest manifest37 = explodedArchive33.manifest;
        java.io.File file38 = explodedArchive33.manifestFile;
        java.io.File file39 = null;
        java.io.File file40 = explodedArchive33.getManifestFile(file39);
        java.util.Iterator<java.io.File> fileItor41 = fileEntryIterator30.listFiles(file40);
        java.io.File file42 = fileEntryIterator30.current;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator43 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file44 = null;
        fileEntryIterator43.current = file44;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive46 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest47 = explodedArchive46.manifest;
        explodedArchive46.recursive = false;
        java.util.jar.Manifest manifest50 = explodedArchive46.manifest;
        java.io.File file51 = explodedArchive46.manifestFile;
        java.io.File file52 = null;
        java.io.File file53 = explodedArchive46.getManifestFile(file52);
        java.util.Iterator<java.io.File> fileItor54 = fileEntryIterator43.listFiles(file53);
        java.io.File file55 = fileEntryIterator43.current;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator56 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file57 = null;
        fileEntryIterator56.current = file57;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive59 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest60 = explodedArchive59.manifest;
        explodedArchive59.recursive = false;
        java.util.jar.Manifest manifest63 = explodedArchive59.manifest;
        java.io.File file64 = explodedArchive59.manifestFile;
        java.io.File file65 = null;
        java.io.File file66 = explodedArchive59.getManifestFile(file65);
        java.util.Iterator<java.io.File> fileItor67 = fileEntryIterator56.listFiles(file66);
        java.util.ArrayDeque<java.util.Iterator<java.io.File>> fileItorQueue68 = new java.util.ArrayDeque<java.util.Iterator<java.io.File>>();
        boolean boolean69 = fileItorQueue68.add(fileItor67);
        fileEntryIterator43.stack = fileItorQueue68;
        fileEntryIterator30.stack = fileItorQueue68;
        fileEntryIterator17.stack = fileItorQueue68;
        fileEntryIterator0.stack = fileItorQueue68;
        java.util.Comparator<java.io.File> fileComparator74 = fileEntryIterator0.entryComparator;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator75 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator76 = entryComparator75.reversed();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator77 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator78 = entryComparator77.reversed();
        java.util.Comparator<java.io.File> fileComparator79 = entryComparator75.thenComparing(fileComparator78);
        java.util.Comparator<java.io.File> fileComparator80 = fileComparator74.thenComparing(fileComparator78);
        java.util.Comparator<java.io.File> fileComparator81 = fileComparator74.reversed();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file27.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file27.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file40.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file40.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file53.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file53.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file66.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file66.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator76);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator78);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator79);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator80);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator81);
    }

    @Test
    public void test0230() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0230");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntry fileEntry0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntry();
        java.io.File file1 = fileEntry0.file;
        java.lang.String str2 = fileEntry0.name;
        java.io.File file3 = fileEntry0.file;
        java.io.File file4 = fileEntry0.file;
        java.lang.String str5 = fileEntry0.name;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive6 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.lang.String str7 = explodedArchive6.toString();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive8 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file9 = explodedArchive8.root;
        java.io.File file10 = null;
        explodedArchive8.manifestFile = file10;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive12 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest13 = explodedArchive12.manifest;
        explodedArchive12.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive16 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest17 = explodedArchive16.manifest;
        explodedArchive16.recursive = false;
        java.util.jar.Manifest manifest20 = explodedArchive16.manifest;
        java.io.File file21 = explodedArchive16.manifestFile;
        java.io.File file22 = null;
        java.io.File file23 = explodedArchive16.getManifestFile(file22);
        explodedArchive12.manifestFile = file22;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive25 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest26 = explodedArchive25.manifest;
        explodedArchive25.recursive = false;
        java.util.jar.Manifest manifest29 = explodedArchive25.manifest;
        java.io.File file30 = explodedArchive25.manifestFile;
        java.io.File file31 = null;
        java.io.File file32 = explodedArchive25.getManifestFile(file31);
        explodedArchive12.manifestFile = file32;
        java.io.File file34 = explodedArchive8.getManifestFile(file32);
        java.io.File file35 = explodedArchive6.getManifestFile(file32);
        fileEntry0.file = file32;
        // The following exception was thrown during execution in test generation
        try {
            org.springframework.boot.loader.archive.ExplodedArchive explodedArchive37 = new org.springframework.boot.loader.archive.ExplodedArchive(file32);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid source folder META-INF/MANIFEST.MF");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str7 + "' != '" + "exploded archive" + "'", str7.equals("exploded archive"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file23.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file23.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file32.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file32.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file34.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file34.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file35.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file35.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
    }

    @Test
    public void test0231() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0231");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest1 = explodedArchive0.manifest;
        java.util.jar.Manifest manifest2 = null;
        explodedArchive0.manifest = manifest2;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator4 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        boolean boolean5 = fileEntryIterator4.hasNext();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator6 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator7 = entryComparator6.reversed();
        java.util.Comparator<java.io.File> fileComparator8 = fileComparator7.reversed();
        fileEntryIterator4.entryComparator = fileComparator8;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive10 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file11 = explodedArchive10.root;
        java.io.File file12 = null;
        explodedArchive10.manifestFile = file12;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive14 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest15 = explodedArchive14.manifest;
        explodedArchive14.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive18 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest19 = explodedArchive18.manifest;
        explodedArchive18.recursive = false;
        java.util.jar.Manifest manifest22 = explodedArchive18.manifest;
        java.io.File file23 = explodedArchive18.manifestFile;
        java.io.File file24 = null;
        java.io.File file25 = explodedArchive18.getManifestFile(file24);
        explodedArchive14.manifestFile = file24;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive27 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest28 = explodedArchive27.manifest;
        explodedArchive27.recursive = false;
        java.util.jar.Manifest manifest31 = explodedArchive27.manifest;
        java.io.File file32 = explodedArchive27.manifestFile;
        java.io.File file33 = null;
        java.io.File file34 = explodedArchive27.getManifestFile(file33);
        explodedArchive14.manifestFile = file34;
        java.io.File file36 = explodedArchive10.getManifestFile(file34);
        java.util.Iterator<java.io.File> fileItor37 = fileEntryIterator4.listFiles(file36);
        java.io.File file38 = explodedArchive0.getManifestFile(file36);
        java.lang.String str39 = explodedArchive0.toString();
        explodedArchive0.recursive = true;
        // The following exception was thrown during execution in test generation
        try {
            java.net.URL uRL42 = explodedArchive0.getUrl();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file25.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file25.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file34.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file34.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file36.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file36.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file38.getParent(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file38.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str39 + "' != '" + "exploded archive" + "'", str39.equals("exploded archive"));
    }

    @Test
    public void test0232() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0232");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        boolean boolean1 = fileEntryIterator0.hasNext();
        java.io.File file2 = fileEntryIterator0.root;
        boolean boolean3 = fileEntryIterator0.hasNext();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator4 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator5 = entryComparator4.reversed();
        java.util.Comparator<java.io.File> fileComparator6 = entryComparator4.reversed();
        fileEntryIterator0.entryComparator = entryComparator4;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator8 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        boolean boolean9 = fileEntryIterator8.recursive;
        java.io.File file10 = fileEntryIterator8.current;
        boolean boolean11 = fileEntryIterator8.hasNext();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator12 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file13 = null;
        fileEntryIterator12.current = file13;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive15 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest16 = explodedArchive15.manifest;
        explodedArchive15.recursive = false;
        java.util.jar.Manifest manifest19 = explodedArchive15.manifest;
        java.io.File file20 = explodedArchive15.manifestFile;
        java.io.File file21 = null;
        java.io.File file22 = explodedArchive15.getManifestFile(file21);
        java.util.Iterator<java.io.File> fileItor23 = fileEntryIterator12.listFiles(file22);
        java.io.File file24 = fileEntryIterator12.root;
        java.io.File file25 = fileEntryIterator12.root;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator26 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file27 = null;
        fileEntryIterator26.current = file27;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive29 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest30 = explodedArchive29.manifest;
        explodedArchive29.recursive = false;
        java.util.jar.Manifest manifest33 = explodedArchive29.manifest;
        java.io.File file34 = explodedArchive29.manifestFile;
        java.io.File file35 = null;
        java.io.File file36 = explodedArchive29.getManifestFile(file35);
        java.util.Iterator<java.io.File> fileItor37 = fileEntryIterator26.listFiles(file36);
        java.util.ArrayDeque<java.util.Iterator<java.io.File>> fileItorQueue38 = new java.util.ArrayDeque<java.util.Iterator<java.io.File>>();
        boolean boolean39 = fileItorQueue38.add(fileItor37);
        fileEntryIterator12.stack = fileItorQueue38;
        fileEntryIterator8.stack = fileItorQueue38;
        fileEntryIterator0.stack = fileItorQueue38;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file22.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file22.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file36.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file36.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
    }

    @Test
    public void test0233() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0233");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file1 = null;
        fileEntryIterator0.current = file1;
        fileEntryIterator0.recursive = true;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator5 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator6 = entryComparator5.reversed();
        java.util.Comparator<java.io.File> fileComparator7 = entryComparator5.reversed();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive8 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest9 = explodedArchive8.manifest;
        explodedArchive8.recursive = false;
        java.util.jar.Manifest manifest12 = explodedArchive8.manifest;
        java.io.File file13 = explodedArchive8.manifestFile;
        java.io.File file14 = null;
        java.io.File file15 = explodedArchive8.getManifestFile(file14);
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive16 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest17 = explodedArchive16.manifest;
        explodedArchive16.recursive = false;
        java.io.File file20 = null;
        explodedArchive16.root = file20;
        java.io.File file22 = explodedArchive16.root;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive23 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest24 = explodedArchive23.manifest;
        explodedArchive23.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive27 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest28 = explodedArchive27.manifest;
        explodedArchive27.recursive = false;
        java.util.jar.Manifest manifest31 = explodedArchive27.manifest;
        java.io.File file32 = explodedArchive27.manifestFile;
        java.io.File file33 = null;
        java.io.File file34 = explodedArchive27.getManifestFile(file33);
        explodedArchive23.manifestFile = file33;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive36 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest37 = explodedArchive36.manifest;
        explodedArchive36.recursive = false;
        java.util.jar.Manifest manifest40 = explodedArchive36.manifest;
        java.io.File file41 = explodedArchive36.manifestFile;
        java.io.File file42 = null;
        java.io.File file43 = explodedArchive36.getManifestFile(file42);
        explodedArchive23.manifestFile = file43;
        java.io.File file45 = explodedArchive16.getManifestFile(file43);
        int int46 = entryComparator5.compare(file15, file43);
        java.util.Iterator<java.io.File> fileItor47 = fileEntryIterator0.listFiles(file15);
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator48 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        boolean boolean49 = fileEntryIterator48.hasNext();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator50 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator51 = entryComparator50.reversed();
        java.util.Comparator<java.io.File> fileComparator52 = fileComparator51.reversed();
        fileEntryIterator48.entryComparator = fileComparator52;
        java.util.Comparator<java.io.File> fileComparator54 = fileEntryIterator48.entryComparator;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator55 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator56 = entryComparator55.reversed();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator57 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator58 = entryComparator57.reversed();
        java.util.Comparator<java.io.File> fileComparator59 = entryComparator55.thenComparing(fileComparator58);
        java.util.Comparator<java.io.File> fileComparator60 = fileComparator54.thenComparing(fileComparator58);
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator61 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator62 = entryComparator61.reversed();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator63 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator64 = entryComparator63.reversed();
        java.util.Comparator<java.io.File> fileComparator65 = entryComparator61.thenComparing(fileComparator64);
        java.util.Comparator<java.io.File> fileComparator66 = fileComparator58.thenComparing(fileComparator64);
        fileEntryIterator0.entryComparator = fileComparator64;
        fileEntryIterator0.recursive = false;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file15.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file15.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file34.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file34.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file43.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file43.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file45.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file45.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator66);
    }

    @Test
    public void test0234() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0234");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntry fileEntry0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntry();
        java.lang.String str1 = fileEntry0.name;
        java.io.File file2 = fileEntry0.getFile();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file2);
    }

    @Test
    public void test0235() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0235");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file1 = null;
        fileEntryIterator0.current = file1;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive3 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest4 = explodedArchive3.manifest;
        explodedArchive3.recursive = false;
        java.util.jar.Manifest manifest7 = explodedArchive3.manifest;
        java.io.File file8 = explodedArchive3.manifestFile;
        java.io.File file9 = null;
        java.io.File file10 = explodedArchive3.getManifestFile(file9);
        java.util.Iterator<java.io.File> fileItor11 = fileEntryIterator0.listFiles(file10);
        java.io.File file12 = fileEntryIterator0.root;
        java.io.File file13 = fileEntryIterator0.root;
        java.util.Deque<java.util.Iterator<java.io.File>> fileItorQueue14 = fileEntryIterator0.stack;
        java.io.File file15 = fileEntryIterator0.root;
        java.util.Comparator<java.io.File> fileComparator16 = fileEntryIterator0.entryComparator;
        // The following exception was thrown during execution in test generation
        try {
            org.springframework.boot.loader.archive.Archive.Entry entry17 = fileEntryIterator0.next();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItorQueue14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator16);
    }

    @Test
    public void test0236() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0236");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest1 = explodedArchive0.manifest;
        java.util.jar.Manifest manifest2 = null;
        explodedArchive0.manifest = manifest2;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator4 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        boolean boolean5 = fileEntryIterator4.hasNext();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator6 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator7 = entryComparator6.reversed();
        java.util.Comparator<java.io.File> fileComparator8 = fileComparator7.reversed();
        fileEntryIterator4.entryComparator = fileComparator8;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive10 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file11 = explodedArchive10.root;
        java.io.File file12 = null;
        explodedArchive10.manifestFile = file12;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive14 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest15 = explodedArchive14.manifest;
        explodedArchive14.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive18 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest19 = explodedArchive18.manifest;
        explodedArchive18.recursive = false;
        java.util.jar.Manifest manifest22 = explodedArchive18.manifest;
        java.io.File file23 = explodedArchive18.manifestFile;
        java.io.File file24 = null;
        java.io.File file25 = explodedArchive18.getManifestFile(file24);
        explodedArchive14.manifestFile = file24;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive27 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest28 = explodedArchive27.manifest;
        explodedArchive27.recursive = false;
        java.util.jar.Manifest manifest31 = explodedArchive27.manifest;
        java.io.File file32 = explodedArchive27.manifestFile;
        java.io.File file33 = null;
        java.io.File file34 = explodedArchive27.getManifestFile(file33);
        explodedArchive14.manifestFile = file34;
        java.io.File file36 = explodedArchive10.getManifestFile(file34);
        java.util.Iterator<java.io.File> fileItor37 = fileEntryIterator4.listFiles(file36);
        java.io.File file38 = explodedArchive0.getManifestFile(file36);
        java.lang.String str39 = explodedArchive0.toString();
        // The following exception was thrown during execution in test generation
        try {
            java.util.jar.Manifest manifest40 = explodedArchive0.getManifest();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file25.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file25.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file34.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file34.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file36.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file36.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file38.getParent(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file38.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str39 + "' != '" + "exploded archive" + "'", str39.equals("exploded archive"));
    }

    @Test
    public void test0237() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0237");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file1 = explodedArchive0.root;
        explodedArchive0.recursive = false;
        java.lang.Class<?> wildcardClass4 = explodedArchive0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass4);
    }

    @Test
    public void test0238() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0238");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file1 = null;
        fileEntryIterator0.current = file1;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive3 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest4 = explodedArchive3.manifest;
        explodedArchive3.recursive = false;
        java.util.jar.Manifest manifest7 = explodedArchive3.manifest;
        java.io.File file8 = explodedArchive3.manifestFile;
        java.io.File file9 = null;
        java.io.File file10 = explodedArchive3.getManifestFile(file9);
        java.util.Iterator<java.io.File> fileItor11 = fileEntryIterator0.listFiles(file10);
        java.io.File file12 = fileEntryIterator0.current;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator13 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file14 = null;
        fileEntryIterator13.current = file14;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive16 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest17 = explodedArchive16.manifest;
        explodedArchive16.recursive = false;
        java.util.jar.Manifest manifest20 = explodedArchive16.manifest;
        java.io.File file21 = explodedArchive16.manifestFile;
        java.io.File file22 = null;
        java.io.File file23 = explodedArchive16.getManifestFile(file22);
        java.util.Iterator<java.io.File> fileItor24 = fileEntryIterator13.listFiles(file23);
        java.util.ArrayDeque<java.util.Iterator<java.io.File>> fileItorQueue25 = new java.util.ArrayDeque<java.util.Iterator<java.io.File>>();
        boolean boolean26 = fileItorQueue25.add(fileItor24);
        fileEntryIterator0.stack = fileItorQueue25;
        boolean boolean28 = fileEntryIterator0.recursive;
        // The following exception was thrown during execution in test generation
        try {
            fileEntryIterator0.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: remove");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file23.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file23.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test0239() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0239");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest1 = explodedArchive0.manifest;
        explodedArchive0.recursive = false;
        java.util.jar.Manifest manifest4 = explodedArchive0.manifest;
        java.io.File file5 = explodedArchive0.manifestFile;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntry fileEntry6 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntry();
        java.lang.String str7 = fileEntry6.getName();
        java.io.File file8 = fileEntry6.getFile();
        java.lang.String str9 = fileEntry6.getName();
        java.lang.String str10 = fileEntry6.getName();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator11 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        boolean boolean12 = fileEntryIterator11.recursive;
        java.io.File file13 = fileEntryIterator11.current;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator14 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file15 = null;
        fileEntryIterator14.current = file15;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive17 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest18 = explodedArchive17.manifest;
        explodedArchive17.recursive = false;
        java.util.jar.Manifest manifest21 = explodedArchive17.manifest;
        java.io.File file22 = explodedArchive17.manifestFile;
        java.io.File file23 = null;
        java.io.File file24 = explodedArchive17.getManifestFile(file23);
        java.util.Iterator<java.io.File> fileItor25 = fileEntryIterator14.listFiles(file24);
        java.io.File file26 = fileEntryIterator14.root;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive27 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.lang.String str28 = explodedArchive27.toString();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive29 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file30 = explodedArchive29.root;
        java.io.File file31 = null;
        explodedArchive29.manifestFile = file31;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive33 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest34 = explodedArchive33.manifest;
        explodedArchive33.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive37 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest38 = explodedArchive37.manifest;
        explodedArchive37.recursive = false;
        java.util.jar.Manifest manifest41 = explodedArchive37.manifest;
        java.io.File file42 = explodedArchive37.manifestFile;
        java.io.File file43 = null;
        java.io.File file44 = explodedArchive37.getManifestFile(file43);
        explodedArchive33.manifestFile = file43;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive46 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest47 = explodedArchive46.manifest;
        explodedArchive46.recursive = false;
        java.util.jar.Manifest manifest50 = explodedArchive46.manifest;
        java.io.File file51 = explodedArchive46.manifestFile;
        java.io.File file52 = null;
        java.io.File file53 = explodedArchive46.getManifestFile(file52);
        explodedArchive33.manifestFile = file53;
        java.io.File file55 = explodedArchive29.getManifestFile(file53);
        java.io.File file56 = explodedArchive27.getManifestFile(file53);
        fileEntryIterator14.root = file53;
        java.util.Iterator<java.io.File> fileItor58 = fileEntryIterator11.listFiles(file53);
        fileEntry6.file = file53;
        explodedArchive0.manifestFile = file53;
        boolean boolean61 = explodedArchive0.recursive;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file24.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file24.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str28 + "' != '" + "exploded archive" + "'", str28.equals("exploded archive"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file44.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file44.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file53.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file53.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file55.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file55.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file56.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file56.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
    }

    @Test
    public void test0240() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0240");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntry fileEntry0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntry();
        java.io.File file1 = fileEntry0.getFile();
        java.io.File file2 = fileEntry0.getFile();
        java.lang.String str3 = fileEntry0.name;
        java.io.File file4 = fileEntry0.getFile();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator5 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file6 = null;
        fileEntryIterator5.current = file6;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive8 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest9 = explodedArchive8.manifest;
        explodedArchive8.recursive = false;
        java.util.jar.Manifest manifest12 = explodedArchive8.manifest;
        java.io.File file13 = explodedArchive8.manifestFile;
        java.io.File file14 = null;
        java.io.File file15 = explodedArchive8.getManifestFile(file14);
        java.util.Iterator<java.io.File> fileItor16 = fileEntryIterator5.listFiles(file15);
        fileEntry0.file = file15;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntry fileEntry18 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntry();
        java.io.File file19 = fileEntry18.getFile();
        java.io.File file20 = fileEntry18.getFile();
        java.lang.String str21 = fileEntry18.name;
        java.io.File file22 = fileEntry18.getFile();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator23 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file24 = null;
        fileEntryIterator23.current = file24;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive26 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest27 = explodedArchive26.manifest;
        explodedArchive26.recursive = false;
        java.util.jar.Manifest manifest30 = explodedArchive26.manifest;
        java.io.File file31 = explodedArchive26.manifestFile;
        java.io.File file32 = null;
        java.io.File file33 = explodedArchive26.getManifestFile(file32);
        java.util.Iterator<java.io.File> fileItor34 = fileEntryIterator23.listFiles(file33);
        fileEntry18.file = file33;
        fileEntry0.file = file33;
        boolean boolean37 = fileEntry0.isDirectory();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file15.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file15.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file33.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file33.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
    }

    @Test
    public void test0241() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0241");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator1 = entryComparator0.reversed();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator2 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file3 = null;
        fileEntryIterator2.current = file3;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive5 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest6 = explodedArchive5.manifest;
        explodedArchive5.recursive = false;
        java.util.jar.Manifest manifest9 = explodedArchive5.manifest;
        java.io.File file10 = explodedArchive5.manifestFile;
        java.io.File file11 = null;
        java.io.File file12 = explodedArchive5.getManifestFile(file11);
        java.util.Iterator<java.io.File> fileItor13 = fileEntryIterator2.listFiles(file12);
        java.io.File file14 = fileEntryIterator2.current;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator15 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file16 = null;
        fileEntryIterator15.current = file16;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive18 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest19 = explodedArchive18.manifest;
        explodedArchive18.recursive = false;
        java.util.jar.Manifest manifest22 = explodedArchive18.manifest;
        java.io.File file23 = explodedArchive18.manifestFile;
        java.io.File file24 = null;
        java.io.File file25 = explodedArchive18.getManifestFile(file24);
        java.util.Iterator<java.io.File> fileItor26 = fileEntryIterator15.listFiles(file25);
        java.util.ArrayDeque<java.util.Iterator<java.io.File>> fileItorQueue27 = new java.util.ArrayDeque<java.util.Iterator<java.io.File>>();
        boolean boolean28 = fileItorQueue27.add(fileItor26);
        fileEntryIterator2.stack = fileItorQueue27;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive30 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest31 = explodedArchive30.manifest;
        explodedArchive30.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive34 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest35 = explodedArchive34.manifest;
        explodedArchive34.recursive = false;
        java.util.jar.Manifest manifest38 = explodedArchive34.manifest;
        java.io.File file39 = explodedArchive34.manifestFile;
        java.io.File file40 = null;
        java.io.File file41 = explodedArchive34.getManifestFile(file40);
        explodedArchive30.manifestFile = file40;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive43 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest44 = explodedArchive43.manifest;
        explodedArchive43.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive47 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest48 = explodedArchive47.manifest;
        explodedArchive47.recursive = false;
        java.util.jar.Manifest manifest51 = explodedArchive47.manifest;
        java.io.File file52 = explodedArchive47.manifestFile;
        java.io.File file53 = null;
        java.io.File file54 = explodedArchive47.getManifestFile(file53);
        explodedArchive43.manifestFile = file53;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive56 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest57 = explodedArchive56.manifest;
        explodedArchive56.recursive = false;
        java.util.jar.Manifest manifest60 = explodedArchive56.manifest;
        java.io.File file61 = explodedArchive56.manifestFile;
        java.io.File file62 = null;
        java.io.File file63 = explodedArchive56.getManifestFile(file62);
        explodedArchive43.manifestFile = file63;
        explodedArchive30.root = file63;
        java.util.Iterator<java.io.File> fileItor66 = fileEntryIterator2.listFiles(file63);
        java.util.Comparator<java.io.File> fileComparator67 = fileEntryIterator2.entryComparator;
        java.util.Comparator<java.io.File> fileComparator68 = entryComparator0.thenComparing(fileComparator67);
        java.lang.Class<?> wildcardClass69 = entryComparator0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file12.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file12.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file25.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file25.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file41.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file41.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file54.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file54.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file63.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file63.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass69);
    }

    @Test
    public void test0242() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0242");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest1 = explodedArchive0.manifest;
        explodedArchive0.recursive = false;
        java.util.jar.Manifest manifest4 = explodedArchive0.manifest;
        java.io.File file5 = explodedArchive0.manifestFile;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntry fileEntry6 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntry();
        java.lang.String str7 = fileEntry6.getName();
        java.io.File file8 = fileEntry6.getFile();
        java.lang.String str9 = fileEntry6.getName();
        java.lang.String str10 = fileEntry6.getName();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator11 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        boolean boolean12 = fileEntryIterator11.recursive;
        java.io.File file13 = fileEntryIterator11.current;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator14 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file15 = null;
        fileEntryIterator14.current = file15;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive17 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest18 = explodedArchive17.manifest;
        explodedArchive17.recursive = false;
        java.util.jar.Manifest manifest21 = explodedArchive17.manifest;
        java.io.File file22 = explodedArchive17.manifestFile;
        java.io.File file23 = null;
        java.io.File file24 = explodedArchive17.getManifestFile(file23);
        java.util.Iterator<java.io.File> fileItor25 = fileEntryIterator14.listFiles(file24);
        java.io.File file26 = fileEntryIterator14.root;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive27 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.lang.String str28 = explodedArchive27.toString();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive29 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file30 = explodedArchive29.root;
        java.io.File file31 = null;
        explodedArchive29.manifestFile = file31;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive33 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest34 = explodedArchive33.manifest;
        explodedArchive33.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive37 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest38 = explodedArchive37.manifest;
        explodedArchive37.recursive = false;
        java.util.jar.Manifest manifest41 = explodedArchive37.manifest;
        java.io.File file42 = explodedArchive37.manifestFile;
        java.io.File file43 = null;
        java.io.File file44 = explodedArchive37.getManifestFile(file43);
        explodedArchive33.manifestFile = file43;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive46 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest47 = explodedArchive46.manifest;
        explodedArchive46.recursive = false;
        java.util.jar.Manifest manifest50 = explodedArchive46.manifest;
        java.io.File file51 = explodedArchive46.manifestFile;
        java.io.File file52 = null;
        java.io.File file53 = explodedArchive46.getManifestFile(file52);
        explodedArchive33.manifestFile = file53;
        java.io.File file55 = explodedArchive29.getManifestFile(file53);
        java.io.File file56 = explodedArchive27.getManifestFile(file53);
        fileEntryIterator14.root = file53;
        java.util.Iterator<java.io.File> fileItor58 = fileEntryIterator11.listFiles(file53);
        fileEntry6.file = file53;
        explodedArchive0.manifestFile = file53;
        java.io.File file61 = explodedArchive0.manifestFile;
        // The following exception was thrown during execution in test generation
        try {
            org.springframework.boot.loader.archive.ExplodedArchive explodedArchive62 = new org.springframework.boot.loader.archive.ExplodedArchive(file61);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid source folder META-INF/MANIFEST.MF");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file24.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file24.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str28 + "' != '" + "exploded archive" + "'", str28.equals("exploded archive"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file44.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file44.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file53.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file53.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file55.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file55.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file56.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file56.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file61.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file61.toString(), "META-INF/MANIFEST.MF");
    }

    @Test
    public void test0243() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0243");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest1 = explodedArchive0.manifest;
        explodedArchive0.recursive = false;
        java.io.File file4 = null;
        explodedArchive0.root = file4;
        java.io.File file6 = explodedArchive0.root;
        java.util.jar.Manifest manifest7 = null;
        explodedArchive0.manifest = manifest7;
        explodedArchive0.recursive = false;
        explodedArchive0.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive13 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest14 = explodedArchive13.manifest;
        explodedArchive13.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive17 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest18 = explodedArchive17.manifest;
        explodedArchive17.recursive = false;
        java.util.jar.Manifest manifest21 = explodedArchive17.manifest;
        java.io.File file22 = explodedArchive17.manifestFile;
        java.io.File file23 = null;
        java.io.File file24 = explodedArchive17.getManifestFile(file23);
        explodedArchive13.manifestFile = file23;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive26 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest27 = explodedArchive26.manifest;
        explodedArchive26.recursive = false;
        java.util.jar.Manifest manifest30 = explodedArchive26.manifest;
        java.io.File file31 = explodedArchive26.manifestFile;
        java.io.File file32 = null;
        java.io.File file33 = explodedArchive26.getManifestFile(file32);
        explodedArchive13.manifestFile = file33;
        explodedArchive0.manifestFile = file33;
        java.lang.Class<?> wildcardClass36 = file33.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file24.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file24.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file33.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file33.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass36);
    }

    @Test
    public void test0244() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0244");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file1 = explodedArchive0.root;
        java.io.File file2 = null;
        explodedArchive0.manifestFile = file2;
        java.io.File file4 = explodedArchive0.root;
        java.lang.String str5 = explodedArchive0.toString();
        java.util.jar.Manifest manifest6 = null;
        explodedArchive0.manifest = manifest6;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator8 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        boolean boolean9 = fileEntryIterator8.recursive;
        java.io.File file10 = fileEntryIterator8.current;
        boolean boolean11 = fileEntryIterator8.hasNext();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator12 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator13 = entryComparator12.reversed();
        java.util.Comparator<java.io.File> fileComparator14 = entryComparator12.reversed();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive15 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest16 = explodedArchive15.manifest;
        explodedArchive15.recursive = false;
        java.util.jar.Manifest manifest19 = explodedArchive15.manifest;
        java.io.File file20 = explodedArchive15.manifestFile;
        java.io.File file21 = null;
        java.io.File file22 = explodedArchive15.getManifestFile(file21);
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive23 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest24 = explodedArchive23.manifest;
        explodedArchive23.recursive = false;
        java.io.File file27 = null;
        explodedArchive23.root = file27;
        java.io.File file29 = explodedArchive23.root;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive30 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest31 = explodedArchive30.manifest;
        explodedArchive30.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive34 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest35 = explodedArchive34.manifest;
        explodedArchive34.recursive = false;
        java.util.jar.Manifest manifest38 = explodedArchive34.manifest;
        java.io.File file39 = explodedArchive34.manifestFile;
        java.io.File file40 = null;
        java.io.File file41 = explodedArchive34.getManifestFile(file40);
        explodedArchive30.manifestFile = file40;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive43 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest44 = explodedArchive43.manifest;
        explodedArchive43.recursive = false;
        java.util.jar.Manifest manifest47 = explodedArchive43.manifest;
        java.io.File file48 = explodedArchive43.manifestFile;
        java.io.File file49 = null;
        java.io.File file50 = explodedArchive43.getManifestFile(file49);
        explodedArchive30.manifestFile = file50;
        java.io.File file52 = explodedArchive23.getManifestFile(file50);
        int int53 = entryComparator12.compare(file22, file50);
        java.util.Iterator<java.io.File> fileItor54 = fileEntryIterator8.listFiles(file22);
        java.io.File file55 = explodedArchive0.getManifestFile(file22);
        org.springframework.boot.loader.archive.Archive.EntryFilter entryFilter56 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<org.springframework.boot.loader.archive.Archive> archiveList57 = explodedArchive0.getNestedArchives(entryFilter56);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "exploded archive" + "'", str5.equals("exploded archive"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file22.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file22.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file41.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file41.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file50.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file50.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file52.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file52.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file55.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file55.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
    }

    @Test
    public void test0245() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0245");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file1 = null;
        fileEntryIterator0.current = file1;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive3 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest4 = explodedArchive3.manifest;
        explodedArchive3.recursive = false;
        java.util.jar.Manifest manifest7 = explodedArchive3.manifest;
        java.io.File file8 = explodedArchive3.manifestFile;
        java.io.File file9 = null;
        java.io.File file10 = explodedArchive3.getManifestFile(file9);
        java.util.Iterator<java.io.File> fileItor11 = fileEntryIterator0.listFiles(file10);
        java.io.File file12 = fileEntryIterator0.root;
        java.io.File file13 = fileEntryIterator0.root;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive14 = new org.springframework.boot.loader.archive.ExplodedArchive();
        boolean boolean15 = explodedArchive14.recursive;
        boolean boolean16 = explodedArchive14.recursive;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive17 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file18 = explodedArchive17.root;
        java.io.File file19 = null;
        explodedArchive17.manifestFile = file19;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive21 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest22 = explodedArchive21.manifest;
        explodedArchive21.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive25 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest26 = explodedArchive25.manifest;
        explodedArchive25.recursive = false;
        java.util.jar.Manifest manifest29 = explodedArchive25.manifest;
        java.io.File file30 = explodedArchive25.manifestFile;
        java.io.File file31 = null;
        java.io.File file32 = explodedArchive25.getManifestFile(file31);
        explodedArchive21.manifestFile = file31;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive34 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest35 = explodedArchive34.manifest;
        explodedArchive34.recursive = false;
        java.util.jar.Manifest manifest38 = explodedArchive34.manifest;
        java.io.File file39 = explodedArchive34.manifestFile;
        java.io.File file40 = null;
        java.io.File file41 = explodedArchive34.getManifestFile(file40);
        explodedArchive21.manifestFile = file41;
        java.io.File file43 = explodedArchive17.getManifestFile(file41);
        explodedArchive14.manifestFile = file41;
        fileEntryIterator0.current = file41;
        // The following exception was thrown during execution in test generation
        try {
            org.springframework.boot.loader.archive.ExplodedArchive explodedArchive46 = new org.springframework.boot.loader.archive.ExplodedArchive(file41);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid source folder META-INF/MANIFEST.MF");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file32.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file32.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file41.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file41.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file43.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file43.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
    }

    @Test
    public void test0246() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0246");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntry fileEntry0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntry();
        java.io.File file1 = fileEntry0.getFile();
        java.io.File file2 = fileEntry0.getFile();
        java.lang.String str3 = fileEntry0.name;
        fileEntry0.name = "";
        java.io.File file6 = fileEntry0.file;
        java.io.File file7 = fileEntry0.getFile();
        java.io.File file8 = fileEntry0.file;
        java.io.File file9 = fileEntry0.getFile();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file9);
    }

    @Test
    public void test0247() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0247");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.lang.String str1 = explodedArchive0.toString();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive2 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file3 = explodedArchive2.root;
        java.io.File file4 = null;
        explodedArchive2.manifestFile = file4;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive6 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest7 = explodedArchive6.manifest;
        explodedArchive6.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive10 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest11 = explodedArchive10.manifest;
        explodedArchive10.recursive = false;
        java.util.jar.Manifest manifest14 = explodedArchive10.manifest;
        java.io.File file15 = explodedArchive10.manifestFile;
        java.io.File file16 = null;
        java.io.File file17 = explodedArchive10.getManifestFile(file16);
        explodedArchive6.manifestFile = file16;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive19 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest20 = explodedArchive19.manifest;
        explodedArchive19.recursive = false;
        java.util.jar.Manifest manifest23 = explodedArchive19.manifest;
        java.io.File file24 = explodedArchive19.manifestFile;
        java.io.File file25 = null;
        java.io.File file26 = explodedArchive19.getManifestFile(file25);
        explodedArchive6.manifestFile = file26;
        java.io.File file28 = explodedArchive2.getManifestFile(file26);
        java.io.File file29 = explodedArchive0.getManifestFile(file26);
        // The following exception was thrown during execution in test generation
        try {
            java.net.URL uRL30 = explodedArchive0.getUrl();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str1 + "' != '" + "exploded archive" + "'", str1.equals("exploded archive"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file17.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file17.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file26.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file26.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file28.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file28.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file29.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file29.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
    }

    @Test
    public void test0248() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0248");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file1 = null;
        fileEntryIterator0.current = file1;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive3 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest4 = explodedArchive3.manifest;
        explodedArchive3.recursive = false;
        java.util.jar.Manifest manifest7 = explodedArchive3.manifest;
        java.io.File file8 = explodedArchive3.manifestFile;
        java.io.File file9 = null;
        java.io.File file10 = explodedArchive3.getManifestFile(file9);
        java.util.Iterator<java.io.File> fileItor11 = fileEntryIterator0.listFiles(file10);
        java.io.File file12 = fileEntryIterator0.root;
        java.io.File file13 = fileEntryIterator0.root;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive14 = new org.springframework.boot.loader.archive.ExplodedArchive();
        boolean boolean15 = explodedArchive14.recursive;
        boolean boolean16 = explodedArchive14.recursive;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive17 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file18 = explodedArchive17.root;
        java.io.File file19 = null;
        explodedArchive17.manifestFile = file19;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive21 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest22 = explodedArchive21.manifest;
        explodedArchive21.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive25 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest26 = explodedArchive25.manifest;
        explodedArchive25.recursive = false;
        java.util.jar.Manifest manifest29 = explodedArchive25.manifest;
        java.io.File file30 = explodedArchive25.manifestFile;
        java.io.File file31 = null;
        java.io.File file32 = explodedArchive25.getManifestFile(file31);
        explodedArchive21.manifestFile = file31;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive34 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest35 = explodedArchive34.manifest;
        explodedArchive34.recursive = false;
        java.util.jar.Manifest manifest38 = explodedArchive34.manifest;
        java.io.File file39 = explodedArchive34.manifestFile;
        java.io.File file40 = null;
        java.io.File file41 = explodedArchive34.getManifestFile(file40);
        explodedArchive21.manifestFile = file41;
        java.io.File file43 = explodedArchive17.getManifestFile(file41);
        explodedArchive14.manifestFile = file41;
        fileEntryIterator0.current = file41;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator46 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file47 = null;
        fileEntryIterator46.current = file47;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive49 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest50 = explodedArchive49.manifest;
        explodedArchive49.recursive = false;
        java.util.jar.Manifest manifest53 = explodedArchive49.manifest;
        java.io.File file54 = explodedArchive49.manifestFile;
        java.io.File file55 = null;
        java.io.File file56 = explodedArchive49.getManifestFile(file55);
        java.util.Iterator<java.io.File> fileItor57 = fileEntryIterator46.listFiles(file56);
        boolean boolean58 = fileEntryIterator46.hasNext();
        java.util.Comparator<java.io.File> fileComparator59 = fileEntryIterator46.entryComparator;
        fileEntryIterator0.entryComparator = fileComparator59;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file32.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file32.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file41.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file41.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file43.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file43.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file56.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file56.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator59);
    }

    @Test
    public void test0249() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0249");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest1 = explodedArchive0.manifest;
        explodedArchive0.recursive = false;
        java.util.jar.Manifest manifest4 = explodedArchive0.manifest;
        java.io.File file5 = explodedArchive0.manifestFile;
        java.io.File file6 = explodedArchive0.root;
        explodedArchive0.recursive = true;
        boolean boolean9 = explodedArchive0.recursive;
        java.util.jar.Manifest manifest10 = null;
        explodedArchive0.manifest = manifest10;
        java.io.File file12 = explodedArchive0.manifestFile;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file12);
    }

    @Test
    public void test0250() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0250");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest1 = explodedArchive0.manifest;
        explodedArchive0.recursive = false;
        java.io.File file4 = null;
        explodedArchive0.root = file4;
        java.io.File file6 = explodedArchive0.root;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive7 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest8 = explodedArchive7.manifest;
        explodedArchive7.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive11 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest12 = explodedArchive11.manifest;
        explodedArchive11.recursive = false;
        java.util.jar.Manifest manifest15 = explodedArchive11.manifest;
        java.io.File file16 = explodedArchive11.manifestFile;
        java.io.File file17 = null;
        java.io.File file18 = explodedArchive11.getManifestFile(file17);
        explodedArchive7.manifestFile = file17;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive20 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest21 = explodedArchive20.manifest;
        explodedArchive20.recursive = false;
        java.util.jar.Manifest manifest24 = explodedArchive20.manifest;
        java.io.File file25 = explodedArchive20.manifestFile;
        java.io.File file26 = null;
        java.io.File file27 = explodedArchive20.getManifestFile(file26);
        explodedArchive7.manifestFile = file27;
        java.io.File file29 = explodedArchive0.getManifestFile(file27);
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive30 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest31 = explodedArchive30.manifest;
        explodedArchive30.recursive = false;
        java.io.File file34 = null;
        explodedArchive30.root = file34;
        java.io.File file36 = explodedArchive30.manifestFile;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive37 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file38 = explodedArchive37.root;
        java.io.File file39 = null;
        explodedArchive37.manifestFile = file39;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive41 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest42 = explodedArchive41.manifest;
        explodedArchive41.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive45 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest46 = explodedArchive45.manifest;
        explodedArchive45.recursive = false;
        java.util.jar.Manifest manifest49 = explodedArchive45.manifest;
        java.io.File file50 = explodedArchive45.manifestFile;
        java.io.File file51 = null;
        java.io.File file52 = explodedArchive45.getManifestFile(file51);
        explodedArchive41.manifestFile = file51;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive54 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest55 = explodedArchive54.manifest;
        explodedArchive54.recursive = false;
        java.util.jar.Manifest manifest58 = explodedArchive54.manifest;
        java.io.File file59 = explodedArchive54.manifestFile;
        java.io.File file60 = null;
        java.io.File file61 = explodedArchive54.getManifestFile(file60);
        explodedArchive41.manifestFile = file61;
        java.io.File file63 = explodedArchive37.getManifestFile(file61);
        java.io.File file64 = explodedArchive30.getManifestFile(file61);
        explodedArchive0.manifestFile = file61;
        explodedArchive0.recursive = true;
        java.util.jar.Manifest manifest68 = explodedArchive0.manifest;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator<org.springframework.boot.loader.archive.Archive.Entry> entryItor69 = explodedArchive0.iterator();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file18.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file18.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file27.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file27.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file29.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file29.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file52.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file52.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file61.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file61.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file63.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file63.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file64.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file64.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest68);
    }

    @Test
    public void test0251() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0251");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest1 = explodedArchive0.manifest;
        explodedArchive0.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive4 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest5 = explodedArchive4.manifest;
        explodedArchive4.recursive = false;
        java.util.jar.Manifest manifest8 = explodedArchive4.manifest;
        java.io.File file9 = explodedArchive4.manifestFile;
        java.io.File file10 = null;
        java.io.File file11 = explodedArchive4.getManifestFile(file10);
        explodedArchive0.manifestFile = file10;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive13 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest14 = explodedArchive13.manifest;
        explodedArchive13.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive17 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest18 = explodedArchive17.manifest;
        explodedArchive17.recursive = false;
        java.util.jar.Manifest manifest21 = explodedArchive17.manifest;
        java.io.File file22 = explodedArchive17.manifestFile;
        java.io.File file23 = null;
        java.io.File file24 = explodedArchive17.getManifestFile(file23);
        explodedArchive13.manifestFile = file23;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive26 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest27 = explodedArchive26.manifest;
        explodedArchive26.recursive = false;
        java.util.jar.Manifest manifest30 = explodedArchive26.manifest;
        java.io.File file31 = explodedArchive26.manifestFile;
        java.io.File file32 = null;
        java.io.File file33 = explodedArchive26.getManifestFile(file32);
        explodedArchive13.manifestFile = file33;
        explodedArchive0.root = file33;
        java.net.URL uRL36 = explodedArchive0.getUrl();
        boolean boolean37 = explodedArchive0.recursive;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntry fileEntry38 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntry();
        java.io.File file39 = fileEntry38.file;
        java.lang.String str40 = fileEntry38.name;
        java.io.File file41 = fileEntry38.file;
        java.lang.String str42 = fileEntry38.getName();
        java.io.File file43 = fileEntry38.file;
        // The following exception was thrown during execution in test generation
        try {
            org.springframework.boot.loader.archive.Archive archive44 = explodedArchive0.getNestedArchive((org.springframework.boot.loader.archive.Archive.Entry) fileEntry38);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file11.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file11.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file24.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file24.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file33.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file33.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(uRL36);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(uRL36.toString(), "file:/server/study-execution/new-nimrod/nimrod-hunoroutput-test-dest/spring-boot/af20dc6cc45c032573413c401f9f73aa75371744/randoop_6/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file43);
    }

    @Test
    public void test0252() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0252");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.lang.String str1 = explodedArchive0.toString();
        java.io.File file2 = explodedArchive0.root;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator3 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file4 = null;
        fileEntryIterator3.current = file4;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive6 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest7 = explodedArchive6.manifest;
        explodedArchive6.recursive = false;
        java.util.jar.Manifest manifest10 = explodedArchive6.manifest;
        java.io.File file11 = explodedArchive6.manifestFile;
        java.io.File file12 = null;
        java.io.File file13 = explodedArchive6.getManifestFile(file12);
        java.util.Iterator<java.io.File> fileItor14 = fileEntryIterator3.listFiles(file13);
        java.io.File file15 = fileEntryIterator3.current;
        boolean boolean16 = fileEntryIterator3.recursive;
        java.io.File file17 = fileEntryIterator3.poll();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator18 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file19 = null;
        fileEntryIterator18.current = file19;
        fileEntryIterator18.recursive = true;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator23 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator24 = entryComparator23.reversed();
        java.util.Comparator<java.io.File> fileComparator25 = entryComparator23.reversed();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive26 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest27 = explodedArchive26.manifest;
        explodedArchive26.recursive = false;
        java.util.jar.Manifest manifest30 = explodedArchive26.manifest;
        java.io.File file31 = explodedArchive26.manifestFile;
        java.io.File file32 = null;
        java.io.File file33 = explodedArchive26.getManifestFile(file32);
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive34 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest35 = explodedArchive34.manifest;
        explodedArchive34.recursive = false;
        java.io.File file38 = null;
        explodedArchive34.root = file38;
        java.io.File file40 = explodedArchive34.root;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive41 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest42 = explodedArchive41.manifest;
        explodedArchive41.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive45 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest46 = explodedArchive45.manifest;
        explodedArchive45.recursive = false;
        java.util.jar.Manifest manifest49 = explodedArchive45.manifest;
        java.io.File file50 = explodedArchive45.manifestFile;
        java.io.File file51 = null;
        java.io.File file52 = explodedArchive45.getManifestFile(file51);
        explodedArchive41.manifestFile = file51;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive54 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest55 = explodedArchive54.manifest;
        explodedArchive54.recursive = false;
        java.util.jar.Manifest manifest58 = explodedArchive54.manifest;
        java.io.File file59 = explodedArchive54.manifestFile;
        java.io.File file60 = null;
        java.io.File file61 = explodedArchive54.getManifestFile(file60);
        explodedArchive41.manifestFile = file61;
        java.io.File file63 = explodedArchive34.getManifestFile(file61);
        int int64 = entryComparator23.compare(file33, file61);
        java.util.Iterator<java.io.File> fileItor65 = fileEntryIterator18.listFiles(file33);
        fileEntryIterator3.current = file33;
        java.io.File file67 = explodedArchive0.getManifestFile(file33);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator<org.springframework.boot.loader.archive.Archive.Entry> entryItor68 = explodedArchive0.iterator();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str1 + "' != '" + "exploded archive" + "'", str1.equals("exploded archive"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file13.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file13.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file33.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file33.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file52.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file52.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file61.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file61.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file63.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file63.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file67.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file67.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
    }

    @Test
    public void test0253() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0253");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        boolean boolean1 = fileEntryIterator0.recursive;
        java.io.File file2 = fileEntryIterator0.current;
        boolean boolean3 = fileEntryIterator0.hasNext();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator4 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file5 = null;
        fileEntryIterator4.current = file5;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive7 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest8 = explodedArchive7.manifest;
        explodedArchive7.recursive = false;
        java.util.jar.Manifest manifest11 = explodedArchive7.manifest;
        java.io.File file12 = explodedArchive7.manifestFile;
        java.io.File file13 = null;
        java.io.File file14 = explodedArchive7.getManifestFile(file13);
        java.util.Iterator<java.io.File> fileItor15 = fileEntryIterator4.listFiles(file14);
        java.io.File file16 = fileEntryIterator4.root;
        java.io.File file17 = fileEntryIterator4.root;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator18 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file19 = null;
        fileEntryIterator18.current = file19;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive21 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest22 = explodedArchive21.manifest;
        explodedArchive21.recursive = false;
        java.util.jar.Manifest manifest25 = explodedArchive21.manifest;
        java.io.File file26 = explodedArchive21.manifestFile;
        java.io.File file27 = null;
        java.io.File file28 = explodedArchive21.getManifestFile(file27);
        java.util.Iterator<java.io.File> fileItor29 = fileEntryIterator18.listFiles(file28);
        java.util.ArrayDeque<java.util.Iterator<java.io.File>> fileItorQueue30 = new java.util.ArrayDeque<java.util.Iterator<java.io.File>>();
        boolean boolean31 = fileItorQueue30.add(fileItor29);
        fileEntryIterator4.stack = fileItorQueue30;
        fileEntryIterator0.stack = fileItorQueue30;
        boolean boolean34 = fileEntryIterator0.recursive;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator35 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        boolean boolean36 = fileEntryIterator35.hasNext();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator37 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator38 = entryComparator37.reversed();
        java.util.Comparator<java.io.File> fileComparator39 = fileComparator38.reversed();
        fileEntryIterator35.entryComparator = fileComparator39;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive41 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file42 = explodedArchive41.root;
        java.io.File file43 = null;
        explodedArchive41.manifestFile = file43;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive45 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest46 = explodedArchive45.manifest;
        explodedArchive45.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive49 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest50 = explodedArchive49.manifest;
        explodedArchive49.recursive = false;
        java.util.jar.Manifest manifest53 = explodedArchive49.manifest;
        java.io.File file54 = explodedArchive49.manifestFile;
        java.io.File file55 = null;
        java.io.File file56 = explodedArchive49.getManifestFile(file55);
        explodedArchive45.manifestFile = file55;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive58 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest59 = explodedArchive58.manifest;
        explodedArchive58.recursive = false;
        java.util.jar.Manifest manifest62 = explodedArchive58.manifest;
        java.io.File file63 = explodedArchive58.manifestFile;
        java.io.File file64 = null;
        java.io.File file65 = explodedArchive58.getManifestFile(file64);
        explodedArchive45.manifestFile = file65;
        java.io.File file67 = explodedArchive41.getManifestFile(file65);
        java.util.Iterator<java.io.File> fileItor68 = fileEntryIterator35.listFiles(file67);
        boolean boolean69 = fileEntryIterator35.recursive;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator70 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file71 = null;
        fileEntryIterator70.current = file71;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive73 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest74 = explodedArchive73.manifest;
        explodedArchive73.recursive = false;
        java.util.jar.Manifest manifest77 = explodedArchive73.manifest;
        java.io.File file78 = explodedArchive73.manifestFile;
        java.io.File file79 = null;
        java.io.File file80 = explodedArchive73.getManifestFile(file79);
        java.util.Iterator<java.io.File> fileItor81 = fileEntryIterator70.listFiles(file80);
        java.util.Comparator<java.io.File> fileComparator82 = fileEntryIterator70.entryComparator;
        fileEntryIterator35.entryComparator = fileComparator82;
        fileEntryIterator0.entryComparator = fileComparator82;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file14.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file14.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file28.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file28.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file56.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file56.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file65.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file65.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file67.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file67.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest77);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file78);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file80);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file80.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file80.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor81);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator82);
    }

    @Test
    public void test0254() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0254");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file1 = explodedArchive0.root;
        explodedArchive0.recursive = false;
        boolean boolean4 = explodedArchive0.recursive;
        java.io.File file5 = explodedArchive0.root;
        org.springframework.boot.loader.archive.Archive.EntryFilter entryFilter6 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<org.springframework.boot.loader.archive.Archive> archiveList7 = explodedArchive0.getNestedArchives(entryFilter6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file5);
    }

    @Test
    public void test0255() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0255");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator1 = entryComparator0.reversed();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator2 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator3 = entryComparator2.reversed();
        java.util.Comparator<java.io.File> fileComparator4 = entryComparator0.thenComparing(fileComparator3);
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive5 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest6 = explodedArchive5.manifest;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntry fileEntry7 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntry();
        java.io.File file8 = fileEntry7.getFile();
        java.io.File file9 = fileEntry7.getFile();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive10 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file11 = explodedArchive10.root;
        java.io.File file12 = null;
        explodedArchive10.manifestFile = file12;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive14 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest15 = explodedArchive14.manifest;
        explodedArchive14.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive18 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest19 = explodedArchive18.manifest;
        explodedArchive18.recursive = false;
        java.util.jar.Manifest manifest22 = explodedArchive18.manifest;
        java.io.File file23 = explodedArchive18.manifestFile;
        java.io.File file24 = null;
        java.io.File file25 = explodedArchive18.getManifestFile(file24);
        explodedArchive14.manifestFile = file24;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive27 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest28 = explodedArchive27.manifest;
        explodedArchive27.recursive = false;
        java.util.jar.Manifest manifest31 = explodedArchive27.manifest;
        java.io.File file32 = explodedArchive27.manifestFile;
        java.io.File file33 = null;
        java.io.File file34 = explodedArchive27.getManifestFile(file33);
        explodedArchive14.manifestFile = file34;
        java.io.File file36 = explodedArchive10.getManifestFile(file34);
        fileEntry7.file = file36;
        java.io.File file38 = fileEntry7.file;
        fileEntry7.name = "exploded archive";
        java.io.File file41 = fileEntry7.file;
        explodedArchive5.root = file41;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntry fileEntry43 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntry();
        java.io.File file44 = fileEntry43.file;
        java.lang.String str45 = fileEntry43.name;
        java.io.File file46 = fileEntry43.file;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive47 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file48 = explodedArchive47.root;
        java.io.File file49 = explodedArchive47.manifestFile;
        java.util.jar.Manifest manifest50 = null;
        explodedArchive47.manifest = manifest50;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator52 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file53 = null;
        fileEntryIterator52.current = file53;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive55 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.lang.String str56 = explodedArchive55.toString();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive57 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file58 = explodedArchive57.root;
        java.io.File file59 = null;
        explodedArchive57.manifestFile = file59;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive61 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest62 = explodedArchive61.manifest;
        explodedArchive61.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive65 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest66 = explodedArchive65.manifest;
        explodedArchive65.recursive = false;
        java.util.jar.Manifest manifest69 = explodedArchive65.manifest;
        java.io.File file70 = explodedArchive65.manifestFile;
        java.io.File file71 = null;
        java.io.File file72 = explodedArchive65.getManifestFile(file71);
        explodedArchive61.manifestFile = file71;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive74 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest75 = explodedArchive74.manifest;
        explodedArchive74.recursive = false;
        java.util.jar.Manifest manifest78 = explodedArchive74.manifest;
        java.io.File file79 = explodedArchive74.manifestFile;
        java.io.File file80 = null;
        java.io.File file81 = explodedArchive74.getManifestFile(file80);
        explodedArchive61.manifestFile = file81;
        java.io.File file83 = explodedArchive57.getManifestFile(file81);
        java.io.File file84 = explodedArchive55.getManifestFile(file81);
        fileEntryIterator52.root = file81;
        java.io.File file86 = explodedArchive47.getManifestFile(file81);
        fileEntry43.file = file81;
        int int88 = entryComparator0.compare(file41, file81);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file25.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file25.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file34.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file34.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file36.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file36.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file38.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file38.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file41.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file41.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str56 + "' != '" + "exploded archive" + "'", str56.equals("exploded archive"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file72.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file72.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest75);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest78);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file79);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file81);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file81.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file81.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file83);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file83.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file83.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file84);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file84.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file84.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file86);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file86.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file86.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 21 + "'", int88 == 21);
    }

    @Test
    public void test0256() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0256");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file1 = null;
        fileEntryIterator0.current = file1;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive3 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest4 = explodedArchive3.manifest;
        explodedArchive3.recursive = false;
        java.util.jar.Manifest manifest7 = explodedArchive3.manifest;
        java.io.File file8 = explodedArchive3.manifestFile;
        java.io.File file9 = null;
        java.io.File file10 = explodedArchive3.getManifestFile(file9);
        java.util.Iterator<java.io.File> fileItor11 = fileEntryIterator0.listFiles(file10);
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator12 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file13 = null;
        fileEntryIterator12.current = file13;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive15 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest16 = explodedArchive15.manifest;
        explodedArchive15.recursive = false;
        java.util.jar.Manifest manifest19 = explodedArchive15.manifest;
        java.io.File file20 = explodedArchive15.manifestFile;
        java.io.File file21 = null;
        java.io.File file22 = explodedArchive15.getManifestFile(file21);
        java.util.Iterator<java.io.File> fileItor23 = fileEntryIterator12.listFiles(file22);
        java.io.File file24 = fileEntryIterator12.current;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator25 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file26 = null;
        fileEntryIterator25.current = file26;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive28 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest29 = explodedArchive28.manifest;
        explodedArchive28.recursive = false;
        java.util.jar.Manifest manifest32 = explodedArchive28.manifest;
        java.io.File file33 = explodedArchive28.manifestFile;
        java.io.File file34 = null;
        java.io.File file35 = explodedArchive28.getManifestFile(file34);
        java.util.Iterator<java.io.File> fileItor36 = fileEntryIterator25.listFiles(file35);
        java.util.ArrayDeque<java.util.Iterator<java.io.File>> fileItorQueue37 = new java.util.ArrayDeque<java.util.Iterator<java.io.File>>();
        boolean boolean38 = fileItorQueue37.add(fileItor36);
        fileEntryIterator12.stack = fileItorQueue37;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive40 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest41 = explodedArchive40.manifest;
        explodedArchive40.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive44 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest45 = explodedArchive44.manifest;
        explodedArchive44.recursive = false;
        java.util.jar.Manifest manifest48 = explodedArchive44.manifest;
        java.io.File file49 = explodedArchive44.manifestFile;
        java.io.File file50 = null;
        java.io.File file51 = explodedArchive44.getManifestFile(file50);
        explodedArchive40.manifestFile = file50;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive53 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest54 = explodedArchive53.manifest;
        explodedArchive53.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive57 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest58 = explodedArchive57.manifest;
        explodedArchive57.recursive = false;
        java.util.jar.Manifest manifest61 = explodedArchive57.manifest;
        java.io.File file62 = explodedArchive57.manifestFile;
        java.io.File file63 = null;
        java.io.File file64 = explodedArchive57.getManifestFile(file63);
        explodedArchive53.manifestFile = file63;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive66 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest67 = explodedArchive66.manifest;
        explodedArchive66.recursive = false;
        java.util.jar.Manifest manifest70 = explodedArchive66.manifest;
        java.io.File file71 = explodedArchive66.manifestFile;
        java.io.File file72 = null;
        java.io.File file73 = explodedArchive66.getManifestFile(file72);
        explodedArchive53.manifestFile = file73;
        explodedArchive40.root = file73;
        java.util.Iterator<java.io.File> fileItor76 = fileEntryIterator12.listFiles(file73);
        java.util.Comparator<java.io.File> fileComparator77 = fileEntryIterator12.entryComparator;
        fileEntryIterator0.entryComparator = fileComparator77;
        boolean boolean79 = fileEntryIterator0.hasNext();
        java.util.Comparator<java.io.File> fileComparator80 = fileEntryIterator0.entryComparator;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file22.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file22.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file35.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file35.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file51.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file51.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file64.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file64.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file73);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file73.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file73.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor76);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator77);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator80);
    }

    @Test
    public void test0257() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0257");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        boolean boolean1 = fileEntryIterator0.hasNext();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator2 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator3 = entryComparator2.reversed();
        java.util.Comparator<java.io.File> fileComparator4 = fileComparator3.reversed();
        fileEntryIterator0.entryComparator = fileComparator4;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive6 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file7 = explodedArchive6.root;
        java.io.File file8 = null;
        explodedArchive6.manifestFile = file8;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive10 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest11 = explodedArchive10.manifest;
        explodedArchive10.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive14 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest15 = explodedArchive14.manifest;
        explodedArchive14.recursive = false;
        java.util.jar.Manifest manifest18 = explodedArchive14.manifest;
        java.io.File file19 = explodedArchive14.manifestFile;
        java.io.File file20 = null;
        java.io.File file21 = explodedArchive14.getManifestFile(file20);
        explodedArchive10.manifestFile = file20;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive23 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest24 = explodedArchive23.manifest;
        explodedArchive23.recursive = false;
        java.util.jar.Manifest manifest27 = explodedArchive23.manifest;
        java.io.File file28 = explodedArchive23.manifestFile;
        java.io.File file29 = null;
        java.io.File file30 = explodedArchive23.getManifestFile(file29);
        explodedArchive10.manifestFile = file30;
        java.io.File file32 = explodedArchive6.getManifestFile(file30);
        java.util.Iterator<java.io.File> fileItor33 = fileEntryIterator0.listFiles(file32);
        boolean boolean34 = fileEntryIterator0.recursive;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator35 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator36 = entryComparator35.reversed();
        java.util.Comparator<java.io.File> fileComparator37 = entryComparator35.reversed();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive38 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest39 = explodedArchive38.manifest;
        explodedArchive38.recursive = false;
        java.util.jar.Manifest manifest42 = explodedArchive38.manifest;
        java.io.File file43 = explodedArchive38.manifestFile;
        java.io.File file44 = null;
        java.io.File file45 = explodedArchive38.getManifestFile(file44);
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive46 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest47 = explodedArchive46.manifest;
        explodedArchive46.recursive = false;
        java.io.File file50 = null;
        explodedArchive46.root = file50;
        java.io.File file52 = explodedArchive46.root;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive53 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest54 = explodedArchive53.manifest;
        explodedArchive53.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive57 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest58 = explodedArchive57.manifest;
        explodedArchive57.recursive = false;
        java.util.jar.Manifest manifest61 = explodedArchive57.manifest;
        java.io.File file62 = explodedArchive57.manifestFile;
        java.io.File file63 = null;
        java.io.File file64 = explodedArchive57.getManifestFile(file63);
        explodedArchive53.manifestFile = file63;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive66 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest67 = explodedArchive66.manifest;
        explodedArchive66.recursive = false;
        java.util.jar.Manifest manifest70 = explodedArchive66.manifest;
        java.io.File file71 = explodedArchive66.manifestFile;
        java.io.File file72 = null;
        java.io.File file73 = explodedArchive66.getManifestFile(file72);
        explodedArchive53.manifestFile = file73;
        java.io.File file75 = explodedArchive46.getManifestFile(file73);
        int int76 = entryComparator35.compare(file45, file73);
        java.util.Iterator<java.io.File> fileItor77 = fileEntryIterator0.listFiles(file45);
        // The following exception was thrown during execution in test generation
        try {
            org.springframework.boot.loader.archive.ExplodedArchive explodedArchive79 = new org.springframework.boot.loader.archive.ExplodedArchive(file45, true);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid source folder META-INF/MANIFEST.MF");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file21.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file21.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file30.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file30.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file32.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file32.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file45.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file45.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file64.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file64.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file73);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file73.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file73.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file75);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file75.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file75.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor77);
    }

    @Test
    public void test0258() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0258");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest1 = explodedArchive0.manifest;
        explodedArchive0.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive4 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest5 = explodedArchive4.manifest;
        explodedArchive4.recursive = false;
        java.util.jar.Manifest manifest8 = explodedArchive4.manifest;
        java.io.File file9 = explodedArchive4.manifestFile;
        java.io.File file10 = null;
        java.io.File file11 = explodedArchive4.getManifestFile(file10);
        explodedArchive0.manifestFile = file10;
        java.util.jar.Manifest manifest13 = null;
        explodedArchive0.manifest = manifest13;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator<org.springframework.boot.loader.archive.Archive.Entry> entryItor15 = explodedArchive0.iterator();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file11.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file11.toString(), "META-INF/MANIFEST.MF");
    }

    @Test
    public void test0259() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0259");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file1 = null;
        fileEntryIterator0.current = file1;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive3 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest4 = explodedArchive3.manifest;
        explodedArchive3.recursive = false;
        java.util.jar.Manifest manifest7 = explodedArchive3.manifest;
        java.io.File file8 = explodedArchive3.manifestFile;
        java.io.File file9 = null;
        java.io.File file10 = explodedArchive3.getManifestFile(file9);
        java.util.Iterator<java.io.File> fileItor11 = fileEntryIterator0.listFiles(file10);
        boolean boolean12 = fileEntryIterator0.hasNext();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator13 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator14 = entryComparator13.reversed();
        java.util.Comparator<java.io.File> fileComparator15 = entryComparator13.reversed();
        fileEntryIterator0.entryComparator = fileComparator15;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator17 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file18 = null;
        fileEntryIterator17.current = file18;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive20 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.lang.String str21 = explodedArchive20.toString();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive22 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file23 = explodedArchive22.root;
        java.io.File file24 = null;
        explodedArchive22.manifestFile = file24;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive26 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest27 = explodedArchive26.manifest;
        explodedArchive26.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive30 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest31 = explodedArchive30.manifest;
        explodedArchive30.recursive = false;
        java.util.jar.Manifest manifest34 = explodedArchive30.manifest;
        java.io.File file35 = explodedArchive30.manifestFile;
        java.io.File file36 = null;
        java.io.File file37 = explodedArchive30.getManifestFile(file36);
        explodedArchive26.manifestFile = file36;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive39 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest40 = explodedArchive39.manifest;
        explodedArchive39.recursive = false;
        java.util.jar.Manifest manifest43 = explodedArchive39.manifest;
        java.io.File file44 = explodedArchive39.manifestFile;
        java.io.File file45 = null;
        java.io.File file46 = explodedArchive39.getManifestFile(file45);
        explodedArchive26.manifestFile = file46;
        java.io.File file48 = explodedArchive22.getManifestFile(file46);
        java.io.File file49 = explodedArchive20.getManifestFile(file46);
        fileEntryIterator17.root = file46;
        fileEntryIterator0.current = file46;
        boolean boolean52 = fileEntryIterator0.hasNext();
        java.util.Deque<java.util.Iterator<java.io.File>> fileItorQueue53 = fileEntryIterator0.stack;
        boolean boolean54 = fileEntryIterator0.hasNext();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str21 + "' != '" + "exploded archive" + "'", str21.equals("exploded archive"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file37.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file37.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file46.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file46.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file48.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file48.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file49.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file49.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItorQueue53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
    }

    @Test
    public void test0260() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0260");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file1 = explodedArchive0.root;
        java.io.File file2 = null;
        explodedArchive0.manifestFile = file2;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntry fileEntry4 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntry();
        java.io.File file5 = fileEntry4.getFile();
        java.io.File file6 = fileEntry4.getFile();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive7 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file8 = explodedArchive7.root;
        java.io.File file9 = null;
        explodedArchive7.manifestFile = file9;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive11 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest12 = explodedArchive11.manifest;
        explodedArchive11.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive15 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest16 = explodedArchive15.manifest;
        explodedArchive15.recursive = false;
        java.util.jar.Manifest manifest19 = explodedArchive15.manifest;
        java.io.File file20 = explodedArchive15.manifestFile;
        java.io.File file21 = null;
        java.io.File file22 = explodedArchive15.getManifestFile(file21);
        explodedArchive11.manifestFile = file21;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive24 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest25 = explodedArchive24.manifest;
        explodedArchive24.recursive = false;
        java.util.jar.Manifest manifest28 = explodedArchive24.manifest;
        java.io.File file29 = explodedArchive24.manifestFile;
        java.io.File file30 = null;
        java.io.File file31 = explodedArchive24.getManifestFile(file30);
        explodedArchive11.manifestFile = file31;
        java.io.File file33 = explodedArchive7.getManifestFile(file31);
        fileEntry4.file = file33;
        java.io.File file35 = fileEntry4.file;
        fileEntry4.name = "exploded archive";
        java.io.File file38 = fileEntry4.file;
        fileEntry4.name = "hi!";
        // The following exception was thrown during execution in test generation
        try {
            org.springframework.boot.loader.archive.Archive archive41 = explodedArchive0.getNestedArchive((org.springframework.boot.loader.archive.Archive.Entry) fileEntry4);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: File must exist");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file22.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file22.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file31.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file31.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file33.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file33.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file35.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file35.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file38.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file38.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
    }

    @Test
    public void test0261() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0261");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file1 = null;
        fileEntryIterator0.current = file1;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive3 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest4 = explodedArchive3.manifest;
        explodedArchive3.recursive = false;
        java.util.jar.Manifest manifest7 = explodedArchive3.manifest;
        java.io.File file8 = explodedArchive3.manifestFile;
        java.io.File file9 = null;
        java.io.File file10 = explodedArchive3.getManifestFile(file9);
        java.util.Iterator<java.io.File> fileItor11 = fileEntryIterator0.listFiles(file10);
        java.io.File file12 = fileEntryIterator0.root;
        java.io.File file13 = fileEntryIterator0.root;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator14 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file15 = null;
        fileEntryIterator14.current = file15;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive17 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest18 = explodedArchive17.manifest;
        explodedArchive17.recursive = false;
        java.util.jar.Manifest manifest21 = explodedArchive17.manifest;
        java.io.File file22 = explodedArchive17.manifestFile;
        java.io.File file23 = null;
        java.io.File file24 = explodedArchive17.getManifestFile(file23);
        java.util.Iterator<java.io.File> fileItor25 = fileEntryIterator14.listFiles(file24);
        java.util.ArrayDeque<java.util.Iterator<java.io.File>> fileItorQueue26 = new java.util.ArrayDeque<java.util.Iterator<java.io.File>>();
        boolean boolean27 = fileItorQueue26.add(fileItor25);
        fileEntryIterator0.stack = fileItorQueue26;
        java.io.File file29 = fileEntryIterator0.poll();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file24.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file24.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file29);
    }

    @Test
    public void test0262() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0262");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest1 = explodedArchive0.manifest;
        explodedArchive0.recursive = false;
        java.util.jar.Manifest manifest4 = explodedArchive0.manifest;
        java.io.File file5 = explodedArchive0.manifestFile;
        java.io.File file6 = null;
        java.io.File file7 = explodedArchive0.getManifestFile(file6);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Spliterator<org.springframework.boot.loader.archive.Archive.Entry> entrySpliterator8 = explodedArchive0.spliterator();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file7.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file7.toString(), "META-INF/MANIFEST.MF");
    }

    @Test
    public void test0263() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0263");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file1 = explodedArchive0.root;
        java.io.File file2 = null;
        explodedArchive0.manifestFile = file2;
        java.io.File file4 = explodedArchive0.root;
        java.util.jar.Manifest manifest5 = null;
        explodedArchive0.manifest = manifest5;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator<org.springframework.boot.loader.archive.Archive.Entry> entryItor7 = explodedArchive0.iterator();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file4);
    }

    @Test
    public void test0264() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0264");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest1 = explodedArchive0.manifest;
        explodedArchive0.recursive = false;
        java.util.jar.Manifest manifest4 = explodedArchive0.manifest;
        java.util.jar.Manifest manifest5 = null;
        explodedArchive0.manifest = manifest5;
        java.io.File file7 = explodedArchive0.root;
        org.springframework.boot.loader.archive.Archive.EntryFilter entryFilter8 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<org.springframework.boot.loader.archive.Archive> archiveList9 = explodedArchive0.getNestedArchives(entryFilter8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file7);
    }

    @Test
    public void test0265() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0265");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file1 = null;
        fileEntryIterator0.current = file1;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive3 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest4 = explodedArchive3.manifest;
        explodedArchive3.recursive = false;
        java.util.jar.Manifest manifest7 = explodedArchive3.manifest;
        java.io.File file8 = explodedArchive3.manifestFile;
        java.io.File file9 = null;
        java.io.File file10 = explodedArchive3.getManifestFile(file9);
        java.util.Iterator<java.io.File> fileItor11 = fileEntryIterator0.listFiles(file10);
        java.io.File file12 = fileEntryIterator0.root;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive13 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.lang.String str14 = explodedArchive13.toString();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive15 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file16 = explodedArchive15.root;
        java.io.File file17 = null;
        explodedArchive15.manifestFile = file17;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive19 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest20 = explodedArchive19.manifest;
        explodedArchive19.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive23 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest24 = explodedArchive23.manifest;
        explodedArchive23.recursive = false;
        java.util.jar.Manifest manifest27 = explodedArchive23.manifest;
        java.io.File file28 = explodedArchive23.manifestFile;
        java.io.File file29 = null;
        java.io.File file30 = explodedArchive23.getManifestFile(file29);
        explodedArchive19.manifestFile = file29;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive32 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest33 = explodedArchive32.manifest;
        explodedArchive32.recursive = false;
        java.util.jar.Manifest manifest36 = explodedArchive32.manifest;
        java.io.File file37 = explodedArchive32.manifestFile;
        java.io.File file38 = null;
        java.io.File file39 = explodedArchive32.getManifestFile(file38);
        explodedArchive19.manifestFile = file39;
        java.io.File file41 = explodedArchive15.getManifestFile(file39);
        java.io.File file42 = explodedArchive13.getManifestFile(file39);
        fileEntryIterator0.root = file39;
        fileEntryIterator0.recursive = true;
        // The following exception was thrown during execution in test generation
        try {
            org.springframework.boot.loader.archive.Archive.Entry entry46 = fileEntryIterator0.next();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str14 + "' != '" + "exploded archive" + "'", str14.equals("exploded archive"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file30.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file30.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file39.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file39.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file41.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file41.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file42.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file42.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
    }

    @Test
    public void test0266() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0266");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest1 = explodedArchive0.manifest;
        java.util.jar.Manifest manifest2 = null;
        explodedArchive0.manifest = manifest2;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntry fileEntry4 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntry();
        java.lang.String str5 = fileEntry4.name;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator6 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file7 = null;
        fileEntryIterator6.current = file7;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive9 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest10 = explodedArchive9.manifest;
        explodedArchive9.recursive = false;
        java.util.jar.Manifest manifest13 = explodedArchive9.manifest;
        java.io.File file14 = explodedArchive9.manifestFile;
        java.io.File file15 = null;
        java.io.File file16 = explodedArchive9.getManifestFile(file15);
        java.util.Iterator<java.io.File> fileItor17 = fileEntryIterator6.listFiles(file16);
        java.io.File file18 = fileEntryIterator6.current;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator19 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file20 = null;
        fileEntryIterator19.current = file20;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive22 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest23 = explodedArchive22.manifest;
        explodedArchive22.recursive = false;
        java.util.jar.Manifest manifest26 = explodedArchive22.manifest;
        java.io.File file27 = explodedArchive22.manifestFile;
        java.io.File file28 = null;
        java.io.File file29 = explodedArchive22.getManifestFile(file28);
        java.util.Iterator<java.io.File> fileItor30 = fileEntryIterator19.listFiles(file29);
        java.util.ArrayDeque<java.util.Iterator<java.io.File>> fileItorQueue31 = new java.util.ArrayDeque<java.util.Iterator<java.io.File>>();
        boolean boolean32 = fileItorQueue31.add(fileItor30);
        fileEntryIterator6.stack = fileItorQueue31;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive34 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest35 = explodedArchive34.manifest;
        explodedArchive34.recursive = false;
        java.io.File file38 = null;
        explodedArchive34.root = file38;
        java.io.File file40 = explodedArchive34.root;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive41 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest42 = explodedArchive41.manifest;
        explodedArchive41.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive45 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest46 = explodedArchive45.manifest;
        explodedArchive45.recursive = false;
        java.util.jar.Manifest manifest49 = explodedArchive45.manifest;
        java.io.File file50 = explodedArchive45.manifestFile;
        java.io.File file51 = null;
        java.io.File file52 = explodedArchive45.getManifestFile(file51);
        explodedArchive41.manifestFile = file51;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive54 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest55 = explodedArchive54.manifest;
        explodedArchive54.recursive = false;
        java.util.jar.Manifest manifest58 = explodedArchive54.manifest;
        java.io.File file59 = explodedArchive54.manifestFile;
        java.io.File file60 = null;
        java.io.File file61 = explodedArchive54.getManifestFile(file60);
        explodedArchive41.manifestFile = file61;
        java.io.File file63 = explodedArchive34.getManifestFile(file61);
        fileEntryIterator6.root = file61;
        fileEntry4.file = file61;
        java.io.File file66 = explodedArchive0.getManifestFile(file61);
        java.util.jar.Manifest manifest67 = null;
        explodedArchive0.manifest = manifest67;
        java.io.File file69 = null;
        java.io.File file70 = explodedArchive0.getManifestFile(file69);
        java.io.File file71 = explodedArchive0.root;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator<org.springframework.boot.loader.archive.Archive.Entry> entryItor72 = explodedArchive0.iterator();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file16.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file16.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file29.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file29.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file52.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file52.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file61.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file61.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file63.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file63.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file66.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file66.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file70.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file70.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file71);
    }

    @Test
    public void test0267() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0267");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file1 = null;
        fileEntryIterator0.current = file1;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive3 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest4 = explodedArchive3.manifest;
        explodedArchive3.recursive = false;
        java.util.jar.Manifest manifest7 = explodedArchive3.manifest;
        java.io.File file8 = explodedArchive3.manifestFile;
        java.io.File file9 = null;
        java.io.File file10 = explodedArchive3.getManifestFile(file9);
        java.util.Iterator<java.io.File> fileItor11 = fileEntryIterator0.listFiles(file10);
        java.io.File file12 = fileEntryIterator0.root;
        java.io.File file13 = fileEntryIterator0.root;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator14 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file15 = null;
        fileEntryIterator14.current = file15;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive17 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest18 = explodedArchive17.manifest;
        explodedArchive17.recursive = false;
        java.util.jar.Manifest manifest21 = explodedArchive17.manifest;
        java.io.File file22 = explodedArchive17.manifestFile;
        java.io.File file23 = null;
        java.io.File file24 = explodedArchive17.getManifestFile(file23);
        java.util.Iterator<java.io.File> fileItor25 = fileEntryIterator14.listFiles(file24);
        java.util.ArrayDeque<java.util.Iterator<java.io.File>> fileItorQueue26 = new java.util.ArrayDeque<java.util.Iterator<java.io.File>>();
        boolean boolean27 = fileItorQueue26.add(fileItor25);
        fileEntryIterator0.stack = fileItorQueue26;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator29 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file30 = null;
        fileEntryIterator29.current = file30;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive32 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest33 = explodedArchive32.manifest;
        explodedArchive32.recursive = false;
        java.util.jar.Manifest manifest36 = explodedArchive32.manifest;
        java.io.File file37 = explodedArchive32.manifestFile;
        java.io.File file38 = null;
        java.io.File file39 = explodedArchive32.getManifestFile(file38);
        java.util.Iterator<java.io.File> fileItor40 = fileEntryIterator29.listFiles(file39);
        java.io.File file41 = fileEntryIterator29.root;
        java.io.File file42 = fileEntryIterator29.root;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator43 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file44 = null;
        fileEntryIterator43.current = file44;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive46 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest47 = explodedArchive46.manifest;
        explodedArchive46.recursive = false;
        java.util.jar.Manifest manifest50 = explodedArchive46.manifest;
        java.io.File file51 = explodedArchive46.manifestFile;
        java.io.File file52 = null;
        java.io.File file53 = explodedArchive46.getManifestFile(file52);
        java.util.Iterator<java.io.File> fileItor54 = fileEntryIterator43.listFiles(file53);
        java.util.ArrayDeque<java.util.Iterator<java.io.File>> fileItorQueue55 = new java.util.ArrayDeque<java.util.Iterator<java.io.File>>();
        boolean boolean56 = fileItorQueue55.add(fileItor54);
        fileEntryIterator29.stack = fileItorQueue55;
        fileEntryIterator0.stack = fileItorQueue55;
        java.util.Deque<java.util.Iterator<java.io.File>> fileItorQueue59 = fileEntryIterator0.stack;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file24.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file24.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file39.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file39.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file53.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file53.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItorQueue59);
    }

    @Test
    public void test0268() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0268");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file1 = null;
        fileEntryIterator0.current = file1;
        fileEntryIterator0.recursive = true;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator5 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator6 = entryComparator5.reversed();
        java.util.Comparator<java.io.File> fileComparator7 = entryComparator5.reversed();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive8 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest9 = explodedArchive8.manifest;
        explodedArchive8.recursive = false;
        java.util.jar.Manifest manifest12 = explodedArchive8.manifest;
        java.io.File file13 = explodedArchive8.manifestFile;
        java.io.File file14 = null;
        java.io.File file15 = explodedArchive8.getManifestFile(file14);
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive16 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest17 = explodedArchive16.manifest;
        explodedArchive16.recursive = false;
        java.io.File file20 = null;
        explodedArchive16.root = file20;
        java.io.File file22 = explodedArchive16.root;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive23 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest24 = explodedArchive23.manifest;
        explodedArchive23.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive27 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest28 = explodedArchive27.manifest;
        explodedArchive27.recursive = false;
        java.util.jar.Manifest manifest31 = explodedArchive27.manifest;
        java.io.File file32 = explodedArchive27.manifestFile;
        java.io.File file33 = null;
        java.io.File file34 = explodedArchive27.getManifestFile(file33);
        explodedArchive23.manifestFile = file33;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive36 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest37 = explodedArchive36.manifest;
        explodedArchive36.recursive = false;
        java.util.jar.Manifest manifest40 = explodedArchive36.manifest;
        java.io.File file41 = explodedArchive36.manifestFile;
        java.io.File file42 = null;
        java.io.File file43 = explodedArchive36.getManifestFile(file42);
        explodedArchive23.manifestFile = file43;
        java.io.File file45 = explodedArchive16.getManifestFile(file43);
        int int46 = entryComparator5.compare(file15, file43);
        java.util.Iterator<java.io.File> fileItor47 = fileEntryIterator0.listFiles(file15);
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator48 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        boolean boolean49 = fileEntryIterator48.hasNext();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator50 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator51 = entryComparator50.reversed();
        java.util.Comparator<java.io.File> fileComparator52 = fileComparator51.reversed();
        fileEntryIterator48.entryComparator = fileComparator52;
        java.util.Comparator<java.io.File> fileComparator54 = fileEntryIterator48.entryComparator;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator55 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator56 = entryComparator55.reversed();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator57 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator58 = entryComparator57.reversed();
        java.util.Comparator<java.io.File> fileComparator59 = entryComparator55.thenComparing(fileComparator58);
        java.util.Comparator<java.io.File> fileComparator60 = fileComparator54.thenComparing(fileComparator58);
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator61 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator62 = entryComparator61.reversed();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator63 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator64 = entryComparator63.reversed();
        java.util.Comparator<java.io.File> fileComparator65 = entryComparator61.thenComparing(fileComparator64);
        java.util.Comparator<java.io.File> fileComparator66 = fileComparator58.thenComparing(fileComparator64);
        fileEntryIterator0.entryComparator = fileComparator64;
        java.util.Comparator<java.io.File> fileComparator68 = fileComparator64.reversed();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file15.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file15.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file34.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file34.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file43.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file43.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file45.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file45.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator68);
    }

    @Test
    public void test0269() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0269");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file1 = null;
        fileEntryIterator0.current = file1;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive3 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest4 = explodedArchive3.manifest;
        explodedArchive3.recursive = false;
        java.util.jar.Manifest manifest7 = explodedArchive3.manifest;
        java.io.File file8 = explodedArchive3.manifestFile;
        java.io.File file9 = null;
        java.io.File file10 = explodedArchive3.getManifestFile(file9);
        java.util.Iterator<java.io.File> fileItor11 = fileEntryIterator0.listFiles(file10);
        boolean boolean12 = fileEntryIterator0.hasNext();
        java.util.Comparator<java.io.File> fileComparator13 = fileEntryIterator0.entryComparator;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator14 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file15 = null;
        fileEntryIterator14.current = file15;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive17 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest18 = explodedArchive17.manifest;
        explodedArchive17.recursive = false;
        java.util.jar.Manifest manifest21 = explodedArchive17.manifest;
        java.io.File file22 = explodedArchive17.manifestFile;
        java.io.File file23 = null;
        java.io.File file24 = explodedArchive17.getManifestFile(file23);
        java.util.Iterator<java.io.File> fileItor25 = fileEntryIterator14.listFiles(file24);
        java.io.File file26 = fileEntryIterator14.current;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator27 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file28 = null;
        fileEntryIterator27.current = file28;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive30 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest31 = explodedArchive30.manifest;
        explodedArchive30.recursive = false;
        java.util.jar.Manifest manifest34 = explodedArchive30.manifest;
        java.io.File file35 = explodedArchive30.manifestFile;
        java.io.File file36 = null;
        java.io.File file37 = explodedArchive30.getManifestFile(file36);
        java.util.Iterator<java.io.File> fileItor38 = fileEntryIterator27.listFiles(file37);
        java.util.ArrayDeque<java.util.Iterator<java.io.File>> fileItorQueue39 = new java.util.ArrayDeque<java.util.Iterator<java.io.File>>();
        boolean boolean40 = fileItorQueue39.add(fileItor38);
        fileEntryIterator14.stack = fileItorQueue39;
        fileEntryIterator0.stack = fileItorQueue39;
        boolean boolean43 = fileEntryIterator0.recursive;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file24.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file24.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file37.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file37.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
    }

    @Test
    public void test0270() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0270");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        boolean boolean1 = fileEntryIterator0.hasNext();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator2 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator3 = entryComparator2.reversed();
        java.util.Comparator<java.io.File> fileComparator4 = fileComparator3.reversed();
        fileEntryIterator0.entryComparator = fileComparator4;
        java.util.Comparator<java.io.File> fileComparator6 = fileEntryIterator0.entryComparator;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator7 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator8 = entryComparator7.reversed();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator9 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator10 = entryComparator9.reversed();
        java.util.Comparator<java.io.File> fileComparator11 = entryComparator7.thenComparing(fileComparator10);
        java.util.Comparator<java.io.File> fileComparator12 = fileComparator6.thenComparing(fileComparator10);
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator13 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator14 = entryComparator13.reversed();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator15 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator16 = entryComparator15.reversed();
        java.util.Comparator<java.io.File> fileComparator17 = entryComparator13.thenComparing(fileComparator16);
        java.util.Comparator<java.io.File> fileComparator18 = fileComparator12.thenComparing((java.util.Comparator<java.io.File>) entryComparator13);
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator19 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        boolean boolean20 = fileEntryIterator19.hasNext();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator21 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator22 = entryComparator21.reversed();
        java.util.Comparator<java.io.File> fileComparator23 = fileComparator22.reversed();
        fileEntryIterator19.entryComparator = fileComparator23;
        java.util.Comparator<java.io.File> fileComparator25 = fileComparator12.thenComparing(fileComparator23);
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator26 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file27 = null;
        fileEntryIterator26.current = file27;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive29 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest30 = explodedArchive29.manifest;
        explodedArchive29.recursive = false;
        java.util.jar.Manifest manifest33 = explodedArchive29.manifest;
        java.io.File file34 = explodedArchive29.manifestFile;
        java.io.File file35 = null;
        java.io.File file36 = explodedArchive29.getManifestFile(file35);
        java.util.Iterator<java.io.File> fileItor37 = fileEntryIterator26.listFiles(file36);
        boolean boolean38 = fileEntryIterator26.hasNext();
        java.util.Comparator<java.io.File> fileComparator39 = fileEntryIterator26.entryComparator;
        java.util.Comparator<java.io.File> fileComparator40 = fileComparator23.thenComparing(fileComparator39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file36.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file36.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator40);
    }

    @Test
    public void test0271() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0271");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file1 = null;
        fileEntryIterator0.current = file1;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive3 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest4 = explodedArchive3.manifest;
        explodedArchive3.recursive = false;
        java.util.jar.Manifest manifest7 = explodedArchive3.manifest;
        java.io.File file8 = explodedArchive3.manifestFile;
        java.io.File file9 = null;
        java.io.File file10 = explodedArchive3.getManifestFile(file9);
        java.util.Iterator<java.io.File> fileItor11 = fileEntryIterator0.listFiles(file10);
        java.io.File file12 = fileEntryIterator0.current;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator13 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file14 = null;
        fileEntryIterator13.current = file14;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive16 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest17 = explodedArchive16.manifest;
        explodedArchive16.recursive = false;
        java.util.jar.Manifest manifest20 = explodedArchive16.manifest;
        java.io.File file21 = explodedArchive16.manifestFile;
        java.io.File file22 = null;
        java.io.File file23 = explodedArchive16.getManifestFile(file22);
        java.util.Iterator<java.io.File> fileItor24 = fileEntryIterator13.listFiles(file23);
        java.util.ArrayDeque<java.util.Iterator<java.io.File>> fileItorQueue25 = new java.util.ArrayDeque<java.util.Iterator<java.io.File>>();
        boolean boolean26 = fileItorQueue25.add(fileItor24);
        fileEntryIterator0.stack = fileItorQueue25;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive28 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest29 = explodedArchive28.manifest;
        explodedArchive28.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive32 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest33 = explodedArchive32.manifest;
        explodedArchive32.recursive = false;
        java.util.jar.Manifest manifest36 = explodedArchive32.manifest;
        java.io.File file37 = explodedArchive32.manifestFile;
        java.io.File file38 = null;
        java.io.File file39 = explodedArchive32.getManifestFile(file38);
        explodedArchive28.manifestFile = file38;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive41 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest42 = explodedArchive41.manifest;
        explodedArchive41.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive45 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest46 = explodedArchive45.manifest;
        explodedArchive45.recursive = false;
        java.util.jar.Manifest manifest49 = explodedArchive45.manifest;
        java.io.File file50 = explodedArchive45.manifestFile;
        java.io.File file51 = null;
        java.io.File file52 = explodedArchive45.getManifestFile(file51);
        explodedArchive41.manifestFile = file51;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive54 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest55 = explodedArchive54.manifest;
        explodedArchive54.recursive = false;
        java.util.jar.Manifest manifest58 = explodedArchive54.manifest;
        java.io.File file59 = explodedArchive54.manifestFile;
        java.io.File file60 = null;
        java.io.File file61 = explodedArchive54.getManifestFile(file60);
        explodedArchive41.manifestFile = file61;
        explodedArchive28.root = file61;
        java.util.Iterator<java.io.File> fileItor64 = fileEntryIterator0.listFiles(file61);
        java.util.Comparator<java.io.File> fileComparator65 = fileEntryIterator0.entryComparator;
        java.util.Deque<java.util.Iterator<java.io.File>> fileItorQueue66 = fileEntryIterator0.stack;
        java.io.File file67 = fileEntryIterator0.current;
        java.io.File file68 = fileEntryIterator0.poll();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file23.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file23.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file39.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file39.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file52.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file52.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file61.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file61.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItorQueue66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file68);
    }

    @Test
    public void test0272() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0272");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest1 = explodedArchive0.manifest;
        explodedArchive0.recursive = false;
        java.io.File file4 = null;
        explodedArchive0.root = file4;
        java.io.File file6 = explodedArchive0.root;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive7 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest8 = explodedArchive7.manifest;
        explodedArchive7.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive11 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest12 = explodedArchive11.manifest;
        explodedArchive11.recursive = false;
        java.util.jar.Manifest manifest15 = explodedArchive11.manifest;
        java.io.File file16 = explodedArchive11.manifestFile;
        java.io.File file17 = null;
        java.io.File file18 = explodedArchive11.getManifestFile(file17);
        explodedArchive7.manifestFile = file17;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive20 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest21 = explodedArchive20.manifest;
        explodedArchive20.recursive = false;
        java.util.jar.Manifest manifest24 = explodedArchive20.manifest;
        java.io.File file25 = explodedArchive20.manifestFile;
        java.io.File file26 = null;
        java.io.File file27 = explodedArchive20.getManifestFile(file26);
        explodedArchive7.manifestFile = file27;
        java.io.File file29 = explodedArchive0.getManifestFile(file27);
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntry fileEntry30 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntry();
        java.lang.String str31 = fileEntry30.name;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator32 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file33 = null;
        fileEntryIterator32.current = file33;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive35 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.lang.String str36 = explodedArchive35.toString();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive37 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file38 = explodedArchive37.root;
        java.io.File file39 = null;
        explodedArchive37.manifestFile = file39;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive41 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest42 = explodedArchive41.manifest;
        explodedArchive41.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive45 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest46 = explodedArchive45.manifest;
        explodedArchive45.recursive = false;
        java.util.jar.Manifest manifest49 = explodedArchive45.manifest;
        java.io.File file50 = explodedArchive45.manifestFile;
        java.io.File file51 = null;
        java.io.File file52 = explodedArchive45.getManifestFile(file51);
        explodedArchive41.manifestFile = file51;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive54 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest55 = explodedArchive54.manifest;
        explodedArchive54.recursive = false;
        java.util.jar.Manifest manifest58 = explodedArchive54.manifest;
        java.io.File file59 = explodedArchive54.manifestFile;
        java.io.File file60 = null;
        java.io.File file61 = explodedArchive54.getManifestFile(file60);
        explodedArchive41.manifestFile = file61;
        java.io.File file63 = explodedArchive37.getManifestFile(file61);
        java.io.File file64 = explodedArchive35.getManifestFile(file61);
        fileEntryIterator32.root = file61;
        fileEntry30.file = file61;
        java.io.File file67 = fileEntry30.file;
        explodedArchive0.root = file67;
        java.io.File file69 = explodedArchive0.manifestFile;
        java.util.Spliterator<org.springframework.boot.loader.archive.Archive.Entry> entrySpliterator70 = explodedArchive0.spliterator();
        explodedArchive0.recursive = false;
        java.lang.String str73 = explodedArchive0.toString();
        java.util.jar.Manifest manifest74 = explodedArchive0.manifest;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file18.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file18.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file27.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file27.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file29.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file29.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str36 + "' != '" + "exploded archive" + "'", str36.equals("exploded archive"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file52.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file52.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file61.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file61.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file63.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file63.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file64.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file64.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file67.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file67.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(entrySpliterator70);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertTrue("'" + str73 + "' != '" + "file:/server/study-execution/new-nimrod/nimrod-hunoroutput-test-dest/spring-boot/af20dc6cc45c032573413c401f9f73aa75371744/randoop_6/META-INF/MANIFEST.MF" + "'", str73.equals("file:/server/study-execution/new-nimrod/nimrod-hunoroutput-test-dest/spring-boot/af20dc6cc45c032573413c401f9f73aa75371744/randoop_6/META-INF/MANIFEST.MF"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest74);
    }

    @Test
    public void test0273() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0273");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file1 = null;
        fileEntryIterator0.current = file1;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive3 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest4 = explodedArchive3.manifest;
        explodedArchive3.recursive = false;
        java.util.jar.Manifest manifest7 = explodedArchive3.manifest;
        java.io.File file8 = explodedArchive3.manifestFile;
        java.io.File file9 = null;
        java.io.File file10 = explodedArchive3.getManifestFile(file9);
        java.util.Iterator<java.io.File> fileItor11 = fileEntryIterator0.listFiles(file10);
        boolean boolean12 = fileEntryIterator0.hasNext();
        java.util.Comparator<java.io.File> fileComparator13 = fileEntryIterator0.entryComparator;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator14 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file15 = null;
        fileEntryIterator14.current = file15;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive17 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest18 = explodedArchive17.manifest;
        explodedArchive17.recursive = false;
        java.util.jar.Manifest manifest21 = explodedArchive17.manifest;
        java.io.File file22 = explodedArchive17.manifestFile;
        java.io.File file23 = null;
        java.io.File file24 = explodedArchive17.getManifestFile(file23);
        java.util.Iterator<java.io.File> fileItor25 = fileEntryIterator14.listFiles(file24);
        java.io.File file26 = fileEntryIterator14.current;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator27 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file28 = null;
        fileEntryIterator27.current = file28;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive30 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest31 = explodedArchive30.manifest;
        explodedArchive30.recursive = false;
        java.util.jar.Manifest manifest34 = explodedArchive30.manifest;
        java.io.File file35 = explodedArchive30.manifestFile;
        java.io.File file36 = null;
        java.io.File file37 = explodedArchive30.getManifestFile(file36);
        java.util.Iterator<java.io.File> fileItor38 = fileEntryIterator27.listFiles(file37);
        java.util.ArrayDeque<java.util.Iterator<java.io.File>> fileItorQueue39 = new java.util.ArrayDeque<java.util.Iterator<java.io.File>>();
        boolean boolean40 = fileItorQueue39.add(fileItor38);
        fileEntryIterator14.stack = fileItorQueue39;
        fileEntryIterator0.stack = fileItorQueue39;
        java.io.File file43 = fileEntryIterator0.current;
        boolean boolean44 = fileEntryIterator0.recursive;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file24.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file24.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file37.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file37.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
    }

    @Test
    public void test0274() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0274");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntry fileEntry0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntry();
        java.lang.String str1 = fileEntry0.name;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator2 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file3 = null;
        fileEntryIterator2.current = file3;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive5 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest6 = explodedArchive5.manifest;
        explodedArchive5.recursive = false;
        java.util.jar.Manifest manifest9 = explodedArchive5.manifest;
        java.io.File file10 = explodedArchive5.manifestFile;
        java.io.File file11 = null;
        java.io.File file12 = explodedArchive5.getManifestFile(file11);
        java.util.Iterator<java.io.File> fileItor13 = fileEntryIterator2.listFiles(file12);
        java.io.File file14 = fileEntryIterator2.current;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator15 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file16 = null;
        fileEntryIterator15.current = file16;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive18 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest19 = explodedArchive18.manifest;
        explodedArchive18.recursive = false;
        java.util.jar.Manifest manifest22 = explodedArchive18.manifest;
        java.io.File file23 = explodedArchive18.manifestFile;
        java.io.File file24 = null;
        java.io.File file25 = explodedArchive18.getManifestFile(file24);
        java.util.Iterator<java.io.File> fileItor26 = fileEntryIterator15.listFiles(file25);
        java.util.ArrayDeque<java.util.Iterator<java.io.File>> fileItorQueue27 = new java.util.ArrayDeque<java.util.Iterator<java.io.File>>();
        boolean boolean28 = fileItorQueue27.add(fileItor26);
        fileEntryIterator2.stack = fileItorQueue27;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive30 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest31 = explodedArchive30.manifest;
        explodedArchive30.recursive = false;
        java.io.File file34 = null;
        explodedArchive30.root = file34;
        java.io.File file36 = explodedArchive30.root;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive37 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest38 = explodedArchive37.manifest;
        explodedArchive37.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive41 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest42 = explodedArchive41.manifest;
        explodedArchive41.recursive = false;
        java.util.jar.Manifest manifest45 = explodedArchive41.manifest;
        java.io.File file46 = explodedArchive41.manifestFile;
        java.io.File file47 = null;
        java.io.File file48 = explodedArchive41.getManifestFile(file47);
        explodedArchive37.manifestFile = file47;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive50 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest51 = explodedArchive50.manifest;
        explodedArchive50.recursive = false;
        java.util.jar.Manifest manifest54 = explodedArchive50.manifest;
        java.io.File file55 = explodedArchive50.manifestFile;
        java.io.File file56 = null;
        java.io.File file57 = explodedArchive50.getManifestFile(file56);
        explodedArchive37.manifestFile = file57;
        java.io.File file59 = explodedArchive30.getManifestFile(file57);
        fileEntryIterator2.root = file57;
        fileEntry0.file = file57;
        boolean boolean62 = fileEntry0.isDirectory();
        boolean boolean63 = fileEntry0.isDirectory();
        java.io.File file64 = fileEntry0.file;
        java.io.File file65 = fileEntry0.getFile();
        fileEntry0.name = "file:/server/study-execution/new-nimrod/nimrod-hunoroutput-test-dest/spring-boot/af20dc6cc45c032573413c401f9f73aa75371744/randoop_6/META-INF/MANIFEST.MF";
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file12.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file12.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file25.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file25.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file48.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file48.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file57.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file57.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file59.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file59.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file64.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file64.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file65.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file65.toString(), "META-INF/MANIFEST.MF");
    }

    @Test
    public void test0275() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0275");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest1 = explodedArchive0.manifest;
        explodedArchive0.recursive = false;
        java.io.File file4 = null;
        explodedArchive0.root = file4;
        java.io.File file6 = explodedArchive0.root;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive7 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest8 = explodedArchive7.manifest;
        explodedArchive7.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive11 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest12 = explodedArchive11.manifest;
        explodedArchive11.recursive = false;
        java.util.jar.Manifest manifest15 = explodedArchive11.manifest;
        java.io.File file16 = explodedArchive11.manifestFile;
        java.io.File file17 = null;
        java.io.File file18 = explodedArchive11.getManifestFile(file17);
        explodedArchive7.manifestFile = file17;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive20 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest21 = explodedArchive20.manifest;
        explodedArchive20.recursive = false;
        java.util.jar.Manifest manifest24 = explodedArchive20.manifest;
        java.io.File file25 = explodedArchive20.manifestFile;
        java.io.File file26 = null;
        java.io.File file27 = explodedArchive20.getManifestFile(file26);
        explodedArchive7.manifestFile = file27;
        java.io.File file29 = explodedArchive0.getManifestFile(file27);
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntry fileEntry30 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntry();
        java.lang.String str31 = fileEntry30.name;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator32 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file33 = null;
        fileEntryIterator32.current = file33;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive35 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.lang.String str36 = explodedArchive35.toString();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive37 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file38 = explodedArchive37.root;
        java.io.File file39 = null;
        explodedArchive37.manifestFile = file39;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive41 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest42 = explodedArchive41.manifest;
        explodedArchive41.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive45 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest46 = explodedArchive45.manifest;
        explodedArchive45.recursive = false;
        java.util.jar.Manifest manifest49 = explodedArchive45.manifest;
        java.io.File file50 = explodedArchive45.manifestFile;
        java.io.File file51 = null;
        java.io.File file52 = explodedArchive45.getManifestFile(file51);
        explodedArchive41.manifestFile = file51;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive54 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest55 = explodedArchive54.manifest;
        explodedArchive54.recursive = false;
        java.util.jar.Manifest manifest58 = explodedArchive54.manifest;
        java.io.File file59 = explodedArchive54.manifestFile;
        java.io.File file60 = null;
        java.io.File file61 = explodedArchive54.getManifestFile(file60);
        explodedArchive41.manifestFile = file61;
        java.io.File file63 = explodedArchive37.getManifestFile(file61);
        java.io.File file64 = explodedArchive35.getManifestFile(file61);
        fileEntryIterator32.root = file61;
        fileEntry30.file = file61;
        java.io.File file67 = fileEntry30.file;
        explodedArchive0.root = file67;
        java.io.File file69 = explodedArchive0.manifestFile;
        java.net.URL uRL70 = explodedArchive0.getUrl();
        java.util.jar.Manifest manifest71 = explodedArchive0.manifest;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file18.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file18.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file27.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file27.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file29.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file29.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str36 + "' != '" + "exploded archive" + "'", str36.equals("exploded archive"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file52.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file52.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file61.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file61.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file63.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file63.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file64.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file64.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file67.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file67.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(uRL70);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(uRL70.toString(), "file:/server/study-execution/new-nimrod/nimrod-hunoroutput-test-dest/spring-boot/af20dc6cc45c032573413c401f9f73aa75371744/randoop_6/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest71);
    }

    @Test
    public void test0276() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0276");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntry fileEntry0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntry();
        java.io.File file1 = fileEntry0.file;
        java.lang.String str2 = fileEntry0.name;
        java.io.File file3 = fileEntry0.file;
        java.io.File file4 = fileEntry0.file;
        java.lang.String str5 = fileEntry0.name;
        java.lang.String str6 = fileEntry0.getName();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntry fileEntry7 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntry();
        java.io.File file8 = fileEntry7.getFile();
        java.io.File file9 = fileEntry7.getFile();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive10 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file11 = explodedArchive10.root;
        java.io.File file12 = null;
        explodedArchive10.manifestFile = file12;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive14 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest15 = explodedArchive14.manifest;
        explodedArchive14.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive18 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest19 = explodedArchive18.manifest;
        explodedArchive18.recursive = false;
        java.util.jar.Manifest manifest22 = explodedArchive18.manifest;
        java.io.File file23 = explodedArchive18.manifestFile;
        java.io.File file24 = null;
        java.io.File file25 = explodedArchive18.getManifestFile(file24);
        explodedArchive14.manifestFile = file24;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive27 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest28 = explodedArchive27.manifest;
        explodedArchive27.recursive = false;
        java.util.jar.Manifest manifest31 = explodedArchive27.manifest;
        java.io.File file32 = explodedArchive27.manifestFile;
        java.io.File file33 = null;
        java.io.File file34 = explodedArchive27.getManifestFile(file33);
        explodedArchive14.manifestFile = file34;
        java.io.File file36 = explodedArchive10.getManifestFile(file34);
        fileEntry7.file = file36;
        java.io.File file38 = fileEntry7.file;
        fileEntry7.name = "exploded archive";
        java.io.File file41 = fileEntry7.file;
        java.io.File file42 = fileEntry7.getFile();
        java.io.File file43 = fileEntry7.file;
        fileEntry0.file = file43;
        // The following exception was thrown during execution in test generation
        try {
            org.springframework.boot.loader.archive.ExplodedArchive explodedArchive46 = new org.springframework.boot.loader.archive.ExplodedArchive(file43, true);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid source folder META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file25.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file25.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file34.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file34.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file36.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file36.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file38.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file38.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file41.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file41.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file42.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file42.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file43.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file43.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
    }

    @Test
    public void test0277() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0277");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest1 = explodedArchive0.manifest;
        explodedArchive0.recursive = false;
        java.io.File file4 = null;
        explodedArchive0.root = file4;
        java.io.File file6 = explodedArchive0.root;
        java.util.jar.Manifest manifest7 = null;
        explodedArchive0.manifest = manifest7;
        explodedArchive0.recursive = false;
        java.util.jar.Manifest manifest11 = null;
        explodedArchive0.manifest = manifest11;
        java.util.jar.Manifest manifest13 = null;
        explodedArchive0.manifest = manifest13;
        org.springframework.boot.loader.archive.Archive.EntryFilter entryFilter15 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<org.springframework.boot.loader.archive.Archive> archiveList16 = explodedArchive0.getNestedArchives(entryFilter15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file6);
    }

    @Test
    public void test0278() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0278");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        boolean boolean1 = fileEntryIterator0.hasNext();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator2 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator3 = entryComparator2.reversed();
        java.util.Comparator<java.io.File> fileComparator4 = fileComparator3.reversed();
        fileEntryIterator0.entryComparator = fileComparator4;
        java.util.Comparator<java.io.File> fileComparator6 = fileEntryIterator0.entryComparator;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator7 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator8 = entryComparator7.reversed();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator9 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator10 = entryComparator9.reversed();
        java.util.Comparator<java.io.File> fileComparator11 = entryComparator7.thenComparing(fileComparator10);
        java.util.Comparator<java.io.File> fileComparator12 = fileComparator6.thenComparing(fileComparator10);
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator13 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator14 = entryComparator13.reversed();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator15 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator16 = entryComparator15.reversed();
        java.util.Comparator<java.io.File> fileComparator17 = entryComparator13.thenComparing(fileComparator16);
        java.util.Comparator<java.io.File> fileComparator18 = fileComparator10.thenComparing(fileComparator16);
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator19 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file20 = null;
        fileEntryIterator19.current = file20;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive22 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest23 = explodedArchive22.manifest;
        explodedArchive22.recursive = false;
        java.util.jar.Manifest manifest26 = explodedArchive22.manifest;
        java.io.File file27 = explodedArchive22.manifestFile;
        java.io.File file28 = null;
        java.io.File file29 = explodedArchive22.getManifestFile(file28);
        java.util.Iterator<java.io.File> fileItor30 = fileEntryIterator19.listFiles(file29);
        java.io.File file31 = fileEntryIterator19.root;
        java.io.File file32 = fileEntryIterator19.root;
        java.io.File file33 = fileEntryIterator19.current;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator34 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        boolean boolean35 = fileEntryIterator34.hasNext();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator36 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator37 = entryComparator36.reversed();
        java.util.Comparator<java.io.File> fileComparator38 = fileComparator37.reversed();
        fileEntryIterator34.entryComparator = fileComparator38;
        java.util.Comparator<java.io.File> fileComparator40 = fileEntryIterator34.entryComparator;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator41 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator42 = entryComparator41.reversed();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator43 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator44 = entryComparator43.reversed();
        java.util.Comparator<java.io.File> fileComparator45 = entryComparator41.thenComparing(fileComparator44);
        java.util.Comparator<java.io.File> fileComparator46 = fileComparator40.thenComparing(fileComparator44);
        fileEntryIterator19.entryComparator = fileComparator40;
        java.util.Comparator<java.io.File> fileComparator48 = fileComparator40.reversed();
        java.util.Comparator<java.io.File> fileComparator49 = fileComparator16.thenComparing(fileComparator40);
        java.util.Comparator<java.io.File> fileComparator50 = fileComparator49.reversed();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file29.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file29.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator50);
    }

    @Test
    public void test0279() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0279");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        boolean boolean1 = fileEntryIterator0.recursive;
        java.io.File file2 = fileEntryIterator0.current;
        boolean boolean3 = fileEntryIterator0.hasNext();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator4 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator5 = entryComparator4.reversed();
        java.util.Comparator<java.io.File> fileComparator6 = entryComparator4.reversed();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive7 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest8 = explodedArchive7.manifest;
        explodedArchive7.recursive = false;
        java.util.jar.Manifest manifest11 = explodedArchive7.manifest;
        java.io.File file12 = explodedArchive7.manifestFile;
        java.io.File file13 = null;
        java.io.File file14 = explodedArchive7.getManifestFile(file13);
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive15 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest16 = explodedArchive15.manifest;
        explodedArchive15.recursive = false;
        java.io.File file19 = null;
        explodedArchive15.root = file19;
        java.io.File file21 = explodedArchive15.root;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive22 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest23 = explodedArchive22.manifest;
        explodedArchive22.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive26 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest27 = explodedArchive26.manifest;
        explodedArchive26.recursive = false;
        java.util.jar.Manifest manifest30 = explodedArchive26.manifest;
        java.io.File file31 = explodedArchive26.manifestFile;
        java.io.File file32 = null;
        java.io.File file33 = explodedArchive26.getManifestFile(file32);
        explodedArchive22.manifestFile = file32;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive35 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest36 = explodedArchive35.manifest;
        explodedArchive35.recursive = false;
        java.util.jar.Manifest manifest39 = explodedArchive35.manifest;
        java.io.File file40 = explodedArchive35.manifestFile;
        java.io.File file41 = null;
        java.io.File file42 = explodedArchive35.getManifestFile(file41);
        explodedArchive22.manifestFile = file42;
        java.io.File file44 = explodedArchive15.getManifestFile(file42);
        int int45 = entryComparator4.compare(file14, file42);
        java.util.Iterator<java.io.File> fileItor46 = fileEntryIterator0.listFiles(file14);
        // The following exception was thrown during execution in test generation
        try {
            org.springframework.boot.loader.archive.ExplodedArchive explodedArchive48 = new org.springframework.boot.loader.archive.ExplodedArchive(file14, false);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid source folder META-INF/MANIFEST.MF");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file14.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file14.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file33.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file33.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file42.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file42.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file44.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file44.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor46);
    }

    @Test
    public void test0280() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0280");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file1 = null;
        fileEntryIterator0.current = file1;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive3 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest4 = explodedArchive3.manifest;
        explodedArchive3.recursive = false;
        java.util.jar.Manifest manifest7 = explodedArchive3.manifest;
        java.io.File file8 = explodedArchive3.manifestFile;
        java.io.File file9 = null;
        java.io.File file10 = explodedArchive3.getManifestFile(file9);
        java.util.Iterator<java.io.File> fileItor11 = fileEntryIterator0.listFiles(file10);
        java.io.File file12 = fileEntryIterator0.root;
        java.io.File file13 = fileEntryIterator0.root;
        java.util.Deque<java.util.Iterator<java.io.File>> fileItorQueue14 = fileEntryIterator0.stack;
        java.io.File file15 = fileEntryIterator0.current;
        java.io.File file16 = fileEntryIterator0.root;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntry fileEntry17 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntry();
        java.io.File file18 = fileEntry17.file;
        java.lang.String str19 = fileEntry17.name;
        java.io.File file20 = fileEntry17.file;
        java.io.File file21 = fileEntry17.file;
        java.lang.String str22 = fileEntry17.getName();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntry fileEntry23 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntry();
        java.lang.String str24 = fileEntry23.name;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator25 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file26 = null;
        fileEntryIterator25.current = file26;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive28 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.lang.String str29 = explodedArchive28.toString();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive30 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file31 = explodedArchive30.root;
        java.io.File file32 = null;
        explodedArchive30.manifestFile = file32;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive34 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest35 = explodedArchive34.manifest;
        explodedArchive34.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive38 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest39 = explodedArchive38.manifest;
        explodedArchive38.recursive = false;
        java.util.jar.Manifest manifest42 = explodedArchive38.manifest;
        java.io.File file43 = explodedArchive38.manifestFile;
        java.io.File file44 = null;
        java.io.File file45 = explodedArchive38.getManifestFile(file44);
        explodedArchive34.manifestFile = file44;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive47 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest48 = explodedArchive47.manifest;
        explodedArchive47.recursive = false;
        java.util.jar.Manifest manifest51 = explodedArchive47.manifest;
        java.io.File file52 = explodedArchive47.manifestFile;
        java.io.File file53 = null;
        java.io.File file54 = explodedArchive47.getManifestFile(file53);
        explodedArchive34.manifestFile = file54;
        java.io.File file56 = explodedArchive30.getManifestFile(file54);
        java.io.File file57 = explodedArchive28.getManifestFile(file54);
        fileEntryIterator25.root = file54;
        fileEntry23.file = file54;
        fileEntry17.file = file54;
        fileEntryIterator0.root = file54;
        java.io.File file62 = fileEntryIterator0.current;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItorQueue14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str29 + "' != '" + "exploded archive" + "'", str29.equals("exploded archive"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file45.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file45.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file54.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file54.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file56.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file56.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file57.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file57.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file62);
    }

    @Test
    public void test0281() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0281");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntry fileEntry0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntry();
        java.io.File file1 = fileEntry0.getFile();
        java.io.File file2 = fileEntry0.getFile();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive3 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file4 = explodedArchive3.root;
        java.io.File file5 = null;
        explodedArchive3.manifestFile = file5;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive7 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest8 = explodedArchive7.manifest;
        explodedArchive7.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive11 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest12 = explodedArchive11.manifest;
        explodedArchive11.recursive = false;
        java.util.jar.Manifest manifest15 = explodedArchive11.manifest;
        java.io.File file16 = explodedArchive11.manifestFile;
        java.io.File file17 = null;
        java.io.File file18 = explodedArchive11.getManifestFile(file17);
        explodedArchive7.manifestFile = file17;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive20 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest21 = explodedArchive20.manifest;
        explodedArchive20.recursive = false;
        java.util.jar.Manifest manifest24 = explodedArchive20.manifest;
        java.io.File file25 = explodedArchive20.manifestFile;
        java.io.File file26 = null;
        java.io.File file27 = explodedArchive20.getManifestFile(file26);
        explodedArchive7.manifestFile = file27;
        java.io.File file29 = explodedArchive3.getManifestFile(file27);
        fileEntry0.file = file29;
        java.io.File file31 = fileEntry0.file;
        // The following exception was thrown during execution in test generation
        try {
            org.springframework.boot.loader.archive.ExplodedArchive explodedArchive32 = new org.springframework.boot.loader.archive.ExplodedArchive(file31);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid source folder META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file18.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file18.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file27.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file27.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file29.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file29.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file31.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file31.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
    }

    @Test
    public void test0282() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0282");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntry fileEntry0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntry();
        java.io.File file1 = fileEntry0.file;
        fileEntry0.name = "hi!";
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file1);
    }

    @Test
    public void test0283() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0283");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntry fileEntry0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntry();
        java.lang.String str1 = fileEntry0.getName();
        java.lang.String str2 = fileEntry0.getName();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator3 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator4 = entryComparator3.reversed();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive5 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file6 = explodedArchive5.root;
        java.io.File file7 = null;
        explodedArchive5.manifestFile = file7;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive9 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest10 = explodedArchive9.manifest;
        explodedArchive9.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive13 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest14 = explodedArchive13.manifest;
        explodedArchive13.recursive = false;
        java.util.jar.Manifest manifest17 = explodedArchive13.manifest;
        java.io.File file18 = explodedArchive13.manifestFile;
        java.io.File file19 = null;
        java.io.File file20 = explodedArchive13.getManifestFile(file19);
        explodedArchive9.manifestFile = file19;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive22 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest23 = explodedArchive22.manifest;
        explodedArchive22.recursive = false;
        java.util.jar.Manifest manifest26 = explodedArchive22.manifest;
        java.io.File file27 = explodedArchive22.manifestFile;
        java.io.File file28 = null;
        java.io.File file29 = explodedArchive22.getManifestFile(file28);
        explodedArchive9.manifestFile = file29;
        java.io.File file31 = explodedArchive5.getManifestFile(file29);
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive32 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest33 = explodedArchive32.manifest;
        explodedArchive32.recursive = false;
        java.io.File file36 = null;
        explodedArchive32.root = file36;
        java.io.File file38 = explodedArchive32.root;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive39 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest40 = explodedArchive39.manifest;
        explodedArchive39.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive43 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest44 = explodedArchive43.manifest;
        explodedArchive43.recursive = false;
        java.util.jar.Manifest manifest47 = explodedArchive43.manifest;
        java.io.File file48 = explodedArchive43.manifestFile;
        java.io.File file49 = null;
        java.io.File file50 = explodedArchive43.getManifestFile(file49);
        explodedArchive39.manifestFile = file49;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive52 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest53 = explodedArchive52.manifest;
        explodedArchive52.recursive = false;
        java.util.jar.Manifest manifest56 = explodedArchive52.manifest;
        java.io.File file57 = explodedArchive52.manifestFile;
        java.io.File file58 = null;
        java.io.File file59 = explodedArchive52.getManifestFile(file58);
        explodedArchive39.manifestFile = file59;
        java.io.File file61 = explodedArchive32.getManifestFile(file59);
        int int62 = entryComparator3.compare(file31, file59);
        fileEntry0.file = file59;
        fileEntry0.name = "exploded archive";
        java.lang.String str66 = fileEntry0.getName();
        fileEntry0.name = "exploded archive";
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file20.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file20.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file29.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file29.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file31.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file31.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file50.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file50.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file59.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file59.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file61.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file61.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 21 + "'", int62 == 21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str66 + "' != '" + "exploded archive" + "'", str66.equals("exploded archive"));
    }

    @Test
    public void test0284() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0284");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntry fileEntry0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntry();
        java.io.File file1 = fileEntry0.file;
        java.lang.String str2 = fileEntry0.name;
        java.io.File file3 = fileEntry0.file;
        java.io.File file4 = fileEntry0.file;
        java.lang.String str5 = fileEntry0.name;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive6 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.lang.String str7 = explodedArchive6.toString();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive8 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file9 = explodedArchive8.root;
        java.io.File file10 = null;
        explodedArchive8.manifestFile = file10;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive12 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest13 = explodedArchive12.manifest;
        explodedArchive12.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive16 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest17 = explodedArchive16.manifest;
        explodedArchive16.recursive = false;
        java.util.jar.Manifest manifest20 = explodedArchive16.manifest;
        java.io.File file21 = explodedArchive16.manifestFile;
        java.io.File file22 = null;
        java.io.File file23 = explodedArchive16.getManifestFile(file22);
        explodedArchive12.manifestFile = file22;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive25 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest26 = explodedArchive25.manifest;
        explodedArchive25.recursive = false;
        java.util.jar.Manifest manifest29 = explodedArchive25.manifest;
        java.io.File file30 = explodedArchive25.manifestFile;
        java.io.File file31 = null;
        java.io.File file32 = explodedArchive25.getManifestFile(file31);
        explodedArchive12.manifestFile = file32;
        java.io.File file34 = explodedArchive8.getManifestFile(file32);
        java.io.File file35 = explodedArchive6.getManifestFile(file32);
        fileEntry0.file = file32;
        java.io.File file37 = fileEntry0.getFile();
        fileEntry0.name = "exploded archive";
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str7 + "' != '" + "exploded archive" + "'", str7.equals("exploded archive"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file23.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file23.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file32.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file32.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file34.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file34.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file35.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file35.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file37.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file37.toString(), "META-INF/MANIFEST.MF");
    }

    @Test
    public void test0285() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0285");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntry fileEntry0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntry();
        java.lang.String str1 = fileEntry0.getName();
        java.io.File file2 = fileEntry0.getFile();
        java.lang.String str3 = fileEntry0.getName();
        java.lang.String str4 = fileEntry0.getName();
        java.lang.String str5 = fileEntry0.name;
        java.io.File file6 = fileEntry0.getFile();
        java.lang.String str7 = fileEntry0.getName();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str7);
    }

    @Test
    public void test0286() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0286");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntry fileEntry0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntry();
        java.lang.String str1 = fileEntry0.name;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator2 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file3 = null;
        fileEntryIterator2.current = file3;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive5 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.lang.String str6 = explodedArchive5.toString();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive7 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file8 = explodedArchive7.root;
        java.io.File file9 = null;
        explodedArchive7.manifestFile = file9;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive11 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest12 = explodedArchive11.manifest;
        explodedArchive11.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive15 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest16 = explodedArchive15.manifest;
        explodedArchive15.recursive = false;
        java.util.jar.Manifest manifest19 = explodedArchive15.manifest;
        java.io.File file20 = explodedArchive15.manifestFile;
        java.io.File file21 = null;
        java.io.File file22 = explodedArchive15.getManifestFile(file21);
        explodedArchive11.manifestFile = file21;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive24 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest25 = explodedArchive24.manifest;
        explodedArchive24.recursive = false;
        java.util.jar.Manifest manifest28 = explodedArchive24.manifest;
        java.io.File file29 = explodedArchive24.manifestFile;
        java.io.File file30 = null;
        java.io.File file31 = explodedArchive24.getManifestFile(file30);
        explodedArchive11.manifestFile = file31;
        java.io.File file33 = explodedArchive7.getManifestFile(file31);
        java.io.File file34 = explodedArchive5.getManifestFile(file31);
        fileEntryIterator2.root = file31;
        fileEntry0.file = file31;
        java.io.File file37 = fileEntry0.getFile();
        java.lang.String str38 = fileEntry0.name;
        java.lang.String str39 = fileEntry0.name;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "exploded archive" + "'", str6.equals("exploded archive"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file22.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file22.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file31.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file31.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file33.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file33.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file34.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file34.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file37.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file37.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str39);
    }

    @Test
    public void test0287() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0287");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file1 = null;
        fileEntryIterator0.current = file1;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive3 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest4 = explodedArchive3.manifest;
        explodedArchive3.recursive = false;
        java.util.jar.Manifest manifest7 = explodedArchive3.manifest;
        java.io.File file8 = explodedArchive3.manifestFile;
        java.io.File file9 = null;
        java.io.File file10 = explodedArchive3.getManifestFile(file9);
        java.util.Iterator<java.io.File> fileItor11 = fileEntryIterator0.listFiles(file10);
        java.io.File file12 = fileEntryIterator0.root;
        java.io.File file13 = fileEntryIterator0.poll();
        java.util.Comparator<java.io.File> fileComparator14 = fileEntryIterator0.entryComparator;
        java.util.Deque<java.util.Iterator<java.io.File>> fileItorQueue15 = fileEntryIterator0.stack;
        java.io.File file16 = fileEntryIterator0.poll();
        // The following exception was thrown during execution in test generation
        try {
            fileEntryIterator0.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: remove");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItorQueue15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file16);
    }

    @Test
    public void test0288() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0288");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        boolean boolean1 = fileEntryIterator0.recursive;
        java.io.File file2 = fileEntryIterator0.current;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator3 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file4 = null;
        fileEntryIterator3.current = file4;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive6 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest7 = explodedArchive6.manifest;
        explodedArchive6.recursive = false;
        java.util.jar.Manifest manifest10 = explodedArchive6.manifest;
        java.io.File file11 = explodedArchive6.manifestFile;
        java.io.File file12 = null;
        java.io.File file13 = explodedArchive6.getManifestFile(file12);
        java.util.Iterator<java.io.File> fileItor14 = fileEntryIterator3.listFiles(file13);
        java.io.File file15 = fileEntryIterator3.root;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive16 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.lang.String str17 = explodedArchive16.toString();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive18 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file19 = explodedArchive18.root;
        java.io.File file20 = null;
        explodedArchive18.manifestFile = file20;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive22 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest23 = explodedArchive22.manifest;
        explodedArchive22.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive26 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest27 = explodedArchive26.manifest;
        explodedArchive26.recursive = false;
        java.util.jar.Manifest manifest30 = explodedArchive26.manifest;
        java.io.File file31 = explodedArchive26.manifestFile;
        java.io.File file32 = null;
        java.io.File file33 = explodedArchive26.getManifestFile(file32);
        explodedArchive22.manifestFile = file32;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive35 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest36 = explodedArchive35.manifest;
        explodedArchive35.recursive = false;
        java.util.jar.Manifest manifest39 = explodedArchive35.manifest;
        java.io.File file40 = explodedArchive35.manifestFile;
        java.io.File file41 = null;
        java.io.File file42 = explodedArchive35.getManifestFile(file41);
        explodedArchive22.manifestFile = file42;
        java.io.File file44 = explodedArchive18.getManifestFile(file42);
        java.io.File file45 = explodedArchive16.getManifestFile(file42);
        fileEntryIterator3.root = file42;
        java.util.Iterator<java.io.File> fileItor47 = fileEntryIterator0.listFiles(file42);
        // The following exception was thrown during execution in test generation
        try {
            org.springframework.boot.loader.archive.ExplodedArchive explodedArchive49 = new org.springframework.boot.loader.archive.ExplodedArchive(file42, true);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid source folder META-INF/MANIFEST.MF");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file13.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file13.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str17 + "' != '" + "exploded archive" + "'", str17.equals("exploded archive"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file33.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file33.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file42.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file42.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file44.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file44.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file45.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file45.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor47);
    }

    @Test
    public void test0289() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0289");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        boolean boolean1 = explodedArchive0.recursive;
        java.lang.String str2 = explodedArchive0.toString();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive3 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest4 = explodedArchive3.manifest;
        explodedArchive3.recursive = false;
        java.util.jar.Manifest manifest7 = explodedArchive3.manifest;
        java.io.File file8 = explodedArchive3.manifestFile;
        java.io.File file9 = null;
        java.io.File file10 = explodedArchive3.getManifestFile(file9);
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator11 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file12 = null;
        fileEntryIterator11.current = file12;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive14 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.lang.String str15 = explodedArchive14.toString();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive16 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file17 = explodedArchive16.root;
        java.io.File file18 = null;
        explodedArchive16.manifestFile = file18;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive20 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest21 = explodedArchive20.manifest;
        explodedArchive20.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive24 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest25 = explodedArchive24.manifest;
        explodedArchive24.recursive = false;
        java.util.jar.Manifest manifest28 = explodedArchive24.manifest;
        java.io.File file29 = explodedArchive24.manifestFile;
        java.io.File file30 = null;
        java.io.File file31 = explodedArchive24.getManifestFile(file30);
        explodedArchive20.manifestFile = file30;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive33 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest34 = explodedArchive33.manifest;
        explodedArchive33.recursive = false;
        java.util.jar.Manifest manifest37 = explodedArchive33.manifest;
        java.io.File file38 = explodedArchive33.manifestFile;
        java.io.File file39 = null;
        java.io.File file40 = explodedArchive33.getManifestFile(file39);
        explodedArchive20.manifestFile = file40;
        java.io.File file42 = explodedArchive16.getManifestFile(file40);
        java.io.File file43 = explodedArchive14.getManifestFile(file40);
        fileEntryIterator11.root = file40;
        explodedArchive3.root = file40;
        java.io.File file46 = explodedArchive0.getManifestFile(file40);
        // The following exception was thrown during execution in test generation
        try {
            org.springframework.boot.loader.archive.ExplodedArchive explodedArchive48 = new org.springframework.boot.loader.archive.ExplodedArchive(file40, false);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid source folder META-INF/MANIFEST.MF");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str2 + "' != '" + "exploded archive" + "'", str2.equals("exploded archive"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str15 + "' != '" + "exploded archive" + "'", str15.equals("exploded archive"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file31.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file31.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file40.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file40.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file42.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file42.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file43.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file43.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file46.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file46.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
    }

    @Test
    public void test0290() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0290");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file1 = null;
        fileEntryIterator0.current = file1;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive3 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest4 = explodedArchive3.manifest;
        explodedArchive3.recursive = false;
        java.util.jar.Manifest manifest7 = explodedArchive3.manifest;
        java.io.File file8 = explodedArchive3.manifestFile;
        java.io.File file9 = null;
        java.io.File file10 = explodedArchive3.getManifestFile(file9);
        java.util.Iterator<java.io.File> fileItor11 = fileEntryIterator0.listFiles(file10);
        boolean boolean12 = fileEntryIterator0.hasNext();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator13 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator14 = entryComparator13.reversed();
        java.util.Comparator<java.io.File> fileComparator15 = entryComparator13.reversed();
        fileEntryIterator0.entryComparator = fileComparator15;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator17 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file18 = null;
        fileEntryIterator17.current = file18;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive20 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest21 = explodedArchive20.manifest;
        explodedArchive20.recursive = false;
        java.util.jar.Manifest manifest24 = explodedArchive20.manifest;
        java.io.File file25 = explodedArchive20.manifestFile;
        java.io.File file26 = null;
        java.io.File file27 = explodedArchive20.getManifestFile(file26);
        java.util.Iterator<java.io.File> fileItor28 = fileEntryIterator17.listFiles(file27);
        java.util.Comparator<java.io.File> fileComparator29 = fileEntryIterator17.entryComparator;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator30 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file31 = null;
        fileEntryIterator30.current = file31;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive33 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest34 = explodedArchive33.manifest;
        explodedArchive33.recursive = false;
        java.util.jar.Manifest manifest37 = explodedArchive33.manifest;
        java.io.File file38 = explodedArchive33.manifestFile;
        java.io.File file39 = null;
        java.io.File file40 = explodedArchive33.getManifestFile(file39);
        java.util.Iterator<java.io.File> fileItor41 = fileEntryIterator30.listFiles(file40);
        java.io.File file42 = fileEntryIterator30.current;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator43 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file44 = null;
        fileEntryIterator43.current = file44;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive46 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest47 = explodedArchive46.manifest;
        explodedArchive46.recursive = false;
        java.util.jar.Manifest manifest50 = explodedArchive46.manifest;
        java.io.File file51 = explodedArchive46.manifestFile;
        java.io.File file52 = null;
        java.io.File file53 = explodedArchive46.getManifestFile(file52);
        java.util.Iterator<java.io.File> fileItor54 = fileEntryIterator43.listFiles(file53);
        java.io.File file55 = fileEntryIterator43.current;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator56 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file57 = null;
        fileEntryIterator56.current = file57;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive59 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest60 = explodedArchive59.manifest;
        explodedArchive59.recursive = false;
        java.util.jar.Manifest manifest63 = explodedArchive59.manifest;
        java.io.File file64 = explodedArchive59.manifestFile;
        java.io.File file65 = null;
        java.io.File file66 = explodedArchive59.getManifestFile(file65);
        java.util.Iterator<java.io.File> fileItor67 = fileEntryIterator56.listFiles(file66);
        java.util.ArrayDeque<java.util.Iterator<java.io.File>> fileItorQueue68 = new java.util.ArrayDeque<java.util.Iterator<java.io.File>>();
        boolean boolean69 = fileItorQueue68.add(fileItor67);
        fileEntryIterator43.stack = fileItorQueue68;
        fileEntryIterator30.stack = fileItorQueue68;
        fileEntryIterator17.stack = fileItorQueue68;
        fileEntryIterator0.stack = fileItorQueue68;
        java.util.Comparator<java.io.File> fileComparator74 = fileEntryIterator0.entryComparator;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator75 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator76 = entryComparator75.reversed();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator77 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator78 = entryComparator77.reversed();
        java.util.Comparator<java.io.File> fileComparator79 = entryComparator75.thenComparing(fileComparator78);
        java.util.Comparator<java.io.File> fileComparator80 = fileComparator74.thenComparing(fileComparator78);
        java.util.Comparator<java.io.File> fileComparator81 = fileComparator78.reversed();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file27.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file27.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file40.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file40.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file53.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file53.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file66.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file66.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator76);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator78);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator79);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator80);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator81);
    }

    @Test
    public void test0291() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0291");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntry fileEntry0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntry();
        java.io.File file1 = fileEntry0.getFile();
        java.io.File file2 = fileEntry0.getFile();
        java.lang.String str3 = fileEntry0.name;
        fileEntry0.name = "";
        java.io.File file6 = fileEntry0.file;
        java.io.File file7 = fileEntry0.file;
        java.lang.String str8 = fileEntry0.getName();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str8 + "' != '" + "" + "'", str8.equals(""));
    }

    @Test
    public void test0292() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0292");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file1 = null;
        fileEntryIterator0.current = file1;
        fileEntryIterator0.recursive = true;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator5 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator6 = entryComparator5.reversed();
        java.util.Comparator<java.io.File> fileComparator7 = entryComparator5.reversed();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive8 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest9 = explodedArchive8.manifest;
        explodedArchive8.recursive = false;
        java.util.jar.Manifest manifest12 = explodedArchive8.manifest;
        java.io.File file13 = explodedArchive8.manifestFile;
        java.io.File file14 = null;
        java.io.File file15 = explodedArchive8.getManifestFile(file14);
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive16 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest17 = explodedArchive16.manifest;
        explodedArchive16.recursive = false;
        java.io.File file20 = null;
        explodedArchive16.root = file20;
        java.io.File file22 = explodedArchive16.root;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive23 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest24 = explodedArchive23.manifest;
        explodedArchive23.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive27 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest28 = explodedArchive27.manifest;
        explodedArchive27.recursive = false;
        java.util.jar.Manifest manifest31 = explodedArchive27.manifest;
        java.io.File file32 = explodedArchive27.manifestFile;
        java.io.File file33 = null;
        java.io.File file34 = explodedArchive27.getManifestFile(file33);
        explodedArchive23.manifestFile = file33;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive36 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest37 = explodedArchive36.manifest;
        explodedArchive36.recursive = false;
        java.util.jar.Manifest manifest40 = explodedArchive36.manifest;
        java.io.File file41 = explodedArchive36.manifestFile;
        java.io.File file42 = null;
        java.io.File file43 = explodedArchive36.getManifestFile(file42);
        explodedArchive23.manifestFile = file43;
        java.io.File file45 = explodedArchive16.getManifestFile(file43);
        int int46 = entryComparator5.compare(file15, file43);
        java.util.Iterator<java.io.File> fileItor47 = fileEntryIterator0.listFiles(file15);
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator48 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        boolean boolean49 = fileEntryIterator48.hasNext();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator50 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator51 = entryComparator50.reversed();
        java.util.Comparator<java.io.File> fileComparator52 = fileComparator51.reversed();
        fileEntryIterator48.entryComparator = fileComparator52;
        java.util.Comparator<java.io.File> fileComparator54 = fileEntryIterator48.entryComparator;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator55 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator56 = entryComparator55.reversed();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator57 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator58 = entryComparator57.reversed();
        java.util.Comparator<java.io.File> fileComparator59 = entryComparator55.thenComparing(fileComparator58);
        java.util.Comparator<java.io.File> fileComparator60 = fileComparator54.thenComparing(fileComparator58);
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator61 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator62 = entryComparator61.reversed();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator63 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator64 = entryComparator63.reversed();
        java.util.Comparator<java.io.File> fileComparator65 = entryComparator61.thenComparing(fileComparator64);
        java.util.Comparator<java.io.File> fileComparator66 = fileComparator58.thenComparing(fileComparator64);
        fileEntryIterator0.entryComparator = fileComparator64;
        java.util.Comparator<java.io.File> fileComparator68 = null;
        fileEntryIterator0.entryComparator = fileComparator68;
        java.io.File file70 = fileEntryIterator0.root;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file15.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file15.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file34.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file34.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file43.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file43.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file45.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file45.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file70);
    }

    @Test
    public void test0293() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0293");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file1 = null;
        fileEntryIterator0.current = file1;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive3 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest4 = explodedArchive3.manifest;
        explodedArchive3.recursive = false;
        java.util.jar.Manifest manifest7 = explodedArchive3.manifest;
        java.io.File file8 = explodedArchive3.manifestFile;
        java.io.File file9 = null;
        java.io.File file10 = explodedArchive3.getManifestFile(file9);
        java.util.Iterator<java.io.File> fileItor11 = fileEntryIterator0.listFiles(file10);
        boolean boolean12 = fileEntryIterator0.hasNext();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator13 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator14 = entryComparator13.reversed();
        java.util.Comparator<java.io.File> fileComparator15 = entryComparator13.reversed();
        fileEntryIterator0.entryComparator = fileComparator15;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator17 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file18 = null;
        fileEntryIterator17.current = file18;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive20 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.lang.String str21 = explodedArchive20.toString();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive22 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file23 = explodedArchive22.root;
        java.io.File file24 = null;
        explodedArchive22.manifestFile = file24;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive26 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest27 = explodedArchive26.manifest;
        explodedArchive26.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive30 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest31 = explodedArchive30.manifest;
        explodedArchive30.recursive = false;
        java.util.jar.Manifest manifest34 = explodedArchive30.manifest;
        java.io.File file35 = explodedArchive30.manifestFile;
        java.io.File file36 = null;
        java.io.File file37 = explodedArchive30.getManifestFile(file36);
        explodedArchive26.manifestFile = file36;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive39 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest40 = explodedArchive39.manifest;
        explodedArchive39.recursive = false;
        java.util.jar.Manifest manifest43 = explodedArchive39.manifest;
        java.io.File file44 = explodedArchive39.manifestFile;
        java.io.File file45 = null;
        java.io.File file46 = explodedArchive39.getManifestFile(file45);
        explodedArchive26.manifestFile = file46;
        java.io.File file48 = explodedArchive22.getManifestFile(file46);
        java.io.File file49 = explodedArchive20.getManifestFile(file46);
        fileEntryIterator17.root = file46;
        fileEntryIterator0.current = file46;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive52 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file53 = explodedArchive52.root;
        java.io.File file54 = null;
        explodedArchive52.manifestFile = file54;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive56 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest57 = explodedArchive56.manifest;
        explodedArchive56.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive60 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest61 = explodedArchive60.manifest;
        explodedArchive60.recursive = false;
        java.util.jar.Manifest manifest64 = explodedArchive60.manifest;
        java.io.File file65 = explodedArchive60.manifestFile;
        java.io.File file66 = null;
        java.io.File file67 = explodedArchive60.getManifestFile(file66);
        explodedArchive56.manifestFile = file66;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive69 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest70 = explodedArchive69.manifest;
        explodedArchive69.recursive = false;
        java.util.jar.Manifest manifest73 = explodedArchive69.manifest;
        java.io.File file74 = explodedArchive69.manifestFile;
        java.io.File file75 = null;
        java.io.File file76 = explodedArchive69.getManifestFile(file75);
        explodedArchive56.manifestFile = file76;
        java.io.File file78 = explodedArchive52.getManifestFile(file76);
        fileEntryIterator0.root = file78;
        java.io.File file80 = fileEntryIterator0.poll();
        boolean boolean81 = fileEntryIterator0.hasNext();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str21 + "' != '" + "exploded archive" + "'", str21.equals("exploded archive"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file37.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file37.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file46.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file46.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file48.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file48.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file49.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file49.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file67.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file67.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest73);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file76);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file76.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file76.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file78);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file78.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file78.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file80);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
    }

    @Test
    public void test0294() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0294");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        boolean boolean1 = fileEntryIterator0.hasNext();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator2 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator3 = entryComparator2.reversed();
        java.util.Comparator<java.io.File> fileComparator4 = fileComparator3.reversed();
        fileEntryIterator0.entryComparator = fileComparator4;
        java.util.Comparator<java.io.File> fileComparator6 = fileEntryIterator0.entryComparator;
        java.io.File file7 = fileEntryIterator0.current;
        java.util.Comparator<java.io.File> fileComparator8 = fileEntryIterator0.entryComparator;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive9 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest10 = explodedArchive9.manifest;
        explodedArchive9.recursive = false;
        java.io.File file13 = null;
        explodedArchive9.root = file13;
        java.io.File file15 = explodedArchive9.root;
        java.util.jar.Manifest manifest16 = null;
        explodedArchive9.manifest = manifest16;
        explodedArchive9.recursive = false;
        java.util.jar.Manifest manifest20 = null;
        explodedArchive9.manifest = manifest20;
        java.lang.String str22 = explodedArchive9.toString();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive23 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.lang.String str24 = explodedArchive23.toString();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive25 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file26 = explodedArchive25.root;
        java.io.File file27 = null;
        explodedArchive25.manifestFile = file27;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive29 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest30 = explodedArchive29.manifest;
        explodedArchive29.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive33 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest34 = explodedArchive33.manifest;
        explodedArchive33.recursive = false;
        java.util.jar.Manifest manifest37 = explodedArchive33.manifest;
        java.io.File file38 = explodedArchive33.manifestFile;
        java.io.File file39 = null;
        java.io.File file40 = explodedArchive33.getManifestFile(file39);
        explodedArchive29.manifestFile = file39;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive42 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest43 = explodedArchive42.manifest;
        explodedArchive42.recursive = false;
        java.util.jar.Manifest manifest46 = explodedArchive42.manifest;
        java.io.File file47 = explodedArchive42.manifestFile;
        java.io.File file48 = null;
        java.io.File file49 = explodedArchive42.getManifestFile(file48);
        explodedArchive29.manifestFile = file49;
        java.io.File file51 = explodedArchive25.getManifestFile(file49);
        java.io.File file52 = explodedArchive23.getManifestFile(file49);
        java.io.File file53 = explodedArchive9.getManifestFile(file49);
        fileEntryIterator0.current = file53;
        // The following exception was thrown during execution in test generation
        try {
            fileEntryIterator0.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: remove");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str22 + "' != '" + "exploded archive" + "'", str22.equals("exploded archive"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str24 + "' != '" + "exploded archive" + "'", str24.equals("exploded archive"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file40.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file40.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file49.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file49.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file51.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file51.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file52.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file52.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file53.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file53.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
    }

    @Test
    public void test0295() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0295");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file1 = null;
        fileEntryIterator0.current = file1;
        fileEntryIterator0.recursive = true;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator5 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file6 = null;
        fileEntryIterator5.current = file6;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive8 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest9 = explodedArchive8.manifest;
        explodedArchive8.recursive = false;
        java.util.jar.Manifest manifest12 = explodedArchive8.manifest;
        java.io.File file13 = explodedArchive8.manifestFile;
        java.io.File file14 = null;
        java.io.File file15 = explodedArchive8.getManifestFile(file14);
        java.util.Iterator<java.io.File> fileItor16 = fileEntryIterator5.listFiles(file15);
        java.io.File file17 = fileEntryIterator5.root;
        java.io.File file18 = fileEntryIterator5.root;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator19 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file20 = null;
        fileEntryIterator19.current = file20;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive22 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest23 = explodedArchive22.manifest;
        explodedArchive22.recursive = false;
        java.util.jar.Manifest manifest26 = explodedArchive22.manifest;
        java.io.File file27 = explodedArchive22.manifestFile;
        java.io.File file28 = null;
        java.io.File file29 = explodedArchive22.getManifestFile(file28);
        java.util.Iterator<java.io.File> fileItor30 = fileEntryIterator19.listFiles(file29);
        java.util.ArrayDeque<java.util.Iterator<java.io.File>> fileItorQueue31 = new java.util.ArrayDeque<java.util.Iterator<java.io.File>>();
        boolean boolean32 = fileItorQueue31.add(fileItor30);
        fileEntryIterator5.stack = fileItorQueue31;
        java.util.Deque<java.util.Iterator<java.io.File>> fileItorQueue34 = fileEntryIterator5.stack;
        fileEntryIterator0.stack = fileItorQueue34;
        java.util.Comparator<java.io.File> fileComparator36 = fileEntryIterator0.entryComparator;
        java.io.File file37 = fileEntryIterator0.current;
        boolean boolean38 = fileEntryIterator0.hasNext();
        boolean boolean39 = fileEntryIterator0.hasNext();
        java.io.File file40 = fileEntryIterator0.poll();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file15.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file15.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file29.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file29.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItorQueue34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file40);
    }

    @Test
    public void test0296() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0296");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file1 = null;
        fileEntryIterator0.current = file1;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive3 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest4 = explodedArchive3.manifest;
        explodedArchive3.recursive = false;
        java.util.jar.Manifest manifest7 = explodedArchive3.manifest;
        java.io.File file8 = explodedArchive3.manifestFile;
        java.io.File file9 = null;
        java.io.File file10 = explodedArchive3.getManifestFile(file9);
        java.util.Iterator<java.io.File> fileItor11 = fileEntryIterator0.listFiles(file10);
        java.io.File file12 = fileEntryIterator0.root;
        java.io.File file13 = fileEntryIterator0.root;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass14 = file13.getClass();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file13);
    }

    @Test
    public void test0297() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0297");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest1 = explodedArchive0.manifest;
        explodedArchive0.recursive = false;
        java.io.File file4 = null;
        explodedArchive0.root = file4;
        java.io.File file6 = explodedArchive0.root;
        java.util.jar.Manifest manifest7 = null;
        explodedArchive0.manifest = manifest7;
        explodedArchive0.recursive = false;
        java.util.jar.Manifest manifest11 = null;
        explodedArchive0.manifest = manifest11;
        java.lang.String str13 = explodedArchive0.toString();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive14 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.lang.String str15 = explodedArchive14.toString();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive16 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file17 = explodedArchive16.root;
        java.io.File file18 = null;
        explodedArchive16.manifestFile = file18;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive20 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest21 = explodedArchive20.manifest;
        explodedArchive20.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive24 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest25 = explodedArchive24.manifest;
        explodedArchive24.recursive = false;
        java.util.jar.Manifest manifest28 = explodedArchive24.manifest;
        java.io.File file29 = explodedArchive24.manifestFile;
        java.io.File file30 = null;
        java.io.File file31 = explodedArchive24.getManifestFile(file30);
        explodedArchive20.manifestFile = file30;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive33 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest34 = explodedArchive33.manifest;
        explodedArchive33.recursive = false;
        java.util.jar.Manifest manifest37 = explodedArchive33.manifest;
        java.io.File file38 = explodedArchive33.manifestFile;
        java.io.File file39 = null;
        java.io.File file40 = explodedArchive33.getManifestFile(file39);
        explodedArchive20.manifestFile = file40;
        java.io.File file42 = explodedArchive16.getManifestFile(file40);
        java.io.File file43 = explodedArchive14.getManifestFile(file40);
        java.io.File file44 = explodedArchive0.getManifestFile(file40);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Spliterator<org.springframework.boot.loader.archive.Archive.Entry> entrySpliterator45 = explodedArchive0.spliterator();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str13 + "' != '" + "exploded archive" + "'", str13.equals("exploded archive"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str15 + "' != '" + "exploded archive" + "'", str15.equals("exploded archive"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file31.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file31.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file40.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file40.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file42.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file42.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file43.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file43.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file44.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file44.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
    }

    @Test
    public void test0298() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0298");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        boolean boolean1 = fileEntryIterator0.hasNext();
        java.io.File file2 = fileEntryIterator0.root;
        boolean boolean3 = fileEntryIterator0.hasNext();
        java.util.Comparator<java.io.File> fileComparator4 = fileEntryIterator0.entryComparator;
        boolean boolean5 = fileEntryIterator0.recursive;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test0299() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0299");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntry fileEntry0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntry();
        java.lang.String str1 = fileEntry0.getName();
        java.io.File file2 = fileEntry0.getFile();
        java.lang.String str3 = fileEntry0.getName();
        java.lang.String str4 = fileEntry0.getName();
        fileEntry0.name = "hi!";
        java.io.File file7 = fileEntry0.file;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file7);
    }

    @Test
    public void test0300() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0300");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file1 = null;
        fileEntryIterator0.current = file1;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive3 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest4 = explodedArchive3.manifest;
        explodedArchive3.recursive = false;
        java.util.jar.Manifest manifest7 = explodedArchive3.manifest;
        java.io.File file8 = explodedArchive3.manifestFile;
        java.io.File file9 = null;
        java.io.File file10 = explodedArchive3.getManifestFile(file9);
        java.util.Iterator<java.io.File> fileItor11 = fileEntryIterator0.listFiles(file10);
        boolean boolean12 = fileEntryIterator0.hasNext();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator13 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator14 = entryComparator13.reversed();
        java.util.Comparator<java.io.File> fileComparator15 = entryComparator13.reversed();
        fileEntryIterator0.entryComparator = fileComparator15;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator17 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file18 = null;
        fileEntryIterator17.current = file18;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive20 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest21 = explodedArchive20.manifest;
        explodedArchive20.recursive = false;
        java.util.jar.Manifest manifest24 = explodedArchive20.manifest;
        java.io.File file25 = explodedArchive20.manifestFile;
        java.io.File file26 = null;
        java.io.File file27 = explodedArchive20.getManifestFile(file26);
        java.util.Iterator<java.io.File> fileItor28 = fileEntryIterator17.listFiles(file27);
        java.io.File file29 = fileEntryIterator17.root;
        java.io.File file30 = fileEntryIterator17.poll();
        java.util.Comparator<java.io.File> fileComparator31 = fileEntryIterator17.entryComparator;
        java.util.Deque<java.util.Iterator<java.io.File>> fileItorQueue32 = fileEntryIterator17.stack;
        java.util.Deque<java.util.Iterator<java.io.File>> fileItorQueue33 = fileEntryIterator17.stack;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntry fileEntry34 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntry();
        java.lang.String str35 = fileEntry34.name;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator36 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file37 = null;
        fileEntryIterator36.current = file37;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive39 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.lang.String str40 = explodedArchive39.toString();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive41 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file42 = explodedArchive41.root;
        java.io.File file43 = null;
        explodedArchive41.manifestFile = file43;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive45 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest46 = explodedArchive45.manifest;
        explodedArchive45.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive49 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest50 = explodedArchive49.manifest;
        explodedArchive49.recursive = false;
        java.util.jar.Manifest manifest53 = explodedArchive49.manifest;
        java.io.File file54 = explodedArchive49.manifestFile;
        java.io.File file55 = null;
        java.io.File file56 = explodedArchive49.getManifestFile(file55);
        explodedArchive45.manifestFile = file55;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive58 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest59 = explodedArchive58.manifest;
        explodedArchive58.recursive = false;
        java.util.jar.Manifest manifest62 = explodedArchive58.manifest;
        java.io.File file63 = explodedArchive58.manifestFile;
        java.io.File file64 = null;
        java.io.File file65 = explodedArchive58.getManifestFile(file64);
        explodedArchive45.manifestFile = file65;
        java.io.File file67 = explodedArchive41.getManifestFile(file65);
        java.io.File file68 = explodedArchive39.getManifestFile(file65);
        fileEntryIterator36.root = file65;
        fileEntry34.file = file65;
        java.util.Iterator<java.io.File> fileItor71 = fileEntryIterator17.listFiles(file65);
        java.util.Iterator<java.io.File> fileItor72 = fileEntryIterator0.listFiles(file65);
        java.io.File file73 = fileEntryIterator0.current;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file27.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file27.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItorQueue32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItorQueue33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str40 + "' != '" + "exploded archive" + "'", str40.equals("exploded archive"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file56.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file56.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file65.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file65.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file67.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file67.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file68.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file68.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file73);
    }

    @Test
    public void test0301() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0301");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest1 = explodedArchive0.manifest;
        java.util.jar.Manifest manifest2 = null;
        explodedArchive0.manifest = manifest2;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator4 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        boolean boolean5 = fileEntryIterator4.hasNext();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator6 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator7 = entryComparator6.reversed();
        java.util.Comparator<java.io.File> fileComparator8 = fileComparator7.reversed();
        fileEntryIterator4.entryComparator = fileComparator8;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive10 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file11 = explodedArchive10.root;
        java.io.File file12 = null;
        explodedArchive10.manifestFile = file12;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive14 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest15 = explodedArchive14.manifest;
        explodedArchive14.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive18 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest19 = explodedArchive18.manifest;
        explodedArchive18.recursive = false;
        java.util.jar.Manifest manifest22 = explodedArchive18.manifest;
        java.io.File file23 = explodedArchive18.manifestFile;
        java.io.File file24 = null;
        java.io.File file25 = explodedArchive18.getManifestFile(file24);
        explodedArchive14.manifestFile = file24;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive27 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest28 = explodedArchive27.manifest;
        explodedArchive27.recursive = false;
        java.util.jar.Manifest manifest31 = explodedArchive27.manifest;
        java.io.File file32 = explodedArchive27.manifestFile;
        java.io.File file33 = null;
        java.io.File file34 = explodedArchive27.getManifestFile(file33);
        explodedArchive14.manifestFile = file34;
        java.io.File file36 = explodedArchive10.getManifestFile(file34);
        java.util.Iterator<java.io.File> fileItor37 = fileEntryIterator4.listFiles(file36);
        java.io.File file38 = explodedArchive0.getManifestFile(file36);
        java.lang.Class<?> wildcardClass39 = explodedArchive0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file25.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file25.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file34.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file34.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file36.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file36.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file38.getParent(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file38.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass39);
    }

    @Test
    public void test0302() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0302");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest1 = explodedArchive0.manifest;
        explodedArchive0.recursive = false;
        java.util.jar.Manifest manifest4 = explodedArchive0.manifest;
        java.util.jar.Manifest manifest5 = null;
        explodedArchive0.manifest = manifest5;
        java.lang.String str7 = explodedArchive0.toString();
        // The following exception was thrown during execution in test generation
        try {
            java.util.jar.Manifest manifest8 = explodedArchive0.getManifest();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str7 + "' != '" + "exploded archive" + "'", str7.equals("exploded archive"));
    }

    @Test
    public void test0303() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0303");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntry fileEntry0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntry();
        java.lang.String str1 = fileEntry0.getName();
        fileEntry0.name = "hi!";
        java.lang.String str4 = fileEntry0.name;
        java.io.File file5 = fileEntry0.getFile();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str4 + "' != '" + "hi!" + "'", str4.equals("hi!"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file5);
    }

    @Test
    public void test0304() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0304");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest1 = explodedArchive0.manifest;
        java.util.jar.Manifest manifest2 = null;
        explodedArchive0.manifest = manifest2;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntry fileEntry4 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntry();
        java.lang.String str5 = fileEntry4.name;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator6 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file7 = null;
        fileEntryIterator6.current = file7;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive9 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest10 = explodedArchive9.manifest;
        explodedArchive9.recursive = false;
        java.util.jar.Manifest manifest13 = explodedArchive9.manifest;
        java.io.File file14 = explodedArchive9.manifestFile;
        java.io.File file15 = null;
        java.io.File file16 = explodedArchive9.getManifestFile(file15);
        java.util.Iterator<java.io.File> fileItor17 = fileEntryIterator6.listFiles(file16);
        java.io.File file18 = fileEntryIterator6.current;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator19 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file20 = null;
        fileEntryIterator19.current = file20;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive22 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest23 = explodedArchive22.manifest;
        explodedArchive22.recursive = false;
        java.util.jar.Manifest manifest26 = explodedArchive22.manifest;
        java.io.File file27 = explodedArchive22.manifestFile;
        java.io.File file28 = null;
        java.io.File file29 = explodedArchive22.getManifestFile(file28);
        java.util.Iterator<java.io.File> fileItor30 = fileEntryIterator19.listFiles(file29);
        java.util.ArrayDeque<java.util.Iterator<java.io.File>> fileItorQueue31 = new java.util.ArrayDeque<java.util.Iterator<java.io.File>>();
        boolean boolean32 = fileItorQueue31.add(fileItor30);
        fileEntryIterator6.stack = fileItorQueue31;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive34 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest35 = explodedArchive34.manifest;
        explodedArchive34.recursive = false;
        java.io.File file38 = null;
        explodedArchive34.root = file38;
        java.io.File file40 = explodedArchive34.root;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive41 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest42 = explodedArchive41.manifest;
        explodedArchive41.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive45 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest46 = explodedArchive45.manifest;
        explodedArchive45.recursive = false;
        java.util.jar.Manifest manifest49 = explodedArchive45.manifest;
        java.io.File file50 = explodedArchive45.manifestFile;
        java.io.File file51 = null;
        java.io.File file52 = explodedArchive45.getManifestFile(file51);
        explodedArchive41.manifestFile = file51;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive54 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest55 = explodedArchive54.manifest;
        explodedArchive54.recursive = false;
        java.util.jar.Manifest manifest58 = explodedArchive54.manifest;
        java.io.File file59 = explodedArchive54.manifestFile;
        java.io.File file60 = null;
        java.io.File file61 = explodedArchive54.getManifestFile(file60);
        explodedArchive41.manifestFile = file61;
        java.io.File file63 = explodedArchive34.getManifestFile(file61);
        fileEntryIterator6.root = file61;
        fileEntry4.file = file61;
        java.io.File file66 = explodedArchive0.getManifestFile(file61);
        java.util.jar.Manifest manifest67 = null;
        explodedArchive0.manifest = manifest67;
        java.io.File file69 = null;
        java.io.File file70 = explodedArchive0.getManifestFile(file69);
        explodedArchive0.recursive = true;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file16.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file16.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file29.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file29.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file52.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file52.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file61.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file61.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file63.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file63.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file66.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file66.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file70.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file70.toString(), "META-INF/MANIFEST.MF");
    }

    @Test
    public void test0305() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0305");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        boolean boolean1 = fileEntryIterator0.hasNext();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator2 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator3 = entryComparator2.reversed();
        java.util.Comparator<java.io.File> fileComparator4 = fileComparator3.reversed();
        fileEntryIterator0.entryComparator = fileComparator4;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator6 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        boolean boolean7 = fileEntryIterator6.hasNext();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator8 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator9 = entryComparator8.reversed();
        java.util.Comparator<java.io.File> fileComparator10 = fileComparator9.reversed();
        fileEntryIterator6.entryComparator = fileComparator10;
        java.util.Comparator<java.io.File> fileComparator12 = fileEntryIterator6.entryComparator;
        java.util.Comparator<java.io.File> fileComparator13 = fileComparator4.thenComparing(fileComparator12);
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator14 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file15 = null;
        fileEntryIterator14.current = file15;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive17 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest18 = explodedArchive17.manifest;
        explodedArchive17.recursive = false;
        java.util.jar.Manifest manifest21 = explodedArchive17.manifest;
        java.io.File file22 = explodedArchive17.manifestFile;
        java.io.File file23 = null;
        java.io.File file24 = explodedArchive17.getManifestFile(file23);
        java.util.Iterator<java.io.File> fileItor25 = fileEntryIterator14.listFiles(file24);
        java.io.File file26 = fileEntryIterator14.root;
        java.io.File file27 = fileEntryIterator14.root;
        java.io.File file28 = fileEntryIterator14.current;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator29 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        boolean boolean30 = fileEntryIterator29.hasNext();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator31 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator32 = entryComparator31.reversed();
        java.util.Comparator<java.io.File> fileComparator33 = fileComparator32.reversed();
        fileEntryIterator29.entryComparator = fileComparator33;
        java.util.Comparator<java.io.File> fileComparator35 = fileEntryIterator29.entryComparator;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator36 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator37 = entryComparator36.reversed();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator38 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator39 = entryComparator38.reversed();
        java.util.Comparator<java.io.File> fileComparator40 = entryComparator36.thenComparing(fileComparator39);
        java.util.Comparator<java.io.File> fileComparator41 = fileComparator35.thenComparing(fileComparator39);
        fileEntryIterator14.entryComparator = fileComparator35;
        java.util.Comparator<java.io.File> fileComparator43 = fileComparator35.reversed();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator44 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        boolean boolean45 = fileEntryIterator44.hasNext();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator46 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator47 = entryComparator46.reversed();
        java.util.Comparator<java.io.File> fileComparator48 = fileComparator47.reversed();
        fileEntryIterator44.entryComparator = fileComparator48;
        java.util.Comparator<java.io.File> fileComparator50 = fileComparator35.thenComparing(fileComparator48);
        java.util.Comparator<java.io.File> fileComparator51 = fileComparator12.thenComparing(fileComparator50);
        java.util.Comparator<java.io.File> fileComparator52 = fileComparator51.reversed();
        java.util.Comparator<java.io.File> fileComparator53 = fileComparator52.reversed();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file24.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file24.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator53);
    }

    @Test
    public void test0306() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0306");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file1 = null;
        fileEntryIterator0.current = file1;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive3 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.lang.String str4 = explodedArchive3.toString();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive5 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file6 = explodedArchive5.root;
        java.io.File file7 = null;
        explodedArchive5.manifestFile = file7;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive9 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest10 = explodedArchive9.manifest;
        explodedArchive9.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive13 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest14 = explodedArchive13.manifest;
        explodedArchive13.recursive = false;
        java.util.jar.Manifest manifest17 = explodedArchive13.manifest;
        java.io.File file18 = explodedArchive13.manifestFile;
        java.io.File file19 = null;
        java.io.File file20 = explodedArchive13.getManifestFile(file19);
        explodedArchive9.manifestFile = file19;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive22 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest23 = explodedArchive22.manifest;
        explodedArchive22.recursive = false;
        java.util.jar.Manifest manifest26 = explodedArchive22.manifest;
        java.io.File file27 = explodedArchive22.manifestFile;
        java.io.File file28 = null;
        java.io.File file29 = explodedArchive22.getManifestFile(file28);
        explodedArchive9.manifestFile = file29;
        java.io.File file31 = explodedArchive5.getManifestFile(file29);
        java.io.File file32 = explodedArchive3.getManifestFile(file29);
        fileEntryIterator0.root = file29;
        java.io.File file34 = fileEntryIterator0.poll();
        java.io.File file35 = fileEntryIterator0.root;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator36 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file37 = null;
        fileEntryIterator36.current = file37;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive39 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest40 = explodedArchive39.manifest;
        explodedArchive39.recursive = false;
        java.util.jar.Manifest manifest43 = explodedArchive39.manifest;
        java.io.File file44 = explodedArchive39.manifestFile;
        java.io.File file45 = null;
        java.io.File file46 = explodedArchive39.getManifestFile(file45);
        java.util.Iterator<java.io.File> fileItor47 = fileEntryIterator36.listFiles(file46);
        java.io.File file48 = fileEntryIterator36.current;
        java.util.Deque<java.util.Iterator<java.io.File>> fileItorQueue49 = fileEntryIterator36.stack;
        fileEntryIterator0.stack = fileItorQueue49;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str4 + "' != '" + "exploded archive" + "'", str4.equals("exploded archive"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file20.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file20.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file29.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file29.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file31.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file31.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file32.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file32.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file35.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file35.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file46.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file46.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItorQueue49);
    }

    @Test
    public void test0307() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0307");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        boolean boolean1 = explodedArchive0.recursive;
        java.lang.String str2 = explodedArchive0.toString();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator3 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file4 = null;
        fileEntryIterator3.current = file4;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive6 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest7 = explodedArchive6.manifest;
        explodedArchive6.recursive = false;
        java.util.jar.Manifest manifest10 = explodedArchive6.manifest;
        java.io.File file11 = explodedArchive6.manifestFile;
        java.io.File file12 = null;
        java.io.File file13 = explodedArchive6.getManifestFile(file12);
        java.util.Iterator<java.io.File> fileItor14 = fileEntryIterator3.listFiles(file13);
        java.io.File file15 = fileEntryIterator3.current;
        boolean boolean16 = fileEntryIterator3.recursive;
        java.io.File file17 = fileEntryIterator3.poll();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator18 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file19 = null;
        fileEntryIterator18.current = file19;
        fileEntryIterator18.recursive = true;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator23 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator24 = entryComparator23.reversed();
        java.util.Comparator<java.io.File> fileComparator25 = entryComparator23.reversed();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive26 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest27 = explodedArchive26.manifest;
        explodedArchive26.recursive = false;
        java.util.jar.Manifest manifest30 = explodedArchive26.manifest;
        java.io.File file31 = explodedArchive26.manifestFile;
        java.io.File file32 = null;
        java.io.File file33 = explodedArchive26.getManifestFile(file32);
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive34 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest35 = explodedArchive34.manifest;
        explodedArchive34.recursive = false;
        java.io.File file38 = null;
        explodedArchive34.root = file38;
        java.io.File file40 = explodedArchive34.root;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive41 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest42 = explodedArchive41.manifest;
        explodedArchive41.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive45 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest46 = explodedArchive45.manifest;
        explodedArchive45.recursive = false;
        java.util.jar.Manifest manifest49 = explodedArchive45.manifest;
        java.io.File file50 = explodedArchive45.manifestFile;
        java.io.File file51 = null;
        java.io.File file52 = explodedArchive45.getManifestFile(file51);
        explodedArchive41.manifestFile = file51;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive54 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest55 = explodedArchive54.manifest;
        explodedArchive54.recursive = false;
        java.util.jar.Manifest manifest58 = explodedArchive54.manifest;
        java.io.File file59 = explodedArchive54.manifestFile;
        java.io.File file60 = null;
        java.io.File file61 = explodedArchive54.getManifestFile(file60);
        explodedArchive41.manifestFile = file61;
        java.io.File file63 = explodedArchive34.getManifestFile(file61);
        int int64 = entryComparator23.compare(file33, file61);
        java.util.Iterator<java.io.File> fileItor65 = fileEntryIterator18.listFiles(file33);
        fileEntryIterator3.current = file33;
        explodedArchive0.root = file33;
        // The following exception was thrown during execution in test generation
        try {
            org.springframework.boot.loader.archive.ExplodedArchive explodedArchive69 = new org.springframework.boot.loader.archive.ExplodedArchive(file33, true);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid source folder META-INF/MANIFEST.MF");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str2 + "' != '" + "exploded archive" + "'", str2.equals("exploded archive"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file13.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file13.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file33.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file33.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file52.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file52.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file61.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file61.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file63.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file63.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor65);
    }

    @Test
    public void test0308() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0308");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest1 = explodedArchive0.manifest;
        java.util.jar.Manifest manifest2 = null;
        explodedArchive0.manifest = manifest2;
        java.io.File file4 = explodedArchive0.root;
        // The following exception was thrown during execution in test generation
        try {
            java.util.jar.Manifest manifest5 = explodedArchive0.getManifest();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file4);
    }

    @Test
    public void test0309() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0309");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest1 = explodedArchive0.manifest;
        explodedArchive0.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive4 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest5 = explodedArchive4.manifest;
        explodedArchive4.recursive = false;
        java.util.jar.Manifest manifest8 = explodedArchive4.manifest;
        java.io.File file9 = explodedArchive4.manifestFile;
        java.io.File file10 = null;
        java.io.File file11 = explodedArchive4.getManifestFile(file10);
        explodedArchive0.manifestFile = file10;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive13 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest14 = explodedArchive13.manifest;
        explodedArchive13.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive17 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest18 = explodedArchive17.manifest;
        explodedArchive17.recursive = false;
        java.util.jar.Manifest manifest21 = explodedArchive17.manifest;
        java.io.File file22 = explodedArchive17.manifestFile;
        java.io.File file23 = null;
        java.io.File file24 = explodedArchive17.getManifestFile(file23);
        explodedArchive13.manifestFile = file23;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive26 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest27 = explodedArchive26.manifest;
        explodedArchive26.recursive = false;
        java.util.jar.Manifest manifest30 = explodedArchive26.manifest;
        java.io.File file31 = explodedArchive26.manifestFile;
        java.io.File file32 = null;
        java.io.File file33 = explodedArchive26.getManifestFile(file32);
        explodedArchive13.manifestFile = file33;
        explodedArchive0.root = file33;
        // The following exception was thrown during execution in test generation
        try {
            org.springframework.boot.loader.archive.ExplodedArchive explodedArchive37 = new org.springframework.boot.loader.archive.ExplodedArchive(file33, true);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid source folder META-INF/MANIFEST.MF");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file11.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file11.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file24.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file24.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file33.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file33.toString(), "META-INF/MANIFEST.MF");
    }

    @Test
    public void test0310() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0310");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        boolean boolean1 = fileEntryIterator0.recursive;
        java.util.Deque<java.util.Iterator<java.io.File>> fileItorQueue2 = fileEntryIterator0.stack;
        // The following exception was thrown during execution in test generation
        try {
            fileEntryIterator0.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: remove");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItorQueue2);
    }

    @Test
    public void test0311() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0311");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest1 = explodedArchive0.manifest;
        explodedArchive0.recursive = false;
        java.io.File file4 = null;
        explodedArchive0.root = file4;
        java.io.File file6 = explodedArchive0.root;
        java.lang.String str7 = explodedArchive0.toString();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntry fileEntry8 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntry();
        java.io.File file9 = fileEntry8.file;
        java.lang.String str10 = fileEntry8.name;
        java.io.File file11 = fileEntry8.file;
        java.io.File file12 = fileEntry8.file;
        java.lang.String str13 = fileEntry8.name;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive14 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.lang.String str15 = explodedArchive14.toString();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive16 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file17 = explodedArchive16.root;
        java.io.File file18 = null;
        explodedArchive16.manifestFile = file18;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive20 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest21 = explodedArchive20.manifest;
        explodedArchive20.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive24 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest25 = explodedArchive24.manifest;
        explodedArchive24.recursive = false;
        java.util.jar.Manifest manifest28 = explodedArchive24.manifest;
        java.io.File file29 = explodedArchive24.manifestFile;
        java.io.File file30 = null;
        java.io.File file31 = explodedArchive24.getManifestFile(file30);
        explodedArchive20.manifestFile = file30;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive33 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest34 = explodedArchive33.manifest;
        explodedArchive33.recursive = false;
        java.util.jar.Manifest manifest37 = explodedArchive33.manifest;
        java.io.File file38 = explodedArchive33.manifestFile;
        java.io.File file39 = null;
        java.io.File file40 = explodedArchive33.getManifestFile(file39);
        explodedArchive20.manifestFile = file40;
        java.io.File file42 = explodedArchive16.getManifestFile(file40);
        java.io.File file43 = explodedArchive14.getManifestFile(file40);
        fileEntry8.file = file40;
        java.io.File file45 = fileEntry8.getFile();
        // The following exception was thrown during execution in test generation
        try {
            org.springframework.boot.loader.archive.Archive archive46 = explodedArchive0.getNestedArchive((org.springframework.boot.loader.archive.Archive.Entry) fileEntry8);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: File must exist");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str7 + "' != '" + "exploded archive" + "'", str7.equals("exploded archive"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str15 + "' != '" + "exploded archive" + "'", str15.equals("exploded archive"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file31.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file31.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file40.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file40.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file42.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file42.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file43.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file43.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file45.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file45.toString(), "META-INF/MANIFEST.MF");
    }

    @Test
    public void test0312() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0312");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest1 = explodedArchive0.manifest;
        java.util.jar.Manifest manifest2 = null;
        explodedArchive0.manifest = manifest2;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntry fileEntry4 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntry();
        java.lang.String str5 = fileEntry4.name;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator6 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file7 = null;
        fileEntryIterator6.current = file7;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive9 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest10 = explodedArchive9.manifest;
        explodedArchive9.recursive = false;
        java.util.jar.Manifest manifest13 = explodedArchive9.manifest;
        java.io.File file14 = explodedArchive9.manifestFile;
        java.io.File file15 = null;
        java.io.File file16 = explodedArchive9.getManifestFile(file15);
        java.util.Iterator<java.io.File> fileItor17 = fileEntryIterator6.listFiles(file16);
        java.io.File file18 = fileEntryIterator6.current;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator19 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file20 = null;
        fileEntryIterator19.current = file20;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive22 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest23 = explodedArchive22.manifest;
        explodedArchive22.recursive = false;
        java.util.jar.Manifest manifest26 = explodedArchive22.manifest;
        java.io.File file27 = explodedArchive22.manifestFile;
        java.io.File file28 = null;
        java.io.File file29 = explodedArchive22.getManifestFile(file28);
        java.util.Iterator<java.io.File> fileItor30 = fileEntryIterator19.listFiles(file29);
        java.util.ArrayDeque<java.util.Iterator<java.io.File>> fileItorQueue31 = new java.util.ArrayDeque<java.util.Iterator<java.io.File>>();
        boolean boolean32 = fileItorQueue31.add(fileItor30);
        fileEntryIterator6.stack = fileItorQueue31;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive34 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest35 = explodedArchive34.manifest;
        explodedArchive34.recursive = false;
        java.io.File file38 = null;
        explodedArchive34.root = file38;
        java.io.File file40 = explodedArchive34.root;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive41 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest42 = explodedArchive41.manifest;
        explodedArchive41.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive45 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest46 = explodedArchive45.manifest;
        explodedArchive45.recursive = false;
        java.util.jar.Manifest manifest49 = explodedArchive45.manifest;
        java.io.File file50 = explodedArchive45.manifestFile;
        java.io.File file51 = null;
        java.io.File file52 = explodedArchive45.getManifestFile(file51);
        explodedArchive41.manifestFile = file51;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive54 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest55 = explodedArchive54.manifest;
        explodedArchive54.recursive = false;
        java.util.jar.Manifest manifest58 = explodedArchive54.manifest;
        java.io.File file59 = explodedArchive54.manifestFile;
        java.io.File file60 = null;
        java.io.File file61 = explodedArchive54.getManifestFile(file60);
        explodedArchive41.manifestFile = file61;
        java.io.File file63 = explodedArchive34.getManifestFile(file61);
        fileEntryIterator6.root = file61;
        fileEntry4.file = file61;
        java.io.File file66 = explodedArchive0.getManifestFile(file61);
        java.util.jar.Manifest manifest67 = null;
        explodedArchive0.manifest = manifest67;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Spliterator<org.springframework.boot.loader.archive.Archive.Entry> entrySpliterator69 = explodedArchive0.spliterator();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file16.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file16.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file29.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file29.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file52.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file52.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file61.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file61.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file63.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file63.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file66.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file66.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
    }

    @Test
    public void test0313() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0313");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file1 = null;
        fileEntryIterator0.current = file1;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive3 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest4 = explodedArchive3.manifest;
        explodedArchive3.recursive = false;
        java.util.jar.Manifest manifest7 = explodedArchive3.manifest;
        java.io.File file8 = explodedArchive3.manifestFile;
        java.io.File file9 = null;
        java.io.File file10 = explodedArchive3.getManifestFile(file9);
        java.util.Iterator<java.io.File> fileItor11 = fileEntryIterator0.listFiles(file10);
        java.io.File file12 = fileEntryIterator0.root;
        java.io.File file13 = fileEntryIterator0.root;
        java.util.Deque<java.util.Iterator<java.io.File>> fileItorQueue14 = fileEntryIterator0.stack;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator15 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file16 = null;
        fileEntryIterator15.current = file16;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive18 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest19 = explodedArchive18.manifest;
        explodedArchive18.recursive = false;
        java.util.jar.Manifest manifest22 = explodedArchive18.manifest;
        java.io.File file23 = explodedArchive18.manifestFile;
        java.io.File file24 = null;
        java.io.File file25 = explodedArchive18.getManifestFile(file24);
        java.util.Iterator<java.io.File> fileItor26 = fileEntryIterator15.listFiles(file25);
        boolean boolean27 = fileEntryIterator15.hasNext();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator28 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator29 = entryComparator28.reversed();
        java.util.Comparator<java.io.File> fileComparator30 = entryComparator28.reversed();
        fileEntryIterator15.entryComparator = fileComparator30;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator32 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file33 = null;
        fileEntryIterator32.current = file33;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive35 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.lang.String str36 = explodedArchive35.toString();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive37 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file38 = explodedArchive37.root;
        java.io.File file39 = null;
        explodedArchive37.manifestFile = file39;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive41 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest42 = explodedArchive41.manifest;
        explodedArchive41.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive45 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest46 = explodedArchive45.manifest;
        explodedArchive45.recursive = false;
        java.util.jar.Manifest manifest49 = explodedArchive45.manifest;
        java.io.File file50 = explodedArchive45.manifestFile;
        java.io.File file51 = null;
        java.io.File file52 = explodedArchive45.getManifestFile(file51);
        explodedArchive41.manifestFile = file51;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive54 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest55 = explodedArchive54.manifest;
        explodedArchive54.recursive = false;
        java.util.jar.Manifest manifest58 = explodedArchive54.manifest;
        java.io.File file59 = explodedArchive54.manifestFile;
        java.io.File file60 = null;
        java.io.File file61 = explodedArchive54.getManifestFile(file60);
        explodedArchive41.manifestFile = file61;
        java.io.File file63 = explodedArchive37.getManifestFile(file61);
        java.io.File file64 = explodedArchive35.getManifestFile(file61);
        fileEntryIterator32.root = file61;
        fileEntryIterator15.current = file61;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive67 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file68 = explodedArchive67.root;
        java.io.File file69 = null;
        explodedArchive67.manifestFile = file69;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive71 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest72 = explodedArchive71.manifest;
        explodedArchive71.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive75 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest76 = explodedArchive75.manifest;
        explodedArchive75.recursive = false;
        java.util.jar.Manifest manifest79 = explodedArchive75.manifest;
        java.io.File file80 = explodedArchive75.manifestFile;
        java.io.File file81 = null;
        java.io.File file82 = explodedArchive75.getManifestFile(file81);
        explodedArchive71.manifestFile = file81;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive84 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest85 = explodedArchive84.manifest;
        explodedArchive84.recursive = false;
        java.util.jar.Manifest manifest88 = explodedArchive84.manifest;
        java.io.File file89 = explodedArchive84.manifestFile;
        java.io.File file90 = null;
        java.io.File file91 = explodedArchive84.getManifestFile(file90);
        explodedArchive71.manifestFile = file91;
        java.io.File file93 = explodedArchive67.getManifestFile(file91);
        fileEntryIterator15.root = file93;
        fileEntryIterator0.root = file93;
        java.util.Comparator<java.io.File> fileComparator96 = fileEntryIterator0.entryComparator;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItorQueue14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file25.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file25.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str36 + "' != '" + "exploded archive" + "'", str36.equals("exploded archive"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file52.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file52.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file61.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file61.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file63.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file63.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file64.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file64.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest76);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest79);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file80);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file82);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file82.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file82.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest85);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest88);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file89);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file91);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file91.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file91.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file93);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file93.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file93.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator96);
    }

    @Test
    public void test0314() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0314");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file1 = null;
        fileEntryIterator0.current = file1;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive3 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest4 = explodedArchive3.manifest;
        explodedArchive3.recursive = false;
        java.util.jar.Manifest manifest7 = explodedArchive3.manifest;
        java.io.File file8 = explodedArchive3.manifestFile;
        java.io.File file9 = null;
        java.io.File file10 = explodedArchive3.getManifestFile(file9);
        java.util.Iterator<java.io.File> fileItor11 = fileEntryIterator0.listFiles(file10);
        java.io.File file12 = fileEntryIterator0.current;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator13 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file14 = null;
        fileEntryIterator13.current = file14;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive16 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest17 = explodedArchive16.manifest;
        explodedArchive16.recursive = false;
        java.util.jar.Manifest manifest20 = explodedArchive16.manifest;
        java.io.File file21 = explodedArchive16.manifestFile;
        java.io.File file22 = null;
        java.io.File file23 = explodedArchive16.getManifestFile(file22);
        java.util.Iterator<java.io.File> fileItor24 = fileEntryIterator13.listFiles(file23);
        java.util.ArrayDeque<java.util.Iterator<java.io.File>> fileItorQueue25 = new java.util.ArrayDeque<java.util.Iterator<java.io.File>>();
        boolean boolean26 = fileItorQueue25.add(fileItor24);
        fileEntryIterator0.stack = fileItorQueue25;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive28 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest29 = explodedArchive28.manifest;
        explodedArchive28.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive32 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest33 = explodedArchive32.manifest;
        explodedArchive32.recursive = false;
        java.util.jar.Manifest manifest36 = explodedArchive32.manifest;
        java.io.File file37 = explodedArchive32.manifestFile;
        java.io.File file38 = null;
        java.io.File file39 = explodedArchive32.getManifestFile(file38);
        explodedArchive28.manifestFile = file38;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive41 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest42 = explodedArchive41.manifest;
        explodedArchive41.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive45 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest46 = explodedArchive45.manifest;
        explodedArchive45.recursive = false;
        java.util.jar.Manifest manifest49 = explodedArchive45.manifest;
        java.io.File file50 = explodedArchive45.manifestFile;
        java.io.File file51 = null;
        java.io.File file52 = explodedArchive45.getManifestFile(file51);
        explodedArchive41.manifestFile = file51;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive54 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest55 = explodedArchive54.manifest;
        explodedArchive54.recursive = false;
        java.util.jar.Manifest manifest58 = explodedArchive54.manifest;
        java.io.File file59 = explodedArchive54.manifestFile;
        java.io.File file60 = null;
        java.io.File file61 = explodedArchive54.getManifestFile(file60);
        explodedArchive41.manifestFile = file61;
        explodedArchive28.root = file61;
        java.util.Iterator<java.io.File> fileItor64 = fileEntryIterator0.listFiles(file61);
        java.io.File file65 = fileEntryIterator0.root;
        java.util.Deque<java.util.Iterator<java.io.File>> fileItorQueue66 = fileEntryIterator0.stack;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file23.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file23.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file39.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file39.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file52.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file52.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file61.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file61.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItorQueue66);
    }

    @Test
    public void test0315() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0315");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file1 = null;
        fileEntryIterator0.current = file1;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive3 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest4 = explodedArchive3.manifest;
        explodedArchive3.recursive = false;
        java.util.jar.Manifest manifest7 = explodedArchive3.manifest;
        java.io.File file8 = explodedArchive3.manifestFile;
        java.io.File file9 = null;
        java.io.File file10 = explodedArchive3.getManifestFile(file9);
        java.util.Iterator<java.io.File> fileItor11 = fileEntryIterator0.listFiles(file10);
        java.io.File file12 = fileEntryIterator0.root;
        java.io.File file13 = fileEntryIterator0.poll();
        java.util.Comparator<java.io.File> fileComparator14 = fileEntryIterator0.entryComparator;
        java.util.Deque<java.util.Iterator<java.io.File>> fileItorQueue15 = fileEntryIterator0.stack;
        java.util.Deque<java.util.Iterator<java.io.File>> fileItorQueue16 = fileEntryIterator0.stack;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive17 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest18 = explodedArchive17.manifest;
        explodedArchive17.recursive = false;
        java.io.File file21 = null;
        explodedArchive17.root = file21;
        java.io.File file23 = explodedArchive17.root;
        java.util.jar.Manifest manifest24 = null;
        explodedArchive17.manifest = manifest24;
        explodedArchive17.recursive = false;
        explodedArchive17.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive30 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest31 = explodedArchive30.manifest;
        explodedArchive30.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive34 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest35 = explodedArchive34.manifest;
        explodedArchive34.recursive = false;
        java.util.jar.Manifest manifest38 = explodedArchive34.manifest;
        java.io.File file39 = explodedArchive34.manifestFile;
        java.io.File file40 = null;
        java.io.File file41 = explodedArchive34.getManifestFile(file40);
        explodedArchive30.manifestFile = file40;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive43 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest44 = explodedArchive43.manifest;
        explodedArchive43.recursive = false;
        java.util.jar.Manifest manifest47 = explodedArchive43.manifest;
        java.io.File file48 = explodedArchive43.manifestFile;
        java.io.File file49 = null;
        java.io.File file50 = explodedArchive43.getManifestFile(file49);
        explodedArchive30.manifestFile = file50;
        explodedArchive17.manifestFile = file50;
        java.util.Iterator<java.io.File> fileItor53 = fileEntryIterator0.listFiles(file50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItorQueue15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItorQueue16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file41.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file41.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file50.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file50.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor53);
    }

    @Test
    public void test0316() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0316");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest1 = explodedArchive0.manifest;
        explodedArchive0.recursive = false;
        java.util.jar.Manifest manifest4 = explodedArchive0.manifest;
        java.io.File file5 = explodedArchive0.manifestFile;
        java.io.File file6 = explodedArchive0.root;
        explodedArchive0.recursive = true;
        boolean boolean9 = explodedArchive0.recursive;
        java.util.jar.Manifest manifest10 = explodedArchive0.manifest;
        java.util.jar.Manifest manifest11 = null;
        explodedArchive0.manifest = manifest11;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator13 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        boolean boolean14 = fileEntryIterator13.hasNext();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator15 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator16 = entryComparator15.reversed();
        java.util.Comparator<java.io.File> fileComparator17 = fileComparator16.reversed();
        fileEntryIterator13.entryComparator = fileComparator17;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive19 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file20 = explodedArchive19.root;
        java.io.File file21 = null;
        explodedArchive19.manifestFile = file21;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive23 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest24 = explodedArchive23.manifest;
        explodedArchive23.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive27 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest28 = explodedArchive27.manifest;
        explodedArchive27.recursive = false;
        java.util.jar.Manifest manifest31 = explodedArchive27.manifest;
        java.io.File file32 = explodedArchive27.manifestFile;
        java.io.File file33 = null;
        java.io.File file34 = explodedArchive27.getManifestFile(file33);
        explodedArchive23.manifestFile = file33;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive36 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest37 = explodedArchive36.manifest;
        explodedArchive36.recursive = false;
        java.util.jar.Manifest manifest40 = explodedArchive36.manifest;
        java.io.File file41 = explodedArchive36.manifestFile;
        java.io.File file42 = null;
        java.io.File file43 = explodedArchive36.getManifestFile(file42);
        explodedArchive23.manifestFile = file43;
        java.io.File file45 = explodedArchive19.getManifestFile(file43);
        java.util.Iterator<java.io.File> fileItor46 = fileEntryIterator13.listFiles(file45);
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntry fileEntry47 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntry();
        java.lang.String str48 = fileEntry47.name;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator49 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file50 = null;
        fileEntryIterator49.current = file50;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive52 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.lang.String str53 = explodedArchive52.toString();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive54 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file55 = explodedArchive54.root;
        java.io.File file56 = null;
        explodedArchive54.manifestFile = file56;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive58 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest59 = explodedArchive58.manifest;
        explodedArchive58.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive62 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest63 = explodedArchive62.manifest;
        explodedArchive62.recursive = false;
        java.util.jar.Manifest manifest66 = explodedArchive62.manifest;
        java.io.File file67 = explodedArchive62.manifestFile;
        java.io.File file68 = null;
        java.io.File file69 = explodedArchive62.getManifestFile(file68);
        explodedArchive58.manifestFile = file68;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive71 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest72 = explodedArchive71.manifest;
        explodedArchive71.recursive = false;
        java.util.jar.Manifest manifest75 = explodedArchive71.manifest;
        java.io.File file76 = explodedArchive71.manifestFile;
        java.io.File file77 = null;
        java.io.File file78 = explodedArchive71.getManifestFile(file77);
        explodedArchive58.manifestFile = file78;
        java.io.File file80 = explodedArchive54.getManifestFile(file78);
        java.io.File file81 = explodedArchive52.getManifestFile(file78);
        fileEntryIterator49.root = file78;
        fileEntry47.file = file78;
        java.io.File file84 = fileEntry47.getFile();
        java.io.File file85 = fileEntry47.getFile();
        java.util.Iterator<java.io.File> fileItor86 = fileEntryIterator13.listFiles(file85);
        explodedArchive0.root = file85;
        // The following exception was thrown during execution in test generation
        try {
            org.springframework.boot.loader.archive.ExplodedArchive explodedArchive88 = new org.springframework.boot.loader.archive.ExplodedArchive(file85);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid source folder META-INF/MANIFEST.MF");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file34.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file34.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file43.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file43.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file45.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file45.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str53 + "' != '" + "exploded archive" + "'", str53.equals("exploded archive"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file69.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file69.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest75);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file76);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file78);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file78.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file78.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file80);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file80.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file80.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file81);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file81.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file81.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file84);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file84.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file84.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file85);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file85.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file85.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor86);
    }

    @Test
    public void test0317() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0317");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest1 = explodedArchive0.manifest;
        explodedArchive0.recursive = false;
        java.io.File file4 = null;
        explodedArchive0.root = file4;
        java.io.File file6 = explodedArchive0.root;
        java.io.File file7 = null;
        explodedArchive0.manifestFile = file7;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file6);
    }

    @Test
    public void test0318() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0318");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive1 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest2 = explodedArchive1.manifest;
        explodedArchive1.recursive = false;
        java.io.File file5 = null;
        explodedArchive1.root = file5;
        java.io.File file7 = explodedArchive1.root;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive8 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest9 = explodedArchive8.manifest;
        explodedArchive8.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive12 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest13 = explodedArchive12.manifest;
        explodedArchive12.recursive = false;
        java.util.jar.Manifest manifest16 = explodedArchive12.manifest;
        java.io.File file17 = explodedArchive12.manifestFile;
        java.io.File file18 = null;
        java.io.File file19 = explodedArchive12.getManifestFile(file18);
        explodedArchive8.manifestFile = file18;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive21 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest22 = explodedArchive21.manifest;
        explodedArchive21.recursive = false;
        java.util.jar.Manifest manifest25 = explodedArchive21.manifest;
        java.io.File file26 = explodedArchive21.manifestFile;
        java.io.File file27 = null;
        java.io.File file28 = explodedArchive21.getManifestFile(file27);
        explodedArchive8.manifestFile = file28;
        java.io.File file30 = explodedArchive1.getManifestFile(file28);
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive31 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest32 = explodedArchive31.manifest;
        explodedArchive31.recursive = false;
        java.io.File file35 = null;
        explodedArchive31.root = file35;
        java.io.File file37 = explodedArchive31.manifestFile;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive38 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file39 = explodedArchive38.root;
        java.io.File file40 = null;
        explodedArchive38.manifestFile = file40;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive42 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest43 = explodedArchive42.manifest;
        explodedArchive42.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive46 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest47 = explodedArchive46.manifest;
        explodedArchive46.recursive = false;
        java.util.jar.Manifest manifest50 = explodedArchive46.manifest;
        java.io.File file51 = explodedArchive46.manifestFile;
        java.io.File file52 = null;
        java.io.File file53 = explodedArchive46.getManifestFile(file52);
        explodedArchive42.manifestFile = file52;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive55 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest56 = explodedArchive55.manifest;
        explodedArchive55.recursive = false;
        java.util.jar.Manifest manifest59 = explodedArchive55.manifest;
        java.io.File file60 = explodedArchive55.manifestFile;
        java.io.File file61 = null;
        java.io.File file62 = explodedArchive55.getManifestFile(file61);
        explodedArchive42.manifestFile = file62;
        java.io.File file64 = explodedArchive38.getManifestFile(file62);
        java.io.File file65 = explodedArchive31.getManifestFile(file62);
        explodedArchive1.manifestFile = file62;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive67 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.lang.String str68 = explodedArchive67.toString();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive69 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file70 = explodedArchive69.root;
        java.io.File file71 = null;
        explodedArchive69.manifestFile = file71;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive73 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest74 = explodedArchive73.manifest;
        explodedArchive73.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive77 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest78 = explodedArchive77.manifest;
        explodedArchive77.recursive = false;
        java.util.jar.Manifest manifest81 = explodedArchive77.manifest;
        java.io.File file82 = explodedArchive77.manifestFile;
        java.io.File file83 = null;
        java.io.File file84 = explodedArchive77.getManifestFile(file83);
        explodedArchive73.manifestFile = file83;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive86 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest87 = explodedArchive86.manifest;
        explodedArchive86.recursive = false;
        java.util.jar.Manifest manifest90 = explodedArchive86.manifest;
        java.io.File file91 = explodedArchive86.manifestFile;
        java.io.File file92 = null;
        java.io.File file93 = explodedArchive86.getManifestFile(file92);
        explodedArchive73.manifestFile = file93;
        java.io.File file95 = explodedArchive69.getManifestFile(file93);
        java.io.File file96 = explodedArchive67.getManifestFile(file93);
        int int97 = entryComparator0.compare(file62, file93);
        java.util.Comparator<java.io.File> fileComparator98 = entryComparator0.reversed();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file19.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file19.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file28.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file28.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file30.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file30.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file53.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file53.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file62.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file62.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file64.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file64.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file65.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file65.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str68 + "' != '" + "exploded archive" + "'", str68.equals("exploded archive"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest78);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest81);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file82);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file84);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file84.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file84.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest87);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest90);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file91);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file93);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file93.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file93.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file95);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file95.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file95.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file96);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file96.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file96.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int97 + "' != '" + 0 + "'", int97 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator98);
    }

    @Test
    public void test0319() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0319");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file1 = null;
        fileEntryIterator0.current = file1;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive3 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest4 = explodedArchive3.manifest;
        explodedArchive3.recursive = false;
        java.util.jar.Manifest manifest7 = explodedArchive3.manifest;
        java.io.File file8 = explodedArchive3.manifestFile;
        java.io.File file9 = null;
        java.io.File file10 = explodedArchive3.getManifestFile(file9);
        java.util.Iterator<java.io.File> fileItor11 = fileEntryIterator0.listFiles(file10);
        java.io.File file12 = fileEntryIterator0.root;
        java.io.File file13 = fileEntryIterator0.root;
        java.util.Deque<java.util.Iterator<java.io.File>> fileItorQueue14 = fileEntryIterator0.stack;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator15 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator16 = entryComparator15.reversed();
        java.util.Comparator<java.io.File> fileComparator17 = entryComparator15.reversed();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive18 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest19 = explodedArchive18.manifest;
        explodedArchive18.recursive = false;
        java.util.jar.Manifest manifest22 = explodedArchive18.manifest;
        java.io.File file23 = explodedArchive18.manifestFile;
        java.io.File file24 = null;
        java.io.File file25 = explodedArchive18.getManifestFile(file24);
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive26 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest27 = explodedArchive26.manifest;
        explodedArchive26.recursive = false;
        java.io.File file30 = null;
        explodedArchive26.root = file30;
        java.io.File file32 = explodedArchive26.root;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive33 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest34 = explodedArchive33.manifest;
        explodedArchive33.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive37 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest38 = explodedArchive37.manifest;
        explodedArchive37.recursive = false;
        java.util.jar.Manifest manifest41 = explodedArchive37.manifest;
        java.io.File file42 = explodedArchive37.manifestFile;
        java.io.File file43 = null;
        java.io.File file44 = explodedArchive37.getManifestFile(file43);
        explodedArchive33.manifestFile = file43;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive46 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest47 = explodedArchive46.manifest;
        explodedArchive46.recursive = false;
        java.util.jar.Manifest manifest50 = explodedArchive46.manifest;
        java.io.File file51 = explodedArchive46.manifestFile;
        java.io.File file52 = null;
        java.io.File file53 = explodedArchive46.getManifestFile(file52);
        explodedArchive33.manifestFile = file53;
        java.io.File file55 = explodedArchive26.getManifestFile(file53);
        int int56 = entryComparator15.compare(file25, file53);
        fileEntryIterator0.root = file25;
        // The following exception was thrown during execution in test generation
        try {
            org.springframework.boot.loader.archive.ExplodedArchive explodedArchive59 = new org.springframework.boot.loader.archive.ExplodedArchive(file25, false);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid source folder META-INF/MANIFEST.MF");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItorQueue14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file25.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file25.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file44.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file44.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file53.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file53.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file55.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file55.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
    }

    @Test
    public void test0320() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0320");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest1 = explodedArchive0.manifest;
        explodedArchive0.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive4 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest5 = explodedArchive4.manifest;
        explodedArchive4.recursive = false;
        java.util.jar.Manifest manifest8 = explodedArchive4.manifest;
        java.io.File file9 = explodedArchive4.manifestFile;
        java.io.File file10 = null;
        java.io.File file11 = explodedArchive4.getManifestFile(file10);
        explodedArchive0.manifestFile = file10;
        java.util.jar.Manifest manifest13 = null;
        explodedArchive0.manifest = manifest13;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive15 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.lang.String str16 = explodedArchive15.toString();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive17 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file18 = explodedArchive17.root;
        java.io.File file19 = null;
        explodedArchive17.manifestFile = file19;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive21 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest22 = explodedArchive21.manifest;
        explodedArchive21.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive25 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest26 = explodedArchive25.manifest;
        explodedArchive25.recursive = false;
        java.util.jar.Manifest manifest29 = explodedArchive25.manifest;
        java.io.File file30 = explodedArchive25.manifestFile;
        java.io.File file31 = null;
        java.io.File file32 = explodedArchive25.getManifestFile(file31);
        explodedArchive21.manifestFile = file31;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive34 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest35 = explodedArchive34.manifest;
        explodedArchive34.recursive = false;
        java.util.jar.Manifest manifest38 = explodedArchive34.manifest;
        java.io.File file39 = explodedArchive34.manifestFile;
        java.io.File file40 = null;
        java.io.File file41 = explodedArchive34.getManifestFile(file40);
        explodedArchive21.manifestFile = file41;
        java.io.File file43 = explodedArchive17.getManifestFile(file41);
        java.io.File file44 = explodedArchive15.getManifestFile(file41);
        java.io.File file45 = null;
        java.io.File file46 = explodedArchive15.getManifestFile(file45);
        java.io.File file47 = explodedArchive0.getManifestFile(file45);
        // The following exception was thrown during execution in test generation
        try {
            org.springframework.boot.loader.archive.ExplodedArchive explodedArchive48 = new org.springframework.boot.loader.archive.ExplodedArchive(file47);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid source folder META-INF/MANIFEST.MF");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file11.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file11.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str16 + "' != '" + "exploded archive" + "'", str16.equals("exploded archive"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file32.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file32.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file41.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file41.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file43.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file43.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file44.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file44.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file46.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file46.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file47.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file47.toString(), "META-INF/MANIFEST.MF");
    }

    @Test
    public void test0321() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0321");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file1 = explodedArchive0.root;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive2 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest3 = explodedArchive2.manifest;
        explodedArchive2.recursive = false;
        java.util.jar.Manifest manifest6 = explodedArchive2.manifest;
        java.io.File file7 = explodedArchive2.manifestFile;
        java.io.File file8 = null;
        java.io.File file9 = explodedArchive2.getManifestFile(file8);
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator10 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file11 = null;
        fileEntryIterator10.current = file11;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive13 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.lang.String str14 = explodedArchive13.toString();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive15 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file16 = explodedArchive15.root;
        java.io.File file17 = null;
        explodedArchive15.manifestFile = file17;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive19 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest20 = explodedArchive19.manifest;
        explodedArchive19.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive23 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest24 = explodedArchive23.manifest;
        explodedArchive23.recursive = false;
        java.util.jar.Manifest manifest27 = explodedArchive23.manifest;
        java.io.File file28 = explodedArchive23.manifestFile;
        java.io.File file29 = null;
        java.io.File file30 = explodedArchive23.getManifestFile(file29);
        explodedArchive19.manifestFile = file29;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive32 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest33 = explodedArchive32.manifest;
        explodedArchive32.recursive = false;
        java.util.jar.Manifest manifest36 = explodedArchive32.manifest;
        java.io.File file37 = explodedArchive32.manifestFile;
        java.io.File file38 = null;
        java.io.File file39 = explodedArchive32.getManifestFile(file38);
        explodedArchive19.manifestFile = file39;
        java.io.File file41 = explodedArchive15.getManifestFile(file39);
        java.io.File file42 = explodedArchive13.getManifestFile(file39);
        fileEntryIterator10.root = file39;
        explodedArchive2.root = file39;
        java.io.File file45 = explodedArchive0.getManifestFile(file39);
        boolean boolean46 = explodedArchive0.recursive;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Spliterator<org.springframework.boot.loader.archive.Archive.Entry> entrySpliterator47 = explodedArchive0.spliterator();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file9.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file9.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str14 + "' != '" + "exploded archive" + "'", str14.equals("exploded archive"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file30.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file30.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file39.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file39.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file41.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file41.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file42.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file42.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file45.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file45.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
    }

    @Test
    public void test0322() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0322");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file1 = null;
        fileEntryIterator0.current = file1;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive3 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest4 = explodedArchive3.manifest;
        explodedArchive3.recursive = false;
        java.util.jar.Manifest manifest7 = explodedArchive3.manifest;
        java.io.File file8 = explodedArchive3.manifestFile;
        java.io.File file9 = null;
        java.io.File file10 = explodedArchive3.getManifestFile(file9);
        java.util.Iterator<java.io.File> fileItor11 = fileEntryIterator0.listFiles(file10);
        boolean boolean12 = fileEntryIterator0.hasNext();
        java.util.Comparator<java.io.File> fileComparator13 = fileEntryIterator0.entryComparator;
        java.util.Comparator<java.io.File> fileComparator14 = fileComparator13.reversed();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator14);
    }

    @Test
    public void test0323() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0323");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        boolean boolean1 = fileEntryIterator0.hasNext();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator2 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator3 = entryComparator2.reversed();
        java.util.Comparator<java.io.File> fileComparator4 = fileComparator3.reversed();
        fileEntryIterator0.entryComparator = fileComparator4;
        java.util.Comparator<java.io.File> fileComparator6 = fileEntryIterator0.entryComparator;
        java.io.File file7 = fileEntryIterator0.current;
        boolean boolean8 = fileEntryIterator0.hasNext();
        boolean boolean9 = fileEntryIterator0.recursive;
        // The following exception was thrown during execution in test generation
        try {
            fileEntryIterator0.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: remove");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test0324() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0324");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest1 = explodedArchive0.manifest;
        explodedArchive0.recursive = false;
        java.util.jar.Manifest manifest4 = explodedArchive0.manifest;
        java.io.File file5 = explodedArchive0.manifestFile;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntry fileEntry6 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntry();
        java.lang.String str7 = fileEntry6.getName();
        java.io.File file8 = fileEntry6.getFile();
        java.lang.String str9 = fileEntry6.getName();
        java.lang.String str10 = fileEntry6.getName();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator11 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        boolean boolean12 = fileEntryIterator11.recursive;
        java.io.File file13 = fileEntryIterator11.current;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator14 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file15 = null;
        fileEntryIterator14.current = file15;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive17 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest18 = explodedArchive17.manifest;
        explodedArchive17.recursive = false;
        java.util.jar.Manifest manifest21 = explodedArchive17.manifest;
        java.io.File file22 = explodedArchive17.manifestFile;
        java.io.File file23 = null;
        java.io.File file24 = explodedArchive17.getManifestFile(file23);
        java.util.Iterator<java.io.File> fileItor25 = fileEntryIterator14.listFiles(file24);
        java.io.File file26 = fileEntryIterator14.root;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive27 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.lang.String str28 = explodedArchive27.toString();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive29 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file30 = explodedArchive29.root;
        java.io.File file31 = null;
        explodedArchive29.manifestFile = file31;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive33 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest34 = explodedArchive33.manifest;
        explodedArchive33.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive37 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest38 = explodedArchive37.manifest;
        explodedArchive37.recursive = false;
        java.util.jar.Manifest manifest41 = explodedArchive37.manifest;
        java.io.File file42 = explodedArchive37.manifestFile;
        java.io.File file43 = null;
        java.io.File file44 = explodedArchive37.getManifestFile(file43);
        explodedArchive33.manifestFile = file43;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive46 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest47 = explodedArchive46.manifest;
        explodedArchive46.recursive = false;
        java.util.jar.Manifest manifest50 = explodedArchive46.manifest;
        java.io.File file51 = explodedArchive46.manifestFile;
        java.io.File file52 = null;
        java.io.File file53 = explodedArchive46.getManifestFile(file52);
        explodedArchive33.manifestFile = file53;
        java.io.File file55 = explodedArchive29.getManifestFile(file53);
        java.io.File file56 = explodedArchive27.getManifestFile(file53);
        fileEntryIterator14.root = file53;
        java.util.Iterator<java.io.File> fileItor58 = fileEntryIterator11.listFiles(file53);
        fileEntry6.file = file53;
        explodedArchive0.manifestFile = file53;
        java.io.File file61 = explodedArchive0.manifestFile;
        // The following exception was thrown during execution in test generation
        try {
            org.springframework.boot.loader.archive.ExplodedArchive explodedArchive63 = new org.springframework.boot.loader.archive.ExplodedArchive(file61, true);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid source folder META-INF/MANIFEST.MF");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file24.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file24.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str28 + "' != '" + "exploded archive" + "'", str28.equals("exploded archive"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file44.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file44.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file53.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file53.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file55.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file55.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file56.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file56.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file61.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file61.toString(), "META-INF/MANIFEST.MF");
    }

    @Test
    public void test0325() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0325");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file1 = explodedArchive0.root;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator2 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file3 = null;
        fileEntryIterator2.current = file3;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive5 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest6 = explodedArchive5.manifest;
        explodedArchive5.recursive = false;
        java.util.jar.Manifest manifest9 = explodedArchive5.manifest;
        java.io.File file10 = explodedArchive5.manifestFile;
        java.io.File file11 = null;
        java.io.File file12 = explodedArchive5.getManifestFile(file11);
        java.util.Iterator<java.io.File> fileItor13 = fileEntryIterator2.listFiles(file12);
        boolean boolean14 = fileEntryIterator2.hasNext();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator15 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator16 = entryComparator15.reversed();
        java.util.Comparator<java.io.File> fileComparator17 = entryComparator15.reversed();
        fileEntryIterator2.entryComparator = fileComparator17;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator19 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file20 = null;
        fileEntryIterator19.current = file20;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive22 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.lang.String str23 = explodedArchive22.toString();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive24 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file25 = explodedArchive24.root;
        java.io.File file26 = null;
        explodedArchive24.manifestFile = file26;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive28 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest29 = explodedArchive28.manifest;
        explodedArchive28.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive32 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest33 = explodedArchive32.manifest;
        explodedArchive32.recursive = false;
        java.util.jar.Manifest manifest36 = explodedArchive32.manifest;
        java.io.File file37 = explodedArchive32.manifestFile;
        java.io.File file38 = null;
        java.io.File file39 = explodedArchive32.getManifestFile(file38);
        explodedArchive28.manifestFile = file38;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive41 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest42 = explodedArchive41.manifest;
        explodedArchive41.recursive = false;
        java.util.jar.Manifest manifest45 = explodedArchive41.manifest;
        java.io.File file46 = explodedArchive41.manifestFile;
        java.io.File file47 = null;
        java.io.File file48 = explodedArchive41.getManifestFile(file47);
        explodedArchive28.manifestFile = file48;
        java.io.File file50 = explodedArchive24.getManifestFile(file48);
        java.io.File file51 = explodedArchive22.getManifestFile(file48);
        fileEntryIterator19.root = file48;
        fileEntryIterator2.current = file48;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive54 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file55 = explodedArchive54.root;
        java.io.File file56 = null;
        explodedArchive54.manifestFile = file56;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive58 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest59 = explodedArchive58.manifest;
        explodedArchive58.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive62 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest63 = explodedArchive62.manifest;
        explodedArchive62.recursive = false;
        java.util.jar.Manifest manifest66 = explodedArchive62.manifest;
        java.io.File file67 = explodedArchive62.manifestFile;
        java.io.File file68 = null;
        java.io.File file69 = explodedArchive62.getManifestFile(file68);
        explodedArchive58.manifestFile = file68;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive71 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest72 = explodedArchive71.manifest;
        explodedArchive71.recursive = false;
        java.util.jar.Manifest manifest75 = explodedArchive71.manifest;
        java.io.File file76 = explodedArchive71.manifestFile;
        java.io.File file77 = null;
        java.io.File file78 = explodedArchive71.getManifestFile(file77);
        explodedArchive58.manifestFile = file78;
        java.io.File file80 = explodedArchive54.getManifestFile(file78);
        fileEntryIterator2.root = file80;
        explodedArchive0.root = file80;
        org.springframework.boot.loader.archive.Archive.EntryFilter entryFilter83 = null;
        java.util.List<org.springframework.boot.loader.archive.Archive> archiveList84 = explodedArchive0.getNestedArchives(entryFilter83);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file12.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file12.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str23 + "' != '" + "exploded archive" + "'", str23.equals("exploded archive"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file39.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file39.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file48.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file48.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file50.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file50.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file51.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file51.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file69.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file69.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest75);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file76);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file78);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file78.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file78.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file80);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file80.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file80.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(archiveList84);
    }

    @Test
    public void test0326() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0326");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest1 = explodedArchive0.manifest;
        java.util.jar.Manifest manifest2 = null;
        explodedArchive0.manifest = manifest2;
        java.io.File file4 = explodedArchive0.root;
        java.lang.String str5 = explodedArchive0.toString();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator<org.springframework.boot.loader.archive.Archive.Entry> entryItor6 = explodedArchive0.iterator();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "exploded archive" + "'", str5.equals("exploded archive"));
    }

    @Test
    public void test0327() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0327");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        boolean boolean1 = fileEntryIterator0.hasNext();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator2 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator3 = entryComparator2.reversed();
        java.util.Comparator<java.io.File> fileComparator4 = fileComparator3.reversed();
        fileEntryIterator0.entryComparator = fileComparator4;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive6 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file7 = explodedArchive6.root;
        java.io.File file8 = null;
        explodedArchive6.manifestFile = file8;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive10 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest11 = explodedArchive10.manifest;
        explodedArchive10.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive14 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest15 = explodedArchive14.manifest;
        explodedArchive14.recursive = false;
        java.util.jar.Manifest manifest18 = explodedArchive14.manifest;
        java.io.File file19 = explodedArchive14.manifestFile;
        java.io.File file20 = null;
        java.io.File file21 = explodedArchive14.getManifestFile(file20);
        explodedArchive10.manifestFile = file20;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive23 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest24 = explodedArchive23.manifest;
        explodedArchive23.recursive = false;
        java.util.jar.Manifest manifest27 = explodedArchive23.manifest;
        java.io.File file28 = explodedArchive23.manifestFile;
        java.io.File file29 = null;
        java.io.File file30 = explodedArchive23.getManifestFile(file29);
        explodedArchive10.manifestFile = file30;
        java.io.File file32 = explodedArchive6.getManifestFile(file30);
        java.util.Iterator<java.io.File> fileItor33 = fileEntryIterator0.listFiles(file32);
        boolean boolean34 = fileEntryIterator0.recursive;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator35 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file36 = null;
        fileEntryIterator35.current = file36;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive38 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest39 = explodedArchive38.manifest;
        explodedArchive38.recursive = false;
        java.util.jar.Manifest manifest42 = explodedArchive38.manifest;
        java.io.File file43 = explodedArchive38.manifestFile;
        java.io.File file44 = null;
        java.io.File file45 = explodedArchive38.getManifestFile(file44);
        java.util.Iterator<java.io.File> fileItor46 = fileEntryIterator35.listFiles(file45);
        java.util.Comparator<java.io.File> fileComparator47 = fileEntryIterator35.entryComparator;
        fileEntryIterator0.entryComparator = fileComparator47;
        fileEntryIterator0.recursive = false;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file21.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file21.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file30.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file30.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file32.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file32.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file45.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file45.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator47);
    }

    @Test
    public void test0328() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0328");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file1 = explodedArchive0.root;
        java.io.File file2 = null;
        explodedArchive0.manifestFile = file2;
        java.io.File file4 = explodedArchive0.root;
        java.util.jar.Manifest manifest5 = null;
        explodedArchive0.manifest = manifest5;
        boolean boolean7 = explodedArchive0.recursive;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test0329() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0329");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        boolean boolean1 = explodedArchive0.recursive;
        boolean boolean2 = explodedArchive0.recursive;
        explodedArchive0.recursive = false;
        boolean boolean5 = explodedArchive0.recursive;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test0330() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0330");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest1 = explodedArchive0.manifest;
        explodedArchive0.recursive = false;
        java.util.jar.Manifest manifest4 = explodedArchive0.manifest;
        java.util.jar.Manifest manifest5 = null;
        explodedArchive0.manifest = manifest5;
        java.io.File file7 = explodedArchive0.root;
        java.lang.String str8 = explodedArchive0.toString();
        java.io.File file9 = explodedArchive0.root;
        java.lang.String str10 = explodedArchive0.toString();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str8 + "' != '" + "exploded archive" + "'", str8.equals("exploded archive"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str10 + "' != '" + "exploded archive" + "'", str10.equals("exploded archive"));
    }

    @Test
    public void test0331() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0331");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file1 = null;
        fileEntryIterator0.current = file1;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive3 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest4 = explodedArchive3.manifest;
        explodedArchive3.recursive = false;
        java.util.jar.Manifest manifest7 = explodedArchive3.manifest;
        java.io.File file8 = explodedArchive3.manifestFile;
        java.io.File file9 = null;
        java.io.File file10 = explodedArchive3.getManifestFile(file9);
        java.util.Iterator<java.io.File> fileItor11 = fileEntryIterator0.listFiles(file10);
        boolean boolean12 = fileEntryIterator0.hasNext();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator13 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator14 = entryComparator13.reversed();
        java.util.Comparator<java.io.File> fileComparator15 = entryComparator13.reversed();
        fileEntryIterator0.entryComparator = fileComparator15;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator17 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file18 = null;
        fileEntryIterator17.current = file18;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive20 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest21 = explodedArchive20.manifest;
        explodedArchive20.recursive = false;
        java.util.jar.Manifest manifest24 = explodedArchive20.manifest;
        java.io.File file25 = explodedArchive20.manifestFile;
        java.io.File file26 = null;
        java.io.File file27 = explodedArchive20.getManifestFile(file26);
        java.util.Iterator<java.io.File> fileItor28 = fileEntryIterator17.listFiles(file27);
        java.util.Comparator<java.io.File> fileComparator29 = fileEntryIterator17.entryComparator;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator30 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file31 = null;
        fileEntryIterator30.current = file31;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive33 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest34 = explodedArchive33.manifest;
        explodedArchive33.recursive = false;
        java.util.jar.Manifest manifest37 = explodedArchive33.manifest;
        java.io.File file38 = explodedArchive33.manifestFile;
        java.io.File file39 = null;
        java.io.File file40 = explodedArchive33.getManifestFile(file39);
        java.util.Iterator<java.io.File> fileItor41 = fileEntryIterator30.listFiles(file40);
        java.io.File file42 = fileEntryIterator30.current;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator43 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file44 = null;
        fileEntryIterator43.current = file44;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive46 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest47 = explodedArchive46.manifest;
        explodedArchive46.recursive = false;
        java.util.jar.Manifest manifest50 = explodedArchive46.manifest;
        java.io.File file51 = explodedArchive46.manifestFile;
        java.io.File file52 = null;
        java.io.File file53 = explodedArchive46.getManifestFile(file52);
        java.util.Iterator<java.io.File> fileItor54 = fileEntryIterator43.listFiles(file53);
        java.io.File file55 = fileEntryIterator43.current;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator56 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file57 = null;
        fileEntryIterator56.current = file57;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive59 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest60 = explodedArchive59.manifest;
        explodedArchive59.recursive = false;
        java.util.jar.Manifest manifest63 = explodedArchive59.manifest;
        java.io.File file64 = explodedArchive59.manifestFile;
        java.io.File file65 = null;
        java.io.File file66 = explodedArchive59.getManifestFile(file65);
        java.util.Iterator<java.io.File> fileItor67 = fileEntryIterator56.listFiles(file66);
        java.util.ArrayDeque<java.util.Iterator<java.io.File>> fileItorQueue68 = new java.util.ArrayDeque<java.util.Iterator<java.io.File>>();
        boolean boolean69 = fileItorQueue68.add(fileItor67);
        fileEntryIterator43.stack = fileItorQueue68;
        fileEntryIterator30.stack = fileItorQueue68;
        fileEntryIterator17.stack = fileItorQueue68;
        fileEntryIterator0.stack = fileItorQueue68;
        java.util.Comparator<java.io.File> fileComparator74 = fileEntryIterator0.entryComparator;
        // The following exception was thrown during execution in test generation
        try {
            fileEntryIterator0.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: remove");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file27.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file27.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file40.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file40.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file53.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file53.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file66.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file66.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator74);
    }

    @Test
    public void test0332() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0332");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        boolean boolean1 = fileEntryIterator0.hasNext();
        java.io.File file2 = fileEntryIterator0.root;
        boolean boolean3 = fileEntryIterator0.hasNext();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator4 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator5 = entryComparator4.reversed();
        java.util.Comparator<java.io.File> fileComparator6 = entryComparator4.reversed();
        fileEntryIterator0.entryComparator = entryComparator4;
        java.io.File file8 = fileEntryIterator0.poll();
        // The following exception was thrown during execution in test generation
        try {
            fileEntryIterator0.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: remove");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file8);
    }

    @Test
    public void test0333() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0333");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest1 = explodedArchive0.manifest;
        explodedArchive0.recursive = false;
        java.util.jar.Manifest manifest4 = explodedArchive0.manifest;
        java.io.File file5 = explodedArchive0.manifestFile;
        java.io.File file6 = null;
        java.io.File file7 = explodedArchive0.getManifestFile(file6);
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive8 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest9 = explodedArchive8.manifest;
        explodedArchive8.recursive = false;
        java.io.File file12 = null;
        explodedArchive8.root = file12;
        java.io.File file14 = explodedArchive8.manifestFile;
        java.io.File file15 = explodedArchive8.manifestFile;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator16 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator17 = entryComparator16.reversed();
        java.util.Comparator<java.io.File> fileComparator18 = entryComparator16.reversed();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive19 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest20 = explodedArchive19.manifest;
        explodedArchive19.recursive = false;
        java.util.jar.Manifest manifest23 = explodedArchive19.manifest;
        java.io.File file24 = explodedArchive19.manifestFile;
        java.io.File file25 = null;
        java.io.File file26 = explodedArchive19.getManifestFile(file25);
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive27 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest28 = explodedArchive27.manifest;
        explodedArchive27.recursive = false;
        java.io.File file31 = null;
        explodedArchive27.root = file31;
        java.io.File file33 = explodedArchive27.root;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive34 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest35 = explodedArchive34.manifest;
        explodedArchive34.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive38 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest39 = explodedArchive38.manifest;
        explodedArchive38.recursive = false;
        java.util.jar.Manifest manifest42 = explodedArchive38.manifest;
        java.io.File file43 = explodedArchive38.manifestFile;
        java.io.File file44 = null;
        java.io.File file45 = explodedArchive38.getManifestFile(file44);
        explodedArchive34.manifestFile = file44;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive47 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest48 = explodedArchive47.manifest;
        explodedArchive47.recursive = false;
        java.util.jar.Manifest manifest51 = explodedArchive47.manifest;
        java.io.File file52 = explodedArchive47.manifestFile;
        java.io.File file53 = null;
        java.io.File file54 = explodedArchive47.getManifestFile(file53);
        explodedArchive34.manifestFile = file54;
        java.io.File file56 = explodedArchive27.getManifestFile(file54);
        int int57 = entryComparator16.compare(file26, file54);
        explodedArchive8.root = file54;
        java.io.File file59 = explodedArchive0.getManifestFile(file54);
        // The following exception was thrown during execution in test generation
        try {
            org.springframework.boot.loader.archive.ExplodedArchive explodedArchive60 = new org.springframework.boot.loader.archive.ExplodedArchive(file59);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid source folder META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file7.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file7.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file26.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file26.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file45.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file45.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file54.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file54.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file56.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file56.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file59.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file59.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
    }

    @Test
    public void test0334() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0334");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.lang.String str1 = explodedArchive0.toString();
        explodedArchive0.recursive = true;
        java.util.jar.Manifest manifest4 = null;
        explodedArchive0.manifest = manifest4;
        // The following exception was thrown during execution in test generation
        try {
            java.util.jar.Manifest manifest6 = explodedArchive0.getManifest();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str1 + "' != '" + "exploded archive" + "'", str1.equals("exploded archive"));
    }

    @Test
    public void test0335() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0335");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntry fileEntry0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntry();
        java.lang.String str1 = fileEntry0.getName();
        java.io.File file2 = fileEntry0.getFile();
        java.io.File file3 = fileEntry0.file;
        fileEntry0.name = "";
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file3);
    }

    @Test
    public void test0336() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0336");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file1 = null;
        fileEntryIterator0.current = file1;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive3 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest4 = explodedArchive3.manifest;
        explodedArchive3.recursive = false;
        java.util.jar.Manifest manifest7 = explodedArchive3.manifest;
        java.io.File file8 = explodedArchive3.manifestFile;
        java.io.File file9 = null;
        java.io.File file10 = explodedArchive3.getManifestFile(file9);
        java.util.Iterator<java.io.File> fileItor11 = fileEntryIterator0.listFiles(file10);
        java.io.File file12 = fileEntryIterator0.root;
        java.io.File file13 = fileEntryIterator0.poll();
        java.util.Comparator<java.io.File> fileComparator14 = fileEntryIterator0.entryComparator;
        java.util.Deque<java.util.Iterator<java.io.File>> fileItorQueue15 = fileEntryIterator0.stack;
        java.io.File file16 = fileEntryIterator0.poll();
        boolean boolean17 = fileEntryIterator0.hasNext();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItorQueue15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test0337() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0337");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file1 = explodedArchive0.root;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive2 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest3 = explodedArchive2.manifest;
        explodedArchive2.recursive = false;
        java.util.jar.Manifest manifest6 = explodedArchive2.manifest;
        java.io.File file7 = explodedArchive2.manifestFile;
        java.io.File file8 = null;
        java.io.File file9 = explodedArchive2.getManifestFile(file8);
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator10 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file11 = null;
        fileEntryIterator10.current = file11;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive13 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.lang.String str14 = explodedArchive13.toString();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive15 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file16 = explodedArchive15.root;
        java.io.File file17 = null;
        explodedArchive15.manifestFile = file17;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive19 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest20 = explodedArchive19.manifest;
        explodedArchive19.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive23 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest24 = explodedArchive23.manifest;
        explodedArchive23.recursive = false;
        java.util.jar.Manifest manifest27 = explodedArchive23.manifest;
        java.io.File file28 = explodedArchive23.manifestFile;
        java.io.File file29 = null;
        java.io.File file30 = explodedArchive23.getManifestFile(file29);
        explodedArchive19.manifestFile = file29;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive32 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest33 = explodedArchive32.manifest;
        explodedArchive32.recursive = false;
        java.util.jar.Manifest manifest36 = explodedArchive32.manifest;
        java.io.File file37 = explodedArchive32.manifestFile;
        java.io.File file38 = null;
        java.io.File file39 = explodedArchive32.getManifestFile(file38);
        explodedArchive19.manifestFile = file39;
        java.io.File file41 = explodedArchive15.getManifestFile(file39);
        java.io.File file42 = explodedArchive13.getManifestFile(file39);
        fileEntryIterator10.root = file39;
        explodedArchive2.root = file39;
        java.io.File file45 = explodedArchive0.getManifestFile(file39);
        boolean boolean46 = explodedArchive0.recursive;
        explodedArchive0.recursive = true;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator<org.springframework.boot.loader.archive.Archive.Entry> entryItor49 = explodedArchive0.iterator();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file9.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file9.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str14 + "' != '" + "exploded archive" + "'", str14.equals("exploded archive"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file30.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file30.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file39.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file39.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file41.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file41.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file42.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file42.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file45.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file45.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
    }

    @Test
    public void test0338() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0338");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file1 = explodedArchive0.root;
        java.io.File file2 = null;
        explodedArchive0.manifestFile = file2;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive4 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest5 = explodedArchive4.manifest;
        explodedArchive4.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive8 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest9 = explodedArchive8.manifest;
        explodedArchive8.recursive = false;
        java.util.jar.Manifest manifest12 = explodedArchive8.manifest;
        java.io.File file13 = explodedArchive8.manifestFile;
        java.io.File file14 = null;
        java.io.File file15 = explodedArchive8.getManifestFile(file14);
        explodedArchive4.manifestFile = file14;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive17 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest18 = explodedArchive17.manifest;
        explodedArchive17.recursive = false;
        java.util.jar.Manifest manifest21 = explodedArchive17.manifest;
        java.io.File file22 = explodedArchive17.manifestFile;
        java.io.File file23 = null;
        java.io.File file24 = explodedArchive17.getManifestFile(file23);
        explodedArchive4.manifestFile = file24;
        java.io.File file26 = explodedArchive0.getManifestFile(file24);
        java.util.jar.Manifest manifest27 = null;
        explodedArchive0.manifest = manifest27;
        java.io.File file29 = explodedArchive0.root;
        explodedArchive0.recursive = false;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator<org.springframework.boot.loader.archive.Archive.Entry> entryItor32 = explodedArchive0.iterator();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file15.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file15.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file24.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file24.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file26.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file26.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file29);
    }

    @Test
    public void test0339() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0339");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        boolean boolean1 = fileEntryIterator0.hasNext();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator2 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator3 = entryComparator2.reversed();
        java.util.Comparator<java.io.File> fileComparator4 = fileComparator3.reversed();
        fileEntryIterator0.entryComparator = fileComparator4;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive6 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file7 = explodedArchive6.root;
        java.io.File file8 = null;
        explodedArchive6.manifestFile = file8;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive10 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest11 = explodedArchive10.manifest;
        explodedArchive10.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive14 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest15 = explodedArchive14.manifest;
        explodedArchive14.recursive = false;
        java.util.jar.Manifest manifest18 = explodedArchive14.manifest;
        java.io.File file19 = explodedArchive14.manifestFile;
        java.io.File file20 = null;
        java.io.File file21 = explodedArchive14.getManifestFile(file20);
        explodedArchive10.manifestFile = file20;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive23 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest24 = explodedArchive23.manifest;
        explodedArchive23.recursive = false;
        java.util.jar.Manifest manifest27 = explodedArchive23.manifest;
        java.io.File file28 = explodedArchive23.manifestFile;
        java.io.File file29 = null;
        java.io.File file30 = explodedArchive23.getManifestFile(file29);
        explodedArchive10.manifestFile = file30;
        java.io.File file32 = explodedArchive6.getManifestFile(file30);
        java.util.Iterator<java.io.File> fileItor33 = fileEntryIterator0.listFiles(file32);
        boolean boolean34 = fileEntryIterator0.recursive;
        java.util.Deque<java.util.Iterator<java.io.File>> fileItorQueue35 = fileEntryIterator0.stack;
        fileEntryIterator0.recursive = false;
        java.io.File file38 = fileEntryIterator0.current;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file21.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file21.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file30.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file30.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file32.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file32.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItorQueue35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file38);
    }

    @Test
    public void test0340() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0340");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntry fileEntry0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntry();
        java.lang.String str1 = fileEntry0.getName();
        java.io.File file2 = fileEntry0.getFile();
        java.lang.String str3 = fileEntry0.getName();
        java.io.File file4 = fileEntry0.getFile();
        java.lang.String str5 = fileEntry0.name;
        java.lang.String str6 = fileEntry0.name;
        java.lang.String str7 = fileEntry0.getName();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive8 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file9 = explodedArchive8.root;
        java.io.File file10 = null;
        explodedArchive8.manifestFile = file10;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive12 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest13 = explodedArchive12.manifest;
        explodedArchive12.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive16 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest17 = explodedArchive16.manifest;
        explodedArchive16.recursive = false;
        java.util.jar.Manifest manifest20 = explodedArchive16.manifest;
        java.io.File file21 = explodedArchive16.manifestFile;
        java.io.File file22 = null;
        java.io.File file23 = explodedArchive16.getManifestFile(file22);
        explodedArchive12.manifestFile = file22;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive25 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest26 = explodedArchive25.manifest;
        explodedArchive25.recursive = false;
        java.util.jar.Manifest manifest29 = explodedArchive25.manifest;
        java.io.File file30 = explodedArchive25.manifestFile;
        java.io.File file31 = null;
        java.io.File file32 = explodedArchive25.getManifestFile(file31);
        explodedArchive12.manifestFile = file32;
        java.io.File file34 = explodedArchive8.getManifestFile(file32);
        fileEntry0.file = file34;
        java.io.File file36 = fileEntry0.getFile();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file23.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file23.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file32.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file32.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file34.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file34.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file36.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file36.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
    }

    @Test
    public void test0341() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0341");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file1 = null;
        fileEntryIterator0.current = file1;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive3 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest4 = explodedArchive3.manifest;
        explodedArchive3.recursive = false;
        java.util.jar.Manifest manifest7 = explodedArchive3.manifest;
        java.io.File file8 = explodedArchive3.manifestFile;
        java.io.File file9 = null;
        java.io.File file10 = explodedArchive3.getManifestFile(file9);
        java.util.Iterator<java.io.File> fileItor11 = fileEntryIterator0.listFiles(file10);
        java.io.File file12 = fileEntryIterator0.current;
        boolean boolean13 = fileEntryIterator0.recursive;
        java.io.File file14 = fileEntryIterator0.poll();
        java.util.Comparator<java.io.File> fileComparator15 = fileEntryIterator0.entryComparator;
        java.util.Comparator<java.io.File> fileComparator16 = fileComparator15.reversed();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator16);
    }

    @Test
    public void test0342() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0342");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        boolean boolean1 = fileEntryIterator0.recursive;
        java.io.File file2 = fileEntryIterator0.current;
        boolean boolean3 = fileEntryIterator0.hasNext();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator4 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file5 = null;
        fileEntryIterator4.current = file5;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive7 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest8 = explodedArchive7.manifest;
        explodedArchive7.recursive = false;
        java.util.jar.Manifest manifest11 = explodedArchive7.manifest;
        java.io.File file12 = explodedArchive7.manifestFile;
        java.io.File file13 = null;
        java.io.File file14 = explodedArchive7.getManifestFile(file13);
        java.util.Iterator<java.io.File> fileItor15 = fileEntryIterator4.listFiles(file14);
        java.io.File file16 = fileEntryIterator4.root;
        java.io.File file17 = fileEntryIterator4.root;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator18 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file19 = null;
        fileEntryIterator18.current = file19;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive21 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest22 = explodedArchive21.manifest;
        explodedArchive21.recursive = false;
        java.util.jar.Manifest manifest25 = explodedArchive21.manifest;
        java.io.File file26 = explodedArchive21.manifestFile;
        java.io.File file27 = null;
        java.io.File file28 = explodedArchive21.getManifestFile(file27);
        java.util.Iterator<java.io.File> fileItor29 = fileEntryIterator18.listFiles(file28);
        java.util.ArrayDeque<java.util.Iterator<java.io.File>> fileItorQueue30 = new java.util.ArrayDeque<java.util.Iterator<java.io.File>>();
        boolean boolean31 = fileItorQueue30.add(fileItor29);
        fileEntryIterator4.stack = fileItorQueue30;
        fileEntryIterator0.stack = fileItorQueue30;
        boolean boolean34 = fileEntryIterator0.recursive;
        java.util.Deque<java.util.Iterator<java.io.File>> fileItorQueue35 = fileEntryIterator0.stack;
        java.io.File file36 = fileEntryIterator0.current;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file14.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file14.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file28.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file28.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItorQueue35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file36);
    }

    @Test
    public void test0343() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0343");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.lang.String str1 = explodedArchive0.toString();
        explodedArchive0.recursive = true;
        java.io.File file4 = null;
        java.io.File file5 = explodedArchive0.getManifestFile(file4);
        java.io.File file6 = explodedArchive0.root;
        org.springframework.boot.loader.archive.Archive.EntryFilter entryFilter7 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<org.springframework.boot.loader.archive.Archive> archiveList8 = explodedArchive0.getNestedArchives(entryFilter7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str1 + "' != '" + "exploded archive" + "'", str1.equals("exploded archive"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file5.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file5.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file6);
    }

    @Test
    public void test0344() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0344");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file1 = null;
        fileEntryIterator0.current = file1;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive3 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest4 = explodedArchive3.manifest;
        explodedArchive3.recursive = false;
        java.util.jar.Manifest manifest7 = explodedArchive3.manifest;
        java.io.File file8 = explodedArchive3.manifestFile;
        java.io.File file9 = null;
        java.io.File file10 = explodedArchive3.getManifestFile(file9);
        java.util.Iterator<java.io.File> fileItor11 = fileEntryIterator0.listFiles(file10);
        java.io.File file12 = fileEntryIterator0.root;
        java.io.File file13 = fileEntryIterator0.poll();
        java.util.Comparator<java.io.File> fileComparator14 = fileEntryIterator0.entryComparator;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator15 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        boolean boolean16 = fileEntryIterator15.hasNext();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator17 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator18 = entryComparator17.reversed();
        java.util.Comparator<java.io.File> fileComparator19 = fileComparator18.reversed();
        fileEntryIterator15.entryComparator = fileComparator19;
        java.util.Comparator<java.io.File> fileComparator21 = fileEntryIterator15.entryComparator;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator22 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator23 = entryComparator22.reversed();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator24 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator25 = entryComparator24.reversed();
        java.util.Comparator<java.io.File> fileComparator26 = entryComparator22.thenComparing(fileComparator25);
        java.util.Comparator<java.io.File> fileComparator27 = fileComparator21.thenComparing(fileComparator25);
        fileEntryIterator0.entryComparator = fileComparator27;
        java.io.File file29 = fileEntryIterator0.root;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator30 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file31 = null;
        fileEntryIterator30.current = file31;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive33 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest34 = explodedArchive33.manifest;
        explodedArchive33.recursive = false;
        java.util.jar.Manifest manifest37 = explodedArchive33.manifest;
        java.io.File file38 = explodedArchive33.manifestFile;
        java.io.File file39 = null;
        java.io.File file40 = explodedArchive33.getManifestFile(file39);
        java.util.Iterator<java.io.File> fileItor41 = fileEntryIterator30.listFiles(file40);
        boolean boolean42 = fileEntryIterator30.hasNext();
        java.util.Comparator<java.io.File> fileComparator43 = fileEntryIterator30.entryComparator;
        fileEntryIterator0.entryComparator = fileComparator43;
        java.io.File file45 = fileEntryIterator0.root;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator46 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file47 = null;
        fileEntryIterator46.current = file47;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive49 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.lang.String str50 = explodedArchive49.toString();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive51 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file52 = explodedArchive51.root;
        java.io.File file53 = null;
        explodedArchive51.manifestFile = file53;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive55 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest56 = explodedArchive55.manifest;
        explodedArchive55.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive59 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest60 = explodedArchive59.manifest;
        explodedArchive59.recursive = false;
        java.util.jar.Manifest manifest63 = explodedArchive59.manifest;
        java.io.File file64 = explodedArchive59.manifestFile;
        java.io.File file65 = null;
        java.io.File file66 = explodedArchive59.getManifestFile(file65);
        explodedArchive55.manifestFile = file65;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive68 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest69 = explodedArchive68.manifest;
        explodedArchive68.recursive = false;
        java.util.jar.Manifest manifest72 = explodedArchive68.manifest;
        java.io.File file73 = explodedArchive68.manifestFile;
        java.io.File file74 = null;
        java.io.File file75 = explodedArchive68.getManifestFile(file74);
        explodedArchive55.manifestFile = file75;
        java.io.File file77 = explodedArchive51.getManifestFile(file75);
        java.io.File file78 = explodedArchive49.getManifestFile(file75);
        fileEntryIterator46.root = file75;
        boolean boolean80 = fileEntryIterator46.recursive;
        java.io.File file81 = fileEntryIterator46.current;
        boolean boolean82 = fileEntryIterator46.recursive;
        java.io.File file83 = fileEntryIterator46.root;
        fileEntryIterator0.root = file83;
        // The following exception was thrown during execution in test generation
        try {
            org.springframework.boot.loader.archive.ExplodedArchive explodedArchive86 = new org.springframework.boot.loader.archive.ExplodedArchive(file83, true);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid source folder META-INF/MANIFEST.MF");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file40.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file40.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str50 + "' != '" + "exploded archive" + "'", str50.equals("exploded archive"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file66.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file66.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file73);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file75);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file75.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file75.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file77);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file77.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file77.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file78);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file78.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file78.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file81);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file83);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file83.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file83.toString(), "META-INF/MANIFEST.MF");
    }

    @Test
    public void test0345() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0345");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file1 = fileEntryIterator0.root;
        java.util.Deque<java.util.Iterator<java.io.File>> fileItorQueue2 = fileEntryIterator0.stack;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItorQueue2);
    }

    @Test
    public void test0346() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0346");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntry fileEntry0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntry();
        java.io.File file1 = fileEntry0.getFile();
        java.io.File file2 = fileEntry0.getFile();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive3 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file4 = explodedArchive3.root;
        java.io.File file5 = null;
        explodedArchive3.manifestFile = file5;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive7 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest8 = explodedArchive7.manifest;
        explodedArchive7.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive11 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest12 = explodedArchive11.manifest;
        explodedArchive11.recursive = false;
        java.util.jar.Manifest manifest15 = explodedArchive11.manifest;
        java.io.File file16 = explodedArchive11.manifestFile;
        java.io.File file17 = null;
        java.io.File file18 = explodedArchive11.getManifestFile(file17);
        explodedArchive7.manifestFile = file17;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive20 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest21 = explodedArchive20.manifest;
        explodedArchive20.recursive = false;
        java.util.jar.Manifest manifest24 = explodedArchive20.manifest;
        java.io.File file25 = explodedArchive20.manifestFile;
        java.io.File file26 = null;
        java.io.File file27 = explodedArchive20.getManifestFile(file26);
        explodedArchive7.manifestFile = file27;
        java.io.File file29 = explodedArchive3.getManifestFile(file27);
        fileEntry0.file = file29;
        java.io.File file31 = fileEntry0.file;
        fileEntry0.name = "exploded archive";
        java.io.File file34 = fileEntry0.file;
        java.io.File file35 = fileEntry0.getFile();
        fileEntry0.name = "";
        java.lang.String str38 = fileEntry0.getName();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file18.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file18.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file27.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file27.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file29.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file29.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file31.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file31.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file34.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file34.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file35.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file35.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str38 + "' != '" + "" + "'", str38.equals(""));
    }

    @Test
    public void test0347() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0347");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        boolean boolean1 = fileEntryIterator0.recursive;
        java.io.File file2 = fileEntryIterator0.current;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator3 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        boolean boolean4 = fileEntryIterator3.hasNext();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator5 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator6 = entryComparator5.reversed();
        java.util.Comparator<java.io.File> fileComparator7 = fileComparator6.reversed();
        fileEntryIterator3.entryComparator = fileComparator7;
        java.util.Comparator<java.io.File> fileComparator9 = fileEntryIterator3.entryComparator;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator10 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator11 = entryComparator10.reversed();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator12 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator13 = entryComparator12.reversed();
        java.util.Comparator<java.io.File> fileComparator14 = entryComparator10.thenComparing(fileComparator13);
        java.util.Comparator<java.io.File> fileComparator15 = fileComparator9.thenComparing(fileComparator13);
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator16 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator17 = entryComparator16.reversed();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator18 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator19 = entryComparator18.reversed();
        java.util.Comparator<java.io.File> fileComparator20 = entryComparator16.thenComparing(fileComparator19);
        java.util.Comparator<java.io.File> fileComparator21 = fileComparator15.thenComparing((java.util.Comparator<java.io.File>) entryComparator16);
        fileEntryIterator0.entryComparator = fileComparator15;
        // The following exception was thrown during execution in test generation
        try {
            org.springframework.boot.loader.archive.Archive.Entry entry23 = fileEntryIterator0.next();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator21);
    }

    @Test
    public void test0348() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0348");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest1 = explodedArchive0.manifest;
        explodedArchive0.recursive = false;
        java.util.jar.Manifest manifest4 = explodedArchive0.manifest;
        java.io.File file5 = explodedArchive0.manifestFile;
        java.io.File file6 = null;
        java.io.File file7 = explodedArchive0.getManifestFile(file6);
        java.lang.String str8 = explodedArchive0.toString();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator<org.springframework.boot.loader.archive.Archive.Entry> entryItor9 = explodedArchive0.iterator();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file7.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file7.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str8 + "' != '" + "exploded archive" + "'", str8.equals("exploded archive"));
    }

    @Test
    public void test0349() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0349");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntry fileEntry0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntry();
        java.io.File file1 = fileEntry0.getFile();
        java.io.File file2 = fileEntry0.getFile();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive3 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file4 = explodedArchive3.root;
        java.io.File file5 = null;
        explodedArchive3.manifestFile = file5;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive7 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest8 = explodedArchive7.manifest;
        explodedArchive7.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive11 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest12 = explodedArchive11.manifest;
        explodedArchive11.recursive = false;
        java.util.jar.Manifest manifest15 = explodedArchive11.manifest;
        java.io.File file16 = explodedArchive11.manifestFile;
        java.io.File file17 = null;
        java.io.File file18 = explodedArchive11.getManifestFile(file17);
        explodedArchive7.manifestFile = file17;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive20 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest21 = explodedArchive20.manifest;
        explodedArchive20.recursive = false;
        java.util.jar.Manifest manifest24 = explodedArchive20.manifest;
        java.io.File file25 = explodedArchive20.manifestFile;
        java.io.File file26 = null;
        java.io.File file27 = explodedArchive20.getManifestFile(file26);
        explodedArchive7.manifestFile = file27;
        java.io.File file29 = explodedArchive3.getManifestFile(file27);
        fileEntry0.file = file29;
        fileEntry0.name = "";
        fileEntry0.name = "file:/server/study-execution/new-nimrod/nimrod-hunoroutput-test-dest/spring-boot/af20dc6cc45c032573413c401f9f73aa75371744/randoop_6/META-INF/MANIFEST.MF";
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file18.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file18.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file27.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file27.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file29.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file29.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
    }

    @Test
    public void test0350() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0350");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file1 = null;
        fileEntryIterator0.current = file1;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive3 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest4 = explodedArchive3.manifest;
        explodedArchive3.recursive = false;
        java.util.jar.Manifest manifest7 = explodedArchive3.manifest;
        java.io.File file8 = explodedArchive3.manifestFile;
        java.io.File file9 = null;
        java.io.File file10 = explodedArchive3.getManifestFile(file9);
        java.util.Iterator<java.io.File> fileItor11 = fileEntryIterator0.listFiles(file10);
        java.io.File file12 = fileEntryIterator0.root;
        java.io.File file13 = fileEntryIterator0.root;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive14 = new org.springframework.boot.loader.archive.ExplodedArchive();
        boolean boolean15 = explodedArchive14.recursive;
        boolean boolean16 = explodedArchive14.recursive;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive17 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file18 = explodedArchive17.root;
        java.io.File file19 = null;
        explodedArchive17.manifestFile = file19;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive21 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest22 = explodedArchive21.manifest;
        explodedArchive21.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive25 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest26 = explodedArchive25.manifest;
        explodedArchive25.recursive = false;
        java.util.jar.Manifest manifest29 = explodedArchive25.manifest;
        java.io.File file30 = explodedArchive25.manifestFile;
        java.io.File file31 = null;
        java.io.File file32 = explodedArchive25.getManifestFile(file31);
        explodedArchive21.manifestFile = file31;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive34 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest35 = explodedArchive34.manifest;
        explodedArchive34.recursive = false;
        java.util.jar.Manifest manifest38 = explodedArchive34.manifest;
        java.io.File file39 = explodedArchive34.manifestFile;
        java.io.File file40 = null;
        java.io.File file41 = explodedArchive34.getManifestFile(file40);
        explodedArchive21.manifestFile = file41;
        java.io.File file43 = explodedArchive17.getManifestFile(file41);
        explodedArchive14.manifestFile = file41;
        fileEntryIterator0.current = file41;
        // The following exception was thrown during execution in test generation
        try {
            fileEntryIterator0.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: remove");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file32.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file32.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file41.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file41.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file43.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file43.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
    }

    @Test
    public void test0351() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0351");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file1 = explodedArchive0.root;
        explodedArchive0.recursive = false;
        boolean boolean4 = explodedArchive0.recursive;
        java.io.File file5 = explodedArchive0.root;
        java.util.jar.Manifest manifest6 = null;
        explodedArchive0.manifest = manifest6;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator<org.springframework.boot.loader.archive.Archive.Entry> entryItor8 = explodedArchive0.iterator();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file5);
    }

    @Test
    public void test0352() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0352");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest1 = explodedArchive0.manifest;
        explodedArchive0.recursive = false;
        java.util.jar.Manifest manifest4 = explodedArchive0.manifest;
        java.io.File file5 = explodedArchive0.manifestFile;
        java.io.File file6 = null;
        java.io.File file7 = explodedArchive0.getManifestFile(file6);
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive8 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest9 = explodedArchive8.manifest;
        explodedArchive8.recursive = false;
        java.io.File file12 = null;
        explodedArchive8.root = file12;
        java.io.File file14 = explodedArchive8.manifestFile;
        java.io.File file15 = explodedArchive8.manifestFile;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator16 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator17 = entryComparator16.reversed();
        java.util.Comparator<java.io.File> fileComparator18 = entryComparator16.reversed();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive19 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest20 = explodedArchive19.manifest;
        explodedArchive19.recursive = false;
        java.util.jar.Manifest manifest23 = explodedArchive19.manifest;
        java.io.File file24 = explodedArchive19.manifestFile;
        java.io.File file25 = null;
        java.io.File file26 = explodedArchive19.getManifestFile(file25);
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive27 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest28 = explodedArchive27.manifest;
        explodedArchive27.recursive = false;
        java.io.File file31 = null;
        explodedArchive27.root = file31;
        java.io.File file33 = explodedArchive27.root;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive34 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest35 = explodedArchive34.manifest;
        explodedArchive34.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive38 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest39 = explodedArchive38.manifest;
        explodedArchive38.recursive = false;
        java.util.jar.Manifest manifest42 = explodedArchive38.manifest;
        java.io.File file43 = explodedArchive38.manifestFile;
        java.io.File file44 = null;
        java.io.File file45 = explodedArchive38.getManifestFile(file44);
        explodedArchive34.manifestFile = file44;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive47 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest48 = explodedArchive47.manifest;
        explodedArchive47.recursive = false;
        java.util.jar.Manifest manifest51 = explodedArchive47.manifest;
        java.io.File file52 = explodedArchive47.manifestFile;
        java.io.File file53 = null;
        java.io.File file54 = explodedArchive47.getManifestFile(file53);
        explodedArchive34.manifestFile = file54;
        java.io.File file56 = explodedArchive27.getManifestFile(file54);
        int int57 = entryComparator16.compare(file26, file54);
        explodedArchive8.root = file54;
        java.io.File file59 = explodedArchive0.getManifestFile(file54);
        // The following exception was thrown during execution in test generation
        try {
            org.springframework.boot.loader.archive.ExplodedArchive explodedArchive60 = new org.springframework.boot.loader.archive.ExplodedArchive(file54);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid source folder META-INF/MANIFEST.MF");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file7.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file7.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file26.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file26.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file45.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file45.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file54.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file54.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file56.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file56.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file59.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file59.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
    }

    @Test
    public void test0353() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0353");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.lang.String str1 = explodedArchive0.toString();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive2 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file3 = explodedArchive2.root;
        java.io.File file4 = null;
        explodedArchive2.manifestFile = file4;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive6 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest7 = explodedArchive6.manifest;
        explodedArchive6.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive10 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest11 = explodedArchive10.manifest;
        explodedArchive10.recursive = false;
        java.util.jar.Manifest manifest14 = explodedArchive10.manifest;
        java.io.File file15 = explodedArchive10.manifestFile;
        java.io.File file16 = null;
        java.io.File file17 = explodedArchive10.getManifestFile(file16);
        explodedArchive6.manifestFile = file16;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive19 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest20 = explodedArchive19.manifest;
        explodedArchive19.recursive = false;
        java.util.jar.Manifest manifest23 = explodedArchive19.manifest;
        java.io.File file24 = explodedArchive19.manifestFile;
        java.io.File file25 = null;
        java.io.File file26 = explodedArchive19.getManifestFile(file25);
        explodedArchive6.manifestFile = file26;
        java.io.File file28 = explodedArchive2.getManifestFile(file26);
        java.io.File file29 = explodedArchive0.getManifestFile(file26);
        java.io.File file30 = null;
        java.io.File file31 = explodedArchive0.getManifestFile(file30);
        // The following exception was thrown during execution in test generation
        try {
            org.springframework.boot.loader.archive.ExplodedArchive explodedArchive32 = new org.springframework.boot.loader.archive.ExplodedArchive(file30);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str1 + "' != '" + "exploded archive" + "'", str1.equals("exploded archive"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file17.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file17.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file26.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file26.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file28.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file28.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file29.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file29.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file31.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file31.toString(), "META-INF/MANIFEST.MF");
    }

    @Test
    public void test0354() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0354");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest1 = explodedArchive0.manifest;
        explodedArchive0.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive4 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest5 = explodedArchive4.manifest;
        explodedArchive4.recursive = false;
        java.util.jar.Manifest manifest8 = explodedArchive4.manifest;
        java.io.File file9 = explodedArchive4.manifestFile;
        java.io.File file10 = null;
        java.io.File file11 = explodedArchive4.getManifestFile(file10);
        explodedArchive0.manifestFile = file10;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive13 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest14 = explodedArchive13.manifest;
        explodedArchive13.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive17 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest18 = explodedArchive17.manifest;
        explodedArchive17.recursive = false;
        java.util.jar.Manifest manifest21 = explodedArchive17.manifest;
        java.io.File file22 = explodedArchive17.manifestFile;
        java.io.File file23 = null;
        java.io.File file24 = explodedArchive17.getManifestFile(file23);
        explodedArchive13.manifestFile = file23;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive26 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest27 = explodedArchive26.manifest;
        explodedArchive26.recursive = false;
        java.util.jar.Manifest manifest30 = explodedArchive26.manifest;
        java.io.File file31 = explodedArchive26.manifestFile;
        java.io.File file32 = null;
        java.io.File file33 = explodedArchive26.getManifestFile(file32);
        explodedArchive13.manifestFile = file33;
        explodedArchive0.root = file33;
        java.net.URL uRL36 = explodedArchive0.getUrl();
        java.net.URL uRL37 = explodedArchive0.getUrl();
        java.io.File file38 = null;
        java.io.File file39 = explodedArchive0.getManifestFile(file38);
        // The following exception was thrown during execution in test generation
        try {
            org.springframework.boot.loader.archive.ExplodedArchive explodedArchive40 = new org.springframework.boot.loader.archive.ExplodedArchive(file39);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid source folder META-INF/MANIFEST.MF");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file11.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file11.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file24.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file24.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file33.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file33.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(uRL36);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(uRL36.toString(), "file:/server/study-execution/new-nimrod/nimrod-hunoroutput-test-dest/spring-boot/af20dc6cc45c032573413c401f9f73aa75371744/randoop_6/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(uRL37);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(uRL37.toString(), "file:/server/study-execution/new-nimrod/nimrod-hunoroutput-test-dest/spring-boot/af20dc6cc45c032573413c401f9f73aa75371744/randoop_6/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file39.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file39.toString(), "META-INF/MANIFEST.MF");
    }

    @Test
    public void test0355() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0355");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file1 = null;
        fileEntryIterator0.current = file1;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive3 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest4 = explodedArchive3.manifest;
        explodedArchive3.recursive = false;
        java.util.jar.Manifest manifest7 = explodedArchive3.manifest;
        java.io.File file8 = explodedArchive3.manifestFile;
        java.io.File file9 = null;
        java.io.File file10 = explodedArchive3.getManifestFile(file9);
        java.util.Iterator<java.io.File> fileItor11 = fileEntryIterator0.listFiles(file10);
        java.io.File file12 = fileEntryIterator0.current;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator13 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file14 = null;
        fileEntryIterator13.current = file14;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive16 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest17 = explodedArchive16.manifest;
        explodedArchive16.recursive = false;
        java.util.jar.Manifest manifest20 = explodedArchive16.manifest;
        java.io.File file21 = explodedArchive16.manifestFile;
        java.io.File file22 = null;
        java.io.File file23 = explodedArchive16.getManifestFile(file22);
        java.util.Iterator<java.io.File> fileItor24 = fileEntryIterator13.listFiles(file23);
        java.util.ArrayDeque<java.util.Iterator<java.io.File>> fileItorQueue25 = new java.util.ArrayDeque<java.util.Iterator<java.io.File>>();
        boolean boolean26 = fileItorQueue25.add(fileItor24);
        fileEntryIterator0.stack = fileItorQueue25;
        boolean boolean28 = fileEntryIterator0.recursive;
        java.util.Comparator<java.io.File> fileComparator29 = fileEntryIterator0.entryComparator;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator30 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file31 = null;
        fileEntryIterator30.current = file31;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive33 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest34 = explodedArchive33.manifest;
        explodedArchive33.recursive = false;
        java.util.jar.Manifest manifest37 = explodedArchive33.manifest;
        java.io.File file38 = explodedArchive33.manifestFile;
        java.io.File file39 = null;
        java.io.File file40 = explodedArchive33.getManifestFile(file39);
        java.util.Iterator<java.io.File> fileItor41 = fileEntryIterator30.listFiles(file40);
        java.io.File file42 = fileEntryIterator30.root;
        java.io.File file43 = fileEntryIterator30.root;
        java.io.File file44 = fileEntryIterator30.current;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator45 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        boolean boolean46 = fileEntryIterator45.hasNext();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator47 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator48 = entryComparator47.reversed();
        java.util.Comparator<java.io.File> fileComparator49 = fileComparator48.reversed();
        fileEntryIterator45.entryComparator = fileComparator49;
        java.util.Comparator<java.io.File> fileComparator51 = fileEntryIterator45.entryComparator;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator52 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator53 = entryComparator52.reversed();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator54 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator55 = entryComparator54.reversed();
        java.util.Comparator<java.io.File> fileComparator56 = entryComparator52.thenComparing(fileComparator55);
        java.util.Comparator<java.io.File> fileComparator57 = fileComparator51.thenComparing(fileComparator55);
        fileEntryIterator30.entryComparator = fileComparator51;
        java.util.Comparator<java.io.File> fileComparator59 = fileComparator29.thenComparing(fileComparator51);
        java.util.Comparator<java.io.File> fileComparator60 = fileComparator51.reversed();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file23.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file23.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file40.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file40.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator60);
    }

    @Test
    public void test0356() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0356");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest1 = explodedArchive0.manifest;
        explodedArchive0.recursive = false;
        java.util.jar.Manifest manifest4 = explodedArchive0.manifest;
        explodedArchive0.recursive = true;
        java.util.jar.Manifest manifest7 = explodedArchive0.manifest;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive8 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest9 = explodedArchive8.manifest;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntry fileEntry10 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntry();
        java.io.File file11 = fileEntry10.getFile();
        java.io.File file12 = fileEntry10.getFile();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive13 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file14 = explodedArchive13.root;
        java.io.File file15 = null;
        explodedArchive13.manifestFile = file15;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive17 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest18 = explodedArchive17.manifest;
        explodedArchive17.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive21 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest22 = explodedArchive21.manifest;
        explodedArchive21.recursive = false;
        java.util.jar.Manifest manifest25 = explodedArchive21.manifest;
        java.io.File file26 = explodedArchive21.manifestFile;
        java.io.File file27 = null;
        java.io.File file28 = explodedArchive21.getManifestFile(file27);
        explodedArchive17.manifestFile = file27;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive30 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest31 = explodedArchive30.manifest;
        explodedArchive30.recursive = false;
        java.util.jar.Manifest manifest34 = explodedArchive30.manifest;
        java.io.File file35 = explodedArchive30.manifestFile;
        java.io.File file36 = null;
        java.io.File file37 = explodedArchive30.getManifestFile(file36);
        explodedArchive17.manifestFile = file37;
        java.io.File file39 = explodedArchive13.getManifestFile(file37);
        fileEntry10.file = file39;
        java.io.File file41 = fileEntry10.file;
        fileEntry10.name = "exploded archive";
        java.io.File file44 = fileEntry10.file;
        explodedArchive8.root = file44;
        explodedArchive0.root = file44;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file28.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file28.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file37.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file37.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file39.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file39.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file41.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file41.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file44.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file44.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
    }

    @Test
    public void test0357() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0357");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file1 = null;
        fileEntryIterator0.current = file1;
        fileEntryIterator0.recursive = true;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator5 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file6 = null;
        fileEntryIterator5.current = file6;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive8 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest9 = explodedArchive8.manifest;
        explodedArchive8.recursive = false;
        java.util.jar.Manifest manifest12 = explodedArchive8.manifest;
        java.io.File file13 = explodedArchive8.manifestFile;
        java.io.File file14 = null;
        java.io.File file15 = explodedArchive8.getManifestFile(file14);
        java.util.Iterator<java.io.File> fileItor16 = fileEntryIterator5.listFiles(file15);
        java.io.File file17 = fileEntryIterator5.root;
        java.io.File file18 = fileEntryIterator5.root;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator19 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file20 = null;
        fileEntryIterator19.current = file20;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive22 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest23 = explodedArchive22.manifest;
        explodedArchive22.recursive = false;
        java.util.jar.Manifest manifest26 = explodedArchive22.manifest;
        java.io.File file27 = explodedArchive22.manifestFile;
        java.io.File file28 = null;
        java.io.File file29 = explodedArchive22.getManifestFile(file28);
        java.util.Iterator<java.io.File> fileItor30 = fileEntryIterator19.listFiles(file29);
        java.util.ArrayDeque<java.util.Iterator<java.io.File>> fileItorQueue31 = new java.util.ArrayDeque<java.util.Iterator<java.io.File>>();
        boolean boolean32 = fileItorQueue31.add(fileItor30);
        fileEntryIterator5.stack = fileItorQueue31;
        java.util.Deque<java.util.Iterator<java.io.File>> fileItorQueue34 = fileEntryIterator5.stack;
        fileEntryIterator0.stack = fileItorQueue34;
        java.util.Comparator<java.io.File> fileComparator36 = fileEntryIterator0.entryComparator;
        boolean boolean37 = fileEntryIterator0.recursive;
        // The following exception was thrown during execution in test generation
        try {
            fileEntryIterator0.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: remove");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file15.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file15.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file29.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file29.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItorQueue34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
    }

    @Test
    public void test0358() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0358");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file1 = explodedArchive0.root;
        explodedArchive0.recursive = false;
        boolean boolean4 = explodedArchive0.recursive;
        java.io.File file5 = explodedArchive0.root;
        boolean boolean6 = explodedArchive0.recursive;
        org.springframework.boot.loader.archive.Archive.EntryFilter entryFilter7 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<org.springframework.boot.loader.archive.Archive> archiveList8 = explodedArchive0.getNestedArchives(entryFilter7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test0359() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0359");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest1 = explodedArchive0.manifest;
        explodedArchive0.recursive = false;
        java.util.jar.Manifest manifest4 = explodedArchive0.manifest;
        java.io.File file5 = explodedArchive0.manifestFile;
        java.io.File file6 = explodedArchive0.root;
        explodedArchive0.recursive = true;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntry fileEntry9 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntry();
        java.io.File file10 = fileEntry9.file;
        java.lang.String str11 = fileEntry9.name;
        java.io.File file12 = fileEntry9.file;
        java.io.File file13 = fileEntry9.file;
        java.lang.String str14 = fileEntry9.name;
        java.lang.String str15 = fileEntry9.getName();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntry fileEntry16 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntry();
        java.io.File file17 = fileEntry16.getFile();
        java.io.File file18 = fileEntry16.getFile();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive19 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file20 = explodedArchive19.root;
        java.io.File file21 = null;
        explodedArchive19.manifestFile = file21;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive23 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest24 = explodedArchive23.manifest;
        explodedArchive23.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive27 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest28 = explodedArchive27.manifest;
        explodedArchive27.recursive = false;
        java.util.jar.Manifest manifest31 = explodedArchive27.manifest;
        java.io.File file32 = explodedArchive27.manifestFile;
        java.io.File file33 = null;
        java.io.File file34 = explodedArchive27.getManifestFile(file33);
        explodedArchive23.manifestFile = file33;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive36 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest37 = explodedArchive36.manifest;
        explodedArchive36.recursive = false;
        java.util.jar.Manifest manifest40 = explodedArchive36.manifest;
        java.io.File file41 = explodedArchive36.manifestFile;
        java.io.File file42 = null;
        java.io.File file43 = explodedArchive36.getManifestFile(file42);
        explodedArchive23.manifestFile = file43;
        java.io.File file45 = explodedArchive19.getManifestFile(file43);
        fileEntry16.file = file45;
        java.io.File file47 = fileEntry16.file;
        fileEntry16.name = "exploded archive";
        java.io.File file50 = fileEntry16.file;
        java.io.File file51 = fileEntry16.getFile();
        java.io.File file52 = fileEntry16.file;
        fileEntry9.file = file52;
        explodedArchive0.manifestFile = file52;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntry fileEntry55 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntry();
        java.io.File file56 = fileEntry55.getFile();
        java.io.File file57 = fileEntry55.getFile();
        // The following exception was thrown during execution in test generation
        try {
            org.springframework.boot.loader.archive.Archive archive58 = explodedArchive0.getNestedArchive((org.springframework.boot.loader.archive.Archive.Entry) fileEntry55);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file34.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file34.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file43.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file43.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file45.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file45.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file47.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file47.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file50.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file50.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file51.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file51.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file52.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file52.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file57);
    }

    @Test
    public void test0360() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0360");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest1 = explodedArchive0.manifest;
        explodedArchive0.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive4 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest5 = explodedArchive4.manifest;
        explodedArchive4.recursive = false;
        java.util.jar.Manifest manifest8 = explodedArchive4.manifest;
        java.io.File file9 = explodedArchive4.manifestFile;
        java.io.File file10 = null;
        java.io.File file11 = explodedArchive4.getManifestFile(file10);
        explodedArchive0.manifestFile = file10;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive13 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest14 = explodedArchive13.manifest;
        explodedArchive13.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive17 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest18 = explodedArchive17.manifest;
        explodedArchive17.recursive = false;
        java.util.jar.Manifest manifest21 = explodedArchive17.manifest;
        java.io.File file22 = explodedArchive17.manifestFile;
        java.io.File file23 = null;
        java.io.File file24 = explodedArchive17.getManifestFile(file23);
        explodedArchive13.manifestFile = file23;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive26 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest27 = explodedArchive26.manifest;
        explodedArchive26.recursive = false;
        java.util.jar.Manifest manifest30 = explodedArchive26.manifest;
        java.io.File file31 = explodedArchive26.manifestFile;
        java.io.File file32 = null;
        java.io.File file33 = explodedArchive26.getManifestFile(file32);
        explodedArchive13.manifestFile = file33;
        explodedArchive0.root = file33;
        java.net.URL uRL36 = explodedArchive0.getUrl();
        org.springframework.boot.loader.archive.Archive.EntryFilter entryFilter37 = null;
        java.util.List<org.springframework.boot.loader.archive.Archive> archiveList38 = explodedArchive0.getNestedArchives(entryFilter37);
        java.net.URL uRL39 = explodedArchive0.getUrl();
        java.lang.Class<?> wildcardClass40 = uRL39.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file11.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file11.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file24.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file24.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file33.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file33.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(uRL36);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(uRL36.toString(), "file:/server/study-execution/new-nimrod/nimrod-hunoroutput-test-dest/spring-boot/af20dc6cc45c032573413c401f9f73aa75371744/randoop_6/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(archiveList38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(uRL39);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(uRL39.toString(), "file:/server/study-execution/new-nimrod/nimrod-hunoroutput-test-dest/spring-boot/af20dc6cc45c032573413c401f9f73aa75371744/randoop_6/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass40);
    }

    @Test
    public void test0361() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0361");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file1 = null;
        fileEntryIterator0.current = file1;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive3 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest4 = explodedArchive3.manifest;
        explodedArchive3.recursive = false;
        java.util.jar.Manifest manifest7 = explodedArchive3.manifest;
        java.io.File file8 = explodedArchive3.manifestFile;
        java.io.File file9 = null;
        java.io.File file10 = explodedArchive3.getManifestFile(file9);
        java.util.Iterator<java.io.File> fileItor11 = fileEntryIterator0.listFiles(file10);
        boolean boolean12 = fileEntryIterator0.hasNext();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator13 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator14 = entryComparator13.reversed();
        java.util.Comparator<java.io.File> fileComparator15 = entryComparator13.reversed();
        fileEntryIterator0.entryComparator = entryComparator13;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator17 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file18 = null;
        fileEntryIterator17.current = file18;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive20 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest21 = explodedArchive20.manifest;
        explodedArchive20.recursive = false;
        java.util.jar.Manifest manifest24 = explodedArchive20.manifest;
        java.io.File file25 = explodedArchive20.manifestFile;
        java.io.File file26 = null;
        java.io.File file27 = explodedArchive20.getManifestFile(file26);
        java.util.Iterator<java.io.File> fileItor28 = fileEntryIterator17.listFiles(file27);
        java.io.File file29 = fileEntryIterator17.root;
        java.io.File file30 = fileEntryIterator17.root;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator31 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file32 = null;
        fileEntryIterator31.current = file32;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive34 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest35 = explodedArchive34.manifest;
        explodedArchive34.recursive = false;
        java.util.jar.Manifest manifest38 = explodedArchive34.manifest;
        java.io.File file39 = explodedArchive34.manifestFile;
        java.io.File file40 = null;
        java.io.File file41 = explodedArchive34.getManifestFile(file40);
        java.util.Iterator<java.io.File> fileItor42 = fileEntryIterator31.listFiles(file41);
        java.util.ArrayDeque<java.util.Iterator<java.io.File>> fileItorQueue43 = new java.util.ArrayDeque<java.util.Iterator<java.io.File>>();
        boolean boolean44 = fileItorQueue43.add(fileItor42);
        fileEntryIterator17.stack = fileItorQueue43;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator46 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file47 = null;
        fileEntryIterator46.current = file47;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive49 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest50 = explodedArchive49.manifest;
        explodedArchive49.recursive = false;
        java.util.jar.Manifest manifest53 = explodedArchive49.manifest;
        java.io.File file54 = explodedArchive49.manifestFile;
        java.io.File file55 = null;
        java.io.File file56 = explodedArchive49.getManifestFile(file55);
        java.util.Iterator<java.io.File> fileItor57 = fileEntryIterator46.listFiles(file56);
        java.io.File file58 = fileEntryIterator46.root;
        java.io.File file59 = fileEntryIterator46.root;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator60 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file61 = null;
        fileEntryIterator60.current = file61;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive63 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest64 = explodedArchive63.manifest;
        explodedArchive63.recursive = false;
        java.util.jar.Manifest manifest67 = explodedArchive63.manifest;
        java.io.File file68 = explodedArchive63.manifestFile;
        java.io.File file69 = null;
        java.io.File file70 = explodedArchive63.getManifestFile(file69);
        java.util.Iterator<java.io.File> fileItor71 = fileEntryIterator60.listFiles(file70);
        java.util.ArrayDeque<java.util.Iterator<java.io.File>> fileItorQueue72 = new java.util.ArrayDeque<java.util.Iterator<java.io.File>>();
        boolean boolean73 = fileItorQueue72.add(fileItor71);
        fileEntryIterator46.stack = fileItorQueue72;
        fileEntryIterator17.stack = fileItorQueue72;
        fileEntryIterator0.stack = fileItorQueue72;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file27.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file27.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file41.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file41.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file56.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file56.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file70.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file70.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
    }

    @Test
    public void test0362() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0362");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest1 = explodedArchive0.manifest;
        java.util.jar.Manifest manifest2 = null;
        explodedArchive0.manifest = manifest2;
        java.io.File file4 = explodedArchive0.root;
        explodedArchive0.recursive = false;
        // The following exception was thrown during execution in test generation
        try {
            java.net.URL uRL7 = explodedArchive0.getUrl();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file4);
    }

    @Test
    public void test0363() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0363");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file1 = null;
        fileEntryIterator0.current = file1;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive3 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest4 = explodedArchive3.manifest;
        explodedArchive3.recursive = false;
        java.util.jar.Manifest manifest7 = explodedArchive3.manifest;
        java.io.File file8 = explodedArchive3.manifestFile;
        java.io.File file9 = null;
        java.io.File file10 = explodedArchive3.getManifestFile(file9);
        java.util.Iterator<java.io.File> fileItor11 = fileEntryIterator0.listFiles(file10);
        java.io.File file12 = fileEntryIterator0.root;
        java.io.File file13 = fileEntryIterator0.poll();
        java.util.Comparator<java.io.File> fileComparator14 = fileEntryIterator0.entryComparator;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator15 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        boolean boolean16 = fileEntryIterator15.hasNext();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator17 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator18 = entryComparator17.reversed();
        java.util.Comparator<java.io.File> fileComparator19 = fileComparator18.reversed();
        fileEntryIterator15.entryComparator = fileComparator19;
        java.util.Comparator<java.io.File> fileComparator21 = fileEntryIterator15.entryComparator;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator22 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator23 = entryComparator22.reversed();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator24 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator25 = entryComparator24.reversed();
        java.util.Comparator<java.io.File> fileComparator26 = entryComparator22.thenComparing(fileComparator25);
        java.util.Comparator<java.io.File> fileComparator27 = fileComparator21.thenComparing(fileComparator25);
        fileEntryIterator0.entryComparator = fileComparator27;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator29 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file30 = null;
        fileEntryIterator29.current = file30;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive32 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest33 = explodedArchive32.manifest;
        explodedArchive32.recursive = false;
        java.util.jar.Manifest manifest36 = explodedArchive32.manifest;
        java.io.File file37 = explodedArchive32.manifestFile;
        java.io.File file38 = null;
        java.io.File file39 = explodedArchive32.getManifestFile(file38);
        java.util.Iterator<java.io.File> fileItor40 = fileEntryIterator29.listFiles(file39);
        java.io.File file41 = fileEntryIterator29.current;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator42 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file43 = null;
        fileEntryIterator42.current = file43;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive45 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest46 = explodedArchive45.manifest;
        explodedArchive45.recursive = false;
        java.util.jar.Manifest manifest49 = explodedArchive45.manifest;
        java.io.File file50 = explodedArchive45.manifestFile;
        java.io.File file51 = null;
        java.io.File file52 = explodedArchive45.getManifestFile(file51);
        java.util.Iterator<java.io.File> fileItor53 = fileEntryIterator42.listFiles(file52);
        java.util.ArrayDeque<java.util.Iterator<java.io.File>> fileItorQueue54 = new java.util.ArrayDeque<java.util.Iterator<java.io.File>>();
        boolean boolean55 = fileItorQueue54.add(fileItor53);
        fileEntryIterator29.stack = fileItorQueue54;
        boolean boolean57 = fileEntryIterator29.recursive;
        java.util.Comparator<java.io.File> fileComparator58 = fileEntryIterator29.entryComparator;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator59 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file60 = null;
        fileEntryIterator59.current = file60;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive62 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest63 = explodedArchive62.manifest;
        explodedArchive62.recursive = false;
        java.util.jar.Manifest manifest66 = explodedArchive62.manifest;
        java.io.File file67 = explodedArchive62.manifestFile;
        java.io.File file68 = null;
        java.io.File file69 = explodedArchive62.getManifestFile(file68);
        java.util.Iterator<java.io.File> fileItor70 = fileEntryIterator59.listFiles(file69);
        java.io.File file71 = fileEntryIterator59.root;
        java.io.File file72 = fileEntryIterator59.root;
        java.io.File file73 = fileEntryIterator59.current;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator74 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        boolean boolean75 = fileEntryIterator74.hasNext();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator76 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator77 = entryComparator76.reversed();
        java.util.Comparator<java.io.File> fileComparator78 = fileComparator77.reversed();
        fileEntryIterator74.entryComparator = fileComparator78;
        java.util.Comparator<java.io.File> fileComparator80 = fileEntryIterator74.entryComparator;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator81 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator82 = entryComparator81.reversed();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator83 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator84 = entryComparator83.reversed();
        java.util.Comparator<java.io.File> fileComparator85 = entryComparator81.thenComparing(fileComparator84);
        java.util.Comparator<java.io.File> fileComparator86 = fileComparator80.thenComparing(fileComparator84);
        fileEntryIterator59.entryComparator = fileComparator80;
        java.util.Comparator<java.io.File> fileComparator88 = fileComparator58.thenComparing(fileComparator80);
        java.util.Comparator<java.io.File> fileComparator89 = fileComparator27.thenComparing(fileComparator80);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file39.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file39.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file52.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file52.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file69.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file69.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file73);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator77);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator78);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator80);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator82);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator84);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator85);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator86);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator88);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator89);
    }

    @Test
    public void test0364() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0364");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        boolean boolean1 = explodedArchive0.recursive;
        boolean boolean2 = explodedArchive0.recursive;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive3 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file4 = explodedArchive3.root;
        java.io.File file5 = null;
        explodedArchive3.manifestFile = file5;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive7 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest8 = explodedArchive7.manifest;
        explodedArchive7.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive11 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest12 = explodedArchive11.manifest;
        explodedArchive11.recursive = false;
        java.util.jar.Manifest manifest15 = explodedArchive11.manifest;
        java.io.File file16 = explodedArchive11.manifestFile;
        java.io.File file17 = null;
        java.io.File file18 = explodedArchive11.getManifestFile(file17);
        explodedArchive7.manifestFile = file17;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive20 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest21 = explodedArchive20.manifest;
        explodedArchive20.recursive = false;
        java.util.jar.Manifest manifest24 = explodedArchive20.manifest;
        java.io.File file25 = explodedArchive20.manifestFile;
        java.io.File file26 = null;
        java.io.File file27 = explodedArchive20.getManifestFile(file26);
        explodedArchive7.manifestFile = file27;
        java.io.File file29 = explodedArchive3.getManifestFile(file27);
        explodedArchive0.manifestFile = file27;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive31 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest32 = explodedArchive31.manifest;
        explodedArchive31.recursive = false;
        java.util.jar.Manifest manifest35 = explodedArchive31.manifest;
        java.io.File file36 = explodedArchive31.manifestFile;
        java.io.File file37 = null;
        java.io.File file38 = explodedArchive31.getManifestFile(file37);
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator39 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file40 = null;
        fileEntryIterator39.current = file40;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive42 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.lang.String str43 = explodedArchive42.toString();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive44 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file45 = explodedArchive44.root;
        java.io.File file46 = null;
        explodedArchive44.manifestFile = file46;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive48 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest49 = explodedArchive48.manifest;
        explodedArchive48.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive52 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest53 = explodedArchive52.manifest;
        explodedArchive52.recursive = false;
        java.util.jar.Manifest manifest56 = explodedArchive52.manifest;
        java.io.File file57 = explodedArchive52.manifestFile;
        java.io.File file58 = null;
        java.io.File file59 = explodedArchive52.getManifestFile(file58);
        explodedArchive48.manifestFile = file58;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive61 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest62 = explodedArchive61.manifest;
        explodedArchive61.recursive = false;
        java.util.jar.Manifest manifest65 = explodedArchive61.manifest;
        java.io.File file66 = explodedArchive61.manifestFile;
        java.io.File file67 = null;
        java.io.File file68 = explodedArchive61.getManifestFile(file67);
        explodedArchive48.manifestFile = file68;
        java.io.File file70 = explodedArchive44.getManifestFile(file68);
        java.io.File file71 = explodedArchive42.getManifestFile(file68);
        fileEntryIterator39.root = file68;
        explodedArchive31.root = file68;
        java.io.File file74 = explodedArchive0.getManifestFile(file68);
        java.util.jar.Manifest manifest75 = null;
        explodedArchive0.manifest = manifest75;
        // The following exception was thrown during execution in test generation
        try {
            java.net.URL uRL77 = explodedArchive0.getUrl();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file18.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file18.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file27.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file27.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file29.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file29.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file38.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file38.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str43 + "' != '" + "exploded archive" + "'", str43.equals("exploded archive"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file59.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file59.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file68.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file68.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file70.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file70.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file71.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file71.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file74.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file74.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
    }

    @Test
    public void test0365() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0365");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        boolean boolean1 = fileEntryIterator0.hasNext();
        fileEntryIterator0.recursive = false;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
    }

    @Test
    public void test0366() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0366");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file1 = null;
        fileEntryIterator0.current = file1;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive3 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest4 = explodedArchive3.manifest;
        explodedArchive3.recursive = false;
        java.util.jar.Manifest manifest7 = explodedArchive3.manifest;
        java.io.File file8 = explodedArchive3.manifestFile;
        java.io.File file9 = null;
        java.io.File file10 = explodedArchive3.getManifestFile(file9);
        java.util.Iterator<java.io.File> fileItor11 = fileEntryIterator0.listFiles(file10);
        java.io.File file12 = fileEntryIterator0.current;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator13 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file14 = null;
        fileEntryIterator13.current = file14;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive16 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest17 = explodedArchive16.manifest;
        explodedArchive16.recursive = false;
        java.util.jar.Manifest manifest20 = explodedArchive16.manifest;
        java.io.File file21 = explodedArchive16.manifestFile;
        java.io.File file22 = null;
        java.io.File file23 = explodedArchive16.getManifestFile(file22);
        java.util.Iterator<java.io.File> fileItor24 = fileEntryIterator13.listFiles(file23);
        java.util.ArrayDeque<java.util.Iterator<java.io.File>> fileItorQueue25 = new java.util.ArrayDeque<java.util.Iterator<java.io.File>>();
        boolean boolean26 = fileItorQueue25.add(fileItor24);
        fileEntryIterator0.stack = fileItorQueue25;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive28 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest29 = explodedArchive28.manifest;
        explodedArchive28.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive32 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest33 = explodedArchive32.manifest;
        explodedArchive32.recursive = false;
        java.util.jar.Manifest manifest36 = explodedArchive32.manifest;
        java.io.File file37 = explodedArchive32.manifestFile;
        java.io.File file38 = null;
        java.io.File file39 = explodedArchive32.getManifestFile(file38);
        explodedArchive28.manifestFile = file38;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive41 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest42 = explodedArchive41.manifest;
        explodedArchive41.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive45 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest46 = explodedArchive45.manifest;
        explodedArchive45.recursive = false;
        java.util.jar.Manifest manifest49 = explodedArchive45.manifest;
        java.io.File file50 = explodedArchive45.manifestFile;
        java.io.File file51 = null;
        java.io.File file52 = explodedArchive45.getManifestFile(file51);
        explodedArchive41.manifestFile = file51;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive54 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest55 = explodedArchive54.manifest;
        explodedArchive54.recursive = false;
        java.util.jar.Manifest manifest58 = explodedArchive54.manifest;
        java.io.File file59 = explodedArchive54.manifestFile;
        java.io.File file60 = null;
        java.io.File file61 = explodedArchive54.getManifestFile(file60);
        explodedArchive41.manifestFile = file61;
        explodedArchive28.root = file61;
        java.util.Iterator<java.io.File> fileItor64 = fileEntryIterator0.listFiles(file61);
        java.io.File file65 = fileEntryIterator0.root;
        // The following exception was thrown during execution in test generation
        try {
            org.springframework.boot.loader.archive.Archive.Entry entry66 = fileEntryIterator0.next();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file23.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file23.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file39.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file39.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file52.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file52.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file61.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file61.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file65);
    }

    @Test
    public void test0367() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0367");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest1 = explodedArchive0.manifest;
        explodedArchive0.recursive = false;
        java.io.File file4 = null;
        explodedArchive0.root = file4;
        java.io.File file6 = explodedArchive0.root;
        java.util.jar.Manifest manifest7 = null;
        explodedArchive0.manifest = manifest7;
        java.util.jar.Manifest manifest9 = null;
        explodedArchive0.manifest = manifest9;
        java.util.jar.Manifest manifest11 = explodedArchive0.manifest;
        org.springframework.boot.loader.archive.Archive.EntryFilter entryFilter12 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<org.springframework.boot.loader.archive.Archive> archiveList13 = explodedArchive0.getNestedArchives(entryFilter12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest11);
    }

    @Test
    public void test0368() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0368");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file1 = null;
        fileEntryIterator0.current = file1;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive3 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest4 = explodedArchive3.manifest;
        explodedArchive3.recursive = false;
        java.util.jar.Manifest manifest7 = explodedArchive3.manifest;
        java.io.File file8 = explodedArchive3.manifestFile;
        java.io.File file9 = null;
        java.io.File file10 = explodedArchive3.getManifestFile(file9);
        java.util.Iterator<java.io.File> fileItor11 = fileEntryIterator0.listFiles(file10);
        boolean boolean12 = fileEntryIterator0.hasNext();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator13 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        boolean boolean14 = fileEntryIterator13.recursive;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator15 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        boolean boolean16 = fileEntryIterator15.hasNext();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator17 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator18 = entryComparator17.reversed();
        java.util.Comparator<java.io.File> fileComparator19 = fileComparator18.reversed();
        fileEntryIterator15.entryComparator = fileComparator19;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive21 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file22 = explodedArchive21.root;
        java.io.File file23 = null;
        explodedArchive21.manifestFile = file23;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive25 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest26 = explodedArchive25.manifest;
        explodedArchive25.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive29 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest30 = explodedArchive29.manifest;
        explodedArchive29.recursive = false;
        java.util.jar.Manifest manifest33 = explodedArchive29.manifest;
        java.io.File file34 = explodedArchive29.manifestFile;
        java.io.File file35 = null;
        java.io.File file36 = explodedArchive29.getManifestFile(file35);
        explodedArchive25.manifestFile = file35;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive38 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest39 = explodedArchive38.manifest;
        explodedArchive38.recursive = false;
        java.util.jar.Manifest manifest42 = explodedArchive38.manifest;
        java.io.File file43 = explodedArchive38.manifestFile;
        java.io.File file44 = null;
        java.io.File file45 = explodedArchive38.getManifestFile(file44);
        explodedArchive25.manifestFile = file45;
        java.io.File file47 = explodedArchive21.getManifestFile(file45);
        java.util.Iterator<java.io.File> fileItor48 = fileEntryIterator15.listFiles(file47);
        fileEntryIterator13.root = file47;
        fileEntryIterator0.current = file47;
        java.util.Deque<java.util.Iterator<java.io.File>> fileItorQueue51 = null;
        fileEntryIterator0.stack = fileItorQueue51;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file36.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file36.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file45.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file45.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file47.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file47.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor48);
    }

    @Test
    public void test0369() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0369");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest1 = explodedArchive0.manifest;
        java.util.jar.Manifest manifest2 = null;
        explodedArchive0.manifest = manifest2;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator4 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        boolean boolean5 = fileEntryIterator4.hasNext();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator6 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator7 = entryComparator6.reversed();
        java.util.Comparator<java.io.File> fileComparator8 = fileComparator7.reversed();
        fileEntryIterator4.entryComparator = fileComparator8;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive10 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file11 = explodedArchive10.root;
        java.io.File file12 = null;
        explodedArchive10.manifestFile = file12;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive14 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest15 = explodedArchive14.manifest;
        explodedArchive14.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive18 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest19 = explodedArchive18.manifest;
        explodedArchive18.recursive = false;
        java.util.jar.Manifest manifest22 = explodedArchive18.manifest;
        java.io.File file23 = explodedArchive18.manifestFile;
        java.io.File file24 = null;
        java.io.File file25 = explodedArchive18.getManifestFile(file24);
        explodedArchive14.manifestFile = file24;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive27 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest28 = explodedArchive27.manifest;
        explodedArchive27.recursive = false;
        java.util.jar.Manifest manifest31 = explodedArchive27.manifest;
        java.io.File file32 = explodedArchive27.manifestFile;
        java.io.File file33 = null;
        java.io.File file34 = explodedArchive27.getManifestFile(file33);
        explodedArchive14.manifestFile = file34;
        java.io.File file36 = explodedArchive10.getManifestFile(file34);
        java.util.Iterator<java.io.File> fileItor37 = fileEntryIterator4.listFiles(file36);
        java.io.File file38 = explodedArchive0.getManifestFile(file36);
        // The following exception was thrown during execution in test generation
        try {
            org.springframework.boot.loader.archive.ExplodedArchive explodedArchive40 = new org.springframework.boot.loader.archive.ExplodedArchive(file38, true);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid source folder META-INF/MANIFEST.MF/META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file25.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file25.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file34.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file34.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file36.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file36.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file38.getParent(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file38.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
    }

    @Test
    public void test0370() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0370");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file1 = null;
        fileEntryIterator0.current = file1;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive3 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest4 = explodedArchive3.manifest;
        explodedArchive3.recursive = false;
        java.util.jar.Manifest manifest7 = explodedArchive3.manifest;
        java.io.File file8 = explodedArchive3.manifestFile;
        java.io.File file9 = null;
        java.io.File file10 = explodedArchive3.getManifestFile(file9);
        java.util.Iterator<java.io.File> fileItor11 = fileEntryIterator0.listFiles(file10);
        java.io.File file12 = fileEntryIterator0.root;
        java.io.File file13 = fileEntryIterator0.poll();
        java.util.Comparator<java.io.File> fileComparator14 = fileEntryIterator0.entryComparator;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator15 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        boolean boolean16 = fileEntryIterator15.hasNext();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator17 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator18 = entryComparator17.reversed();
        java.util.Comparator<java.io.File> fileComparator19 = fileComparator18.reversed();
        fileEntryIterator15.entryComparator = fileComparator19;
        java.util.Comparator<java.io.File> fileComparator21 = fileEntryIterator15.entryComparator;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator22 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator23 = entryComparator22.reversed();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator24 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator25 = entryComparator24.reversed();
        java.util.Comparator<java.io.File> fileComparator26 = entryComparator22.thenComparing(fileComparator25);
        java.util.Comparator<java.io.File> fileComparator27 = fileComparator21.thenComparing(fileComparator25);
        fileEntryIterator0.entryComparator = fileComparator27;
        java.io.File file29 = fileEntryIterator0.root;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator30 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file31 = null;
        fileEntryIterator30.current = file31;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive33 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest34 = explodedArchive33.manifest;
        explodedArchive33.recursive = false;
        java.util.jar.Manifest manifest37 = explodedArchive33.manifest;
        java.io.File file38 = explodedArchive33.manifestFile;
        java.io.File file39 = null;
        java.io.File file40 = explodedArchive33.getManifestFile(file39);
        java.util.Iterator<java.io.File> fileItor41 = fileEntryIterator30.listFiles(file40);
        boolean boolean42 = fileEntryIterator30.hasNext();
        java.util.Comparator<java.io.File> fileComparator43 = fileEntryIterator30.entryComparator;
        fileEntryIterator0.entryComparator = fileComparator43;
        java.io.File file45 = fileEntryIterator0.root;
        // The following exception was thrown during execution in test generation
        try {
            fileEntryIterator0.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: remove");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file40.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file40.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file45);
    }

    @Test
    public void test0371() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0371");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntry fileEntry0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntry();
        java.io.File file1 = fileEntry0.file;
        java.lang.String str2 = fileEntry0.name;
        java.io.File file3 = fileEntry0.file;
        java.io.File file4 = fileEntry0.file;
        java.lang.String str5 = fileEntry0.name;
        java.lang.String str6 = fileEntry0.getName();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntry fileEntry7 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntry();
        java.io.File file8 = fileEntry7.getFile();
        java.io.File file9 = fileEntry7.getFile();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive10 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file11 = explodedArchive10.root;
        java.io.File file12 = null;
        explodedArchive10.manifestFile = file12;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive14 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest15 = explodedArchive14.manifest;
        explodedArchive14.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive18 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest19 = explodedArchive18.manifest;
        explodedArchive18.recursive = false;
        java.util.jar.Manifest manifest22 = explodedArchive18.manifest;
        java.io.File file23 = explodedArchive18.manifestFile;
        java.io.File file24 = null;
        java.io.File file25 = explodedArchive18.getManifestFile(file24);
        explodedArchive14.manifestFile = file24;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive27 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest28 = explodedArchive27.manifest;
        explodedArchive27.recursive = false;
        java.util.jar.Manifest manifest31 = explodedArchive27.manifest;
        java.io.File file32 = explodedArchive27.manifestFile;
        java.io.File file33 = null;
        java.io.File file34 = explodedArchive27.getManifestFile(file33);
        explodedArchive14.manifestFile = file34;
        java.io.File file36 = explodedArchive10.getManifestFile(file34);
        fileEntry7.file = file36;
        java.io.File file38 = fileEntry7.file;
        fileEntry7.name = "exploded archive";
        java.io.File file41 = fileEntry7.file;
        java.io.File file42 = fileEntry7.getFile();
        java.io.File file43 = fileEntry7.file;
        fileEntry0.file = file43;
        java.io.File file45 = fileEntry0.getFile();
        java.lang.String str46 = fileEntry0.name;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file25.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file25.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file34.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file34.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file36.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file36.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file38.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file38.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file41.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file41.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file42.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file42.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file43.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file43.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file45.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file45.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str46);
    }

    @Test
    public void test0372() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0372");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file1 = null;
        fileEntryIterator0.current = file1;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive3 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest4 = explodedArchive3.manifest;
        explodedArchive3.recursive = false;
        java.util.jar.Manifest manifest7 = explodedArchive3.manifest;
        java.io.File file8 = explodedArchive3.manifestFile;
        java.io.File file9 = null;
        java.io.File file10 = explodedArchive3.getManifestFile(file9);
        java.util.Iterator<java.io.File> fileItor11 = fileEntryIterator0.listFiles(file10);
        java.io.File file12 = fileEntryIterator0.current;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator13 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file14 = null;
        fileEntryIterator13.current = file14;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive16 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest17 = explodedArchive16.manifest;
        explodedArchive16.recursive = false;
        java.util.jar.Manifest manifest20 = explodedArchive16.manifest;
        java.io.File file21 = explodedArchive16.manifestFile;
        java.io.File file22 = null;
        java.io.File file23 = explodedArchive16.getManifestFile(file22);
        java.util.Iterator<java.io.File> fileItor24 = fileEntryIterator13.listFiles(file23);
        java.util.ArrayDeque<java.util.Iterator<java.io.File>> fileItorQueue25 = new java.util.ArrayDeque<java.util.Iterator<java.io.File>>();
        boolean boolean26 = fileItorQueue25.add(fileItor24);
        fileEntryIterator0.stack = fileItorQueue25;
        java.util.Deque<java.util.Iterator<java.io.File>> fileItorQueue28 = fileEntryIterator0.stack;
        boolean boolean29 = fileEntryIterator0.recursive;
        fileEntryIterator0.recursive = true;
        java.io.File file32 = fileEntryIterator0.poll();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file23.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file23.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItorQueue28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file32);
    }

    @Test
    public void test0373() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0373");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest1 = explodedArchive0.manifest;
        java.util.jar.Manifest manifest2 = null;
        explodedArchive0.manifest = manifest2;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntry fileEntry4 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntry();
        java.lang.String str5 = fileEntry4.name;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator6 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file7 = null;
        fileEntryIterator6.current = file7;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive9 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest10 = explodedArchive9.manifest;
        explodedArchive9.recursive = false;
        java.util.jar.Manifest manifest13 = explodedArchive9.manifest;
        java.io.File file14 = explodedArchive9.manifestFile;
        java.io.File file15 = null;
        java.io.File file16 = explodedArchive9.getManifestFile(file15);
        java.util.Iterator<java.io.File> fileItor17 = fileEntryIterator6.listFiles(file16);
        java.io.File file18 = fileEntryIterator6.current;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator19 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file20 = null;
        fileEntryIterator19.current = file20;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive22 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest23 = explodedArchive22.manifest;
        explodedArchive22.recursive = false;
        java.util.jar.Manifest manifest26 = explodedArchive22.manifest;
        java.io.File file27 = explodedArchive22.manifestFile;
        java.io.File file28 = null;
        java.io.File file29 = explodedArchive22.getManifestFile(file28);
        java.util.Iterator<java.io.File> fileItor30 = fileEntryIterator19.listFiles(file29);
        java.util.ArrayDeque<java.util.Iterator<java.io.File>> fileItorQueue31 = new java.util.ArrayDeque<java.util.Iterator<java.io.File>>();
        boolean boolean32 = fileItorQueue31.add(fileItor30);
        fileEntryIterator6.stack = fileItorQueue31;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive34 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest35 = explodedArchive34.manifest;
        explodedArchive34.recursive = false;
        java.io.File file38 = null;
        explodedArchive34.root = file38;
        java.io.File file40 = explodedArchive34.root;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive41 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest42 = explodedArchive41.manifest;
        explodedArchive41.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive45 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest46 = explodedArchive45.manifest;
        explodedArchive45.recursive = false;
        java.util.jar.Manifest manifest49 = explodedArchive45.manifest;
        java.io.File file50 = explodedArchive45.manifestFile;
        java.io.File file51 = null;
        java.io.File file52 = explodedArchive45.getManifestFile(file51);
        explodedArchive41.manifestFile = file51;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive54 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest55 = explodedArchive54.manifest;
        explodedArchive54.recursive = false;
        java.util.jar.Manifest manifest58 = explodedArchive54.manifest;
        java.io.File file59 = explodedArchive54.manifestFile;
        java.io.File file60 = null;
        java.io.File file61 = explodedArchive54.getManifestFile(file60);
        explodedArchive41.manifestFile = file61;
        java.io.File file63 = explodedArchive34.getManifestFile(file61);
        fileEntryIterator6.root = file61;
        fileEntry4.file = file61;
        java.io.File file66 = explodedArchive0.getManifestFile(file61);
        java.lang.String str67 = explodedArchive0.toString();
        boolean boolean68 = explodedArchive0.recursive;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file16.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file16.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file29.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file29.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file52.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file52.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file61.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file61.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file63.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file63.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file66.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file66.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str67 + "' != '" + "exploded archive" + "'", str67.equals("exploded archive"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
    }

    @Test
    public void test0374() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0374");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file1 = null;
        fileEntryIterator0.current = file1;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive3 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.lang.String str4 = explodedArchive3.toString();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive5 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file6 = explodedArchive5.root;
        java.io.File file7 = null;
        explodedArchive5.manifestFile = file7;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive9 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest10 = explodedArchive9.manifest;
        explodedArchive9.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive13 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest14 = explodedArchive13.manifest;
        explodedArchive13.recursive = false;
        java.util.jar.Manifest manifest17 = explodedArchive13.manifest;
        java.io.File file18 = explodedArchive13.manifestFile;
        java.io.File file19 = null;
        java.io.File file20 = explodedArchive13.getManifestFile(file19);
        explodedArchive9.manifestFile = file19;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive22 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest23 = explodedArchive22.manifest;
        explodedArchive22.recursive = false;
        java.util.jar.Manifest manifest26 = explodedArchive22.manifest;
        java.io.File file27 = explodedArchive22.manifestFile;
        java.io.File file28 = null;
        java.io.File file29 = explodedArchive22.getManifestFile(file28);
        explodedArchive9.manifestFile = file29;
        java.io.File file31 = explodedArchive5.getManifestFile(file29);
        java.io.File file32 = explodedArchive3.getManifestFile(file29);
        fileEntryIterator0.root = file29;
        java.io.File file34 = fileEntryIterator0.poll();
        boolean boolean35 = fileEntryIterator0.hasNext();
        java.io.File file36 = fileEntryIterator0.poll();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str4 + "' != '" + "exploded archive" + "'", str4.equals("exploded archive"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file20.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file20.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file29.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file29.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file31.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file31.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file32.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file32.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file36);
    }

    @Test
    public void test0375() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0375");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest1 = explodedArchive0.manifest;
        explodedArchive0.recursive = false;
        java.io.File file4 = null;
        explodedArchive0.root = file4;
        java.io.File file6 = explodedArchive0.root;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive7 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest8 = explodedArchive7.manifest;
        explodedArchive7.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive11 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest12 = explodedArchive11.manifest;
        explodedArchive11.recursive = false;
        java.util.jar.Manifest manifest15 = explodedArchive11.manifest;
        java.io.File file16 = explodedArchive11.manifestFile;
        java.io.File file17 = null;
        java.io.File file18 = explodedArchive11.getManifestFile(file17);
        explodedArchive7.manifestFile = file17;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive20 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest21 = explodedArchive20.manifest;
        explodedArchive20.recursive = false;
        java.util.jar.Manifest manifest24 = explodedArchive20.manifest;
        java.io.File file25 = explodedArchive20.manifestFile;
        java.io.File file26 = null;
        java.io.File file27 = explodedArchive20.getManifestFile(file26);
        explodedArchive7.manifestFile = file27;
        java.io.File file29 = explodedArchive0.getManifestFile(file27);
        java.util.jar.Manifest manifest30 = explodedArchive0.manifest;
        // The following exception was thrown during execution in test generation
        try {
            java.util.jar.Manifest manifest31 = explodedArchive0.getManifest();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file18.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file18.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file27.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file27.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file29.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file29.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest30);
    }

    @Test
    public void test0376() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0376");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest1 = explodedArchive0.manifest;
        explodedArchive0.recursive = false;
        java.util.jar.Manifest manifest4 = explodedArchive0.manifest;
        java.util.jar.Manifest manifest5 = null;
        explodedArchive0.manifest = manifest5;
        org.springframework.boot.loader.archive.Archive.EntryFilter entryFilter7 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<org.springframework.boot.loader.archive.Archive> archiveList8 = explodedArchive0.getNestedArchives(entryFilter7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest4);
    }

    @Test
    public void test0377() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0377");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest1 = explodedArchive0.manifest;
        java.util.jar.Manifest manifest2 = null;
        explodedArchive0.manifest = manifest2;
        java.lang.Class<?> wildcardClass4 = explodedArchive0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass4);
    }

    @Test
    public void test0378() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0378");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        boolean boolean1 = fileEntryIterator0.recursive;
        java.io.File file2 = fileEntryIterator0.current;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator3 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file4 = null;
        fileEntryIterator3.current = file4;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive6 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest7 = explodedArchive6.manifest;
        explodedArchive6.recursive = false;
        java.util.jar.Manifest manifest10 = explodedArchive6.manifest;
        java.io.File file11 = explodedArchive6.manifestFile;
        java.io.File file12 = null;
        java.io.File file13 = explodedArchive6.getManifestFile(file12);
        java.util.Iterator<java.io.File> fileItor14 = fileEntryIterator3.listFiles(file13);
        java.io.File file15 = fileEntryIterator3.root;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive16 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.lang.String str17 = explodedArchive16.toString();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive18 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file19 = explodedArchive18.root;
        java.io.File file20 = null;
        explodedArchive18.manifestFile = file20;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive22 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest23 = explodedArchive22.manifest;
        explodedArchive22.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive26 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest27 = explodedArchive26.manifest;
        explodedArchive26.recursive = false;
        java.util.jar.Manifest manifest30 = explodedArchive26.manifest;
        java.io.File file31 = explodedArchive26.manifestFile;
        java.io.File file32 = null;
        java.io.File file33 = explodedArchive26.getManifestFile(file32);
        explodedArchive22.manifestFile = file32;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive35 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest36 = explodedArchive35.manifest;
        explodedArchive35.recursive = false;
        java.util.jar.Manifest manifest39 = explodedArchive35.manifest;
        java.io.File file40 = explodedArchive35.manifestFile;
        java.io.File file41 = null;
        java.io.File file42 = explodedArchive35.getManifestFile(file41);
        explodedArchive22.manifestFile = file42;
        java.io.File file44 = explodedArchive18.getManifestFile(file42);
        java.io.File file45 = explodedArchive16.getManifestFile(file42);
        fileEntryIterator3.root = file42;
        java.util.Iterator<java.io.File> fileItor47 = fileEntryIterator0.listFiles(file42);
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator48 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        boolean boolean49 = fileEntryIterator48.hasNext();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator50 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator51 = entryComparator50.reversed();
        java.util.Comparator<java.io.File> fileComparator52 = fileComparator51.reversed();
        fileEntryIterator48.entryComparator = fileComparator52;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive54 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file55 = explodedArchive54.root;
        java.io.File file56 = null;
        explodedArchive54.manifestFile = file56;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive58 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest59 = explodedArchive58.manifest;
        explodedArchive58.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive62 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest63 = explodedArchive62.manifest;
        explodedArchive62.recursive = false;
        java.util.jar.Manifest manifest66 = explodedArchive62.manifest;
        java.io.File file67 = explodedArchive62.manifestFile;
        java.io.File file68 = null;
        java.io.File file69 = explodedArchive62.getManifestFile(file68);
        explodedArchive58.manifestFile = file68;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive71 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest72 = explodedArchive71.manifest;
        explodedArchive71.recursive = false;
        java.util.jar.Manifest manifest75 = explodedArchive71.manifest;
        java.io.File file76 = explodedArchive71.manifestFile;
        java.io.File file77 = null;
        java.io.File file78 = explodedArchive71.getManifestFile(file77);
        explodedArchive58.manifestFile = file78;
        java.io.File file80 = explodedArchive54.getManifestFile(file78);
        java.util.Iterator<java.io.File> fileItor81 = fileEntryIterator48.listFiles(file80);
        boolean boolean82 = fileEntryIterator48.recursive;
        java.util.Deque<java.util.Iterator<java.io.File>> fileItorQueue83 = fileEntryIterator48.stack;
        fileEntryIterator0.stack = fileItorQueue83;
        boolean boolean85 = fileEntryIterator0.hasNext();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file13.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file13.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str17 + "' != '" + "exploded archive" + "'", str17.equals("exploded archive"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file33.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file33.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file42.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file42.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file44.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file44.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file45.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file45.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file69.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file69.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest75);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file76);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file78);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file78.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file78.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file80);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file80.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file80.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor81);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItorQueue83);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
    }

    @Test
    public void test0379() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0379");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntry fileEntry0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntry();
        java.lang.String str1 = fileEntry0.getName();
        java.lang.String str2 = fileEntry0.getName();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator3 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator4 = entryComparator3.reversed();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive5 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file6 = explodedArchive5.root;
        java.io.File file7 = null;
        explodedArchive5.manifestFile = file7;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive9 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest10 = explodedArchive9.manifest;
        explodedArchive9.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive13 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest14 = explodedArchive13.manifest;
        explodedArchive13.recursive = false;
        java.util.jar.Manifest manifest17 = explodedArchive13.manifest;
        java.io.File file18 = explodedArchive13.manifestFile;
        java.io.File file19 = null;
        java.io.File file20 = explodedArchive13.getManifestFile(file19);
        explodedArchive9.manifestFile = file19;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive22 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest23 = explodedArchive22.manifest;
        explodedArchive22.recursive = false;
        java.util.jar.Manifest manifest26 = explodedArchive22.manifest;
        java.io.File file27 = explodedArchive22.manifestFile;
        java.io.File file28 = null;
        java.io.File file29 = explodedArchive22.getManifestFile(file28);
        explodedArchive9.manifestFile = file29;
        java.io.File file31 = explodedArchive5.getManifestFile(file29);
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive32 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest33 = explodedArchive32.manifest;
        explodedArchive32.recursive = false;
        java.io.File file36 = null;
        explodedArchive32.root = file36;
        java.io.File file38 = explodedArchive32.root;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive39 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest40 = explodedArchive39.manifest;
        explodedArchive39.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive43 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest44 = explodedArchive43.manifest;
        explodedArchive43.recursive = false;
        java.util.jar.Manifest manifest47 = explodedArchive43.manifest;
        java.io.File file48 = explodedArchive43.manifestFile;
        java.io.File file49 = null;
        java.io.File file50 = explodedArchive43.getManifestFile(file49);
        explodedArchive39.manifestFile = file49;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive52 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest53 = explodedArchive52.manifest;
        explodedArchive52.recursive = false;
        java.util.jar.Manifest manifest56 = explodedArchive52.manifest;
        java.io.File file57 = explodedArchive52.manifestFile;
        java.io.File file58 = null;
        java.io.File file59 = explodedArchive52.getManifestFile(file58);
        explodedArchive39.manifestFile = file59;
        java.io.File file61 = explodedArchive32.getManifestFile(file59);
        int int62 = entryComparator3.compare(file31, file59);
        fileEntry0.file = file59;
        java.io.File file64 = fileEntry0.getFile();
        java.io.File file65 = fileEntry0.getFile();
        fileEntry0.name = "file:/server/study-execution/new-nimrod/nimrod-hunoroutput-test-dest/spring-boot/af20dc6cc45c032573413c401f9f73aa75371744/randoop_6/META-INF/MANIFEST.MF";
        boolean boolean68 = fileEntry0.isDirectory();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file20.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file20.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file29.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file29.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file31.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file31.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file50.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file50.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file59.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file59.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file61.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file61.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 21 + "'", int62 == 21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file64.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file64.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file65.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file65.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
    }

    @Test
    public void test0380() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0380");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file1 = null;
        fileEntryIterator0.current = file1;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive3 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest4 = explodedArchive3.manifest;
        explodedArchive3.recursive = false;
        java.util.jar.Manifest manifest7 = explodedArchive3.manifest;
        java.io.File file8 = explodedArchive3.manifestFile;
        java.io.File file9 = null;
        java.io.File file10 = explodedArchive3.getManifestFile(file9);
        java.util.Iterator<java.io.File> fileItor11 = fileEntryIterator0.listFiles(file10);
        boolean boolean12 = fileEntryIterator0.hasNext();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator13 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator14 = entryComparator13.reversed();
        java.util.Comparator<java.io.File> fileComparator15 = entryComparator13.reversed();
        fileEntryIterator0.entryComparator = fileComparator15;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator17 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file18 = null;
        fileEntryIterator17.current = file18;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive20 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.lang.String str21 = explodedArchive20.toString();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive22 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file23 = explodedArchive22.root;
        java.io.File file24 = null;
        explodedArchive22.manifestFile = file24;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive26 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest27 = explodedArchive26.manifest;
        explodedArchive26.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive30 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest31 = explodedArchive30.manifest;
        explodedArchive30.recursive = false;
        java.util.jar.Manifest manifest34 = explodedArchive30.manifest;
        java.io.File file35 = explodedArchive30.manifestFile;
        java.io.File file36 = null;
        java.io.File file37 = explodedArchive30.getManifestFile(file36);
        explodedArchive26.manifestFile = file36;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive39 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest40 = explodedArchive39.manifest;
        explodedArchive39.recursive = false;
        java.util.jar.Manifest manifest43 = explodedArchive39.manifest;
        java.io.File file44 = explodedArchive39.manifestFile;
        java.io.File file45 = null;
        java.io.File file46 = explodedArchive39.getManifestFile(file45);
        explodedArchive26.manifestFile = file46;
        java.io.File file48 = explodedArchive22.getManifestFile(file46);
        java.io.File file49 = explodedArchive20.getManifestFile(file46);
        fileEntryIterator17.root = file46;
        fileEntryIterator0.current = file46;
        boolean boolean52 = fileEntryIterator0.hasNext();
        java.io.File file53 = fileEntryIterator0.current;
        java.io.File file54 = fileEntryIterator0.current;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive55 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest56 = explodedArchive55.manifest;
        explodedArchive55.recursive = false;
        java.util.jar.Manifest manifest59 = explodedArchive55.manifest;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive60 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.lang.String str61 = explodedArchive60.toString();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive62 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file63 = explodedArchive62.root;
        java.io.File file64 = null;
        explodedArchive62.manifestFile = file64;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive66 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest67 = explodedArchive66.manifest;
        explodedArchive66.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive70 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest71 = explodedArchive70.manifest;
        explodedArchive70.recursive = false;
        java.util.jar.Manifest manifest74 = explodedArchive70.manifest;
        java.io.File file75 = explodedArchive70.manifestFile;
        java.io.File file76 = null;
        java.io.File file77 = explodedArchive70.getManifestFile(file76);
        explodedArchive66.manifestFile = file76;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive79 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest80 = explodedArchive79.manifest;
        explodedArchive79.recursive = false;
        java.util.jar.Manifest manifest83 = explodedArchive79.manifest;
        java.io.File file84 = explodedArchive79.manifestFile;
        java.io.File file85 = null;
        java.io.File file86 = explodedArchive79.getManifestFile(file85);
        explodedArchive66.manifestFile = file86;
        java.io.File file88 = explodedArchive62.getManifestFile(file86);
        java.io.File file89 = explodedArchive60.getManifestFile(file86);
        explodedArchive55.root = file86;
        fileEntryIterator0.current = file86;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str21 + "' != '" + "exploded archive" + "'", str21.equals("exploded archive"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file37.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file37.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file46.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file46.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file48.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file48.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file49.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file49.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file53.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file53.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file54.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file54.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str61 + "' != '" + "exploded archive" + "'", str61.equals("exploded archive"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file75);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file77);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file77.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file77.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest80);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest83);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file84);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file86);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file86.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file86.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file88);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file88.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file88.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file89);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file89.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file89.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
    }

    @Test
    public void test0381() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0381");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest1 = explodedArchive0.manifest;
        explodedArchive0.recursive = false;
        java.io.File file4 = null;
        explodedArchive0.root = file4;
        java.io.File file6 = explodedArchive0.root;
        java.util.jar.Manifest manifest7 = null;
        explodedArchive0.manifest = manifest7;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntry fileEntry9 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntry();
        java.io.File file10 = fileEntry9.file;
        java.lang.String str11 = fileEntry9.name;
        java.io.File file12 = fileEntry9.file;
        java.io.File file13 = fileEntry9.file;
        java.lang.String str14 = fileEntry9.name;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive15 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.lang.String str16 = explodedArchive15.toString();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive17 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file18 = explodedArchive17.root;
        java.io.File file19 = null;
        explodedArchive17.manifestFile = file19;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive21 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest22 = explodedArchive21.manifest;
        explodedArchive21.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive25 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest26 = explodedArchive25.manifest;
        explodedArchive25.recursive = false;
        java.util.jar.Manifest manifest29 = explodedArchive25.manifest;
        java.io.File file30 = explodedArchive25.manifestFile;
        java.io.File file31 = null;
        java.io.File file32 = explodedArchive25.getManifestFile(file31);
        explodedArchive21.manifestFile = file31;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive34 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest35 = explodedArchive34.manifest;
        explodedArchive34.recursive = false;
        java.util.jar.Manifest manifest38 = explodedArchive34.manifest;
        java.io.File file39 = explodedArchive34.manifestFile;
        java.io.File file40 = null;
        java.io.File file41 = explodedArchive34.getManifestFile(file40);
        explodedArchive21.manifestFile = file41;
        java.io.File file43 = explodedArchive17.getManifestFile(file41);
        java.io.File file44 = explodedArchive15.getManifestFile(file41);
        fileEntry9.file = file41;
        java.io.File file46 = fileEntry9.getFile();
        java.lang.String str47 = fileEntry9.name;
        fileEntry9.name = "exploded archive";
        // The following exception was thrown during execution in test generation
        try {
            org.springframework.boot.loader.archive.Archive archive50 = explodedArchive0.getNestedArchive((org.springframework.boot.loader.archive.Archive.Entry) fileEntry9);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: File must exist");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str16 + "' != '" + "exploded archive" + "'", str16.equals("exploded archive"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file32.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file32.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file41.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file41.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file43.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file43.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file44.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file44.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file46.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file46.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str47);
    }

    @Test
    public void test0382() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0382");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest1 = explodedArchive0.manifest;
        java.util.jar.Manifest manifest2 = null;
        explodedArchive0.manifest = manifest2;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator4 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        boolean boolean5 = fileEntryIterator4.hasNext();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator6 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator7 = entryComparator6.reversed();
        java.util.Comparator<java.io.File> fileComparator8 = fileComparator7.reversed();
        fileEntryIterator4.entryComparator = fileComparator8;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive10 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file11 = explodedArchive10.root;
        java.io.File file12 = null;
        explodedArchive10.manifestFile = file12;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive14 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest15 = explodedArchive14.manifest;
        explodedArchive14.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive18 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest19 = explodedArchive18.manifest;
        explodedArchive18.recursive = false;
        java.util.jar.Manifest manifest22 = explodedArchive18.manifest;
        java.io.File file23 = explodedArchive18.manifestFile;
        java.io.File file24 = null;
        java.io.File file25 = explodedArchive18.getManifestFile(file24);
        explodedArchive14.manifestFile = file24;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive27 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest28 = explodedArchive27.manifest;
        explodedArchive27.recursive = false;
        java.util.jar.Manifest manifest31 = explodedArchive27.manifest;
        java.io.File file32 = explodedArchive27.manifestFile;
        java.io.File file33 = null;
        java.io.File file34 = explodedArchive27.getManifestFile(file33);
        explodedArchive14.manifestFile = file34;
        java.io.File file36 = explodedArchive10.getManifestFile(file34);
        java.util.Iterator<java.io.File> fileItor37 = fileEntryIterator4.listFiles(file36);
        java.io.File file38 = explodedArchive0.getManifestFile(file36);
        java.lang.String str39 = explodedArchive0.toString();
        java.io.File file40 = explodedArchive0.root;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass41 = file40.getClass();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file25.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file25.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file34.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file34.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file36.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file36.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file38.getParent(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file38.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str39 + "' != '" + "exploded archive" + "'", str39.equals("exploded archive"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file40);
    }

    @Test
    public void test0383() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0383");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest1 = explodedArchive0.manifest;
        explodedArchive0.recursive = false;
        java.io.File file4 = null;
        explodedArchive0.root = file4;
        java.io.File file6 = explodedArchive0.root;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive7 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest8 = explodedArchive7.manifest;
        explodedArchive7.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive11 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest12 = explodedArchive11.manifest;
        explodedArchive11.recursive = false;
        java.util.jar.Manifest manifest15 = explodedArchive11.manifest;
        java.io.File file16 = explodedArchive11.manifestFile;
        java.io.File file17 = null;
        java.io.File file18 = explodedArchive11.getManifestFile(file17);
        explodedArchive7.manifestFile = file17;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive20 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest21 = explodedArchive20.manifest;
        explodedArchive20.recursive = false;
        java.util.jar.Manifest manifest24 = explodedArchive20.manifest;
        java.io.File file25 = explodedArchive20.manifestFile;
        java.io.File file26 = null;
        java.io.File file27 = explodedArchive20.getManifestFile(file26);
        explodedArchive7.manifestFile = file27;
        java.io.File file29 = explodedArchive0.getManifestFile(file27);
        org.springframework.boot.loader.archive.Archive.EntryFilter entryFilter30 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<org.springframework.boot.loader.archive.Archive> archiveList31 = explodedArchive0.getNestedArchives(entryFilter30);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file18.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file18.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file27.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file27.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file29.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file29.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
    }

    @Test
    public void test0384() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0384");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file1 = explodedArchive0.root;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive2 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest3 = explodedArchive2.manifest;
        explodedArchive2.recursive = false;
        java.util.jar.Manifest manifest6 = explodedArchive2.manifest;
        java.io.File file7 = explodedArchive2.manifestFile;
        java.io.File file8 = null;
        java.io.File file9 = explodedArchive2.getManifestFile(file8);
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator10 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file11 = null;
        fileEntryIterator10.current = file11;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive13 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.lang.String str14 = explodedArchive13.toString();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive15 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file16 = explodedArchive15.root;
        java.io.File file17 = null;
        explodedArchive15.manifestFile = file17;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive19 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest20 = explodedArchive19.manifest;
        explodedArchive19.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive23 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest24 = explodedArchive23.manifest;
        explodedArchive23.recursive = false;
        java.util.jar.Manifest manifest27 = explodedArchive23.manifest;
        java.io.File file28 = explodedArchive23.manifestFile;
        java.io.File file29 = null;
        java.io.File file30 = explodedArchive23.getManifestFile(file29);
        explodedArchive19.manifestFile = file29;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive32 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest33 = explodedArchive32.manifest;
        explodedArchive32.recursive = false;
        java.util.jar.Manifest manifest36 = explodedArchive32.manifest;
        java.io.File file37 = explodedArchive32.manifestFile;
        java.io.File file38 = null;
        java.io.File file39 = explodedArchive32.getManifestFile(file38);
        explodedArchive19.manifestFile = file39;
        java.io.File file41 = explodedArchive15.getManifestFile(file39);
        java.io.File file42 = explodedArchive13.getManifestFile(file39);
        fileEntryIterator10.root = file39;
        explodedArchive2.root = file39;
        java.io.File file45 = explodedArchive0.getManifestFile(file39);
        java.util.jar.Manifest manifest46 = null;
        explodedArchive0.manifest = manifest46;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator<org.springframework.boot.loader.archive.Archive.Entry> entryItor48 = explodedArchive0.iterator();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file9.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file9.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str14 + "' != '" + "exploded archive" + "'", str14.equals("exploded archive"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file30.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file30.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file39.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file39.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file41.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file41.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file42.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file42.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file45.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file45.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
    }

    @Test
    public void test0385() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0385");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest1 = explodedArchive0.manifest;
        java.util.jar.Manifest manifest2 = null;
        explodedArchive0.manifest = manifest2;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntry fileEntry4 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntry();
        java.lang.String str5 = fileEntry4.name;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator6 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file7 = null;
        fileEntryIterator6.current = file7;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive9 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest10 = explodedArchive9.manifest;
        explodedArchive9.recursive = false;
        java.util.jar.Manifest manifest13 = explodedArchive9.manifest;
        java.io.File file14 = explodedArchive9.manifestFile;
        java.io.File file15 = null;
        java.io.File file16 = explodedArchive9.getManifestFile(file15);
        java.util.Iterator<java.io.File> fileItor17 = fileEntryIterator6.listFiles(file16);
        java.io.File file18 = fileEntryIterator6.current;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator19 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file20 = null;
        fileEntryIterator19.current = file20;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive22 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest23 = explodedArchive22.manifest;
        explodedArchive22.recursive = false;
        java.util.jar.Manifest manifest26 = explodedArchive22.manifest;
        java.io.File file27 = explodedArchive22.manifestFile;
        java.io.File file28 = null;
        java.io.File file29 = explodedArchive22.getManifestFile(file28);
        java.util.Iterator<java.io.File> fileItor30 = fileEntryIterator19.listFiles(file29);
        java.util.ArrayDeque<java.util.Iterator<java.io.File>> fileItorQueue31 = new java.util.ArrayDeque<java.util.Iterator<java.io.File>>();
        boolean boolean32 = fileItorQueue31.add(fileItor30);
        fileEntryIterator6.stack = fileItorQueue31;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive34 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest35 = explodedArchive34.manifest;
        explodedArchive34.recursive = false;
        java.io.File file38 = null;
        explodedArchive34.root = file38;
        java.io.File file40 = explodedArchive34.root;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive41 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest42 = explodedArchive41.manifest;
        explodedArchive41.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive45 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest46 = explodedArchive45.manifest;
        explodedArchive45.recursive = false;
        java.util.jar.Manifest manifest49 = explodedArchive45.manifest;
        java.io.File file50 = explodedArchive45.manifestFile;
        java.io.File file51 = null;
        java.io.File file52 = explodedArchive45.getManifestFile(file51);
        explodedArchive41.manifestFile = file51;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive54 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest55 = explodedArchive54.manifest;
        explodedArchive54.recursive = false;
        java.util.jar.Manifest manifest58 = explodedArchive54.manifest;
        java.io.File file59 = explodedArchive54.manifestFile;
        java.io.File file60 = null;
        java.io.File file61 = explodedArchive54.getManifestFile(file60);
        explodedArchive41.manifestFile = file61;
        java.io.File file63 = explodedArchive34.getManifestFile(file61);
        fileEntryIterator6.root = file61;
        fileEntry4.file = file61;
        java.io.File file66 = explodedArchive0.getManifestFile(file61);
        java.util.jar.Manifest manifest67 = null;
        explodedArchive0.manifest = manifest67;
        // The following exception was thrown during execution in test generation
        try {
            java.util.jar.Manifest manifest69 = explodedArchive0.getManifest();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file16.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file16.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file29.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file29.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file52.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file52.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file61.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file61.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file63.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file63.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file66.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file66.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
    }

    @Test
    public void test0386() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0386");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest1 = explodedArchive0.manifest;
        explodedArchive0.recursive = false;
        java.io.File file4 = null;
        explodedArchive0.root = file4;
        java.io.File file6 = explodedArchive0.root;
        java.util.jar.Manifest manifest7 = null;
        explodedArchive0.manifest = manifest7;
        java.util.jar.Manifest manifest9 = null;
        explodedArchive0.manifest = manifest9;
        java.util.jar.Manifest manifest11 = explodedArchive0.manifest;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Spliterator<org.springframework.boot.loader.archive.Archive.Entry> entrySpliterator12 = explodedArchive0.spliterator();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest11);
    }

    @Test
    public void test0387() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0387");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        boolean boolean1 = fileEntryIterator0.hasNext();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator2 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator3 = entryComparator2.reversed();
        java.util.Comparator<java.io.File> fileComparator4 = fileComparator3.reversed();
        fileEntryIterator0.entryComparator = fileComparator4;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive6 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file7 = explodedArchive6.root;
        java.io.File file8 = null;
        explodedArchive6.manifestFile = file8;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive10 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest11 = explodedArchive10.manifest;
        explodedArchive10.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive14 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest15 = explodedArchive14.manifest;
        explodedArchive14.recursive = false;
        java.util.jar.Manifest manifest18 = explodedArchive14.manifest;
        java.io.File file19 = explodedArchive14.manifestFile;
        java.io.File file20 = null;
        java.io.File file21 = explodedArchive14.getManifestFile(file20);
        explodedArchive10.manifestFile = file20;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive23 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest24 = explodedArchive23.manifest;
        explodedArchive23.recursive = false;
        java.util.jar.Manifest manifest27 = explodedArchive23.manifest;
        java.io.File file28 = explodedArchive23.manifestFile;
        java.io.File file29 = null;
        java.io.File file30 = explodedArchive23.getManifestFile(file29);
        explodedArchive10.manifestFile = file30;
        java.io.File file32 = explodedArchive6.getManifestFile(file30);
        java.util.Iterator<java.io.File> fileItor33 = fileEntryIterator0.listFiles(file32);
        boolean boolean34 = fileEntryIterator0.recursive;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator35 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator36 = entryComparator35.reversed();
        java.util.Comparator<java.io.File> fileComparator37 = entryComparator35.reversed();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive38 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest39 = explodedArchive38.manifest;
        explodedArchive38.recursive = false;
        java.util.jar.Manifest manifest42 = explodedArchive38.manifest;
        java.io.File file43 = explodedArchive38.manifestFile;
        java.io.File file44 = null;
        java.io.File file45 = explodedArchive38.getManifestFile(file44);
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive46 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest47 = explodedArchive46.manifest;
        explodedArchive46.recursive = false;
        java.io.File file50 = null;
        explodedArchive46.root = file50;
        java.io.File file52 = explodedArchive46.root;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive53 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest54 = explodedArchive53.manifest;
        explodedArchive53.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive57 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest58 = explodedArchive57.manifest;
        explodedArchive57.recursive = false;
        java.util.jar.Manifest manifest61 = explodedArchive57.manifest;
        java.io.File file62 = explodedArchive57.manifestFile;
        java.io.File file63 = null;
        java.io.File file64 = explodedArchive57.getManifestFile(file63);
        explodedArchive53.manifestFile = file63;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive66 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest67 = explodedArchive66.manifest;
        explodedArchive66.recursive = false;
        java.util.jar.Manifest manifest70 = explodedArchive66.manifest;
        java.io.File file71 = explodedArchive66.manifestFile;
        java.io.File file72 = null;
        java.io.File file73 = explodedArchive66.getManifestFile(file72);
        explodedArchive53.manifestFile = file73;
        java.io.File file75 = explodedArchive46.getManifestFile(file73);
        int int76 = entryComparator35.compare(file45, file73);
        java.util.Iterator<java.io.File> fileItor77 = fileEntryIterator0.listFiles(file45);
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator78 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        boolean boolean79 = fileEntryIterator78.recursive;
        java.io.File file80 = fileEntryIterator78.current;
        boolean boolean81 = fileEntryIterator78.hasNext();
        boolean boolean82 = fileEntryIterator78.recursive;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator83 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator84 = entryComparator83.reversed();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator85 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator86 = entryComparator85.reversed();
        java.util.Comparator<java.io.File> fileComparator87 = entryComparator83.thenComparing(fileComparator86);
        fileEntryIterator78.entryComparator = fileComparator87;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator89 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator90 = entryComparator89.reversed();
        java.util.Comparator<java.io.File> fileComparator91 = entryComparator89.reversed();
        java.util.Comparator<java.io.File> fileComparator92 = fileComparator87.thenComparing(fileComparator91);
        fileEntryIterator0.entryComparator = fileComparator87;
        // The following exception was thrown during execution in test generation
        try {
            fileEntryIterator0.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: remove");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file21.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file21.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file30.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file30.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file32.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file32.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file45.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file45.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file64.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file64.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file73);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file73.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file73.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file75);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file75.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file75.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor77);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file80);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator84);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator86);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator87);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator90);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator91);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator92);
    }

    @Test
    public void test0388() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0388");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntry fileEntry0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntry();
        java.io.File file1 = fileEntry0.file;
        java.io.File file2 = fileEntry0.getFile();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive3 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest4 = explodedArchive3.manifest;
        explodedArchive3.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive7 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest8 = explodedArchive7.manifest;
        explodedArchive7.recursive = false;
        java.util.jar.Manifest manifest11 = explodedArchive7.manifest;
        java.io.File file12 = explodedArchive7.manifestFile;
        java.io.File file13 = null;
        java.io.File file14 = explodedArchive7.getManifestFile(file13);
        explodedArchive3.manifestFile = file13;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive16 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest17 = explodedArchive16.manifest;
        explodedArchive16.recursive = false;
        java.util.jar.Manifest manifest20 = explodedArchive16.manifest;
        java.io.File file21 = explodedArchive16.manifestFile;
        java.io.File file22 = null;
        java.io.File file23 = explodedArchive16.getManifestFile(file22);
        explodedArchive3.manifestFile = file23;
        boolean boolean25 = explodedArchive3.recursive;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive26 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest27 = explodedArchive26.manifest;
        java.util.jar.Manifest manifest28 = null;
        explodedArchive26.manifest = manifest28;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntry fileEntry30 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntry();
        java.lang.String str31 = fileEntry30.name;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator32 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file33 = null;
        fileEntryIterator32.current = file33;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive35 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest36 = explodedArchive35.manifest;
        explodedArchive35.recursive = false;
        java.util.jar.Manifest manifest39 = explodedArchive35.manifest;
        java.io.File file40 = explodedArchive35.manifestFile;
        java.io.File file41 = null;
        java.io.File file42 = explodedArchive35.getManifestFile(file41);
        java.util.Iterator<java.io.File> fileItor43 = fileEntryIterator32.listFiles(file42);
        java.io.File file44 = fileEntryIterator32.current;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator45 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file46 = null;
        fileEntryIterator45.current = file46;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive48 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest49 = explodedArchive48.manifest;
        explodedArchive48.recursive = false;
        java.util.jar.Manifest manifest52 = explodedArchive48.manifest;
        java.io.File file53 = explodedArchive48.manifestFile;
        java.io.File file54 = null;
        java.io.File file55 = explodedArchive48.getManifestFile(file54);
        java.util.Iterator<java.io.File> fileItor56 = fileEntryIterator45.listFiles(file55);
        java.util.ArrayDeque<java.util.Iterator<java.io.File>> fileItorQueue57 = new java.util.ArrayDeque<java.util.Iterator<java.io.File>>();
        boolean boolean58 = fileItorQueue57.add(fileItor56);
        fileEntryIterator32.stack = fileItorQueue57;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive60 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest61 = explodedArchive60.manifest;
        explodedArchive60.recursive = false;
        java.io.File file64 = null;
        explodedArchive60.root = file64;
        java.io.File file66 = explodedArchive60.root;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive67 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest68 = explodedArchive67.manifest;
        explodedArchive67.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive71 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest72 = explodedArchive71.manifest;
        explodedArchive71.recursive = false;
        java.util.jar.Manifest manifest75 = explodedArchive71.manifest;
        java.io.File file76 = explodedArchive71.manifestFile;
        java.io.File file77 = null;
        java.io.File file78 = explodedArchive71.getManifestFile(file77);
        explodedArchive67.manifestFile = file77;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive80 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest81 = explodedArchive80.manifest;
        explodedArchive80.recursive = false;
        java.util.jar.Manifest manifest84 = explodedArchive80.manifest;
        java.io.File file85 = explodedArchive80.manifestFile;
        java.io.File file86 = null;
        java.io.File file87 = explodedArchive80.getManifestFile(file86);
        explodedArchive67.manifestFile = file87;
        java.io.File file89 = explodedArchive60.getManifestFile(file87);
        fileEntryIterator32.root = file87;
        fileEntry30.file = file87;
        java.io.File file92 = explodedArchive26.getManifestFile(file87);
        explodedArchive3.manifestFile = file87;
        fileEntry0.file = file87;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file14.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file14.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file23.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file23.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file42.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file42.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file55.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file55.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest75);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file76);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file78);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file78.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file78.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest81);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest84);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file85);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file87);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file87.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file87.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file89);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file89.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file89.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file92);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file92.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file92.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
    }

    @Test
    public void test0389() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0389");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntry fileEntry0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntry();
        java.io.File file1 = fileEntry0.file;
        java.lang.String str2 = fileEntry0.name;
        java.io.File file3 = fileEntry0.file;
        java.io.File file4 = fileEntry0.file;
        java.lang.String str5 = fileEntry0.name;
        java.lang.String str6 = fileEntry0.getName();
        java.io.File file7 = fileEntry0.file;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file7);
    }

    @Test
    public void test0390() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0390");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        boolean boolean1 = fileEntryIterator0.recursive;
        fileEntryIterator0.recursive = false;
        // The following exception was thrown during execution in test generation
        try {
            fileEntryIterator0.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: remove");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
    }

    @Test
    public void test0391() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0391");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file1 = null;
        fileEntryIterator0.current = file1;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive3 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest4 = explodedArchive3.manifest;
        explodedArchive3.recursive = false;
        java.util.jar.Manifest manifest7 = explodedArchive3.manifest;
        java.io.File file8 = explodedArchive3.manifestFile;
        java.io.File file9 = null;
        java.io.File file10 = explodedArchive3.getManifestFile(file9);
        java.util.Iterator<java.io.File> fileItor11 = fileEntryIterator0.listFiles(file10);
        boolean boolean12 = fileEntryIterator0.hasNext();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator13 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator14 = entryComparator13.reversed();
        java.util.Comparator<java.io.File> fileComparator15 = entryComparator13.reversed();
        fileEntryIterator0.entryComparator = fileComparator15;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator17 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file18 = null;
        fileEntryIterator17.current = file18;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive20 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.lang.String str21 = explodedArchive20.toString();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive22 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file23 = explodedArchive22.root;
        java.io.File file24 = null;
        explodedArchive22.manifestFile = file24;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive26 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest27 = explodedArchive26.manifest;
        explodedArchive26.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive30 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest31 = explodedArchive30.manifest;
        explodedArchive30.recursive = false;
        java.util.jar.Manifest manifest34 = explodedArchive30.manifest;
        java.io.File file35 = explodedArchive30.manifestFile;
        java.io.File file36 = null;
        java.io.File file37 = explodedArchive30.getManifestFile(file36);
        explodedArchive26.manifestFile = file36;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive39 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest40 = explodedArchive39.manifest;
        explodedArchive39.recursive = false;
        java.util.jar.Manifest manifest43 = explodedArchive39.manifest;
        java.io.File file44 = explodedArchive39.manifestFile;
        java.io.File file45 = null;
        java.io.File file46 = explodedArchive39.getManifestFile(file45);
        explodedArchive26.manifestFile = file46;
        java.io.File file48 = explodedArchive22.getManifestFile(file46);
        java.io.File file49 = explodedArchive20.getManifestFile(file46);
        fileEntryIterator17.root = file46;
        fileEntryIterator0.current = file46;
        boolean boolean52 = fileEntryIterator0.hasNext();
        // The following exception was thrown during execution in test generation
        try {
            org.springframework.boot.loader.archive.Archive.Entry entry53 = fileEntryIterator0.next();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str21 + "' != '" + "exploded archive" + "'", str21.equals("exploded archive"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file37.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file37.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file46.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file46.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file48.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file48.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file49.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file49.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
    }

    @Test
    public void test0392() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0392");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest1 = explodedArchive0.manifest;
        explodedArchive0.recursive = false;
        java.util.jar.Manifest manifest4 = explodedArchive0.manifest;
        java.util.jar.Manifest manifest5 = null;
        explodedArchive0.manifest = manifest5;
        java.io.File file7 = explodedArchive0.root;
        java.lang.String str8 = explodedArchive0.toString();
        java.util.jar.Manifest manifest9 = null;
        explodedArchive0.manifest = manifest9;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str8 + "' != '" + "exploded archive" + "'", str8.equals("exploded archive"));
    }

    @Test
    public void test0393() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0393");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest1 = explodedArchive0.manifest;
        explodedArchive0.recursive = false;
        java.io.File file4 = null;
        explodedArchive0.root = file4;
        java.io.File file6 = explodedArchive0.manifestFile;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive7 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file8 = explodedArchive7.root;
        java.io.File file9 = null;
        explodedArchive7.manifestFile = file9;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive11 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest12 = explodedArchive11.manifest;
        explodedArchive11.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive15 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest16 = explodedArchive15.manifest;
        explodedArchive15.recursive = false;
        java.util.jar.Manifest manifest19 = explodedArchive15.manifest;
        java.io.File file20 = explodedArchive15.manifestFile;
        java.io.File file21 = null;
        java.io.File file22 = explodedArchive15.getManifestFile(file21);
        explodedArchive11.manifestFile = file21;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive24 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest25 = explodedArchive24.manifest;
        explodedArchive24.recursive = false;
        java.util.jar.Manifest manifest28 = explodedArchive24.manifest;
        java.io.File file29 = explodedArchive24.manifestFile;
        java.io.File file30 = null;
        java.io.File file31 = explodedArchive24.getManifestFile(file30);
        explodedArchive11.manifestFile = file31;
        java.io.File file33 = explodedArchive7.getManifestFile(file31);
        java.io.File file34 = explodedArchive7.root;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator35 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        boolean boolean36 = fileEntryIterator35.hasNext();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator37 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator38 = entryComparator37.reversed();
        java.util.Comparator<java.io.File> fileComparator39 = fileComparator38.reversed();
        fileEntryIterator35.entryComparator = fileComparator39;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive41 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file42 = explodedArchive41.root;
        java.io.File file43 = null;
        explodedArchive41.manifestFile = file43;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive45 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest46 = explodedArchive45.manifest;
        explodedArchive45.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive49 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest50 = explodedArchive49.manifest;
        explodedArchive49.recursive = false;
        java.util.jar.Manifest manifest53 = explodedArchive49.manifest;
        java.io.File file54 = explodedArchive49.manifestFile;
        java.io.File file55 = null;
        java.io.File file56 = explodedArchive49.getManifestFile(file55);
        explodedArchive45.manifestFile = file55;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive58 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest59 = explodedArchive58.manifest;
        explodedArchive58.recursive = false;
        java.util.jar.Manifest manifest62 = explodedArchive58.manifest;
        java.io.File file63 = explodedArchive58.manifestFile;
        java.io.File file64 = null;
        java.io.File file65 = explodedArchive58.getManifestFile(file64);
        explodedArchive45.manifestFile = file65;
        java.io.File file67 = explodedArchive41.getManifestFile(file65);
        java.util.Iterator<java.io.File> fileItor68 = fileEntryIterator35.listFiles(file67);
        explodedArchive7.manifestFile = file67;
        java.io.File file70 = explodedArchive7.manifestFile;
        java.io.File file71 = explodedArchive0.getManifestFile(file70);
        boolean boolean72 = explodedArchive0.recursive;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator<org.springframework.boot.loader.archive.Archive.Entry> entryItor73 = explodedArchive0.iterator();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file22.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file22.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file31.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file31.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file33.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file33.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file56.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file56.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file65.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file65.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file67.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file67.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file70.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file70.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file71.getParent(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file71.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
    }

    @Test
    public void test0394() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0394");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file1 = null;
        fileEntryIterator0.current = file1;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive3 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest4 = explodedArchive3.manifest;
        explodedArchive3.recursive = false;
        java.util.jar.Manifest manifest7 = explodedArchive3.manifest;
        java.io.File file8 = explodedArchive3.manifestFile;
        java.io.File file9 = null;
        java.io.File file10 = explodedArchive3.getManifestFile(file9);
        java.util.Iterator<java.io.File> fileItor11 = fileEntryIterator0.listFiles(file10);
        java.util.Comparator<java.io.File> fileComparator12 = fileEntryIterator0.entryComparator;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator13 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        boolean boolean14 = fileEntryIterator13.hasNext();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator15 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator16 = entryComparator15.reversed();
        java.util.Comparator<java.io.File> fileComparator17 = fileComparator16.reversed();
        fileEntryIterator13.entryComparator = fileComparator17;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive19 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file20 = explodedArchive19.root;
        java.io.File file21 = null;
        explodedArchive19.manifestFile = file21;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive23 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest24 = explodedArchive23.manifest;
        explodedArchive23.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive27 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest28 = explodedArchive27.manifest;
        explodedArchive27.recursive = false;
        java.util.jar.Manifest manifest31 = explodedArchive27.manifest;
        java.io.File file32 = explodedArchive27.manifestFile;
        java.io.File file33 = null;
        java.io.File file34 = explodedArchive27.getManifestFile(file33);
        explodedArchive23.manifestFile = file33;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive36 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest37 = explodedArchive36.manifest;
        explodedArchive36.recursive = false;
        java.util.jar.Manifest manifest40 = explodedArchive36.manifest;
        java.io.File file41 = explodedArchive36.manifestFile;
        java.io.File file42 = null;
        java.io.File file43 = explodedArchive36.getManifestFile(file42);
        explodedArchive23.manifestFile = file43;
        java.io.File file45 = explodedArchive19.getManifestFile(file43);
        java.util.Iterator<java.io.File> fileItor46 = fileEntryIterator13.listFiles(file45);
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntry fileEntry47 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntry();
        java.lang.String str48 = fileEntry47.name;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator49 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file50 = null;
        fileEntryIterator49.current = file50;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive52 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.lang.String str53 = explodedArchive52.toString();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive54 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file55 = explodedArchive54.root;
        java.io.File file56 = null;
        explodedArchive54.manifestFile = file56;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive58 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest59 = explodedArchive58.manifest;
        explodedArchive58.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive62 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest63 = explodedArchive62.manifest;
        explodedArchive62.recursive = false;
        java.util.jar.Manifest manifest66 = explodedArchive62.manifest;
        java.io.File file67 = explodedArchive62.manifestFile;
        java.io.File file68 = null;
        java.io.File file69 = explodedArchive62.getManifestFile(file68);
        explodedArchive58.manifestFile = file68;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive71 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest72 = explodedArchive71.manifest;
        explodedArchive71.recursive = false;
        java.util.jar.Manifest manifest75 = explodedArchive71.manifest;
        java.io.File file76 = explodedArchive71.manifestFile;
        java.io.File file77 = null;
        java.io.File file78 = explodedArchive71.getManifestFile(file77);
        explodedArchive58.manifestFile = file78;
        java.io.File file80 = explodedArchive54.getManifestFile(file78);
        java.io.File file81 = explodedArchive52.getManifestFile(file78);
        fileEntryIterator49.root = file78;
        fileEntry47.file = file78;
        java.io.File file84 = fileEntry47.getFile();
        java.io.File file85 = fileEntry47.getFile();
        java.util.Iterator<java.io.File> fileItor86 = fileEntryIterator13.listFiles(file85);
        java.util.Iterator<java.io.File> fileItor87 = fileEntryIterator0.listFiles(file85);
        // The following exception was thrown during execution in test generation
        try {
            fileEntryIterator0.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: remove");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file34.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file34.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file43.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file43.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file45.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file45.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str53 + "' != '" + "exploded archive" + "'", str53.equals("exploded archive"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file69.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file69.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest75);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file76);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file78);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file78.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file78.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file80);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file80.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file80.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file81);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file81.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file81.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file84);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file84.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file84.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file85);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file85.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file85.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor86);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor87);
    }

    @Test
    public void test0395() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0395");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        boolean boolean1 = fileEntryIterator0.hasNext();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator2 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator3 = entryComparator2.reversed();
        java.util.Comparator<java.io.File> fileComparator4 = fileComparator3.reversed();
        fileEntryIterator0.entryComparator = fileComparator4;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive6 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file7 = explodedArchive6.root;
        java.io.File file8 = null;
        explodedArchive6.manifestFile = file8;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive10 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest11 = explodedArchive10.manifest;
        explodedArchive10.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive14 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest15 = explodedArchive14.manifest;
        explodedArchive14.recursive = false;
        java.util.jar.Manifest manifest18 = explodedArchive14.manifest;
        java.io.File file19 = explodedArchive14.manifestFile;
        java.io.File file20 = null;
        java.io.File file21 = explodedArchive14.getManifestFile(file20);
        explodedArchive10.manifestFile = file20;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive23 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest24 = explodedArchive23.manifest;
        explodedArchive23.recursive = false;
        java.util.jar.Manifest manifest27 = explodedArchive23.manifest;
        java.io.File file28 = explodedArchive23.manifestFile;
        java.io.File file29 = null;
        java.io.File file30 = explodedArchive23.getManifestFile(file29);
        explodedArchive10.manifestFile = file30;
        java.io.File file32 = explodedArchive6.getManifestFile(file30);
        java.util.Iterator<java.io.File> fileItor33 = fileEntryIterator0.listFiles(file32);
        boolean boolean34 = fileEntryIterator0.hasNext();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file21.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file21.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file30.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file30.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file32.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file32.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
    }

    @Test
    public void test0396() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0396");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntry fileEntry0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntry();
        java.io.File file1 = fileEntry0.getFile();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive2 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.lang.String str3 = explodedArchive2.toString();
        explodedArchive2.recursive = true;
        java.io.File file6 = null;
        java.io.File file7 = explodedArchive2.getManifestFile(file6);
        fileEntry0.file = file6;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str3 + "' != '" + "exploded archive" + "'", str3.equals("exploded archive"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file7.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file7.toString(), "META-INF/MANIFEST.MF");
    }

    @Test
    public void test0397() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0397");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file1 = null;
        fileEntryIterator0.current = file1;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive3 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest4 = explodedArchive3.manifest;
        explodedArchive3.recursive = false;
        java.util.jar.Manifest manifest7 = explodedArchive3.manifest;
        java.io.File file8 = explodedArchive3.manifestFile;
        java.io.File file9 = null;
        java.io.File file10 = explodedArchive3.getManifestFile(file9);
        java.util.Iterator<java.io.File> fileItor11 = fileEntryIterator0.listFiles(file10);
        java.io.File file12 = fileEntryIterator0.root;
        java.io.File file13 = fileEntryIterator0.poll();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive14 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.lang.String str15 = explodedArchive14.toString();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive16 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file17 = explodedArchive16.root;
        java.io.File file18 = null;
        explodedArchive16.manifestFile = file18;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive20 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest21 = explodedArchive20.manifest;
        explodedArchive20.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive24 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest25 = explodedArchive24.manifest;
        explodedArchive24.recursive = false;
        java.util.jar.Manifest manifest28 = explodedArchive24.manifest;
        java.io.File file29 = explodedArchive24.manifestFile;
        java.io.File file30 = null;
        java.io.File file31 = explodedArchive24.getManifestFile(file30);
        explodedArchive20.manifestFile = file30;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive33 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest34 = explodedArchive33.manifest;
        explodedArchive33.recursive = false;
        java.util.jar.Manifest manifest37 = explodedArchive33.manifest;
        java.io.File file38 = explodedArchive33.manifestFile;
        java.io.File file39 = null;
        java.io.File file40 = explodedArchive33.getManifestFile(file39);
        explodedArchive20.manifestFile = file40;
        java.io.File file42 = explodedArchive16.getManifestFile(file40);
        java.io.File file43 = explodedArchive14.getManifestFile(file40);
        java.io.File file44 = null;
        java.io.File file45 = explodedArchive14.getManifestFile(file44);
        fileEntryIterator0.current = file44;
        fileEntryIterator0.recursive = false;
        java.io.File file49 = null;
        fileEntryIterator0.root = file49;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str15 + "' != '" + "exploded archive" + "'", str15.equals("exploded archive"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file31.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file31.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file40.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file40.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file42.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file42.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file43.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file43.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file45.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file45.toString(), "META-INF/MANIFEST.MF");
    }

    @Test
    public void test0398() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0398");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest1 = explodedArchive0.manifest;
        explodedArchive0.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive4 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest5 = explodedArchive4.manifest;
        explodedArchive4.recursive = false;
        java.util.jar.Manifest manifest8 = explodedArchive4.manifest;
        java.io.File file9 = explodedArchive4.manifestFile;
        java.io.File file10 = null;
        java.io.File file11 = explodedArchive4.getManifestFile(file10);
        explodedArchive0.manifestFile = file10;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive13 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest14 = explodedArchive13.manifest;
        explodedArchive13.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive17 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest18 = explodedArchive17.manifest;
        explodedArchive17.recursive = false;
        java.util.jar.Manifest manifest21 = explodedArchive17.manifest;
        java.io.File file22 = explodedArchive17.manifestFile;
        java.io.File file23 = null;
        java.io.File file24 = explodedArchive17.getManifestFile(file23);
        explodedArchive13.manifestFile = file23;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive26 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest27 = explodedArchive26.manifest;
        explodedArchive26.recursive = false;
        java.util.jar.Manifest manifest30 = explodedArchive26.manifest;
        java.io.File file31 = explodedArchive26.manifestFile;
        java.io.File file32 = null;
        java.io.File file33 = explodedArchive26.getManifestFile(file32);
        explodedArchive13.manifestFile = file33;
        explodedArchive0.root = file33;
        java.net.URL uRL36 = explodedArchive0.getUrl();
        java.net.URL uRL37 = explodedArchive0.getUrl();
        java.io.File file38 = null;
        java.io.File file39 = explodedArchive0.getManifestFile(file38);
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntry fileEntry40 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntry();
        java.io.File file41 = fileEntry40.file;
        java.lang.String str42 = fileEntry40.name;
        java.io.File file43 = fileEntry40.file;
        java.lang.String str44 = fileEntry40.getName();
        java.io.File file45 = fileEntry40.file;
        // The following exception was thrown during execution in test generation
        try {
            org.springframework.boot.loader.archive.Archive archive46 = explodedArchive0.getNestedArchive((org.springframework.boot.loader.archive.Archive.Entry) fileEntry40);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file11.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file11.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file24.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file24.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file33.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file33.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(uRL36);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(uRL36.toString(), "file:/server/study-execution/new-nimrod/nimrod-hunoroutput-test-dest/spring-boot/af20dc6cc45c032573413c401f9f73aa75371744/randoop_6/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(uRL37);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(uRL37.toString(), "file:/server/study-execution/new-nimrod/nimrod-hunoroutput-test-dest/spring-boot/af20dc6cc45c032573413c401f9f73aa75371744/randoop_6/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file39.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file39.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file45);
    }

    @Test
    public void test0399() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0399");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest1 = explodedArchive0.manifest;
        explodedArchive0.recursive = false;
        java.io.File file4 = null;
        explodedArchive0.root = file4;
        java.io.File file6 = explodedArchive0.root;
        java.util.jar.Manifest manifest7 = null;
        explodedArchive0.manifest = manifest7;
        explodedArchive0.recursive = false;
        java.util.jar.Manifest manifest11 = null;
        explodedArchive0.manifest = manifest11;
        java.lang.String str13 = explodedArchive0.toString();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive14 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.lang.String str15 = explodedArchive14.toString();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive16 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file17 = explodedArchive16.root;
        java.io.File file18 = null;
        explodedArchive16.manifestFile = file18;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive20 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest21 = explodedArchive20.manifest;
        explodedArchive20.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive24 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest25 = explodedArchive24.manifest;
        explodedArchive24.recursive = false;
        java.util.jar.Manifest manifest28 = explodedArchive24.manifest;
        java.io.File file29 = explodedArchive24.manifestFile;
        java.io.File file30 = null;
        java.io.File file31 = explodedArchive24.getManifestFile(file30);
        explodedArchive20.manifestFile = file30;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive33 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest34 = explodedArchive33.manifest;
        explodedArchive33.recursive = false;
        java.util.jar.Manifest manifest37 = explodedArchive33.manifest;
        java.io.File file38 = explodedArchive33.manifestFile;
        java.io.File file39 = null;
        java.io.File file40 = explodedArchive33.getManifestFile(file39);
        explodedArchive20.manifestFile = file40;
        java.io.File file42 = explodedArchive16.getManifestFile(file40);
        java.io.File file43 = explodedArchive14.getManifestFile(file40);
        java.io.File file44 = explodedArchive0.getManifestFile(file40);
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive45 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file46 = explodedArchive45.root;
        java.io.File file47 = explodedArchive45.manifestFile;
        java.util.jar.Manifest manifest48 = null;
        explodedArchive45.manifest = manifest48;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator50 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file51 = null;
        fileEntryIterator50.current = file51;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive53 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.lang.String str54 = explodedArchive53.toString();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive55 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file56 = explodedArchive55.root;
        java.io.File file57 = null;
        explodedArchive55.manifestFile = file57;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive59 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest60 = explodedArchive59.manifest;
        explodedArchive59.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive63 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest64 = explodedArchive63.manifest;
        explodedArchive63.recursive = false;
        java.util.jar.Manifest manifest67 = explodedArchive63.manifest;
        java.io.File file68 = explodedArchive63.manifestFile;
        java.io.File file69 = null;
        java.io.File file70 = explodedArchive63.getManifestFile(file69);
        explodedArchive59.manifestFile = file69;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive72 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest73 = explodedArchive72.manifest;
        explodedArchive72.recursive = false;
        java.util.jar.Manifest manifest76 = explodedArchive72.manifest;
        java.io.File file77 = explodedArchive72.manifestFile;
        java.io.File file78 = null;
        java.io.File file79 = explodedArchive72.getManifestFile(file78);
        explodedArchive59.manifestFile = file79;
        java.io.File file81 = explodedArchive55.getManifestFile(file79);
        java.io.File file82 = explodedArchive53.getManifestFile(file79);
        fileEntryIterator50.root = file79;
        java.io.File file84 = explodedArchive45.getManifestFile(file79);
        explodedArchive0.manifestFile = file79;
        // The following exception was thrown during execution in test generation
        try {
            java.net.URL uRL86 = explodedArchive0.getUrl();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str13 + "' != '" + "exploded archive" + "'", str13.equals("exploded archive"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str15 + "' != '" + "exploded archive" + "'", str15.equals("exploded archive"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file31.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file31.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file40.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file40.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file42.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file42.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file43.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file43.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file44.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file44.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str54 + "' != '" + "exploded archive" + "'", str54.equals("exploded archive"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file70.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file70.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest73);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest76);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file77);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file79);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file79.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file79.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file81);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file81.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file81.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file82);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file82.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file82.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file84);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file84.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file84.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
    }

    @Test
    public void test0400() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0400");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file1 = null;
        fileEntryIterator0.current = file1;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive3 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest4 = explodedArchive3.manifest;
        explodedArchive3.recursive = false;
        java.util.jar.Manifest manifest7 = explodedArchive3.manifest;
        java.io.File file8 = explodedArchive3.manifestFile;
        java.io.File file9 = null;
        java.io.File file10 = explodedArchive3.getManifestFile(file9);
        java.util.Iterator<java.io.File> fileItor11 = fileEntryIterator0.listFiles(file10);
        java.util.Comparator<java.io.File> fileComparator12 = fileEntryIterator0.entryComparator;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator13 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        boolean boolean14 = fileEntryIterator13.recursive;
        java.io.File file15 = fileEntryIterator13.current;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator16 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file17 = null;
        fileEntryIterator16.current = file17;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive19 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest20 = explodedArchive19.manifest;
        explodedArchive19.recursive = false;
        java.util.jar.Manifest manifest23 = explodedArchive19.manifest;
        java.io.File file24 = explodedArchive19.manifestFile;
        java.io.File file25 = null;
        java.io.File file26 = explodedArchive19.getManifestFile(file25);
        java.util.Iterator<java.io.File> fileItor27 = fileEntryIterator16.listFiles(file26);
        java.io.File file28 = fileEntryIterator16.root;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive29 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.lang.String str30 = explodedArchive29.toString();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive31 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file32 = explodedArchive31.root;
        java.io.File file33 = null;
        explodedArchive31.manifestFile = file33;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive35 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest36 = explodedArchive35.manifest;
        explodedArchive35.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive39 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest40 = explodedArchive39.manifest;
        explodedArchive39.recursive = false;
        java.util.jar.Manifest manifest43 = explodedArchive39.manifest;
        java.io.File file44 = explodedArchive39.manifestFile;
        java.io.File file45 = null;
        java.io.File file46 = explodedArchive39.getManifestFile(file45);
        explodedArchive35.manifestFile = file45;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive48 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest49 = explodedArchive48.manifest;
        explodedArchive48.recursive = false;
        java.util.jar.Manifest manifest52 = explodedArchive48.manifest;
        java.io.File file53 = explodedArchive48.manifestFile;
        java.io.File file54 = null;
        java.io.File file55 = explodedArchive48.getManifestFile(file54);
        explodedArchive35.manifestFile = file55;
        java.io.File file57 = explodedArchive31.getManifestFile(file55);
        java.io.File file58 = explodedArchive29.getManifestFile(file55);
        fileEntryIterator16.root = file55;
        java.util.Iterator<java.io.File> fileItor60 = fileEntryIterator13.listFiles(file55);
        fileEntryIterator0.current = file55;
        // The following exception was thrown during execution in test generation
        try {
            org.springframework.boot.loader.archive.ExplodedArchive explodedArchive63 = new org.springframework.boot.loader.archive.ExplodedArchive(file55, true);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid source folder META-INF/MANIFEST.MF");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file26.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file26.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str30 + "' != '" + "exploded archive" + "'", str30.equals("exploded archive"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file46.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file46.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file55.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file55.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file57.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file57.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file58.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file58.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor60);
    }

    @Test
    public void test0401() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0401");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file1 = null;
        fileEntryIterator0.current = file1;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive3 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest4 = explodedArchive3.manifest;
        explodedArchive3.recursive = false;
        java.util.jar.Manifest manifest7 = explodedArchive3.manifest;
        java.io.File file8 = explodedArchive3.manifestFile;
        java.io.File file9 = null;
        java.io.File file10 = explodedArchive3.getManifestFile(file9);
        java.util.Iterator<java.io.File> fileItor11 = fileEntryIterator0.listFiles(file10);
        boolean boolean12 = fileEntryIterator0.hasNext();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator13 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator14 = entryComparator13.reversed();
        java.util.Comparator<java.io.File> fileComparator15 = entryComparator13.reversed();
        fileEntryIterator0.entryComparator = fileComparator15;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator17 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file18 = null;
        fileEntryIterator17.current = file18;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive20 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.lang.String str21 = explodedArchive20.toString();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive22 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file23 = explodedArchive22.root;
        java.io.File file24 = null;
        explodedArchive22.manifestFile = file24;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive26 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest27 = explodedArchive26.manifest;
        explodedArchive26.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive30 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest31 = explodedArchive30.manifest;
        explodedArchive30.recursive = false;
        java.util.jar.Manifest manifest34 = explodedArchive30.manifest;
        java.io.File file35 = explodedArchive30.manifestFile;
        java.io.File file36 = null;
        java.io.File file37 = explodedArchive30.getManifestFile(file36);
        explodedArchive26.manifestFile = file36;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive39 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest40 = explodedArchive39.manifest;
        explodedArchive39.recursive = false;
        java.util.jar.Manifest manifest43 = explodedArchive39.manifest;
        java.io.File file44 = explodedArchive39.manifestFile;
        java.io.File file45 = null;
        java.io.File file46 = explodedArchive39.getManifestFile(file45);
        explodedArchive26.manifestFile = file46;
        java.io.File file48 = explodedArchive22.getManifestFile(file46);
        java.io.File file49 = explodedArchive20.getManifestFile(file46);
        fileEntryIterator17.root = file46;
        fileEntryIterator0.current = file46;
        java.util.Deque<java.util.Iterator<java.io.File>> fileItorQueue52 = fileEntryIterator0.stack;
        java.io.File file53 = fileEntryIterator0.poll();
        java.io.File file54 = fileEntryIterator0.root;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str21 + "' != '" + "exploded archive" + "'", str21.equals("exploded archive"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file37.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file37.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file46.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file46.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file48.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file48.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file49.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file49.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItorQueue52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file54);
    }

    @Test
    public void test0402() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0402");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest1 = explodedArchive0.manifest;
        explodedArchive0.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive4 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest5 = explodedArchive4.manifest;
        explodedArchive4.recursive = false;
        java.util.jar.Manifest manifest8 = explodedArchive4.manifest;
        java.io.File file9 = explodedArchive4.manifestFile;
        java.io.File file10 = null;
        java.io.File file11 = explodedArchive4.getManifestFile(file10);
        explodedArchive0.manifestFile = file10;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive13 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest14 = explodedArchive13.manifest;
        explodedArchive13.recursive = false;
        java.util.jar.Manifest manifest17 = explodedArchive13.manifest;
        java.io.File file18 = explodedArchive13.manifestFile;
        java.io.File file19 = null;
        java.io.File file20 = explodedArchive13.getManifestFile(file19);
        explodedArchive0.manifestFile = file20;
        boolean boolean22 = explodedArchive0.recursive;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive23 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest24 = explodedArchive23.manifest;
        java.util.jar.Manifest manifest25 = null;
        explodedArchive23.manifest = manifest25;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntry fileEntry27 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntry();
        java.lang.String str28 = fileEntry27.name;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator29 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file30 = null;
        fileEntryIterator29.current = file30;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive32 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest33 = explodedArchive32.manifest;
        explodedArchive32.recursive = false;
        java.util.jar.Manifest manifest36 = explodedArchive32.manifest;
        java.io.File file37 = explodedArchive32.manifestFile;
        java.io.File file38 = null;
        java.io.File file39 = explodedArchive32.getManifestFile(file38);
        java.util.Iterator<java.io.File> fileItor40 = fileEntryIterator29.listFiles(file39);
        java.io.File file41 = fileEntryIterator29.current;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator42 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file43 = null;
        fileEntryIterator42.current = file43;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive45 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest46 = explodedArchive45.manifest;
        explodedArchive45.recursive = false;
        java.util.jar.Manifest manifest49 = explodedArchive45.manifest;
        java.io.File file50 = explodedArchive45.manifestFile;
        java.io.File file51 = null;
        java.io.File file52 = explodedArchive45.getManifestFile(file51);
        java.util.Iterator<java.io.File> fileItor53 = fileEntryIterator42.listFiles(file52);
        java.util.ArrayDeque<java.util.Iterator<java.io.File>> fileItorQueue54 = new java.util.ArrayDeque<java.util.Iterator<java.io.File>>();
        boolean boolean55 = fileItorQueue54.add(fileItor53);
        fileEntryIterator29.stack = fileItorQueue54;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive57 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest58 = explodedArchive57.manifest;
        explodedArchive57.recursive = false;
        java.io.File file61 = null;
        explodedArchive57.root = file61;
        java.io.File file63 = explodedArchive57.root;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive64 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest65 = explodedArchive64.manifest;
        explodedArchive64.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive68 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest69 = explodedArchive68.manifest;
        explodedArchive68.recursive = false;
        java.util.jar.Manifest manifest72 = explodedArchive68.manifest;
        java.io.File file73 = explodedArchive68.manifestFile;
        java.io.File file74 = null;
        java.io.File file75 = explodedArchive68.getManifestFile(file74);
        explodedArchive64.manifestFile = file74;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive77 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest78 = explodedArchive77.manifest;
        explodedArchive77.recursive = false;
        java.util.jar.Manifest manifest81 = explodedArchive77.manifest;
        java.io.File file82 = explodedArchive77.manifestFile;
        java.io.File file83 = null;
        java.io.File file84 = explodedArchive77.getManifestFile(file83);
        explodedArchive64.manifestFile = file84;
        java.io.File file86 = explodedArchive57.getManifestFile(file84);
        fileEntryIterator29.root = file84;
        fileEntry27.file = file84;
        java.io.File file89 = explodedArchive23.getManifestFile(file84);
        explodedArchive0.manifestFile = file84;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive91 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest92 = explodedArchive91.manifest;
        explodedArchive91.recursive = false;
        java.util.jar.Manifest manifest95 = explodedArchive91.manifest;
        java.io.File file96 = explodedArchive91.manifestFile;
        java.io.File file97 = null;
        java.io.File file98 = explodedArchive91.getManifestFile(file97);
        explodedArchive0.manifestFile = file98;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file11.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file11.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file20.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file20.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file39.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file39.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file52.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file52.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file73);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file75);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file75.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file75.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest78);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest81);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file82);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file84);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file84.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file84.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file86);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file86.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file86.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file89);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file89.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file89.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest92);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest95);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file96);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file98);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file98.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file98.toString(), "META-INF/MANIFEST.MF");
    }

    @Test
    public void test0403() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0403");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntry fileEntry0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntry();
        java.io.File file1 = fileEntry0.file;
        java.lang.String str2 = fileEntry0.name;
        java.io.File file3 = fileEntry0.file;
        java.io.File file4 = fileEntry0.file;
        java.lang.String str5 = fileEntry0.name;
        java.lang.String str6 = fileEntry0.getName();
        java.io.File file7 = fileEntry0.getFile();
        fileEntry0.name = "hi!";
        java.io.File file10 = fileEntry0.getFile();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive11 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file12 = explodedArchive11.root;
        java.io.File file13 = null;
        explodedArchive11.manifestFile = file13;
        java.io.File file15 = explodedArchive11.root;
        boolean boolean16 = explodedArchive11.recursive;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive17 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest18 = explodedArchive17.manifest;
        explodedArchive17.recursive = false;
        java.io.File file21 = null;
        explodedArchive17.root = file21;
        java.io.File file23 = explodedArchive17.root;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive24 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest25 = explodedArchive24.manifest;
        explodedArchive24.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive28 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest29 = explodedArchive28.manifest;
        explodedArchive28.recursive = false;
        java.util.jar.Manifest manifest32 = explodedArchive28.manifest;
        java.io.File file33 = explodedArchive28.manifestFile;
        java.io.File file34 = null;
        java.io.File file35 = explodedArchive28.getManifestFile(file34);
        explodedArchive24.manifestFile = file34;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive37 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest38 = explodedArchive37.manifest;
        explodedArchive37.recursive = false;
        java.util.jar.Manifest manifest41 = explodedArchive37.manifest;
        java.io.File file42 = explodedArchive37.manifestFile;
        java.io.File file43 = null;
        java.io.File file44 = explodedArchive37.getManifestFile(file43);
        explodedArchive24.manifestFile = file44;
        java.io.File file46 = explodedArchive17.getManifestFile(file44);
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntry fileEntry47 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntry();
        java.lang.String str48 = fileEntry47.name;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator49 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file50 = null;
        fileEntryIterator49.current = file50;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive52 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.lang.String str53 = explodedArchive52.toString();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive54 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file55 = explodedArchive54.root;
        java.io.File file56 = null;
        explodedArchive54.manifestFile = file56;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive58 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest59 = explodedArchive58.manifest;
        explodedArchive58.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive62 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest63 = explodedArchive62.manifest;
        explodedArchive62.recursive = false;
        java.util.jar.Manifest manifest66 = explodedArchive62.manifest;
        java.io.File file67 = explodedArchive62.manifestFile;
        java.io.File file68 = null;
        java.io.File file69 = explodedArchive62.getManifestFile(file68);
        explodedArchive58.manifestFile = file68;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive71 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest72 = explodedArchive71.manifest;
        explodedArchive71.recursive = false;
        java.util.jar.Manifest manifest75 = explodedArchive71.manifest;
        java.io.File file76 = explodedArchive71.manifestFile;
        java.io.File file77 = null;
        java.io.File file78 = explodedArchive71.getManifestFile(file77);
        explodedArchive58.manifestFile = file78;
        java.io.File file80 = explodedArchive54.getManifestFile(file78);
        java.io.File file81 = explodedArchive52.getManifestFile(file78);
        fileEntryIterator49.root = file78;
        fileEntry47.file = file78;
        java.io.File file84 = fileEntry47.file;
        explodedArchive17.root = file84;
        java.io.File file86 = explodedArchive17.manifestFile;
        java.io.File file87 = explodedArchive17.root;
        explodedArchive11.manifestFile = file87;
        fileEntry0.file = file87;
        fileEntry0.name = "hi!";
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file35.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file35.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file44.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file44.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file46.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file46.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str53 + "' != '" + "exploded archive" + "'", str53.equals("exploded archive"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file69.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file69.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest75);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file76);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file78);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file78.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file78.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file80);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file80.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file80.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file81);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file81.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file81.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file84);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file84.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file84.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file86);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file87);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file87.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file87.toString(), "META-INF/MANIFEST.MF");
    }

    @Test
    public void test0404() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0404");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file1 = null;
        fileEntryIterator0.current = file1;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive3 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest4 = explodedArchive3.manifest;
        explodedArchive3.recursive = false;
        java.util.jar.Manifest manifest7 = explodedArchive3.manifest;
        java.io.File file8 = explodedArchive3.manifestFile;
        java.io.File file9 = null;
        java.io.File file10 = explodedArchive3.getManifestFile(file9);
        java.util.Iterator<java.io.File> fileItor11 = fileEntryIterator0.listFiles(file10);
        java.io.File file12 = fileEntryIterator0.root;
        java.io.File file13 = fileEntryIterator0.poll();
        java.util.Comparator<java.io.File> fileComparator14 = fileEntryIterator0.entryComparator;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator15 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        boolean boolean16 = fileEntryIterator15.hasNext();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator17 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator18 = entryComparator17.reversed();
        java.util.Comparator<java.io.File> fileComparator19 = fileComparator18.reversed();
        fileEntryIterator15.entryComparator = fileComparator19;
        java.util.Comparator<java.io.File> fileComparator21 = fileEntryIterator15.entryComparator;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator22 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator23 = entryComparator22.reversed();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator24 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator25 = entryComparator24.reversed();
        java.util.Comparator<java.io.File> fileComparator26 = entryComparator22.thenComparing(fileComparator25);
        java.util.Comparator<java.io.File> fileComparator27 = fileComparator21.thenComparing(fileComparator25);
        fileEntryIterator0.entryComparator = fileComparator27;
        java.util.Comparator<java.io.File> fileComparator29 = fileComparator27.reversed();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator30 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator31 = entryComparator30.reversed();
        java.util.Comparator<java.io.File> fileComparator32 = entryComparator30.reversed();
        java.util.Comparator<java.io.File> fileComparator33 = fileComparator27.thenComparing(fileComparator32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator33);
    }

    @Test
    public void test0405() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0405");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file1 = null;
        fileEntryIterator0.current = file1;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive3 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest4 = explodedArchive3.manifest;
        explodedArchive3.recursive = false;
        java.util.jar.Manifest manifest7 = explodedArchive3.manifest;
        java.io.File file8 = explodedArchive3.manifestFile;
        java.io.File file9 = null;
        java.io.File file10 = explodedArchive3.getManifestFile(file9);
        java.util.Iterator<java.io.File> fileItor11 = fileEntryIterator0.listFiles(file10);
        boolean boolean12 = fileEntryIterator0.hasNext();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator13 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator14 = entryComparator13.reversed();
        java.util.Comparator<java.io.File> fileComparator15 = entryComparator13.reversed();
        fileEntryIterator0.entryComparator = fileComparator15;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator17 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file18 = null;
        fileEntryIterator17.current = file18;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive20 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.lang.String str21 = explodedArchive20.toString();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive22 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file23 = explodedArchive22.root;
        java.io.File file24 = null;
        explodedArchive22.manifestFile = file24;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive26 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest27 = explodedArchive26.manifest;
        explodedArchive26.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive30 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest31 = explodedArchive30.manifest;
        explodedArchive30.recursive = false;
        java.util.jar.Manifest manifest34 = explodedArchive30.manifest;
        java.io.File file35 = explodedArchive30.manifestFile;
        java.io.File file36 = null;
        java.io.File file37 = explodedArchive30.getManifestFile(file36);
        explodedArchive26.manifestFile = file36;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive39 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest40 = explodedArchive39.manifest;
        explodedArchive39.recursive = false;
        java.util.jar.Manifest manifest43 = explodedArchive39.manifest;
        java.io.File file44 = explodedArchive39.manifestFile;
        java.io.File file45 = null;
        java.io.File file46 = explodedArchive39.getManifestFile(file45);
        explodedArchive26.manifestFile = file46;
        java.io.File file48 = explodedArchive22.getManifestFile(file46);
        java.io.File file49 = explodedArchive20.getManifestFile(file46);
        fileEntryIterator17.root = file46;
        fileEntryIterator0.current = file46;
        boolean boolean52 = fileEntryIterator0.hasNext();
        java.io.File file53 = fileEntryIterator0.current;
        // The following exception was thrown during execution in test generation
        try {
            org.springframework.boot.loader.archive.ExplodedArchive explodedArchive55 = new org.springframework.boot.loader.archive.ExplodedArchive(file53, false);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid source folder META-INF/MANIFEST.MF");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str21 + "' != '" + "exploded archive" + "'", str21.equals("exploded archive"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file37.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file37.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file46.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file46.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file48.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file48.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file49.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file49.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file53.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file53.toString(), "META-INF/MANIFEST.MF");
    }

    @Test
    public void test0406() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0406");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest1 = explodedArchive0.manifest;
        explodedArchive0.recursive = false;
        java.util.jar.Manifest manifest4 = explodedArchive0.manifest;
        java.util.jar.Manifest manifest5 = null;
        explodedArchive0.manifest = manifest5;
        java.io.File file7 = explodedArchive0.root;
        java.lang.String str8 = explodedArchive0.toString();
        java.io.File file9 = explodedArchive0.root;
        // The following exception was thrown during execution in test generation
        try {
            java.net.URL uRL10 = explodedArchive0.getUrl();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str8 + "' != '" + "exploded archive" + "'", str8.equals("exploded archive"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file9);
    }

    @Test
    public void test0407() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0407");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file1 = null;
        fileEntryIterator0.current = file1;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive3 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest4 = explodedArchive3.manifest;
        explodedArchive3.recursive = false;
        java.util.jar.Manifest manifest7 = explodedArchive3.manifest;
        java.io.File file8 = explodedArchive3.manifestFile;
        java.io.File file9 = null;
        java.io.File file10 = explodedArchive3.getManifestFile(file9);
        java.util.Iterator<java.io.File> fileItor11 = fileEntryIterator0.listFiles(file10);
        java.io.File file12 = fileEntryIterator0.root;
        java.io.File file13 = fileEntryIterator0.root;
        java.io.File file14 = fileEntryIterator0.current;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator15 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        boolean boolean16 = fileEntryIterator15.hasNext();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator17 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator18 = entryComparator17.reversed();
        java.util.Comparator<java.io.File> fileComparator19 = fileComparator18.reversed();
        fileEntryIterator15.entryComparator = fileComparator19;
        java.util.Comparator<java.io.File> fileComparator21 = fileEntryIterator15.entryComparator;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator22 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator23 = entryComparator22.reversed();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator24 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator25 = entryComparator24.reversed();
        java.util.Comparator<java.io.File> fileComparator26 = entryComparator22.thenComparing(fileComparator25);
        java.util.Comparator<java.io.File> fileComparator27 = fileComparator21.thenComparing(fileComparator25);
        fileEntryIterator0.entryComparator = fileComparator21;
        java.lang.Class<?> wildcardClass29 = fileEntryIterator0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass29);
    }

    @Test
    public void test0408() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0408");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file1 = null;
        fileEntryIterator0.current = file1;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive3 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.lang.String str4 = explodedArchive3.toString();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive5 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file6 = explodedArchive5.root;
        java.io.File file7 = null;
        explodedArchive5.manifestFile = file7;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive9 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest10 = explodedArchive9.manifest;
        explodedArchive9.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive13 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest14 = explodedArchive13.manifest;
        explodedArchive13.recursive = false;
        java.util.jar.Manifest manifest17 = explodedArchive13.manifest;
        java.io.File file18 = explodedArchive13.manifestFile;
        java.io.File file19 = null;
        java.io.File file20 = explodedArchive13.getManifestFile(file19);
        explodedArchive9.manifestFile = file19;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive22 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest23 = explodedArchive22.manifest;
        explodedArchive22.recursive = false;
        java.util.jar.Manifest manifest26 = explodedArchive22.manifest;
        java.io.File file27 = explodedArchive22.manifestFile;
        java.io.File file28 = null;
        java.io.File file29 = explodedArchive22.getManifestFile(file28);
        explodedArchive9.manifestFile = file29;
        java.io.File file31 = explodedArchive5.getManifestFile(file29);
        java.io.File file32 = explodedArchive3.getManifestFile(file29);
        fileEntryIterator0.root = file29;
        boolean boolean34 = fileEntryIterator0.recursive;
        java.io.File file35 = fileEntryIterator0.current;
        boolean boolean36 = fileEntryIterator0.recursive;
        java.io.File file37 = fileEntryIterator0.root;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator38 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator39 = entryComparator38.reversed();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator40 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator41 = entryComparator40.reversed();
        java.util.Comparator<java.io.File> fileComparator42 = entryComparator38.thenComparing(fileComparator41);
        java.util.Comparator<java.io.File> fileComparator43 = entryComparator38.reversed();
        fileEntryIterator0.entryComparator = entryComparator38;
        boolean boolean45 = fileEntryIterator0.recursive;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str4 + "' != '" + "exploded archive" + "'", str4.equals("exploded archive"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file20.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file20.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file29.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file29.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file31.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file31.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file32.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file32.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file37.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file37.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
    }

    @Test
    public void test0409() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0409");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        boolean boolean1 = fileEntryIterator0.hasNext();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator2 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator3 = entryComparator2.reversed();
        java.util.Comparator<java.io.File> fileComparator4 = fileComparator3.reversed();
        fileEntryIterator0.entryComparator = fileComparator4;
        java.util.Comparator<java.io.File> fileComparator6 = fileEntryIterator0.entryComparator;
        java.io.File file7 = fileEntryIterator0.current;
        fileEntryIterator0.recursive = false;
        // The following exception was thrown during execution in test generation
        try {
            fileEntryIterator0.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: remove");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file7);
    }

    @Test
    public void test0410() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0410");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file1 = null;
        fileEntryIterator0.current = file1;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive3 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest4 = explodedArchive3.manifest;
        explodedArchive3.recursive = false;
        java.util.jar.Manifest manifest7 = explodedArchive3.manifest;
        java.io.File file8 = explodedArchive3.manifestFile;
        java.io.File file9 = null;
        java.io.File file10 = explodedArchive3.getManifestFile(file9);
        java.util.Iterator<java.io.File> fileItor11 = fileEntryIterator0.listFiles(file10);
        boolean boolean12 = fileEntryIterator0.hasNext();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator13 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator14 = entryComparator13.reversed();
        java.util.Comparator<java.io.File> fileComparator15 = entryComparator13.reversed();
        fileEntryIterator0.entryComparator = fileComparator15;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator17 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file18 = null;
        fileEntryIterator17.current = file18;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive20 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.lang.String str21 = explodedArchive20.toString();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive22 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file23 = explodedArchive22.root;
        java.io.File file24 = null;
        explodedArchive22.manifestFile = file24;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive26 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest27 = explodedArchive26.manifest;
        explodedArchive26.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive30 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest31 = explodedArchive30.manifest;
        explodedArchive30.recursive = false;
        java.util.jar.Manifest manifest34 = explodedArchive30.manifest;
        java.io.File file35 = explodedArchive30.manifestFile;
        java.io.File file36 = null;
        java.io.File file37 = explodedArchive30.getManifestFile(file36);
        explodedArchive26.manifestFile = file36;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive39 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest40 = explodedArchive39.manifest;
        explodedArchive39.recursive = false;
        java.util.jar.Manifest manifest43 = explodedArchive39.manifest;
        java.io.File file44 = explodedArchive39.manifestFile;
        java.io.File file45 = null;
        java.io.File file46 = explodedArchive39.getManifestFile(file45);
        explodedArchive26.manifestFile = file46;
        java.io.File file48 = explodedArchive22.getManifestFile(file46);
        java.io.File file49 = explodedArchive20.getManifestFile(file46);
        fileEntryIterator17.root = file46;
        fileEntryIterator0.current = file46;
        // The following exception was thrown during execution in test generation
        try {
            org.springframework.boot.loader.archive.Archive.Entry entry52 = fileEntryIterator0.next();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str21 + "' != '" + "exploded archive" + "'", str21.equals("exploded archive"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file37.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file37.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file46.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file46.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file48.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file48.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file49.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file49.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
    }

    @Test
    public void test0411() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0411");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntry fileEntry0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntry();
        java.lang.String str1 = fileEntry0.getName();
        java.lang.String str2 = fileEntry0.getName();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator3 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator4 = entryComparator3.reversed();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive5 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file6 = explodedArchive5.root;
        java.io.File file7 = null;
        explodedArchive5.manifestFile = file7;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive9 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest10 = explodedArchive9.manifest;
        explodedArchive9.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive13 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest14 = explodedArchive13.manifest;
        explodedArchive13.recursive = false;
        java.util.jar.Manifest manifest17 = explodedArchive13.manifest;
        java.io.File file18 = explodedArchive13.manifestFile;
        java.io.File file19 = null;
        java.io.File file20 = explodedArchive13.getManifestFile(file19);
        explodedArchive9.manifestFile = file19;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive22 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest23 = explodedArchive22.manifest;
        explodedArchive22.recursive = false;
        java.util.jar.Manifest manifest26 = explodedArchive22.manifest;
        java.io.File file27 = explodedArchive22.manifestFile;
        java.io.File file28 = null;
        java.io.File file29 = explodedArchive22.getManifestFile(file28);
        explodedArchive9.manifestFile = file29;
        java.io.File file31 = explodedArchive5.getManifestFile(file29);
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive32 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest33 = explodedArchive32.manifest;
        explodedArchive32.recursive = false;
        java.io.File file36 = null;
        explodedArchive32.root = file36;
        java.io.File file38 = explodedArchive32.root;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive39 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest40 = explodedArchive39.manifest;
        explodedArchive39.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive43 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest44 = explodedArchive43.manifest;
        explodedArchive43.recursive = false;
        java.util.jar.Manifest manifest47 = explodedArchive43.manifest;
        java.io.File file48 = explodedArchive43.manifestFile;
        java.io.File file49 = null;
        java.io.File file50 = explodedArchive43.getManifestFile(file49);
        explodedArchive39.manifestFile = file49;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive52 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest53 = explodedArchive52.manifest;
        explodedArchive52.recursive = false;
        java.util.jar.Manifest manifest56 = explodedArchive52.manifest;
        java.io.File file57 = explodedArchive52.manifestFile;
        java.io.File file58 = null;
        java.io.File file59 = explodedArchive52.getManifestFile(file58);
        explodedArchive39.manifestFile = file59;
        java.io.File file61 = explodedArchive32.getManifestFile(file59);
        int int62 = entryComparator3.compare(file31, file59);
        fileEntry0.file = file59;
        java.io.File file64 = fileEntry0.getFile();
        // The following exception was thrown during execution in test generation
        try {
            org.springframework.boot.loader.archive.ExplodedArchive explodedArchive66 = new org.springframework.boot.loader.archive.ExplodedArchive(file64, false);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid source folder META-INF/MANIFEST.MF");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file20.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file20.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file29.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file29.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file31.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file31.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file50.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file50.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file59.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file59.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file61.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file61.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 21 + "'", int62 == 21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file64.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file64.toString(), "META-INF/MANIFEST.MF");
    }

    @Test
    public void test0412() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0412");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file1 = null;
        fileEntryIterator0.current = file1;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive3 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.lang.String str4 = explodedArchive3.toString();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive5 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file6 = explodedArchive5.root;
        java.io.File file7 = null;
        explodedArchive5.manifestFile = file7;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive9 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest10 = explodedArchive9.manifest;
        explodedArchive9.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive13 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest14 = explodedArchive13.manifest;
        explodedArchive13.recursive = false;
        java.util.jar.Manifest manifest17 = explodedArchive13.manifest;
        java.io.File file18 = explodedArchive13.manifestFile;
        java.io.File file19 = null;
        java.io.File file20 = explodedArchive13.getManifestFile(file19);
        explodedArchive9.manifestFile = file19;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive22 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest23 = explodedArchive22.manifest;
        explodedArchive22.recursive = false;
        java.util.jar.Manifest manifest26 = explodedArchive22.manifest;
        java.io.File file27 = explodedArchive22.manifestFile;
        java.io.File file28 = null;
        java.io.File file29 = explodedArchive22.getManifestFile(file28);
        explodedArchive9.manifestFile = file29;
        java.io.File file31 = explodedArchive5.getManifestFile(file29);
        java.io.File file32 = explodedArchive3.getManifestFile(file29);
        fileEntryIterator0.root = file29;
        boolean boolean34 = fileEntryIterator0.recursive;
        fileEntryIterator0.recursive = true;
        boolean boolean37 = fileEntryIterator0.recursive;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str4 + "' != '" + "exploded archive" + "'", str4.equals("exploded archive"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file20.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file20.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file29.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file29.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file31.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file31.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file32.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file32.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
    }

    @Test
    public void test0413() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0413");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        boolean boolean1 = fileEntryIterator0.recursive;
        java.util.Deque<java.util.Iterator<java.io.File>> fileItorQueue2 = fileEntryIterator0.stack;
        java.util.Comparator<java.io.File> fileComparator3 = fileEntryIterator0.entryComparator;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItorQueue2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator3);
    }

    @Test
    public void test0414() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0414");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file1 = null;
        fileEntryIterator0.current = file1;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive3 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest4 = explodedArchive3.manifest;
        explodedArchive3.recursive = false;
        java.util.jar.Manifest manifest7 = explodedArchive3.manifest;
        java.io.File file8 = explodedArchive3.manifestFile;
        java.io.File file9 = null;
        java.io.File file10 = explodedArchive3.getManifestFile(file9);
        java.util.Iterator<java.io.File> fileItor11 = fileEntryIterator0.listFiles(file10);
        java.io.File file12 = fileEntryIterator0.current;
        boolean boolean13 = fileEntryIterator0.recursive;
        java.io.File file14 = fileEntryIterator0.poll();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator15 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file16 = null;
        fileEntryIterator15.current = file16;
        fileEntryIterator15.recursive = true;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator20 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator21 = entryComparator20.reversed();
        java.util.Comparator<java.io.File> fileComparator22 = entryComparator20.reversed();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive23 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest24 = explodedArchive23.manifest;
        explodedArchive23.recursive = false;
        java.util.jar.Manifest manifest27 = explodedArchive23.manifest;
        java.io.File file28 = explodedArchive23.manifestFile;
        java.io.File file29 = null;
        java.io.File file30 = explodedArchive23.getManifestFile(file29);
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive31 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest32 = explodedArchive31.manifest;
        explodedArchive31.recursive = false;
        java.io.File file35 = null;
        explodedArchive31.root = file35;
        java.io.File file37 = explodedArchive31.root;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive38 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest39 = explodedArchive38.manifest;
        explodedArchive38.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive42 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest43 = explodedArchive42.manifest;
        explodedArchive42.recursive = false;
        java.util.jar.Manifest manifest46 = explodedArchive42.manifest;
        java.io.File file47 = explodedArchive42.manifestFile;
        java.io.File file48 = null;
        java.io.File file49 = explodedArchive42.getManifestFile(file48);
        explodedArchive38.manifestFile = file48;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive51 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest52 = explodedArchive51.manifest;
        explodedArchive51.recursive = false;
        java.util.jar.Manifest manifest55 = explodedArchive51.manifest;
        java.io.File file56 = explodedArchive51.manifestFile;
        java.io.File file57 = null;
        java.io.File file58 = explodedArchive51.getManifestFile(file57);
        explodedArchive38.manifestFile = file58;
        java.io.File file60 = explodedArchive31.getManifestFile(file58);
        int int61 = entryComparator20.compare(file30, file58);
        java.util.Iterator<java.io.File> fileItor62 = fileEntryIterator15.listFiles(file30);
        fileEntryIterator0.current = file30;
        java.io.File file64 = fileEntryIterator0.current;
        // The following exception was thrown during execution in test generation
        try {
            org.springframework.boot.loader.archive.Archive.Entry entry65 = fileEntryIterator0.next();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file30.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file30.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file49.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file49.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file58.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file58.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file60.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file60.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file64.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file64.toString(), "META-INF/MANIFEST.MF");
    }

    @Test
    public void test0415() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0415");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest1 = explodedArchive0.manifest;
        java.util.jar.Manifest manifest2 = null;
        explodedArchive0.manifest = manifest2;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator4 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        boolean boolean5 = fileEntryIterator4.hasNext();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator6 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator7 = entryComparator6.reversed();
        java.util.Comparator<java.io.File> fileComparator8 = fileComparator7.reversed();
        fileEntryIterator4.entryComparator = fileComparator8;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive10 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file11 = explodedArchive10.root;
        java.io.File file12 = null;
        explodedArchive10.manifestFile = file12;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive14 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest15 = explodedArchive14.manifest;
        explodedArchive14.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive18 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest19 = explodedArchive18.manifest;
        explodedArchive18.recursive = false;
        java.util.jar.Manifest manifest22 = explodedArchive18.manifest;
        java.io.File file23 = explodedArchive18.manifestFile;
        java.io.File file24 = null;
        java.io.File file25 = explodedArchive18.getManifestFile(file24);
        explodedArchive14.manifestFile = file24;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive27 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest28 = explodedArchive27.manifest;
        explodedArchive27.recursive = false;
        java.util.jar.Manifest manifest31 = explodedArchive27.manifest;
        java.io.File file32 = explodedArchive27.manifestFile;
        java.io.File file33 = null;
        java.io.File file34 = explodedArchive27.getManifestFile(file33);
        explodedArchive14.manifestFile = file34;
        java.io.File file36 = explodedArchive10.getManifestFile(file34);
        java.util.Iterator<java.io.File> fileItor37 = fileEntryIterator4.listFiles(file36);
        java.io.File file38 = explodedArchive0.getManifestFile(file36);
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntry fileEntry39 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntry();
        java.io.File file40 = fileEntry39.file;
        java.lang.String str41 = fileEntry39.name;
        java.io.File file42 = fileEntry39.file;
        java.io.File file43 = fileEntry39.file;
        java.lang.String str44 = fileEntry39.name;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive45 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.lang.String str46 = explodedArchive45.toString();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive47 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file48 = explodedArchive47.root;
        java.io.File file49 = null;
        explodedArchive47.manifestFile = file49;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive51 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest52 = explodedArchive51.manifest;
        explodedArchive51.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive55 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest56 = explodedArchive55.manifest;
        explodedArchive55.recursive = false;
        java.util.jar.Manifest manifest59 = explodedArchive55.manifest;
        java.io.File file60 = explodedArchive55.manifestFile;
        java.io.File file61 = null;
        java.io.File file62 = explodedArchive55.getManifestFile(file61);
        explodedArchive51.manifestFile = file61;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive64 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest65 = explodedArchive64.manifest;
        explodedArchive64.recursive = false;
        java.util.jar.Manifest manifest68 = explodedArchive64.manifest;
        java.io.File file69 = explodedArchive64.manifestFile;
        java.io.File file70 = null;
        java.io.File file71 = explodedArchive64.getManifestFile(file70);
        explodedArchive51.manifestFile = file71;
        java.io.File file73 = explodedArchive47.getManifestFile(file71);
        java.io.File file74 = explodedArchive45.getManifestFile(file71);
        fileEntry39.file = file71;
        explodedArchive0.manifestFile = file71;
        explodedArchive0.recursive = true;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file25.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file25.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file34.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file34.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file36.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file36.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file38.getParent(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file38.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str46 + "' != '" + "exploded archive" + "'", str46.equals("exploded archive"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file62.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file62.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file71.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file71.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file73);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file73.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file73.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file74.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file74.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
    }

    @Test
    public void test0416() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0416");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest1 = explodedArchive0.manifest;
        explodedArchive0.recursive = false;
        java.io.File file4 = null;
        explodedArchive0.root = file4;
        java.io.File file6 = explodedArchive0.root;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive7 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest8 = explodedArchive7.manifest;
        explodedArchive7.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive11 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest12 = explodedArchive11.manifest;
        explodedArchive11.recursive = false;
        java.util.jar.Manifest manifest15 = explodedArchive11.manifest;
        java.io.File file16 = explodedArchive11.manifestFile;
        java.io.File file17 = null;
        java.io.File file18 = explodedArchive11.getManifestFile(file17);
        explodedArchive7.manifestFile = file17;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive20 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest21 = explodedArchive20.manifest;
        explodedArchive20.recursive = false;
        java.util.jar.Manifest manifest24 = explodedArchive20.manifest;
        java.io.File file25 = explodedArchive20.manifestFile;
        java.io.File file26 = null;
        java.io.File file27 = explodedArchive20.getManifestFile(file26);
        explodedArchive7.manifestFile = file27;
        java.io.File file29 = explodedArchive0.getManifestFile(file27);
        java.io.File file30 = explodedArchive0.manifestFile;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive31 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.lang.String str32 = explodedArchive31.toString();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive33 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file34 = explodedArchive33.root;
        java.io.File file35 = null;
        explodedArchive33.manifestFile = file35;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive37 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest38 = explodedArchive37.manifest;
        explodedArchive37.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive41 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest42 = explodedArchive41.manifest;
        explodedArchive41.recursive = false;
        java.util.jar.Manifest manifest45 = explodedArchive41.manifest;
        java.io.File file46 = explodedArchive41.manifestFile;
        java.io.File file47 = null;
        java.io.File file48 = explodedArchive41.getManifestFile(file47);
        explodedArchive37.manifestFile = file47;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive50 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest51 = explodedArchive50.manifest;
        explodedArchive50.recursive = false;
        java.util.jar.Manifest manifest54 = explodedArchive50.manifest;
        java.io.File file55 = explodedArchive50.manifestFile;
        java.io.File file56 = null;
        java.io.File file57 = explodedArchive50.getManifestFile(file56);
        explodedArchive37.manifestFile = file57;
        java.io.File file59 = explodedArchive33.getManifestFile(file57);
        java.io.File file60 = explodedArchive31.getManifestFile(file57);
        explodedArchive0.root = file60;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file18.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file18.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file27.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file27.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file29.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file29.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str32 + "' != '" + "exploded archive" + "'", str32.equals("exploded archive"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file48.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file48.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file57.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file57.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file59.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file59.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file60.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file60.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
    }

    @Test
    public void test0417() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0417");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest1 = explodedArchive0.manifest;
        java.util.jar.Manifest manifest2 = null;
        explodedArchive0.manifest = manifest2;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntry fileEntry4 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntry();
        java.lang.String str5 = fileEntry4.name;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator6 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file7 = null;
        fileEntryIterator6.current = file7;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive9 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest10 = explodedArchive9.manifest;
        explodedArchive9.recursive = false;
        java.util.jar.Manifest manifest13 = explodedArchive9.manifest;
        java.io.File file14 = explodedArchive9.manifestFile;
        java.io.File file15 = null;
        java.io.File file16 = explodedArchive9.getManifestFile(file15);
        java.util.Iterator<java.io.File> fileItor17 = fileEntryIterator6.listFiles(file16);
        java.io.File file18 = fileEntryIterator6.current;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator19 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file20 = null;
        fileEntryIterator19.current = file20;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive22 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest23 = explodedArchive22.manifest;
        explodedArchive22.recursive = false;
        java.util.jar.Manifest manifest26 = explodedArchive22.manifest;
        java.io.File file27 = explodedArchive22.manifestFile;
        java.io.File file28 = null;
        java.io.File file29 = explodedArchive22.getManifestFile(file28);
        java.util.Iterator<java.io.File> fileItor30 = fileEntryIterator19.listFiles(file29);
        java.util.ArrayDeque<java.util.Iterator<java.io.File>> fileItorQueue31 = new java.util.ArrayDeque<java.util.Iterator<java.io.File>>();
        boolean boolean32 = fileItorQueue31.add(fileItor30);
        fileEntryIterator6.stack = fileItorQueue31;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive34 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest35 = explodedArchive34.manifest;
        explodedArchive34.recursive = false;
        java.io.File file38 = null;
        explodedArchive34.root = file38;
        java.io.File file40 = explodedArchive34.root;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive41 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest42 = explodedArchive41.manifest;
        explodedArchive41.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive45 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest46 = explodedArchive45.manifest;
        explodedArchive45.recursive = false;
        java.util.jar.Manifest manifest49 = explodedArchive45.manifest;
        java.io.File file50 = explodedArchive45.manifestFile;
        java.io.File file51 = null;
        java.io.File file52 = explodedArchive45.getManifestFile(file51);
        explodedArchive41.manifestFile = file51;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive54 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest55 = explodedArchive54.manifest;
        explodedArchive54.recursive = false;
        java.util.jar.Manifest manifest58 = explodedArchive54.manifest;
        java.io.File file59 = explodedArchive54.manifestFile;
        java.io.File file60 = null;
        java.io.File file61 = explodedArchive54.getManifestFile(file60);
        explodedArchive41.manifestFile = file61;
        java.io.File file63 = explodedArchive34.getManifestFile(file61);
        fileEntryIterator6.root = file61;
        fileEntry4.file = file61;
        java.io.File file66 = explodedArchive0.getManifestFile(file61);
        // The following exception was thrown during execution in test generation
        try {
            org.springframework.boot.loader.archive.ExplodedArchive explodedArchive68 = new org.springframework.boot.loader.archive.ExplodedArchive(file61, false);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid source folder META-INF/MANIFEST.MF");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file16.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file16.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file29.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file29.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file52.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file52.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file61.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file61.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file63.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file63.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file66.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file66.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
    }

    @Test
    public void test0418() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0418");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        boolean boolean1 = fileEntryIterator0.hasNext();
        java.io.File file2 = fileEntryIterator0.root;
        boolean boolean3 = fileEntryIterator0.hasNext();
        java.util.Comparator<java.io.File> fileComparator4 = fileEntryIterator0.entryComparator;
        java.io.File file5 = fileEntryIterator0.current;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator6 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        boolean boolean7 = fileEntryIterator6.hasNext();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator8 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator9 = entryComparator8.reversed();
        java.util.Comparator<java.io.File> fileComparator10 = fileComparator9.reversed();
        fileEntryIterator6.entryComparator = fileComparator10;
        java.util.Comparator<java.io.File> fileComparator12 = fileEntryIterator6.entryComparator;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator13 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator14 = entryComparator13.reversed();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator15 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator16 = entryComparator15.reversed();
        java.util.Comparator<java.io.File> fileComparator17 = entryComparator13.thenComparing(fileComparator16);
        java.util.Comparator<java.io.File> fileComparator18 = fileComparator12.thenComparing(fileComparator16);
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator19 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator20 = entryComparator19.reversed();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator21 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator22 = entryComparator21.reversed();
        java.util.Comparator<java.io.File> fileComparator23 = entryComparator19.thenComparing(fileComparator22);
        java.util.Comparator<java.io.File> fileComparator24 = fileComparator18.thenComparing((java.util.Comparator<java.io.File>) entryComparator19);
        fileEntryIterator0.entryComparator = fileComparator24;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator26 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file27 = null;
        fileEntryIterator26.current = file27;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive29 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest30 = explodedArchive29.manifest;
        explodedArchive29.recursive = false;
        java.util.jar.Manifest manifest33 = explodedArchive29.manifest;
        java.io.File file34 = explodedArchive29.manifestFile;
        java.io.File file35 = null;
        java.io.File file36 = explodedArchive29.getManifestFile(file35);
        java.util.Iterator<java.io.File> fileItor37 = fileEntryIterator26.listFiles(file36);
        java.io.File file38 = fileEntryIterator26.root;
        java.io.File file39 = fileEntryIterator26.root;
        java.util.Deque<java.util.Iterator<java.io.File>> fileItorQueue40 = fileEntryIterator26.stack;
        java.io.File file41 = fileEntryIterator26.current;
        java.io.File file42 = fileEntryIterator26.root;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntry fileEntry43 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntry();
        java.io.File file44 = fileEntry43.file;
        java.lang.String str45 = fileEntry43.name;
        java.io.File file46 = fileEntry43.file;
        java.io.File file47 = fileEntry43.file;
        java.lang.String str48 = fileEntry43.getName();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntry fileEntry49 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntry();
        java.lang.String str50 = fileEntry49.name;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator51 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file52 = null;
        fileEntryIterator51.current = file52;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive54 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.lang.String str55 = explodedArchive54.toString();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive56 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file57 = explodedArchive56.root;
        java.io.File file58 = null;
        explodedArchive56.manifestFile = file58;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive60 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest61 = explodedArchive60.manifest;
        explodedArchive60.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive64 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest65 = explodedArchive64.manifest;
        explodedArchive64.recursive = false;
        java.util.jar.Manifest manifest68 = explodedArchive64.manifest;
        java.io.File file69 = explodedArchive64.manifestFile;
        java.io.File file70 = null;
        java.io.File file71 = explodedArchive64.getManifestFile(file70);
        explodedArchive60.manifestFile = file70;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive73 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest74 = explodedArchive73.manifest;
        explodedArchive73.recursive = false;
        java.util.jar.Manifest manifest77 = explodedArchive73.manifest;
        java.io.File file78 = explodedArchive73.manifestFile;
        java.io.File file79 = null;
        java.io.File file80 = explodedArchive73.getManifestFile(file79);
        explodedArchive60.manifestFile = file80;
        java.io.File file82 = explodedArchive56.getManifestFile(file80);
        java.io.File file83 = explodedArchive54.getManifestFile(file80);
        fileEntryIterator51.root = file80;
        fileEntry49.file = file80;
        fileEntry43.file = file80;
        fileEntryIterator26.root = file80;
        java.util.Deque<java.util.Iterator<java.io.File>> fileItorQueue88 = fileEntryIterator26.stack;
        fileEntryIterator0.stack = fileItorQueue88;
        boolean boolean90 = fileEntryIterator0.hasNext();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file36.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file36.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItorQueue40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str55 + "' != '" + "exploded archive" + "'", str55.equals("exploded archive"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file71.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file71.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest77);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file78);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file80);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file80.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file80.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file82);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file82.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file82.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file83);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file83.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file83.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItorQueue88);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
    }

    @Test
    public void test0419() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0419");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        boolean boolean1 = explodedArchive0.recursive;
        boolean boolean2 = explodedArchive0.recursive;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive3 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file4 = explodedArchive3.root;
        java.io.File file5 = null;
        explodedArchive3.manifestFile = file5;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive7 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest8 = explodedArchive7.manifest;
        explodedArchive7.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive11 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest12 = explodedArchive11.manifest;
        explodedArchive11.recursive = false;
        java.util.jar.Manifest manifest15 = explodedArchive11.manifest;
        java.io.File file16 = explodedArchive11.manifestFile;
        java.io.File file17 = null;
        java.io.File file18 = explodedArchive11.getManifestFile(file17);
        explodedArchive7.manifestFile = file17;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive20 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest21 = explodedArchive20.manifest;
        explodedArchive20.recursive = false;
        java.util.jar.Manifest manifest24 = explodedArchive20.manifest;
        java.io.File file25 = explodedArchive20.manifestFile;
        java.io.File file26 = null;
        java.io.File file27 = explodedArchive20.getManifestFile(file26);
        explodedArchive7.manifestFile = file27;
        java.io.File file29 = explodedArchive3.getManifestFile(file27);
        explodedArchive0.manifestFile = file27;
        boolean boolean31 = explodedArchive0.recursive;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator<org.springframework.boot.loader.archive.Archive.Entry> entryItor32 = explodedArchive0.iterator();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file18.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file18.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file27.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file27.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file29.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file29.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
    }

    @Test
    public void test0420() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0420");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest1 = explodedArchive0.manifest;
        java.util.jar.Manifest manifest2 = null;
        explodedArchive0.manifest = manifest2;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator4 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        boolean boolean5 = fileEntryIterator4.hasNext();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator6 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator7 = entryComparator6.reversed();
        java.util.Comparator<java.io.File> fileComparator8 = fileComparator7.reversed();
        fileEntryIterator4.entryComparator = fileComparator8;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive10 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file11 = explodedArchive10.root;
        java.io.File file12 = null;
        explodedArchive10.manifestFile = file12;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive14 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest15 = explodedArchive14.manifest;
        explodedArchive14.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive18 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest19 = explodedArchive18.manifest;
        explodedArchive18.recursive = false;
        java.util.jar.Manifest manifest22 = explodedArchive18.manifest;
        java.io.File file23 = explodedArchive18.manifestFile;
        java.io.File file24 = null;
        java.io.File file25 = explodedArchive18.getManifestFile(file24);
        explodedArchive14.manifestFile = file24;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive27 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest28 = explodedArchive27.manifest;
        explodedArchive27.recursive = false;
        java.util.jar.Manifest manifest31 = explodedArchive27.manifest;
        java.io.File file32 = explodedArchive27.manifestFile;
        java.io.File file33 = null;
        java.io.File file34 = explodedArchive27.getManifestFile(file33);
        explodedArchive14.manifestFile = file34;
        java.io.File file36 = explodedArchive10.getManifestFile(file34);
        java.util.Iterator<java.io.File> fileItor37 = fileEntryIterator4.listFiles(file36);
        java.io.File file38 = explodedArchive0.getManifestFile(file36);
        java.lang.String str39 = explodedArchive0.toString();
        explodedArchive0.recursive = true;
        org.springframework.boot.loader.archive.Archive.EntryFilter entryFilter42 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<org.springframework.boot.loader.archive.Archive> archiveList43 = explodedArchive0.getNestedArchives(entryFilter42);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file25.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file25.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file34.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file34.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file36.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file36.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file38.getParent(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file38.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str39 + "' != '" + "exploded archive" + "'", str39.equals("exploded archive"));
    }

    @Test
    public void test0421() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0421");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntry fileEntry0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntry();
        java.lang.String str1 = fileEntry0.name;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator2 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file3 = null;
        fileEntryIterator2.current = file3;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive5 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest6 = explodedArchive5.manifest;
        explodedArchive5.recursive = false;
        java.util.jar.Manifest manifest9 = explodedArchive5.manifest;
        java.io.File file10 = explodedArchive5.manifestFile;
        java.io.File file11 = null;
        java.io.File file12 = explodedArchive5.getManifestFile(file11);
        java.util.Iterator<java.io.File> fileItor13 = fileEntryIterator2.listFiles(file12);
        java.io.File file14 = fileEntryIterator2.current;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator15 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file16 = null;
        fileEntryIterator15.current = file16;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive18 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest19 = explodedArchive18.manifest;
        explodedArchive18.recursive = false;
        java.util.jar.Manifest manifest22 = explodedArchive18.manifest;
        java.io.File file23 = explodedArchive18.manifestFile;
        java.io.File file24 = null;
        java.io.File file25 = explodedArchive18.getManifestFile(file24);
        java.util.Iterator<java.io.File> fileItor26 = fileEntryIterator15.listFiles(file25);
        java.util.ArrayDeque<java.util.Iterator<java.io.File>> fileItorQueue27 = new java.util.ArrayDeque<java.util.Iterator<java.io.File>>();
        boolean boolean28 = fileItorQueue27.add(fileItor26);
        fileEntryIterator2.stack = fileItorQueue27;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive30 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest31 = explodedArchive30.manifest;
        explodedArchive30.recursive = false;
        java.io.File file34 = null;
        explodedArchive30.root = file34;
        java.io.File file36 = explodedArchive30.root;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive37 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest38 = explodedArchive37.manifest;
        explodedArchive37.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive41 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest42 = explodedArchive41.manifest;
        explodedArchive41.recursive = false;
        java.util.jar.Manifest manifest45 = explodedArchive41.manifest;
        java.io.File file46 = explodedArchive41.manifestFile;
        java.io.File file47 = null;
        java.io.File file48 = explodedArchive41.getManifestFile(file47);
        explodedArchive37.manifestFile = file47;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive50 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest51 = explodedArchive50.manifest;
        explodedArchive50.recursive = false;
        java.util.jar.Manifest manifest54 = explodedArchive50.manifest;
        java.io.File file55 = explodedArchive50.manifestFile;
        java.io.File file56 = null;
        java.io.File file57 = explodedArchive50.getManifestFile(file56);
        explodedArchive37.manifestFile = file57;
        java.io.File file59 = explodedArchive30.getManifestFile(file57);
        fileEntryIterator2.root = file57;
        fileEntry0.file = file57;
        boolean boolean62 = fileEntry0.isDirectory();
        boolean boolean63 = fileEntry0.isDirectory();
        java.io.File file64 = fileEntry0.file;
        java.io.File file65 = fileEntry0.getFile();
        // The following exception was thrown during execution in test generation
        try {
            org.springframework.boot.loader.archive.ExplodedArchive explodedArchive66 = new org.springframework.boot.loader.archive.ExplodedArchive(file65);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid source folder META-INF/MANIFEST.MF");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file12.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file12.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file25.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file25.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file48.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file48.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file57.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file57.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file59.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file59.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file64.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file64.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file65.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file65.toString(), "META-INF/MANIFEST.MF");
    }

    @Test
    public void test0422() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0422");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest1 = explodedArchive0.manifest;
        java.util.jar.Manifest manifest2 = null;
        explodedArchive0.manifest = manifest2;
        java.io.File file4 = explodedArchive0.root;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator5 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file6 = null;
        fileEntryIterator5.current = file6;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive8 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.lang.String str9 = explodedArchive8.toString();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive10 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file11 = explodedArchive10.root;
        java.io.File file12 = null;
        explodedArchive10.manifestFile = file12;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive14 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest15 = explodedArchive14.manifest;
        explodedArchive14.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive18 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest19 = explodedArchive18.manifest;
        explodedArchive18.recursive = false;
        java.util.jar.Manifest manifest22 = explodedArchive18.manifest;
        java.io.File file23 = explodedArchive18.manifestFile;
        java.io.File file24 = null;
        java.io.File file25 = explodedArchive18.getManifestFile(file24);
        explodedArchive14.manifestFile = file24;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive27 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest28 = explodedArchive27.manifest;
        explodedArchive27.recursive = false;
        java.util.jar.Manifest manifest31 = explodedArchive27.manifest;
        java.io.File file32 = explodedArchive27.manifestFile;
        java.io.File file33 = null;
        java.io.File file34 = explodedArchive27.getManifestFile(file33);
        explodedArchive14.manifestFile = file34;
        java.io.File file36 = explodedArchive10.getManifestFile(file34);
        java.io.File file37 = explodedArchive8.getManifestFile(file34);
        fileEntryIterator5.root = file34;
        java.io.File file39 = explodedArchive0.getManifestFile(file34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str9 + "' != '" + "exploded archive" + "'", str9.equals("exploded archive"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file25.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file25.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file34.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file34.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file36.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file36.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file37.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file37.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file39.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file39.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
    }

    @Test
    public void test0423() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0423");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest1 = explodedArchive0.manifest;
        explodedArchive0.recursive = false;
        java.util.jar.Manifest manifest4 = explodedArchive0.manifest;
        java.io.File file5 = explodedArchive0.manifestFile;
        java.io.File file6 = explodedArchive0.root;
        java.io.File file7 = explodedArchive0.root;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file7);
    }

    @Test
    public void test0424() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0424");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest1 = explodedArchive0.manifest;
        explodedArchive0.recursive = false;
        java.io.File file4 = null;
        explodedArchive0.root = file4;
        java.io.File file6 = explodedArchive0.root;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive7 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest8 = explodedArchive7.manifest;
        explodedArchive7.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive11 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest12 = explodedArchive11.manifest;
        explodedArchive11.recursive = false;
        java.util.jar.Manifest manifest15 = explodedArchive11.manifest;
        java.io.File file16 = explodedArchive11.manifestFile;
        java.io.File file17 = null;
        java.io.File file18 = explodedArchive11.getManifestFile(file17);
        explodedArchive7.manifestFile = file17;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive20 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest21 = explodedArchive20.manifest;
        explodedArchive20.recursive = false;
        java.util.jar.Manifest manifest24 = explodedArchive20.manifest;
        java.io.File file25 = explodedArchive20.manifestFile;
        java.io.File file26 = null;
        java.io.File file27 = explodedArchive20.getManifestFile(file26);
        explodedArchive7.manifestFile = file27;
        java.io.File file29 = explodedArchive0.getManifestFile(file27);
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive30 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest31 = explodedArchive30.manifest;
        explodedArchive30.recursive = false;
        java.io.File file34 = null;
        explodedArchive30.root = file34;
        java.io.File file36 = explodedArchive30.manifestFile;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive37 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file38 = explodedArchive37.root;
        java.io.File file39 = null;
        explodedArchive37.manifestFile = file39;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive41 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest42 = explodedArchive41.manifest;
        explodedArchive41.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive45 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest46 = explodedArchive45.manifest;
        explodedArchive45.recursive = false;
        java.util.jar.Manifest manifest49 = explodedArchive45.manifest;
        java.io.File file50 = explodedArchive45.manifestFile;
        java.io.File file51 = null;
        java.io.File file52 = explodedArchive45.getManifestFile(file51);
        explodedArchive41.manifestFile = file51;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive54 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest55 = explodedArchive54.manifest;
        explodedArchive54.recursive = false;
        java.util.jar.Manifest manifest58 = explodedArchive54.manifest;
        java.io.File file59 = explodedArchive54.manifestFile;
        java.io.File file60 = null;
        java.io.File file61 = explodedArchive54.getManifestFile(file60);
        explodedArchive41.manifestFile = file61;
        java.io.File file63 = explodedArchive37.getManifestFile(file61);
        java.io.File file64 = explodedArchive30.getManifestFile(file61);
        explodedArchive0.manifestFile = file61;
        explodedArchive0.recursive = true;
        java.util.jar.Manifest manifest68 = explodedArchive0.manifest;
        java.io.File file69 = explodedArchive0.root;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file18.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file18.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file27.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file27.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file29.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file29.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file52.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file52.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file61.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file61.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file63.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file63.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file64.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file64.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file69);
    }

    @Test
    public void test0425() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0425");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest1 = explodedArchive0.manifest;
        java.util.jar.Manifest manifest2 = null;
        explodedArchive0.manifest = manifest2;
        java.io.File file4 = explodedArchive0.root;
        explodedArchive0.recursive = false;
        java.io.File file7 = explodedArchive0.manifestFile;
        org.springframework.boot.loader.archive.Archive.EntryFilter entryFilter8 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<org.springframework.boot.loader.archive.Archive> archiveList9 = explodedArchive0.getNestedArchives(entryFilter8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file7);
    }

    @Test
    public void test0426() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0426");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file1 = null;
        fileEntryIterator0.current = file1;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive3 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest4 = explodedArchive3.manifest;
        explodedArchive3.recursive = false;
        java.util.jar.Manifest manifest7 = explodedArchive3.manifest;
        java.io.File file8 = explodedArchive3.manifestFile;
        java.io.File file9 = null;
        java.io.File file10 = explodedArchive3.getManifestFile(file9);
        java.util.Iterator<java.io.File> fileItor11 = fileEntryIterator0.listFiles(file10);
        java.io.File file12 = fileEntryIterator0.root;
        java.io.File file13 = fileEntryIterator0.current;
        boolean boolean14 = fileEntryIterator0.recursive;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive15 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest16 = explodedArchive15.manifest;
        explodedArchive15.recursive = false;
        java.util.jar.Manifest manifest19 = explodedArchive15.manifest;
        explodedArchive15.recursive = true;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator22 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file23 = null;
        fileEntryIterator22.current = file23;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive25 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.lang.String str26 = explodedArchive25.toString();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive27 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file28 = explodedArchive27.root;
        java.io.File file29 = null;
        explodedArchive27.manifestFile = file29;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive31 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest32 = explodedArchive31.manifest;
        explodedArchive31.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive35 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest36 = explodedArchive35.manifest;
        explodedArchive35.recursive = false;
        java.util.jar.Manifest manifest39 = explodedArchive35.manifest;
        java.io.File file40 = explodedArchive35.manifestFile;
        java.io.File file41 = null;
        java.io.File file42 = explodedArchive35.getManifestFile(file41);
        explodedArchive31.manifestFile = file41;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive44 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest45 = explodedArchive44.manifest;
        explodedArchive44.recursive = false;
        java.util.jar.Manifest manifest48 = explodedArchive44.manifest;
        java.io.File file49 = explodedArchive44.manifestFile;
        java.io.File file50 = null;
        java.io.File file51 = explodedArchive44.getManifestFile(file50);
        explodedArchive31.manifestFile = file51;
        java.io.File file53 = explodedArchive27.getManifestFile(file51);
        java.io.File file54 = explodedArchive25.getManifestFile(file51);
        fileEntryIterator22.root = file51;
        java.io.File file56 = fileEntryIterator22.root;
        explodedArchive15.root = file56;
        fileEntryIterator0.root = file56;
        boolean boolean59 = fileEntryIterator0.recursive;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str26 + "' != '" + "exploded archive" + "'", str26.equals("exploded archive"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file42.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file42.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file51.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file51.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file53.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file53.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file54.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file54.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file56.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file56.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
    }

    @Test
    public void test0427() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0427");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        boolean boolean1 = explodedArchive0.recursive;
        java.lang.String str2 = explodedArchive0.toString();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator3 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file4 = null;
        fileEntryIterator3.current = file4;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive6 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest7 = explodedArchive6.manifest;
        explodedArchive6.recursive = false;
        java.util.jar.Manifest manifest10 = explodedArchive6.manifest;
        java.io.File file11 = explodedArchive6.manifestFile;
        java.io.File file12 = null;
        java.io.File file13 = explodedArchive6.getManifestFile(file12);
        java.util.Iterator<java.io.File> fileItor14 = fileEntryIterator3.listFiles(file13);
        java.io.File file15 = fileEntryIterator3.current;
        boolean boolean16 = fileEntryIterator3.recursive;
        java.io.File file17 = fileEntryIterator3.poll();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator18 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file19 = null;
        fileEntryIterator18.current = file19;
        fileEntryIterator18.recursive = true;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator23 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator24 = entryComparator23.reversed();
        java.util.Comparator<java.io.File> fileComparator25 = entryComparator23.reversed();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive26 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest27 = explodedArchive26.manifest;
        explodedArchive26.recursive = false;
        java.util.jar.Manifest manifest30 = explodedArchive26.manifest;
        java.io.File file31 = explodedArchive26.manifestFile;
        java.io.File file32 = null;
        java.io.File file33 = explodedArchive26.getManifestFile(file32);
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive34 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest35 = explodedArchive34.manifest;
        explodedArchive34.recursive = false;
        java.io.File file38 = null;
        explodedArchive34.root = file38;
        java.io.File file40 = explodedArchive34.root;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive41 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest42 = explodedArchive41.manifest;
        explodedArchive41.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive45 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest46 = explodedArchive45.manifest;
        explodedArchive45.recursive = false;
        java.util.jar.Manifest manifest49 = explodedArchive45.manifest;
        java.io.File file50 = explodedArchive45.manifestFile;
        java.io.File file51 = null;
        java.io.File file52 = explodedArchive45.getManifestFile(file51);
        explodedArchive41.manifestFile = file51;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive54 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest55 = explodedArchive54.manifest;
        explodedArchive54.recursive = false;
        java.util.jar.Manifest manifest58 = explodedArchive54.manifest;
        java.io.File file59 = explodedArchive54.manifestFile;
        java.io.File file60 = null;
        java.io.File file61 = explodedArchive54.getManifestFile(file60);
        explodedArchive41.manifestFile = file61;
        java.io.File file63 = explodedArchive34.getManifestFile(file61);
        int int64 = entryComparator23.compare(file33, file61);
        java.util.Iterator<java.io.File> fileItor65 = fileEntryIterator18.listFiles(file33);
        fileEntryIterator3.current = file33;
        explodedArchive0.root = file33;
        // The following exception was thrown during execution in test generation
        try {
            java.util.jar.Manifest manifest68 = explodedArchive0.getManifest();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str2 + "' != '" + "exploded archive" + "'", str2.equals("exploded archive"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file13.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file13.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file33.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file33.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file52.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file52.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file61.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file61.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file63.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file63.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor65);
    }

    @Test
    public void test0428() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0428");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file1 = null;
        fileEntryIterator0.current = file1;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive3 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.lang.String str4 = explodedArchive3.toString();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive5 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file6 = explodedArchive5.root;
        java.io.File file7 = null;
        explodedArchive5.manifestFile = file7;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive9 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest10 = explodedArchive9.manifest;
        explodedArchive9.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive13 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest14 = explodedArchive13.manifest;
        explodedArchive13.recursive = false;
        java.util.jar.Manifest manifest17 = explodedArchive13.manifest;
        java.io.File file18 = explodedArchive13.manifestFile;
        java.io.File file19 = null;
        java.io.File file20 = explodedArchive13.getManifestFile(file19);
        explodedArchive9.manifestFile = file19;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive22 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest23 = explodedArchive22.manifest;
        explodedArchive22.recursive = false;
        java.util.jar.Manifest manifest26 = explodedArchive22.manifest;
        java.io.File file27 = explodedArchive22.manifestFile;
        java.io.File file28 = null;
        java.io.File file29 = explodedArchive22.getManifestFile(file28);
        explodedArchive9.manifestFile = file29;
        java.io.File file31 = explodedArchive5.getManifestFile(file29);
        java.io.File file32 = explodedArchive3.getManifestFile(file29);
        fileEntryIterator0.root = file29;
        boolean boolean34 = fileEntryIterator0.recursive;
        java.io.File file35 = fileEntryIterator0.current;
        boolean boolean36 = fileEntryIterator0.recursive;
        java.io.File file37 = fileEntryIterator0.root;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator38 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator39 = entryComparator38.reversed();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator40 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator41 = entryComparator40.reversed();
        java.util.Comparator<java.io.File> fileComparator42 = entryComparator38.thenComparing(fileComparator41);
        java.util.Comparator<java.io.File> fileComparator43 = entryComparator38.reversed();
        fileEntryIterator0.entryComparator = entryComparator38;
        boolean boolean45 = fileEntryIterator0.hasNext();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str4 + "' != '" + "exploded archive" + "'", str4.equals("exploded archive"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file20.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file20.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file29.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file29.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file31.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file31.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file32.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file32.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file37.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file37.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
    }

    @Test
    public void test0429() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0429");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntry fileEntry0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntry();
        java.lang.String str1 = fileEntry0.name;
        java.lang.String str2 = fileEntry0.name;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str2);
    }

    @Test
    public void test0430() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0430");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file1 = null;
        fileEntryIterator0.current = file1;
        fileEntryIterator0.recursive = true;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator5 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file6 = null;
        fileEntryIterator5.current = file6;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive8 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest9 = explodedArchive8.manifest;
        explodedArchive8.recursive = false;
        java.util.jar.Manifest manifest12 = explodedArchive8.manifest;
        java.io.File file13 = explodedArchive8.manifestFile;
        java.io.File file14 = null;
        java.io.File file15 = explodedArchive8.getManifestFile(file14);
        java.util.Iterator<java.io.File> fileItor16 = fileEntryIterator5.listFiles(file15);
        java.io.File file17 = fileEntryIterator5.root;
        java.io.File file18 = fileEntryIterator5.root;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator19 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file20 = null;
        fileEntryIterator19.current = file20;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive22 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest23 = explodedArchive22.manifest;
        explodedArchive22.recursive = false;
        java.util.jar.Manifest manifest26 = explodedArchive22.manifest;
        java.io.File file27 = explodedArchive22.manifestFile;
        java.io.File file28 = null;
        java.io.File file29 = explodedArchive22.getManifestFile(file28);
        java.util.Iterator<java.io.File> fileItor30 = fileEntryIterator19.listFiles(file29);
        java.util.ArrayDeque<java.util.Iterator<java.io.File>> fileItorQueue31 = new java.util.ArrayDeque<java.util.Iterator<java.io.File>>();
        boolean boolean32 = fileItorQueue31.add(fileItor30);
        fileEntryIterator5.stack = fileItorQueue31;
        java.util.Deque<java.util.Iterator<java.io.File>> fileItorQueue34 = fileEntryIterator5.stack;
        fileEntryIterator0.stack = fileItorQueue34;
        boolean boolean36 = fileEntryIterator0.hasNext();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file15.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file15.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file29.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file29.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItorQueue34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
    }

    @Test
    public void test0431() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0431");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntry fileEntry0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntry();
        java.lang.String str1 = fileEntry0.getName();
        java.io.File file2 = fileEntry0.getFile();
        java.lang.String str3 = fileEntry0.getName();
        java.lang.String str4 = fileEntry0.getName();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator5 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        boolean boolean6 = fileEntryIterator5.recursive;
        java.io.File file7 = fileEntryIterator5.current;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator8 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file9 = null;
        fileEntryIterator8.current = file9;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive11 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest12 = explodedArchive11.manifest;
        explodedArchive11.recursive = false;
        java.util.jar.Manifest manifest15 = explodedArchive11.manifest;
        java.io.File file16 = explodedArchive11.manifestFile;
        java.io.File file17 = null;
        java.io.File file18 = explodedArchive11.getManifestFile(file17);
        java.util.Iterator<java.io.File> fileItor19 = fileEntryIterator8.listFiles(file18);
        java.io.File file20 = fileEntryIterator8.root;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive21 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.lang.String str22 = explodedArchive21.toString();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive23 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file24 = explodedArchive23.root;
        java.io.File file25 = null;
        explodedArchive23.manifestFile = file25;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive27 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest28 = explodedArchive27.manifest;
        explodedArchive27.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive31 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest32 = explodedArchive31.manifest;
        explodedArchive31.recursive = false;
        java.util.jar.Manifest manifest35 = explodedArchive31.manifest;
        java.io.File file36 = explodedArchive31.manifestFile;
        java.io.File file37 = null;
        java.io.File file38 = explodedArchive31.getManifestFile(file37);
        explodedArchive27.manifestFile = file37;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive40 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest41 = explodedArchive40.manifest;
        explodedArchive40.recursive = false;
        java.util.jar.Manifest manifest44 = explodedArchive40.manifest;
        java.io.File file45 = explodedArchive40.manifestFile;
        java.io.File file46 = null;
        java.io.File file47 = explodedArchive40.getManifestFile(file46);
        explodedArchive27.manifestFile = file47;
        java.io.File file49 = explodedArchive23.getManifestFile(file47);
        java.io.File file50 = explodedArchive21.getManifestFile(file47);
        fileEntryIterator8.root = file47;
        java.util.Iterator<java.io.File> fileItor52 = fileEntryIterator5.listFiles(file47);
        fileEntry0.file = file47;
        java.lang.String str54 = fileEntry0.getName();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file18.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file18.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str22 + "' != '" + "exploded archive" + "'", str22.equals("exploded archive"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file38.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file38.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file47.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file47.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file49.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file49.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file50.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file50.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str54);
    }

    @Test
    public void test0432() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0432");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file1 = null;
        fileEntryIterator0.current = file1;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive3 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest4 = explodedArchive3.manifest;
        explodedArchive3.recursive = false;
        java.util.jar.Manifest manifest7 = explodedArchive3.manifest;
        java.io.File file8 = explodedArchive3.manifestFile;
        java.io.File file9 = null;
        java.io.File file10 = explodedArchive3.getManifestFile(file9);
        java.util.Iterator<java.io.File> fileItor11 = fileEntryIterator0.listFiles(file10);
        java.io.File file12 = fileEntryIterator0.root;
        java.io.File file13 = fileEntryIterator0.poll();
        java.util.Comparator<java.io.File> fileComparator14 = fileEntryIterator0.entryComparator;
        java.util.Deque<java.util.Iterator<java.io.File>> fileItorQueue15 = fileEntryIterator0.stack;
        java.util.Deque<java.util.Iterator<java.io.File>> fileItorQueue16 = fileEntryIterator0.stack;
        java.lang.Class<?> wildcardClass17 = fileEntryIterator0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItorQueue15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItorQueue16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test0433() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0433");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest1 = explodedArchive0.manifest;
        explodedArchive0.recursive = false;
        java.io.File file4 = null;
        explodedArchive0.root = file4;
        java.io.File file6 = explodedArchive0.root;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive7 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest8 = explodedArchive7.manifest;
        explodedArchive7.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive11 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest12 = explodedArchive11.manifest;
        explodedArchive11.recursive = false;
        java.util.jar.Manifest manifest15 = explodedArchive11.manifest;
        java.io.File file16 = explodedArchive11.manifestFile;
        java.io.File file17 = null;
        java.io.File file18 = explodedArchive11.getManifestFile(file17);
        explodedArchive7.manifestFile = file17;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive20 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest21 = explodedArchive20.manifest;
        explodedArchive20.recursive = false;
        java.util.jar.Manifest manifest24 = explodedArchive20.manifest;
        java.io.File file25 = explodedArchive20.manifestFile;
        java.io.File file26 = null;
        java.io.File file27 = explodedArchive20.getManifestFile(file26);
        explodedArchive7.manifestFile = file27;
        java.io.File file29 = explodedArchive0.getManifestFile(file27);
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator30 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file31 = null;
        fileEntryIterator30.current = file31;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive33 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.lang.String str34 = explodedArchive33.toString();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive35 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file36 = explodedArchive35.root;
        java.io.File file37 = null;
        explodedArchive35.manifestFile = file37;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive39 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest40 = explodedArchive39.manifest;
        explodedArchive39.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive43 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest44 = explodedArchive43.manifest;
        explodedArchive43.recursive = false;
        java.util.jar.Manifest manifest47 = explodedArchive43.manifest;
        java.io.File file48 = explodedArchive43.manifestFile;
        java.io.File file49 = null;
        java.io.File file50 = explodedArchive43.getManifestFile(file49);
        explodedArchive39.manifestFile = file49;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive52 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest53 = explodedArchive52.manifest;
        explodedArchive52.recursive = false;
        java.util.jar.Manifest manifest56 = explodedArchive52.manifest;
        java.io.File file57 = explodedArchive52.manifestFile;
        java.io.File file58 = null;
        java.io.File file59 = explodedArchive52.getManifestFile(file58);
        explodedArchive39.manifestFile = file59;
        java.io.File file61 = explodedArchive35.getManifestFile(file59);
        java.io.File file62 = explodedArchive33.getManifestFile(file59);
        fileEntryIterator30.root = file59;
        explodedArchive0.manifestFile = file59;
        java.util.jar.Manifest manifest65 = explodedArchive0.getManifest();
        java.util.jar.Manifest manifest66 = null;
        explodedArchive0.manifest = manifest66;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file18.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file18.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file27.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file27.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file29.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file29.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str34 + "' != '" + "exploded archive" + "'", str34.equals("exploded archive"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file50.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file50.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file59.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file59.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file61.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file61.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file62.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file62.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest65);
    }

    @Test
    public void test0434() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0434");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file1 = explodedArchive0.root;
        java.io.File file2 = null;
        explodedArchive0.manifestFile = file2;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive4 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest5 = explodedArchive4.manifest;
        explodedArchive4.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive8 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest9 = explodedArchive8.manifest;
        explodedArchive8.recursive = false;
        java.util.jar.Manifest manifest12 = explodedArchive8.manifest;
        java.io.File file13 = explodedArchive8.manifestFile;
        java.io.File file14 = null;
        java.io.File file15 = explodedArchive8.getManifestFile(file14);
        explodedArchive4.manifestFile = file14;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive17 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest18 = explodedArchive17.manifest;
        explodedArchive17.recursive = false;
        java.util.jar.Manifest manifest21 = explodedArchive17.manifest;
        java.io.File file22 = explodedArchive17.manifestFile;
        java.io.File file23 = null;
        java.io.File file24 = explodedArchive17.getManifestFile(file23);
        explodedArchive4.manifestFile = file24;
        java.io.File file26 = explodedArchive0.getManifestFile(file24);
        java.util.jar.Manifest manifest27 = null;
        explodedArchive0.manifest = manifest27;
        java.io.File file29 = explodedArchive0.root;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntry fileEntry30 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntry();
        java.io.File file31 = fileEntry30.file;
        java.lang.String str32 = fileEntry30.name;
        java.io.File file33 = fileEntry30.file;
        java.io.File file34 = fileEntry30.file;
        java.lang.String str35 = fileEntry30.name;
        java.lang.String str36 = fileEntry30.getName();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntry fileEntry37 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntry();
        java.io.File file38 = fileEntry37.getFile();
        java.io.File file39 = fileEntry37.getFile();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive40 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file41 = explodedArchive40.root;
        java.io.File file42 = null;
        explodedArchive40.manifestFile = file42;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive44 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest45 = explodedArchive44.manifest;
        explodedArchive44.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive48 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest49 = explodedArchive48.manifest;
        explodedArchive48.recursive = false;
        java.util.jar.Manifest manifest52 = explodedArchive48.manifest;
        java.io.File file53 = explodedArchive48.manifestFile;
        java.io.File file54 = null;
        java.io.File file55 = explodedArchive48.getManifestFile(file54);
        explodedArchive44.manifestFile = file54;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive57 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest58 = explodedArchive57.manifest;
        explodedArchive57.recursive = false;
        java.util.jar.Manifest manifest61 = explodedArchive57.manifest;
        java.io.File file62 = explodedArchive57.manifestFile;
        java.io.File file63 = null;
        java.io.File file64 = explodedArchive57.getManifestFile(file63);
        explodedArchive44.manifestFile = file64;
        java.io.File file66 = explodedArchive40.getManifestFile(file64);
        fileEntry37.file = file66;
        java.io.File file68 = fileEntry37.file;
        fileEntry37.name = "exploded archive";
        java.io.File file71 = fileEntry37.file;
        java.io.File file72 = fileEntry37.getFile();
        java.io.File file73 = fileEntry37.file;
        fileEntry30.file = file73;
        java.io.File file75 = explodedArchive0.getManifestFile(file73);
        // The following exception was thrown during execution in test generation
        try {
            org.springframework.boot.loader.archive.ExplodedArchive explodedArchive76 = new org.springframework.boot.loader.archive.ExplodedArchive(file73);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid source folder META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file15.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file15.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file24.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file24.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file26.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file26.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file55.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file55.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file64.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file64.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file66.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file66.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file68.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file68.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file71.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file71.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file72.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file72.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file73);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file73.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file73.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file75);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file75.getParent(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file75.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
    }

    @Test
    public void test0435() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0435");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file1 = null;
        fileEntryIterator0.current = file1;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive3 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest4 = explodedArchive3.manifest;
        explodedArchive3.recursive = false;
        java.util.jar.Manifest manifest7 = explodedArchive3.manifest;
        java.io.File file8 = explodedArchive3.manifestFile;
        java.io.File file9 = null;
        java.io.File file10 = explodedArchive3.getManifestFile(file9);
        java.util.Iterator<java.io.File> fileItor11 = fileEntryIterator0.listFiles(file10);
        java.io.File file12 = fileEntryIterator0.root;
        java.io.File file13 = fileEntryIterator0.root;
        java.util.Deque<java.util.Iterator<java.io.File>> fileItorQueue14 = fileEntryIterator0.stack;
        java.io.File file15 = fileEntryIterator0.current;
        boolean boolean16 = fileEntryIterator0.hasNext();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntry fileEntry17 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntry();
        java.lang.String str18 = fileEntry17.name;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator19 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file20 = null;
        fileEntryIterator19.current = file20;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive22 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest23 = explodedArchive22.manifest;
        explodedArchive22.recursive = false;
        java.util.jar.Manifest manifest26 = explodedArchive22.manifest;
        java.io.File file27 = explodedArchive22.manifestFile;
        java.io.File file28 = null;
        java.io.File file29 = explodedArchive22.getManifestFile(file28);
        java.util.Iterator<java.io.File> fileItor30 = fileEntryIterator19.listFiles(file29);
        java.io.File file31 = fileEntryIterator19.current;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator32 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file33 = null;
        fileEntryIterator32.current = file33;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive35 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest36 = explodedArchive35.manifest;
        explodedArchive35.recursive = false;
        java.util.jar.Manifest manifest39 = explodedArchive35.manifest;
        java.io.File file40 = explodedArchive35.manifestFile;
        java.io.File file41 = null;
        java.io.File file42 = explodedArchive35.getManifestFile(file41);
        java.util.Iterator<java.io.File> fileItor43 = fileEntryIterator32.listFiles(file42);
        java.util.ArrayDeque<java.util.Iterator<java.io.File>> fileItorQueue44 = new java.util.ArrayDeque<java.util.Iterator<java.io.File>>();
        boolean boolean45 = fileItorQueue44.add(fileItor43);
        fileEntryIterator19.stack = fileItorQueue44;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive47 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest48 = explodedArchive47.manifest;
        explodedArchive47.recursive = false;
        java.io.File file51 = null;
        explodedArchive47.root = file51;
        java.io.File file53 = explodedArchive47.root;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive54 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest55 = explodedArchive54.manifest;
        explodedArchive54.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive58 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest59 = explodedArchive58.manifest;
        explodedArchive58.recursive = false;
        java.util.jar.Manifest manifest62 = explodedArchive58.manifest;
        java.io.File file63 = explodedArchive58.manifestFile;
        java.io.File file64 = null;
        java.io.File file65 = explodedArchive58.getManifestFile(file64);
        explodedArchive54.manifestFile = file64;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive67 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest68 = explodedArchive67.manifest;
        explodedArchive67.recursive = false;
        java.util.jar.Manifest manifest71 = explodedArchive67.manifest;
        java.io.File file72 = explodedArchive67.manifestFile;
        java.io.File file73 = null;
        java.io.File file74 = explodedArchive67.getManifestFile(file73);
        explodedArchive54.manifestFile = file74;
        java.io.File file76 = explodedArchive47.getManifestFile(file74);
        fileEntryIterator19.root = file74;
        fileEntry17.file = file74;
        boolean boolean79 = fileEntry17.isDirectory();
        boolean boolean80 = fileEntry17.isDirectory();
        java.io.File file81 = fileEntry17.file;
        java.io.File file82 = fileEntry17.file;
        java.util.Iterator<java.io.File> fileItor83 = fileEntryIterator0.listFiles(file82);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItorQueue14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file29.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file29.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file42.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file42.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file65.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file65.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file74.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file74.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file76);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file76.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file76.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file81);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file81.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file81.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file82);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file82.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file82.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor83);
    }

    @Test
    public void test0436() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0436");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntry fileEntry0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntry();
        java.io.File file1 = fileEntry0.getFile();
        java.io.File file2 = fileEntry0.getFile();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive3 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file4 = explodedArchive3.root;
        java.io.File file5 = null;
        explodedArchive3.manifestFile = file5;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive7 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest8 = explodedArchive7.manifest;
        explodedArchive7.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive11 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest12 = explodedArchive11.manifest;
        explodedArchive11.recursive = false;
        java.util.jar.Manifest manifest15 = explodedArchive11.manifest;
        java.io.File file16 = explodedArchive11.manifestFile;
        java.io.File file17 = null;
        java.io.File file18 = explodedArchive11.getManifestFile(file17);
        explodedArchive7.manifestFile = file17;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive20 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest21 = explodedArchive20.manifest;
        explodedArchive20.recursive = false;
        java.util.jar.Manifest manifest24 = explodedArchive20.manifest;
        java.io.File file25 = explodedArchive20.manifestFile;
        java.io.File file26 = null;
        java.io.File file27 = explodedArchive20.getManifestFile(file26);
        explodedArchive7.manifestFile = file27;
        java.io.File file29 = explodedArchive3.getManifestFile(file27);
        fileEntry0.file = file29;
        java.io.File file31 = fileEntry0.file;
        fileEntry0.name = "exploded archive";
        java.io.File file34 = fileEntry0.file;
        fileEntry0.name = "";
        java.io.File file37 = fileEntry0.getFile();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file18.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file18.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file27.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file27.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file29.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file29.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file31.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file31.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file34.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file34.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file37.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file37.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
    }

    @Test
    public void test0437() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0437");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest1 = explodedArchive0.manifest;
        explodedArchive0.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive4 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest5 = explodedArchive4.manifest;
        explodedArchive4.recursive = false;
        java.util.jar.Manifest manifest8 = explodedArchive4.manifest;
        java.io.File file9 = explodedArchive4.manifestFile;
        java.io.File file10 = null;
        java.io.File file11 = explodedArchive4.getManifestFile(file10);
        explodedArchive0.manifestFile = file10;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive13 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest14 = explodedArchive13.manifest;
        explodedArchive13.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive17 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest18 = explodedArchive17.manifest;
        explodedArchive17.recursive = false;
        java.util.jar.Manifest manifest21 = explodedArchive17.manifest;
        java.io.File file22 = explodedArchive17.manifestFile;
        java.io.File file23 = null;
        java.io.File file24 = explodedArchive17.getManifestFile(file23);
        explodedArchive13.manifestFile = file23;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive26 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest27 = explodedArchive26.manifest;
        explodedArchive26.recursive = false;
        java.util.jar.Manifest manifest30 = explodedArchive26.manifest;
        java.io.File file31 = explodedArchive26.manifestFile;
        java.io.File file32 = null;
        java.io.File file33 = explodedArchive26.getManifestFile(file32);
        explodedArchive13.manifestFile = file33;
        explodedArchive0.root = file33;
        java.net.URL uRL36 = explodedArchive0.getUrl();
        java.util.jar.Manifest manifest37 = explodedArchive0.manifest;
        java.util.jar.Manifest manifest38 = explodedArchive0.manifest;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file11.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file11.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file24.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file24.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file33.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file33.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(uRL36);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(uRL36.toString(), "file:/server/study-execution/new-nimrod/nimrod-hunoroutput-test-dest/spring-boot/af20dc6cc45c032573413c401f9f73aa75371744/randoop_6/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest38);
    }

    @Test
    public void test0438() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0438");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntry fileEntry0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntry();
        java.lang.String str1 = fileEntry0.getName();
        java.io.File file2 = fileEntry0.getFile();
        java.lang.String str3 = fileEntry0.getName();
        java.io.File file4 = fileEntry0.getFile();
        java.lang.String str5 = fileEntry0.name;
        java.lang.String str6 = fileEntry0.name;
        java.lang.String str7 = fileEntry0.getName();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive8 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file9 = explodedArchive8.root;
        java.io.File file10 = null;
        explodedArchive8.manifestFile = file10;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive12 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest13 = explodedArchive12.manifest;
        explodedArchive12.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive16 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest17 = explodedArchive16.manifest;
        explodedArchive16.recursive = false;
        java.util.jar.Manifest manifest20 = explodedArchive16.manifest;
        java.io.File file21 = explodedArchive16.manifestFile;
        java.io.File file22 = null;
        java.io.File file23 = explodedArchive16.getManifestFile(file22);
        explodedArchive12.manifestFile = file22;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive25 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest26 = explodedArchive25.manifest;
        explodedArchive25.recursive = false;
        java.util.jar.Manifest manifest29 = explodedArchive25.manifest;
        java.io.File file30 = explodedArchive25.manifestFile;
        java.io.File file31 = null;
        java.io.File file32 = explodedArchive25.getManifestFile(file31);
        explodedArchive12.manifestFile = file32;
        java.io.File file34 = explodedArchive8.getManifestFile(file32);
        fileEntry0.file = file34;
        java.io.File file36 = fileEntry0.file;
        // The following exception was thrown during execution in test generation
        try {
            org.springframework.boot.loader.archive.ExplodedArchive explodedArchive38 = new org.springframework.boot.loader.archive.ExplodedArchive(file36, false);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid source folder META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file23.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file23.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file32.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file32.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file34.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file34.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file36.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file36.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
    }

    @Test
    public void test0439() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0439");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file1 = null;
        fileEntryIterator0.current = file1;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive3 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest4 = explodedArchive3.manifest;
        explodedArchive3.recursive = false;
        java.util.jar.Manifest manifest7 = explodedArchive3.manifest;
        java.io.File file8 = explodedArchive3.manifestFile;
        java.io.File file9 = null;
        java.io.File file10 = explodedArchive3.getManifestFile(file9);
        java.util.Iterator<java.io.File> fileItor11 = fileEntryIterator0.listFiles(file10);
        java.io.File file12 = fileEntryIterator0.current;
        boolean boolean13 = fileEntryIterator0.recursive;
        java.io.File file14 = fileEntryIterator0.poll();
        java.util.Comparator<java.io.File> fileComparator15 = fileEntryIterator0.entryComparator;
        boolean boolean16 = fileEntryIterator0.hasNext();
        java.io.File file17 = fileEntryIterator0.current;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file17);
    }

    @Test
    public void test0440() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0440");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file1 = null;
        fileEntryIterator0.current = file1;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive3 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest4 = explodedArchive3.manifest;
        explodedArchive3.recursive = false;
        java.util.jar.Manifest manifest7 = explodedArchive3.manifest;
        java.io.File file8 = explodedArchive3.manifestFile;
        java.io.File file9 = null;
        java.io.File file10 = explodedArchive3.getManifestFile(file9);
        java.util.Iterator<java.io.File> fileItor11 = fileEntryIterator0.listFiles(file10);
        java.io.File file12 = fileEntryIterator0.root;
        java.io.File file13 = fileEntryIterator0.root;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator14 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file15 = null;
        fileEntryIterator14.current = file15;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive17 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest18 = explodedArchive17.manifest;
        explodedArchive17.recursive = false;
        java.util.jar.Manifest manifest21 = explodedArchive17.manifest;
        java.io.File file22 = explodedArchive17.manifestFile;
        java.io.File file23 = null;
        java.io.File file24 = explodedArchive17.getManifestFile(file23);
        java.util.Iterator<java.io.File> fileItor25 = fileEntryIterator14.listFiles(file24);
        java.util.ArrayDeque<java.util.Iterator<java.io.File>> fileItorQueue26 = new java.util.ArrayDeque<java.util.Iterator<java.io.File>>();
        boolean boolean27 = fileItorQueue26.add(fileItor25);
        fileEntryIterator0.stack = fileItorQueue26;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive29 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest30 = explodedArchive29.manifest;
        explodedArchive29.recursive = false;
        java.io.File file33 = null;
        explodedArchive29.root = file33;
        java.io.File file35 = explodedArchive29.root;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive36 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest37 = explodedArchive36.manifest;
        explodedArchive36.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive40 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest41 = explodedArchive40.manifest;
        explodedArchive40.recursive = false;
        java.util.jar.Manifest manifest44 = explodedArchive40.manifest;
        java.io.File file45 = explodedArchive40.manifestFile;
        java.io.File file46 = null;
        java.io.File file47 = explodedArchive40.getManifestFile(file46);
        explodedArchive36.manifestFile = file46;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive49 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest50 = explodedArchive49.manifest;
        explodedArchive49.recursive = false;
        java.util.jar.Manifest manifest53 = explodedArchive49.manifest;
        java.io.File file54 = explodedArchive49.manifestFile;
        java.io.File file55 = null;
        java.io.File file56 = explodedArchive49.getManifestFile(file55);
        explodedArchive36.manifestFile = file56;
        java.io.File file58 = explodedArchive29.getManifestFile(file56);
        fileEntryIterator0.current = file56;
        java.io.File file60 = fileEntryIterator0.root;
        java.io.File file61 = fileEntryIterator0.poll();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file24.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file24.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file47.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file47.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file56.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file56.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file58.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file58.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file61);
    }

    @Test
    public void test0441() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0441");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file1 = null;
        fileEntryIterator0.current = file1;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive3 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest4 = explodedArchive3.manifest;
        explodedArchive3.recursive = false;
        java.util.jar.Manifest manifest7 = explodedArchive3.manifest;
        java.io.File file8 = explodedArchive3.manifestFile;
        java.io.File file9 = null;
        java.io.File file10 = explodedArchive3.getManifestFile(file9);
        java.util.Iterator<java.io.File> fileItor11 = fileEntryIterator0.listFiles(file10);
        java.io.File file12 = fileEntryIterator0.root;
        boolean boolean13 = fileEntryIterator0.hasNext();
        fileEntryIterator0.recursive = false;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test0442() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0442");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file1 = null;
        fileEntryIterator0.current = file1;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive3 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest4 = explodedArchive3.manifest;
        explodedArchive3.recursive = false;
        java.util.jar.Manifest manifest7 = explodedArchive3.manifest;
        java.io.File file8 = explodedArchive3.manifestFile;
        java.io.File file9 = null;
        java.io.File file10 = explodedArchive3.getManifestFile(file9);
        java.util.Iterator<java.io.File> fileItor11 = fileEntryIterator0.listFiles(file10);
        java.io.File file12 = fileEntryIterator0.root;
        java.io.File file13 = fileEntryIterator0.current;
        java.io.File file14 = fileEntryIterator0.poll();
        // The following exception was thrown during execution in test generation
        try {
            fileEntryIterator0.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: remove");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file14);
    }

    @Test
    public void test0443() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0443");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.lang.String str1 = explodedArchive0.toString();
        explodedArchive0.recursive = true;
        java.io.File file4 = null;
        java.io.File file5 = explodedArchive0.getManifestFile(file4);
        java.lang.String str6 = explodedArchive0.toString();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntry fileEntry7 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntry();
        java.lang.String str8 = fileEntry7.name;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator9 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file10 = null;
        fileEntryIterator9.current = file10;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive12 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.lang.String str13 = explodedArchive12.toString();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive14 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file15 = explodedArchive14.root;
        java.io.File file16 = null;
        explodedArchive14.manifestFile = file16;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive18 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest19 = explodedArchive18.manifest;
        explodedArchive18.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive22 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest23 = explodedArchive22.manifest;
        explodedArchive22.recursive = false;
        java.util.jar.Manifest manifest26 = explodedArchive22.manifest;
        java.io.File file27 = explodedArchive22.manifestFile;
        java.io.File file28 = null;
        java.io.File file29 = explodedArchive22.getManifestFile(file28);
        explodedArchive18.manifestFile = file28;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive31 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest32 = explodedArchive31.manifest;
        explodedArchive31.recursive = false;
        java.util.jar.Manifest manifest35 = explodedArchive31.manifest;
        java.io.File file36 = explodedArchive31.manifestFile;
        java.io.File file37 = null;
        java.io.File file38 = explodedArchive31.getManifestFile(file37);
        explodedArchive18.manifestFile = file38;
        java.io.File file40 = explodedArchive14.getManifestFile(file38);
        java.io.File file41 = explodedArchive12.getManifestFile(file38);
        fileEntryIterator9.root = file38;
        fileEntry7.file = file38;
        java.io.File file44 = fileEntry7.file;
        java.lang.String str45 = fileEntry7.name;
        // The following exception was thrown during execution in test generation
        try {
            org.springframework.boot.loader.archive.Archive archive46 = explodedArchive0.getNestedArchive((org.springframework.boot.loader.archive.Archive.Entry) fileEntry7);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: File must exist");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str1 + "' != '" + "exploded archive" + "'", str1.equals("exploded archive"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file5.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file5.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "exploded archive" + "'", str6.equals("exploded archive"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str13 + "' != '" + "exploded archive" + "'", str13.equals("exploded archive"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file29.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file29.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file38.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file38.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file40.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file40.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file41.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file41.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file44.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file44.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str45);
    }

    @Test
    public void test0444() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0444");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file1 = explodedArchive0.root;
        java.io.File file2 = null;
        explodedArchive0.manifestFile = file2;
        java.io.File file4 = explodedArchive0.root;
        java.lang.String str5 = explodedArchive0.toString();
        java.util.jar.Manifest manifest6 = null;
        explodedArchive0.manifest = manifest6;
        java.io.File file8 = explodedArchive0.root;
        boolean boolean9 = explodedArchive0.recursive;
        org.springframework.boot.loader.archive.Archive.EntryFilter entryFilter10 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<org.springframework.boot.loader.archive.Archive> archiveList11 = explodedArchive0.getNestedArchives(entryFilter10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "exploded archive" + "'", str5.equals("exploded archive"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test0445() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0445");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file1 = null;
        fileEntryIterator0.current = file1;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive3 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest4 = explodedArchive3.manifest;
        explodedArchive3.recursive = false;
        java.util.jar.Manifest manifest7 = explodedArchive3.manifest;
        java.io.File file8 = explodedArchive3.manifestFile;
        java.io.File file9 = null;
        java.io.File file10 = explodedArchive3.getManifestFile(file9);
        java.util.Iterator<java.io.File> fileItor11 = fileEntryIterator0.listFiles(file10);
        boolean boolean12 = fileEntryIterator0.hasNext();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator13 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator14 = entryComparator13.reversed();
        java.util.Comparator<java.io.File> fileComparator15 = entryComparator13.reversed();
        fileEntryIterator0.entryComparator = fileComparator15;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator17 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file18 = null;
        fileEntryIterator17.current = file18;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive20 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest21 = explodedArchive20.manifest;
        explodedArchive20.recursive = false;
        java.util.jar.Manifest manifest24 = explodedArchive20.manifest;
        java.io.File file25 = explodedArchive20.manifestFile;
        java.io.File file26 = null;
        java.io.File file27 = explodedArchive20.getManifestFile(file26);
        java.util.Iterator<java.io.File> fileItor28 = fileEntryIterator17.listFiles(file27);
        java.util.Comparator<java.io.File> fileComparator29 = fileEntryIterator17.entryComparator;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator30 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file31 = null;
        fileEntryIterator30.current = file31;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive33 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest34 = explodedArchive33.manifest;
        explodedArchive33.recursive = false;
        java.util.jar.Manifest manifest37 = explodedArchive33.manifest;
        java.io.File file38 = explodedArchive33.manifestFile;
        java.io.File file39 = null;
        java.io.File file40 = explodedArchive33.getManifestFile(file39);
        java.util.Iterator<java.io.File> fileItor41 = fileEntryIterator30.listFiles(file40);
        java.io.File file42 = fileEntryIterator30.current;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator43 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file44 = null;
        fileEntryIterator43.current = file44;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive46 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest47 = explodedArchive46.manifest;
        explodedArchive46.recursive = false;
        java.util.jar.Manifest manifest50 = explodedArchive46.manifest;
        java.io.File file51 = explodedArchive46.manifestFile;
        java.io.File file52 = null;
        java.io.File file53 = explodedArchive46.getManifestFile(file52);
        java.util.Iterator<java.io.File> fileItor54 = fileEntryIterator43.listFiles(file53);
        java.io.File file55 = fileEntryIterator43.current;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator56 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file57 = null;
        fileEntryIterator56.current = file57;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive59 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest60 = explodedArchive59.manifest;
        explodedArchive59.recursive = false;
        java.util.jar.Manifest manifest63 = explodedArchive59.manifest;
        java.io.File file64 = explodedArchive59.manifestFile;
        java.io.File file65 = null;
        java.io.File file66 = explodedArchive59.getManifestFile(file65);
        java.util.Iterator<java.io.File> fileItor67 = fileEntryIterator56.listFiles(file66);
        java.util.ArrayDeque<java.util.Iterator<java.io.File>> fileItorQueue68 = new java.util.ArrayDeque<java.util.Iterator<java.io.File>>();
        boolean boolean69 = fileItorQueue68.add(fileItor67);
        fileEntryIterator43.stack = fileItorQueue68;
        fileEntryIterator30.stack = fileItorQueue68;
        fileEntryIterator17.stack = fileItorQueue68;
        fileEntryIterator0.stack = fileItorQueue68;
        java.util.Comparator<java.io.File> fileComparator74 = fileEntryIterator0.entryComparator;
        java.io.File file75 = fileEntryIterator0.current;
        // The following exception was thrown during execution in test generation
        try {
            fileEntryIterator0.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: remove");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file27.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file27.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file40.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file40.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file53.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file53.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file66.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file66.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file75);
    }

    @Test
    public void test0446() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0446");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file1 = null;
        fileEntryIterator0.current = file1;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive3 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest4 = explodedArchive3.manifest;
        explodedArchive3.recursive = false;
        java.util.jar.Manifest manifest7 = explodedArchive3.manifest;
        java.io.File file8 = explodedArchive3.manifestFile;
        java.io.File file9 = null;
        java.io.File file10 = explodedArchive3.getManifestFile(file9);
        java.util.Iterator<java.io.File> fileItor11 = fileEntryIterator0.listFiles(file10);
        java.io.File file12 = fileEntryIterator0.root;
        java.io.File file13 = fileEntryIterator0.root;
        java.util.Deque<java.util.Iterator<java.io.File>> fileItorQueue14 = fileEntryIterator0.stack;
        java.io.File file15 = fileEntryIterator0.root;
        // The following exception was thrown during execution in test generation
        try {
            fileEntryIterator0.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: remove");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItorQueue14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file15);
    }

    @Test
    public void test0447() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0447");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file1 = null;
        fileEntryIterator0.current = file1;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive3 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest4 = explodedArchive3.manifest;
        explodedArchive3.recursive = false;
        java.util.jar.Manifest manifest7 = explodedArchive3.manifest;
        java.io.File file8 = explodedArchive3.manifestFile;
        java.io.File file9 = null;
        java.io.File file10 = explodedArchive3.getManifestFile(file9);
        java.util.Iterator<java.io.File> fileItor11 = fileEntryIterator0.listFiles(file10);
        java.io.File file12 = fileEntryIterator0.current;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator13 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file14 = null;
        fileEntryIterator13.current = file14;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive16 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest17 = explodedArchive16.manifest;
        explodedArchive16.recursive = false;
        java.util.jar.Manifest manifest20 = explodedArchive16.manifest;
        java.io.File file21 = explodedArchive16.manifestFile;
        java.io.File file22 = null;
        java.io.File file23 = explodedArchive16.getManifestFile(file22);
        java.util.Iterator<java.io.File> fileItor24 = fileEntryIterator13.listFiles(file23);
        java.util.ArrayDeque<java.util.Iterator<java.io.File>> fileItorQueue25 = new java.util.ArrayDeque<java.util.Iterator<java.io.File>>();
        boolean boolean26 = fileItorQueue25.add(fileItor24);
        fileEntryIterator0.stack = fileItorQueue25;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive28 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest29 = explodedArchive28.manifest;
        explodedArchive28.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive32 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest33 = explodedArchive32.manifest;
        explodedArchive32.recursive = false;
        java.util.jar.Manifest manifest36 = explodedArchive32.manifest;
        java.io.File file37 = explodedArchive32.manifestFile;
        java.io.File file38 = null;
        java.io.File file39 = explodedArchive32.getManifestFile(file38);
        explodedArchive28.manifestFile = file38;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive41 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest42 = explodedArchive41.manifest;
        explodedArchive41.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive45 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest46 = explodedArchive45.manifest;
        explodedArchive45.recursive = false;
        java.util.jar.Manifest manifest49 = explodedArchive45.manifest;
        java.io.File file50 = explodedArchive45.manifestFile;
        java.io.File file51 = null;
        java.io.File file52 = explodedArchive45.getManifestFile(file51);
        explodedArchive41.manifestFile = file51;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive54 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest55 = explodedArchive54.manifest;
        explodedArchive54.recursive = false;
        java.util.jar.Manifest manifest58 = explodedArchive54.manifest;
        java.io.File file59 = explodedArchive54.manifestFile;
        java.io.File file60 = null;
        java.io.File file61 = explodedArchive54.getManifestFile(file60);
        explodedArchive41.manifestFile = file61;
        explodedArchive28.root = file61;
        java.util.Iterator<java.io.File> fileItor64 = fileEntryIterator0.listFiles(file61);
        java.io.File file65 = fileEntryIterator0.current;
        boolean boolean66 = fileEntryIterator0.recursive;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file23.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file23.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file39.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file39.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file52.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file52.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file61.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file61.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
    }

    @Test
    public void test0448() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0448");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file1 = null;
        fileEntryIterator0.current = file1;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive3 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest4 = explodedArchive3.manifest;
        explodedArchive3.recursive = false;
        java.util.jar.Manifest manifest7 = explodedArchive3.manifest;
        java.io.File file8 = explodedArchive3.manifestFile;
        java.io.File file9 = null;
        java.io.File file10 = explodedArchive3.getManifestFile(file9);
        java.util.Iterator<java.io.File> fileItor11 = fileEntryIterator0.listFiles(file10);
        java.util.Comparator<java.io.File> fileComparator12 = fileEntryIterator0.entryComparator;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator13 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file14 = null;
        fileEntryIterator13.current = file14;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive16 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest17 = explodedArchive16.manifest;
        explodedArchive16.recursive = false;
        java.util.jar.Manifest manifest20 = explodedArchive16.manifest;
        java.io.File file21 = explodedArchive16.manifestFile;
        java.io.File file22 = null;
        java.io.File file23 = explodedArchive16.getManifestFile(file22);
        java.util.Iterator<java.io.File> fileItor24 = fileEntryIterator13.listFiles(file23);
        java.io.File file25 = fileEntryIterator13.current;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator26 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file27 = null;
        fileEntryIterator26.current = file27;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive29 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest30 = explodedArchive29.manifest;
        explodedArchive29.recursive = false;
        java.util.jar.Manifest manifest33 = explodedArchive29.manifest;
        java.io.File file34 = explodedArchive29.manifestFile;
        java.io.File file35 = null;
        java.io.File file36 = explodedArchive29.getManifestFile(file35);
        java.util.Iterator<java.io.File> fileItor37 = fileEntryIterator26.listFiles(file36);
        java.io.File file38 = fileEntryIterator26.current;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator39 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file40 = null;
        fileEntryIterator39.current = file40;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive42 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest43 = explodedArchive42.manifest;
        explodedArchive42.recursive = false;
        java.util.jar.Manifest manifest46 = explodedArchive42.manifest;
        java.io.File file47 = explodedArchive42.manifestFile;
        java.io.File file48 = null;
        java.io.File file49 = explodedArchive42.getManifestFile(file48);
        java.util.Iterator<java.io.File> fileItor50 = fileEntryIterator39.listFiles(file49);
        java.util.ArrayDeque<java.util.Iterator<java.io.File>> fileItorQueue51 = new java.util.ArrayDeque<java.util.Iterator<java.io.File>>();
        boolean boolean52 = fileItorQueue51.add(fileItor50);
        fileEntryIterator26.stack = fileItorQueue51;
        fileEntryIterator13.stack = fileItorQueue51;
        fileEntryIterator0.stack = fileItorQueue51;
        boolean boolean56 = fileEntryIterator0.hasNext();
        java.io.File file57 = fileEntryIterator0.root;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file23.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file23.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file36.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file36.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file49.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file49.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file57);
    }

    @Test
    public void test0449() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0449");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntry fileEntry0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntry();
        java.lang.String str1 = fileEntry0.getName();
        java.lang.String str2 = fileEntry0.getName();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator3 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator4 = entryComparator3.reversed();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive5 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file6 = explodedArchive5.root;
        java.io.File file7 = null;
        explodedArchive5.manifestFile = file7;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive9 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest10 = explodedArchive9.manifest;
        explodedArchive9.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive13 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest14 = explodedArchive13.manifest;
        explodedArchive13.recursive = false;
        java.util.jar.Manifest manifest17 = explodedArchive13.manifest;
        java.io.File file18 = explodedArchive13.manifestFile;
        java.io.File file19 = null;
        java.io.File file20 = explodedArchive13.getManifestFile(file19);
        explodedArchive9.manifestFile = file19;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive22 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest23 = explodedArchive22.manifest;
        explodedArchive22.recursive = false;
        java.util.jar.Manifest manifest26 = explodedArchive22.manifest;
        java.io.File file27 = explodedArchive22.manifestFile;
        java.io.File file28 = null;
        java.io.File file29 = explodedArchive22.getManifestFile(file28);
        explodedArchive9.manifestFile = file29;
        java.io.File file31 = explodedArchive5.getManifestFile(file29);
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive32 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest33 = explodedArchive32.manifest;
        explodedArchive32.recursive = false;
        java.io.File file36 = null;
        explodedArchive32.root = file36;
        java.io.File file38 = explodedArchive32.root;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive39 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest40 = explodedArchive39.manifest;
        explodedArchive39.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive43 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest44 = explodedArchive43.manifest;
        explodedArchive43.recursive = false;
        java.util.jar.Manifest manifest47 = explodedArchive43.manifest;
        java.io.File file48 = explodedArchive43.manifestFile;
        java.io.File file49 = null;
        java.io.File file50 = explodedArchive43.getManifestFile(file49);
        explodedArchive39.manifestFile = file49;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive52 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest53 = explodedArchive52.manifest;
        explodedArchive52.recursive = false;
        java.util.jar.Manifest manifest56 = explodedArchive52.manifest;
        java.io.File file57 = explodedArchive52.manifestFile;
        java.io.File file58 = null;
        java.io.File file59 = explodedArchive52.getManifestFile(file58);
        explodedArchive39.manifestFile = file59;
        java.io.File file61 = explodedArchive32.getManifestFile(file59);
        int int62 = entryComparator3.compare(file31, file59);
        fileEntry0.file = file59;
        java.io.File file64 = fileEntry0.getFile();
        java.io.File file65 = fileEntry0.getFile();
        fileEntry0.name = "file:/server/study-execution/new-nimrod/nimrod-hunoroutput-test-dest/spring-boot/af20dc6cc45c032573413c401f9f73aa75371744/randoop_6/META-INF/MANIFEST.MF";
        java.lang.String str68 = fileEntry0.getName();
        boolean boolean69 = fileEntry0.isDirectory();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file20.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file20.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file29.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file29.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file31.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file31.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file50.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file50.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file59.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file59.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file61.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file61.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 21 + "'", int62 == 21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file64.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file64.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file65.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file65.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str68 + "' != '" + "file:/server/study-execution/new-nimrod/nimrod-hunoroutput-test-dest/spring-boot/af20dc6cc45c032573413c401f9f73aa75371744/randoop_6/META-INF/MANIFEST.MF" + "'", str68.equals("file:/server/study-execution/new-nimrod/nimrod-hunoroutput-test-dest/spring-boot/af20dc6cc45c032573413c401f9f73aa75371744/randoop_6/META-INF/MANIFEST.MF"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
    }

    @Test
    public void test0450() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0450");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntry fileEntry0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntry();
        java.io.File file1 = fileEntry0.file;
        java.lang.String str2 = fileEntry0.name;
        java.io.File file3 = fileEntry0.file;
        java.lang.String str4 = fileEntry0.getName();
        fileEntry0.name = "";
        java.lang.String str7 = fileEntry0.getName();
        java.io.File file8 = fileEntry0.file;
        java.lang.String str9 = fileEntry0.getName();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str7 + "' != '" + "" + "'", str7.equals(""));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str9 + "' != '" + "" + "'", str9.equals(""));
    }

    @Test
    public void test0451() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0451");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file1 = null;
        fileEntryIterator0.current = file1;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive3 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest4 = explodedArchive3.manifest;
        explodedArchive3.recursive = false;
        java.util.jar.Manifest manifest7 = explodedArchive3.manifest;
        java.io.File file8 = explodedArchive3.manifestFile;
        java.io.File file9 = null;
        java.io.File file10 = explodedArchive3.getManifestFile(file9);
        java.util.Iterator<java.io.File> fileItor11 = fileEntryIterator0.listFiles(file10);
        java.io.File file12 = fileEntryIterator0.root;
        java.io.File file13 = fileEntryIterator0.poll();
        fileEntryIterator0.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive16 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest17 = explodedArchive16.manifest;
        java.util.jar.Manifest manifest18 = null;
        explodedArchive16.manifest = manifest18;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntry fileEntry20 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntry();
        java.lang.String str21 = fileEntry20.name;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator22 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file23 = null;
        fileEntryIterator22.current = file23;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive25 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest26 = explodedArchive25.manifest;
        explodedArchive25.recursive = false;
        java.util.jar.Manifest manifest29 = explodedArchive25.manifest;
        java.io.File file30 = explodedArchive25.manifestFile;
        java.io.File file31 = null;
        java.io.File file32 = explodedArchive25.getManifestFile(file31);
        java.util.Iterator<java.io.File> fileItor33 = fileEntryIterator22.listFiles(file32);
        java.io.File file34 = fileEntryIterator22.current;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator35 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file36 = null;
        fileEntryIterator35.current = file36;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive38 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest39 = explodedArchive38.manifest;
        explodedArchive38.recursive = false;
        java.util.jar.Manifest manifest42 = explodedArchive38.manifest;
        java.io.File file43 = explodedArchive38.manifestFile;
        java.io.File file44 = null;
        java.io.File file45 = explodedArchive38.getManifestFile(file44);
        java.util.Iterator<java.io.File> fileItor46 = fileEntryIterator35.listFiles(file45);
        java.util.ArrayDeque<java.util.Iterator<java.io.File>> fileItorQueue47 = new java.util.ArrayDeque<java.util.Iterator<java.io.File>>();
        boolean boolean48 = fileItorQueue47.add(fileItor46);
        fileEntryIterator22.stack = fileItorQueue47;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive50 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest51 = explodedArchive50.manifest;
        explodedArchive50.recursive = false;
        java.io.File file54 = null;
        explodedArchive50.root = file54;
        java.io.File file56 = explodedArchive50.root;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive57 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest58 = explodedArchive57.manifest;
        explodedArchive57.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive61 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest62 = explodedArchive61.manifest;
        explodedArchive61.recursive = false;
        java.util.jar.Manifest manifest65 = explodedArchive61.manifest;
        java.io.File file66 = explodedArchive61.manifestFile;
        java.io.File file67 = null;
        java.io.File file68 = explodedArchive61.getManifestFile(file67);
        explodedArchive57.manifestFile = file67;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive70 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest71 = explodedArchive70.manifest;
        explodedArchive70.recursive = false;
        java.util.jar.Manifest manifest74 = explodedArchive70.manifest;
        java.io.File file75 = explodedArchive70.manifestFile;
        java.io.File file76 = null;
        java.io.File file77 = explodedArchive70.getManifestFile(file76);
        explodedArchive57.manifestFile = file77;
        java.io.File file79 = explodedArchive50.getManifestFile(file77);
        fileEntryIterator22.root = file77;
        fileEntry20.file = file77;
        java.io.File file82 = explodedArchive16.getManifestFile(file77);
        java.util.jar.Manifest manifest83 = null;
        explodedArchive16.manifest = manifest83;
        java.io.File file85 = null;
        java.io.File file86 = explodedArchive16.getManifestFile(file85);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator<java.io.File> fileItor87 = fileEntryIterator0.listFiles(file85);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file32.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file32.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file45.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file45.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file68.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file68.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file75);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file77);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file77.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file77.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file79);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file79.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file79.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file82);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file82.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file82.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file86);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file86.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file86.toString(), "META-INF/MANIFEST.MF");
    }

    @Test
    public void test0452() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0452");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file1 = null;
        fileEntryIterator0.current = file1;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive3 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest4 = explodedArchive3.manifest;
        explodedArchive3.recursive = false;
        java.util.jar.Manifest manifest7 = explodedArchive3.manifest;
        java.io.File file8 = explodedArchive3.manifestFile;
        java.io.File file9 = null;
        java.io.File file10 = explodedArchive3.getManifestFile(file9);
        java.util.Iterator<java.io.File> fileItor11 = fileEntryIterator0.listFiles(file10);
        java.io.File file12 = fileEntryIterator0.current;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator13 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file14 = null;
        fileEntryIterator13.current = file14;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive16 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest17 = explodedArchive16.manifest;
        explodedArchive16.recursive = false;
        java.util.jar.Manifest manifest20 = explodedArchive16.manifest;
        java.io.File file21 = explodedArchive16.manifestFile;
        java.io.File file22 = null;
        java.io.File file23 = explodedArchive16.getManifestFile(file22);
        java.util.Iterator<java.io.File> fileItor24 = fileEntryIterator13.listFiles(file23);
        java.util.ArrayDeque<java.util.Iterator<java.io.File>> fileItorQueue25 = new java.util.ArrayDeque<java.util.Iterator<java.io.File>>();
        boolean boolean26 = fileItorQueue25.add(fileItor24);
        fileEntryIterator0.stack = fileItorQueue25;
        java.util.Deque<java.util.Iterator<java.io.File>> fileItorQueue28 = fileEntryIterator0.stack;
        boolean boolean29 = fileEntryIterator0.recursive;
        java.util.Comparator<java.io.File> fileComparator30 = fileEntryIterator0.entryComparator;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntry fileEntry31 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntry();
        java.io.File file32 = fileEntry31.file;
        java.lang.String str33 = fileEntry31.name;
        java.io.File file34 = fileEntry31.file;
        java.io.File file35 = fileEntry31.file;
        java.lang.String str36 = fileEntry31.name;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive37 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.lang.String str38 = explodedArchive37.toString();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive39 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file40 = explodedArchive39.root;
        java.io.File file41 = null;
        explodedArchive39.manifestFile = file41;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive43 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest44 = explodedArchive43.manifest;
        explodedArchive43.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive47 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest48 = explodedArchive47.manifest;
        explodedArchive47.recursive = false;
        java.util.jar.Manifest manifest51 = explodedArchive47.manifest;
        java.io.File file52 = explodedArchive47.manifestFile;
        java.io.File file53 = null;
        java.io.File file54 = explodedArchive47.getManifestFile(file53);
        explodedArchive43.manifestFile = file53;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive56 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest57 = explodedArchive56.manifest;
        explodedArchive56.recursive = false;
        java.util.jar.Manifest manifest60 = explodedArchive56.manifest;
        java.io.File file61 = explodedArchive56.manifestFile;
        java.io.File file62 = null;
        java.io.File file63 = explodedArchive56.getManifestFile(file62);
        explodedArchive43.manifestFile = file63;
        java.io.File file65 = explodedArchive39.getManifestFile(file63);
        java.io.File file66 = explodedArchive37.getManifestFile(file63);
        fileEntry31.file = file63;
        fileEntryIterator0.current = file63;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator69 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file70 = null;
        fileEntryIterator69.current = file70;
        fileEntryIterator69.recursive = true;
        fileEntryIterator69.recursive = true;
        boolean boolean76 = fileEntryIterator69.hasNext();
        java.util.Deque<java.util.Iterator<java.io.File>> fileItorQueue77 = fileEntryIterator69.stack;
        fileEntryIterator0.stack = fileItorQueue77;
        java.util.Comparator<java.io.File> fileComparator79 = fileEntryIterator0.entryComparator;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file23.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file23.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItorQueue28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str38 + "' != '" + "exploded archive" + "'", str38.equals("exploded archive"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file54.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file54.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file63.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file63.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file65.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file65.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file66.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file66.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItorQueue77);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator79);
    }

    @Test
    public void test0453() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0453");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntry fileEntry0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntry();
        java.io.File file1 = fileEntry0.getFile();
        java.io.File file2 = fileEntry0.getFile();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive3 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file4 = explodedArchive3.root;
        java.io.File file5 = null;
        explodedArchive3.manifestFile = file5;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive7 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest8 = explodedArchive7.manifest;
        explodedArchive7.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive11 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest12 = explodedArchive11.manifest;
        explodedArchive11.recursive = false;
        java.util.jar.Manifest manifest15 = explodedArchive11.manifest;
        java.io.File file16 = explodedArchive11.manifestFile;
        java.io.File file17 = null;
        java.io.File file18 = explodedArchive11.getManifestFile(file17);
        explodedArchive7.manifestFile = file17;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive20 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest21 = explodedArchive20.manifest;
        explodedArchive20.recursive = false;
        java.util.jar.Manifest manifest24 = explodedArchive20.manifest;
        java.io.File file25 = explodedArchive20.manifestFile;
        java.io.File file26 = null;
        java.io.File file27 = explodedArchive20.getManifestFile(file26);
        explodedArchive7.manifestFile = file27;
        java.io.File file29 = explodedArchive3.getManifestFile(file27);
        fileEntry0.file = file29;
        java.io.File file31 = fileEntry0.file;
        fileEntry0.name = "exploded archive";
        java.io.File file34 = fileEntry0.file;
        java.lang.String str35 = fileEntry0.name;
        java.lang.String str36 = fileEntry0.getName();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file18.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file18.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file27.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file27.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file29.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file29.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file31.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file31.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file34.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file34.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str35 + "' != '" + "exploded archive" + "'", str35.equals("exploded archive"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str36 + "' != '" + "exploded archive" + "'", str36.equals("exploded archive"));
    }

    @Test
    public void test0454() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0454");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file1 = explodedArchive0.root;
        java.io.File file2 = explodedArchive0.manifestFile;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive3 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest4 = explodedArchive3.manifest;
        explodedArchive3.recursive = false;
        java.io.File file7 = null;
        explodedArchive3.root = file7;
        java.io.File file9 = explodedArchive3.root;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive10 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest11 = explodedArchive10.manifest;
        explodedArchive10.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive14 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest15 = explodedArchive14.manifest;
        explodedArchive14.recursive = false;
        java.util.jar.Manifest manifest18 = explodedArchive14.manifest;
        java.io.File file19 = explodedArchive14.manifestFile;
        java.io.File file20 = null;
        java.io.File file21 = explodedArchive14.getManifestFile(file20);
        explodedArchive10.manifestFile = file20;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive23 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest24 = explodedArchive23.manifest;
        explodedArchive23.recursive = false;
        java.util.jar.Manifest manifest27 = explodedArchive23.manifest;
        java.io.File file28 = explodedArchive23.manifestFile;
        java.io.File file29 = null;
        java.io.File file30 = explodedArchive23.getManifestFile(file29);
        explodedArchive10.manifestFile = file30;
        java.io.File file32 = explodedArchive3.getManifestFile(file30);
        boolean boolean33 = explodedArchive3.recursive;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntry fileEntry34 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntry();
        java.lang.String str35 = fileEntry34.name;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator36 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file37 = null;
        fileEntryIterator36.current = file37;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive39 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.lang.String str40 = explodedArchive39.toString();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive41 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file42 = explodedArchive41.root;
        java.io.File file43 = null;
        explodedArchive41.manifestFile = file43;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive45 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest46 = explodedArchive45.manifest;
        explodedArchive45.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive49 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest50 = explodedArchive49.manifest;
        explodedArchive49.recursive = false;
        java.util.jar.Manifest manifest53 = explodedArchive49.manifest;
        java.io.File file54 = explodedArchive49.manifestFile;
        java.io.File file55 = null;
        java.io.File file56 = explodedArchive49.getManifestFile(file55);
        explodedArchive45.manifestFile = file55;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive58 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest59 = explodedArchive58.manifest;
        explodedArchive58.recursive = false;
        java.util.jar.Manifest manifest62 = explodedArchive58.manifest;
        java.io.File file63 = explodedArchive58.manifestFile;
        java.io.File file64 = null;
        java.io.File file65 = explodedArchive58.getManifestFile(file64);
        explodedArchive45.manifestFile = file65;
        java.io.File file67 = explodedArchive41.getManifestFile(file65);
        java.io.File file68 = explodedArchive39.getManifestFile(file65);
        fileEntryIterator36.root = file65;
        fileEntry34.file = file65;
        java.io.File file71 = explodedArchive3.getManifestFile(file65);
        java.io.File file72 = explodedArchive0.getManifestFile(file71);
        // The following exception was thrown during execution in test generation
        try {
            org.springframework.boot.loader.archive.ExplodedArchive explodedArchive73 = new org.springframework.boot.loader.archive.ExplodedArchive(file72);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid source folder META-INF/MANIFEST.MF/META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file21.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file21.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file30.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file30.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file32.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file32.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str40 + "' != '" + "exploded archive" + "'", str40.equals("exploded archive"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file56.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file56.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file65.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file65.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file67.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file67.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file68.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file68.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file71.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file71.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file72.getParent(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file72.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
    }

    @Test
    public void test0455() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0455");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntry fileEntry0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntry();
        java.io.File file1 = fileEntry0.getFile();
        java.io.File file2 = fileEntry0.getFile();
        java.lang.String str3 = fileEntry0.name;
        fileEntry0.name = "";
        java.io.File file6 = fileEntry0.file;
        java.io.File file7 = fileEntry0.getFile();
        java.io.File file8 = fileEntry0.file;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator9 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file10 = null;
        fileEntryIterator9.current = file10;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive12 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest13 = explodedArchive12.manifest;
        explodedArchive12.recursive = false;
        java.util.jar.Manifest manifest16 = explodedArchive12.manifest;
        java.io.File file17 = explodedArchive12.manifestFile;
        java.io.File file18 = null;
        java.io.File file19 = explodedArchive12.getManifestFile(file18);
        java.util.Iterator<java.io.File> fileItor20 = fileEntryIterator9.listFiles(file19);
        java.io.File file21 = fileEntryIterator9.root;
        java.io.File file22 = fileEntryIterator9.root;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator23 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file24 = null;
        fileEntryIterator23.current = file24;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive26 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest27 = explodedArchive26.manifest;
        explodedArchive26.recursive = false;
        java.util.jar.Manifest manifest30 = explodedArchive26.manifest;
        java.io.File file31 = explodedArchive26.manifestFile;
        java.io.File file32 = null;
        java.io.File file33 = explodedArchive26.getManifestFile(file32);
        java.util.Iterator<java.io.File> fileItor34 = fileEntryIterator23.listFiles(file33);
        java.util.ArrayDeque<java.util.Iterator<java.io.File>> fileItorQueue35 = new java.util.ArrayDeque<java.util.Iterator<java.io.File>>();
        boolean boolean36 = fileItorQueue35.add(fileItor34);
        fileEntryIterator9.stack = fileItorQueue35;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive38 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest39 = explodedArchive38.manifest;
        explodedArchive38.recursive = false;
        java.io.File file42 = null;
        explodedArchive38.root = file42;
        java.io.File file44 = explodedArchive38.root;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive45 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest46 = explodedArchive45.manifest;
        explodedArchive45.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive49 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest50 = explodedArchive49.manifest;
        explodedArchive49.recursive = false;
        java.util.jar.Manifest manifest53 = explodedArchive49.manifest;
        java.io.File file54 = explodedArchive49.manifestFile;
        java.io.File file55 = null;
        java.io.File file56 = explodedArchive49.getManifestFile(file55);
        explodedArchive45.manifestFile = file55;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive58 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest59 = explodedArchive58.manifest;
        explodedArchive58.recursive = false;
        java.util.jar.Manifest manifest62 = explodedArchive58.manifest;
        java.io.File file63 = explodedArchive58.manifestFile;
        java.io.File file64 = null;
        java.io.File file65 = explodedArchive58.getManifestFile(file64);
        explodedArchive45.manifestFile = file65;
        java.io.File file67 = explodedArchive38.getManifestFile(file65);
        fileEntryIterator9.current = file65;
        fileEntry0.file = file65;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file19.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file19.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file33.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file33.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file56.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file56.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file65.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file65.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file67.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file67.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
    }

    @Test
    public void test0456() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0456");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file1 = null;
        fileEntryIterator0.current = file1;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive3 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.lang.String str4 = explodedArchive3.toString();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive5 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file6 = explodedArchive5.root;
        java.io.File file7 = null;
        explodedArchive5.manifestFile = file7;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive9 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest10 = explodedArchive9.manifest;
        explodedArchive9.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive13 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest14 = explodedArchive13.manifest;
        explodedArchive13.recursive = false;
        java.util.jar.Manifest manifest17 = explodedArchive13.manifest;
        java.io.File file18 = explodedArchive13.manifestFile;
        java.io.File file19 = null;
        java.io.File file20 = explodedArchive13.getManifestFile(file19);
        explodedArchive9.manifestFile = file19;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive22 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest23 = explodedArchive22.manifest;
        explodedArchive22.recursive = false;
        java.util.jar.Manifest manifest26 = explodedArchive22.manifest;
        java.io.File file27 = explodedArchive22.manifestFile;
        java.io.File file28 = null;
        java.io.File file29 = explodedArchive22.getManifestFile(file28);
        explodedArchive9.manifestFile = file29;
        java.io.File file31 = explodedArchive5.getManifestFile(file29);
        java.io.File file32 = explodedArchive3.getManifestFile(file29);
        fileEntryIterator0.root = file29;
        java.io.File file34 = fileEntryIterator0.poll();
        java.util.Comparator<java.io.File> fileComparator35 = fileEntryIterator0.entryComparator;
        java.util.Comparator<java.io.File> fileComparator36 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Comparator<java.io.File> fileComparator37 = fileComparator35.thenComparing(fileComparator36);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str4 + "' != '" + "exploded archive" + "'", str4.equals("exploded archive"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file20.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file20.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file29.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file29.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file31.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file31.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file32.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file32.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator35);
    }

    @Test
    public void test0457() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0457");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntry fileEntry0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntry();
        java.io.File file1 = fileEntry0.file;
        java.lang.String str2 = fileEntry0.name;
        java.io.File file3 = fileEntry0.file;
        java.io.File file4 = fileEntry0.file;
        java.lang.String str5 = fileEntry0.name;
        java.lang.String str6 = fileEntry0.getName();
        java.io.File file7 = fileEntry0.getFile();
        fileEntry0.name = "hi!";
        java.io.File file10 = fileEntry0.getFile();
        fileEntry0.name = "";
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file10);
    }

    @Test
    public void test0458() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0458");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest1 = explodedArchive0.manifest;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntry fileEntry2 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntry();
        java.io.File file3 = fileEntry2.getFile();
        java.io.File file4 = fileEntry2.getFile();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive5 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file6 = explodedArchive5.root;
        java.io.File file7 = null;
        explodedArchive5.manifestFile = file7;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive9 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest10 = explodedArchive9.manifest;
        explodedArchive9.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive13 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest14 = explodedArchive13.manifest;
        explodedArchive13.recursive = false;
        java.util.jar.Manifest manifest17 = explodedArchive13.manifest;
        java.io.File file18 = explodedArchive13.manifestFile;
        java.io.File file19 = null;
        java.io.File file20 = explodedArchive13.getManifestFile(file19);
        explodedArchive9.manifestFile = file19;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive22 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest23 = explodedArchive22.manifest;
        explodedArchive22.recursive = false;
        java.util.jar.Manifest manifest26 = explodedArchive22.manifest;
        java.io.File file27 = explodedArchive22.manifestFile;
        java.io.File file28 = null;
        java.io.File file29 = explodedArchive22.getManifestFile(file28);
        explodedArchive9.manifestFile = file29;
        java.io.File file31 = explodedArchive5.getManifestFile(file29);
        fileEntry2.file = file31;
        java.io.File file33 = fileEntry2.file;
        fileEntry2.name = "exploded archive";
        java.io.File file36 = fileEntry2.file;
        explodedArchive0.root = file36;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator38 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        boolean boolean39 = fileEntryIterator38.recursive;
        java.io.File file40 = fileEntryIterator38.current;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive41 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest42 = explodedArchive41.manifest;
        explodedArchive41.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive45 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest46 = explodedArchive45.manifest;
        explodedArchive45.recursive = false;
        java.util.jar.Manifest manifest49 = explodedArchive45.manifest;
        java.io.File file50 = explodedArchive45.manifestFile;
        java.io.File file51 = null;
        java.io.File file52 = explodedArchive45.getManifestFile(file51);
        explodedArchive41.manifestFile = file51;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive54 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest55 = explodedArchive54.manifest;
        explodedArchive54.recursive = false;
        java.util.jar.Manifest manifest58 = explodedArchive54.manifest;
        java.io.File file59 = explodedArchive54.manifestFile;
        java.io.File file60 = null;
        java.io.File file61 = explodedArchive54.getManifestFile(file60);
        explodedArchive41.manifestFile = file61;
        fileEntryIterator38.current = file61;
        explodedArchive0.root = file61;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file20.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file20.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file29.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file29.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file31.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file31.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file33.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file33.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file36.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file36.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file52.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file52.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file61.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file61.toString(), "META-INF/MANIFEST.MF");
    }

    @Test
    public void test0459() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0459");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest1 = explodedArchive0.manifest;
        java.util.jar.Manifest manifest2 = null;
        explodedArchive0.manifest = manifest2;
        java.io.File file4 = explodedArchive0.root;
        java.util.jar.Manifest manifest5 = null;
        explodedArchive0.manifest = manifest5;
        java.util.jar.Manifest manifest7 = null;
        explodedArchive0.manifest = manifest7;
        // The following exception was thrown during execution in test generation
        try {
            java.util.jar.Manifest manifest9 = explodedArchive0.getManifest();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file4);
    }

    @Test
    public void test0460() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0460");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        boolean boolean1 = explodedArchive0.recursive;
        java.lang.String str2 = explodedArchive0.toString();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator3 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file4 = null;
        fileEntryIterator3.current = file4;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive6 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest7 = explodedArchive6.manifest;
        explodedArchive6.recursive = false;
        java.util.jar.Manifest manifest10 = explodedArchive6.manifest;
        java.io.File file11 = explodedArchive6.manifestFile;
        java.io.File file12 = null;
        java.io.File file13 = explodedArchive6.getManifestFile(file12);
        java.util.Iterator<java.io.File> fileItor14 = fileEntryIterator3.listFiles(file13);
        java.io.File file15 = fileEntryIterator3.current;
        boolean boolean16 = fileEntryIterator3.recursive;
        java.io.File file17 = fileEntryIterator3.poll();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator18 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file19 = null;
        fileEntryIterator18.current = file19;
        fileEntryIterator18.recursive = true;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator23 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator24 = entryComparator23.reversed();
        java.util.Comparator<java.io.File> fileComparator25 = entryComparator23.reversed();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive26 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest27 = explodedArchive26.manifest;
        explodedArchive26.recursive = false;
        java.util.jar.Manifest manifest30 = explodedArchive26.manifest;
        java.io.File file31 = explodedArchive26.manifestFile;
        java.io.File file32 = null;
        java.io.File file33 = explodedArchive26.getManifestFile(file32);
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive34 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest35 = explodedArchive34.manifest;
        explodedArchive34.recursive = false;
        java.io.File file38 = null;
        explodedArchive34.root = file38;
        java.io.File file40 = explodedArchive34.root;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive41 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest42 = explodedArchive41.manifest;
        explodedArchive41.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive45 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest46 = explodedArchive45.manifest;
        explodedArchive45.recursive = false;
        java.util.jar.Manifest manifest49 = explodedArchive45.manifest;
        java.io.File file50 = explodedArchive45.manifestFile;
        java.io.File file51 = null;
        java.io.File file52 = explodedArchive45.getManifestFile(file51);
        explodedArchive41.manifestFile = file51;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive54 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest55 = explodedArchive54.manifest;
        explodedArchive54.recursive = false;
        java.util.jar.Manifest manifest58 = explodedArchive54.manifest;
        java.io.File file59 = explodedArchive54.manifestFile;
        java.io.File file60 = null;
        java.io.File file61 = explodedArchive54.getManifestFile(file60);
        explodedArchive41.manifestFile = file61;
        java.io.File file63 = explodedArchive34.getManifestFile(file61);
        int int64 = entryComparator23.compare(file33, file61);
        java.util.Iterator<java.io.File> fileItor65 = fileEntryIterator18.listFiles(file33);
        fileEntryIterator3.current = file33;
        explodedArchive0.root = file33;
        // The following exception was thrown during execution in test generation
        try {
            org.springframework.boot.loader.archive.ExplodedArchive explodedArchive68 = new org.springframework.boot.loader.archive.ExplodedArchive(file33);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid source folder META-INF/MANIFEST.MF");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str2 + "' != '" + "exploded archive" + "'", str2.equals("exploded archive"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file13.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file13.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file33.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file33.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file52.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file52.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file61.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file61.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file63.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file63.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor65);
    }

    @Test
    public void test0461() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0461");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file1 = null;
        fileEntryIterator0.current = file1;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive3 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest4 = explodedArchive3.manifest;
        explodedArchive3.recursive = false;
        java.util.jar.Manifest manifest7 = explodedArchive3.manifest;
        java.io.File file8 = explodedArchive3.manifestFile;
        java.io.File file9 = null;
        java.io.File file10 = explodedArchive3.getManifestFile(file9);
        java.util.Iterator<java.io.File> fileItor11 = fileEntryIterator0.listFiles(file10);
        java.io.File file12 = fileEntryIterator0.current;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator13 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file14 = null;
        fileEntryIterator13.current = file14;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive16 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest17 = explodedArchive16.manifest;
        explodedArchive16.recursive = false;
        java.util.jar.Manifest manifest20 = explodedArchive16.manifest;
        java.io.File file21 = explodedArchive16.manifestFile;
        java.io.File file22 = null;
        java.io.File file23 = explodedArchive16.getManifestFile(file22);
        java.util.Iterator<java.io.File> fileItor24 = fileEntryIterator13.listFiles(file23);
        java.util.ArrayDeque<java.util.Iterator<java.io.File>> fileItorQueue25 = new java.util.ArrayDeque<java.util.Iterator<java.io.File>>();
        boolean boolean26 = fileItorQueue25.add(fileItor24);
        fileEntryIterator0.stack = fileItorQueue25;
        boolean boolean28 = fileEntryIterator0.recursive;
        fileEntryIterator0.recursive = false;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file23.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file23.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test0462() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0462");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest1 = explodedArchive0.manifest;
        java.util.jar.Manifest manifest2 = null;
        explodedArchive0.manifest = manifest2;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntry fileEntry4 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntry();
        java.lang.String str5 = fileEntry4.name;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator6 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file7 = null;
        fileEntryIterator6.current = file7;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive9 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest10 = explodedArchive9.manifest;
        explodedArchive9.recursive = false;
        java.util.jar.Manifest manifest13 = explodedArchive9.manifest;
        java.io.File file14 = explodedArchive9.manifestFile;
        java.io.File file15 = null;
        java.io.File file16 = explodedArchive9.getManifestFile(file15);
        java.util.Iterator<java.io.File> fileItor17 = fileEntryIterator6.listFiles(file16);
        java.io.File file18 = fileEntryIterator6.current;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator19 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file20 = null;
        fileEntryIterator19.current = file20;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive22 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest23 = explodedArchive22.manifest;
        explodedArchive22.recursive = false;
        java.util.jar.Manifest manifest26 = explodedArchive22.manifest;
        java.io.File file27 = explodedArchive22.manifestFile;
        java.io.File file28 = null;
        java.io.File file29 = explodedArchive22.getManifestFile(file28);
        java.util.Iterator<java.io.File> fileItor30 = fileEntryIterator19.listFiles(file29);
        java.util.ArrayDeque<java.util.Iterator<java.io.File>> fileItorQueue31 = new java.util.ArrayDeque<java.util.Iterator<java.io.File>>();
        boolean boolean32 = fileItorQueue31.add(fileItor30);
        fileEntryIterator6.stack = fileItorQueue31;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive34 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest35 = explodedArchive34.manifest;
        explodedArchive34.recursive = false;
        java.io.File file38 = null;
        explodedArchive34.root = file38;
        java.io.File file40 = explodedArchive34.root;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive41 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest42 = explodedArchive41.manifest;
        explodedArchive41.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive45 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest46 = explodedArchive45.manifest;
        explodedArchive45.recursive = false;
        java.util.jar.Manifest manifest49 = explodedArchive45.manifest;
        java.io.File file50 = explodedArchive45.manifestFile;
        java.io.File file51 = null;
        java.io.File file52 = explodedArchive45.getManifestFile(file51);
        explodedArchive41.manifestFile = file51;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive54 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest55 = explodedArchive54.manifest;
        explodedArchive54.recursive = false;
        java.util.jar.Manifest manifest58 = explodedArchive54.manifest;
        java.io.File file59 = explodedArchive54.manifestFile;
        java.io.File file60 = null;
        java.io.File file61 = explodedArchive54.getManifestFile(file60);
        explodedArchive41.manifestFile = file61;
        java.io.File file63 = explodedArchive34.getManifestFile(file61);
        fileEntryIterator6.root = file61;
        fileEntry4.file = file61;
        java.io.File file66 = explodedArchive0.getManifestFile(file61);
        // The following exception was thrown during execution in test generation
        try {
            org.springframework.boot.loader.archive.ExplodedArchive explodedArchive68 = new org.springframework.boot.loader.archive.ExplodedArchive(file66, false);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid source folder META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file16.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file16.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file29.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file29.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file52.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file52.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file61.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file61.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file63.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file63.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file66.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file66.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
    }

    @Test
    public void test0463() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0463");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file1 = null;
        fileEntryIterator0.current = file1;
        fileEntryIterator0.recursive = true;
        // The following exception was thrown during execution in test generation
        try {
            org.springframework.boot.loader.archive.Archive.Entry entry5 = fileEntryIterator0.next();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0464() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0464");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest1 = explodedArchive0.manifest;
        explodedArchive0.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive4 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest5 = explodedArchive4.manifest;
        explodedArchive4.recursive = false;
        java.util.jar.Manifest manifest8 = explodedArchive4.manifest;
        java.io.File file9 = explodedArchive4.manifestFile;
        java.io.File file10 = null;
        java.io.File file11 = explodedArchive4.getManifestFile(file10);
        explodedArchive0.manifestFile = file10;
        java.util.jar.Manifest manifest13 = null;
        explodedArchive0.manifest = manifest13;
        java.util.jar.Manifest manifest15 = explodedArchive0.manifest;
        explodedArchive0.recursive = false;
        boolean boolean18 = explodedArchive0.recursive;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file11.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file11.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test0465() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0465");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file1 = null;
        fileEntryIterator0.current = file1;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive3 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest4 = explodedArchive3.manifest;
        explodedArchive3.recursive = false;
        java.util.jar.Manifest manifest7 = explodedArchive3.manifest;
        java.io.File file8 = explodedArchive3.manifestFile;
        java.io.File file9 = null;
        java.io.File file10 = explodedArchive3.getManifestFile(file9);
        java.util.Iterator<java.io.File> fileItor11 = fileEntryIterator0.listFiles(file10);
        boolean boolean12 = fileEntryIterator0.hasNext();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator13 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator14 = entryComparator13.reversed();
        java.util.Comparator<java.io.File> fileComparator15 = entryComparator13.reversed();
        fileEntryIterator0.entryComparator = fileComparator15;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator17 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file18 = null;
        fileEntryIterator17.current = file18;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive20 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.lang.String str21 = explodedArchive20.toString();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive22 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file23 = explodedArchive22.root;
        java.io.File file24 = null;
        explodedArchive22.manifestFile = file24;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive26 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest27 = explodedArchive26.manifest;
        explodedArchive26.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive30 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest31 = explodedArchive30.manifest;
        explodedArchive30.recursive = false;
        java.util.jar.Manifest manifest34 = explodedArchive30.manifest;
        java.io.File file35 = explodedArchive30.manifestFile;
        java.io.File file36 = null;
        java.io.File file37 = explodedArchive30.getManifestFile(file36);
        explodedArchive26.manifestFile = file36;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive39 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest40 = explodedArchive39.manifest;
        explodedArchive39.recursive = false;
        java.util.jar.Manifest manifest43 = explodedArchive39.manifest;
        java.io.File file44 = explodedArchive39.manifestFile;
        java.io.File file45 = null;
        java.io.File file46 = explodedArchive39.getManifestFile(file45);
        explodedArchive26.manifestFile = file46;
        java.io.File file48 = explodedArchive22.getManifestFile(file46);
        java.io.File file49 = explodedArchive20.getManifestFile(file46);
        fileEntryIterator17.root = file46;
        fileEntryIterator0.current = file46;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive52 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file53 = explodedArchive52.root;
        java.io.File file54 = null;
        explodedArchive52.manifestFile = file54;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive56 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest57 = explodedArchive56.manifest;
        explodedArchive56.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive60 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest61 = explodedArchive60.manifest;
        explodedArchive60.recursive = false;
        java.util.jar.Manifest manifest64 = explodedArchive60.manifest;
        java.io.File file65 = explodedArchive60.manifestFile;
        java.io.File file66 = null;
        java.io.File file67 = explodedArchive60.getManifestFile(file66);
        explodedArchive56.manifestFile = file66;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive69 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest70 = explodedArchive69.manifest;
        explodedArchive69.recursive = false;
        java.util.jar.Manifest manifest73 = explodedArchive69.manifest;
        java.io.File file74 = explodedArchive69.manifestFile;
        java.io.File file75 = null;
        java.io.File file76 = explodedArchive69.getManifestFile(file75);
        explodedArchive56.manifestFile = file76;
        java.io.File file78 = explodedArchive52.getManifestFile(file76);
        fileEntryIterator0.root = file78;
        java.lang.Class<?> wildcardClass80 = file78.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str21 + "' != '" + "exploded archive" + "'", str21.equals("exploded archive"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file37.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file37.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file46.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file46.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file48.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file48.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file49.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file49.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file67.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file67.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest73);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file76);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file76.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file76.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file78);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file78.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file78.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass80);
    }

    @Test
    public void test0466() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0466");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file1 = explodedArchive0.root;
        java.io.File file2 = null;
        explodedArchive0.manifestFile = file2;
        java.io.File file4 = explodedArchive0.root;
        boolean boolean5 = explodedArchive0.recursive;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive6 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest7 = explodedArchive6.manifest;
        explodedArchive6.recursive = false;
        java.io.File file10 = null;
        explodedArchive6.root = file10;
        java.io.File file12 = explodedArchive6.root;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive13 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest14 = explodedArchive13.manifest;
        explodedArchive13.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive17 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest18 = explodedArchive17.manifest;
        explodedArchive17.recursive = false;
        java.util.jar.Manifest manifest21 = explodedArchive17.manifest;
        java.io.File file22 = explodedArchive17.manifestFile;
        java.io.File file23 = null;
        java.io.File file24 = explodedArchive17.getManifestFile(file23);
        explodedArchive13.manifestFile = file23;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive26 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest27 = explodedArchive26.manifest;
        explodedArchive26.recursive = false;
        java.util.jar.Manifest manifest30 = explodedArchive26.manifest;
        java.io.File file31 = explodedArchive26.manifestFile;
        java.io.File file32 = null;
        java.io.File file33 = explodedArchive26.getManifestFile(file32);
        explodedArchive13.manifestFile = file33;
        java.io.File file35 = explodedArchive6.getManifestFile(file33);
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntry fileEntry36 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntry();
        java.lang.String str37 = fileEntry36.name;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator38 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file39 = null;
        fileEntryIterator38.current = file39;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive41 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.lang.String str42 = explodedArchive41.toString();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive43 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file44 = explodedArchive43.root;
        java.io.File file45 = null;
        explodedArchive43.manifestFile = file45;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive47 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest48 = explodedArchive47.manifest;
        explodedArchive47.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive51 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest52 = explodedArchive51.manifest;
        explodedArchive51.recursive = false;
        java.util.jar.Manifest manifest55 = explodedArchive51.manifest;
        java.io.File file56 = explodedArchive51.manifestFile;
        java.io.File file57 = null;
        java.io.File file58 = explodedArchive51.getManifestFile(file57);
        explodedArchive47.manifestFile = file57;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive60 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest61 = explodedArchive60.manifest;
        explodedArchive60.recursive = false;
        java.util.jar.Manifest manifest64 = explodedArchive60.manifest;
        java.io.File file65 = explodedArchive60.manifestFile;
        java.io.File file66 = null;
        java.io.File file67 = explodedArchive60.getManifestFile(file66);
        explodedArchive47.manifestFile = file67;
        java.io.File file69 = explodedArchive43.getManifestFile(file67);
        java.io.File file70 = explodedArchive41.getManifestFile(file67);
        fileEntryIterator38.root = file67;
        fileEntry36.file = file67;
        java.io.File file73 = fileEntry36.file;
        explodedArchive6.root = file73;
        java.io.File file75 = explodedArchive6.manifestFile;
        java.io.File file76 = explodedArchive6.root;
        explodedArchive0.manifestFile = file76;
        java.util.jar.Manifest manifest78 = explodedArchive0.getManifest();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file24.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file24.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file33.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file33.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file35.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file35.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str42 + "' != '" + "exploded archive" + "'", str42.equals("exploded archive"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file58.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file58.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file67.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file67.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file69.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file69.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file70.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file70.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file73);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file73.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file73.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file75);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file76);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file76.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file76.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest78);
    }

    @Test
    public void test0467() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0467");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        boolean boolean1 = fileEntryIterator0.hasNext();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator2 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator3 = entryComparator2.reversed();
        java.util.Comparator<java.io.File> fileComparator4 = fileComparator3.reversed();
        fileEntryIterator0.entryComparator = fileComparator4;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive6 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file7 = explodedArchive6.root;
        java.io.File file8 = null;
        explodedArchive6.manifestFile = file8;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive10 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest11 = explodedArchive10.manifest;
        explodedArchive10.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive14 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest15 = explodedArchive14.manifest;
        explodedArchive14.recursive = false;
        java.util.jar.Manifest manifest18 = explodedArchive14.manifest;
        java.io.File file19 = explodedArchive14.manifestFile;
        java.io.File file20 = null;
        java.io.File file21 = explodedArchive14.getManifestFile(file20);
        explodedArchive10.manifestFile = file20;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive23 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest24 = explodedArchive23.manifest;
        explodedArchive23.recursive = false;
        java.util.jar.Manifest manifest27 = explodedArchive23.manifest;
        java.io.File file28 = explodedArchive23.manifestFile;
        java.io.File file29 = null;
        java.io.File file30 = explodedArchive23.getManifestFile(file29);
        explodedArchive10.manifestFile = file30;
        java.io.File file32 = explodedArchive6.getManifestFile(file30);
        java.util.Iterator<java.io.File> fileItor33 = fileEntryIterator0.listFiles(file32);
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntry fileEntry34 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntry();
        java.lang.String str35 = fileEntry34.name;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator36 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file37 = null;
        fileEntryIterator36.current = file37;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive39 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.lang.String str40 = explodedArchive39.toString();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive41 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file42 = explodedArchive41.root;
        java.io.File file43 = null;
        explodedArchive41.manifestFile = file43;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive45 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest46 = explodedArchive45.manifest;
        explodedArchive45.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive49 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest50 = explodedArchive49.manifest;
        explodedArchive49.recursive = false;
        java.util.jar.Manifest manifest53 = explodedArchive49.manifest;
        java.io.File file54 = explodedArchive49.manifestFile;
        java.io.File file55 = null;
        java.io.File file56 = explodedArchive49.getManifestFile(file55);
        explodedArchive45.manifestFile = file55;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive58 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest59 = explodedArchive58.manifest;
        explodedArchive58.recursive = false;
        java.util.jar.Manifest manifest62 = explodedArchive58.manifest;
        java.io.File file63 = explodedArchive58.manifestFile;
        java.io.File file64 = null;
        java.io.File file65 = explodedArchive58.getManifestFile(file64);
        explodedArchive45.manifestFile = file65;
        java.io.File file67 = explodedArchive41.getManifestFile(file65);
        java.io.File file68 = explodedArchive39.getManifestFile(file65);
        fileEntryIterator36.root = file65;
        fileEntry34.file = file65;
        java.io.File file71 = fileEntry34.getFile();
        java.io.File file72 = fileEntry34.getFile();
        java.util.Iterator<java.io.File> fileItor73 = fileEntryIterator0.listFiles(file72);
        java.util.Comparator<java.io.File> fileComparator74 = fileEntryIterator0.entryComparator;
        java.util.Deque<java.util.Iterator<java.io.File>> fileItorQueue75 = fileEntryIterator0.stack;
        java.util.Comparator<java.io.File> fileComparator76 = fileEntryIterator0.entryComparator;
        java.io.File file77 = fileEntryIterator0.root;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file21.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file21.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file30.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file30.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file32.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file32.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str40 + "' != '" + "exploded archive" + "'", str40.equals("exploded archive"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file56.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file56.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file65.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file65.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file67.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file67.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file68.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file68.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file71.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file71.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file72.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file72.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor73);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItorQueue75);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator76);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file77);
    }

    @Test
    public void test0468() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0468");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file1 = explodedArchive0.root;
        java.io.File file2 = null;
        explodedArchive0.manifestFile = file2;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive4 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest5 = explodedArchive4.manifest;
        explodedArchive4.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive8 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest9 = explodedArchive8.manifest;
        explodedArchive8.recursive = false;
        java.util.jar.Manifest manifest12 = explodedArchive8.manifest;
        java.io.File file13 = explodedArchive8.manifestFile;
        java.io.File file14 = null;
        java.io.File file15 = explodedArchive8.getManifestFile(file14);
        explodedArchive4.manifestFile = file14;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive17 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest18 = explodedArchive17.manifest;
        explodedArchive17.recursive = false;
        java.util.jar.Manifest manifest21 = explodedArchive17.manifest;
        java.io.File file22 = explodedArchive17.manifestFile;
        java.io.File file23 = null;
        java.io.File file24 = explodedArchive17.getManifestFile(file23);
        explodedArchive4.manifestFile = file24;
        java.io.File file26 = explodedArchive0.getManifestFile(file24);
        java.util.jar.Manifest manifest27 = null;
        explodedArchive0.manifest = manifest27;
        java.io.File file29 = explodedArchive0.root;
        explodedArchive0.recursive = false;
        org.springframework.boot.loader.archive.Archive.EntryFilter entryFilter32 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<org.springframework.boot.loader.archive.Archive> archiveList33 = explodedArchive0.getNestedArchives(entryFilter32);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file15.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file15.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file24.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file24.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file26.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file26.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file29);
    }

    @Test
    public void test0469() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0469");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntry fileEntry0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntry();
        java.io.File file1 = fileEntry0.getFile();
        java.io.File file2 = fileEntry0.getFile();
        java.lang.String str3 = fileEntry0.name;
        java.io.File file4 = fileEntry0.getFile();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator5 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file6 = null;
        fileEntryIterator5.current = file6;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive8 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest9 = explodedArchive8.manifest;
        explodedArchive8.recursive = false;
        java.util.jar.Manifest manifest12 = explodedArchive8.manifest;
        java.io.File file13 = explodedArchive8.manifestFile;
        java.io.File file14 = null;
        java.io.File file15 = explodedArchive8.getManifestFile(file14);
        java.util.Iterator<java.io.File> fileItor16 = fileEntryIterator5.listFiles(file15);
        fileEntry0.file = file15;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntry fileEntry18 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntry();
        java.io.File file19 = fileEntry18.getFile();
        java.io.File file20 = fileEntry18.getFile();
        java.lang.String str21 = fileEntry18.name;
        java.io.File file22 = fileEntry18.getFile();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator23 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file24 = null;
        fileEntryIterator23.current = file24;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive26 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest27 = explodedArchive26.manifest;
        explodedArchive26.recursive = false;
        java.util.jar.Manifest manifest30 = explodedArchive26.manifest;
        java.io.File file31 = explodedArchive26.manifestFile;
        java.io.File file32 = null;
        java.io.File file33 = explodedArchive26.getManifestFile(file32);
        java.util.Iterator<java.io.File> fileItor34 = fileEntryIterator23.listFiles(file33);
        fileEntry18.file = file33;
        fileEntry0.file = file33;
        java.lang.String str37 = fileEntry0.getName();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file15.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file15.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file33.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file33.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str37);
    }

    @Test
    public void test0470() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0470");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest1 = explodedArchive0.manifest;
        explodedArchive0.recursive = false;
        java.util.jar.Manifest manifest4 = explodedArchive0.manifest;
        java.util.jar.Manifest manifest5 = null;
        explodedArchive0.manifest = manifest5;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Spliterator<org.springframework.boot.loader.archive.Archive.Entry> entrySpliterator7 = explodedArchive0.spliterator();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest4);
    }

    @Test
    public void test0471() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0471");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntry fileEntry0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntry();
        java.lang.String str1 = fileEntry0.name;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator2 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file3 = null;
        fileEntryIterator2.current = file3;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive5 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.lang.String str6 = explodedArchive5.toString();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive7 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file8 = explodedArchive7.root;
        java.io.File file9 = null;
        explodedArchive7.manifestFile = file9;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive11 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest12 = explodedArchive11.manifest;
        explodedArchive11.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive15 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest16 = explodedArchive15.manifest;
        explodedArchive15.recursive = false;
        java.util.jar.Manifest manifest19 = explodedArchive15.manifest;
        java.io.File file20 = explodedArchive15.manifestFile;
        java.io.File file21 = null;
        java.io.File file22 = explodedArchive15.getManifestFile(file21);
        explodedArchive11.manifestFile = file21;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive24 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest25 = explodedArchive24.manifest;
        explodedArchive24.recursive = false;
        java.util.jar.Manifest manifest28 = explodedArchive24.manifest;
        java.io.File file29 = explodedArchive24.manifestFile;
        java.io.File file30 = null;
        java.io.File file31 = explodedArchive24.getManifestFile(file30);
        explodedArchive11.manifestFile = file31;
        java.io.File file33 = explodedArchive7.getManifestFile(file31);
        java.io.File file34 = explodedArchive5.getManifestFile(file31);
        fileEntryIterator2.root = file31;
        fileEntry0.file = file31;
        java.io.File file37 = fileEntry0.getFile();
        java.io.File file38 = fileEntry0.getFile();
        java.io.File file39 = fileEntry0.getFile();
        java.lang.String str40 = fileEntry0.name;
        java.lang.String str41 = fileEntry0.getName();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "exploded archive" + "'", str6.equals("exploded archive"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file22.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file22.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file31.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file31.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file33.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file33.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file34.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file34.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file37.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file37.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file38.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file38.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file39.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file39.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str41);
    }

    @Test
    public void test0472() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0472");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file1 = null;
        fileEntryIterator0.current = file1;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive3 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest4 = explodedArchive3.manifest;
        explodedArchive3.recursive = false;
        java.util.jar.Manifest manifest7 = explodedArchive3.manifest;
        java.io.File file8 = explodedArchive3.manifestFile;
        java.io.File file9 = null;
        java.io.File file10 = explodedArchive3.getManifestFile(file9);
        java.util.Iterator<java.io.File> fileItor11 = fileEntryIterator0.listFiles(file10);
        java.io.File file12 = fileEntryIterator0.root;
        java.io.File file13 = fileEntryIterator0.root;
        java.io.File file14 = fileEntryIterator0.current;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator15 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        boolean boolean16 = fileEntryIterator15.hasNext();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator17 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator18 = entryComparator17.reversed();
        java.util.Comparator<java.io.File> fileComparator19 = fileComparator18.reversed();
        fileEntryIterator15.entryComparator = fileComparator19;
        java.util.Comparator<java.io.File> fileComparator21 = fileEntryIterator15.entryComparator;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator22 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator23 = entryComparator22.reversed();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator24 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator25 = entryComparator24.reversed();
        java.util.Comparator<java.io.File> fileComparator26 = entryComparator22.thenComparing(fileComparator25);
        java.util.Comparator<java.io.File> fileComparator27 = fileComparator21.thenComparing(fileComparator25);
        fileEntryIterator0.entryComparator = fileComparator21;
        java.util.Comparator<java.io.File> fileComparator29 = fileComparator21.reversed();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator30 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        boolean boolean31 = fileEntryIterator30.hasNext();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator32 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator33 = entryComparator32.reversed();
        java.util.Comparator<java.io.File> fileComparator34 = fileComparator33.reversed();
        fileEntryIterator30.entryComparator = fileComparator34;
        java.util.Comparator<java.io.File> fileComparator36 = fileComparator21.thenComparing(fileComparator34);
        java.util.Comparator<java.io.File> fileComparator37 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Comparator<java.io.File> fileComparator38 = fileComparator34.thenComparing(fileComparator37);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator36);
    }

    @Test
    public void test0473() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0473");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest1 = explodedArchive0.manifest;
        java.util.jar.Manifest manifest2 = null;
        explodedArchive0.manifest = manifest2;
        java.io.File file4 = explodedArchive0.root;
        java.lang.String str5 = explodedArchive0.toString();
        org.springframework.boot.loader.archive.Archive.EntryFilter entryFilter6 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<org.springframework.boot.loader.archive.Archive> archiveList7 = explodedArchive0.getNestedArchives(entryFilter6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str5 + "' != '" + "exploded archive" + "'", str5.equals("exploded archive"));
    }

    @Test
    public void test0474() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0474");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntry fileEntry0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntry();
        java.io.File file1 = fileEntry0.getFile();
        java.io.File file2 = fileEntry0.getFile();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive3 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file4 = explodedArchive3.root;
        java.io.File file5 = null;
        explodedArchive3.manifestFile = file5;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive7 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest8 = explodedArchive7.manifest;
        explodedArchive7.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive11 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest12 = explodedArchive11.manifest;
        explodedArchive11.recursive = false;
        java.util.jar.Manifest manifest15 = explodedArchive11.manifest;
        java.io.File file16 = explodedArchive11.manifestFile;
        java.io.File file17 = null;
        java.io.File file18 = explodedArchive11.getManifestFile(file17);
        explodedArchive7.manifestFile = file17;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive20 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest21 = explodedArchive20.manifest;
        explodedArchive20.recursive = false;
        java.util.jar.Manifest manifest24 = explodedArchive20.manifest;
        java.io.File file25 = explodedArchive20.manifestFile;
        java.io.File file26 = null;
        java.io.File file27 = explodedArchive20.getManifestFile(file26);
        explodedArchive7.manifestFile = file27;
        java.io.File file29 = explodedArchive3.getManifestFile(file27);
        fileEntry0.file = file29;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator31 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        boolean boolean32 = fileEntryIterator31.recursive;
        java.io.File file33 = fileEntryIterator31.current;
        boolean boolean34 = fileEntryIterator31.hasNext();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator35 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator36 = entryComparator35.reversed();
        java.util.Comparator<java.io.File> fileComparator37 = entryComparator35.reversed();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive38 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest39 = explodedArchive38.manifest;
        explodedArchive38.recursive = false;
        java.util.jar.Manifest manifest42 = explodedArchive38.manifest;
        java.io.File file43 = explodedArchive38.manifestFile;
        java.io.File file44 = null;
        java.io.File file45 = explodedArchive38.getManifestFile(file44);
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive46 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest47 = explodedArchive46.manifest;
        explodedArchive46.recursive = false;
        java.io.File file50 = null;
        explodedArchive46.root = file50;
        java.io.File file52 = explodedArchive46.root;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive53 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest54 = explodedArchive53.manifest;
        explodedArchive53.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive57 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest58 = explodedArchive57.manifest;
        explodedArchive57.recursive = false;
        java.util.jar.Manifest manifest61 = explodedArchive57.manifest;
        java.io.File file62 = explodedArchive57.manifestFile;
        java.io.File file63 = null;
        java.io.File file64 = explodedArchive57.getManifestFile(file63);
        explodedArchive53.manifestFile = file63;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive66 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest67 = explodedArchive66.manifest;
        explodedArchive66.recursive = false;
        java.util.jar.Manifest manifest70 = explodedArchive66.manifest;
        java.io.File file71 = explodedArchive66.manifestFile;
        java.io.File file72 = null;
        java.io.File file73 = explodedArchive66.getManifestFile(file72);
        explodedArchive53.manifestFile = file73;
        java.io.File file75 = explodedArchive46.getManifestFile(file73);
        int int76 = entryComparator35.compare(file45, file73);
        java.util.Iterator<java.io.File> fileItor77 = fileEntryIterator31.listFiles(file45);
        fileEntry0.file = file45;
        boolean boolean79 = fileEntry0.isDirectory();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file18.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file18.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file27.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file27.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file29.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file29.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file45.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file45.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file64.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file64.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file73);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file73.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file73.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file75);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file75.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file75.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor77);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
    }

    @Test
    public void test0475() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0475");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest1 = explodedArchive0.manifest;
        java.util.jar.Manifest manifest2 = null;
        explodedArchive0.manifest = manifest2;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive4 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest5 = explodedArchive4.manifest;
        explodedArchive4.recursive = false;
        java.util.jar.Manifest manifest8 = explodedArchive4.manifest;
        java.io.File file9 = explodedArchive4.manifestFile;
        java.io.File file10 = null;
        java.io.File file11 = explodedArchive4.getManifestFile(file10);
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator12 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file13 = null;
        fileEntryIterator12.current = file13;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive15 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.lang.String str16 = explodedArchive15.toString();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive17 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file18 = explodedArchive17.root;
        java.io.File file19 = null;
        explodedArchive17.manifestFile = file19;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive21 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest22 = explodedArchive21.manifest;
        explodedArchive21.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive25 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest26 = explodedArchive25.manifest;
        explodedArchive25.recursive = false;
        java.util.jar.Manifest manifest29 = explodedArchive25.manifest;
        java.io.File file30 = explodedArchive25.manifestFile;
        java.io.File file31 = null;
        java.io.File file32 = explodedArchive25.getManifestFile(file31);
        explodedArchive21.manifestFile = file31;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive34 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest35 = explodedArchive34.manifest;
        explodedArchive34.recursive = false;
        java.util.jar.Manifest manifest38 = explodedArchive34.manifest;
        java.io.File file39 = explodedArchive34.manifestFile;
        java.io.File file40 = null;
        java.io.File file41 = explodedArchive34.getManifestFile(file40);
        explodedArchive21.manifestFile = file41;
        java.io.File file43 = explodedArchive17.getManifestFile(file41);
        java.io.File file44 = explodedArchive15.getManifestFile(file41);
        fileEntryIterator12.root = file41;
        explodedArchive4.root = file41;
        explodedArchive0.root = file41;
        // The following exception was thrown during execution in test generation
        try {
            org.springframework.boot.loader.archive.ExplodedArchive explodedArchive48 = new org.springframework.boot.loader.archive.ExplodedArchive(file41);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid source folder META-INF/MANIFEST.MF");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file11.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file11.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str16 + "' != '" + "exploded archive" + "'", str16.equals("exploded archive"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file32.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file32.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file41.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file41.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file43.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file43.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file44.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file44.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
    }

    @Test
    public void test0476() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0476");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntry fileEntry0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntry();
        java.lang.String str1 = fileEntry0.name;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator2 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file3 = null;
        fileEntryIterator2.current = file3;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive5 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.lang.String str6 = explodedArchive5.toString();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive7 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file8 = explodedArchive7.root;
        java.io.File file9 = null;
        explodedArchive7.manifestFile = file9;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive11 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest12 = explodedArchive11.manifest;
        explodedArchive11.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive15 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest16 = explodedArchive15.manifest;
        explodedArchive15.recursive = false;
        java.util.jar.Manifest manifest19 = explodedArchive15.manifest;
        java.io.File file20 = explodedArchive15.manifestFile;
        java.io.File file21 = null;
        java.io.File file22 = explodedArchive15.getManifestFile(file21);
        explodedArchive11.manifestFile = file21;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive24 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest25 = explodedArchive24.manifest;
        explodedArchive24.recursive = false;
        java.util.jar.Manifest manifest28 = explodedArchive24.manifest;
        java.io.File file29 = explodedArchive24.manifestFile;
        java.io.File file30 = null;
        java.io.File file31 = explodedArchive24.getManifestFile(file30);
        explodedArchive11.manifestFile = file31;
        java.io.File file33 = explodedArchive7.getManifestFile(file31);
        java.io.File file34 = explodedArchive5.getManifestFile(file31);
        fileEntryIterator2.root = file31;
        fileEntry0.file = file31;
        java.io.File file37 = fileEntry0.getFile();
        java.lang.String str38 = fileEntry0.getName();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "exploded archive" + "'", str6.equals("exploded archive"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file22.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file22.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file31.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file31.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file33.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file33.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file34.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file34.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file37.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file37.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str38);
    }

    @Test
    public void test0477() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0477");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest1 = explodedArchive0.manifest;
        explodedArchive0.recursive = false;
        java.io.File file4 = null;
        explodedArchive0.root = file4;
        java.io.File file6 = explodedArchive0.manifestFile;
        java.io.File file7 = explodedArchive0.manifestFile;
        java.io.File file8 = explodedArchive0.manifestFile;
        boolean boolean9 = explodedArchive0.recursive;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Spliterator<org.springframework.boot.loader.archive.Archive.Entry> entrySpliterator10 = explodedArchive0.spliterator();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test0478() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0478");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file1 = explodedArchive0.root;
        java.io.File file2 = null;
        explodedArchive0.manifestFile = file2;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive4 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest5 = explodedArchive4.manifest;
        explodedArchive4.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive8 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest9 = explodedArchive8.manifest;
        explodedArchive8.recursive = false;
        java.util.jar.Manifest manifest12 = explodedArchive8.manifest;
        java.io.File file13 = explodedArchive8.manifestFile;
        java.io.File file14 = null;
        java.io.File file15 = explodedArchive8.getManifestFile(file14);
        explodedArchive4.manifestFile = file14;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive17 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest18 = explodedArchive17.manifest;
        explodedArchive17.recursive = false;
        java.util.jar.Manifest manifest21 = explodedArchive17.manifest;
        java.io.File file22 = explodedArchive17.manifestFile;
        java.io.File file23 = null;
        java.io.File file24 = explodedArchive17.getManifestFile(file23);
        explodedArchive4.manifestFile = file24;
        java.io.File file26 = explodedArchive0.getManifestFile(file24);
        java.io.File file27 = explodedArchive0.root;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator28 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        boolean boolean29 = fileEntryIterator28.hasNext();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator30 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator31 = entryComparator30.reversed();
        java.util.Comparator<java.io.File> fileComparator32 = fileComparator31.reversed();
        fileEntryIterator28.entryComparator = fileComparator32;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive34 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file35 = explodedArchive34.root;
        java.io.File file36 = null;
        explodedArchive34.manifestFile = file36;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive38 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest39 = explodedArchive38.manifest;
        explodedArchive38.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive42 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest43 = explodedArchive42.manifest;
        explodedArchive42.recursive = false;
        java.util.jar.Manifest manifest46 = explodedArchive42.manifest;
        java.io.File file47 = explodedArchive42.manifestFile;
        java.io.File file48 = null;
        java.io.File file49 = explodedArchive42.getManifestFile(file48);
        explodedArchive38.manifestFile = file48;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive51 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest52 = explodedArchive51.manifest;
        explodedArchive51.recursive = false;
        java.util.jar.Manifest manifest55 = explodedArchive51.manifest;
        java.io.File file56 = explodedArchive51.manifestFile;
        java.io.File file57 = null;
        java.io.File file58 = explodedArchive51.getManifestFile(file57);
        explodedArchive38.manifestFile = file58;
        java.io.File file60 = explodedArchive34.getManifestFile(file58);
        java.util.Iterator<java.io.File> fileItor61 = fileEntryIterator28.listFiles(file60);
        explodedArchive0.manifestFile = file60;
        // The following exception was thrown during execution in test generation
        try {
            java.net.URL uRL63 = explodedArchive0.getUrl();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file15.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file15.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file24.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file24.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file26.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file26.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file49.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file49.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file58.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file58.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file60.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file60.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor61);
    }

    @Test
    public void test0479() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0479");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file1 = null;
        fileEntryIterator0.current = file1;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive3 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest4 = explodedArchive3.manifest;
        explodedArchive3.recursive = false;
        java.util.jar.Manifest manifest7 = explodedArchive3.manifest;
        java.io.File file8 = explodedArchive3.manifestFile;
        java.io.File file9 = null;
        java.io.File file10 = explodedArchive3.getManifestFile(file9);
        java.util.Iterator<java.io.File> fileItor11 = fileEntryIterator0.listFiles(file10);
        boolean boolean12 = fileEntryIterator0.hasNext();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator13 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        boolean boolean14 = fileEntryIterator13.recursive;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator15 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        boolean boolean16 = fileEntryIterator15.hasNext();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator17 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator18 = entryComparator17.reversed();
        java.util.Comparator<java.io.File> fileComparator19 = fileComparator18.reversed();
        fileEntryIterator15.entryComparator = fileComparator19;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive21 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file22 = explodedArchive21.root;
        java.io.File file23 = null;
        explodedArchive21.manifestFile = file23;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive25 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest26 = explodedArchive25.manifest;
        explodedArchive25.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive29 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest30 = explodedArchive29.manifest;
        explodedArchive29.recursive = false;
        java.util.jar.Manifest manifest33 = explodedArchive29.manifest;
        java.io.File file34 = explodedArchive29.manifestFile;
        java.io.File file35 = null;
        java.io.File file36 = explodedArchive29.getManifestFile(file35);
        explodedArchive25.manifestFile = file35;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive38 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest39 = explodedArchive38.manifest;
        explodedArchive38.recursive = false;
        java.util.jar.Manifest manifest42 = explodedArchive38.manifest;
        java.io.File file43 = explodedArchive38.manifestFile;
        java.io.File file44 = null;
        java.io.File file45 = explodedArchive38.getManifestFile(file44);
        explodedArchive25.manifestFile = file45;
        java.io.File file47 = explodedArchive21.getManifestFile(file45);
        java.util.Iterator<java.io.File> fileItor48 = fileEntryIterator15.listFiles(file47);
        fileEntryIterator13.root = file47;
        fileEntryIterator0.current = file47;
        // The following exception was thrown during execution in test generation
        try {
            fileEntryIterator0.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: remove");
        } catch (java.lang.UnsupportedOperationException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file36.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file36.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file45.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file45.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file47.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file47.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor48);
    }

    @Test
    public void test0480() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0480");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file1 = explodedArchive0.root;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive2 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest3 = explodedArchive2.manifest;
        explodedArchive2.recursive = false;
        java.util.jar.Manifest manifest6 = explodedArchive2.manifest;
        java.io.File file7 = explodedArchive2.manifestFile;
        java.io.File file8 = null;
        java.io.File file9 = explodedArchive2.getManifestFile(file8);
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator10 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file11 = null;
        fileEntryIterator10.current = file11;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive13 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.lang.String str14 = explodedArchive13.toString();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive15 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file16 = explodedArchive15.root;
        java.io.File file17 = null;
        explodedArchive15.manifestFile = file17;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive19 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest20 = explodedArchive19.manifest;
        explodedArchive19.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive23 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest24 = explodedArchive23.manifest;
        explodedArchive23.recursive = false;
        java.util.jar.Manifest manifest27 = explodedArchive23.manifest;
        java.io.File file28 = explodedArchive23.manifestFile;
        java.io.File file29 = null;
        java.io.File file30 = explodedArchive23.getManifestFile(file29);
        explodedArchive19.manifestFile = file29;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive32 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest33 = explodedArchive32.manifest;
        explodedArchive32.recursive = false;
        java.util.jar.Manifest manifest36 = explodedArchive32.manifest;
        java.io.File file37 = explodedArchive32.manifestFile;
        java.io.File file38 = null;
        java.io.File file39 = explodedArchive32.getManifestFile(file38);
        explodedArchive19.manifestFile = file39;
        java.io.File file41 = explodedArchive15.getManifestFile(file39);
        java.io.File file42 = explodedArchive13.getManifestFile(file39);
        fileEntryIterator10.root = file39;
        explodedArchive2.root = file39;
        java.io.File file45 = explodedArchive0.getManifestFile(file39);
        java.util.jar.Manifest manifest46 = explodedArchive0.manifest;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file9.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file9.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str14 + "' != '" + "exploded archive" + "'", str14.equals("exploded archive"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file30.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file30.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file39.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file39.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file41.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file41.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file42.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file42.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file45.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file45.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest46);
    }

    @Test
    public void test0481() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0481");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file1 = null;
        fileEntryIterator0.current = file1;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive3 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest4 = explodedArchive3.manifest;
        explodedArchive3.recursive = false;
        java.util.jar.Manifest manifest7 = explodedArchive3.manifest;
        java.io.File file8 = explodedArchive3.manifestFile;
        java.io.File file9 = null;
        java.io.File file10 = explodedArchive3.getManifestFile(file9);
        java.util.Iterator<java.io.File> fileItor11 = fileEntryIterator0.listFiles(file10);
        boolean boolean12 = fileEntryIterator0.hasNext();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator13 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator14 = entryComparator13.reversed();
        java.util.Comparator<java.io.File> fileComparator15 = entryComparator13.reversed();
        fileEntryIterator0.entryComparator = fileComparator15;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator17 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file18 = null;
        fileEntryIterator17.current = file18;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive20 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.lang.String str21 = explodedArchive20.toString();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive22 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file23 = explodedArchive22.root;
        java.io.File file24 = null;
        explodedArchive22.manifestFile = file24;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive26 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest27 = explodedArchive26.manifest;
        explodedArchive26.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive30 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest31 = explodedArchive30.manifest;
        explodedArchive30.recursive = false;
        java.util.jar.Manifest manifest34 = explodedArchive30.manifest;
        java.io.File file35 = explodedArchive30.manifestFile;
        java.io.File file36 = null;
        java.io.File file37 = explodedArchive30.getManifestFile(file36);
        explodedArchive26.manifestFile = file36;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive39 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest40 = explodedArchive39.manifest;
        explodedArchive39.recursive = false;
        java.util.jar.Manifest manifest43 = explodedArchive39.manifest;
        java.io.File file44 = explodedArchive39.manifestFile;
        java.io.File file45 = null;
        java.io.File file46 = explodedArchive39.getManifestFile(file45);
        explodedArchive26.manifestFile = file46;
        java.io.File file48 = explodedArchive22.getManifestFile(file46);
        java.io.File file49 = explodedArchive20.getManifestFile(file46);
        fileEntryIterator17.root = file46;
        fileEntryIterator0.current = file46;
        // The following exception was thrown during execution in test generation
        try {
            org.springframework.boot.loader.archive.ExplodedArchive explodedArchive52 = new org.springframework.boot.loader.archive.ExplodedArchive(file46);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid source folder META-INF/MANIFEST.MF");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str21 + "' != '" + "exploded archive" + "'", str21.equals("exploded archive"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file37.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file37.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file46.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file46.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file48.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file48.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file49.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file49.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
    }

    @Test
    public void test0482() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0482");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file1 = explodedArchive0.root;
        java.io.File file2 = null;
        explodedArchive0.manifestFile = file2;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive4 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest5 = explodedArchive4.manifest;
        explodedArchive4.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive8 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest9 = explodedArchive8.manifest;
        explodedArchive8.recursive = false;
        java.util.jar.Manifest manifest12 = explodedArchive8.manifest;
        java.io.File file13 = explodedArchive8.manifestFile;
        java.io.File file14 = null;
        java.io.File file15 = explodedArchive8.getManifestFile(file14);
        explodedArchive4.manifestFile = file14;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive17 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest18 = explodedArchive17.manifest;
        explodedArchive17.recursive = false;
        java.util.jar.Manifest manifest21 = explodedArchive17.manifest;
        java.io.File file22 = explodedArchive17.manifestFile;
        java.io.File file23 = null;
        java.io.File file24 = explodedArchive17.getManifestFile(file23);
        explodedArchive4.manifestFile = file24;
        java.io.File file26 = explodedArchive0.getManifestFile(file24);
        java.util.jar.Manifest manifest27 = null;
        explodedArchive0.manifest = manifest27;
        java.io.File file29 = explodedArchive0.root;
        java.lang.String str30 = explodedArchive0.toString();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file15.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file15.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file24.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file24.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file26.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file26.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str30 + "' != '" + "exploded archive" + "'", str30.equals("exploded archive"));
    }

    @Test
    public void test0483() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0483");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest1 = explodedArchive0.manifest;
        explodedArchive0.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive4 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest5 = explodedArchive4.manifest;
        explodedArchive4.recursive = false;
        java.util.jar.Manifest manifest8 = explodedArchive4.manifest;
        java.io.File file9 = explodedArchive4.manifestFile;
        java.io.File file10 = null;
        java.io.File file11 = explodedArchive4.getManifestFile(file10);
        explodedArchive0.manifestFile = file10;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive13 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest14 = explodedArchive13.manifest;
        explodedArchive13.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive17 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest18 = explodedArchive17.manifest;
        explodedArchive17.recursive = false;
        java.util.jar.Manifest manifest21 = explodedArchive17.manifest;
        java.io.File file22 = explodedArchive17.manifestFile;
        java.io.File file23 = null;
        java.io.File file24 = explodedArchive17.getManifestFile(file23);
        explodedArchive13.manifestFile = file23;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive26 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest27 = explodedArchive26.manifest;
        explodedArchive26.recursive = false;
        java.util.jar.Manifest manifest30 = explodedArchive26.manifest;
        java.io.File file31 = explodedArchive26.manifestFile;
        java.io.File file32 = null;
        java.io.File file33 = explodedArchive26.getManifestFile(file32);
        explodedArchive13.manifestFile = file33;
        explodedArchive0.root = file33;
        java.net.URL uRL36 = explodedArchive0.getUrl();
        java.util.jar.Manifest manifest37 = explodedArchive0.manifest;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator38 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file39 = null;
        fileEntryIterator38.current = file39;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive41 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest42 = explodedArchive41.manifest;
        explodedArchive41.recursive = false;
        java.util.jar.Manifest manifest45 = explodedArchive41.manifest;
        java.io.File file46 = explodedArchive41.manifestFile;
        java.io.File file47 = null;
        java.io.File file48 = explodedArchive41.getManifestFile(file47);
        java.util.Iterator<java.io.File> fileItor49 = fileEntryIterator38.listFiles(file48);
        java.io.File file50 = fileEntryIterator38.root;
        java.io.File file51 = fileEntryIterator38.root;
        java.util.Deque<java.util.Iterator<java.io.File>> fileItorQueue52 = fileEntryIterator38.stack;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator53 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator54 = entryComparator53.reversed();
        java.util.Comparator<java.io.File> fileComparator55 = entryComparator53.reversed();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive56 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest57 = explodedArchive56.manifest;
        explodedArchive56.recursive = false;
        java.util.jar.Manifest manifest60 = explodedArchive56.manifest;
        java.io.File file61 = explodedArchive56.manifestFile;
        java.io.File file62 = null;
        java.io.File file63 = explodedArchive56.getManifestFile(file62);
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive64 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest65 = explodedArchive64.manifest;
        explodedArchive64.recursive = false;
        java.io.File file68 = null;
        explodedArchive64.root = file68;
        java.io.File file70 = explodedArchive64.root;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive71 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest72 = explodedArchive71.manifest;
        explodedArchive71.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive75 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest76 = explodedArchive75.manifest;
        explodedArchive75.recursive = false;
        java.util.jar.Manifest manifest79 = explodedArchive75.manifest;
        java.io.File file80 = explodedArchive75.manifestFile;
        java.io.File file81 = null;
        java.io.File file82 = explodedArchive75.getManifestFile(file81);
        explodedArchive71.manifestFile = file81;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive84 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest85 = explodedArchive84.manifest;
        explodedArchive84.recursive = false;
        java.util.jar.Manifest manifest88 = explodedArchive84.manifest;
        java.io.File file89 = explodedArchive84.manifestFile;
        java.io.File file90 = null;
        java.io.File file91 = explodedArchive84.getManifestFile(file90);
        explodedArchive71.manifestFile = file91;
        java.io.File file93 = explodedArchive64.getManifestFile(file91);
        int int94 = entryComparator53.compare(file63, file91);
        fileEntryIterator38.root = file63;
        java.io.File file96 = explodedArchive0.getManifestFile(file63);
        // The following exception was thrown during execution in test generation
        try {
            org.springframework.boot.loader.archive.ExplodedArchive explodedArchive98 = new org.springframework.boot.loader.archive.ExplodedArchive(file63, true);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid source folder META-INF/MANIFEST.MF");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file11.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file11.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file24.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file24.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file33.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file33.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(uRL36);
        // Regression assertion (captures the current behavior of the code)
// flaky:         org.junit.Assert.assertEquals(uRL36.toString(), "file:/server/study-execution/new-nimrod/nimrod-hunoroutput-test-dest/spring-boot/af20dc6cc45c032573413c401f9f73aa75371744/randoop_6/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file48.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file48.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItorQueue52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file63.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file63.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest76);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest79);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file80);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file82);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file82.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file82.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest85);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest88);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file89);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file91);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file91.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file91.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file93);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file93.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file93.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 0 + "'", int94 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file96);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file96.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file96.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
    }

    @Test
    public void test0484() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0484");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator1 = entryComparator0.reversed();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator2 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file3 = null;
        fileEntryIterator2.current = file3;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive5 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest6 = explodedArchive5.manifest;
        explodedArchive5.recursive = false;
        java.util.jar.Manifest manifest9 = explodedArchive5.manifest;
        java.io.File file10 = explodedArchive5.manifestFile;
        java.io.File file11 = null;
        java.io.File file12 = explodedArchive5.getManifestFile(file11);
        java.util.Iterator<java.io.File> fileItor13 = fileEntryIterator2.listFiles(file12);
        java.io.File file14 = fileEntryIterator2.current;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator15 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file16 = null;
        fileEntryIterator15.current = file16;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive18 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest19 = explodedArchive18.manifest;
        explodedArchive18.recursive = false;
        java.util.jar.Manifest manifest22 = explodedArchive18.manifest;
        java.io.File file23 = explodedArchive18.manifestFile;
        java.io.File file24 = null;
        java.io.File file25 = explodedArchive18.getManifestFile(file24);
        java.util.Iterator<java.io.File> fileItor26 = fileEntryIterator15.listFiles(file25);
        java.util.ArrayDeque<java.util.Iterator<java.io.File>> fileItorQueue27 = new java.util.ArrayDeque<java.util.Iterator<java.io.File>>();
        boolean boolean28 = fileItorQueue27.add(fileItor26);
        fileEntryIterator2.stack = fileItorQueue27;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive30 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest31 = explodedArchive30.manifest;
        explodedArchive30.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive34 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest35 = explodedArchive34.manifest;
        explodedArchive34.recursive = false;
        java.util.jar.Manifest manifest38 = explodedArchive34.manifest;
        java.io.File file39 = explodedArchive34.manifestFile;
        java.io.File file40 = null;
        java.io.File file41 = explodedArchive34.getManifestFile(file40);
        explodedArchive30.manifestFile = file40;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive43 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest44 = explodedArchive43.manifest;
        explodedArchive43.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive47 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest48 = explodedArchive47.manifest;
        explodedArchive47.recursive = false;
        java.util.jar.Manifest manifest51 = explodedArchive47.manifest;
        java.io.File file52 = explodedArchive47.manifestFile;
        java.io.File file53 = null;
        java.io.File file54 = explodedArchive47.getManifestFile(file53);
        explodedArchive43.manifestFile = file53;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive56 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest57 = explodedArchive56.manifest;
        explodedArchive56.recursive = false;
        java.util.jar.Manifest manifest60 = explodedArchive56.manifest;
        java.io.File file61 = explodedArchive56.manifestFile;
        java.io.File file62 = null;
        java.io.File file63 = explodedArchive56.getManifestFile(file62);
        explodedArchive43.manifestFile = file63;
        explodedArchive30.root = file63;
        java.util.Iterator<java.io.File> fileItor66 = fileEntryIterator2.listFiles(file63);
        java.util.Comparator<java.io.File> fileComparator67 = fileEntryIterator2.entryComparator;
        java.util.Comparator<java.io.File> fileComparator68 = entryComparator0.thenComparing(fileComparator67);
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator69 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        boolean boolean70 = fileEntryIterator69.hasNext();
        java.io.File file71 = fileEntryIterator69.root;
        boolean boolean72 = fileEntryIterator69.hasNext();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator73 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator74 = entryComparator73.reversed();
        java.util.Comparator<java.io.File> fileComparator75 = entryComparator73.reversed();
        fileEntryIterator69.entryComparator = entryComparator73;
        java.util.Comparator<java.io.File> fileComparator77 = fileComparator67.thenComparing((java.util.Comparator<java.io.File>) entryComparator73);
        java.lang.Class<?> wildcardClass78 = fileComparator67.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file12.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file12.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file25.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file25.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file41.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file41.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file54.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file54.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest57);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file63.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file63.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator74);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator75);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator77);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass78);
    }

    @Test
    public void test0485() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0485");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file1 = null;
        fileEntryIterator0.current = file1;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive3 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest4 = explodedArchive3.manifest;
        explodedArchive3.recursive = false;
        java.util.jar.Manifest manifest7 = explodedArchive3.manifest;
        java.io.File file8 = explodedArchive3.manifestFile;
        java.io.File file9 = null;
        java.io.File file10 = explodedArchive3.getManifestFile(file9);
        java.util.Iterator<java.io.File> fileItor11 = fileEntryIterator0.listFiles(file10);
        java.io.File file12 = fileEntryIterator0.root;
        java.io.File file13 = fileEntryIterator0.poll();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive14 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.lang.String str15 = explodedArchive14.toString();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive16 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file17 = explodedArchive16.root;
        java.io.File file18 = null;
        explodedArchive16.manifestFile = file18;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive20 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest21 = explodedArchive20.manifest;
        explodedArchive20.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive24 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest25 = explodedArchive24.manifest;
        explodedArchive24.recursive = false;
        java.util.jar.Manifest manifest28 = explodedArchive24.manifest;
        java.io.File file29 = explodedArchive24.manifestFile;
        java.io.File file30 = null;
        java.io.File file31 = explodedArchive24.getManifestFile(file30);
        explodedArchive20.manifestFile = file30;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive33 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest34 = explodedArchive33.manifest;
        explodedArchive33.recursive = false;
        java.util.jar.Manifest manifest37 = explodedArchive33.manifest;
        java.io.File file38 = explodedArchive33.manifestFile;
        java.io.File file39 = null;
        java.io.File file40 = explodedArchive33.getManifestFile(file39);
        explodedArchive20.manifestFile = file40;
        java.io.File file42 = explodedArchive16.getManifestFile(file40);
        java.io.File file43 = explodedArchive14.getManifestFile(file40);
        java.io.File file44 = null;
        java.io.File file45 = explodedArchive14.getManifestFile(file44);
        fileEntryIterator0.current = file44;
        java.io.File file47 = fileEntryIterator0.current;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntry fileEntry48 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntry();
        java.io.File file49 = fileEntry48.getFile();
        java.io.File file50 = fileEntry48.getFile();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive51 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file52 = explodedArchive51.root;
        java.io.File file53 = null;
        explodedArchive51.manifestFile = file53;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive55 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest56 = explodedArchive55.manifest;
        explodedArchive55.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive59 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest60 = explodedArchive59.manifest;
        explodedArchive59.recursive = false;
        java.util.jar.Manifest manifest63 = explodedArchive59.manifest;
        java.io.File file64 = explodedArchive59.manifestFile;
        java.io.File file65 = null;
        java.io.File file66 = explodedArchive59.getManifestFile(file65);
        explodedArchive55.manifestFile = file65;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive68 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest69 = explodedArchive68.manifest;
        explodedArchive68.recursive = false;
        java.util.jar.Manifest manifest72 = explodedArchive68.manifest;
        java.io.File file73 = explodedArchive68.manifestFile;
        java.io.File file74 = null;
        java.io.File file75 = explodedArchive68.getManifestFile(file74);
        explodedArchive55.manifestFile = file75;
        java.io.File file77 = explodedArchive51.getManifestFile(file75);
        fileEntry48.file = file77;
        java.io.File file79 = fileEntry48.file;
        fileEntry48.name = "exploded archive";
        java.io.File file82 = fileEntry48.file;
        java.io.File file83 = fileEntry48.getFile();
        fileEntryIterator0.root = file83;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str15 + "' != '" + "exploded archive" + "'", str15.equals("exploded archive"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file31.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file31.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file40.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file40.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file42.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file42.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file43.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file43.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file45.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file45.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file66.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file66.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest69);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file73);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file75);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file75.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file75.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file77);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file77.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file77.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file79);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file79.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file79.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file82);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file82.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file82.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file83);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file83.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file83.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
    }

    @Test
    public void test0486() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0486");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest1 = explodedArchive0.manifest;
        explodedArchive0.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive4 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest5 = explodedArchive4.manifest;
        explodedArchive4.recursive = false;
        java.util.jar.Manifest manifest8 = explodedArchive4.manifest;
        java.io.File file9 = explodedArchive4.manifestFile;
        java.io.File file10 = null;
        java.io.File file11 = explodedArchive4.getManifestFile(file10);
        explodedArchive0.manifestFile = file10;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntry fileEntry13 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntry();
        java.io.File file14 = fileEntry13.getFile();
        java.io.File file15 = fileEntry13.getFile();
        java.lang.String str16 = fileEntry13.name;
        java.io.File file17 = fileEntry13.getFile();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator18 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file19 = null;
        fileEntryIterator18.current = file19;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive21 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest22 = explodedArchive21.manifest;
        explodedArchive21.recursive = false;
        java.util.jar.Manifest manifest25 = explodedArchive21.manifest;
        java.io.File file26 = explodedArchive21.manifestFile;
        java.io.File file27 = null;
        java.io.File file28 = explodedArchive21.getManifestFile(file27);
        java.util.Iterator<java.io.File> fileItor29 = fileEntryIterator18.listFiles(file28);
        fileEntry13.file = file28;
        explodedArchive0.manifestFile = file28;
        explodedArchive0.recursive = false;
        // The following exception was thrown during execution in test generation
        try {
            java.net.URL uRL34 = explodedArchive0.getUrl();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file11.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file11.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file28.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file28.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor29);
    }

    @Test
    public void test0487() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0487");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest1 = explodedArchive0.manifest;
        explodedArchive0.recursive = false;
        java.io.File file4 = null;
        explodedArchive0.root = file4;
        java.io.File file6 = explodedArchive0.root;
        java.util.jar.Manifest manifest7 = null;
        explodedArchive0.manifest = manifest7;
        explodedArchive0.recursive = false;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator<org.springframework.boot.loader.archive.Archive.Entry> entryItor11 = explodedArchive0.iterator();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file6);
    }

    @Test
    public void test0488() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0488");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest1 = explodedArchive0.manifest;
        explodedArchive0.recursive = false;
        java.io.File file4 = null;
        explodedArchive0.root = file4;
        java.io.File file6 = explodedArchive0.root;
        java.util.jar.Manifest manifest7 = null;
        explodedArchive0.manifest = manifest7;
        java.util.jar.Manifest manifest9 = null;
        explodedArchive0.manifest = manifest9;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator11 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file12 = null;
        fileEntryIterator11.current = file12;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive14 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest15 = explodedArchive14.manifest;
        explodedArchive14.recursive = false;
        java.util.jar.Manifest manifest18 = explodedArchive14.manifest;
        java.io.File file19 = explodedArchive14.manifestFile;
        java.io.File file20 = null;
        java.io.File file21 = explodedArchive14.getManifestFile(file20);
        java.util.Iterator<java.io.File> fileItor22 = fileEntryIterator11.listFiles(file21);
        java.io.File file23 = fileEntryIterator11.root;
        java.io.File file24 = fileEntryIterator11.root;
        java.util.Deque<java.util.Iterator<java.io.File>> fileItorQueue25 = fileEntryIterator11.stack;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive26 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.lang.String str27 = explodedArchive26.toString();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive28 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file29 = explodedArchive28.root;
        java.io.File file30 = null;
        explodedArchive28.manifestFile = file30;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive32 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest33 = explodedArchive32.manifest;
        explodedArchive32.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive36 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest37 = explodedArchive36.manifest;
        explodedArchive36.recursive = false;
        java.util.jar.Manifest manifest40 = explodedArchive36.manifest;
        java.io.File file41 = explodedArchive36.manifestFile;
        java.io.File file42 = null;
        java.io.File file43 = explodedArchive36.getManifestFile(file42);
        explodedArchive32.manifestFile = file42;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive45 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest46 = explodedArchive45.manifest;
        explodedArchive45.recursive = false;
        java.util.jar.Manifest manifest49 = explodedArchive45.manifest;
        java.io.File file50 = explodedArchive45.manifestFile;
        java.io.File file51 = null;
        java.io.File file52 = explodedArchive45.getManifestFile(file51);
        explodedArchive32.manifestFile = file52;
        java.io.File file54 = explodedArchive28.getManifestFile(file52);
        java.io.File file55 = explodedArchive26.getManifestFile(file52);
        fileEntryIterator11.current = file52;
        explodedArchive0.manifestFile = file52;
        // The following exception was thrown during execution in test generation
        try {
            org.springframework.boot.loader.archive.ExplodedArchive explodedArchive58 = new org.springframework.boot.loader.archive.ExplodedArchive(file52);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid source folder META-INF/MANIFEST.MF");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file21.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file21.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItorQueue25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str27 + "' != '" + "exploded archive" + "'", str27.equals("exploded archive"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file43.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file43.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file52.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file52.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file54.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file54.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file55.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file55.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
    }

    @Test
    public void test0489() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0489");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file1 = null;
        fileEntryIterator0.current = file1;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive3 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest4 = explodedArchive3.manifest;
        explodedArchive3.recursive = false;
        java.util.jar.Manifest manifest7 = explodedArchive3.manifest;
        java.io.File file8 = explodedArchive3.manifestFile;
        java.io.File file9 = null;
        java.io.File file10 = explodedArchive3.getManifestFile(file9);
        java.util.Iterator<java.io.File> fileItor11 = fileEntryIterator0.listFiles(file10);
        java.io.File file12 = fileEntryIterator0.root;
        java.io.File file13 = fileEntryIterator0.poll();
        java.util.Comparator<java.io.File> fileComparator14 = fileEntryIterator0.entryComparator;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator15 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        boolean boolean16 = fileEntryIterator15.hasNext();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator17 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator18 = entryComparator17.reversed();
        java.util.Comparator<java.io.File> fileComparator19 = fileComparator18.reversed();
        fileEntryIterator15.entryComparator = fileComparator19;
        java.util.Comparator<java.io.File> fileComparator21 = fileEntryIterator15.entryComparator;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator22 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator23 = entryComparator22.reversed();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator24 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator25 = entryComparator24.reversed();
        java.util.Comparator<java.io.File> fileComparator26 = entryComparator22.thenComparing(fileComparator25);
        java.util.Comparator<java.io.File> fileComparator27 = fileComparator21.thenComparing(fileComparator25);
        fileEntryIterator0.entryComparator = fileComparator27;
        java.io.File file29 = fileEntryIterator0.root;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive30 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.lang.String str31 = explodedArchive30.toString();
        explodedArchive30.recursive = true;
        java.io.File file34 = null;
        java.io.File file35 = explodedArchive30.getManifestFile(file34);
        fileEntryIterator0.root = file34;
        java.lang.Class<?> wildcardClass37 = fileEntryIterator0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str31 + "' != '" + "exploded archive" + "'", str31.equals("exploded archive"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file35.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file35.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass37);
    }

    @Test
    public void test0490() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0490");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntry fileEntry0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntry();
        java.io.File file1 = fileEntry0.getFile();
        java.io.File file2 = fileEntry0.getFile();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive3 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file4 = explodedArchive3.root;
        java.io.File file5 = null;
        explodedArchive3.manifestFile = file5;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive7 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest8 = explodedArchive7.manifest;
        explodedArchive7.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive11 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest12 = explodedArchive11.manifest;
        explodedArchive11.recursive = false;
        java.util.jar.Manifest manifest15 = explodedArchive11.manifest;
        java.io.File file16 = explodedArchive11.manifestFile;
        java.io.File file17 = null;
        java.io.File file18 = explodedArchive11.getManifestFile(file17);
        explodedArchive7.manifestFile = file17;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive20 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest21 = explodedArchive20.manifest;
        explodedArchive20.recursive = false;
        java.util.jar.Manifest manifest24 = explodedArchive20.manifest;
        java.io.File file25 = explodedArchive20.manifestFile;
        java.io.File file26 = null;
        java.io.File file27 = explodedArchive20.getManifestFile(file26);
        explodedArchive7.manifestFile = file27;
        java.io.File file29 = explodedArchive3.getManifestFile(file27);
        fileEntry0.file = file29;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator31 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        boolean boolean32 = fileEntryIterator31.recursive;
        java.io.File file33 = fileEntryIterator31.current;
        boolean boolean34 = fileEntryIterator31.hasNext();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator35 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator36 = entryComparator35.reversed();
        java.util.Comparator<java.io.File> fileComparator37 = entryComparator35.reversed();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive38 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest39 = explodedArchive38.manifest;
        explodedArchive38.recursive = false;
        java.util.jar.Manifest manifest42 = explodedArchive38.manifest;
        java.io.File file43 = explodedArchive38.manifestFile;
        java.io.File file44 = null;
        java.io.File file45 = explodedArchive38.getManifestFile(file44);
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive46 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest47 = explodedArchive46.manifest;
        explodedArchive46.recursive = false;
        java.io.File file50 = null;
        explodedArchive46.root = file50;
        java.io.File file52 = explodedArchive46.root;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive53 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest54 = explodedArchive53.manifest;
        explodedArchive53.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive57 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest58 = explodedArchive57.manifest;
        explodedArchive57.recursive = false;
        java.util.jar.Manifest manifest61 = explodedArchive57.manifest;
        java.io.File file62 = explodedArchive57.manifestFile;
        java.io.File file63 = null;
        java.io.File file64 = explodedArchive57.getManifestFile(file63);
        explodedArchive53.manifestFile = file63;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive66 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest67 = explodedArchive66.manifest;
        explodedArchive66.recursive = false;
        java.util.jar.Manifest manifest70 = explodedArchive66.manifest;
        java.io.File file71 = explodedArchive66.manifestFile;
        java.io.File file72 = null;
        java.io.File file73 = explodedArchive66.getManifestFile(file72);
        explodedArchive53.manifestFile = file73;
        java.io.File file75 = explodedArchive46.getManifestFile(file73);
        int int76 = entryComparator35.compare(file45, file73);
        java.util.Iterator<java.io.File> fileItor77 = fileEntryIterator31.listFiles(file45);
        fileEntry0.file = file45;
        java.io.File file79 = fileEntry0.file;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file18.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file18.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file27.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file27.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file29.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file29.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file45.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file45.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file52);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest61);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file64.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file64.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest70);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file73);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file73.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file73.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file75);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file75.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file75.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor77);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file79);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file79.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file79.toString(), "META-INF/MANIFEST.MF");
    }

    @Test
    public void test0491() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0491");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file1 = explodedArchive0.root;
        java.io.File file2 = explodedArchive0.manifestFile;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive3 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest4 = explodedArchive3.manifest;
        explodedArchive3.recursive = false;
        java.io.File file7 = null;
        explodedArchive3.root = file7;
        java.io.File file9 = explodedArchive3.root;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive10 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest11 = explodedArchive10.manifest;
        explodedArchive10.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive14 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest15 = explodedArchive14.manifest;
        explodedArchive14.recursive = false;
        java.util.jar.Manifest manifest18 = explodedArchive14.manifest;
        java.io.File file19 = explodedArchive14.manifestFile;
        java.io.File file20 = null;
        java.io.File file21 = explodedArchive14.getManifestFile(file20);
        explodedArchive10.manifestFile = file20;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive23 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest24 = explodedArchive23.manifest;
        explodedArchive23.recursive = false;
        java.util.jar.Manifest manifest27 = explodedArchive23.manifest;
        java.io.File file28 = explodedArchive23.manifestFile;
        java.io.File file29 = null;
        java.io.File file30 = explodedArchive23.getManifestFile(file29);
        explodedArchive10.manifestFile = file30;
        java.io.File file32 = explodedArchive3.getManifestFile(file30);
        boolean boolean33 = explodedArchive3.recursive;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntry fileEntry34 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntry();
        java.lang.String str35 = fileEntry34.name;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator36 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file37 = null;
        fileEntryIterator36.current = file37;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive39 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.lang.String str40 = explodedArchive39.toString();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive41 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file42 = explodedArchive41.root;
        java.io.File file43 = null;
        explodedArchive41.manifestFile = file43;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive45 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest46 = explodedArchive45.manifest;
        explodedArchive45.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive49 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest50 = explodedArchive49.manifest;
        explodedArchive49.recursive = false;
        java.util.jar.Manifest manifest53 = explodedArchive49.manifest;
        java.io.File file54 = explodedArchive49.manifestFile;
        java.io.File file55 = null;
        java.io.File file56 = explodedArchive49.getManifestFile(file55);
        explodedArchive45.manifestFile = file55;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive58 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest59 = explodedArchive58.manifest;
        explodedArchive58.recursive = false;
        java.util.jar.Manifest manifest62 = explodedArchive58.manifest;
        java.io.File file63 = explodedArchive58.manifestFile;
        java.io.File file64 = null;
        java.io.File file65 = explodedArchive58.getManifestFile(file64);
        explodedArchive45.manifestFile = file65;
        java.io.File file67 = explodedArchive41.getManifestFile(file65);
        java.io.File file68 = explodedArchive39.getManifestFile(file65);
        fileEntryIterator36.root = file65;
        fileEntry34.file = file65;
        java.io.File file71 = explodedArchive3.getManifestFile(file65);
        java.io.File file72 = explodedArchive0.getManifestFile(file71);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator<org.springframework.boot.loader.archive.Archive.Entry> entryItor73 = explodedArchive0.iterator();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file19);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file21.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file21.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file30.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file30.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file32.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file32.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str40 + "' != '" + "exploded archive" + "'", str40.equals("exploded archive"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file56.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file56.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest62);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file65);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file65.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file65.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file67.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file67.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file68);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file68.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file68.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file71);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file71.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file71.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file72);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file72.getParent(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file72.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
    }

    @Test
    public void test0492() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0492");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file1 = null;
        fileEntryIterator0.current = file1;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive3 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest4 = explodedArchive3.manifest;
        explodedArchive3.recursive = false;
        java.util.jar.Manifest manifest7 = explodedArchive3.manifest;
        java.io.File file8 = explodedArchive3.manifestFile;
        java.io.File file9 = null;
        java.io.File file10 = explodedArchive3.getManifestFile(file9);
        java.util.Iterator<java.io.File> fileItor11 = fileEntryIterator0.listFiles(file10);
        boolean boolean12 = fileEntryIterator0.hasNext();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator13 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator14 = entryComparator13.reversed();
        java.util.Comparator<java.io.File> fileComparator15 = entryComparator13.reversed();
        fileEntryIterator0.entryComparator = fileComparator15;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator17 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file18 = null;
        fileEntryIterator17.current = file18;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive20 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest21 = explodedArchive20.manifest;
        explodedArchive20.recursive = false;
        java.util.jar.Manifest manifest24 = explodedArchive20.manifest;
        java.io.File file25 = explodedArchive20.manifestFile;
        java.io.File file26 = null;
        java.io.File file27 = explodedArchive20.getManifestFile(file26);
        java.util.Iterator<java.io.File> fileItor28 = fileEntryIterator17.listFiles(file27);
        java.util.Comparator<java.io.File> fileComparator29 = fileEntryIterator17.entryComparator;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator30 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file31 = null;
        fileEntryIterator30.current = file31;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive33 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest34 = explodedArchive33.manifest;
        explodedArchive33.recursive = false;
        java.util.jar.Manifest manifest37 = explodedArchive33.manifest;
        java.io.File file38 = explodedArchive33.manifestFile;
        java.io.File file39 = null;
        java.io.File file40 = explodedArchive33.getManifestFile(file39);
        java.util.Iterator<java.io.File> fileItor41 = fileEntryIterator30.listFiles(file40);
        java.io.File file42 = fileEntryIterator30.current;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator43 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file44 = null;
        fileEntryIterator43.current = file44;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive46 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest47 = explodedArchive46.manifest;
        explodedArchive46.recursive = false;
        java.util.jar.Manifest manifest50 = explodedArchive46.manifest;
        java.io.File file51 = explodedArchive46.manifestFile;
        java.io.File file52 = null;
        java.io.File file53 = explodedArchive46.getManifestFile(file52);
        java.util.Iterator<java.io.File> fileItor54 = fileEntryIterator43.listFiles(file53);
        java.io.File file55 = fileEntryIterator43.current;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator56 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file57 = null;
        fileEntryIterator56.current = file57;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive59 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest60 = explodedArchive59.manifest;
        explodedArchive59.recursive = false;
        java.util.jar.Manifest manifest63 = explodedArchive59.manifest;
        java.io.File file64 = explodedArchive59.manifestFile;
        java.io.File file65 = null;
        java.io.File file66 = explodedArchive59.getManifestFile(file65);
        java.util.Iterator<java.io.File> fileItor67 = fileEntryIterator56.listFiles(file66);
        java.util.ArrayDeque<java.util.Iterator<java.io.File>> fileItorQueue68 = new java.util.ArrayDeque<java.util.Iterator<java.io.File>>();
        boolean boolean69 = fileItorQueue68.add(fileItor67);
        fileEntryIterator43.stack = fileItorQueue68;
        fileEntryIterator30.stack = fileItorQueue68;
        fileEntryIterator17.stack = fileItorQueue68;
        fileEntryIterator0.stack = fileItorQueue68;
        java.lang.Class<?> wildcardClass74 = fileEntryIterator0.getClass();
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file27.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file27.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor28);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest37);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file40.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file40.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file42);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest50);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file53);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file53.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file53.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor54);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest60);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest63);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file64);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file66);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file66.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file66.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor67);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(wildcardClass74);
    }

    @Test
    public void test0493() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0493");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file1 = explodedArchive0.root;
        explodedArchive0.recursive = false;
        boolean boolean4 = explodedArchive0.recursive;
        java.io.File file5 = explodedArchive0.root;
        java.util.jar.Manifest manifest6 = null;
        explodedArchive0.manifest = manifest6;
        java.io.File file8 = explodedArchive0.manifestFile;
        // The following exception was thrown during execution in test generation
        try {
            java.util.jar.Manifest manifest9 = explodedArchive0.getManifest();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file8);
    }

    @Test
    public void test0494() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0494");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntry fileEntry0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntry();
        java.io.File file1 = fileEntry0.getFile();
        java.io.File file2 = fileEntry0.getFile();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive3 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file4 = explodedArchive3.root;
        java.io.File file5 = null;
        explodedArchive3.manifestFile = file5;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive7 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest8 = explodedArchive7.manifest;
        explodedArchive7.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive11 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest12 = explodedArchive11.manifest;
        explodedArchive11.recursive = false;
        java.util.jar.Manifest manifest15 = explodedArchive11.manifest;
        java.io.File file16 = explodedArchive11.manifestFile;
        java.io.File file17 = null;
        java.io.File file18 = explodedArchive11.getManifestFile(file17);
        explodedArchive7.manifestFile = file17;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive20 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest21 = explodedArchive20.manifest;
        explodedArchive20.recursive = false;
        java.util.jar.Manifest manifest24 = explodedArchive20.manifest;
        java.io.File file25 = explodedArchive20.manifestFile;
        java.io.File file26 = null;
        java.io.File file27 = explodedArchive20.getManifestFile(file26);
        explodedArchive7.manifestFile = file27;
        java.io.File file29 = explodedArchive3.getManifestFile(file27);
        fileEntry0.file = file29;
        java.io.File file31 = fileEntry0.file;
        fileEntry0.name = "exploded archive";
        java.io.File file34 = fileEntry0.file;
        java.io.File file35 = null;
        fileEntry0.file = file35;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest15);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file18.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file18.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file25);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file27);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file27.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file27.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file29.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file29.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file31);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file31.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file31.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file34.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file34.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
    }

    @Test
    public void test0495() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0495");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file1 = explodedArchive0.root;
        java.io.File file2 = null;
        explodedArchive0.manifestFile = file2;
        java.io.File file4 = explodedArchive0.root;
        boolean boolean5 = explodedArchive0.recursive;
        java.lang.String str6 = explodedArchive0.toString();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator<org.springframework.boot.loader.archive.Archive.Entry> entryItor7 = explodedArchive0.iterator();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str6 + "' != '" + "exploded archive" + "'", str6.equals("exploded archive"));
    }

    @Test
    public void test0496() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0496");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        boolean boolean1 = fileEntryIterator0.hasNext();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator2 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator3 = entryComparator2.reversed();
        java.util.Comparator<java.io.File> fileComparator4 = fileComparator3.reversed();
        fileEntryIterator0.entryComparator = fileComparator4;
        java.util.Comparator<java.io.File> fileComparator6 = fileEntryIterator0.entryComparator;
        java.io.File file7 = fileEntryIterator0.current;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator8 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        boolean boolean9 = fileEntryIterator8.hasNext();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator10 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator11 = entryComparator10.reversed();
        java.util.Comparator<java.io.File> fileComparator12 = fileComparator11.reversed();
        fileEntryIterator8.entryComparator = fileComparator12;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator14 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        boolean boolean15 = fileEntryIterator14.hasNext();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator16 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator17 = entryComparator16.reversed();
        java.util.Comparator<java.io.File> fileComparator18 = fileComparator17.reversed();
        fileEntryIterator14.entryComparator = fileComparator18;
        java.util.Comparator<java.io.File> fileComparator20 = fileEntryIterator14.entryComparator;
        java.util.Comparator<java.io.File> fileComparator21 = fileComparator12.thenComparing(fileComparator20);
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator22 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file23 = null;
        fileEntryIterator22.current = file23;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive25 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest26 = explodedArchive25.manifest;
        explodedArchive25.recursive = false;
        java.util.jar.Manifest manifest29 = explodedArchive25.manifest;
        java.io.File file30 = explodedArchive25.manifestFile;
        java.io.File file31 = null;
        java.io.File file32 = explodedArchive25.getManifestFile(file31);
        java.util.Iterator<java.io.File> fileItor33 = fileEntryIterator22.listFiles(file32);
        java.io.File file34 = fileEntryIterator22.root;
        java.io.File file35 = fileEntryIterator22.root;
        java.io.File file36 = fileEntryIterator22.current;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator37 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        boolean boolean38 = fileEntryIterator37.hasNext();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator39 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator40 = entryComparator39.reversed();
        java.util.Comparator<java.io.File> fileComparator41 = fileComparator40.reversed();
        fileEntryIterator37.entryComparator = fileComparator41;
        java.util.Comparator<java.io.File> fileComparator43 = fileEntryIterator37.entryComparator;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator44 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator45 = entryComparator44.reversed();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator46 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator47 = entryComparator46.reversed();
        java.util.Comparator<java.io.File> fileComparator48 = entryComparator44.thenComparing(fileComparator47);
        java.util.Comparator<java.io.File> fileComparator49 = fileComparator43.thenComparing(fileComparator47);
        fileEntryIterator22.entryComparator = fileComparator43;
        java.util.Comparator<java.io.File> fileComparator51 = fileComparator43.reversed();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator52 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        boolean boolean53 = fileEntryIterator52.hasNext();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator54 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator55 = entryComparator54.reversed();
        java.util.Comparator<java.io.File> fileComparator56 = fileComparator55.reversed();
        fileEntryIterator52.entryComparator = fileComparator56;
        java.util.Comparator<java.io.File> fileComparator58 = fileComparator43.thenComparing(fileComparator56);
        java.util.Comparator<java.io.File> fileComparator59 = fileComparator20.thenComparing(fileComparator58);
        java.util.Comparator<java.io.File> fileComparator60 = fileComparator59.reversed();
        fileEntryIterator0.entryComparator = fileComparator59;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator3);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator21);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file32.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file32.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor33);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file34);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file36);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator40);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator45);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator47);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator48);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator49);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator51);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator55);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator56);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator58);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator59);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator60);
    }

    @Test
    public void test0497() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0497");
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive0 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file1 = explodedArchive0.root;
        java.io.File file2 = null;
        explodedArchive0.manifestFile = file2;
        java.io.File file4 = explodedArchive0.root;
        java.util.jar.Manifest manifest5 = null;
        explodedArchive0.manifest = manifest5;
        java.io.File file7 = explodedArchive0.manifestFile;
        org.springframework.boot.loader.archive.Archive.EntryFilter entryFilter8 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<org.springframework.boot.loader.archive.Archive> archiveList9 = explodedArchive0.getNestedArchives(entryFilter8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file1);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file7);
    }

    @Test
    public void test0498() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0498");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        java.io.File file1 = null;
        fileEntryIterator0.current = file1;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive3 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest4 = explodedArchive3.manifest;
        explodedArchive3.recursive = false;
        java.util.jar.Manifest manifest7 = explodedArchive3.manifest;
        java.io.File file8 = explodedArchive3.manifestFile;
        java.io.File file9 = null;
        java.io.File file10 = explodedArchive3.getManifestFile(file9);
        java.util.Iterator<java.io.File> fileItor11 = fileEntryIterator0.listFiles(file10);
        boolean boolean12 = fileEntryIterator0.hasNext();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator13 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator14 = entryComparator13.reversed();
        java.util.Comparator<java.io.File> fileComparator15 = entryComparator13.reversed();
        fileEntryIterator0.entryComparator = fileComparator15;
        fileEntryIterator0.recursive = true;
        // The following exception was thrown during execution in test generation
        try {
            org.springframework.boot.loader.archive.Archive.Entry entry19 = fileEntryIterator0.next();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
        // Expected exception.
        }
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest7);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file10.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileItor11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator15);
    }

    @Test
    public void test0499() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0499");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        boolean boolean1 = fileEntryIterator0.hasNext();
        java.io.File file2 = fileEntryIterator0.root;
        boolean boolean3 = fileEntryIterator0.hasNext();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator4 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator5 = entryComparator4.reversed();
        java.util.Comparator<java.io.File> fileComparator6 = entryComparator4.reversed();
        fileEntryIterator0.entryComparator = entryComparator4;
        java.io.File file8 = fileEntryIterator0.current;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntry fileEntry9 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntry();
        java.io.File file10 = fileEntry9.file;
        java.lang.String str11 = fileEntry9.name;
        java.io.File file12 = fileEntry9.file;
        java.io.File file13 = fileEntry9.file;
        java.lang.String str14 = fileEntry9.name;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive15 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.lang.String str16 = explodedArchive15.toString();
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive17 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.io.File file18 = explodedArchive17.root;
        java.io.File file19 = null;
        explodedArchive17.manifestFile = file19;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive21 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest22 = explodedArchive21.manifest;
        explodedArchive21.recursive = false;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive25 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest26 = explodedArchive25.manifest;
        explodedArchive25.recursive = false;
        java.util.jar.Manifest manifest29 = explodedArchive25.manifest;
        java.io.File file30 = explodedArchive25.manifestFile;
        java.io.File file31 = null;
        java.io.File file32 = explodedArchive25.getManifestFile(file31);
        explodedArchive21.manifestFile = file31;
        org.springframework.boot.loader.archive.ExplodedArchive explodedArchive34 = new org.springframework.boot.loader.archive.ExplodedArchive();
        java.util.jar.Manifest manifest35 = explodedArchive34.manifest;
        explodedArchive34.recursive = false;
        java.util.jar.Manifest manifest38 = explodedArchive34.manifest;
        java.io.File file39 = explodedArchive34.manifestFile;
        java.io.File file40 = null;
        java.io.File file41 = explodedArchive34.getManifestFile(file40);
        explodedArchive21.manifestFile = file41;
        java.io.File file43 = explodedArchive17.getManifestFile(file41);
        java.io.File file44 = explodedArchive15.getManifestFile(file41);
        fileEntry9.file = file41;
        java.io.File file46 = fileEntry9.getFile();
        fileEntryIterator0.root = file46;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator6);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file8);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str11);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file13);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(str14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + str16 + "' != '" + "exploded archive" + "'", str16.equals("exploded archive"));
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest26);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest29);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file30);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file32);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file32.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file32.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest35);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(manifest38);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file39);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file41);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file41.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file41.toString(), "META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file43);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file43.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file43.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file44);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file44.getParent(), "META-INF/MANIFEST.MF/META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file44.toString(), "META-INF/MANIFEST.MF/META-INF/MANIFEST.MF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(file46);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file46.getParent(), "META-INF");
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertEquals(file46.toString(), "META-INF/MANIFEST.MF");
    }

    @Test
    public void test0500() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0500");
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator0 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        boolean boolean1 = fileEntryIterator0.hasNext();
        java.io.File file2 = fileEntryIterator0.root;
        boolean boolean3 = fileEntryIterator0.hasNext();
        java.util.Comparator<java.io.File> fileComparator4 = fileEntryIterator0.entryComparator;
        java.io.File file5 = fileEntryIterator0.current;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator fileEntryIterator6 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator();
        boolean boolean7 = fileEntryIterator6.hasNext();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator8 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator9 = entryComparator8.reversed();
        java.util.Comparator<java.io.File> fileComparator10 = fileComparator9.reversed();
        fileEntryIterator6.entryComparator = fileComparator10;
        java.util.Comparator<java.io.File> fileComparator12 = fileEntryIterator6.entryComparator;
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator13 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator14 = entryComparator13.reversed();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator15 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator16 = entryComparator15.reversed();
        java.util.Comparator<java.io.File> fileComparator17 = entryComparator13.thenComparing(fileComparator16);
        java.util.Comparator<java.io.File> fileComparator18 = fileComparator12.thenComparing(fileComparator16);
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator19 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator20 = entryComparator19.reversed();
        org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator entryComparator21 = new org.springframework.boot.loader.archive.ExplodedArchive.FileEntryIterator.EntryComparator();
        java.util.Comparator<java.io.File> fileComparator22 = entryComparator21.reversed();
        java.util.Comparator<java.io.File> fileComparator23 = entryComparator19.thenComparing(fileComparator22);
        java.util.Comparator<java.io.File> fileComparator24 = fileComparator18.thenComparing((java.util.Comparator<java.io.File>) entryComparator19);
        fileEntryIterator0.entryComparator = fileComparator24;
        boolean boolean26 = fileEntryIterator0.recursive;
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file2);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator4);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNull(file5);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator9);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator10);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator12);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator14);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator16);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator17);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator18);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator20);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator22);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator23);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertNotNull(fileComparator24);
        // Regression assertion (captures the current behavior of the code)
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }
}
