/*
 * This file was automatically generated by EvoSuite
 * Thu Apr 30 00:11:43 GMT 2020
 */

package org.springframework.boot.loader.archive;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.net.URI;
import java.net.URL;
import java.nio.file.Path;
import java.util.ArrayDeque;
import java.util.Comparator;
import java.util.Deque;
import java.util.Iterator;
import java.util.List;
import java.util.NoSuchElementException;
import java.util.Spliterator;
import java.util.function.Consumer;
import java.util.function.ToIntFunction;
import java.util.function.ToLongFunction;
import java.util.jar.Manifest;
import java.util.zip.ZipEntry;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import org.springframework.boot.loader.archive.Archive;
import org.springframework.boot.loader.archive.ExplodedArchive;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ExplodedArchive_ESTest extends ExplodedArchive_ESTest_scaffolding {

  @Test(timeout = 11000)
  public void test00()  throws Throwable  {
      String string0 = "";
      MockFile mockFile0 = new MockFile(string0, string0);
      ExplodedArchive.FileEntry explodedArchive_FileEntry0 = new ExplodedArchive.FileEntry(string0, mockFile0);
      ExplodedArchive explodedArchive0 = new ExplodedArchive();
      explodedArchive0.root = (File) mockFile0;
      boolean boolean0 = true;
      ExplodedArchive.FileEntryIterator explodedArchive_FileEntryIterator0 = new ExplodedArchive.FileEntryIterator(explodedArchive_FileEntry0.file, boolean0);
      Archive.Entry archive_Entry0 = explodedArchive_FileEntryIterator0.next();
      Archive.EntryFilter archive_EntryFilter0 = mock(Archive.EntryFilter.class, new ViolatedAssumptionAnswer());
      doReturn(explodedArchive_FileEntryIterator0.recursive, explodedArchive_FileEntryIterator0.recursive, explodedArchive_FileEntryIterator0.recursive).when(archive_EntryFilter0).matches(any(org.springframework.boot.loader.archive.Archive.Entry.class));
      List<Archive> list0 = explodedArchive0.getNestedArchives(archive_EntryFilter0);
  }

  @Test(timeout = 11000)
  public void test01()  throws Throwable  {
      String string0 = ">";
      MockFile mockFile0 = new MockFile(string0);
      ExplodedArchive.FileEntry explodedArchive_FileEntry0 = new ExplodedArchive.FileEntry(string0, mockFile0);
      ExplodedArchive explodedArchive0 = new ExplodedArchive();
      String string1 = explodedArchive0.toString();
      ExplodedArchive explodedArchive1 = null;
      try {
        explodedArchive1 = new ExplodedArchive(explodedArchive_FileEntry0.file);
      } catch(IllegalArgumentException e) {
         //
         // Invalid source folder >
         //
         verifyException("org.springframework.boot.loader.archive.ExplodedArchive", e);
      }
  }

  @Test(timeout = 11000)
  public void test02()  throws Throwable  {
      String string0 = "}Y";
      MockFile mockFile0 = new MockFile(string0);
      String string1 = mockFile0.getAbsolutePath();
      URI uRI0 = mockFile0.toURI();
      boolean boolean0 = false;
      ExplodedArchive.FileEntryIterator explodedArchive_FileEntryIterator0 = new ExplodedArchive.FileEntryIterator(mockFile0, boolean0);
      boolean boolean1 = mockFile0.createNewFile();
      ExplodedArchive.FileEntry explodedArchive_FileEntry0 = new ExplodedArchive.FileEntry(string1, explodedArchive_FileEntryIterator0.root);
      Iterator<File> iterator0 = explodedArchive_FileEntryIterator0.listFiles(mockFile0);
      explodedArchive_FileEntryIterator0.current = (File) mockFile0;
      ExplodedArchive explodedArchive0 = new ExplodedArchive();
      try { 
        explodedArchive0.getNestedArchive(explodedArchive_FileEntry0);
      } catch(FileNotFoundException e) {
         //
         // }Y (Arquivo ou diret\u00F3rio n\u00E3o encontrado)
         //
         verifyException("java.util.zip.ZipFile", e);
      }
  }

  @Test(timeout = 11000)
  public void test03()  throws Throwable  {
      ExplodedArchive.FileEntry explodedArchive_FileEntry0 = new ExplodedArchive.FileEntry();
      String string0 = explodedArchive_FileEntry0.getName();
  }

  @Test(timeout = 11000)
  public void test04()  throws Throwable  {
      ExplodedArchive.FileEntryIterator explodedArchive_FileEntryIterator0 = new ExplodedArchive.FileEntryIterator();
      // Undeclared exception!
      try { 
        explodedArchive_FileEntryIterator0.remove();
      } catch(UnsupportedOperationException e) {
         //
         // remove
         //
         verifyException("org.springframework.boot.loader.archive.ExplodedArchive$FileEntryIterator", e);
      }
  }

  @Test(timeout = 11000)
  public void test05()  throws Throwable  {
      ExplodedArchive.FileEntry explodedArchive_FileEntry0 = new ExplodedArchive.FileEntry();
      // Undeclared exception!
      try { 
        explodedArchive_FileEntry0.isDirectory();
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springframework.boot.loader.archive.ExplodedArchive$FileEntry", e);
      }
  }

  @Test(timeout = 11000)
  public void test06()  throws Throwable  {
      ExplodedArchive explodedArchive0 = new ExplodedArchive();
      String string0 = "2v\\`VAGaw!<";
      File file0 = MockFile.createTempFile(string0, string0);
      explodedArchive0.manifestFile = file0;
      Manifest manifest0 = explodedArchive0.getManifest();
      ExplodedArchive.FileEntryIterator explodedArchive_FileEntryIterator0 = new ExplodedArchive.FileEntryIterator();
      // Undeclared exception!
      try { 
        explodedArchive_FileEntryIterator0.next();
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springframework.boot.loader.archive.ExplodedArchive$FileEntryIterator", e);
      }
  }

  @Test(timeout = 11000)
  public void test07()  throws Throwable  {
      ExplodedArchive explodedArchive0 = new ExplodedArchive();
      String string0 = "2v\\`VAGaw!<";
      MockFile mockFile0 = new MockFile(string0);
      explodedArchive0.manifestFile = (File) mockFile0;
      Manifest manifest0 = explodedArchive0.getManifest();
  }

  @Test(timeout = 11000)
  public void test08()  throws Throwable  {
      ExplodedArchive.FileEntryIterator explodedArchive_FileEntryIterator0 = new ExplodedArchive.FileEntryIterator();
      String string0 = "";
      String string1 = "1b$";
      String string2 = "W[T\"kALI'-";
      File file0 = MockFile.createTempFile(string1, string2);
      explodedArchive_FileEntryIterator0.current = file0;
      explodedArchive_FileEntryIterator0.root = file0;
      ExplodedArchive explodedArchive0 = null;
      try {
        explodedArchive0 = new ExplodedArchive(explodedArchive_FileEntryIterator0.root);
      } catch(IllegalArgumentException e) {
         //
         // Invalid source folder /tmp/1b$0W[T\"kALI'-
         //
         verifyException("org.springframework.boot.loader.archive.ExplodedArchive", e);
      }
  }

  @Test(timeout = 11000)
  public void test09()  throws Throwable  {
      ExplodedArchive.FileEntryIterator.EntryComparator explodedArchive_FileEntryIterator_EntryComparator0 = new ExplodedArchive.FileEntryIterator.EntryComparator();
      ExplodedArchive.FileEntryIterator explodedArchive_FileEntryIterator0 = new ExplodedArchive.FileEntryIterator();
      String string0 = "org.springframework.boot.loader.data.RandomAccessData$ResourceAccess";
      ExplodedArchive.FileEntry explodedArchive_FileEntry0 = new ExplodedArchive.FileEntry(string0, explodedArchive_FileEntryIterator0.root);
      String string1 = explodedArchive_FileEntry0.getName();
  }

  @Test(timeout = 11000)
  public void test10()  throws Throwable  {
      String string0 = "";
      MockFile mockFile0 = new MockFile(string0);
      ExplodedArchive explodedArchive0 = new ExplodedArchive(mockFile0);
      Iterator<Archive.Entry> iterator0 = explodedArchive0.iterator();
  }

  @Test(timeout = 11000)
  public void test11()  throws Throwable  {
      String string0 = "?_Jrz:$jeT7nE=fF`Y";
      File file0 = MockFile.createTempFile(string0, string0);
      boolean boolean0 = false;
      ExplodedArchive explodedArchive0 = null;
      try {
        explodedArchive0 = new ExplodedArchive(file0, boolean0);
      } catch(IllegalArgumentException e) {
         //
         // Invalid source folder /tmp/?_Jrz:$jeT7nE=fF`Y0?_Jrz:$jeT7nE=fF`Y
         //
         verifyException("org.springframework.boot.loader.archive.ExplodedArchive", e);
      }
  }

  @Test(timeout = 11000)
  public void test12()  throws Throwable  {
      ExplodedArchive.FileEntryIterator explodedArchive_FileEntryIterator0 = new ExplodedArchive.FileEntryIterator();
      boolean boolean0 = false;
      explodedArchive_FileEntryIterator0.recursive = boolean0;
      // Undeclared exception!
      try { 
        explodedArchive_FileEntryIterator0.next();
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springframework.boot.loader.archive.ExplodedArchive$FileEntryIterator", e);
      }
  }

  @Test(timeout = 11000)
  public void test13()  throws Throwable  {
      String string0 = "";
      MockFile mockFile0 = new MockFile(string0, string0);
      ExplodedArchive.FileEntry explodedArchive_FileEntry0 = new ExplodedArchive.FileEntry(string0, mockFile0);
      ExplodedArchive explodedArchive0 = new ExplodedArchive();
      String string1 = "org.springframework.boot.loader.archive.ExplodedArchive$FileEntryIterator$EntryComparator";
      explodedArchive_FileEntry0.name = string1;
      String string2 = "";
      explodedArchive_FileEntry0.name = string2;
      String string3 = explodedArchive0.toString();
      File file0 = explodedArchive0.getManifestFile(explodedArchive_FileEntry0.file);
      boolean boolean0 = false;
      ExplodedArchive.FileEntryIterator explodedArchive_FileEntryIterator0 = new ExplodedArchive.FileEntryIterator(explodedArchive_FileEntry0.file, boolean0);
      Archive.Entry archive_Entry0 = explodedArchive_FileEntryIterator0.next();
      Archive archive0 = explodedArchive0.getNestedArchive(explodedArchive_FileEntry0);
      Archive archive1 = explodedArchive0.getNestedArchive(archive_Entry0);
  }

  @Test(timeout = 11000)
  public void test14()  throws Throwable  {
      ExplodedArchive.FileEntryIterator explodedArchive_FileEntryIterator0 = new ExplodedArchive.FileEntryIterator();
      String string0 = "";
      String string1 = "1b$";
      String string2 = "U%T\"kTALI'A";
      File file0 = MockFile.createTempFile(string1, string2);
      explodedArchive_FileEntryIterator0.current = file0;
      MockFile mockFile0 = new MockFile(explodedArchive_FileEntryIterator0.current, string0);
      explodedArchive_FileEntryIterator0.root = (File) mockFile0;
      explodedArchive_FileEntryIterator0.root = (File) mockFile0;
      Deque<Iterator<File>> deque0 = explodedArchive_FileEntryIterator0.stack;
      explodedArchive_FileEntryIterator0.stack = deque0;
      boolean boolean0 = true;
      explodedArchive_FileEntryIterator0.recursive = boolean0;
      Archive.Entry archive_Entry0 = explodedArchive_FileEntryIterator0.next();
      ExplodedArchive explodedArchive0 = null;
      try {
        explodedArchive0 = new ExplodedArchive(explodedArchive_FileEntryIterator0.root);
      } catch(IllegalArgumentException e) {
         //
         // Invalid source folder /tmp/1b$0U%T\"kTALI'A
         //
         verifyException("org.springframework.boot.loader.archive.ExplodedArchive", e);
      }
  }

  @Test(timeout = 11000)
  public void test15()  throws Throwable  {
      String string0 = "aX$L(W=6Ze3&gkM,h";
      MockFile mockFile0 = new MockFile(string0);
      boolean boolean0 = false;
      File file0 = mockFile0.getAbsoluteFile();
      ExplodedArchive.FileEntryIterator explodedArchive_FileEntryIterator0 = new ExplodedArchive.FileEntryIterator(mockFile0, boolean0);
      boolean boolean1 = explodedArchive_FileEntryIterator0.hasNext();
      // Undeclared exception!
      try { 
        explodedArchive_FileEntryIterator0.remove();
      } catch(UnsupportedOperationException e) {
         //
         // remove
         //
         verifyException("org.springframework.boot.loader.archive.ExplodedArchive$FileEntryIterator", e);
      }
  }

  @Test(timeout = 11000)
  public void test16()  throws Throwable  {
      ExplodedArchive.FileEntryIterator explodedArchive_FileEntryIterator0 = new ExplodedArchive.FileEntryIterator();
      ExplodedArchive.FileEntry explodedArchive_FileEntry0 = new ExplodedArchive.FileEntry();
      explodedArchive_FileEntry0.file = explodedArchive_FileEntryIterator0.root;
      File file0 = explodedArchive_FileEntry0.getFile();
      boolean boolean0 = true;
      ExplodedArchive.FileEntryIterator explodedArchive_FileEntryIterator1 = null;
      try {
        explodedArchive_FileEntryIterator1 = new ExplodedArchive.FileEntryIterator(explodedArchive_FileEntry0.file, boolean0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springframework.boot.loader.archive.ExplodedArchive$FileEntryIterator", e);
      }
  }

  @Test(timeout = 11000)
  public void test17()  throws Throwable  {
      ExplodedArchive explodedArchive0 = new ExplodedArchive();
      // Undeclared exception!
      try { 
        explodedArchive0.getUrl();
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springframework.boot.loader.archive.ExplodedArchive", e);
      }
  }

  @Test(timeout = 11000)
  public void test18()  throws Throwable  {
      String string0 = "?,1|,";
      MockFile mockFile0 = new MockFile(string0, string0);
      long long0 = 3322L;
      boolean boolean0 = mockFile0.setLastModified(long0);
      MockFile mockFile1 = new MockFile(mockFile0, string0);
      boolean boolean1 = true;
      ExplodedArchive explodedArchive0 = null;
      try {
        explodedArchive0 = new ExplodedArchive(mockFile1, boolean1);
      } catch(IllegalArgumentException e) {
         //
         // Invalid source folder /server/study-execution/new-nimrod/nimrod-hunoroutput-test-dest/spring-boot/af20dc6cc45c032573413c401f9f73aa75371744/evosuite_2/?,1|,/?,1|,/?,1|,
         //
         verifyException("org.springframework.boot.loader.archive.ExplodedArchive", e);
      }
  }

  @Test(timeout = 11000)
  public void test19()  throws Throwable  {
      ExplodedArchive.FileEntry explodedArchive_FileEntry0 = new ExplodedArchive.FileEntry();
      String string0 = "[<F`i[dHH}CYU";
      String string1 = null;
      explodedArchive_FileEntry0.name = string1;
      explodedArchive_FileEntry0.name = string0;
      explodedArchive_FileEntry0.name = string0;
      String string2 = explodedArchive_FileEntry0.getName();
      String string3 = explodedArchive_FileEntry0.getName();
      boolean boolean0 = false;
      ExplodedArchive explodedArchive0 = null;
      try {
        explodedArchive0 = new ExplodedArchive(explodedArchive_FileEntry0.file, boolean0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springframework.boot.loader.archive.ExplodedArchive", e);
      }
  }

  @Test(timeout = 11000)
  public void test20()  throws Throwable  {
      String string0 = "";
      MockFile mockFile0 = new MockFile(string0, string0);
      boolean boolean0 = false;
      ExplodedArchive explodedArchive0 = new ExplodedArchive(mockFile0, boolean0);
      String string1 = explodedArchive0.toString();
      Manifest manifest0 = explodedArchive0.getManifest();
      ExplodedArchive.FileEntryIterator explodedArchive_FileEntryIterator0 = new ExplodedArchive.FileEntryIterator();
      // Undeclared exception!
      try { 
        explodedArchive_FileEntryIterator0.remove();
      } catch(UnsupportedOperationException e) {
         //
         // remove
         //
         verifyException("org.springframework.boot.loader.archive.ExplodedArchive$FileEntryIterator", e);
      }
  }

  @Test(timeout = 11000)
  public void test21()  throws Throwable  {
      ExplodedArchive.FileEntryIterator explodedArchive_FileEntryIterator0 = new ExplodedArchive.FileEntryIterator();
      File file0 = explodedArchive_FileEntryIterator0.poll();
      File file1 = null;
      explodedArchive_FileEntryIterator0.root = file1;
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      explodedArchive_FileEntryIterator0.forEachRemaining(consumer0);
      String string0 = "O3R,ri$_m";
      ExplodedArchive.FileEntry explodedArchive_FileEntry0 = new ExplodedArchive.FileEntry(string0, explodedArchive_FileEntryIterator0.current);
      ExplodedArchive explodedArchive0 = new ExplodedArchive();
      File file2 = explodedArchive_FileEntryIterator0.poll();
      Archive.EntryFilter archive_EntryFilter0 = mock(Archive.EntryFilter.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        explodedArchive0.getNestedArchives(archive_EntryFilter0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springframework.boot.loader.archive.ExplodedArchive$FileEntryIterator", e);
      }
  }

  @Test(timeout = 11000)
  public void test22()  throws Throwable  {
      ExplodedArchive.FileEntryIterator explodedArchive_FileEntryIterator0 = new ExplodedArchive.FileEntryIterator();
      String string0 = "META-INF/MANIFEST.MF";
      MockFile mockFile0 = new MockFile(string0, string0);
      Iterator<File> iterator0 = explodedArchive_FileEntryIterator0.listFiles(mockFile0);
  }

  @Test(timeout = 11000)
  public void test23()  throws Throwable  {
      String string0 = "!/";
      MockFile mockFile0 = new MockFile(string0, string0);
      boolean boolean0 = mockFile0.mkdirs();
      URI uRI0 = mockFile0.toURI();
      File file0 = mockFile0.getCanonicalFile();
      ExplodedArchive explodedArchive0 = new ExplodedArchive(mockFile0);
      URL uRL0 = explodedArchive0.getUrl();
      ExplodedArchive.FileEntry explodedArchive_FileEntry0 = new ExplodedArchive.FileEntry();
      String string1 = "Invalid source folder ";
      explodedArchive_FileEntry0.name = string1;
      File file1 = explodedArchive_FileEntry0.getFile();
      Iterator<Archive.Entry> iterator0 = explodedArchive0.iterator();
      ExplodedArchive.FileEntryIterator explodedArchive_FileEntryIterator0 = new ExplodedArchive.FileEntryIterator();
      // Undeclared exception!
      try { 
        explodedArchive_FileEntryIterator0.remove();
      } catch(UnsupportedOperationException e) {
         //
         // remove
         //
         verifyException("org.springframework.boot.loader.archive.ExplodedArchive$FileEntryIterator", e);
      }
  }

  @Test(timeout = 11000)
  public void test24()  throws Throwable  {
      File file0 = null;
      ExplodedArchive explodedArchive0 = null;
      try {
        explodedArchive0 = new ExplodedArchive(file0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springframework.boot.loader.archive.ExplodedArchive", e);
      }
  }

  @Test(timeout = 11000)
  public void test25()  throws Throwable  {
      String string0 = "file";
      File file0 = MockFile.createTempFile(string0, string0);
      boolean boolean0 = false;
      ExplodedArchive.FileEntryIterator explodedArchive_FileEntryIterator0 = new ExplodedArchive.FileEntryIterator(file0, boolean0);
      ExplodedArchive.FileEntryIterator explodedArchive_FileEntryIterator1 = new ExplodedArchive.FileEntryIterator();
      ExplodedArchive explodedArchive0 = new ExplodedArchive();
      explodedArchive_FileEntryIterator0.recursive = explodedArchive_FileEntryIterator1.recursive;
      // Undeclared exception!
      try { 
        explodedArchive0.iterator();
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springframework.boot.loader.archive.ExplodedArchive$FileEntryIterator", e);
      }
  }

  @Test(timeout = 11000)
  public void test26()  throws Throwable  {
      ExplodedArchive explodedArchive0 = new ExplodedArchive();
      Archive.EntryFilter archive_EntryFilter0 = null;
      ExplodedArchive.FileEntryIterator explodedArchive_FileEntryIterator0 = new ExplodedArchive.FileEntryIterator();
      File file0 = explodedArchive_FileEntryIterator0.poll();
      // Undeclared exception!
      try { 
        explodedArchive0.getNestedArchives(archive_EntryFilter0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springframework.boot.loader.archive.ExplodedArchive$FileEntryIterator", e);
      }
  }

  @Test(timeout = 11000)
  public void test27()  throws Throwable  {
      ExplodedArchive explodedArchive0 = new ExplodedArchive();
      // Undeclared exception!
      try { 
        explodedArchive0.getManifest();
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springframework.boot.loader.archive.ExplodedArchive", e);
      }
  }

  @Test(timeout = 11000)
  public void test28()  throws Throwable  {
      ExplodedArchive explodedArchive0 = new ExplodedArchive();
      String string0 = "a:h#1";
      String string1 = "<*Vu]noE";
      MockFile mockFile0 = new MockFile(explodedArchive0.root, string1);
      explodedArchive0.root = (File) mockFile0;
      File file0 = MockFile.createTempFile(string0, string0);
      explodedArchive0.manifestFile = file0;
      Iterator<Archive.Entry> iterator0 = explodedArchive0.iterator();
      Manifest manifest0 = explodedArchive0.getManifest();
      ExplodedArchive.FileEntryIterator explodedArchive_FileEntryIterator0 = new ExplodedArchive.FileEntryIterator(explodedArchive0.manifestFile, explodedArchive0.recursive);
      File file1 = explodedArchive_FileEntryIterator0.poll();
      Iterator<File> iterator1 = explodedArchive_FileEntryIterator0.listFiles(explodedArchive0.manifestFile);
      int int0 = 0;
      ArrayDeque<Iterator<File>> arrayDeque0 = new ArrayDeque<Iterator<File>>(int0);
      explodedArchive_FileEntryIterator0.stack = (Deque<Iterator<File>>) arrayDeque0;
      // Undeclared exception!
      try { 
        explodedArchive_FileEntryIterator0.remove();
      } catch(UnsupportedOperationException e) {
         //
         // remove
         //
         verifyException("org.springframework.boot.loader.archive.ExplodedArchive$FileEntryIterator", e);
      }
  }

  @Test(timeout = 11000)
  public void test29()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      boolean boolean0 = mockFile0.mkdirs();
      File file0 = mockFile0.getAbsoluteFile();
      boolean boolean1 = false;
      ExplodedArchive explodedArchive0 = new ExplodedArchive(mockFile0, boolean1);
      Archive.EntryFilter archive_EntryFilter0 = mock(Archive.EntryFilter.class, new ViolatedAssumptionAnswer());
      List<Archive> list0 = explodedArchive0.getNestedArchives(archive_EntryFilter0);
      ExplodedArchive.FileEntryIterator explodedArchive_FileEntryIterator0 = new ExplodedArchive.FileEntryIterator(explodedArchive0.root, boolean1);
      File file1 = explodedArchive_FileEntryIterator0.poll();
      String string0 = "^";
      MockFile mockFile1 = new MockFile(file1, string0);
      Iterator<File> iterator0 = explodedArchive_FileEntryIterator0.listFiles(mockFile1);
  }

  @Test(timeout = 11000)
  public void test30()  throws Throwable  {
      String string0 = "0\"@@ep4IT";
      String string1 = "'-bm(l;.Q=?%";
      String string2 = "";
      MockFile mockFile0 = new MockFile(string1, string2);
      ExplodedArchive.FileEntry explodedArchive_FileEntry0 = new ExplodedArchive.FileEntry(string0, mockFile0);
      boolean boolean0 = explodedArchive_FileEntry0.isDirectory();
  }

  @Test(timeout = 11000)
  public void test31()  throws Throwable  {
      ExplodedArchive explodedArchive0 = new ExplodedArchive();
      Archive.Entry archive_Entry0 = null;
      // Undeclared exception!
      try { 
        explodedArchive0.getNestedArchive(archive_Entry0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springframework.boot.loader.archive.ExplodedArchive", e);
      }
  }

  @Test(timeout = 11000)
  public void test32()  throws Throwable  {
      ExplodedArchive.FileEntry explodedArchive_FileEntry0 = new ExplodedArchive.FileEntry();
      String string0 = "Vq0o!C\\;5K6i *`DX";
      explodedArchive_FileEntry0.name = string0;
      MockFile mockFile0 = new MockFile(explodedArchive_FileEntry0.file, explodedArchive_FileEntry0.name);
      ExplodedArchive explodedArchive0 = new ExplodedArchive();
      String string1 = explodedArchive0.toString();
      // Undeclared exception!
      try { 
        explodedArchive0.getNestedArchive(explodedArchive_FileEntry0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springframework.boot.loader.archive.ExplodedArchive", e);
      }
  }

  @Test(timeout = 11000)
  public void test33()  throws Throwable  {
      ExplodedArchive.FileEntryIterator explodedArchive_FileEntryIterator0 = new ExplodedArchive.FileEntryIterator();
      ExplodedArchive.FileEntryIterator.EntryComparator explodedArchive_FileEntryIterator_EntryComparator0 = new ExplodedArchive.FileEntryIterator.EntryComparator();
      ToIntFunction<Object> toIntFunction0 = (ToIntFunction<Object>) mock(ToIntFunction.class, new ViolatedAssumptionAnswer());
      Comparator<File> comparator0 = explodedArchive_FileEntryIterator_EntryComparator0.thenComparingInt(toIntFunction0);
      Comparator<File> comparator1 = explodedArchive_FileEntryIterator_EntryComparator0.reversed();
      explodedArchive_FileEntryIterator0.entryComparator = (Comparator<File>) explodedArchive_FileEntryIterator_EntryComparator0;
      Comparator<Comparable<Object>> comparator2 = Comparator.naturalOrder();
      explodedArchive_FileEntryIterator0.entryComparator = comparator1;
      String string0 = "{an#KNb";
      MockFile mockFile0 = new MockFile(string0);
      Iterator<File> iterator0 = explodedArchive_FileEntryIterator0.listFiles(mockFile0);
      ExplodedArchive explodedArchive0 = new ExplodedArchive();
      ExplodedArchive.FileEntry explodedArchive_FileEntry0 = new ExplodedArchive.FileEntry();
      explodedArchive_FileEntry0.file = explodedArchive_FileEntryIterator0.current;
      // Undeclared exception!
      try { 
        explodedArchive0.getNestedArchive(explodedArchive_FileEntry0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springframework.boot.loader.archive.ExplodedArchive", e);
      }
  }

  @Test(timeout = 11000)
  public void test34()  throws Throwable  {
      ExplodedArchive.FileEntryIterator explodedArchive_FileEntryIterator0 = new ExplodedArchive.FileEntryIterator();
      String string0 = "";
      MockFile mockFile0 = new MockFile(explodedArchive_FileEntryIterator0.root, string0);
      URL uRL0 = mockFile0.toURL();
      explodedArchive_FileEntryIterator0.current = (File) mockFile0;
      boolean boolean0 = explodedArchive_FileEntryIterator0.hasNext();
      File file0 = explodedArchive_FileEntryIterator0.poll();
      String string1 = "y]";
      ExplodedArchive.FileEntry explodedArchive_FileEntry0 = new ExplodedArchive.FileEntry(string1, explodedArchive_FileEntryIterator0.current);
      boolean boolean1 = explodedArchive_FileEntry0.isDirectory();
      ExplodedArchive.FileEntryIterator.EntryComparator explodedArchive_FileEntryIterator_EntryComparator0 = new ExplodedArchive.FileEntryIterator.EntryComparator();
      // Undeclared exception!
      try { 
        explodedArchive_FileEntryIterator_EntryComparator0.compare(file0, (File) mockFile0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springframework.boot.loader.archive.ExplodedArchive$FileEntryIterator$EntryComparator", e);
      }
  }

  @Test(timeout = 11000)
  public void test35()  throws Throwable  {
      String string0 = "";
      EvoSuiteFile evoSuiteFile0 = null;
      byte[] byteArray0 = new byte[6];
      byte byte0 = (byte)90;
      byteArray0[0] = byte0;
      byte byte1 = (byte)16;
      byteArray0[1] = byte1;
      byte byte2 = (byte) (-89);
      byteArray0[2] = byte2;
      byte byte3 = (byte)0;
      byteArray0[3] = byte3;
      byte byte4 = (byte) (-1);
      byteArray0[4] = byte4;
      byte byte5 = (byte) (-28);
      byteArray0[5] = byte5;
      boolean boolean0 = FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      MockFile mockFile0 = new MockFile(string0, string0);
      boolean boolean1 = true;
      ExplodedArchive explodedArchive0 = new ExplodedArchive(mockFile0, boolean1);
      String string1 = null;
      URL uRL0 = explodedArchive0.getUrl();
      ExplodedArchive.FileEntry explodedArchive_FileEntry0 = new ExplodedArchive.FileEntry(string1, explodedArchive0.root);
      Archive archive0 = explodedArchive0.getNestedArchive(explodedArchive_FileEntry0);
      String string2 = explodedArchive_FileEntry0.getName();
      explodedArchive_FileEntry0.file = explodedArchive0.root;
      ExplodedArchive.FileEntryIterator explodedArchive_FileEntryIterator0 = new ExplodedArchive.FileEntryIterator();
      // Undeclared exception!
      try { 
        mockFile0.renameTo(explodedArchive0.root);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 11000)
  public void test36()  throws Throwable  {
      String string0 = "}Y";
      MockFile mockFile0 = new MockFile(string0);
      String string1 = mockFile0.getAbsolutePath();
      URI uRI0 = mockFile0.toURI();
      MockFile mockFile1 = new MockFile(string0);
      boolean boolean0 = true;
      boolean boolean1 = mockFile1.setWritable(boolean0);
      boolean boolean2 = false;
      boolean boolean3 = mockFile1.setExecutable(boolean2);
      boolean boolean4 = mockFile0.renameTo(mockFile1);
      Path path0 = mockFile0.toPath();
      boolean boolean5 = true;
      ExplodedArchive.FileEntryIterator explodedArchive_FileEntryIterator0 = new ExplodedArchive.FileEntryIterator(mockFile0, boolean5);
      boolean boolean6 = mockFile0.createNewFile();
      String string2 = "org.springframework.boot.loader.archive.ExplodedArchive$FileEntry";
      boolean boolean7 = true;
      explodedArchive_FileEntryIterator0.recursive = boolean7;
      ExplodedArchive.FileEntry explodedArchive_FileEntry0 = new ExplodedArchive.FileEntry(string2, explodedArchive_FileEntryIterator0.root);
      boolean boolean8 = explodedArchive_FileEntryIterator0.hasNext();
      Iterator<File> iterator0 = explodedArchive_FileEntryIterator0.listFiles(mockFile0);
      File file0 = explodedArchive_FileEntryIterator0.poll();
      ExplodedArchive.FileEntryIterator.EntryComparator explodedArchive_FileEntryIterator_EntryComparator0 = new ExplodedArchive.FileEntryIterator.EntryComparator();
      File file1 = null;
      explodedArchive_FileEntryIterator0.current = file0;
      String string3 = "";
      ExplodedArchive explodedArchive0 = new ExplodedArchive();
      try { 
        explodedArchive0.getNestedArchive(explodedArchive_FileEntry0);
      } catch(FileNotFoundException e) {
         //
         // }Y (Arquivo ou diret\u00F3rio n\u00E3o encontrado)
         //
         verifyException("java.util.zip.ZipFile", e);
      }
  }

  @Test(timeout = 11000)
  public void test37()  throws Throwable  {
      String string0 = "";
      MockFile mockFile0 = new MockFile(string0, string0);
      ExplodedArchive.FileEntry explodedArchive_FileEntry0 = new ExplodedArchive.FileEntry(string0, mockFile0);
      ExplodedArchive explodedArchive0 = new ExplodedArchive();
      explodedArchive0.root = (File) mockFile0;
      String string1 = "org.springframework.boot.loader.archive.ExplodedArchive$FileEntryIterator$EntryComparator";
      explodedArchive_FileEntry0.name = string1;
      String string2 = "";
      explodedArchive_FileEntry0.name = string2;
      String string3 = explodedArchive0.toString();
      File file0 = explodedArchive0.getManifestFile(explodedArchive_FileEntry0.file);
      boolean boolean0 = false;
      ExplodedArchive.FileEntryIterator explodedArchive_FileEntryIterator0 = new ExplodedArchive.FileEntryIterator(explodedArchive_FileEntry0.file, boolean0);
      Archive.Entry archive_Entry0 = explodedArchive_FileEntryIterator0.next();
      Archive.EntryFilter archive_EntryFilter0 = mock(Archive.EntryFilter.class, new ViolatedAssumptionAnswer());
      doReturn(false, false, false).when(archive_EntryFilter0).matches(any(org.springframework.boot.loader.archive.Archive.Entry.class));
      List<Archive> list0 = explodedArchive0.getNestedArchives(archive_EntryFilter0);
  }

  @Test(timeout = 11000)
  public void test38()  throws Throwable  {
      String string0 = "";
      MockFile mockFile0 = new MockFile(string0, string0);
      ExplodedArchive.FileEntry explodedArchive_FileEntry0 = new ExplodedArchive.FileEntry(string0, mockFile0);
      ExplodedArchive explodedArchive0 = new ExplodedArchive();
      explodedArchive0.root = (File) mockFile0;
      String string1 = "org.springframework.boot.loader.archive.ExplodedArchive$FileEntryIterator$EntryComparator";
      explodedArchive_FileEntry0.name = string1;
      String string2 = "";
      URI uRI0 = mockFile0.toURI();
      explodedArchive_FileEntry0.name = string2;
      String string3 = explodedArchive0.toString();
      File file0 = explodedArchive0.getManifestFile(explodedArchive_FileEntry0.file);
      boolean boolean0 = false;
      ExplodedArchive.FileEntryIterator explodedArchive_FileEntryIterator0 = new ExplodedArchive.FileEntryIterator(explodedArchive_FileEntry0.file, boolean0);
      Archive.Entry archive_Entry0 = explodedArchive_FileEntryIterator0.next();
      boolean boolean1 = true;
      Archive.EntryFilter archive_EntryFilter0 = mock(Archive.EntryFilter.class, new ViolatedAssumptionAnswer());
      doReturn(boolean1, explodedArchive0.recursive, explodedArchive0.recursive).when(archive_EntryFilter0).matches(any(org.springframework.boot.loader.archive.Archive.Entry.class));
      List<Archive> list0 = explodedArchive0.getNestedArchives(archive_EntryFilter0);
      File file1 = explodedArchive_FileEntryIterator0.poll();
  }

  @Test(timeout = 11000)
  public void test39()  throws Throwable  {
      String string0 = "}Y";
      MockFile mockFile0 = new MockFile(string0);
      URI uRI0 = mockFile0.toURI();
      MockFile mockFile1 = new MockFile(string0);
      boolean boolean0 = true;
      boolean boolean1 = mockFile1.setWritable(boolean0);
      boolean boolean2 = false;
      boolean boolean3 = mockFile1.setExecutable(boolean2);
      boolean boolean4 = mockFile0.renameTo(mockFile1);
      Path path0 = mockFile0.toPath();
      boolean boolean5 = true;
      ExplodedArchive.FileEntryIterator explodedArchive_FileEntryIterator0 = new ExplodedArchive.FileEntryIterator(mockFile0, boolean5);
      boolean boolean6 = FileSystemHandling.shouldAllThrowIOExceptions();
      String string1 = "org.springframework.boot.loader.archive.ExplodedArchive$FileEntry";
      boolean boolean7 = true;
      explodedArchive_FileEntryIterator0.recursive = boolean7;
      ExplodedArchive.FileEntry explodedArchive_FileEntry0 = new ExplodedArchive.FileEntry(string1, explodedArchive_FileEntryIterator0.root);
      boolean boolean8 = explodedArchive_FileEntryIterator0.hasNext();
      Iterator<File> iterator0 = explodedArchive_FileEntryIterator0.listFiles(mockFile0);
      File file0 = explodedArchive_FileEntryIterator0.poll();
      ExplodedArchive.FileEntryIterator.EntryComparator explodedArchive_FileEntryIterator_EntryComparator0 = new ExplodedArchive.FileEntryIterator.EntryComparator();
      File file1 = null;
      explodedArchive_FileEntryIterator0.current = file0;
      String string2 = "";
      ExplodedArchive explodedArchive0 = new ExplodedArchive();
      // Undeclared exception!
      try { 
        explodedArchive0.getNestedArchive(explodedArchive_FileEntry0);
      } catch(IllegalArgumentException e) {
         //
         // File must exist
         //
         verifyException("org.springframework.boot.loader.data.RandomAccessDataFile", e);
      }
  }

  @Test(timeout = 11000)
  public void test40()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/META-INF/MANIFEST.MF");
      String string0 = " *_}EGBBPW,@";
      boolean boolean0 = FileSystemHandling.appendLineToFile(evoSuiteFile0, string0);
      String string1 = "";
      MockFile mockFile0 = new MockFile(string1, string1);
      ExplodedArchive.FileEntry explodedArchive_FileEntry0 = new ExplodedArchive.FileEntry(string1, mockFile0);
      ExplodedArchive explodedArchive0 = new ExplodedArchive();
      explodedArchive0.root = (File) mockFile0;
      String string2 = "org.springframework.boot.loader.archive.ExplodedArchive$FileEntryIterator$EntryComparator";
      explodedArchive_FileEntry0.name = string2;
      String string3 = "";
      explodedArchive_FileEntry0.name = string3;
      String string4 = explodedArchive0.toString();
      File file0 = explodedArchive0.getManifestFile(explodedArchive_FileEntry0.file);
      boolean boolean1 = false;
      ExplodedArchive.FileEntryIterator explodedArchive_FileEntryIterator0 = new ExplodedArchive.FileEntryIterator(explodedArchive_FileEntry0.file, boolean1);
      Archive.Entry archive_Entry0 = explodedArchive_FileEntryIterator0.next();
      boolean boolean2 = false;
      boolean boolean3 = true;
      Archive.EntryFilter archive_EntryFilter0 = mock(Archive.EntryFilter.class, new ViolatedAssumptionAnswer());
      doReturn(boolean2, boolean3).when(archive_EntryFilter0).matches(any(org.springframework.boot.loader.archive.Archive.Entry.class));
      try { 
        explodedArchive0.getNestedArchives(archive_EntryFilter0);
      } catch(FileNotFoundException e) {
         //
         // /META-INF/MANIFEST.MF (Arquivo ou diret\u00F3rio n\u00E3o encontrado)
         //
         verifyException("java.util.zip.ZipFile", e);
      }
  }

  @Test(timeout = 11000)
  public void test41()  throws Throwable  {
      ExplodedArchive explodedArchive0 = new ExplodedArchive();
      String string0 = "2v\\`VAGaw!<";
      boolean boolean0 = true;
      explodedArchive0.recursive = boolean0;
      File file0 = MockFile.createTempFile(string0, string0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp/2v\\`VAGaw!<02v\\`VAGaw!<");
      String string1 = "study-execution";
      boolean boolean1 = FileSystemHandling.appendLineToFile(evoSuiteFile0, string1);
      explodedArchive0.manifestFile = file0;
      try { 
        explodedArchive0.getManifest();
      } catch(IOException e) {
         //
         // invalid header field
         //
         verifyException("java.util.jar.Attributes", e);
      }
  }

  @Test(timeout = 11000)
  public void test42()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp/2v\\`VAGaw!<02v\\`VAGaw!<");
      boolean boolean0 = FileSystemHandling.createFolder(evoSuiteFile0);
      ExplodedArchive explodedArchive0 = new ExplodedArchive();
      String string0 = "2v\\`VAGaw!<";
      File file0 = MockFile.createTempFile(string0, string0);
      explodedArchive0.manifestFile = file0;
      try { 
        explodedArchive0.getManifest();
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }
}
