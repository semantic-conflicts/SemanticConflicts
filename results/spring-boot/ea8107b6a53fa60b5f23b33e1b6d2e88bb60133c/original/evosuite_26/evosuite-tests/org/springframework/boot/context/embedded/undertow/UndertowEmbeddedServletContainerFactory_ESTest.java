/*
 * This file was automatically generated by EvoSuite
 * Fri May 01 16:20:58 GMT 2020
 */

package org.springframework.boot.context.embedded.undertow;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import groovy.lang.NonEmptySequence;
import groovy.lang.Sequence;
import groovyjarjarasm.asm.Opcodes;
import io.undertow.Undertow;
import io.undertow.server.HttpHandler;
import io.undertow.server.JvmRouteHandler;
import io.undertow.server.RoutingHandler;
import io.undertow.servlet.Servlets;
import io.undertow.servlet.api.DeploymentManager;
import io.undertow.servlet.api.ServletContainer;
import io.undertow.servlet.core.ServletContainerImpl;
import io.undertow.servlet.handlers.DefaultServlet;
import java.io.File;
import java.net.InetAddress;
import java.nio.file.Path;
import java.util.Collection;
import java.util.Map;
import java.util.PriorityQueue;
import java.util.Stack;
import java.util.TreeMap;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.Delayed;
import javax.net.ssl.KeyManager;
import javax.net.ssl.SSLContext;
import javax.net.ssl.TrustManager;
import javax.servlet.Filter;
import javax.servlet.Servlet;
import javax.swing.JLayeredPane;
import javax.swing.plaf.synth.SynthDesktopPaneUI;
import javax.swing.table.DefaultTableModel;
import org.apache.catalina.core.ApplicationServletRegistration;
import org.apache.catalina.core.StandardContext;
import org.apache.catalina.core.StandardHost;
import org.apache.catalina.core.StandardWrapper;
import org.apache.catalina.startup.FailedContext;
import org.apache.struts.mock.MockServletContext;
import org.apache.tomcat.util.descriptor.web.JspPropertyGroup;
import org.codehaus.groovy.control.CompilerConfiguration;
import org.dom4j.Element;
import org.dom4j.Namespace;
import org.dom4j.QName;
import org.dom4j.bean.BeanAttributeList;
import org.dom4j.bean.BeanElement;
import org.dom4j.dom.DOMElement;
import org.eclipse.jetty.server.HttpChannel;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.support.DefaultListableBeanFactory;
import org.springframework.boot.context.embedded.Compression;
import org.springframework.boot.context.embedded.DelegatingFilterProxyRegistrationBean;
import org.springframework.boot.context.embedded.EmbeddedServletContainer;
import org.springframework.boot.context.embedded.ErrorPage;
import org.springframework.boot.context.embedded.FilterRegistrationBean;
import org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer;
import org.springframework.boot.context.embedded.MimeMappings;
import org.springframework.boot.context.embedded.ServletContextInitializer;
import org.springframework.boot.context.embedded.ServletListenerRegistrationBean;
import org.springframework.boot.context.embedded.ServletRegistrationBean;
import org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer;
import org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer;
import org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainer;
import org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory;
import org.springframework.boot.test.SpringBootMockServletContext;
import org.springframework.context.ApplicationContext;
import org.springframework.context.support.ClassPathXmlApplicationContext;
import org.springframework.context.support.FileSystemXmlApplicationContext;
import org.springframework.context.support.GenericApplicationContext;
import org.springframework.context.support.GenericGroovyApplicationContext;
import org.springframework.context.support.GenericXmlApplicationContext;
import org.springframework.context.support.StaticApplicationContext;
import org.springframework.core.io.ByteArrayResource;
import org.springframework.core.io.ClassPathResource;
import org.springframework.core.io.PathResource;
import org.springframework.core.io.Resource;
import org.springframework.http.HttpStatus;
import org.springframework.scheduling.Trigger;
import org.springframework.scheduling.concurrent.ThreadPoolTaskScheduler;
import org.springframework.scheduling.support.PeriodicTrigger;
import org.springframework.web.context.support.GenericWebApplicationContext;
import org.xnio.Option;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class UndertowEmbeddedServletContainerFactory_ESTest extends UndertowEmbeddedServletContainerFactory_ESTest_scaffolding {

  @Test(timeout = 11000)
  public void test00()  throws Throwable  {
      String string0 = "";
      int int0 = 1647;
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory(string0, int0);
      Collection<UndertowBuilderCustomizer> collection0 = undertowEmbeddedServletContainerFactory0.getBuilderCustomizers();
      undertowEmbeddedServletContainerFactory0.setBuilderCustomizers(collection0);
      Integer integer0 = Opcodes.UNINITIALIZED_THIS;
      Boolean boolean0 = Boolean.TRUE;
      undertowEmbeddedServletContainerFactory0.setDirectBuffers(boolean0);
      undertowEmbeddedServletContainerFactory0.setIoThreads(integer0);
      undertowEmbeddedServletContainerFactory0.setBuilderCustomizers(collection0);
      GenericGroovyApplicationContext genericGroovyApplicationContext0 = new GenericGroovyApplicationContext();
      undertowEmbeddedServletContainerFactory0.setResourceLoader(genericGroovyApplicationContext0);
      Undertow.Builder undertow_Builder0 = Undertow.builder();
      Class<MimeMappings.Mapping> class0 = MimeMappings.Mapping.class;
      Class<Delayed> class1 = Delayed.class;
      Option<Delayed> option0 = Option.simple((Class<?>) class0, string0, class1);
      ThreadPoolTaskScheduler threadPoolTaskScheduler0 = new ThreadPoolTaskScheduler();
      HttpChannel<?> httpChannel0 = HttpChannel.getCurrentHttpChannel();
      PeriodicTrigger periodicTrigger0 = new PeriodicTrigger(int0);
      // Undeclared exception!
      try { 
        threadPoolTaskScheduler0.schedule((Runnable) httpChannel0, (Trigger) periodicTrigger0);
      } catch(IllegalStateException e) {
         //
         // ThreadPoolTaskScheduler not initialized
         //
         verifyException("org.springframework.util.Assert", e);
      }
  }

  @Test(timeout = 11000)
  public void test01()  throws Throwable  {
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory();
      Integer integer0 = null;
      undertowEmbeddedServletContainerFactory0.setIoThreads(integer0);
      Collection<UndertowDeploymentInfoCustomizer> collection0 = undertowEmbeddedServletContainerFactory0.getDeploymentInfoCustomizers();
      Undertow.Builder undertow_Builder0 = Undertow.builder();
      int int0 = 0;
      String string0 = "=H\\/";
      KeyManager[] keyManagerArray0 = new KeyManager[0];
      TrustManager[] trustManagerArray0 = new TrustManager[3];
      TrustManager trustManager0 = mock(TrustManager.class, new ViolatedAssumptionAnswer());
      trustManagerArray0[0] = trustManager0;
      trustManagerArray0[1] = trustManagerArray0[0];
      trustManagerArray0[2] = trustManagerArray0[1];
      boolean boolean0 = false;
      RoutingHandler routingHandler0 = new RoutingHandler(boolean0);
      String string1 = "visitJspConfig";
      JvmRouteHandler jvmRouteHandler0 = new JvmRouteHandler(routingHandler0, string0, string1);
      Undertow.Builder undertow_Builder1 = undertow_Builder0.addHttpsListener(int0, string0, keyManagerArray0, trustManagerArray0, (HttpHandler) jvmRouteHandler0);
      Class<SynthDesktopPaneUI> class0 = SynthDesktopPaneUI.class;
      String string2 = "";
      Class<DefaultServlet> class1 = DefaultServlet.class;
      Option<DefaultServlet> option0 = Option.simple((Class<?>) class0, string2, class1);
      DefaultServlet defaultServlet0 = new DefaultServlet();
      Undertow.Builder undertow_Builder2 = undertow_Builder1.setWorkerOption(option0, defaultServlet0);
      String string3 = "E;eX;$ukK*aO{'%+B";
      Undertow.Builder undertow_Builder3 = undertow_Builder2.addAjpListener(int0, string3);
      String string4 = "@jqlMc{Z|vnEDZ>";
      Undertow.Builder undertow_Builder4 = undertow_Builder3.addAjpListener(int0, string4, (HttpHandler) routingHandler0);
      DeploymentManager deploymentManager0 = null;
      int int1 = 0;
      UndertowEmbeddedServletContainer undertowEmbeddedServletContainer0 = undertowEmbeddedServletContainerFactory0.getUndertowEmbeddedServletContainer(undertow_Builder4, deploymentManager0, int1);
  }

  @Test(timeout = 11000)
  public void test02()  throws Throwable  {
      int int0 = 0;
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory(int0);
      UndertowDeploymentInfoCustomizer[] undertowDeploymentInfoCustomizerArray0 = new UndertowDeploymentInfoCustomizer[0];
      undertowEmbeddedServletContainerFactory0.addDeploymentInfoCustomizers(undertowDeploymentInfoCustomizerArray0);
      Integer integer0 = groovyjarjarasm.asm.Opcodes.INTEGER;
      undertowEmbeddedServletContainerFactory0.setBufferSize(integer0);
  }

  @Test(timeout = 11000)
  public void test03()  throws Throwable  {
      int int0 = (-929);
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory(int0);
      String string0 = "";
      undertowEmbeddedServletContainerFactory0.setJspServletClassName(string0);
      Integer integer0 = new Integer(int0);
      int int1 = (-3352);
      Integer integer1 = new Integer(int0);
      undertowEmbeddedServletContainerFactory0.setBuffersPerRegion(integer0);
      Collection<UndertowBuilderCustomizer> collection0 = undertowEmbeddedServletContainerFactory0.getBuilderCustomizers();
      UndertowBuilderCustomizer[] undertowBuilderCustomizerArray0 = new UndertowBuilderCustomizer[1];
      UndertowBuilderCustomizer undertowBuilderCustomizer0 = mock(UndertowBuilderCustomizer.class, new ViolatedAssumptionAnswer());
      undertowBuilderCustomizerArray0[0] = undertowBuilderCustomizer0;
      undertowEmbeddedServletContainerFactory0.addBuilderCustomizers(undertowBuilderCustomizerArray0);
      UndertowDeploymentInfoCustomizer[] undertowDeploymentInfoCustomizerArray0 = new UndertowDeploymentInfoCustomizer[8];
      UndertowDeploymentInfoCustomizer undertowDeploymentInfoCustomizer0 = mock(UndertowDeploymentInfoCustomizer.class, new ViolatedAssumptionAnswer());
      undertowDeploymentInfoCustomizerArray0[0] = undertowDeploymentInfoCustomizer0;
      undertowDeploymentInfoCustomizerArray0[1] = undertowDeploymentInfoCustomizerArray0[0];
      undertowDeploymentInfoCustomizerArray0[2] = undertowDeploymentInfoCustomizerArray0[1];
      undertowDeploymentInfoCustomizerArray0[3] = undertowDeploymentInfoCustomizerArray0[2];
      undertowDeploymentInfoCustomizerArray0[4] = undertowDeploymentInfoCustomizerArray0[3];
      Compression compression0 = new Compression();
      boolean boolean0 = true;
      compression0.setEnabled(boolean0);
      undertowEmbeddedServletContainerFactory0.setCompression(compression0);
      Integer integer2 = null;
      undertowEmbeddedServletContainerFactory0.setBuffersPerRegion(integer2);
      undertowDeploymentInfoCustomizerArray0[5] = undertowDeploymentInfoCustomizerArray0[4];
      undertowDeploymentInfoCustomizerArray0[6] = undertowDeploymentInfoCustomizerArray0[5];
      undertowDeploymentInfoCustomizerArray0[7] = undertowDeploymentInfoCustomizerArray0[6];
      undertowEmbeddedServletContainerFactory0.addDeploymentInfoCustomizers(undertowDeploymentInfoCustomizerArray0);
      ServletContextInitializer[] servletContextInitializerArray0 = new ServletContextInitializer[1];
      // Undeclared exception!
      try { 
        undertowEmbeddedServletContainerFactory0.getEmbeddedServletContainer(servletContextInitializerArray0);
      } catch(RuntimeException e) {
         //
         // java.lang.NullPointerException
         //
         verifyException("io.undertow.servlet.core.DeploymentManagerImpl", e);
      }
  }

  @Test(timeout = 11000)
  public void test04()  throws Throwable  {
      int int0 = (-672);
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory(int0);
      PriorityQueue<UndertowBuilderCustomizer> priorityQueue0 = new PriorityQueue<UndertowBuilderCustomizer>();
      UndertowBuilderCustomizer undertowBuilderCustomizer0 = mock(UndertowBuilderCustomizer.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = priorityQueue0.add(undertowBuilderCustomizer0);
      Undertow.Builder undertow_Builder0 = Undertow.builder();
      Class<DefaultServlet> class0 = DefaultServlet.class;
      String string0 = "No test string supplied on equals";
      Class<DefaultTableModel> class1 = DefaultTableModel.class;
      Option<DefaultTableModel> option0 = Option.simple((Class<?>) class0, string0, class1);
      Object[][] objectArray0 = new Object[9][5];
      Object[] objectArray1 = new Object[3];
      objectArray1[0] = (Object) class0;
      objectArray1[1] = (Object) class1;
      objectArray1[2] = (Object) class1;
      objectArray0[0] = objectArray1;
      Object[] objectArray2 = new Object[9];
      objectArray2[0] = (Object) class0;
      objectArray2[1] = (Object) string0;
      objectArray2[2] = (Object) class0;
      objectArray2[3] = (Object) undertowEmbeddedServletContainerFactory0;
      objectArray2[4] = (Object) class0;
      objectArray2[5] = (Object) undertow_Builder0;
      Object object0 = new Object();
      objectArray2[6] = object0;
      objectArray2[7] = (Object) undertowBuilderCustomizer0;
      objectArray2[8] = (Object) undertowEmbeddedServletContainerFactory0;
      objectArray0[1] = objectArray2;
      Object[] objectArray3 = new Object[3];
      objectArray3[0] = (Object) class0;
      objectArray3[1] = (Object) string0;
      Object object1 = new Object();
      objectArray3[2] = object1;
      objectArray0[2] = objectArray3;
      Object[] objectArray4 = new Object[1];
      objectArray4[0] = (Object) class0;
      objectArray0[3] = objectArray4;
      Object[] objectArray5 = new Object[4];
      objectArray5[0] = object1;
      objectArray5[1] = (Object) class0;
      objectArray5[2] = (Object) undertowBuilderCustomizer0;
      objectArray5[3] = (Object) string0;
      objectArray0[4] = objectArray5;
      Object[] objectArray6 = new Object[5];
      Object object2 = new Object();
      objectArray6[0] = object2;
      objectArray6[1] = (Object) class1;
      objectArray6[2] = object1;
      objectArray6[3] = (Object) undertowBuilderCustomizer0;
      objectArray6[4] = (Object) class1;
      objectArray0[5] = objectArray6;
      Object[] objectArray7 = new Object[5];
      Object object3 = new Object();
      objectArray7[0] = object3;
      objectArray7[1] = (Object) undertowEmbeddedServletContainerFactory0;
      objectArray7[2] = (Object) option0;
      objectArray7[3] = (Object) undertowBuilderCustomizer0;
      objectArray7[4] = (Object) option0;
      objectArray0[6] = objectArray7;
      Object[] objectArray8 = new Object[5];
      objectArray8[0] = object2;
      objectArray8[1] = (Object) undertowBuilderCustomizer0;
      objectArray8[2] = object0;
      objectArray8[3] = (Object) string0;
      objectArray8[4] = (Object) string0;
      objectArray0[7] = objectArray8;
      Object[] objectArray9 = new Object[7];
      objectArray9[0] = (Object) undertowBuilderCustomizer0;
      objectArray9[1] = (Object) undertowEmbeddedServletContainerFactory0;
      objectArray9[2] = (Object) option0;
      objectArray9[3] = (Object) priorityQueue0;
      objectArray9[4] = (Object) undertow_Builder0;
      objectArray9[5] = (Object) undertowEmbeddedServletContainerFactory0;
      objectArray9[6] = object0;
      objectArray0[8] = objectArray9;
      Object[] objectArray10 = new Object[8];
      objectArray10[0] = object1;
      objectArray10[1] = (Object) undertow_Builder0;
      objectArray10[2] = (Object) undertowBuilderCustomizer0;
      objectArray10[3] = object1;
      objectArray10[4] = object0;
      objectArray10[5] = object3;
      objectArray10[6] = (Object) undertowBuilderCustomizer0;
      objectArray10[7] = (Object) class0;
      DefaultTableModel defaultTableModel0 = new DefaultTableModel(objectArray0, objectArray10);
      Undertow.Builder undertow_Builder1 = undertow_Builder0.setSocketOption(option0, defaultTableModel0);
      Undertow.Builder undertow_Builder2 = undertow_Builder1.setBufferSize(int0);
      Undertow.Builder undertow_Builder3 = undertow_Builder2.setBuffersPerRegion(int0);
      Undertow.Builder undertow_Builder4 = undertow_Builder3.addHttpListener(int0, string0);
      ServletContainerImpl servletContainerImpl0 = new ServletContainerImpl();
      DeploymentManager deploymentManager0 = servletContainerImpl0.getDeployment(string0);
      UndertowEmbeddedServletContainer undertowEmbeddedServletContainer0 = undertowEmbeddedServletContainerFactory0.getUndertowEmbeddedServletContainer(undertow_Builder4, deploymentManager0, int0);
      UndertowBuilderCustomizer undertowBuilderCustomizer1 = mock(UndertowBuilderCustomizer.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        priorityQueue0.add(undertowBuilderCustomizer1);
      } catch(ClassCastException e) {
         //
         // org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer$MockitoMock$514864736 cannot be cast to java.lang.Comparable
         //
         verifyException("java.util.PriorityQueue", e);
      }
  }

  @Test(timeout = 11000)
  public void test05()  throws Throwable  {
      int int0 = 1;
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory(int0);
      ServletContextInitializer[] servletContextInitializerArray0 = new ServletContextInitializer[2];
      ServletListenerRegistrationBean<SynthDesktopPaneUI> servletListenerRegistrationBean0 = new ServletListenerRegistrationBean<SynthDesktopPaneUI>();
      servletContextInitializerArray0[0] = (ServletContextInitializer) servletListenerRegistrationBean0;
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      InitParameterConfiguringServletContextInitializer initParameterConfiguringServletContextInitializer0 = new InitParameterConfiguringServletContextInitializer(concurrentHashMap0);
      servletContextInitializerArray0[1] = (ServletContextInitializer) initParameterConfiguringServletContextInitializer0;
      // Undeclared exception!
      try { 
        undertowEmbeddedServletContainerFactory0.getEmbeddedServletContainer(servletContextInitializerArray0);
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: Failed to add listener 'null' to servlet context
         //
         verifyException("io.undertow.servlet.core.DeploymentManagerImpl", e);
      }
  }

  @Test(timeout = 11000)
  public void test06()  throws Throwable  {
      int int0 = 1197;
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory(int0);
      String string0 = "gI^47";
      undertowEmbeddedServletContainerFactory0.setAccessLogPattern(string0);
      Namespace namespace0 = Namespace.XML_NAMESPACE;
      DOMElement dOMElement0 = new DOMElement(string0, namespace0);
      StandardHost standardHost0 = new StandardHost();
      File file0 = standardHost0.getAppBaseFile();
      boolean boolean0 = file0.mkdirs();
      undertowEmbeddedServletContainerFactory0.setAccessLogDirectory(file0);
      String string1 = "UndertowDeploymentInfoCustomizers must not be null";
      String string2 = "org.eclipse.jetty.servlet.ServletMapping";
      Element element0 = dOMElement0.addAttribute(string1, string2);
      namespace0.setParent(element0);
      QName qName0 = new QName(string0, namespace0, string0);
      BeanElement beanElement0 = new BeanElement(qName0);
      BeanAttributeList beanAttributeList0 = new BeanAttributeList(beanElement0);
      undertowEmbeddedServletContainerFactory0.setBuilderCustomizers(beanAttributeList0);
      Integer integer0 = null;
      undertowEmbeddedServletContainerFactory0.setBufferSize(integer0);
      Collection<UndertowDeploymentInfoCustomizer> collection0 = undertowEmbeddedServletContainerFactory0.getDeploymentInfoCustomizers();
      undertowEmbeddedServletContainerFactory0.setBuilderCustomizers(beanAttributeList0);
      undertowEmbeddedServletContainerFactory0.setWorkerThreads(integer0);
      UndertowDeploymentInfoCustomizer[] undertowDeploymentInfoCustomizerArray0 = new UndertowDeploymentInfoCustomizer[6];
      UndertowDeploymentInfoCustomizer undertowDeploymentInfoCustomizer0 = mock(UndertowDeploymentInfoCustomizer.class, new ViolatedAssumptionAnswer());
      undertowDeploymentInfoCustomizerArray0[0] = undertowDeploymentInfoCustomizer0;
      undertowDeploymentInfoCustomizerArray0[1] = undertowDeploymentInfoCustomizerArray0[0];
      undertowDeploymentInfoCustomizerArray0[2] = undertowDeploymentInfoCustomizerArray0[1];
      undertowDeploymentInfoCustomizerArray0[3] = undertowDeploymentInfoCustomizerArray0[2];
      undertowDeploymentInfoCustomizerArray0[4] = undertowDeploymentInfoCustomizerArray0[3];
      undertowDeploymentInfoCustomizerArray0[5] = undertowDeploymentInfoCustomizerArray0[4];
      undertowEmbeddedServletContainerFactory0.addDeploymentInfoCustomizers(undertowDeploymentInfoCustomizerArray0);
      int int1 = (-1950);
      Random.setNextRandom(int1);
  }

  @Test(timeout = 11000)
  public void test07()  throws Throwable  {
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory();
      Integer integer0 = JLayeredPane.PALETTE_LAYER;
      String string0 = "";
      undertowEmbeddedServletContainerFactory0.setContextPath(string0);
      int int0 = 44;
      InetAddress inetAddress0 = null;
      undertowEmbeddedServletContainerFactory0.setAddress(inetAddress0);
      undertowEmbeddedServletContainerFactory0.setSessionTimeout(int0);
      int int1 = Integer.remainderUnsigned(int0, int0);
      Sequence sequence0 = new Sequence();
      boolean boolean0 = sequence0.add((Object) undertowEmbeddedServletContainerFactory0);
      undertowEmbeddedServletContainerFactory0.setBuilderCustomizers(sequence0);
      undertowEmbeddedServletContainerFactory0.setBuffersPerRegion(integer0);
      boolean boolean1 = false;
      undertowEmbeddedServletContainerFactory0.setAccessLogEnabled(boolean1);
      Integer integer1 = JLayeredPane.POPUP_LAYER;
      long long0 = Integer.toUnsignedLong(int0);
      undertowEmbeddedServletContainerFactory0.setWorkerThreads(integer1);
      Collection<UndertowDeploymentInfoCustomizer> collection0 = null;
      // Undeclared exception!
      try { 
        undertowEmbeddedServletContainerFactory0.setDeploymentInfoCustomizers(collection0);
      } catch(IllegalArgumentException e) {
         //
         // Customizers must not be null
         //
         verifyException("org.springframework.util.Assert", e);
      }
  }

  @Test(timeout = 11000)
  public void test08()  throws Throwable  {
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory();
      ServletContextInitializer[] servletContextInitializerArray0 = new ServletContextInitializer[3];
      FilterRegistrationBean filterRegistrationBean0 = new FilterRegistrationBean();
      servletContextInitializerArray0[0] = (ServletContextInitializer) filterRegistrationBean0;
      TreeMap<String, String> treeMap0 = new TreeMap<String, String>();
      InitParameterConfiguringServletContextInitializer initParameterConfiguringServletContextInitializer0 = new InitParameterConfiguringServletContextInitializer(treeMap0);
      servletContextInitializerArray0[1] = (ServletContextInitializer) initParameterConfiguringServletContextInitializer0;
      ErrorPage[] errorPageArray0 = new ErrorPage[6];
      HttpStatus httpStatus0 = HttpStatus.NOT_EXTENDED;
      String string0 = "JKS";
      ErrorPage errorPage0 = new ErrorPage(httpStatus0, string0);
      errorPageArray0[0] = errorPage0;
      ErrorPage errorPage1 = new ErrorPage(string0);
      errorPageArray0[1] = errorPage1;
      String string1 = "";
      ErrorPage errorPage2 = new ErrorPage(string1);
      errorPageArray0[2] = errorPage2;
      ErrorPage errorPage3 = new ErrorPage(httpStatus0, string1);
      errorPageArray0[3] = errorPage3;
      String string2 = "";
      ErrorPage errorPage4 = new ErrorPage(string2);
      errorPageArray0[4] = errorPage4;
      Class<Throwable> class0 = Throwable.class;
      ErrorPage errorPage5 = new ErrorPage(class0, string2);
      errorPageArray0[5] = errorPage5;
      undertowEmbeddedServletContainerFactory0.addErrorPages(errorPageArray0);
      ServletListenerRegistrationBean<SynthDesktopPaneUI> servletListenerRegistrationBean0 = new ServletListenerRegistrationBean<SynthDesktopPaneUI>();
      servletContextInitializerArray0[2] = (ServletContextInitializer) servletListenerRegistrationBean0;
      // Undeclared exception!
      try { 
        undertowEmbeddedServletContainerFactory0.getEmbeddedServletContainer(servletContextInitializerArray0);
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: Filter must not be null
         //
         verifyException("io.undertow.servlet.core.DeploymentManagerImpl", e);
      }
  }

  @Test(timeout = 11000)
  public void test09()  throws Throwable  {
      int int0 = 32;
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory(int0);
      String string0 = "";
      SpringBootMockServletContext springBootMockServletContext0 = new SpringBootMockServletContext(string0);
      GenericWebApplicationContext genericWebApplicationContext0 = new GenericWebApplicationContext(springBootMockServletContext0);
      undertowEmbeddedServletContainerFactory0.setResourceLoader(genericWebApplicationContext0);
      ServletContextInitializer[] servletContextInitializerArray0 = new ServletContextInitializer[2];
      ServletListenerRegistrationBean<SynthDesktopPaneUI> servletListenerRegistrationBean0 = new ServletListenerRegistrationBean<SynthDesktopPaneUI>();
      servletContextInitializerArray0[1] = (ServletContextInitializer) servletListenerRegistrationBean0;
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      InitParameterConfiguringServletContextInitializer initParameterConfiguringServletContextInitializer0 = new InitParameterConfiguringServletContextInitializer(concurrentHashMap0);
      servletContextInitializerArray0[1] = (ServletContextInitializer) initParameterConfiguringServletContextInitializer0;
      // Undeclared exception!
      try { 
        undertowEmbeddedServletContainerFactory0.getEmbeddedServletContainer(servletContextInitializerArray0);
      } catch(RuntimeException e) {
         //
         // java.lang.NullPointerException
         //
         verifyException("io.undertow.servlet.core.DeploymentManagerImpl", e);
      }
  }

  @Test(timeout = 11000)
  public void test10()  throws Throwable  {
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory();
      CompilerConfiguration compilerConfiguration0 = new CompilerConfiguration();
      File file0 = compilerConfiguration0.getTargetDirectory();
      undertowEmbeddedServletContainerFactory0.setAccessLogDirectory(file0);
  }

  @Test(timeout = 11000)
  public void test11()  throws Throwable  {
      int int0 = 1588;
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory(int0);
      UndertowBuilderCustomizer[] undertowBuilderCustomizerArray0 = null;
      // Undeclared exception!
      try { 
        undertowEmbeddedServletContainerFactory0.addBuilderCustomizers(undertowBuilderCustomizerArray0);
      } catch(IllegalArgumentException e) {
         //
         // Customizers must not be null
         //
         verifyException("org.springframework.util.Assert", e);
      }
  }

  @Test(timeout = 11000)
  public void test12()  throws Throwable  {
      String string0 = "";
      int int0 = 0;
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory(string0, int0);
      UndertowBuilderCustomizer[] undertowBuilderCustomizerArray0 = new UndertowBuilderCustomizer[5];
      File file0 = null;
      undertowEmbeddedServletContainerFactory0.setDocumentRoot(file0);
      undertowBuilderCustomizerArray0[1] = undertowBuilderCustomizerArray0[0];
      undertowBuilderCustomizerArray0[2] = undertowBuilderCustomizerArray0[1];
      undertowEmbeddedServletContainerFactory0.setSessionTimeout(int0);
      undertowBuilderCustomizerArray0[3] = undertowBuilderCustomizerArray0[2];
      undertowBuilderCustomizerArray0[4] = undertowBuilderCustomizerArray0[3];
      undertowEmbeddedServletContainerFactory0.addBuilderCustomizers(undertowBuilderCustomizerArray0);
      Integer integer0 = Opcodes.NULL;
      undertowEmbeddedServletContainerFactory0.setIoThreads(integer0);
      UndertowDeploymentInfoCustomizer[] undertowDeploymentInfoCustomizerArray0 = new UndertowDeploymentInfoCustomizer[0];
      undertowEmbeddedServletContainerFactory0.addDeploymentInfoCustomizers(undertowDeploymentInfoCustomizerArray0);
      Sequence sequence0 = new Sequence();
      // Undeclared exception!
      try { 
        sequence0.add(int0, (Object) undertowBuilderCustomizerArray0[4]);
      } catch(NullPointerException e) {
         //
         // Sequences cannot contain null, use a List instead
         //
         verifyException("groovy.lang.Sequence", e);
      }
  }

  @Test(timeout = 11000)
  public void test13()  throws Throwable  {
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory();
      String string0 = "Gj<{?^jvaUlq";
      undertowEmbeddedServletContainerFactory0.setAccessLogPattern(string0);
      ServletContextInitializer[] servletContextInitializerArray0 = new ServletContextInitializer[0];
      undertowEmbeddedServletContainerFactory0.addInitializers(servletContextInitializerArray0);
      Integer integer0 = JLayeredPane.DEFAULT_LAYER;
      undertowEmbeddedServletContainerFactory0.setIoThreads(integer0);
  }

  @Test(timeout = 11000)
  public void test14()  throws Throwable  {
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory();
      boolean boolean0 = true;
      undertowEmbeddedServletContainerFactory0.setUseForwardHeaders(boolean0);
  }

  @Test(timeout = 11000)
  public void test15()  throws Throwable  {
      String string0 = "oRAU";
      int int0 = 1600;
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = null;
      try {
        undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory(string0, int0);
      } catch(IllegalArgumentException e) {
         //
         // ContextPath must start with '/' and not end with '/'
         //
         verifyException("org.springframework.boot.context.embedded.AbstractConfigurableEmbeddedServletContainer", e);
      }
  }

  @Test(timeout = 11000)
  public void test16()  throws Throwable  {
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory();
      ApplicationContext applicationContext0 = null;
      GenericApplicationContext genericApplicationContext0 = new GenericApplicationContext(applicationContext0);
      undertowEmbeddedServletContainerFactory0.setResourceLoader(genericApplicationContext0);
      Undertow.Builder undertow_Builder0 = Undertow.builder();
      int int0 = 0;
      Undertow.Builder undertow_Builder1 = undertow_Builder0.setBufferSize(int0);
      int int1 = 4177;
      SSLContext sSLContext0 = null;
      Undertow.Builder undertow_Builder2 = undertow_Builder1.addHttpsListener(int1, genericApplicationContext0.APPLICATION_EVENT_MULTICASTER_BEAN_NAME, sSLContext0);
      int int2 = (-876);
      String string0 = ")OG|{#";
      boolean boolean0 = true;
      RoutingHandler routingHandler0 = new RoutingHandler(boolean0);
      String string1 = "#l";
      JvmRouteHandler jvmRouteHandler0 = new JvmRouteHandler(routingHandler0, string1, string1);
      Undertow.Builder undertow_Builder3 = undertow_Builder2.addHttpListener(int2, string0, (HttpHandler) jvmRouteHandler0);
      Class<DefaultTableModel> class0 = DefaultTableModel.class;
      String string2 = "buF";
      Class<SynthDesktopPaneUI> class1 = SynthDesktopPaneUI.class;
      Option<SynthDesktopPaneUI> option0 = Option.simple((Class<?>) class0, string2, class1);
      SynthDesktopPaneUI synthDesktopPaneUI0 = new SynthDesktopPaneUI();
      Undertow.Builder undertow_Builder4 = undertow_Builder3.setWorkerOption(option0, synthDesktopPaneUI0);
      ServletContainerImpl servletContainerImpl0 = new ServletContainerImpl();
      String string3 = null;
      DeploymentManager deploymentManager0 = servletContainerImpl0.getDeployment(string3);
      int int3 = (-1);
      UndertowEmbeddedServletContainer undertowEmbeddedServletContainer0 = undertowEmbeddedServletContainerFactory0.getUndertowEmbeddedServletContainer(undertow_Builder4, deploymentManager0, int3);
  }

  @Test(timeout = 11000)
  public void test17()  throws Throwable  {
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory();
      boolean boolean0 = true;
      undertowEmbeddedServletContainerFactory0.setPersistSession(boolean0);
      UndertowDeploymentInfoCustomizer[] undertowDeploymentInfoCustomizerArray0 = null;
      Undertow.Builder undertow_Builder0 = Undertow.builder();
      int int0 = 1;
      String string0 = "";
      Undertow.Builder undertow_Builder1 = undertow_Builder0.addHttpListener(int0, string0);
      RoutingHandler routingHandler0 = new RoutingHandler();
      Undertow.Builder undertow_Builder2 = undertow_Builder1.setHandler(routingHandler0);
      Undertow.Builder undertow_Builder3 = undertow_Builder2.setBuffersPerRegion(int0);
      ServletContainerImpl servletContainerImpl0 = new ServletContainerImpl();
      DeploymentManager deploymentManager0 = servletContainerImpl0.getDeploymentByPath(string0);
      int int1 = 1974;
      UndertowEmbeddedServletContainer undertowEmbeddedServletContainer0 = undertowEmbeddedServletContainerFactory0.getUndertowEmbeddedServletContainer(undertow_Builder3, deploymentManager0, int1);
      // Undeclared exception!
      try { 
        undertowEmbeddedServletContainerFactory0.addDeploymentInfoCustomizers(undertowDeploymentInfoCustomizerArray0);
      } catch(IllegalArgumentException e) {
         //
         // UndertowDeploymentInfoCustomizers must not be null
         //
         verifyException("org.springframework.util.Assert", e);
      }
  }

  @Test(timeout = 11000)
  public void test18()  throws Throwable  {
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory();
      CompilerConfiguration compilerConfiguration0 = CompilerConfiguration.DEFAULT;
      File file0 = compilerConfiguration0.getTargetDirectory();
      undertowEmbeddedServletContainerFactory0.setSessionStoreDir(file0);
      UndertowBuilderCustomizer[] undertowBuilderCustomizerArray0 = null;
      // Undeclared exception!
      try { 
        undertowEmbeddedServletContainerFactory0.addBuilderCustomizers(undertowBuilderCustomizerArray0);
      } catch(IllegalArgumentException e) {
         //
         // Customizers must not be null
         //
         verifyException("org.springframework.util.Assert", e);
      }
  }

  @Test(timeout = 11000)
  public void test19()  throws Throwable  {
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory();
      boolean boolean0 = undertowEmbeddedServletContainerFactory0.isAccessLogEnabled();
  }

  @Test(timeout = 11000)
  public void test20()  throws Throwable  {
      int int0 = 1686;
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory(int0);
      UndertowBuilderCustomizer[] undertowBuilderCustomizerArray0 = new UndertowBuilderCustomizer[7];
      UndertowBuilderCustomizer undertowBuilderCustomizer0 = mock(UndertowBuilderCustomizer.class, new ViolatedAssumptionAnswer());
      undertowBuilderCustomizerArray0[0] = undertowBuilderCustomizer0;
      String string0 = "";
      undertowEmbeddedServletContainerFactory0.setJspServletClassName(string0);
      undertowBuilderCustomizerArray0[1] = undertowBuilderCustomizerArray0[0];
      ErrorPage[] errorPageArray0 = new ErrorPage[2];
      HttpStatus httpStatus0 = HttpStatus.IM_USED;
      ErrorPage errorPage0 = new ErrorPage(httpStatus0, string0);
      String string1 = errorPage0.getExceptionName();
      errorPageArray0[0] = errorPage0;
      String string2 = "As$:Xo";
      String string3 = errorPage0.getExceptionName();
      ErrorPage errorPage1 = new ErrorPage(httpStatus0, string2);
      boolean boolean0 = errorPage1.equals(undertowBuilderCustomizerArray0[1]);
      errorPageArray0[1] = errorPage1;
      undertowEmbeddedServletContainerFactory0.addErrorPages(errorPageArray0);
      undertowBuilderCustomizerArray0[2] = undertowBuilderCustomizerArray0[1];
      undertowBuilderCustomizerArray0[3] = undertowBuilderCustomizerArray0[2];
      undertowBuilderCustomizerArray0[4] = undertowBuilderCustomizerArray0[3];
      undertowBuilderCustomizerArray0[5] = undertowBuilderCustomizerArray0[4];
      undertowBuilderCustomizerArray0[6] = undertowBuilderCustomizerArray0[5];
      undertowEmbeddedServletContainerFactory0.addBuilderCustomizers(undertowBuilderCustomizerArray0);
      boolean boolean1 = false;
      undertowEmbeddedServletContainerFactory0.setAccessLogEnabled(boolean1);
      UndertowDeploymentInfoCustomizer[] undertowDeploymentInfoCustomizerArray0 = null;
      // Undeclared exception!
      try { 
        undertowEmbeddedServletContainerFactory0.addDeploymentInfoCustomizers(undertowDeploymentInfoCustomizerArray0);
      } catch(IllegalArgumentException e) {
         //
         // UndertowDeploymentInfoCustomizers must not be null
         //
         verifyException("org.springframework.util.Assert", e);
      }
  }

  @Test(timeout = 11000)
  public void test21()  throws Throwable  {
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory();
      Sequence sequence0 = new Sequence();
      undertowEmbeddedServletContainerFactory0.setDeploymentInfoCustomizers(sequence0);
      Integer integer0 = JLayeredPane.FRAME_CONTENT_LAYER;
      undertowEmbeddedServletContainerFactory0.setBufferSize(integer0);
      ServletContextInitializer[] servletContextInitializerArray0 = new ServletContextInitializer[9];
      FilterRegistrationBean filterRegistrationBean0 = new FilterRegistrationBean();
      servletContextInitializerArray0[0] = (ServletContextInitializer) filterRegistrationBean0;
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      StandardContext standardContext0 = new StandardContext();
      Random.setNextRandom(filterRegistrationBean0.REQUEST_WRAPPER_FILTER_MAX_ORDER);
      org.apache.catalina.core.ApplicationContext applicationContext0 = null;
      try {
        applicationContext0 = new org.apache.catalina.core.ApplicationContext(standardContext0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.catalina.core.ApplicationContext", e);
      }
  }

  @Test(timeout = 11000)
  public void test22()  throws Throwable  {
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory();
      int int0 = 0;
      ServletContainer servletContainer0 = Servlets.defaultContainer();
      Integer integer0 = Integer.valueOf(int0);
      int int1 = Integer.min(int0, int0);
      undertowEmbeddedServletContainerFactory0.setIoThreads(integer0);
      boolean boolean0 = false;
      undertowEmbeddedServletContainerFactory0.setAccessLogEnabled(boolean0);
      ServletContextInitializer[] servletContextInitializerArray0 = null;
      // Undeclared exception!
      try { 
        undertowEmbeddedServletContainerFactory0.getEmbeddedServletContainer(servletContextInitializerArray0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 11000)
  public void test23()  throws Throwable  {
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory();
      StandardHost standardHost0 = new StandardHost();
      File file0 = standardHost0.getConfigBaseFile();
      String string0 = " d";
      MockFile mockFile0 = new MockFile(file0, string0);
      boolean boolean0 = mockFile0.mkdirs();
      undertowEmbeddedServletContainerFactory0.setAccessLogDirectory(mockFile0);
      Collection<UndertowBuilderCustomizer> collection0 = null;
      // Undeclared exception!
      try { 
        undertowEmbeddedServletContainerFactory0.setBuilderCustomizers(collection0);
      } catch(IllegalArgumentException e) {
         //
         // Customizers must not be null
         //
         verifyException("org.springframework.util.Assert", e);
      }
  }

  @Test(timeout = 11000)
  public void test24()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      EvoSuiteFile evoSuiteFile0 = null;
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte)43;
      byteArray0[0] = byte0;
      byte byte1 = (byte)83;
      byteArray0[1] = byte1;
      boolean boolean1 = FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      int int0 = (-1338);
      Random.setNextRandom(int0);
      Random.setNextRandom(byte0);
      int int1 = 1;
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory(int1);
      long long0 = 999L;
      UndertowDeploymentInfoCustomizer[] undertowDeploymentInfoCustomizerArray0 = new UndertowDeploymentInfoCustomizer[2];
      UndertowDeploymentInfoCustomizer undertowDeploymentInfoCustomizer0 = mock(UndertowDeploymentInfoCustomizer.class, new ViolatedAssumptionAnswer());
      undertowDeploymentInfoCustomizerArray0[0] = undertowDeploymentInfoCustomizer0;
      undertowEmbeddedServletContainerFactory0.addDeploymentInfoCustomizers(undertowDeploymentInfoCustomizerArray0);
      undertowDeploymentInfoCustomizerArray0[1] = undertowDeploymentInfoCustomizerArray0[0];
      undertowEmbeddedServletContainerFactory0.addDeploymentInfoCustomizers(undertowDeploymentInfoCustomizerArray0);
      System.setCurrentTimeMillis(long0);
      ServletContainer servletContainer0 = Servlets.defaultContainer();
      Integer integer0 = Opcodes.UNINITIALIZED_THIS;
      undertowEmbeddedServletContainerFactory0.setBufferSize(integer0);
      ServletContextInitializer[] servletContextInitializerArray0 = new ServletContextInitializer[0];
      // Undeclared exception!
      try { 
        undertowEmbeddedServletContainerFactory0.getEmbeddedServletContainer(servletContextInitializerArray0);
      } catch(RuntimeException e) {
         //
         // Unable to create tempDir. java.io.tmpdir is set to /tmp
         //
         verifyException("org.springframework.boot.context.embedded.AbstractEmbeddedServletContainerFactory", e);
      }
  }

  @Test(timeout = 11000)
  public void test25()  throws Throwable  {
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory();
      long long0 = 1000000000000L;
      System.setCurrentTimeMillis(long0);
      int int0 = 3241;
      Random.setNextRandom(int0);
      Random.setNextRandom(int0);
      long long1 = 1803L;
      System.setCurrentTimeMillis(long1);
      ServletContextInitializer[] servletContextInitializerArray0 = new ServletContextInitializer[1];
      FilterRegistrationBean filterRegistrationBean0 = new FilterRegistrationBean();
      Sequence sequence0 = new Sequence();
      String string0 = ">G~6$$UHDD3T";
      filterRegistrationBean0.addInitParameter(string0, string0);
      NonEmptySequence nonEmptySequence0 = new NonEmptySequence();
      boolean boolean0 = nonEmptySequence0.add((Object) sequence0);
      boolean boolean1 = true;
      filterRegistrationBean0.setEnabled(boolean1);
      boolean boolean2 = sequence0.addAll(filterRegistrationBean0.REQUEST_WRAPPER_FILTER_MAX_ORDER, (Collection) nonEmptySequence0);
      undertowEmbeddedServletContainerFactory0.setInitializers(sequence0);
      servletContextInitializerArray0[0] = (ServletContextInitializer) filterRegistrationBean0;
      // Undeclared exception!
      try { 
        undertowEmbeddedServletContainerFactory0.getEmbeddedServletContainer(servletContextInitializerArray0);
      } catch(ArrayStoreException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 11000)
  public void test26()  throws Throwable  {
      int int0 = 0;
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory(int0);
      UndertowDeploymentInfoCustomizer[] undertowDeploymentInfoCustomizerArray0 = new UndertowDeploymentInfoCustomizer[6];
      UndertowDeploymentInfoCustomizer undertowDeploymentInfoCustomizer0 = mock(UndertowDeploymentInfoCustomizer.class, new ViolatedAssumptionAnswer());
      String string0 = "fkjALS>(o-gN\"9V]|";
      undertowEmbeddedServletContainerFactory0.setJspServletClassName(string0);
      undertowDeploymentInfoCustomizerArray0[0] = undertowDeploymentInfoCustomizer0;
      undertowDeploymentInfoCustomizerArray0[1] = undertowDeploymentInfoCustomizerArray0[0];
      undertowDeploymentInfoCustomizerArray0[2] = undertowDeploymentInfoCustomizerArray0[1];
      undertowDeploymentInfoCustomizerArray0[3] = undertowDeploymentInfoCustomizerArray0[2];
      undertowDeploymentInfoCustomizerArray0[4] = undertowDeploymentInfoCustomizerArray0[3];
      undertowDeploymentInfoCustomizerArray0[5] = undertowDeploymentInfoCustomizerArray0[4];
      undertowEmbeddedServletContainerFactory0.addDeploymentInfoCustomizers(undertowDeploymentInfoCustomizerArray0);
      int int1 = 43;
      Random.setNextRandom(int1);
      long long0 = 2928L;
      System.setCurrentTimeMillis(long0);
      ServletContextInitializer[] servletContextInitializerArray0 = new ServletContextInitializer[0];
      // Undeclared exception!
      try { 
        undertowEmbeddedServletContainerFactory0.getEmbeddedServletContainer(servletContextInitializerArray0);
      } catch(RuntimeException e) {
         //
         // java.security.AccessControlException: access denied (\"java.lang.RuntimePermission\" \"io.undertow.servlet.CREATE_INITIAL_HANDLER\")
         //
         verifyException("io.undertow.servlet.core.DeploymentManagerImpl", e);
      }
  }
}
