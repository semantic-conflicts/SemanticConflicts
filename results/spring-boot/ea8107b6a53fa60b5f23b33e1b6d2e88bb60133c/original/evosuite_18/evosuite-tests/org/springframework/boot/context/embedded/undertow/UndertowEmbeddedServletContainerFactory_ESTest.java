/*
 * This file was automatically generated by EvoSuite
 * Fri May 01 15:27:45 GMT 2020
 */

package org.springframework.boot.context.embedded.undertow;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import groovy.lang.NonEmptySequence;
import groovyjarjarasm.asm.Opcodes;
import io.undertow.Undertow;
import io.undertow.security.api.AuthenticationMechanism;
import io.undertow.security.api.AuthenticationMode;
import io.undertow.security.idm.IdentityManager;
import io.undertow.security.impl.BasicAuthenticationMechanism;
import io.undertow.server.HttpHandler;
import io.undertow.server.RoutingHandler;
import io.undertow.server.handlers.ByteRangeHandler;
import io.undertow.servlet.ServletExtension;
import io.undertow.servlet.api.DeploymentInfo;
import io.undertow.servlet.api.DeploymentManager;
import io.undertow.servlet.core.ServletContainerImpl;
import java.io.File;
import java.lang.reflect.Array;
import java.net.InetAddress;
import java.net.URI;
import java.net.URISyntaxException;
import java.nio.ByteBuffer;
import java.security.Provider;
import java.util.Collection;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.PriorityQueue;
import java.util.Properties;
import java.util.TreeSet;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.PriorityBlockingQueue;
import java.util.concurrent.ScheduledThreadPoolExecutor;
import java.util.concurrent.SynchronousQueue;
import java.util.concurrent.ThreadPoolExecutor;
import java.util.concurrent.TimeUnit;
import javax.net.ssl.KeyManager;
import javax.net.ssl.SSLContext;
import javax.net.ssl.TrustManager;
import javax.net.ssl.X509KeyManager;
import javax.servlet.Servlet;
import javax.swing.JLayeredPane;
import javax.swing.text.DefaultEditorKit;
import org.apache.catalina.core.StandardContext;
import org.apache.catalina.core.StandardHost;
import org.apache.catalina.core.StandardServer;
import org.apache.catalina.filters.RemoteAddrFilter;
import org.apache.catalina.filters.RequestDumperFilter;
import org.apache.struts.mock.MockServletContext;
import org.apache.tomcat.util.descriptor.web.JspPropertyGroup;
import org.apache.tomcat.util.descriptor.web.ServletDef;
import org.apache.tomcat.util.net.AprEndpoint;
import org.codehaus.groovy.control.CompilerConfiguration;
import org.eclipse.jetty.util.ssl.AliasedX509ExtendedKeyManager;
import org.eclipse.jetty.util.ssl.AliasedX509KeyManager;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.net.MockInetAddress;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoName;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.jcp.xml.dsig.internal.dom.XMLDSigRI;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.BeanFactory;
import org.springframework.beans.factory.support.DefaultListableBeanFactory;
import org.springframework.boot.context.embedded.Compression;
import org.springframework.boot.context.embedded.DelegatingFilterProxyRegistrationBean;
import org.springframework.boot.context.embedded.EmbeddedServletContainer;
import org.springframework.boot.context.embedded.ErrorPage;
import org.springframework.boot.context.embedded.FilterRegistrationBean;
import org.springframework.boot.context.embedded.JspServlet;
import org.springframework.boot.context.embedded.ServletContextInitializer;
import org.springframework.boot.context.embedded.ServletListenerRegistrationBean;
import org.springframework.boot.context.embedded.ServletRegistrationBean;
import org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer;
import org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer;
import org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainer;
import org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory;
import org.springframework.boot.test.SpringBootMockServletContext;
import org.springframework.context.annotation.AnnotationConfigApplicationContext;
import org.springframework.context.support.FileSystemXmlApplicationContext;
import org.springframework.context.support.GenericApplicationContext;
import org.springframework.context.support.GenericXmlApplicationContext;
import org.springframework.core.io.ResourceLoader;
import org.springframework.core.io.UrlResource;
import org.springframework.http.HttpStatus;
import org.springframework.util.LinkedMultiValueMap;
import org.springframework.web.context.support.GenericWebApplicationContext;
import org.springframework.web.filter.RequestContextFilter;
import org.xnio.StreamConnection;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class UndertowEmbeddedServletContainerFactory_ESTest extends UndertowEmbeddedServletContainerFactory_ESTest_scaffolding {

  @Test(timeout = 11000)
  public void test00()  throws Throwable  {
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory();
      Collection<UndertowDeploymentInfoCustomizer> collection0 = undertowEmbeddedServletContainerFactory0.getDeploymentInfoCustomizers();
      StandardServer standardServer0 = new StandardServer();
      File file0 = standardServer0.getCatalinaHome();
      undertowEmbeddedServletContainerFactory0.setAccessLogDirectory(file0);
      boolean boolean0 = false;
      undertowEmbeddedServletContainerFactory0.setAccessLogEnabled(boolean0);
      UndertowBuilderCustomizer[] undertowBuilderCustomizerArray0 = new UndertowBuilderCustomizer[5];
      UndertowBuilderCustomizer undertowBuilderCustomizer0 = mock(UndertowBuilderCustomizer.class, new ViolatedAssumptionAnswer());
      undertowBuilderCustomizerArray0[0] = undertowBuilderCustomizer0;
      undertowBuilderCustomizerArray0[1] = undertowBuilderCustomizerArray0[0];
      AprEndpoint aprEndpoint0 = new AprEndpoint();
      InetAddress inetAddress0 = aprEndpoint0.getAddress();
      undertowEmbeddedServletContainerFactory0.setAddress(inetAddress0);
      undertowBuilderCustomizerArray0[2] = undertowBuilderCustomizerArray0[1];
      undertowBuilderCustomizerArray0[3] = undertowBuilderCustomizerArray0[2];
      undertowBuilderCustomizerArray0[4] = undertowBuilderCustomizerArray0[3];
      undertowEmbeddedServletContainerFactory0.addBuilderCustomizers(undertowBuilderCustomizerArray0);
      Integer integer0 = Opcodes.LONG;
      undertowEmbeddedServletContainerFactory0.setIoThreads(integer0);
      boolean boolean1 = undertowEmbeddedServletContainerFactory0.isAccessLogEnabled();
      ServletContextInitializer[] servletContextInitializerArray0 = new ServletContextInitializer[6];
      ServletListenerRegistrationBean<DefaultEditorKit.InsertTabAction> servletListenerRegistrationBean0 = new ServletListenerRegistrationBean<DefaultEditorKit.InsertTabAction>();
      servletContextInitializerArray0[0] = (ServletContextInitializer) servletListenerRegistrationBean0;
      ServletListenerRegistrationBean<DefaultEditorKit.InsertTabAction> servletListenerRegistrationBean1 = new ServletListenerRegistrationBean<DefaultEditorKit.InsertTabAction>();
      servletContextInitializerArray0[1] = (ServletContextInitializer) servletListenerRegistrationBean1;
      String string0 = "Jg2J9";
      ServletRegistrationBean[] servletRegistrationBeanArray0 = new ServletRegistrationBean[3];
      MockServletContext mockServletContext0 = new MockServletContext();
      Class<Servlet> class0 = Servlet.class;
      // Undeclared exception!
      try { 
        mockServletContext0.createServlet(class0);
      } catch(AbstractMethodError e) {
      }
  }

  @Test(timeout = 11000)
  public void test01()  throws Throwable  {
      int int0 = 1;
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory(int0);
      Integer integer0 = groovyjarjarasm.asm.Opcodes.FLOAT;
      undertowEmbeddedServletContainerFactory0.setBufferSize(integer0);
      boolean boolean0 = undertowEmbeddedServletContainerFactory0.isAccessLogEnabled();
      Integer integer1 = null;
      undertowEmbeddedServletContainerFactory0.setBufferSize(integer1);
      undertowEmbeddedServletContainerFactory0.setWorkerThreads(integer0);
      boolean boolean1 = true;
      undertowEmbeddedServletContainerFactory0.setAccessLogEnabled(boolean1);
      boolean boolean2 = false;
      Boolean boolean3 = Boolean.valueOf(boolean2);
      undertowEmbeddedServletContainerFactory0.setDirectBuffers(boolean3);
      boolean boolean4 = false;
      undertowEmbeddedServletContainerFactory0.setAccessLogEnabled(boolean4);
      undertowEmbeddedServletContainerFactory0.setBuffersPerRegion(integer1);
      String string0 = "Xo98867";
      undertowEmbeddedServletContainerFactory0.setAccessLogPattern(string0);
  }

  @Test(timeout = 11000)
  public void test02()  throws Throwable  {
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory();
      String string0 = "";
      undertowEmbeddedServletContainerFactory0.setAccessLogPattern(string0);
      SynchronousQueue<UndertowDeploymentInfoCustomizer> synchronousQueue0 = new SynchronousQueue<UndertowDeploymentInfoCustomizer>();
      UndertowDeploymentInfoCustomizer undertowDeploymentInfoCustomizer0 = null;
      // Undeclared exception!
      try { 
        synchronousQueue0.add(undertowDeploymentInfoCustomizer0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.SynchronousQueue", e);
      }
  }

  @Test(timeout = 11000)
  public void test03()  throws Throwable  {
      String string0 = "";
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      int int0 = 0;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory(string0, int0);
      Collection<UndertowBuilderCustomizer> collection0 = undertowEmbeddedServletContainerFactory0.getBuilderCustomizers();
      ServletContextInitializer[] servletContextInitializerArray0 = new ServletContextInitializer[3];
      String string1 = null;
      String[] stringArray0 = new String[3];
      stringArray0[0] = string0;
      stringArray0[1] = string0;
      stringArray0[2] = string0;
      boolean boolean1 = true;
      FileSystemXmlApplicationContext fileSystemXmlApplicationContext0 = null;
      try {
        fileSystemXmlApplicationContext0 = new FileSystemXmlApplicationContext(stringArray0, boolean1);
      } catch(RuntimeException e) {
         //
         // IOException parsing XML document from file [/server/study-execution/new-nimrod/nimrod-hunoroutput-test-dest/spring-boot/ea8107b6a53fa60b5f23b33e1b6d2e88bb60133c/evosuite_18]; nested exception is java.io.FileNotFoundException
         //
         verifyException("org.springframework.beans.factory.xml.XmlBeanDefinitionReader", e);
      }
  }

  @Test(timeout = 11000)
  public void test04()  throws Throwable  {
      int int0 = 0;
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory(int0);
      Integer integer0 = Opcodes.DOUBLE;
      int int1 = (-2901);
      int int2 = 0;
      int int3 = Integer.compareUnsigned(int1, int2);
      int int4 = 1644;
      String string0 = "qgxZ#";
      Integer integer1 = groovyjarjarasm.asm.Opcodes.UNINITIALIZED_THIS;
      Integer integer2 = Integer.getInteger(string0, integer1);
      int int5 = (-561);
      int int6 = Integer.remainderUnsigned(int4, int5);
      undertowEmbeddedServletContainerFactory0.setIoThreads(integer0);
      boolean boolean0 = false;
      undertowEmbeddedServletContainerFactory0.setUseForwardHeaders(boolean0);
      String[] stringArray0 = new String[5];
      stringArray0[0] = string0;
      stringArray0[1] = string0;
      stringArray0[2] = string0;
      stringArray0[3] = string0;
      String string1 = "PK(?";
      stringArray0[4] = string1;
      boolean boolean1 = true;
      Class<Object>[] classArray0 = (Class<Object>[]) Array.newInstance(Class.class, 8);
      Class<Object> class0 = Object.class;
      classArray0[0] = class0;
      Class<Object> class1 = Object.class;
      classArray0[1] = class1;
      Class<Object> class2 = Object.class;
      classArray0[2] = class2;
      Class<Object> class3 = Object.class;
      classArray0[3] = class3;
      Class<Object> class4 = Object.class;
      classArray0[4] = class4;
      Class<Object> class5 = Object.class;
      classArray0[5] = class5;
      Class<Object> class6 = Object.class;
      classArray0[6] = class6;
      Class<Object> class7 = Object.class;
      classArray0[7] = class7;
      AnnotationConfigApplicationContext annotationConfigApplicationContext0 = new AnnotationConfigApplicationContext(classArray0);
      FileSystemXmlApplicationContext fileSystemXmlApplicationContext0 = null;
      try {
        fileSystemXmlApplicationContext0 = new FileSystemXmlApplicationContext(stringArray0, boolean1, annotationConfigApplicationContext0);
      } catch(RuntimeException e) {
         //
         // IOException parsing XML document from file [/server/study-execution/new-nimrod/nimrod-hunoroutput-test-dest/spring-boot/ea8107b6a53fa60b5f23b33e1b6d2e88bb60133c/evosuite_18/qgxZ#]; nested exception is java.io.FileNotFoundException
         //
         verifyException("org.springframework.beans.factory.xml.XmlBeanDefinitionReader", e);
      }
  }

  @Test(timeout = 11000)
  public void test05()  throws Throwable  {
      int int0 = 3313;
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory(int0);
      StandardHost standardHost0 = new StandardHost();
      boolean boolean0 = false;
      String string0 = "default";
      standardHost0.setDomain(string0);
      standardHost0.removeAlias(string0);
      standardHost0.setCreateDirs(boolean0);
      File file0 = standardHost0.getAppBaseFile();
      Integer integer0 = groovyjarjarasm.asm.Opcodes.FLOAT;
      undertowEmbeddedServletContainerFactory0.setBuffersPerRegion(integer0);
      int int1 = 127;
      String string1 = Integer.toUnsignedString(int1);
      undertowEmbeddedServletContainerFactory0.setAccessLogDirectory(file0);
      boolean boolean1 = true;
      undertowEmbeddedServletContainerFactory0.setAccessLogEnabled(boolean1);
      UndertowDeploymentInfoCustomizer[] undertowDeploymentInfoCustomizerArray0 = new UndertowDeploymentInfoCustomizer[4];
      UndertowDeploymentInfoCustomizer undertowDeploymentInfoCustomizer0 = mock(UndertowDeploymentInfoCustomizer.class, new ViolatedAssumptionAnswer());
      undertowDeploymentInfoCustomizerArray0[0] = undertowDeploymentInfoCustomizer0;
      int int2 = (-1);
      int int3 = Integer.compareUnsigned(int2, int0);
      undertowDeploymentInfoCustomizerArray0[1] = undertowDeploymentInfoCustomizerArray0[0];
      undertowDeploymentInfoCustomizerArray0[2] = undertowDeploymentInfoCustomizerArray0[1];
      undertowDeploymentInfoCustomizerArray0[3] = undertowDeploymentInfoCustomizerArray0[2];
      undertowEmbeddedServletContainerFactory0.addDeploymentInfoCustomizers(undertowDeploymentInfoCustomizerArray0);
      int int4 = 3102;
      int int5 = Integer.max(int0, int4);
      Integer integer1 = groovyjarjarasm.asm.Opcodes.DOUBLE;
      undertowEmbeddedServletContainerFactory0.setWorkerThreads(integer1);
      Boolean boolean2 = null;
      undertowEmbeddedServletContainerFactory0.setDirectBuffers(boolean2);
      undertowEmbeddedServletContainerFactory0.setBufferSize(integer0);
      Integer integer2 = Opcodes.INTEGER;
      undertowEmbeddedServletContainerFactory0.setBuffersPerRegion(integer2);
      ServletContextInitializer[] servletContextInitializerArray0 = new ServletContextInitializer[7];
      ServletListenerRegistrationBean<DefaultEditorKit.InsertTabAction> servletListenerRegistrationBean0 = new ServletListenerRegistrationBean<DefaultEditorKit.InsertTabAction>();
      servletContextInitializerArray0[0] = (ServletContextInitializer) servletListenerRegistrationBean0;
      String string2 = "";
      ServletRegistrationBean[] servletRegistrationBeanArray0 = new ServletRegistrationBean[0];
      DelegatingFilterProxyRegistrationBean delegatingFilterProxyRegistrationBean0 = null;
      try {
        delegatingFilterProxyRegistrationBean0 = new DelegatingFilterProxyRegistrationBean(string2, servletRegistrationBeanArray0);
      } catch(IllegalArgumentException e) {
         //
         // TargetBeanName must not be null or empty
         //
         verifyException("org.springframework.util.Assert", e);
      }
  }

  @Test(timeout = 11000)
  public void test06()  throws Throwable  {
      Integer integer0 = JLayeredPane.POPUP_LAYER;
      StreamConnection streamConnection0 = mock(StreamConnection.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = false;
      int int0 = 0;
      byte[] byteArray0 = new byte[5];
      byte byte0 = (byte) (-4);
      byteArray0[0] = byte0;
      byte byte1 = (byte) (-91);
      byteArray0[1] = byte1;
      byte byte2 = (byte) (-1);
      byteArray0[2] = byte2;
      byte byte3 = (byte)0;
      byteArray0[3] = byte3;
      byte byte4 = (byte)0;
      byteArray0[4] = byte4;
      int int1 = 2417;
      // Undeclared exception!
      try { 
        ByteBuffer.wrap(byteArray0, (int) byteArray0[1], int1);
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.ByteBuffer", e);
      }
  }

  @Test(timeout = 11000)
  public void test07()  throws Throwable  {
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory();
      PriorityQueue<UndertowBuilderCustomizer> priorityQueue0 = new PriorityQueue<UndertowBuilderCustomizer>();
      FilterRegistrationBean filterRegistrationBean0 = new FilterRegistrationBean();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp/undertow-docbase.0.8080");
      boolean boolean0 = FileSystemHandling.createFolder(evoSuiteFile0);
      int int0 = 0;
      filterRegistrationBean0.setOrder(int0);
      RequestContextFilter requestContextFilter0 = new RequestContextFilter();
      filterRegistrationBean0.setFilter(requestContextFilter0);
      boolean boolean1 = true;
      filterRegistrationBean0.setEnabled(boolean1);
      boolean boolean2 = priorityQueue0.remove((Object) filterRegistrationBean0);
      undertowEmbeddedServletContainerFactory0.setBuilderCustomizers(priorityQueue0);
      Integer integer0 = JLayeredPane.PALETTE_LAYER;
      int int1 = 0;
      int int2 = Integer.sum(filterRegistrationBean0.REQUEST_WRAPPER_FILTER_MAX_ORDER, int1);
      undertowEmbeddedServletContainerFactory0.setBufferSize(integer0);
      ServletContextInitializer[] servletContextInitializerArray0 = new ServletContextInitializer[3];
      servletContextInitializerArray0[0] = (ServletContextInitializer) filterRegistrationBean0;
      servletContextInitializerArray0[1] = (ServletContextInitializer) filterRegistrationBean0;
      servletContextInitializerArray0[2] = (ServletContextInitializer) filterRegistrationBean0;
      // Undeclared exception!
      try { 
        undertowEmbeddedServletContainerFactory0.getEmbeddedServletContainer(servletContextInitializerArray0);
      } catch(RuntimeException e) {
         //
         // java.security.AccessControlException: access denied (\"java.lang.RuntimePermission\" \"io.undertow.servlet.CREATE_INITIAL_HANDLER\")
         //
         verifyException("io.undertow.servlet.core.DeploymentManagerImpl", e);
      }
  }

  @Test(timeout = 11000)
  public void test08()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory();
      Undertow.Builder undertow_Builder0 = null;
      ServletContainerImpl servletContainerImpl0 = new ServletContainerImpl();
      String string0 = "";
      DeploymentManager deploymentManager0 = servletContainerImpl0.getDeploymentByPath(string0);
      DeploymentInfo deploymentInfo0 = new DeploymentInfo();
      ServletExtension servletExtension0 = mock(ServletExtension.class, new ViolatedAssumptionAnswer());
      DeploymentInfo deploymentInfo1 = deploymentInfo0.addServletExtension(servletExtension0);
      String string1 = "}\"Z9g~P";
      IdentityManager identityManager0 = mock(IdentityManager.class, new ViolatedAssumptionAnswer());
      BasicAuthenticationMechanism.Factory basicAuthenticationMechanism_Factory0 = new BasicAuthenticationMechanism.Factory(identityManager0);
      DeploymentInfo deploymentInfo2 = deploymentInfo1.addAuthenticationMechanism(string1, basicAuthenticationMechanism_Factory0);
      boolean boolean0 = true;
      ByteRangeHandler.Wrapper byteRangeHandler_Wrapper0 = new ByteRangeHandler.Wrapper(boolean0);
      DeploymentInfo deploymentInfo3 = deploymentInfo2.addInitialHandlerChainWrapper(byteRangeHandler_Wrapper0);
      String string2 = "Customizers must not be null";
      AuthenticationMechanism authenticationMechanism0 = null;
      DeploymentInfo deploymentInfo4 = deploymentInfo3.addFirstAuthenticationMechanism(string2, authenticationMechanism0);
      DeploymentManager deploymentManager1 = servletContainerImpl0.addDeployment(deploymentInfo4);
      int int0 = 4262;
      UndertowEmbeddedServletContainer undertowEmbeddedServletContainer0 = undertowEmbeddedServletContainerFactory0.getUndertowEmbeddedServletContainer(undertow_Builder0, deploymentManager0, int0);
      ServletContextInitializer[] servletContextInitializerArray0 = new ServletContextInitializer[2];
      FilterRegistrationBean filterRegistrationBean0 = new FilterRegistrationBean();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp/undertow-docbase.0.8080");
      boolean boolean1 = FileSystemHandling.appendStringToFile(evoSuiteFile0, string2);
      servletContextInitializerArray0[0] = (ServletContextInitializer) filterRegistrationBean0;
      FilterRegistrationBean filterRegistrationBean1 = new FilterRegistrationBean();
      servletContextInitializerArray0[1] = (ServletContextInitializer) filterRegistrationBean1;
      // Undeclared exception!
      try { 
        undertowEmbeddedServletContainerFactory0.getEmbeddedServletContainer(servletContextInitializerArray0);
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: Filter must not be null
         //
         verifyException("io.undertow.servlet.core.DeploymentManagerImpl", e);
      }
  }

  @Test(timeout = 11000)
  public void test09()  throws Throwable  {
      long long0 = 2960L;
      System.setCurrentTimeMillis(long0);
      int int0 = 2705;
      Random.setNextRandom(int0);
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = FileSystemHandling.createFolder(evoSuiteFile0);
      int int1 = 0;
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory(int1);
      boolean boolean1 = true;
      undertowEmbeddedServletContainerFactory0.setAccessLogEnabled(boolean1);
      int int2 = 766;
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      JspServlet jspServlet0 = new JspServlet();
      StandardContext standardContext0 = new StandardContext();
      Map<String, String> map0 = standardContext0.findPostConstructMethods();
      ResourceLoader resourceLoader0 = null;
      undertowEmbeddedServletContainerFactory0.setResourceLoader(resourceLoader0);
      jspServlet0.setInitParameters(map0);
      jspServlet0.setRegistered(boolean1);
      undertowEmbeddedServletContainerFactory0.setJspServlet(jspServlet0);
      undertowEmbeddedServletContainerFactory0.setSessionTimeout(int2, timeUnit0);
      String string0 = "";
      undertowEmbeddedServletContainerFactory0.setAccessLogPattern(string0);
      Random.setNextRandom(int0);
      ErrorPage[] errorPageArray0 = new ErrorPage[8];
      ErrorPage errorPage0 = new ErrorPage(string0);
      errorPageArray0[0] = errorPage0;
      ErrorPage errorPage1 = new ErrorPage(string0);
      errorPageArray0[1] = errorPage1;
      HttpStatus httpStatus0 = HttpStatus.REQUEST_URI_TOO_LONG;
      ErrorPage errorPage2 = new ErrorPage(httpStatus0, string0);
      errorPageArray0[2] = errorPage2;
      Class<Throwable> class0 = Throwable.class;
      String string1 = null;
      ErrorPage errorPage3 = new ErrorPage(class0, string1);
      errorPageArray0[3] = errorPage3;
      Class<ExecutionException> class1 = ExecutionException.class;
      ErrorPage errorPage4 = new ErrorPage(class1, string0);
      errorPageArray0[4] = errorPage4;
      Class<ExecutionException> class2 = ExecutionException.class;
      String string2 = "+68~{I%IN x%]!";
      ErrorPage errorPage5 = new ErrorPage(class2, string2);
      errorPageArray0[5] = errorPage5;
      String string3 = "Failed to create access log directory '";
      ErrorPage errorPage6 = new ErrorPage(class0, string3);
      errorPageArray0[6] = errorPage6;
      ErrorPage errorPage7 = new ErrorPage(string3);
      errorPageArray0[7] = errorPage7;
      undertowEmbeddedServletContainerFactory0.addErrorPages(errorPageArray0);
      int int3 = (-1644);
      Random.setNextRandom(int3);
      long long1 = 1575L;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      System.setCurrentTimeMillis(long1);
      System.setCurrentTimeMillis(int1);
      System.setCurrentTimeMillis(int1);
      ServletContextInitializer[] servletContextInitializerArray0 = new ServletContextInitializer[1];
      FilterRegistrationBean filterRegistrationBean0 = new FilterRegistrationBean();
      servletContextInitializerArray0[0] = (ServletContextInitializer) filterRegistrationBean0;
      // Undeclared exception!
      try { 
        undertowEmbeddedServletContainerFactory0.getEmbeddedServletContainer(servletContextInitializerArray0);
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: Filter must not be null
         //
         verifyException("io.undertow.servlet.core.DeploymentManagerImpl", e);
      }
  }

  @Test(timeout = 11000)
  public void test10()  throws Throwable  {
      String string0 = "";
      int int0 = (-3833);
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory(string0, int0);
      Undertow.Builder undertow_Builder0 = Undertow.builder();
      boolean boolean0 = false;
      ByteRangeHandler.Wrapper byteRangeHandler_Wrapper0 = new ByteRangeHandler.Wrapper(boolean0);
      RoutingHandler routingHandler0 = new RoutingHandler();
      HttpHandler httpHandler0 = byteRangeHandler_Wrapper0.wrap(routingHandler0);
      Undertow.Builder undertow_Builder1 = undertow_Builder0.setHandler(httpHandler0);
      ServletContainerImpl servletContainerImpl0 = new ServletContainerImpl();
      DeploymentManager deploymentManager0 = servletContainerImpl0.getDeployment(string0);
      int int1 = 113;
      UndertowEmbeddedServletContainer undertowEmbeddedServletContainer0 = undertowEmbeddedServletContainerFactory0.getUndertowEmbeddedServletContainer(undertow_Builder0, deploymentManager0, int1);
  }

  @Test(timeout = 11000)
  public void test11()  throws Throwable  {
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory();
      PriorityBlockingQueue<UndertowDeploymentInfoCustomizer> priorityBlockingQueue0 = new PriorityBlockingQueue<UndertowDeploymentInfoCustomizer>();
      undertowEmbeddedServletContainerFactory0.setDeploymentInfoCustomizers(priorityBlockingQueue0);
      boolean boolean0 = undertowEmbeddedServletContainerFactory0.isAccessLogEnabled();
  }

  @Test(timeout = 11000)
  public void test12()  throws Throwable  {
      String string0 = "lifecycle-callback-method";
      int int0 = 5790;
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = null;
      try {
        undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory(string0, int0);
      } catch(IllegalArgumentException e) {
         //
         // ContextPath must start with '/' and not end with '/'
         //
         verifyException("org.springframework.boot.context.embedded.AbstractConfigurableEmbeddedServletContainer", e);
      }
  }

  @Test(timeout = 11000)
  public void test13()  throws Throwable  {
      int int0 = (-1629);
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory(int0);
      UndertowBuilderCustomizer[] undertowBuilderCustomizerArray0 = new UndertowBuilderCustomizer[0];
      undertowEmbeddedServletContainerFactory0.addBuilderCustomizers(undertowBuilderCustomizerArray0);
      Integer integer0 = Opcodes.NULL;
      String string0 = "";
      Integer integer1 = Integer.getInteger(string0);
      undertowEmbeddedServletContainerFactory0.setIoThreads(integer0);
  }

  @Test(timeout = 11000)
  public void test14()  throws Throwable  {
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory();
      ServletContextInitializer[] servletContextInitializerArray0 = new ServletContextInitializer[0];
      // Undeclared exception!
      try { 
        undertowEmbeddedServletContainerFactory0.getEmbeddedServletContainer(servletContextInitializerArray0);
      } catch(RuntimeException e) {
         //
         // java.security.AccessControlException: access denied (\"java.lang.RuntimePermission\" \"io.undertow.servlet.CREATE_INITIAL_HANDLER\")
         //
         verifyException("io.undertow.servlet.core.DeploymentManagerImpl", e);
      }
  }

  @Test(timeout = 11000)
  public void test15()  throws Throwable  {
      int int0 = 3099;
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory(int0);
      ServletContextInitializer[] servletContextInitializerArray0 = new ServletContextInitializer[1];
      ServletListenerRegistrationBean<DefaultEditorKit.InsertTabAction> servletListenerRegistrationBean0 = new ServletListenerRegistrationBean<DefaultEditorKit.InsertTabAction>();
      servletContextInitializerArray0[0] = (ServletContextInitializer) servletListenerRegistrationBean0;
      // Undeclared exception!
      try { 
        undertowEmbeddedServletContainerFactory0.getEmbeddedServletContainer(servletContextInitializerArray0);
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: Failed to add listener 'null' to servlet context
         //
         verifyException("io.undertow.servlet.core.DeploymentManagerImpl", e);
      }
  }

  @Test(timeout = 11000)
  public void test16()  throws Throwable  {
      int int0 = 0;
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory(int0);
      JspPropertyGroup jspPropertyGroup0 = new JspPropertyGroup();
      Boolean boolean0 = jspPropertyGroup0.getScriptingInvalid();
      boolean boolean1 = true;
      int int1 = Boolean.compare(boolean1, boolean1);
      boolean boolean2 = false;
      boolean boolean3 = false;
      String string0 = null;
      jspPropertyGroup0.setScriptingInvalid(string0);
      boolean boolean4 = false;
      boolean boolean5 = Boolean.logicalXor(boolean3, boolean4);
      boolean boolean6 = Boolean.logicalXor(boolean1, boolean2);
      boolean boolean7 = false;
      boolean boolean8 = Boolean.logicalOr(boolean7, boolean7);
      undertowEmbeddedServletContainerFactory0.setDirectBuffers(boolean0);
      ServletContextInitializer[] servletContextInitializerArray0 = new ServletContextInitializer[3];
      ServletRegistrationBean servletRegistrationBean0 = new ServletRegistrationBean();
      servletContextInitializerArray0[0] = (ServletContextInitializer) servletRegistrationBean0;
      ServletListenerRegistrationBean<DefaultEditorKit.InsertTabAction> servletListenerRegistrationBean0 = new ServletListenerRegistrationBean<DefaultEditorKit.InsertTabAction>();
      servletContextInitializerArray0[1] = (ServletContextInitializer) servletListenerRegistrationBean0;
      RemoteAddrFilter remoteAddrFilter0 = new RemoteAddrFilter();
      ServletRegistrationBean[] servletRegistrationBeanArray0 = new ServletRegistrationBean[1];
      servletRegistrationBeanArray0[0] = servletRegistrationBean0;
      FilterRegistrationBean filterRegistrationBean0 = new FilterRegistrationBean(remoteAddrFilter0, servletRegistrationBeanArray0);
      servletContextInitializerArray0[2] = (ServletContextInitializer) filterRegistrationBean0;
      // Undeclared exception!
      try { 
        undertowEmbeddedServletContainerFactory0.getEmbeddedServletContainer(servletContextInitializerArray0);
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: Servlet must not be null
         //
         verifyException("io.undertow.servlet.core.DeploymentManagerImpl", e);
      }
  }

  @Test(timeout = 11000)
  public void test17()  throws Throwable  {
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory();
      DefaultListableBeanFactory defaultListableBeanFactory0 = new DefaultListableBeanFactory();
      GenericWebApplicationContext genericWebApplicationContext0 = new GenericWebApplicationContext(defaultListableBeanFactory0);
      DefaultListableBeanFactory defaultListableBeanFactory1 = new DefaultListableBeanFactory(genericWebApplicationContext0);
      GenericApplicationContext genericApplicationContext0 = new GenericApplicationContext(defaultListableBeanFactory1);
      undertowEmbeddedServletContainerFactory0.setResourceLoader(genericApplicationContext0);
  }

  @Test(timeout = 11000)
  public void test18()  throws Throwable  {
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory();
      boolean boolean0 = undertowEmbeddedServletContainerFactory0.isAccessLogEnabled();
      Undertow.Builder undertow_Builder0 = null;
      ServletContainerImpl servletContainerImpl0 = new ServletContainerImpl();
      String string0 = "\"61\"R^[H~Y)dcK";
      DeploymentManager deploymentManager0 = servletContainerImpl0.getDeployment(string0);
      int int0 = (-796);
      UndertowEmbeddedServletContainer undertowEmbeddedServletContainer0 = undertowEmbeddedServletContainerFactory0.getUndertowEmbeddedServletContainer(undertow_Builder0, deploymentManager0, int0);
      Integer integer0 = JLayeredPane.FRAME_CONTENT_LAYER;
      int int1 = Integer.compare(int0, int0);
      Integer integer1 = Integer.getInteger(string0, int0);
      undertowEmbeddedServletContainerFactory0.setWorkerThreads(integer0);
      boolean boolean1 = undertowEmbeddedServletContainerFactory0.isAccessLogEnabled();
      Collection<UndertowBuilderCustomizer> collection0 = undertowEmbeddedServletContainerFactory0.getBuilderCustomizers();
      String string1 = null;
      String string2 = "i^>0DH<',WDpttqKK/O";
      String string3 = "'";
      try { 
        MockURI.URI(string1, string0, string2, string3, string2);
      } catch(URISyntaxException e) {
         //
         // Illegal character in hostname at index 2: //%2261%22R%5E[H~Y)dcKi%5E%3E0DH%3C',WDpttqKK/O?'#i%5E%3E0DH%3C',WDpttqKK/O
         //
         verifyException("java.net.URI$Parser", e);
      }
  }

  @Test(timeout = 11000)
  public void test19()  throws Throwable  {
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory();
      TreeSet<UndertowBuilderCustomizer> treeSet0 = new TreeSet<UndertowBuilderCustomizer>();
      undertowEmbeddedServletContainerFactory0.setBuilderCustomizers(treeSet0);
  }

  @Test(timeout = 11000)
  public void test20()  throws Throwable  {
      String string0 = "";
      int int0 = 0;
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory(string0, int0);
      UndertowBuilderCustomizer[] undertowBuilderCustomizerArray0 = new UndertowBuilderCustomizer[0];
      int int1 = 1296;
      undertowEmbeddedServletContainerFactory0.setPort(int1);
      undertowEmbeddedServletContainerFactory0.addBuilderCustomizers(undertowBuilderCustomizerArray0);
      Collection<UndertowDeploymentInfoCustomizer> collection0 = undertowEmbeddedServletContainerFactory0.getDeploymentInfoCustomizers();
  }

  @Test(timeout = 11000)
  public void test21()  throws Throwable  {
      String string0 = "";
      int int0 = (-121);
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory(string0, int0);
      boolean boolean0 = true;
      undertowEmbeddedServletContainerFactory0.setJspServletClassName(string0);
      undertowEmbeddedServletContainerFactory0.setRegisterJspServlet(boolean0);
      UndertowDeploymentInfoCustomizer[] undertowDeploymentInfoCustomizerArray0 = null;
      // Undeclared exception!
      try { 
        undertowEmbeddedServletContainerFactory0.addDeploymentInfoCustomizers(undertowDeploymentInfoCustomizerArray0);
      } catch(IllegalArgumentException e) {
         //
         // UndertowDeploymentInfoCustomizers must not be null
         //
         verifyException("org.springframework.util.Assert", e);
      }
  }

  @Test(timeout = 11000)
  public void test22()  throws Throwable  {
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory();
      UndertowBuilderCustomizer[] undertowBuilderCustomizerArray0 = null;
      // Undeclared exception!
      try { 
        undertowEmbeddedServletContainerFactory0.addBuilderCustomizers(undertowBuilderCustomizerArray0);
      } catch(IllegalArgumentException e) {
         //
         // Customizers must not be null
         //
         verifyException("org.springframework.util.Assert", e);
      }
  }

  @Test(timeout = 11000)
  public void test23()  throws Throwable  {
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory();
      int int0 = 1426;
      undertowEmbeddedServletContainerFactory0.setSessionTimeout(int0);
      boolean boolean0 = undertowEmbeddedServletContainerFactory0.isAccessLogEnabled();
      Collection<UndertowDeploymentInfoCustomizer> collection0 = undertowEmbeddedServletContainerFactory0.getDeploymentInfoCustomizers();
      int int1 = 1082;
      String string0 = "Y5q";
      InetAddress inetAddress0 = MockInetAddress.getByName(string0);
      undertowEmbeddedServletContainerFactory0.setAddress(inetAddress0);
      LinkedMultiValueMap<Object, UndertowDeploymentInfoCustomizer> linkedMultiValueMap0 = new LinkedMultiValueMap<Object, UndertowDeploymentInfoCustomizer>(int1);
      LinkedMultiValueMap<Object, UndertowDeploymentInfoCustomizer> linkedMultiValueMap1 = linkedMultiValueMap0.clone();
      List<UndertowDeploymentInfoCustomizer> list0 = linkedMultiValueMap1.get(undertowEmbeddedServletContainerFactory0);
      // Undeclared exception!
      try { 
        undertowEmbeddedServletContainerFactory0.setDeploymentInfoCustomizers(list0);
      } catch(IllegalArgumentException e) {
         //
         // Customizers must not be null
         //
         verifyException("org.springframework.util.Assert", e);
      }
  }

  @Test(timeout = 11000)
  public void test24()  throws Throwable  {
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory();
      Integer integer0 = JLayeredPane.POPUP_LAYER;
      String string0 = "3~Q<lrA";
      boolean boolean0 = false;
      undertowEmbeddedServletContainerFactory0.setPersistSession(boolean0);
      int int0 = (-1553);
      int int1 = Integer.divideUnsigned(int0, int0);
      int int2 = 187;
      int int3 = (-904);
      int int4 = Integer.compareUnsigned(int2, int3);
      Integer integer1 = Integer.getInteger(string0);
      int int5 = (-2951);
      int int6 = 0;
      String string1 = "among candidates: ";
      int int7 = 200;
      int int8 = Integer.remainderUnsigned(int6, int7);
      int int9 = 0;
      int int10 = Integer.divideUnsigned(int8, int7);
      int int11 = Integer.remainderUnsigned(int9, int7);
      Integer integer2 = Integer.getInteger(string0);
      Integer integer3 = Integer.getInteger(string1, int7);
      Integer integer4 = null;
      undertowEmbeddedServletContainerFactory0.setWorkerThreads(integer4);
      int int12 = Integer.compareUnsigned(int5, int6);
      undertowEmbeddedServletContainerFactory0.setBuffersPerRegion(integer0);
      UndertowBuilderCustomizer[] undertowBuilderCustomizerArray0 = new UndertowBuilderCustomizer[2];
      UndertowBuilderCustomizer undertowBuilderCustomizer0 = mock(UndertowBuilderCustomizer.class, new ViolatedAssumptionAnswer());
      undertowBuilderCustomizerArray0[0] = undertowBuilderCustomizer0;
      undertowBuilderCustomizerArray0[1] = undertowBuilderCustomizerArray0[0];
      undertowEmbeddedServletContainerFactory0.addBuilderCustomizers(undertowBuilderCustomizerArray0);
      LinkedList<UndertowDeploymentInfoCustomizer> linkedList0 = new LinkedList<UndertowDeploymentInfoCustomizer>();
      undertowEmbeddedServletContainerFactory0.setDeploymentInfoCustomizers(linkedList0);
      StandardHost standardHost0 = new StandardHost();
      File file0 = standardHost0.getAppBaseFile();
      undertowEmbeddedServletContainerFactory0.setAccessLogDirectory(file0);
      Collection<UndertowBuilderCustomizer> collection0 = null;
      // Undeclared exception!
      try { 
        undertowEmbeddedServletContainerFactory0.setBuilderCustomizers(collection0);
      } catch(IllegalArgumentException e) {
         //
         // Customizers must not be null
         //
         verifyException("org.springframework.util.Assert", e);
      }
  }

  @Test(timeout = 11000)
  public void test25()  throws Throwable  {
      int int0 = 49529;
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory(int0);
      Integer integer0 = null;
      undertowEmbeddedServletContainerFactory0.setWorkerThreads(integer0);
      JspPropertyGroup jspPropertyGroup0 = new JspPropertyGroup();
      String string0 = "IS_ERROR";
      jspPropertyGroup0.setScriptingInvalid(string0);
      Boolean boolean0 = jspPropertyGroup0.getDeferredSyntax();
      boolean boolean1 = false;
      boolean boolean2 = true;
      String string1 = "";
      jspPropertyGroup0.addUrlPattern(string1);
      boolean boolean3 = Boolean.logicalXor(boolean1, boolean2);
      boolean boolean4 = false;
      boolean boolean5 = Boolean.logicalOr(boolean4, boolean4);
      boolean boolean6 = Boolean.logicalXor(boolean4, boolean4);
      undertowEmbeddedServletContainerFactory0.setDirectBuffers(boolean0);
      String string2 = "*V&jEhS,w";
      undertowEmbeddedServletContainerFactory0.setAccessLogPattern(string2);
      undertowEmbeddedServletContainerFactory0.setWorkerThreads(integer0);
      undertowEmbeddedServletContainerFactory0.setAccessLogEnabled(boolean5);
      Collection<UndertowDeploymentInfoCustomizer> collection0 = undertowEmbeddedServletContainerFactory0.getDeploymentInfoCustomizers();
      Integer integer1 = groovyjarjarasm.asm.Opcodes.UNINITIALIZED_THIS;
      undertowEmbeddedServletContainerFactory0.setBuffersPerRegion(integer1);
      ServletContextInitializer[] servletContextInitializerArray0 = null;
      // Undeclared exception!
      try { 
        undertowEmbeddedServletContainerFactory0.getEmbeddedServletContainer(servletContextInitializerArray0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 11000)
  public void test26()  throws Throwable  {
      int int0 = 9000;
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory(int0);
      String string0 = null;
      undertowEmbeddedServletContainerFactory0.setAccessLogPattern(string0);
      UndertowBuilderCustomizer[] undertowBuilderCustomizerArray0 = new UndertowBuilderCustomizer[3];
      EvoName evoName0 = null;
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("src/main/webapp");
      boolean boolean0 = FileSystemHandling.createFolder(evoSuiteFile0);
      ThreadPoolExecutor.DiscardPolicy threadPoolExecutor_DiscardPolicy0 = new ThreadPoolExecutor.DiscardPolicy();
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(int0, threadPoolExecutor_DiscardPolicy0);
      UndertowBuilderCustomizer undertowBuilderCustomizer0 = mock(UndertowBuilderCustomizer.class, new ViolatedAssumptionAnswer());
      undertowBuilderCustomizerArray0[0] = undertowBuilderCustomizer0;
      Undertow.Builder undertow_Builder0 = Undertow.builder();
      String string1 = "|H3byEjA$)";
      KeyManager[] keyManagerArray0 = new KeyManager[9];
      String string2 = "Invalid Authorization";
      X509KeyManager x509KeyManager0 = mock(X509KeyManager.class, new ViolatedAssumptionAnswer());
      AliasedX509KeyManager aliasedX509KeyManager0 = new AliasedX509KeyManager(string2, x509KeyManager0);
      AliasedX509ExtendedKeyManager aliasedX509ExtendedKeyManager0 = new AliasedX509ExtendedKeyManager(string1, aliasedX509KeyManager0);
      keyManagerArray0[0] = (KeyManager) aliasedX509ExtendedKeyManager0;
      AliasedX509ExtendedKeyManager aliasedX509ExtendedKeyManager1 = new AliasedX509ExtendedKeyManager(string1, aliasedX509KeyManager0);
      keyManagerArray0[1] = (KeyManager) aliasedX509ExtendedKeyManager1;
      String string3 = "requestedSessionIdFromCookie";
      AliasedX509KeyManager aliasedX509KeyManager1 = new AliasedX509KeyManager(string3, aliasedX509ExtendedKeyManager1);
      keyManagerArray0[2] = (KeyManager) aliasedX509KeyManager1;
      AliasedX509KeyManager aliasedX509KeyManager2 = new AliasedX509KeyManager(string3, aliasedX509KeyManager0);
      keyManagerArray0[3] = (KeyManager) aliasedX509KeyManager2;
      String string4 = "";
      AliasedX509ExtendedKeyManager aliasedX509ExtendedKeyManager2 = new AliasedX509ExtendedKeyManager(string4, aliasedX509KeyManager0);
      keyManagerArray0[4] = (KeyManager) aliasedX509ExtendedKeyManager2;
      AliasedX509ExtendedKeyManager aliasedX509ExtendedKeyManager3 = new AliasedX509ExtendedKeyManager(string2, aliasedX509ExtendedKeyManager0);
      keyManagerArray0[5] = (KeyManager) aliasedX509ExtendedKeyManager3;
      String string5 = "";
      AliasedX509ExtendedKeyManager aliasedX509ExtendedKeyManager4 = new AliasedX509ExtendedKeyManager(string5, aliasedX509KeyManager2);
      keyManagerArray0[6] = (KeyManager) aliasedX509ExtendedKeyManager4;
      String string6 = "spring-boot";
      AliasedX509KeyManager aliasedX509KeyManager3 = new AliasedX509KeyManager(string6, aliasedX509ExtendedKeyManager1);
      keyManagerArray0[7] = (KeyManager) aliasedX509KeyManager3;
      AliasedX509ExtendedKeyManager aliasedX509ExtendedKeyManager5 = new AliasedX509ExtendedKeyManager(string2, aliasedX509ExtendedKeyManager4);
      keyManagerArray0[8] = (KeyManager) aliasedX509ExtendedKeyManager5;
      TrustManager[] trustManagerArray0 = null;
      RoutingHandler routingHandler0 = new RoutingHandler();
      Undertow.Builder undertow_Builder1 = undertow_Builder0.addHttpsListener(int0, string1, keyManagerArray0, trustManagerArray0, (HttpHandler) routingHandler0);
      Undertow.Builder undertow_Builder2 = undertow_Builder1.setBufferSize(int0);
      int int1 = (-1);
      TrustManager[] trustManagerArray1 = new TrustManager[8];
      TrustManager trustManager0 = mock(TrustManager.class, new ViolatedAssumptionAnswer());
      trustManagerArray1[0] = trustManager0;
      trustManagerArray1[1] = trustManagerArray1[0];
      trustManagerArray1[2] = trustManagerArray1[1];
      trustManagerArray1[3] = trustManagerArray1[2];
      trustManagerArray1[4] = trustManagerArray1[3];
      trustManagerArray1[5] = trustManagerArray1[4];
      trustManagerArray1[6] = trustManagerArray1[5];
      trustManagerArray1[7] = trustManagerArray1[6];
      Undertow.Builder undertow_Builder3 = undertow_Builder2.addHttpsListener(int1, string3, keyManagerArray0, trustManagerArray1);
      Undertow.Builder undertow_Builder4 = undertow_Builder3.setWorkerThreads(int0);
      ServletContainerImpl servletContainerImpl0 = new ServletContainerImpl();
      String string7 = "";
      DeploymentManager deploymentManager0 = servletContainerImpl0.getDeploymentByPath(string7);
      int int2 = 0;
      UndertowEmbeddedServletContainer undertowEmbeddedServletContainer0 = undertowEmbeddedServletContainerFactory0.getUndertowEmbeddedServletContainer(undertow_Builder4, deploymentManager0, int2);
      undertowBuilderCustomizerArray0[1] = undertowBuilderCustomizerArray0[0];
      undertowBuilderCustomizerArray0[2] = undertowBuilderCustomizerArray0[1];
      undertowEmbeddedServletContainerFactory0.addBuilderCustomizers(undertowBuilderCustomizerArray0);
      ServletContextInitializer[] servletContextInitializerArray0 = new ServletContextInitializer[0];
      // Undeclared exception!
      try { 
        undertowEmbeddedServletContainerFactory0.getEmbeddedServletContainer(servletContextInitializerArray0);
      } catch(RuntimeException e) {
         //
         // java.security.AccessControlException: access denied (\"java.lang.RuntimePermission\" \"io.undertow.servlet.CREATE_INITIAL_HANDLER\")
         //
         verifyException("io.undertow.servlet.core.DeploymentManagerImpl", e);
      }
  }

  @Test(timeout = 11000)
  public void test27()  throws Throwable  {
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory();
      PriorityQueue<UndertowBuilderCustomizer> priorityQueue0 = new PriorityQueue<UndertowBuilderCustomizer>();
      FilterRegistrationBean filterRegistrationBean0 = new FilterRegistrationBean();
      int int0 = 0;
      filterRegistrationBean0.setOrder(int0);
      RequestContextFilter requestContextFilter0 = new RequestContextFilter();
      filterRegistrationBean0.setFilter(requestContextFilter0);
      boolean boolean0 = true;
      filterRegistrationBean0.setEnabled(boolean0);
      boolean boolean1 = priorityQueue0.remove((Object) filterRegistrationBean0);
      undertowEmbeddedServletContainerFactory0.setBuilderCustomizers(priorityQueue0);
      Integer integer0 = JLayeredPane.PALETTE_LAYER;
      int int1 = 0;
      boolean boolean2 = FileSystemHandling.shouldAllThrowIOExceptions();
      int int2 = Integer.sum(filterRegistrationBean0.REQUEST_WRAPPER_FILTER_MAX_ORDER, int1);
      undertowEmbeddedServletContainerFactory0.setBufferSize(integer0);
      ServletContextInitializer[] servletContextInitializerArray0 = new ServletContextInitializer[3];
      servletContextInitializerArray0[0] = (ServletContextInitializer) filterRegistrationBean0;
      servletContextInitializerArray0[1] = (ServletContextInitializer) filterRegistrationBean0;
      servletContextInitializerArray0[2] = (ServletContextInitializer) filterRegistrationBean0;
      // Undeclared exception!
      try { 
        undertowEmbeddedServletContainerFactory0.getEmbeddedServletContainer(servletContextInitializerArray0);
      } catch(RuntimeException e) {
         //
         // Unable to create tempDir. java.io.tmpdir is set to /tmp
         //
         verifyException("org.springframework.boot.context.embedded.AbstractEmbeddedServletContainerFactory", e);
      }
  }

  @Test(timeout = 11000)
  public void test28()  throws Throwable  {
      long long0 = 2960L;
      System.setCurrentTimeMillis(long0);
      int int0 = 2705;
      Random.setNextRandom(int0);
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = FileSystemHandling.createFolder(evoSuiteFile0);
      int int1 = 0;
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory(int1);
      boolean boolean1 = true;
      undertowEmbeddedServletContainerFactory0.setAccessLogEnabled(boolean1);
      int int2 = 766;
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      JspServlet jspServlet0 = new JspServlet();
      StandardContext standardContext0 = new StandardContext();
      Map<String, String> map0 = standardContext0.findPostConstructMethods();
      ResourceLoader resourceLoader0 = null;
      undertowEmbeddedServletContainerFactory0.setResourceLoader(resourceLoader0);
      jspServlet0.setInitParameters(map0);
      jspServlet0.setRegistered(boolean1);
      undertowEmbeddedServletContainerFactory0.setJspServlet(jspServlet0);
      undertowEmbeddedServletContainerFactory0.setSessionTimeout(int2, timeUnit0);
      String string0 = "";
      undertowEmbeddedServletContainerFactory0.setAccessLogPattern(string0);
      Random.setNextRandom(int0);
      int int3 = (-1644);
      Random.setNextRandom(int3);
      long long1 = 1575L;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      System.setCurrentTimeMillis(long1);
      System.setCurrentTimeMillis(int1);
      System.setCurrentTimeMillis(int1);
      ServletContextInitializer[] servletContextInitializerArray0 = new ServletContextInitializer[1];
      FilterRegistrationBean filterRegistrationBean0 = new FilterRegistrationBean();
      servletContextInitializerArray0[0] = (ServletContextInitializer) filterRegistrationBean0;
      // Undeclared exception!
      try { 
        undertowEmbeddedServletContainerFactory0.getEmbeddedServletContainer(servletContextInitializerArray0);
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: Filter must not be null
         //
         verifyException("io.undertow.servlet.core.DeploymentManagerImpl", e);
      }
  }

  @Test(timeout = 11000)
  public void test29()  throws Throwable  {
      int int0 = 3313;
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory(int0);
      StandardHost standardHost0 = new StandardHost();
      boolean boolean0 = false;
      String string0 = "default";
      standardHost0.setDomain(string0);
      standardHost0.removeAlias(string0);
      standardHost0.setCreateDirs(boolean0);
      File file0 = standardHost0.getAppBaseFile();
      int int1 = 127;
      String string1 = Integer.toUnsignedString(int1);
      undertowEmbeddedServletContainerFactory0.setAccessLogDirectory(file0);
      boolean boolean1 = true;
      undertowEmbeddedServletContainerFactory0.setAccessLogEnabled(boolean1);
      UndertowDeploymentInfoCustomizer[] undertowDeploymentInfoCustomizerArray0 = new UndertowDeploymentInfoCustomizer[4];
      UndertowDeploymentInfoCustomizer undertowDeploymentInfoCustomizer0 = mock(UndertowDeploymentInfoCustomizer.class, new ViolatedAssumptionAnswer());
      undertowDeploymentInfoCustomizerArray0[0] = undertowDeploymentInfoCustomizer0;
      int int2 = (-1);
      int int3 = Integer.compareUnsigned(int2, int0);
      undertowDeploymentInfoCustomizerArray0[1] = undertowDeploymentInfoCustomizerArray0[0];
      undertowDeploymentInfoCustomizerArray0[2] = undertowDeploymentInfoCustomizerArray0[1];
      undertowDeploymentInfoCustomizerArray0[3] = undertowDeploymentInfoCustomizerArray0[2];
      undertowEmbeddedServletContainerFactory0.addDeploymentInfoCustomizers(undertowDeploymentInfoCustomizerArray0);
      int int4 = 3102;
      int int5 = Integer.max(int0, int4);
      Integer integer0 = groovyjarjarasm.asm.Opcodes.DOUBLE;
      undertowEmbeddedServletContainerFactory0.setWorkerThreads(integer0);
      Boolean boolean2 = null;
      undertowEmbeddedServletContainerFactory0.setDirectBuffers(boolean2);
      Integer integer1 = Opcodes.INTEGER;
      undertowEmbeddedServletContainerFactory0.setBuffersPerRegion(integer1);
      ServletContextInitializer[] servletContextInitializerArray0 = new ServletContextInitializer[7];
      ServletListenerRegistrationBean<DefaultEditorKit.InsertTabAction> servletListenerRegistrationBean0 = new ServletListenerRegistrationBean<DefaultEditorKit.InsertTabAction>();
      servletContextInitializerArray0[0] = (ServletContextInitializer) servletListenerRegistrationBean0;
      String string2 = "Kr,=J~6j 99<_?&zez";
      ServletRegistrationBean[] servletRegistrationBeanArray0 = new ServletRegistrationBean[0];
      DelegatingFilterProxyRegistrationBean delegatingFilterProxyRegistrationBean0 = new DelegatingFilterProxyRegistrationBean(string2, servletRegistrationBeanArray0);
      // Undeclared exception!
      try { 
        undertowEmbeddedServletContainerFactory0.getEmbeddedServletContainer(servletContextInitializerArray0);
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: Failed to add listener 'null' to servlet context
         //
         verifyException("io.undertow.servlet.core.DeploymentManagerImpl", e);
      }
  }
}
