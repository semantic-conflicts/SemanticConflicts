/*
 * This file was automatically generated by EvoSuite
 * Fri May 01 15:53:09 GMT 2020
 */

package org.springframework.boot.context.embedded.undertow;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import groovy.lang.GroovyClassLoader;
import groovy.lang.NonEmptySequence;
import groovyjarjarasm.asm.Opcodes;
import io.undertow.Undertow;
import io.undertow.security.api.AuthenticationMode;
import io.undertow.server.HandlerWrapper;
import io.undertow.server.HttpHandler;
import io.undertow.servlet.Servlets;
import io.undertow.servlet.api.DeploymentInfo;
import io.undertow.servlet.api.DeploymentManager;
import io.undertow.servlet.api.LoggingExceptionHandler;
import io.undertow.servlet.api.MetricsCollector;
import io.undertow.servlet.api.SecurityConstraint;
import io.undertow.servlet.api.ServletContainer;
import io.undertow.servlet.core.ServletContainerImpl;
import java.io.File;
import java.net.URI;
import java.net.URISyntaxException;
import java.sql.SQLWarning;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.Stack;
import java.util.concurrent.LinkedBlockingDeque;
import java.util.function.Consumer;
import javax.net.ssl.KeyManager;
import javax.net.ssl.SSLContext;
import javax.net.ssl.TrustManager;
import javax.net.ssl.X509KeyManager;
import javax.servlet.ServletContext;
import javax.swing.JLayeredPane;
import javax.swing.JList;
import javax.swing.table.DefaultTableModel;
import javax.swing.undo.UndoManager;
import org.apache.catalina.core.StandardContext;
import org.apache.catalina.startup.FailedContext;
import org.apache.tomcat.util.descriptor.web.JspPropertyGroup;
import org.apache.tomcat.util.descriptor.web.ServletDef;
import org.apache.tomcat.util.descriptor.web.WebXml;
import org.codehaus.groovy.control.CompilerConfiguration;
import org.dom4j.Attribute;
import org.dom4j.bean.BeanAttributeList;
import org.dom4j.bean.BeanElement;
import org.dom4j.dom.DOMNamespace;
import org.dom4j.tree.DefaultElement;
import org.eclipse.jetty.io.ByteArrayEndPoint;
import org.eclipse.jetty.server.Server;
import org.eclipse.jetty.servlet.ServletContextHandler;
import org.eclipse.jetty.util.ssl.AliasedX509ExtendedKeyManager;
import org.eclipse.jetty.util.ssl.AliasedX509KeyManager;
import org.eclipse.jetty.webapp.WebAppContext;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.net.MockInetSocketAddress;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.hibernate.cfg.annotations.CustomizableColumns;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.support.DefaultListableBeanFactory;
import org.springframework.boot.context.embedded.EmbeddedServletContainer;
import org.springframework.boot.context.embedded.ErrorPage;
import org.springframework.boot.context.embedded.FilterRegistrationBean;
import org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer;
import org.springframework.boot.context.embedded.JspServlet;
import org.springframework.boot.context.embedded.MimeMappings;
import org.springframework.boot.context.embedded.ServletContextInitializer;
import org.springframework.boot.context.embedded.ServletListenerRegistrationBean;
import org.springframework.boot.context.embedded.Ssl;
import org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer;
import org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer;
import org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainer;
import org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory;
import org.springframework.core.io.ClassRelativeResourceLoader;
import org.springframework.core.io.DefaultResourceLoader;
import org.springframework.http.HttpStatus;
import org.springframework.web.context.support.GenericWebApplicationContext;
import org.springframework.web.filter.HttpPutFormContentFilter;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class UndertowEmbeddedServletContainerFactory_ESTest extends UndertowEmbeddedServletContainerFactory_ESTest_scaffolding {

  @Test(timeout = 11000)
  public void test00()  throws Throwable  {
      int int0 = 1;
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory(int0);
      Undertow.Builder undertow_Builder0 = Undertow.builder();
      ServletContainerImpl servletContainerImpl0 = new ServletContainerImpl();
      DeploymentInfo deploymentInfo0 = new DeploymentInfo();
      AuthenticationMode authenticationMode0 = AuthenticationMode.CONSTRAINT_DRIVEN;
      DeploymentInfo deploymentInfo1 = deploymentInfo0.setAuthenticationMode(authenticationMode0);
      HandlerWrapper handlerWrapper0 = null;
      DeploymentInfo deploymentInfo2 = deploymentInfo1.addInitialHandlerChainWrapper(handlerWrapper0);
      boolean boolean0 = false;
      DeploymentInfo deploymentInfo3 = deploymentInfo2.setSendCustomReasonPhraseOnError(boolean0);
      DeploymentManager deploymentManager0 = servletContainerImpl0.addDeployment(deploymentInfo2);
      int int1 = (-2546);
      UndertowEmbeddedServletContainer undertowEmbeddedServletContainer0 = undertowEmbeddedServletContainerFactory0.getUndertowEmbeddedServletContainer(undertow_Builder0, deploymentManager0, int1);
      Collection<UndertowBuilderCustomizer> collection0 = null;
      StandardContext standardContext0 = new StandardContext();
      File file0 = standardContext0.getCatalinaBase();
      undertowEmbeddedServletContainerFactory0.setAccessLogDirectory(file0);
      boolean boolean1 = undertowEmbeddedServletContainerFactory0.isAccessLogEnabled();
  }

  @Test(timeout = 11000)
  public void test01()  throws Throwable  {
      String string0 = "";
      int int0 = (-639);
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory(string0, int0);
      Integer integer0 = JLayeredPane.DRAG_LAYER;
      undertowEmbeddedServletContainerFactory0.setIoThreads(integer0);
      boolean boolean0 = true;
      undertowEmbeddedServletContainerFactory0.setUseForwardHeaders(boolean0);
      boolean boolean1 = undertowEmbeddedServletContainerFactory0.isAccessLogEnabled();
      String string1 = "";
      String string2 = " >xC*p-\\@?/,P#=:l";
      String string3 = "";
      String string4 = " minPoolSize=";
      String string5 = "0>kL;*hV(I";
      int int1 = 0;
      String string6 = "fR3>VlWK(*afI7ytx8";
      try { 
        MockURI.URI(string3, string4, string5, int1, string6, string3, string4);
      } catch(URISyntaxException e) {
         //
         // Relative path in absolute URI: ://%20minPoolSize=@0>kL;*hV(I:0fR3%3EVlWK(*afI7ytx8?#%20minPoolSize=
         //
         verifyException("java.net.URI", e);
      }
  }

  @Test(timeout = 11000)
  public void test02()  throws Throwable  {
      int int0 = 0;
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory(int0);
      int int1 = (-999);
      undertowEmbeddedServletContainerFactory0.setPort(int1);
      Integer integer0 = JLayeredPane.DRAG_LAYER;
      int int2 = Integer.max(int1, int0);
      int int3 = 0;
      int int4 = Integer.sum(int3, int0);
      undertowEmbeddedServletContainerFactory0.setIoThreads(integer0);
      Integer integer1 = Opcodes.NULL;
      undertowEmbeddedServletContainerFactory0.setBufferSize(integer1);
      Ssl ssl0 = new Ssl();
      undertowEmbeddedServletContainerFactory0.setSsl(ssl0);
      UndertowBuilderCustomizer[] undertowBuilderCustomizerArray0 = new UndertowBuilderCustomizer[0];
      undertowEmbeddedServletContainerFactory0.addBuilderCustomizers(undertowBuilderCustomizerArray0);
      WebAppContext webAppContext0 = new WebAppContext();
      MockFile mockFile0 = new MockFile(webAppContext0.STOPPING, webAppContext0.SERVER_SRV_CLASSES);
      undertowEmbeddedServletContainerFactory0.setDocumentRoot(mockFile0);
      int int5 = 0;
      Integer integer2 = new Integer(int5);
      undertowEmbeddedServletContainerFactory0.setBufferSize(integer2);
      UndertowDeploymentInfoCustomizer[] undertowDeploymentInfoCustomizerArray0 = new UndertowDeploymentInfoCustomizer[1];
      UndertowDeploymentInfoCustomizer undertowDeploymentInfoCustomizer0 = mock(UndertowDeploymentInfoCustomizer.class, new ViolatedAssumptionAnswer());
      undertowDeploymentInfoCustomizerArray0[0] = undertowDeploymentInfoCustomizer0;
      undertowEmbeddedServletContainerFactory0.addDeploymentInfoCustomizers(undertowDeploymentInfoCustomizerArray0);
      Integer integer3 = Opcodes.TOP;
      undertowEmbeddedServletContainerFactory0.setIoThreads(integer3);
      undertowEmbeddedServletContainerFactory0.setWorkerThreads(integer3);
      boolean boolean0 = false;
      undertowEmbeddedServletContainerFactory0.setUseForwardHeaders(boolean0);
      ServletDef servletDef0 = new ServletDef();
      Boolean boolean1 = servletDef0.getAsyncSupported();
      undertowEmbeddedServletContainerFactory0.setDirectBuffers(boolean1);
      undertowEmbeddedServletContainerFactory0.setBuffersPerRegion(integer1);
      ServletContextInitializer[] servletContextInitializerArray0 = new ServletContextInitializer[0];
      // Undeclared exception!
      try { 
        undertowEmbeddedServletContainerFactory0.getEmbeddedServletContainer(servletContextInitializerArray0);
      } catch(RuntimeException e) {
         //
         // java.security.AccessControlException: access denied (\"java.lang.RuntimePermission\" \"io.undertow.servlet.CREATE_INITIAL_HANDLER\")
         //
         verifyException("io.undertow.servlet.core.DeploymentManagerImpl", e);
      }
  }

  @Test(timeout = 11000)
  public void test03()  throws Throwable  {
      int int0 = 0;
      UndertowBuilderCustomizer[] undertowBuilderCustomizerArray0 = null;
  }

  @Test(timeout = 11000)
  public void test04()  throws Throwable  {
      int int0 = 0;
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory(int0);
      FailedContext failedContext0 = new FailedContext();
      ServletContext servletContext0 = failedContext0.getServletContext();
      GenericWebApplicationContext genericWebApplicationContext0 = new GenericWebApplicationContext(servletContext0);
      Class<CustomizableColumns> class0 = CustomizableColumns.class;
      // Undeclared exception!
      try { 
        genericWebApplicationContext0.getBeanNamesForAnnotation(class0);
      } catch(IllegalStateException e) {
         //
         // org.springframework.web.context.support.GenericWebApplicationContext@6 has not been refreshed yet
         //
         verifyException("org.springframework.context.support.AbstractApplicationContext", e);
      }
  }

  @Test(timeout = 11000)
  public void test05()  throws Throwable  {
      int int0 = 9;
      Boolean boolean0 = null;
  }

  @Test(timeout = 11000)
  public void test06()  throws Throwable  {
      int int0 = (-370);
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory(int0);
      boolean boolean0 = true;
      undertowEmbeddedServletContainerFactory0.setPersistSession(boolean0);
      Collection<UndertowBuilderCustomizer> collection0 = undertowEmbeddedServletContainerFactory0.getBuilderCustomizers();
      undertowEmbeddedServletContainerFactory0.setBuilderCustomizers(collection0);
      String string0 = "\"C47HNH_:e5Hw";
      undertowEmbeddedServletContainerFactory0.setAccessLogPattern(string0);
      MockInetSocketAddress mockInetSocketAddress0 = (MockInetSocketAddress)ByteArrayEndPoint.NOIP;
      Server server0 = new Server(mockInetSocketAddress0);
      ServletContextHandler servletContextHandler0 = new ServletContextHandler(server0, server0.STOPPING);
      Class<UndertowDeploymentInfoCustomizer> class0 = UndertowDeploymentInfoCustomizer.class;
      Collection<UndertowDeploymentInfoCustomizer> collection1 = servletContextHandler0.getBeans(class0);
      undertowEmbeddedServletContainerFactory0.setDeploymentInfoCustomizers(collection1);
      undertowEmbeddedServletContainerFactory0.setAccessLogPattern(server0.STOPPED);
      Undertow.Builder undertow_Builder0 = Undertow.builder();
      HttpHandler httpHandler0 = null;
      Undertow.Builder undertow_Builder1 = undertow_Builder0.setHandler(httpHandler0);
      String string1 = "common";
      KeyManager[] keyManagerArray0 = new KeyManager[1];
      String string2 = "";
      X509KeyManager x509KeyManager0 = mock(X509KeyManager.class, new ViolatedAssumptionAnswer());
      AliasedX509KeyManager aliasedX509KeyManager0 = new AliasedX509KeyManager(string0, x509KeyManager0);
      AliasedX509ExtendedKeyManager aliasedX509ExtendedKeyManager0 = new AliasedX509ExtendedKeyManager(string2, aliasedX509KeyManager0);
      keyManagerArray0[0] = (KeyManager) aliasedX509ExtendedKeyManager0;
      TrustManager[] trustManagerArray0 = new TrustManager[9];
      TrustManager trustManager0 = mock(TrustManager.class, new ViolatedAssumptionAnswer());
      trustManagerArray0[0] = trustManager0;
      trustManagerArray0[1] = trustManagerArray0[0];
      trustManagerArray0[2] = trustManagerArray0[1];
      trustManagerArray0[3] = trustManagerArray0[2];
      trustManagerArray0[4] = trustManagerArray0[3];
      trustManagerArray0[5] = trustManagerArray0[4];
      trustManagerArray0[6] = trustManagerArray0[5];
      trustManagerArray0[7] = trustManagerArray0[6];
      trustManagerArray0[8] = trustManagerArray0[7];
      Undertow.Builder undertow_Builder2 = undertow_Builder1.addHttpsListener(servletContextHandler0.NO_SECURITY, string1, keyManagerArray0, trustManagerArray0);
      Undertow.Builder undertow_Builder3 = undertow_Builder2.setBuffersPerRegion(servletContextHandler0.DEFAULT_LISTENER_TYPE_INDEX);
      int int1 = 1;
      SSLContext sSLContext0 = null;
      Undertow.Builder undertow_Builder4 = undertow_Builder3.addHttpsListener(int1, server0.RUNNING, sSLContext0);
      ServletContainerImpl servletContainerImpl0 = new ServletContainerImpl();
      DeploymentManager deploymentManager0 = servletContainerImpl0.getDeploymentByPath(servletContextHandler0.STOPPING);
      UndertowEmbeddedServletContainer undertowEmbeddedServletContainer0 = undertowEmbeddedServletContainerFactory0.getUndertowEmbeddedServletContainer(undertow_Builder4, deploymentManager0, servletContextHandler0.EXTENDED_LISTENER_TYPE_INDEX);
      undertowEmbeddedServletContainerFactory0.setIoThreads((Integer) servletContextHandler0.NO_SECURITY);
      Integer integer0 = null;
      undertowEmbeddedServletContainerFactory0.setBufferSize(integer0);
      boolean boolean1 = undertowEmbeddedServletContainerFactory0.isAccessLogEnabled();
      undertowEmbeddedServletContainerFactory0.setIoThreads((Integer) servletContextHandler0.NO_SESSIONS);
  }

  @Test(timeout = 11000)
  public void test07()  throws Throwable  {
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory();
      JspServlet jspServlet0 = undertowEmbeddedServletContainerFactory0.getJspServlet();
      boolean boolean0 = true;
      jspServlet0.setRegistered(boolean0);
      undertowEmbeddedServletContainerFactory0.setJspServlet(jspServlet0);
      Collection<UndertowBuilderCustomizer> collection0 = undertowEmbeddedServletContainerFactory0.getBuilderCustomizers();
      Collection<UndertowDeploymentInfoCustomizer> collection1 = undertowEmbeddedServletContainerFactory0.getDeploymentInfoCustomizers();
      boolean boolean1 = true;
      undertowEmbeddedServletContainerFactory0.setAccessLogEnabled(boolean1);
      Integer integer0 = Opcodes.INTEGER;
      String string0 = "";
      int int0 = 1542;
      Integer integer1 = JLayeredPane.PALETTE_LAYER;
      undertowEmbeddedServletContainerFactory0.setBufferSize(integer0);
      boolean boolean2 = undertowEmbeddedServletContainerFactory0.isAccessLogEnabled();
      ServletContextInitializer[] servletContextInitializerArray0 = new ServletContextInitializer[0];
      // Undeclared exception!
      try { 
        undertowEmbeddedServletContainerFactory0.getEmbeddedServletContainer(servletContextInitializerArray0);
      } catch(RuntimeException e) {
         //
         // java.security.AccessControlException: access denied (\"java.lang.RuntimePermission\" \"io.undertow.servlet.CREATE_INITIAL_HANDLER\")
         //
         verifyException("io.undertow.servlet.core.DeploymentManagerImpl", e);
      }
  }

  @Test(timeout = 11000)
  public void test08()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = true;
      boolean boolean1 = false;
      boolean boolean2 = FileSystemHandling.setPermissions(evoSuiteFile0, boolean0, boolean0, boolean1);
      int int0 = 1952;
      Random.setNextRandom(int0);
  }

  @Test(timeout = 11000)
  public void test09()  throws Throwable  {
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory();
      Integer integer0 = Opcodes.TOP;
      undertowEmbeddedServletContainerFactory0.setWorkerThreads(integer0);
  }

  @Test(timeout = 11000)
  public void test10()  throws Throwable  {
      String string0 = "h2";
      int int0 = 1;
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = null;
      try {
        undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory(string0, int0);
      } catch(IllegalArgumentException e) {
         //
         // ContextPath must start with '/' and not end with '/'
         //
         verifyException("org.springframework.boot.context.embedded.AbstractConfigurableEmbeddedServletContainer", e);
      }
  }

  @Test(timeout = 11000)
  public void test11()  throws Throwable  {
      int int0 = 0;
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory(int0);
      UndertowBuilderCustomizer[] undertowBuilderCustomizerArray0 = null;
      // Undeclared exception!
      try { 
        undertowEmbeddedServletContainerFactory0.addBuilderCustomizers(undertowBuilderCustomizerArray0);
      } catch(IllegalArgumentException e) {
         //
         // Customizers must not be null
         //
         verifyException("org.springframework.util.Assert", e);
      }
  }

  @Test(timeout = 11000)
  public void test12()  throws Throwable  {
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory();
      UndertowBuilderCustomizer[] undertowBuilderCustomizerArray0 = new UndertowBuilderCustomizer[0];
      undertowEmbeddedServletContainerFactory0.addBuilderCustomizers(undertowBuilderCustomizerArray0);
      Integer integer0 = groovyjarjarasm.asm.Opcodes.FLOAT;
      String string0 = "'gr8S";
      Integer integer1 = Integer.getInteger(string0);
      undertowEmbeddedServletContainerFactory0.addBuilderCustomizers(undertowBuilderCustomizerArray0);
      String string1 = "standardEngine.notHost";
      Integer integer2 = Integer.getInteger(string1, integer0);
      undertowEmbeddedServletContainerFactory0.setWorkerThreads(integer0);
      File file0 = null;
      undertowEmbeddedServletContainerFactory0.setAccessLogDirectory(file0);
  }

  @Test(timeout = 11000)
  public void test13()  throws Throwable  {
      int int0 = 0;
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory(int0);
      JspPropertyGroup jspPropertyGroup0 = new JspPropertyGroup();
      boolean boolean0 = true;
      undertowEmbeddedServletContainerFactory0.setPersistSession(boolean0);
      Boolean boolean1 = jspPropertyGroup0.getElIgnored();
      String string0 = "FsBH7JBc6w!";
      boolean boolean2 = Boolean.getBoolean(string0);
      String string1 = "";
      jspPropertyGroup0.addIncludePrelude(string1);
      boolean boolean3 = Boolean.logicalAnd(boolean0, boolean0);
      undertowEmbeddedServletContainerFactory0.setDirectBuffers(boolean1);
      Collection<UndertowDeploymentInfoCustomizer> collection0 = undertowEmbeddedServletContainerFactory0.getDeploymentInfoCustomizers();
  }

  @Test(timeout = 11000)
  public void test14()  throws Throwable  {
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory();
      boolean boolean0 = false;
      undertowEmbeddedServletContainerFactory0.setAccessLogEnabled(boolean0);
  }

  @Test(timeout = 11000)
  public void test15()  throws Throwable  {
      int int0 = (-2034);
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory(int0);
      Integer integer0 = groovyjarjarasm.asm.Opcodes.TOP;
      String string0 = null;
      int int1 = (-240);
      Collection<UndertowDeploymentInfoCustomizer> collection0 = null;
      // Undeclared exception!
      try { 
        undertowEmbeddedServletContainerFactory0.setDeploymentInfoCustomizers(collection0);
      } catch(IllegalArgumentException e) {
         //
         // Customizers must not be null
         //
         verifyException("org.springframework.util.Assert", e);
      }
  }

  @Test(timeout = 11000)
  public void test16()  throws Throwable  {
      int int0 = (-1562);
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory(int0);
      Integer integer0 = JLayeredPane.DEFAULT_LAYER;
      undertowEmbeddedServletContainerFactory0.setBufferSize(integer0);
      ServletContainer servletContainer0 = Servlets.defaultContainer();
      UndertowBuilderCustomizer[] undertowBuilderCustomizerArray0 = null;
      // Undeclared exception!
      try { 
        undertowEmbeddedServletContainerFactory0.addBuilderCustomizers(undertowBuilderCustomizerArray0);
      } catch(IllegalArgumentException e) {
         //
         // Customizers must not be null
         //
         verifyException("org.springframework.util.Assert", e);
      }
  }

  @Test(timeout = 11000)
  public void test17()  throws Throwable  {
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory();
      Undertow.Builder undertow_Builder0 = Undertow.builder();
      int int0 = 0;
      Undertow.Builder undertow_Builder1 = undertow_Builder0.setWorkerThreads(int0);
      ServletContainerImpl servletContainerImpl0 = new ServletContainerImpl();
      DeploymentInfo deploymentInfo0 = new DeploymentInfo();
      LoggingExceptionHandler loggingExceptionHandler0 = LoggingExceptionHandler.DEFAULT;
      DeploymentInfo deploymentInfo1 = deploymentInfo0.setExceptionHandler(loggingExceptionHandler0);
      MetricsCollector metricsCollector0 = mock(MetricsCollector.class, new ViolatedAssumptionAnswer());
      DeploymentInfo deploymentInfo2 = deploymentInfo1.setMetricsCollector(metricsCollector0);
      DeploymentManager deploymentManager0 = servletContainerImpl0.addDeployment(deploymentInfo2);
      int int1 = 2290;
      UndertowEmbeddedServletContainer undertowEmbeddedServletContainer0 = undertowEmbeddedServletContainerFactory0.getUndertowEmbeddedServletContainer(undertow_Builder1, deploymentManager0, int1);
  }

  @Test(timeout = 11000)
  public void test18()  throws Throwable  {
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory();
      Ssl ssl0 = undertowEmbeddedServletContainerFactory0.getSsl();
      undertowEmbeddedServletContainerFactory0.setSsl(ssl0);
      UndertowDeploymentInfoCustomizer[] undertowDeploymentInfoCustomizerArray0 = new UndertowDeploymentInfoCustomizer[0];
      undertowEmbeddedServletContainerFactory0.addDeploymentInfoCustomizers(undertowDeploymentInfoCustomizerArray0);
  }

  @Test(timeout = 11000)
  public void test19()  throws Throwable  {
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory();
      DefaultListableBeanFactory defaultListableBeanFactory0 = new DefaultListableBeanFactory();
      ClassLoader classLoader0 = defaultListableBeanFactory0.getTempClassLoader();
      ClassLoader classLoader1 = ClassLoader.getSystemClassLoader();
      DefaultResourceLoader defaultResourceLoader0 = new DefaultResourceLoader(classLoader0);
      undertowEmbeddedServletContainerFactory0.setResourceLoader(defaultResourceLoader0);
      Collection<UndertowDeploymentInfoCustomizer> collection0 = undertowEmbeddedServletContainerFactory0.getDeploymentInfoCustomizers();
      String string0 = "}2swW[)%E(If`@I(";
      undertowEmbeddedServletContainerFactory0.setAccessLogPattern(string0);
      boolean boolean0 = undertowEmbeddedServletContainerFactory0.isAccessLogEnabled();
      boolean boolean1 = undertowEmbeddedServletContainerFactory0.isAccessLogEnabled();
      undertowEmbeddedServletContainerFactory0.setUseForwardHeaders(boolean0);
      LinkedHashSet<UndertowBuilderCustomizer> linkedHashSet0 = new LinkedHashSet<UndertowBuilderCustomizer>();
      ArrayList<UndertowBuilderCustomizer> arrayList0 = new ArrayList<UndertowBuilderCustomizer>(linkedHashSet0);
      undertowEmbeddedServletContainerFactory0.setBuilderCustomizers(arrayList0);
  }

  @Test(timeout = 11000)
  public void test20()  throws Throwable  {
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory();
      Integer integer0 = Opcodes.UNINITIALIZED_THIS;
      undertowEmbeddedServletContainerFactory0.setBuffersPerRegion(integer0);
      boolean boolean0 = undertowEmbeddedServletContainerFactory0.isAccessLogEnabled();
      int int0 = 17;
      ArrayDeque<UndertowDeploymentInfoCustomizer> arrayDeque0 = new ArrayDeque<UndertowDeploymentInfoCustomizer>(int0);
      undertowEmbeddedServletContainerFactory0.setDeploymentInfoCustomizers(arrayDeque0);
      undertowEmbeddedServletContainerFactory0.setIoThreads(integer0);
      JspPropertyGroup jspPropertyGroup0 = new JspPropertyGroup();
      Boolean boolean1 = jspPropertyGroup0.getScriptingInvalid();
      undertowEmbeddedServletContainerFactory0.setDirectBuffers(boolean1);
  }

  @Test(timeout = 11000)
  public void test21()  throws Throwable  {
      int int0 = 77;
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory(int0);
      ServletContextInitializer[] servletContextInitializerArray0 = new ServletContextInitializer[3];
      ServletListenerRegistrationBean<UndoManager> servletListenerRegistrationBean0 = new ServletListenerRegistrationBean<UndoManager>();
      servletContextInitializerArray0[0] = (ServletContextInitializer) servletListenerRegistrationBean0;
      DeploymentInfo deploymentInfo0 = new DeploymentInfo();
      SecurityConstraint securityConstraint0 = new SecurityConstraint();
      DeploymentInfo deploymentInfo1 = deploymentInfo0.addSecurityConstraint(securityConstraint0);
      HandlerWrapper handlerWrapper0 = null;
      Set<String> set0 = securityConstraint0.getRolesAllowed();
      DeploymentInfo deploymentInfo2 = deploymentInfo1.addInitialHandlerChainWrapper(handlerWrapper0);
      Map<String, String> map0 = deploymentInfo2.getLocaleCharsetMapping();
      InitParameterConfiguringServletContextInitializer initParameterConfiguringServletContextInitializer0 = new InitParameterConfiguringServletContextInitializer(map0);
      servletContextInitializerArray0[1] = (ServletContextInitializer) initParameterConfiguringServletContextInitializer0;
      FilterRegistrationBean filterRegistrationBean0 = new FilterRegistrationBean();
      servletContextInitializerArray0[2] = (ServletContextInitializer) filterRegistrationBean0;
      // Undeclared exception!
      try { 
        undertowEmbeddedServletContainerFactory0.getEmbeddedServletContainer(servletContextInitializerArray0);
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: Failed to add listener 'null' to servlet context
         //
         verifyException("io.undertow.servlet.core.DeploymentManagerImpl", e);
      }
  }

  @Test(timeout = 11000)
  public void test22()  throws Throwable  {
      String string0 = "";
      int int0 = 310;
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory(string0, int0);
      JspPropertyGroup jspPropertyGroup0 = new JspPropertyGroup();
      Boolean boolean0 = jspPropertyGroup0.getDeferredSyntax();
      boolean boolean1 = false;
      boolean boolean2 = false;
      String string1 = "t,bd";
      jspPropertyGroup0.setDeferredSyntax(string1);
      String string2 = "z-z^4hqq";
      jspPropertyGroup0.setIsXml(string2);
      String string3 = "";
      boolean boolean3 = Boolean.getBoolean(string3);
      int int1 = Boolean.compare(boolean1, boolean2);
      undertowEmbeddedServletContainerFactory0.setDirectBuffers(boolean0);
      ServletContextInitializer[] servletContextInitializerArray0 = new ServletContextInitializer[0];
      // Undeclared exception!
      try { 
        undertowEmbeddedServletContainerFactory0.getEmbeddedServletContainer(servletContextInitializerArray0);
      } catch(RuntimeException e) {
         //
         // java.security.AccessControlException: access denied (\"java.lang.RuntimePermission\" \"io.undertow.servlet.CREATE_INITIAL_HANDLER\")
         //
         verifyException("io.undertow.servlet.core.DeploymentManagerImpl", e);
      }
  }

  @Test(timeout = 11000)
  public void test23()  throws Throwable  {
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory();
      String string0 = " on ";
      ErrorPage[] errorPageArray0 = new ErrorPage[9];
      String string1 = "`YwOU_i";
      ErrorPage errorPage0 = new ErrorPage(string1);
      errorPageArray0[0] = errorPage0;
      Class<Throwable> class0 = Throwable.class;
      ErrorPage errorPage1 = new ErrorPage(class0, string1);
      errorPageArray0[1] = errorPage1;
      String string2 = "";
      ErrorPage errorPage2 = new ErrorPage(string2);
      errorPageArray0[2] = errorPage2;
      String string3 = "A% _|7nV&";
      ErrorPage errorPage3 = new ErrorPage(string3);
      errorPageArray0[3] = errorPage3;
      Class<SQLWarning> class1 = SQLWarning.class;
      ErrorPage errorPage4 = new ErrorPage(class1, string0);
      errorPageArray0[4] = errorPage4;
      Class<SQLWarning> class2 = SQLWarning.class;
      String string4 = "addInstanceListener";
      ErrorPage errorPage5 = new ErrorPage(class2, string4);
      errorPageArray0[5] = errorPage5;
      ErrorPage errorPage6 = new ErrorPage(class2, string4);
      errorPageArray0[6] = errorPage6;
      HttpStatus httpStatus0 = HttpStatus.SERVICE_UNAVAILABLE;
      String string5 = "HN+M(-";
      ErrorPage errorPage7 = new ErrorPage(httpStatus0, string5);
      errorPageArray0[7] = errorPage7;
      String string6 = "vB(ziE%n#WS";
      ErrorPage errorPage8 = new ErrorPage(class2, string6);
      errorPageArray0[8] = errorPage8;
      undertowEmbeddedServletContainerFactory0.addErrorPages(errorPageArray0);
      undertowEmbeddedServletContainerFactory0.setJspServletClassName(string0);
      Collection<UndertowBuilderCustomizer> collection0 = undertowEmbeddedServletContainerFactory0.getBuilderCustomizers();
      ServletContextInitializer[] servletContextInitializerArray0 = null;
      // Undeclared exception!
      try { 
        undertowEmbeddedServletContainerFactory0.getEmbeddedServletContainer(servletContextInitializerArray0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 11000)
  public void test24()  throws Throwable  {
      int int0 = 1;
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory(int0);
      Undertow.Builder undertow_Builder0 = Undertow.builder();
      ServletContainerImpl servletContainerImpl0 = new ServletContainerImpl();
      DeploymentInfo deploymentInfo0 = new DeploymentInfo();
      AuthenticationMode authenticationMode0 = AuthenticationMode.CONSTRAINT_DRIVEN;
      DeploymentInfo deploymentInfo1 = deploymentInfo0.setAuthenticationMode(authenticationMode0);
      HandlerWrapper handlerWrapper0 = null;
      DeploymentInfo deploymentInfo2 = deploymentInfo1.addInitialHandlerChainWrapper(handlerWrapper0);
      boolean boolean0 = false;
      DeploymentInfo deploymentInfo3 = deploymentInfo2.setSendCustomReasonPhraseOnError(boolean0);
      DeploymentManager deploymentManager0 = servletContainerImpl0.addDeployment(deploymentInfo2);
      int int1 = (-2546);
      UndertowEmbeddedServletContainer undertowEmbeddedServletContainer0 = undertowEmbeddedServletContainerFactory0.getUndertowEmbeddedServletContainer(undertow_Builder0, deploymentManager0, int1);
      Collection<UndertowBuilderCustomizer> collection0 = null;
      // Undeclared exception!
      try { 
        undertowEmbeddedServletContainerFactory0.setBuilderCustomizers(collection0);
      } catch(IllegalArgumentException e) {
         //
         // Customizers must not be null
         //
         verifyException("org.springframework.util.Assert", e);
      }
  }

  @Test(timeout = 11000)
  public void test25()  throws Throwable  {
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory();
      String string0 = "";
      BeanElement beanElement0 = new BeanElement(string0, string0);
      BeanAttributeList beanAttributeList0 = new BeanAttributeList(beanElement0);
      Stack<SQLWarning> stack0 = new Stack<SQLWarning>();
      JList<SQLWarning> jList0 = new JList<SQLWarning>(stack0);
      List<SQLWarning> list0 = jList0.getSelectedValuesList();
      boolean boolean0 = beanAttributeList0.addAll((Collection) list0);
      undertowEmbeddedServletContainerFactory0.setInitializers(beanAttributeList0);
      Collection<UndertowDeploymentInfoCustomizer> collection0 = undertowEmbeddedServletContainerFactory0.getDeploymentInfoCustomizers();
      String string1 = "";
      undertowEmbeddedServletContainerFactory0.setContextPath(string1);
      Integer integer0 = JLayeredPane.MODAL_LAYER;
      int int0 = 0;
      int int1 = Integer.sum(int0, int0);
      undertowEmbeddedServletContainerFactory0.setIoThreads(integer0);
      Collection<UndertowBuilderCustomizer> collection1 = null;
      // Undeclared exception!
      try { 
        undertowEmbeddedServletContainerFactory0.setBuilderCustomizers(collection1);
      } catch(IllegalArgumentException e) {
         //
         // Customizers must not be null
         //
         verifyException("org.springframework.util.Assert", e);
      }
  }

  @Test(timeout = 11000)
  public void test26()  throws Throwable  {
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory();
      Collection<UndertowBuilderCustomizer> collection0 = undertowEmbeddedServletContainerFactory0.getBuilderCustomizers();
      Boolean boolean0 = Boolean.FALSE;
      boolean boolean1 = false;
      boolean boolean2 = Boolean.logicalAnd(boolean1, boolean1);
      undertowEmbeddedServletContainerFactory0.setDirectBuffers(boolean0);
      UndertowDeploymentInfoCustomizer[] undertowDeploymentInfoCustomizerArray0 = null;
      // Undeclared exception!
      try { 
        undertowEmbeddedServletContainerFactory0.addDeploymentInfoCustomizers(undertowDeploymentInfoCustomizerArray0);
      } catch(IllegalArgumentException e) {
         //
         // UndertowDeploymentInfoCustomizers must not be null
         //
         verifyException("org.springframework.util.Assert", e);
      }
  }

  @Test(timeout = 11000)
  public void test27()  throws Throwable  {
      int int0 = 135;
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory(int0);
      boolean boolean0 = true;
      undertowEmbeddedServletContainerFactory0.setUseForwardHeaders(boolean0);
      JspPropertyGroup jspPropertyGroup0 = new JspPropertyGroup();
      String string0 = "comp";
      jspPropertyGroup0.setScriptingInvalid(string0);
      Boolean boolean1 = jspPropertyGroup0.getScriptingInvalid();
      undertowEmbeddedServletContainerFactory0.setDirectBuffers(boolean1);
      WebXml webXml0 = new WebXml();
      Map<String, String> map0 = webXml0.getLocaleEncodingMappings();
      MimeMappings mimeMappings0 = new MimeMappings(map0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      mimeMappings0.forEach(consumer0);
      undertowEmbeddedServletContainerFactory0.setMimeMappings(mimeMappings0);
      boolean boolean2 = undertowEmbeddedServletContainerFactory0.isAccessLogEnabled();
      Integer integer0 = groovyjarjarasm.asm.Opcodes.DOUBLE;
      undertowEmbeddedServletContainerFactory0.setIoThreads(integer0);
      Integer integer1 = groovyjarjarasm.asm.Opcodes.NULL;
      undertowEmbeddedServletContainerFactory0.setWorkerThreads(integer1);
      undertowEmbeddedServletContainerFactory0.setAccessLogEnabled(boolean0);
      Collection<UndertowBuilderCustomizer> collection0 = undertowEmbeddedServletContainerFactory0.getBuilderCustomizers();
      LinkedBlockingDeque<UndertowDeploymentInfoCustomizer> linkedBlockingDeque0 = new LinkedBlockingDeque<UndertowDeploymentInfoCustomizer>();
      undertowEmbeddedServletContainerFactory0.setDeploymentInfoCustomizers(linkedBlockingDeque0);
      undertowEmbeddedServletContainerFactory0.setDeploymentInfoCustomizers(linkedBlockingDeque0);
      ServletContextInitializer[] servletContextInitializerArray0 = new ServletContextInitializer[0];
      // Undeclared exception!
      try { 
        undertowEmbeddedServletContainerFactory0.getEmbeddedServletContainer(servletContextInitializerArray0);
      } catch(RuntimeException e) {
         //
         // java.security.AccessControlException: access denied (\"java.lang.RuntimePermission\" \"io.undertow.servlet.CREATE_INITIAL_HANDLER\")
         //
         verifyException("io.undertow.servlet.core.DeploymentManagerImpl", e);
      }
  }

  @Test(timeout = 11000)
  public void test28()  throws Throwable  {
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory();
      String string0 = "org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory$1";
      String string1 = "I2VlB0m)|WNGj]A";
      DefaultElement defaultElement0 = new DefaultElement(string1);
      DOMNamespace dOMNamespace0 = new DOMNamespace(defaultElement0, string0, string0);
      HttpPutFormContentFilter httpPutFormContentFilter0 = new HttpPutFormContentFilter();
      BeanElement beanElement0 = new BeanElement(string0, dOMNamespace0, httpPutFormContentFilter0);
      Attribute attribute0 = defaultElement0.attribute(httpPutFormContentFilter0.ALREADY_FILTERED_SUFFIX);
      BeanAttributeList beanAttributeList0 = new BeanAttributeList(beanElement0);
      undertowEmbeddedServletContainerFactory0.setDeploymentInfoCustomizers(beanAttributeList0);
      ServletContextInitializer[] servletContextInitializerArray0 = new ServletContextInitializer[0];
      // Undeclared exception!
      try { 
        undertowEmbeddedServletContainerFactory0.getEmbeddedServletContainer(servletContextInitializerArray0);
      } catch(ClassCastException e) {
         //
         // org.dom4j.bean.BeanAttribute cannot be cast to org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer
         //
         verifyException("org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory", e);
      }
  }

  @Test(timeout = 11000)
  public void test29()  throws Throwable  {
      int int0 = 0;
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory(int0);
      int int1 = (-999);
      undertowEmbeddedServletContainerFactory0.setPort(int1);
      Integer integer0 = JLayeredPane.DRAG_LAYER;
      int int2 = Integer.max(int1, int0);
      int int3 = 0;
      int int4 = Integer.sum(int3, int0);
      undertowEmbeddedServletContainerFactory0.setIoThreads(integer0);
      Integer integer1 = Opcodes.NULL;
      undertowEmbeddedServletContainerFactory0.setBufferSize(integer1);
      Ssl ssl0 = new Ssl();
      undertowEmbeddedServletContainerFactory0.setSsl(ssl0);
      UndertowBuilderCustomizer[] undertowBuilderCustomizerArray0 = new UndertowBuilderCustomizer[0];
      undertowEmbeddedServletContainerFactory0.addBuilderCustomizers(undertowBuilderCustomizerArray0);
      WebAppContext webAppContext0 = new WebAppContext();
      File file0 = webAppContext0.getTempDirectory();
      undertowEmbeddedServletContainerFactory0.setDocumentRoot(file0);
      int int5 = 0;
      Integer integer2 = new Integer(int5);
      undertowEmbeddedServletContainerFactory0.setBufferSize(integer2);
      UndertowDeploymentInfoCustomizer[] undertowDeploymentInfoCustomizerArray0 = new UndertowDeploymentInfoCustomizer[1];
      UndertowDeploymentInfoCustomizer undertowDeploymentInfoCustomizer0 = mock(UndertowDeploymentInfoCustomizer.class, new ViolatedAssumptionAnswer());
      undertowDeploymentInfoCustomizerArray0[0] = undertowDeploymentInfoCustomizer0;
      undertowEmbeddedServletContainerFactory0.addDeploymentInfoCustomizers(undertowDeploymentInfoCustomizerArray0);
      Integer integer3 = Opcodes.TOP;
      undertowEmbeddedServletContainerFactory0.setIoThreads(integer3);
      undertowEmbeddedServletContainerFactory0.setWorkerThreads(integer3);
      boolean boolean0 = false;
      undertowEmbeddedServletContainerFactory0.setUseForwardHeaders(boolean0);
      ServletDef servletDef0 = new ServletDef();
      Boolean boolean1 = servletDef0.getAsyncSupported();
      undertowEmbeddedServletContainerFactory0.setDirectBuffers(boolean1);
      Integer integer4 = Opcodes.UNINITIALIZED_THIS;
      undertowEmbeddedServletContainerFactory0.setBuffersPerRegion(integer4);
      ServletContextInitializer[] servletContextInitializerArray0 = new ServletContextInitializer[0];
      // Undeclared exception!
      try { 
        undertowEmbeddedServletContainerFactory0.getEmbeddedServletContainer(servletContextInitializerArray0);
      } catch(RuntimeException e) {
         //
         // java.security.AccessControlException: access denied (\"java.lang.RuntimePermission\" \"io.undertow.servlet.CREATE_INITIAL_HANDLER\")
         //
         verifyException("io.undertow.servlet.core.DeploymentManagerImpl", e);
      }
  }

  @Test(timeout = 11000)
  public void test30()  throws Throwable  {
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory();
      JspServlet jspServlet0 = undertowEmbeddedServletContainerFactory0.getJspServlet();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      jspServlet0.setInitParameters(hashMap0);
      jspServlet0.setInitParameters(hashMap0);
      jspServlet0.setInitParameters(hashMap0);
      undertowEmbeddedServletContainerFactory0.setJspServlet(jspServlet0);
      Collection<UndertowBuilderCustomizer> collection0 = undertowEmbeddedServletContainerFactory0.getBuilderCustomizers();
      Collection<UndertowDeploymentInfoCustomizer> collection1 = undertowEmbeddedServletContainerFactory0.getDeploymentInfoCustomizers();
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      boolean boolean1 = false;
      undertowEmbeddedServletContainerFactory0.setAccessLogEnabled(boolean1);
      Integer integer0 = Opcodes.INTEGER;
      String string0 = "";
      int int0 = 1542;
      Integer integer1 = Integer.getInteger(string0, int0);
      undertowEmbeddedServletContainerFactory0.setBufferSize(integer0);
      boolean boolean2 = undertowEmbeddedServletContainerFactory0.isAccessLogEnabled();
      ServletContextInitializer[] servletContextInitializerArray0 = new ServletContextInitializer[0];
      // Undeclared exception!
      try { 
        undertowEmbeddedServletContainerFactory0.getEmbeddedServletContainer(servletContextInitializerArray0);
      } catch(RuntimeException e) {
         //
         // Unable to create tempDir. java.io.tmpdir is set to /tmp
         //
         verifyException("org.springframework.boot.context.embedded.AbstractEmbeddedServletContainerFactory", e);
      }
  }

  @Test(timeout = 11000)
  public void test31()  throws Throwable  {
      int int0 = 0;
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory(int0);
      int int1 = (-980);
      undertowEmbeddedServletContainerFactory0.setPort(int1);
      Integer integer0 = JLayeredPane.DRAG_LAYER;
      int int2 = Integer.max(int1, int0);
      int int3 = 0;
      int int4 = Integer.sum(int3, int0);
      undertowEmbeddedServletContainerFactory0.setIoThreads(integer0);
      Integer integer1 = Opcodes.NULL;
      undertowEmbeddedServletContainerFactory0.setBufferSize(integer1);
      Ssl ssl0 = new Ssl();
      undertowEmbeddedServletContainerFactory0.setSsl(ssl0);
      UndertowBuilderCustomizer[] undertowBuilderCustomizerArray0 = new UndertowBuilderCustomizer[0];
      undertowEmbeddedServletContainerFactory0.addBuilderCustomizers(undertowBuilderCustomizerArray0);
      WebAppContext webAppContext0 = new WebAppContext();
      File file0 = MockFile.createTempFile(webAppContext0.MANAGED_ATTRIBUTES, webAppContext0.WEB_DEFAULTS_XML);
      undertowEmbeddedServletContainerFactory0.setDocumentRoot(file0);
      int int5 = 0;
      Integer integer2 = new Integer(int5);
      undertowEmbeddedServletContainerFactory0.setBufferSize(integer2);
      UndertowDeploymentInfoCustomizer[] undertowDeploymentInfoCustomizerArray0 = new UndertowDeploymentInfoCustomizer[1];
      UndertowDeploymentInfoCustomizer undertowDeploymentInfoCustomizer0 = mock(UndertowDeploymentInfoCustomizer.class, new ViolatedAssumptionAnswer());
      undertowDeploymentInfoCustomizerArray0[0] = undertowDeploymentInfoCustomizer0;
      undertowEmbeddedServletContainerFactory0.addDeploymentInfoCustomizers(undertowDeploymentInfoCustomizerArray0);
      Integer integer3 = Opcodes.TOP;
      undertowEmbeddedServletContainerFactory0.setIoThreads(integer3);
      undertowEmbeddedServletContainerFactory0.setWorkerThreads(integer3);
      boolean boolean0 = false;
      undertowEmbeddedServletContainerFactory0.setUseForwardHeaders(boolean0);
      ServletDef servletDef0 = new ServletDef();
      Boolean boolean1 = servletDef0.getAsyncSupported();
      undertowEmbeddedServletContainerFactory0.setDirectBuffers(boolean1);
      Integer integer4 = Opcodes.UNINITIALIZED_THIS;
      undertowEmbeddedServletContainerFactory0.setBuffersPerRegion(integer4);
      ServletContextInitializer[] servletContextInitializerArray0 = new ServletContextInitializer[0];
      // Undeclared exception!
      try { 
        undertowEmbeddedServletContainerFactory0.getEmbeddedServletContainer(servletContextInitializerArray0);
      } catch(RuntimeException e) {
         //
         // java.security.AccessControlException: access denied (\"java.lang.RuntimePermission\" \"io.undertow.servlet.CREATE_INITIAL_HANDLER\")
         //
         verifyException("io.undertow.servlet.core.DeploymentManagerImpl", e);
      }
  }
}
