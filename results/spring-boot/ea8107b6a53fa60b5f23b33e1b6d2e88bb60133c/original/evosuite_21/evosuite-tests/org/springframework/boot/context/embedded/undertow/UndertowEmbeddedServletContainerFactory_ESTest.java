/*
 * This file was automatically generated by EvoSuite
 * Fri May 01 15:48:20 GMT 2020
 */

package org.springframework.boot.context.embedded.undertow;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import groovyjarjarasm.asm.Opcodes;
import io.undertow.Undertow;
import io.undertow.server.HttpHandler;
import io.undertow.server.RoutingHandler;
import io.undertow.server.handlers.ByteRangeHandler;
import io.undertow.servlet.api.DeploymentInfo;
import io.undertow.servlet.api.DeploymentManager;
import io.undertow.servlet.core.DeploymentManagerImpl;
import io.undertow.servlet.core.ServletContainerImpl;
import io.undertow.servlet.handlers.DefaultServlet;
import java.io.File;
import java.net.InetAddress;
import java.sql.SQLException;
import java.util.Collection;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.Map;
import java.util.PriorityQueue;
import java.util.Set;
import java.util.Stack;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.LinkedTransferQueue;
import java.util.concurrent.TimeUnit;
import java.util.function.Consumer;
import javax.management.remote.JMXPrincipal;
import javax.net.ssl.SSLContext;
import javax.security.auth.Subject;
import javax.swing.JLayeredPane;
import javax.swing.plaf.metal.MetalRootPaneUI;
import javax.swing.table.DefaultTableModel;
import org.apache.catalina.core.StandardServer;
import org.apache.catalina.filters.RequestDumperFilter;
import org.apache.tomcat.util.descriptor.web.JspPropertyGroup;
import org.apache.tomcat.util.descriptor.web.SessionConfig;
import org.apache.tomcat.util.descriptor.web.WebXml;
import org.dom4j.bean.BeanElement;
import org.dom4j.dom.DOMNamespace;
import org.eclipse.jetty.servlet.ServletContextHandler;
import org.eclipse.jetty.servlet.ServletHolder;
import org.eclipse.jetty.util.log.JavaUtilLog;
import org.eclipse.jetty.webapp.WebAppContext;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.net.MockInetAddress;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import org.springframework.boot.context.embedded.Compression;
import org.springframework.boot.context.embedded.DelegatingFilterProxyRegistrationBean;
import org.springframework.boot.context.embedded.EmbeddedServletContainer;
import org.springframework.boot.context.embedded.ErrorPage;
import org.springframework.boot.context.embedded.FilterRegistrationBean;
import org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer;
import org.springframework.boot.context.embedded.MimeMappings;
import org.springframework.boot.context.embedded.ServletContextInitializer;
import org.springframework.boot.context.embedded.ServletListenerRegistrationBean;
import org.springframework.boot.context.embedded.ServletRegistrationBean;
import org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer;
import org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer;
import org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainer;
import org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory;
import org.springframework.context.support.ClassPathXmlApplicationContext;
import org.springframework.context.support.GenericGroovyApplicationContext;
import org.springframework.core.io.ClassPathResource;
import org.springframework.core.io.ResourceLoader;
import org.springframework.expression.spel.SpelCompilerMode;
import org.springframework.http.HttpStatus;
import org.springframework.web.context.support.XmlWebApplicationContext;
import org.xnio.Option;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class UndertowEmbeddedServletContainerFactory_ESTest extends UndertowEmbeddedServletContainerFactory_ESTest_scaffolding {

  @Test(timeout = 11000)
  public void test00()  throws Throwable  {
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory();
      Integer integer0 = Opcodes.DOUBLE;
      int int0 = (-4486);
      int int1 = Integer.compareUnsigned(int0, int0);
      undertowEmbeddedServletContainerFactory0.setIoThreads(integer0);
      int int2 = 0;
      ErrorPage[] errorPageArray0 = new ErrorPage[8];
      HttpStatus httpStatus0 = HttpStatus.FORBIDDEN;
      String string0 = "<I*%d%f-Wql_e";
      ErrorPage errorPage0 = new ErrorPage(httpStatus0, string0);
      errorPageArray0[0] = errorPage0;
      String string1 = "Customizers must not be null";
      ErrorPage errorPage1 = new ErrorPage(httpStatus0, string1);
      errorPageArray0[1] = errorPage1;
      Class<Throwable> class0 = Throwable.class;
      ErrorPage errorPage2 = new ErrorPage(class0, string0);
      errorPageArray0[2] = errorPage2;
      Class<SQLException> class1 = SQLException.class;
      String string2 = null;
      ErrorPage errorPage3 = new ErrorPage(class1, string2);
      errorPageArray0[3] = errorPage3;
      ErrorPage errorPage4 = new ErrorPage(string2);
      errorPageArray0[4] = errorPage4;
      ErrorPage errorPage5 = new ErrorPage(httpStatus0, string2);
      errorPageArray0[5] = errorPage5;
      ErrorPage errorPage6 = new ErrorPage(class0, string1);
      errorPageArray0[6] = errorPage6;
      String string3 = "b%Sf";
      ErrorPage errorPage7 = new ErrorPage(httpStatus0, string3);
      errorPageArray0[7] = errorPage7;
      undertowEmbeddedServletContainerFactory0.addErrorPages(errorPageArray0);
      int int3 = Integer.max(int2, int0);
      boolean boolean0 = true;
      undertowEmbeddedServletContainerFactory0.setPersistSession(boolean0);
      ServletContextInitializer[] servletContextInitializerArray0 = new ServletContextInitializer[0];
      String string4 = ";9Pjp/n<pp8ckrrhh69";
      Integer integer1 = JLayeredPane.PALETTE_LAYER;
      Integer integer2 = Integer.getInteger(string4, integer1);
      // Undeclared exception!
      try { 
        undertowEmbeddedServletContainerFactory0.getEmbeddedServletContainer(servletContextInitializerArray0);
      } catch(RuntimeException e) {
         //
         // java.security.AccessControlException: access denied (\"java.lang.RuntimePermission\" \"io.undertow.servlet.CREATE_INITIAL_HANDLER\")
         //
         verifyException("io.undertow.servlet.core.DeploymentManagerImpl", e);
      }
  }

  @Test(timeout = 11000)
  public void test01()  throws Throwable  {
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory();
      int int0 = (-221);
      TimeUnit timeUnit0 = TimeUnit.SECONDS;
      String string0 = "\\/,7@pT]wy7&$uHb<VX";
      DOMNamespace dOMNamespace0 = new DOMNamespace(string0, string0);
      BeanElement beanElement0 = new BeanElement(string0, dOMNamespace0, timeUnit0);
      String string1 = "c.?#?";
      undertowEmbeddedServletContainerFactory0.setDisplayName(string1);
      boolean boolean0 = false;
      undertowEmbeddedServletContainerFactory0.setUseForwardHeaders(boolean0);
      undertowEmbeddedServletContainerFactory0.setAccessLogEnabled(boolean0);
      Integer integer0 = groovyjarjarasm.asm.Opcodes.UNINITIALIZED_THIS;
      undertowEmbeddedServletContainerFactory0.setIoThreads(integer0);
      String string2 = "Unable to write to database in appender: ";
      undertowEmbeddedServletContainerFactory0.setAccessLogPattern(string2);
      PriorityQueue<UndertowBuilderCustomizer> priorityQueue0 = new PriorityQueue<UndertowBuilderCustomizer>();
      undertowEmbeddedServletContainerFactory0.setBuilderCustomizers(priorityQueue0);
      UndertowBuilderCustomizer[] undertowBuilderCustomizerArray0 = null;
      // Undeclared exception!
      try { 
        undertowEmbeddedServletContainerFactory0.addBuilderCustomizers(undertowBuilderCustomizerArray0);
      } catch(IllegalArgumentException e) {
         //
         // Customizers must not be null
         //
         verifyException("org.springframework.util.Assert", e);
      }
  }

  @Test(timeout = 11000)
  public void test02()  throws Throwable  {
      int int0 = 270;
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory(int0);
      boolean boolean0 = false;
      JspPropertyGroup jspPropertyGroup0 = new JspPropertyGroup();
      Boolean boolean1 = jspPropertyGroup0.getScriptingInvalid();
      undertowEmbeddedServletContainerFactory0.setDirectBuffers(boolean1);
      boolean boolean2 = Boolean.logicalOr(boolean0, boolean0);
      undertowEmbeddedServletContainerFactory0.setAccessLogEnabled(boolean0);
      UndertowDeploymentInfoCustomizer[] undertowDeploymentInfoCustomizerArray0 = new UndertowDeploymentInfoCustomizer[6];
      String string0 = "";
      String string1 = "org.apache.coyote.http11.InternalNio2InputBuffer";
      UndertowDeploymentInfoCustomizer undertowDeploymentInfoCustomizer0 = mock(UndertowDeploymentInfoCustomizer.class, new ViolatedAssumptionAnswer());
      doReturn(string0, string1, string0, string1, string0).when(undertowDeploymentInfoCustomizer0).toString();
      undertowDeploymentInfoCustomizerArray0[0] = undertowDeploymentInfoCustomizer0;
      undertowDeploymentInfoCustomizerArray0[1] = undertowDeploymentInfoCustomizerArray0[0];
      undertowDeploymentInfoCustomizerArray0[2] = undertowDeploymentInfoCustomizerArray0[1];
      String string2 = "I";
      jspPropertyGroup0.setDeferredSyntax(string2);
      boolean boolean3 = Boolean.logicalAnd(boolean0, boolean0);
      undertowDeploymentInfoCustomizerArray0[3] = undertowDeploymentInfoCustomizerArray0[2];
      undertowDeploymentInfoCustomizerArray0[4] = undertowDeploymentInfoCustomizerArray0[3];
      undertowDeploymentInfoCustomizerArray0[5] = undertowDeploymentInfoCustomizerArray0[4];
      undertowEmbeddedServletContainerFactory0.addDeploymentInfoCustomizers(undertowDeploymentInfoCustomizerArray0);
      Integer integer0 = Opcodes.INTEGER;
      undertowEmbeddedServletContainerFactory0.setBuffersPerRegion(integer0);
      Integer integer1 = Integer.getInteger(string2);
      boolean boolean4 = true;
      undertowEmbeddedServletContainerFactory0.setAccessLogEnabled(boolean4);
      undertowEmbeddedServletContainerFactory0.setDirectBuffers(boolean1);
      Collection<UndertowDeploymentInfoCustomizer> collection0 = undertowEmbeddedServletContainerFactory0.getDeploymentInfoCustomizers();
      undertowEmbeddedServletContainerFactory0.setIoThreads(integer0);
      String string3 = "";
      undertowEmbeddedServletContainerFactory0.setAccessLogPattern(string3);
      boolean boolean5 = undertowEmbeddedServletContainerFactory0.isAccessLogEnabled();
      PriorityQueue<UndertowBuilderCustomizer> priorityQueue0 = new PriorityQueue<UndertowBuilderCustomizer>();
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean6 = true;
      boolean boolean7 = false;
      boolean boolean8 = FileSystemHandling.setPermissions(evoSuiteFile0, boolean5, boolean6, boolean7);
      undertowEmbeddedServletContainerFactory0.setBuilderCustomizers(priorityQueue0);
      ServletContextInitializer[] servletContextInitializerArray0 = new ServletContextInitializer[0];
      // Undeclared exception!
      try { 
        undertowEmbeddedServletContainerFactory0.getEmbeddedServletContainer(servletContextInitializerArray0);
      } catch(RuntimeException e) {
         //
         // java.security.AccessControlException: access denied (\"java.lang.RuntimePermission\" \"io.undertow.servlet.CREATE_INITIAL_HANDLER\")
         //
         verifyException("io.undertow.servlet.core.DeploymentManagerImpl", e);
      }
  }

  @Test(timeout = 11000)
  public void test03()  throws Throwable  {
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory();
      boolean boolean0 = true;
      undertowEmbeddedServletContainerFactory0.setRegisterJspServlet(boolean0);
      Integer integer0 = JLayeredPane.MODAL_LAYER;
      int int0 = 2705;
      int int1 = 242;
      String string0 = Integer.toUnsignedString(int1);
      int int2 = Integer.min(int0, int0);
      undertowEmbeddedServletContainerFactory0.setBufferSize(integer0);
      boolean boolean1 = undertowEmbeddedServletContainerFactory0.isAccessLogEnabled();
      Collection<UndertowDeploymentInfoCustomizer> collection0 = undertowEmbeddedServletContainerFactory0.getDeploymentInfoCustomizers();
      LinkedList<UndertowBuilderCustomizer> linkedList0 = new LinkedList<UndertowBuilderCustomizer>();
      undertowEmbeddedServletContainerFactory0.setBuilderCustomizers(linkedList0);
      undertowEmbeddedServletContainerFactory0.setDeploymentInfoCustomizers(collection0);
      boolean boolean2 = undertowEmbeddedServletContainerFactory0.isAccessLogEnabled();
      File file0 = null;
      undertowEmbeddedServletContainerFactory0.setAccessLogDirectory(file0);
      Integer integer1 = groovyjarjarasm.asm.Opcodes.LONG;
      undertowEmbeddedServletContainerFactory0.setRegisterDefaultServlet(boolean2);
      undertowEmbeddedServletContainerFactory0.setBuffersPerRegion(integer1);
      boolean boolean3 = undertowEmbeddedServletContainerFactory0.isAccessLogEnabled();
      Integer integer2 = Opcodes.DOUBLE;
      undertowEmbeddedServletContainerFactory0.setBufferSize(integer2);
      String string1 = null;
      undertowEmbeddedServletContainerFactory0.setAccessLogPattern(string1);
  }

  @Test(timeout = 11000)
  public void test04()  throws Throwable  {
      String[] stringArray0 = new String[6];
      Class<MimeMappings.Mapping> class0 = MimeMappings.Mapping.class;
      ClassPathXmlApplicationContext classPathXmlApplicationContext0 = null;
      try {
        classPathXmlApplicationContext0 = new ClassPathXmlApplicationContext(stringArray0, class0);
      } catch(IllegalArgumentException e) {
         //
         // Path must not be null
         //
         verifyException("org.springframework.util.Assert", e);
      }
  }

  @Test(timeout = 11000)
  public void test05()  throws Throwable  {
      String string0 = "";
      int int0 = 0;
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory(string0, int0);
      String string1 = "Ox/\\phbe89+\"ku70a";
      WebAppContext webAppContext0 = new WebAppContext(string0, string1);
      Class<DefaultTableModel> class0 = DefaultTableModel.class;
      Collection<DefaultTableModel> collection0 = webAppContext0.getBeans(class0);
      File file0 = webAppContext0.getTempDirectory();
      undertowEmbeddedServletContainerFactory0.setSessionStoreDir(file0);
      boolean boolean0 = undertowEmbeddedServletContainerFactory0.isAccessLogEnabled();
      Collection<UndertowBuilderCustomizer> collection1 = undertowEmbeddedServletContainerFactory0.getBuilderCustomizers();
      UndertowBuilderCustomizer[] undertowBuilderCustomizerArray0 = new UndertowBuilderCustomizer[8];
      UndertowBuilderCustomizer undertowBuilderCustomizer0 = mock(UndertowBuilderCustomizer.class, new ViolatedAssumptionAnswer());
      undertowBuilderCustomizerArray0[0] = undertowBuilderCustomizer0;
      undertowBuilderCustomizerArray0[1] = undertowBuilderCustomizerArray0[0];
      undertowBuilderCustomizerArray0[2] = undertowBuilderCustomizerArray0[1];
      undertowBuilderCustomizerArray0[3] = undertowBuilderCustomizerArray0[2];
      undertowBuilderCustomizerArray0[4] = undertowBuilderCustomizerArray0[3];
      undertowBuilderCustomizerArray0[5] = undertowBuilderCustomizerArray0[4];
      undertowBuilderCustomizerArray0[6] = undertowBuilderCustomizerArray0[5];
      undertowBuilderCustomizerArray0[7] = undertowBuilderCustomizerArray0[6];
      undertowEmbeddedServletContainerFactory0.addBuilderCustomizers(undertowBuilderCustomizerArray0);
  }

  @Test(timeout = 11000)
  public void test06()  throws Throwable  {
      String string0 = "";
      int int0 = (-2438);
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory(string0, int0);
      Integer integer0 = Opcodes.INTEGER;
      boolean boolean0 = false;
      undertowEmbeddedServletContainerFactory0.setRegisterJspServlet(boolean0);
      undertowEmbeddedServletContainerFactory0.setWorkerThreads(integer0);
      UndertowBuilderCustomizer[] undertowBuilderCustomizerArray0 = new UndertowBuilderCustomizer[3];
      UndertowBuilderCustomizer undertowBuilderCustomizer0 = mock(UndertowBuilderCustomizer.class, new ViolatedAssumptionAnswer());
      undertowBuilderCustomizerArray0[0] = undertowBuilderCustomizer0;
      undertowBuilderCustomizerArray0[1] = undertowBuilderCustomizerArray0[0];
      undertowBuilderCustomizerArray0[2] = undertowBuilderCustomizerArray0[1];
      undertowEmbeddedServletContainerFactory0.addBuilderCustomizers(undertowBuilderCustomizerArray0);
      undertowEmbeddedServletContainerFactory0.setBufferSize(integer0);
      GenericGroovyApplicationContext genericGroovyApplicationContext0 = new GenericGroovyApplicationContext();
      undertowEmbeddedServletContainerFactory0.setResourceLoader(genericGroovyApplicationContext0);
      ServletContextInitializer[] servletContextInitializerArray0 = new ServletContextInitializer[1];
      FilterRegistrationBean filterRegistrationBean0 = new FilterRegistrationBean();
      servletContextInitializerArray0[0] = (ServletContextInitializer) filterRegistrationBean0;
      // Undeclared exception!
      try { 
        undertowEmbeddedServletContainerFactory0.getEmbeddedServletContainer(servletContextInitializerArray0);
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: Filter must not be null
         //
         verifyException("io.undertow.servlet.core.DeploymentManagerImpl", e);
      }
  }

  @Test(timeout = 11000)
  public void test07()  throws Throwable  {
      int int0 = 51;
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory(int0);
      Undertow.Builder undertow_Builder0 = Undertow.builder();
      String string0 = "";
      SSLContext sSLContext0 = SSLContext.getDefault();
      HttpHandler httpHandler0 = null;
      Undertow.Builder undertow_Builder1 = undertow_Builder0.addHttpsListener(int0, string0, sSLContext0, httpHandler0);
      String string1 = "";
      Undertow.Builder undertow_Builder2 = undertow_Builder0.setHandler(httpHandler0);
      boolean boolean0 = false;
      Undertow.Builder undertow_Builder3 = undertow_Builder2.setDirectBuffers(boolean0);
      ServletContainerImpl servletContainerImpl0 = new ServletContainerImpl();
      DeploymentInfo deploymentInfo0 = new DeploymentInfo();
      ByteRangeHandler.Wrapper byteRangeHandler_Wrapper0 = new ByteRangeHandler.Wrapper(boolean0);
      DeploymentInfo deploymentInfo1 = deploymentInfo0.addInnerHandlerChainWrapper(byteRangeHandler_Wrapper0);
      ServletRegistrationBean servletRegistrationBean0 = new ServletRegistrationBean();
      Collection<String> collection0 = servletRegistrationBean0.getUrlMappings();
      DeploymentInfo deploymentInfo2 = deploymentInfo1.addSecurityRoles(collection0);
      DeploymentManager deploymentManager0 = servletContainerImpl0.addDeployment(deploymentInfo2);
      int int1 = 1;
      UndertowEmbeddedServletContainer undertowEmbeddedServletContainer0 = undertowEmbeddedServletContainerFactory0.getUndertowEmbeddedServletContainer(undertow_Builder3, deploymentManager0, int1);
  }

  @Test(timeout = 11000)
  public void test08()  throws Throwable  {
      int int0 = 534;
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory(int0);
      Undertow.Builder undertow_Builder0 = null;
      ServletContainerImpl servletContainerImpl0 = new ServletContainerImpl();
      String string0 = "";
      DeploymentManager deploymentManager0 = servletContainerImpl0.getDeploymentByPath(string0);
      int int1 = (-1452);
      UndertowEmbeddedServletContainer undertowEmbeddedServletContainer0 = undertowEmbeddedServletContainerFactory0.getUndertowEmbeddedServletContainer(undertow_Builder0, deploymentManager0, int1);
      Integer integer0 = groovyjarjarasm.asm.Opcodes.LONG;
      undertowEmbeddedServletContainerFactory0.setWorkerThreads(integer0);
      UndertowDeploymentInfoCustomizer[] undertowDeploymentInfoCustomizerArray0 = new UndertowDeploymentInfoCustomizer[7];
      UndertowDeploymentInfoCustomizer undertowDeploymentInfoCustomizer0 = mock(UndertowDeploymentInfoCustomizer.class, new ViolatedAssumptionAnswer());
      undertowDeploymentInfoCustomizerArray0[0] = undertowDeploymentInfoCustomizer0;
      undertowDeploymentInfoCustomizerArray0[1] = undertowDeploymentInfoCustomizerArray0[0];
      undertowDeploymentInfoCustomizerArray0[2] = undertowDeploymentInfoCustomizerArray0[1];
      undertowDeploymentInfoCustomizerArray0[3] = undertowDeploymentInfoCustomizerArray0[2];
      undertowDeploymentInfoCustomizerArray0[4] = undertowDeploymentInfoCustomizerArray0[3];
      undertowDeploymentInfoCustomizerArray0[5] = undertowDeploymentInfoCustomizerArray0[4];
      undertowDeploymentInfoCustomizerArray0[6] = undertowDeploymentInfoCustomizerArray0[5];
      undertowEmbeddedServletContainerFactory0.addDeploymentInfoCustomizers(undertowDeploymentInfoCustomizerArray0);
  }

  @Test(timeout = 11000)
  public void test09()  throws Throwable  {
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory();
      XmlWebApplicationContext xmlWebApplicationContext0 = new XmlWebApplicationContext();
      undertowEmbeddedServletContainerFactory0.setResourceLoader(xmlWebApplicationContext0);
  }

  @Test(timeout = 11000)
  public void test10()  throws Throwable  {
      int int0 = 0;
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory(int0);
      boolean boolean0 = true;
      undertowEmbeddedServletContainerFactory0.setUseForwardHeaders(boolean0);
  }

  @Test(timeout = 11000)
  public void test11()  throws Throwable  {
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory();
      Integer integer0 = groovyjarjarasm.asm.Opcodes.FLOAT;
      undertowEmbeddedServletContainerFactory0.setIoThreads(integer0);
  }

  @Test(timeout = 11000)
  public void test12()  throws Throwable  {
      int int0 = 0;
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory(int0);
      boolean boolean0 = true;
      undertowEmbeddedServletContainerFactory0.setAccessLogEnabled(boolean0);
  }

  @Test(timeout = 11000)
  public void test13()  throws Throwable  {
      String string0 = "rv^Jb`@?:];AZ`S";
      int int0 = 2252;
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = null;
      try {
        undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory(string0, int0);
      } catch(IllegalArgumentException e) {
         //
         // ContextPath must start with '/' and not end with '/'
         //
         verifyException("org.springframework.boot.context.embedded.AbstractConfigurableEmbeddedServletContainer", e);
      }
  }

  @Test(timeout = 11000)
  public void test14()  throws Throwable  {
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory();
      Integer integer0 = JLayeredPane.FRAME_CONTENT_LAYER;
      undertowEmbeddedServletContainerFactory0.setIoThreads(integer0);
      ServletContextInitializer[] servletContextInitializerArray0 = null;
      // Undeclared exception!
      try { 
        undertowEmbeddedServletContainerFactory0.getEmbeddedServletContainer(servletContextInitializerArray0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 11000)
  public void test15()  throws Throwable  {
      int int0 = 437;
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory(int0);
      String string0 = "1V57]r#";
      Boolean boolean0 = new Boolean(string0);
      undertowEmbeddedServletContainerFactory0.setDirectBuffers(boolean0);
  }

  @Test(timeout = 11000)
  public void test16()  throws Throwable  {
      int int0 = (-752);
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory(int0);
      boolean boolean0 = true;
      String string0 = "";
      String string1 = "yKcO 9#]|rHc-OE=;";
      undertowEmbeddedServletContainerFactory0.setDisplayName(string1);
      undertowEmbeddedServletContainerFactory0.setAccessLogPattern(string0);
      undertowEmbeddedServletContainerFactory0.setRegisterJspServlet(boolean0);
      UndertowDeploymentInfoCustomizer[] undertowDeploymentInfoCustomizerArray0 = null;
      // Undeclared exception!
      try { 
        undertowEmbeddedServletContainerFactory0.addDeploymentInfoCustomizers(undertowDeploymentInfoCustomizerArray0);
      } catch(IllegalArgumentException e) {
         //
         // UndertowDeploymentInfoCustomizers must not be null
         //
         verifyException("org.springframework.util.Assert", e);
      }
  }

  @Test(timeout = 11000)
  public void test17()  throws Throwable  {
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory();
      Integer integer0 = JLayeredPane.DRAG_LAYER;
      int int0 = 0;
      int int1 = (-475);
      int int2 = Integer.max(int0, int1);
      undertowEmbeddedServletContainerFactory0.setBufferSize(integer0);
      Undertow.Builder undertow_Builder0 = Undertow.builder();
      boolean boolean0 = false;
      RoutingHandler routingHandler0 = new RoutingHandler(boolean0);
      Undertow.Builder undertow_Builder1 = undertow_Builder0.setHandler(routingHandler0);
      String string0 = "yARNUTL_\\ol\\*z";
      Undertow.Builder undertow_Builder2 = undertow_Builder1.addAjpListener(int0, string0);
      int int3 = 827;
      Undertow.Builder undertow_Builder3 = undertow_Builder2.setBuffersPerRegion(int3);
      boolean boolean1 = true;
      Undertow.Builder undertow_Builder4 = undertow_Builder3.setDirectBuffers(boolean1);
      DeploymentManager deploymentManager0 = null;
      int int4 = 1357;
      UndertowEmbeddedServletContainer undertowEmbeddedServletContainer0 = undertowEmbeddedServletContainerFactory0.getUndertowEmbeddedServletContainer(undertow_Builder4, deploymentManager0, int4);
      int int5 = 0;
      UndertowEmbeddedServletContainer undertowEmbeddedServletContainer1 = undertowEmbeddedServletContainerFactory0.getUndertowEmbeddedServletContainer(undertow_Builder3, deploymentManager0, int5);
  }

  @Test(timeout = 11000)
  public void test18()  throws Throwable  {
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory();
      int int0 = 76;
      MimeMappings mimeMappings0 = undertowEmbeddedServletContainerFactory0.getMimeMappings();
      MimeMappings mimeMappings1 = MimeMappings.unmodifiableMappings(mimeMappings0);
      undertowEmbeddedServletContainerFactory0.setMimeMappings(mimeMappings1);
      undertowEmbeddedServletContainerFactory0.setSessionTimeout(int0);
      Collection<UndertowBuilderCustomizer> collection0 = null;
      // Undeclared exception!
      try { 
        undertowEmbeddedServletContainerFactory0.setBuilderCustomizers(collection0);
      } catch(IllegalArgumentException e) {
         //
         // Customizers must not be null
         //
         verifyException("org.springframework.util.Assert", e);
      }
  }

  @Test(timeout = 11000)
  public void test19()  throws Throwable  {
      int int0 = 1225;
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory(int0);
      InetAddress inetAddress0 = MockInetAddress.anyLocalAddress();
      boolean boolean0 = true;
      undertowEmbeddedServletContainerFactory0.setRegisterDefaultServlet(boolean0);
      undertowEmbeddedServletContainerFactory0.setAddress(inetAddress0);
      boolean boolean1 = undertowEmbeddedServletContainerFactory0.isAccessLogEnabled();
      Collection<UndertowBuilderCustomizer> collection0 = undertowEmbeddedServletContainerFactory0.getBuilderCustomizers();
      WebXml webXml0 = new WebXml();
      SessionConfig sessionConfig0 = webXml0.getSessionConfig();
      String string0 = "undertow-docbase";
      webXml0.setDisplayName(string0);
      boolean boolean2 = false;
      webXml0.setAlwaysAddWelcomeFiles(boolean2);
      Boolean boolean3 = sessionConfig0.getCookieSecure();
      boolean boolean4 = true;
      boolean boolean5 = false;
      boolean boolean6 = Boolean.logicalAnd(boolean4, boolean5);
      undertowEmbeddedServletContainerFactory0.setDirectBuffers(boolean3);
      ResourceLoader resourceLoader0 = null;
      undertowEmbeddedServletContainerFactory0.setResourceLoader(resourceLoader0);
      UndertowBuilderCustomizer[] undertowBuilderCustomizerArray0 = new UndertowBuilderCustomizer[4];
      undertowEmbeddedServletContainerFactory0.setResourceLoader(resourceLoader0);
      UndertowBuilderCustomizer undertowBuilderCustomizer0 = mock(UndertowBuilderCustomizer.class, new ViolatedAssumptionAnswer());
      undertowBuilderCustomizerArray0[0] = undertowBuilderCustomizer0;
      undertowBuilderCustomizerArray0[1] = undertowBuilderCustomizerArray0[0];
      undertowBuilderCustomizerArray0[2] = undertowBuilderCustomizerArray0[1];
      undertowBuilderCustomizerArray0[3] = undertowBuilderCustomizerArray0[2];
      undertowEmbeddedServletContainerFactory0.addBuilderCustomizers(undertowBuilderCustomizerArray0);
      Collection<UndertowDeploymentInfoCustomizer> collection1 = null;
      // Undeclared exception!
      try { 
        undertowEmbeddedServletContainerFactory0.setDeploymentInfoCustomizers(collection1);
      } catch(IllegalArgumentException e) {
         //
         // Customizers must not be null
         //
         verifyException("org.springframework.util.Assert", e);
      }
  }

  @Test(timeout = 11000)
  public void test20()  throws Throwable  {
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory();
      Integer integer0 = Opcodes.DOUBLE;
      int int0 = (-4486);
      int int1 = Integer.compareUnsigned(int0, int0);
      undertowEmbeddedServletContainerFactory0.setIoThreads(integer0);
      int int2 = 0;
      int int3 = Integer.max(int2, int0);
      boolean boolean0 = true;
      undertowEmbeddedServletContainerFactory0.setPersistSession(boolean0);
      ServletContextInitializer[] servletContextInitializerArray0 = new ServletContextInitializer[0];
      // Undeclared exception!
      try { 
        undertowEmbeddedServletContainerFactory0.getEmbeddedServletContainer(servletContextInitializerArray0);
      } catch(RuntimeException e) {
         //
         // java.security.AccessControlException: access denied (\"java.lang.RuntimePermission\" \"io.undertow.servlet.CREATE_INITIAL_HANDLER\")
         //
         verifyException("io.undertow.servlet.core.DeploymentManagerImpl", e);
      }
  }

  @Test(timeout = 11000)
  public void test21()  throws Throwable  {
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory();
      Integer integer0 = JLayeredPane.FRAME_CONTENT_LAYER;
      boolean boolean0 = false;
      undertowEmbeddedServletContainerFactory0.setUseForwardHeaders(boolean0);
      int int0 = 0;
      ServletContextInitializer[] servletContextInitializerArray0 = new ServletContextInitializer[6];
      String string0 = "NK ~obD";
      DefaultServlet defaultServlet0 = new DefaultServlet();
      ServletHolder servletHolder0 = new ServletHolder(string0, defaultServlet0);
      Map<String, String> map0 = servletHolder0.getRoleRefMap();
      InitParameterConfiguringServletContextInitializer initParameterConfiguringServletContextInitializer0 = new InitParameterConfiguringServletContextInitializer(map0);
      servletContextInitializerArray0[0] = (ServletContextInitializer) initParameterConfiguringServletContextInitializer0;
      ServletRegistrationBean[] servletRegistrationBeanArray0 = new ServletRegistrationBean[4];
      ServletRegistrationBean servletRegistrationBean0 = new ServletRegistrationBean();
      servletRegistrationBeanArray0[0] = servletRegistrationBean0;
      ServletRegistrationBean servletRegistrationBean1 = new ServletRegistrationBean();
      servletRegistrationBeanArray0[1] = servletRegistrationBean1;
      String[] stringArray0 = new String[2];
      stringArray0[0] = defaultServlet0.DISALLOWED_EXTENSIONS;
      stringArray0[1] = defaultServlet0.DISALLOWED_EXTENSIONS;
      ServletRegistrationBean servletRegistrationBean2 = new ServletRegistrationBean(defaultServlet0, stringArray0);
      servletRegistrationBeanArray0[2] = servletRegistrationBean2;
      ServletRegistrationBean servletRegistrationBean3 = new ServletRegistrationBean(defaultServlet0, boolean0, stringArray0);
      servletRegistrationBeanArray0[3] = servletRegistrationBean3;
      DelegatingFilterProxyRegistrationBean delegatingFilterProxyRegistrationBean0 = new DelegatingFilterProxyRegistrationBean(defaultServlet0.DIRECTORY_LISTING, servletRegistrationBeanArray0);
      servletContextInitializerArray0[1] = (ServletContextInitializer) delegatingFilterProxyRegistrationBean0;
      FilterRegistrationBean filterRegistrationBean0 = new FilterRegistrationBean();
      servletContextInitializerArray0[2] = (ServletContextInitializer) filterRegistrationBean0;
      FilterRegistrationBean filterRegistrationBean1 = new FilterRegistrationBean();
      servletContextInitializerArray0[3] = (ServletContextInitializer) filterRegistrationBean1;
      ServletRegistrationBean servletRegistrationBean4 = new ServletRegistrationBean(defaultServlet0, stringArray0);
      servletContextInitializerArray0[4] = (ServletContextInitializer) servletRegistrationBean4;
      RequestDumperFilter requestDumperFilter0 = new RequestDumperFilter();
      FilterRegistrationBean filterRegistrationBean2 = new FilterRegistrationBean(requestDumperFilter0, servletRegistrationBeanArray0);
      servletContextInitializerArray0[5] = (ServletContextInitializer) filterRegistrationBean2;
      // Undeclared exception!
      try { 
        undertowEmbeddedServletContainerFactory0.getEmbeddedServletContainer(servletContextInitializerArray0);
      } catch(RuntimeException e) {
         //
         // java.lang.NullPointerException
         //
         verifyException("io.undertow.servlet.core.DeploymentManagerImpl", e);
      }
  }

  @Test(timeout = 11000)
  public void test22()  throws Throwable  {
      String string0 = "";
      int int0 = (-2573);
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory(string0, int0);
      boolean boolean0 = true;
      LinkedHashSet<JMXPrincipal> linkedHashSet0 = new LinkedHashSet<JMXPrincipal>();
      Subject subject0 = new Subject(boolean0, linkedHashSet0, linkedHashSet0, linkedHashSet0);
      Class<UndertowDeploymentInfoCustomizer> class0 = UndertowDeploymentInfoCustomizer.class;
      String string1 = "";
      JMXPrincipal jMXPrincipal0 = new JMXPrincipal(string1);
      boolean boolean1 = linkedHashSet0.add(jMXPrincipal0);
      Set<UndertowDeploymentInfoCustomizer> set0 = subject0.getPrivateCredentials(class0);
      undertowEmbeddedServletContainerFactory0.setDeploymentInfoCustomizers(set0);
      Integer integer0 = groovyjarjarasm.asm.Opcodes.LONG;
      int int1 = 2715;
      int int2 = 2724;
      int int3 = Integer.compareUnsigned(int1, int2);
      undertowEmbeddedServletContainerFactory0.setBufferSize(integer0);
      Collection<UndertowDeploymentInfoCustomizer> collection0 = undertowEmbeddedServletContainerFactory0.getDeploymentInfoCustomizers();
      Collection<UndertowDeploymentInfoCustomizer> collection1 = undertowEmbeddedServletContainerFactory0.getDeploymentInfoCustomizers();
      boolean boolean2 = true;
      Boolean boolean3 = new Boolean(boolean2);
      boolean boolean4 = false;
      boolean boolean5 = false;
      boolean boolean6 = Boolean.logicalXor(boolean5, boolean0);
      boolean boolean7 = true;
      boolean boolean8 = Boolean.logicalAnd(boolean4, boolean7);
      undertowEmbeddedServletContainerFactory0.setDirectBuffers(boolean3);
      undertowEmbeddedServletContainerFactory0.setAccessLogPattern(string0);
      undertowEmbeddedServletContainerFactory0.setWorkerThreads(integer0);
      Collection<UndertowBuilderCustomizer> collection2 = undertowEmbeddedServletContainerFactory0.getBuilderCustomizers();
      UndertowBuilderCustomizer[] undertowBuilderCustomizerArray0 = null;
      // Undeclared exception!
      try { 
        undertowEmbeddedServletContainerFactory0.addBuilderCustomizers(undertowBuilderCustomizerArray0);
      } catch(IllegalArgumentException e) {
         //
         // Customizers must not be null
         //
         verifyException("org.springframework.util.Assert", e);
      }
  }

  @Test(timeout = 11000)
  public void test23()  throws Throwable  {
      int int0 = 145;
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory(int0);
      ClassPathXmlApplicationContext classPathXmlApplicationContext0 = new ClassPathXmlApplicationContext();
      undertowEmbeddedServletContainerFactory0.setResourceLoader(classPathXmlApplicationContext0);
      Integer integer0 = groovyjarjarasm.asm.Opcodes.TOP;
      undertowEmbeddedServletContainerFactory0.setDisplayName(classPathXmlApplicationContext0.MESSAGE_SOURCE_BEAN_NAME);
      undertowEmbeddedServletContainerFactory0.setBufferSize(integer0);
      String string0 = "-j#XdzNf} ";
      undertowEmbeddedServletContainerFactory0.setAccessLogPattern(string0);
      boolean boolean0 = true;
      undertowEmbeddedServletContainerFactory0.setUseForwardHeaders(boolean0);
      ServletContextInitializer[] servletContextInitializerArray0 = new ServletContextInitializer[4];
      MetalRootPaneUI metalRootPaneUI0 = new MetalRootPaneUI();
      System.setCurrentTimeMillis(int0);
      // Undeclared exception!
      try { 
        undertowEmbeddedServletContainerFactory0.getEmbeddedServletContainer(servletContextInitializerArray0);
      } catch(RuntimeException e) {
         //
         // java.lang.NullPointerException
         //
         verifyException("io.undertow.servlet.core.DeploymentManagerImpl", e);
      }
  }

  @Test(timeout = 11000)
  public void test24()  throws Throwable  {
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory();
      Integer integer0 = JLayeredPane.DRAG_LAYER;
      int int0 = (-1457);
      int int1 = 16777222;
      int int2 = 623;
      int int3 = Integer.max(int2, int1);
      int int4 = Integer.max(int0, int1);
      undertowEmbeddedServletContainerFactory0.setIoThreads(integer0);
      Integer integer1 = null;
      undertowEmbeddedServletContainerFactory0.setBufferSize(integer1);
      UndertowBuilderCustomizer[] undertowBuilderCustomizerArray0 = new UndertowBuilderCustomizer[0];
      undertowEmbeddedServletContainerFactory0.addBuilderCustomizers(undertowBuilderCustomizerArray0);
      undertowEmbeddedServletContainerFactory0.addBuilderCustomizers(undertowBuilderCustomizerArray0);
      boolean boolean0 = true;
      undertowEmbeddedServletContainerFactory0.setAccessLogEnabled(boolean0);
      ServletContextInitializer[] servletContextInitializerArray0 = new ServletContextInitializer[0];
      // Undeclared exception!
      try { 
        undertowEmbeddedServletContainerFactory0.getEmbeddedServletContainer(servletContextInitializerArray0);
      } catch(RuntimeException e) {
         //
         // java.security.AccessControlException: access denied (\"java.lang.RuntimePermission\" \"io.undertow.servlet.CREATE_INITIAL_HANDLER\")
         //
         verifyException("io.undertow.servlet.core.DeploymentManagerImpl", e);
      }
  }

  @Test(timeout = 11000)
  public void test25()  throws Throwable  {
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory();
      boolean boolean0 = false;
      undertowEmbeddedServletContainerFactory0.setAccessLogEnabled(boolean0);
      Integer integer0 = JLayeredPane.MODAL_LAYER;
      undertowEmbeddedServletContainerFactory0.setBufferSize(integer0);
      GenericGroovyApplicationContext genericGroovyApplicationContext0 = new GenericGroovyApplicationContext();
      String string0 = "l0T9/y";
      Boolean boolean1 = new Boolean(boolean0);
      undertowEmbeddedServletContainerFactory0.setResourceLoader(genericGroovyApplicationContext0);
      UndertowDeploymentInfoCustomizer[] undertowDeploymentInfoCustomizerArray0 = new UndertowDeploymentInfoCustomizer[8];
      UndertowDeploymentInfoCustomizer undertowDeploymentInfoCustomizer0 = mock(UndertowDeploymentInfoCustomizer.class, new ViolatedAssumptionAnswer());
      undertowDeploymentInfoCustomizerArray0[0] = undertowDeploymentInfoCustomizer0;
      undertowDeploymentInfoCustomizerArray0[1] = undertowDeploymentInfoCustomizerArray0[0];
      undertowDeploymentInfoCustomizerArray0[2] = undertowDeploymentInfoCustomizerArray0[1];
      undertowDeploymentInfoCustomizerArray0[3] = undertowDeploymentInfoCustomizerArray0[2];
      undertowDeploymentInfoCustomizerArray0[4] = undertowDeploymentInfoCustomizerArray0[3];
      undertowDeploymentInfoCustomizerArray0[5] = undertowDeploymentInfoCustomizerArray0[4];
      undertowDeploymentInfoCustomizerArray0[6] = undertowDeploymentInfoCustomizerArray0[5];
      undertowDeploymentInfoCustomizerArray0[7] = undertowDeploymentInfoCustomizerArray0[6];
      undertowEmbeddedServletContainerFactory0.addDeploymentInfoCustomizers(undertowDeploymentInfoCustomizerArray0);
      Stack<UndertowBuilderCustomizer> stack0 = new Stack<UndertowBuilderCustomizer>();
      UndertowBuilderCustomizer undertowBuilderCustomizer0 = mock(UndertowBuilderCustomizer.class, new ViolatedAssumptionAnswer());
      boolean boolean2 = stack0.add(undertowBuilderCustomizer0);
      genericGroovyApplicationContext0.setAllowBeanDefinitionOverriding(boolean2);
      undertowEmbeddedServletContainerFactory0.setBuilderCustomizers(stack0);
      Compression compression0 = undertowEmbeddedServletContainerFactory0.getCompression();
      undertowEmbeddedServletContainerFactory0.setCompression(compression0);
      undertowEmbeddedServletContainerFactory0.setResourceLoader(genericGroovyApplicationContext0);
      String string1 = "org.springframework.web.filter.CompositeFilter$VirtualFilterChain";
      undertowEmbeddedServletContainerFactory0.setAccessLogPattern(string1);
      boolean boolean3 = false;
      undertowEmbeddedServletContainerFactory0.setUseForwardHeaders(boolean3);
      ServletContextInitializer[] servletContextInitializerArray0 = new ServletContextInitializer[1];
      ServletListenerRegistrationBean<MetalRootPaneUI> servletListenerRegistrationBean0 = new ServletListenerRegistrationBean<MetalRootPaneUI>();
      servletContextInitializerArray0[0] = (ServletContextInitializer) servletListenerRegistrationBean0;
      // Undeclared exception!
      try { 
        undertowEmbeddedServletContainerFactory0.getEmbeddedServletContainer(servletContextInitializerArray0);
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: Failed to add listener 'null' to servlet context
         //
         verifyException("io.undertow.servlet.core.DeploymentManagerImpl", e);
      }
  }

  @Test(timeout = 11000)
  public void test26()  throws Throwable  {
      long long0 = 0L;
      System.setCurrentTimeMillis(long0);
      int int0 = (-975);
      Random.setNextRandom(int0);
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      int int1 = (-492);
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory(int1);
      ServletContextInitializer[] servletContextInitializerArray0 = new ServletContextInitializer[2];
      FilterRegistrationBean filterRegistrationBean0 = new FilterRegistrationBean();
      servletContextInitializerArray0[0] = (ServletContextInitializer) filterRegistrationBean0;
      FilterRegistrationBean filterRegistrationBean1 = new FilterRegistrationBean();
      servletContextInitializerArray0[1] = (ServletContextInitializer) filterRegistrationBean1;
      // Undeclared exception!
      try { 
        undertowEmbeddedServletContainerFactory0.getEmbeddedServletContainer(servletContextInitializerArray0);
      } catch(RuntimeException e) {
         //
         // Unable to create tempDir. java.io.tmpdir is set to /tmp
         //
         verifyException("org.springframework.boot.context.embedded.AbstractEmbeddedServletContainerFactory", e);
      }
  }
}
