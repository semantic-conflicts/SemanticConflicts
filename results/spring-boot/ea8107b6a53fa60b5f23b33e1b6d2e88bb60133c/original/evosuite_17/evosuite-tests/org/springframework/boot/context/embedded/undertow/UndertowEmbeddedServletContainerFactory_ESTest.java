/*
 * This file was automatically generated by EvoSuite
 * Fri May 01 15:22:33 GMT 2020
 */

package org.springframework.boot.context.embedded.undertow;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import groovy.lang.NonEmptySequence;
import groovy.lang.Sequence;
import groovyjarjarasm.asm.Opcodes;
import io.undertow.Undertow;
import io.undertow.server.HttpHandler;
import io.undertow.server.RoutingHandler;
import io.undertow.servlet.Servlets;
import io.undertow.servlet.api.DeploymentInfo;
import io.undertow.servlet.api.DeploymentManager;
import io.undertow.servlet.api.FilterInfo;
import io.undertow.servlet.api.ServletContainer;
import io.undertow.servlet.api.ServletInfo;
import io.undertow.servlet.core.DeploymentManagerImpl;
import io.undertow.servlet.core.ServletContainerImpl;
import io.undertow.servlet.handlers.DefaultServlet;
import io.undertow.servlet.util.ImmediateInstanceFactory;
import java.awt.Dialog;
import java.io.File;
import java.net.InetAddress;
import java.util.Collection;
import java.util.Enumeration;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.ListIterator;
import java.util.Map;
import java.util.Set;
import java.util.Stack;
import java.util.concurrent.LinkedBlockingDeque;
import java.util.concurrent.LinkedBlockingQueue;
import java.util.concurrent.PriorityBlockingQueue;
import java.util.concurrent.SynchronousQueue;
import java.util.concurrent.TimeUnit;
import javax.net.ssl.SSLContext;
import javax.security.auth.Subject;
import javax.servlet.Servlet;
import javax.swing.JLayeredPane;
import javax.swing.JSpinner;
import org.apache.catalina.core.ApplicationContext;
import org.apache.catalina.core.StandardContext;
import org.apache.catalina.core.StandardEngine;
import org.apache.catalina.startup.FailedContext;
import org.apache.tomcat.util.descriptor.web.JspPropertyGroup;
import org.apache.tomcat.util.descriptor.web.WebXml;
import org.codehaus.groovy.control.CompilePhase;
import org.dom4j.bean.BeanAttributeList;
import org.dom4j.bean.BeanElement;
import org.dom4j.bean.BeanMetaData;
import org.eclipse.jetty.http.HttpFields;
import org.eclipse.jetty.servlet.ServletContextHandler;
import org.eclipse.jetty.util.AttributesMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.net.MockInetAddress;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import org.springframework.boot.context.embedded.DelegatingFilterProxyRegistrationBean;
import org.springframework.boot.context.embedded.EmbeddedServletContainer;
import org.springframework.boot.context.embedded.ErrorPage;
import org.springframework.boot.context.embedded.FilterRegistrationBean;
import org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer;
import org.springframework.boot.context.embedded.JspServlet;
import org.springframework.boot.context.embedded.MimeMappings;
import org.springframework.boot.context.embedded.ServletContextInitializer;
import org.springframework.boot.context.embedded.ServletListenerRegistrationBean;
import org.springframework.boot.context.embedded.ServletRegistrationBean;
import org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer;
import org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer;
import org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainer;
import org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory;
import org.springframework.context.support.ClassPathXmlApplicationContext;
import org.springframework.context.support.FileSystemXmlApplicationContext;
import org.springframework.context.support.GenericApplicationContext;
import org.springframework.core.io.ByteArrayResource;
import org.springframework.core.io.DefaultResourceLoader;
import org.springframework.http.HttpStatus;
import org.springframework.web.context.support.XmlWebApplicationContext;
import org.xnio.Option;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class UndertowEmbeddedServletContainerFactory_ESTest extends UndertowEmbeddedServletContainerFactory_ESTest_scaffolding {

  @Test(timeout = 11000)
  public void test00()  throws Throwable  {
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory();
      int int0 = 0;
      boolean boolean0 = false;
      undertowEmbeddedServletContainerFactory0.setRegisterDefaultServlet(boolean0);
      InetAddress inetAddress0 = MockInetAddress.anyLocalAddress();
      undertowEmbeddedServletContainerFactory0.setAddress(inetAddress0);
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      PriorityBlockingQueue<UndertowBuilderCustomizer> priorityBlockingQueue0 = new PriorityBlockingQueue<UndertowBuilderCustomizer>();
      boolean boolean1 = true;
      undertowEmbeddedServletContainerFactory0.setUseForwardHeaders(boolean1);
      StandardContext standardContext0 = new StandardContext();
      Undertow.Builder undertow_Builder0 = Undertow.builder();
      int int1 = 104857600;
      String string0 = "";
      Undertow.Builder undertow_Builder1 = undertow_Builder0.addAjpListener(int1, string0);
      Undertow.Builder undertow_Builder2 = undertow_Builder1.setBufferSize(int0);
      File file0 = standardContext0.getCatalinaBase();
      undertowEmbeddedServletContainerFactory0.setAccessLogDirectory(file0);
      ClassPathXmlApplicationContext classPathXmlApplicationContext0 = new ClassPathXmlApplicationContext();
      undertowEmbeddedServletContainerFactory0.setResourceLoader(classPathXmlApplicationContext0);
      boolean boolean2 = undertowEmbeddedServletContainerFactory0.isAccessLogEnabled();
      Boolean boolean3 = Boolean.FALSE;
      undertowEmbeddedServletContainerFactory0.setDirectBuffers(boolean3);
      UndertowBuilderCustomizer[] undertowBuilderCustomizerArray0 = new UndertowBuilderCustomizer[0];
      undertowEmbeddedServletContainerFactory0.addBuilderCustomizers(undertowBuilderCustomizerArray0);
      Random.setNextRandom(int1);
      ServletContextInitializer[] servletContextInitializerArray0 = new ServletContextInitializer[0];
      // Undeclared exception!
      try { 
        undertowEmbeddedServletContainerFactory0.getEmbeddedServletContainer(servletContextInitializerArray0);
      } catch(RuntimeException e) {
         //
         // java.security.AccessControlException: access denied (\"java.lang.RuntimePermission\" \"io.undertow.servlet.CREATE_INITIAL_HANDLER\")
         //
         verifyException("io.undertow.servlet.core.DeploymentManagerImpl", e);
      }
  }

  @Test(timeout = 11000)
  public void test01()  throws Throwable  {
      String string0 = "";
      int int0 = 0;
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory(string0, int0);
      Integer integer0 = Opcodes.LONG;
      boolean boolean0 = false;
      int int1 = Integer.compare(int0, int0);
      undertowEmbeddedServletContainerFactory0.setRegisterDefaultServlet(boolean0);
      undertowEmbeddedServletContainerFactory0.setBufferSize(integer0);
      Collection<UndertowBuilderCustomizer> collection0 = undertowEmbeddedServletContainerFactory0.getBuilderCustomizers();
      Integer integer1 = JLayeredPane.PALETTE_LAYER;
      int int2 = 0;
      int int3 = Integer.compareUnsigned(int2, int0);
      undertowEmbeddedServletContainerFactory0.setWorkerThreads(integer1);
      Collection<UndertowDeploymentInfoCustomizer> collection1 = undertowEmbeddedServletContainerFactory0.getDeploymentInfoCustomizers();
      undertowEmbeddedServletContainerFactory0.setBuilderCustomizers(collection0);
      undertowEmbeddedServletContainerFactory0.setIoThreads(integer0);
      ServletContextInitializer[] servletContextInitializerArray0 = new ServletContextInitializer[0];
      // Undeclared exception!
      try { 
        undertowEmbeddedServletContainerFactory0.getEmbeddedServletContainer(servletContextInitializerArray0);
      } catch(RuntimeException e) {
         //
         // java.security.AccessControlException: access denied (\"java.lang.RuntimePermission\" \"io.undertow.servlet.CREATE_INITIAL_HANDLER\")
         //
         verifyException("io.undertow.servlet.core.DeploymentManagerImpl", e);
      }
  }

  @Test(timeout = 11000)
  public void test02()  throws Throwable  {
      int int0 = 0;
      System.setCurrentTimeMillis(int0);
      String string0 = "";
      boolean boolean0 = false;
      Boolean boolean1 = Boolean.FALSE;
      Integer integer0 = JLayeredPane.POPUP_LAYER;
      String string1 = "";
      int int1 = 0;
      Integer integer1 = JLayeredPane.MODAL_LAYER;
      UndertowDeploymentInfoCustomizer[] undertowDeploymentInfoCustomizerArray0 = new UndertowDeploymentInfoCustomizer[8];
      UndertowDeploymentInfoCustomizer undertowDeploymentInfoCustomizer0 = mock(UndertowDeploymentInfoCustomizer.class, new ViolatedAssumptionAnswer());
      undertowDeploymentInfoCustomizerArray0[0] = undertowDeploymentInfoCustomizer0;
      undertowDeploymentInfoCustomizerArray0[1] = undertowDeploymentInfoCustomizerArray0[0];
      undertowDeploymentInfoCustomizerArray0[2] = undertowDeploymentInfoCustomizerArray0[1];
      undertowDeploymentInfoCustomizerArray0[3] = undertowDeploymentInfoCustomizerArray0[2];
      undertowDeploymentInfoCustomizerArray0[4] = undertowDeploymentInfoCustomizerArray0[3];
      undertowDeploymentInfoCustomizerArray0[5] = undertowDeploymentInfoCustomizerArray0[4];
      undertowDeploymentInfoCustomizerArray0[6] = undertowDeploymentInfoCustomizer0;
      int int2 = 623;
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory(int2);
  }

  @Test(timeout = 11000)
  public void test03()  throws Throwable  {
      int int0 = (-60);
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory(int0);
      Collection<UndertowDeploymentInfoCustomizer> collection0 = undertowEmbeddedServletContainerFactory0.getDeploymentInfoCustomizers();
      Class<Dialog> class0 = Dialog.class;
      ServletContextHandler servletContextHandler0 = new ServletContextHandler(int0);
      Enumeration<String> enumeration0 = AttributesMap.getAttributeNamesCopy(servletContextHandler0);
      List<String> list0 = HttpFields.qualityList(enumeration0);
      ServletContainer servletContainer0 = Servlets.defaultContainer();
      MimeMappings mimeMappings0 = undertowEmbeddedServletContainerFactory0.getMimeMappings();
      undertowEmbeddedServletContainerFactory0.setMimeMappings(mimeMappings0);
      undertowEmbeddedServletContainerFactory0.setWorkerThreads((Integer) servletContextHandler0.DEFAULT_LISTENER_TYPE_INDEX);
      undertowEmbeddedServletContainerFactory0.setIoThreads((Integer) servletContextHandler0.SECURITY);
      String string0 = "?@;R-D0M-*,7/u<` ";
      undertowEmbeddedServletContainerFactory0.setAccessLogPattern(string0);
      Boolean boolean0 = null;
      undertowEmbeddedServletContainerFactory0.setDirectBuffers(boolean0);
      Integer integer0 = Opcodes.LONG;
      undertowEmbeddedServletContainerFactory0.setWorkerThreads(integer0);
      boolean boolean1 = true;
      undertowEmbeddedServletContainerFactory0.setAccessLogEnabled(boolean1);
      ServletContextInitializer[] servletContextInitializerArray0 = new ServletContextInitializer[1];
      FilterRegistrationBean filterRegistrationBean0 = new FilterRegistrationBean();
      servletContextInitializerArray0[0] = (ServletContextInitializer) filterRegistrationBean0;
      // Undeclared exception!
      try { 
        undertowEmbeddedServletContainerFactory0.getEmbeddedServletContainer(servletContextInitializerArray0);
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: Filter must not be null
         //
         verifyException("io.undertow.servlet.core.DeploymentManagerImpl", e);
      }
  }

  @Test(timeout = 11000)
  public void test04()  throws Throwable  {
      Integer integer0 = Opcodes.LONG;
      int int0 = (-921);
      Random.setNextRandom(int0);
      int int1 = 38;
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory(int1);
      System.setCurrentTimeMillis(int1);
  }

  @Test(timeout = 11000)
  public void test05()  throws Throwable  {
      int int0 = (-361);
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory(int0);
      UndertowBuilderCustomizer[] undertowBuilderCustomizerArray0 = new UndertowBuilderCustomizer[6];
      UndertowBuilderCustomizer undertowBuilderCustomizer0 = mock(UndertowBuilderCustomizer.class, new ViolatedAssumptionAnswer());
      undertowBuilderCustomizerArray0[0] = undertowBuilderCustomizer0;
      undertowBuilderCustomizerArray0[1] = undertowBuilderCustomizerArray0[0];
      undertowBuilderCustomizerArray0[2] = undertowBuilderCustomizerArray0[1];
      undertowBuilderCustomizerArray0[3] = undertowBuilderCustomizerArray0[2];
      undertowBuilderCustomizerArray0[4] = undertowBuilderCustomizerArray0[3];
      undertowBuilderCustomizerArray0[5] = undertowBuilderCustomizerArray0[4];
      undertowEmbeddedServletContainerFactory0.addBuilderCustomizers(undertowBuilderCustomizerArray0);
      JspPropertyGroup jspPropertyGroup0 = new JspPropertyGroup();
      Boolean boolean0 = jspPropertyGroup0.getTrimWhitespace();
      boolean boolean1 = false;
      boolean boolean2 = true;
      boolean boolean3 = Boolean.logicalXor(boolean1, boolean2);
      undertowEmbeddedServletContainerFactory0.setDirectBuffers(boolean0);
      Integer integer0 = null;
      undertowEmbeddedServletContainerFactory0.setBuffersPerRegion(integer0);
      Undertow.Builder undertow_Builder0 = Undertow.builder();
      String string0 = "applicationContext.addFilter.ise";
      boolean boolean4 = true;
      RoutingHandler routingHandler0 = new RoutingHandler(boolean4);
      Undertow.Builder undertow_Builder1 = undertow_Builder0.addHttpListener(int0, string0, (HttpHandler) routingHandler0);
      Class<List> class0 = List.class;
      String string1 = "F";
      Class<CompilePhase> class1 = CompilePhase.class;
      Option<CompilePhase> option0 = Option.simple((Class<?>) class0, string1, class1);
      CompilePhase compilePhase0 = CompilePhase.INITIALIZATION;
      Undertow.Builder undertow_Builder2 = undertow_Builder1.setSocketOption(option0, compilePhase0);
      int int1 = 0;
      SSLContext sSLContext0 = SSLContext.getDefault();
      Undertow.Builder undertow_Builder3 = undertow_Builder2.addHttpsListener(int1, string1, sSLContext0, (HttpHandler) routingHandler0);
      String string2 = "|a5O{FHylP.g";
      Undertow.Builder undertow_Builder4 = undertow_Builder3.addHttpListener(int0, string2);
      DeploymentInfo deploymentInfo0 = new DeploymentInfo();
      DeploymentInfo deploymentInfo1 = deploymentInfo0.setDefaultCookieVersion(int1);
      String string3 = "";
      Class<DefaultServlet> class2 = DefaultServlet.class;
      DefaultServlet defaultServlet0 = null;
      ImmediateInstanceFactory<DefaultServlet> immediateInstanceFactory0 = new ImmediateInstanceFactory<DefaultServlet>(defaultServlet0);
      ServletInfo servletInfo0 = new ServletInfo(string3, class2, immediateInstanceFactory0);
      DeploymentInfo deploymentInfo2 = deploymentInfo1.addServlet(servletInfo0);
      ServletContainerImpl servletContainerImpl0 = new ServletContainerImpl();
      DeploymentManagerImpl deploymentManagerImpl0 = new DeploymentManagerImpl(deploymentInfo2, servletContainerImpl0);
      int int2 = (-466);
      UndertowEmbeddedServletContainer undertowEmbeddedServletContainer0 = undertowEmbeddedServletContainerFactory0.getUndertowEmbeddedServletContainer(undertow_Builder4, deploymentManagerImpl0, int2);
  }

  @Test(timeout = 11000)
  public void test06()  throws Throwable  {
      String string0 = "";
      int int0 = 0;
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory(string0, int0);
      Undertow.Builder undertow_Builder0 = Undertow.builder();
      String string1 = "C";
      boolean boolean0 = true;
      RoutingHandler routingHandler0 = new RoutingHandler(boolean0);
      Undertow.Builder undertow_Builder1 = undertow_Builder0.addHttpListener(int0, string1, (HttpHandler) routingHandler0);
      Undertow.Builder undertow_Builder2 = undertow_Builder1.setBufferSize(int0);
      ServletContainerImpl servletContainerImpl0 = new ServletContainerImpl();
      String string2 = "NULL_SOURCE";
      DeploymentManager deploymentManager0 = servletContainerImpl0.getDeploymentByPath(string2);
      UndertowEmbeddedServletContainer undertowEmbeddedServletContainer0 = undertowEmbeddedServletContainerFactory0.getUndertowEmbeddedServletContainer(undertow_Builder2, deploymentManager0, int0);
      Collection<UndertowBuilderCustomizer> collection0 = undertowEmbeddedServletContainerFactory0.getBuilderCustomizers();
  }

  @Test(timeout = 11000)
  public void test07()  throws Throwable  {
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory();
      int int0 = (-1599);
      undertowEmbeddedServletContainerFactory0.setPort(int0);
      LinkedList<UndertowDeploymentInfoCustomizer> linkedList0 = new LinkedList<UndertowDeploymentInfoCustomizer>();
      linkedList0.clear();
      Stack<UndertowDeploymentInfoCustomizer> stack0 = new Stack<UndertowDeploymentInfoCustomizer>();
      UndertowDeploymentInfoCustomizer undertowDeploymentInfoCustomizer0 = mock(UndertowDeploymentInfoCustomizer.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = stack0.add(undertowDeploymentInfoCustomizer0);
      boolean boolean1 = linkedList0.addAll((Collection<? extends UndertowDeploymentInfoCustomizer>) stack0);
      undertowEmbeddedServletContainerFactory0.setDeploymentInfoCustomizers(linkedList0);
      String string0 = "Failed to create AccessLogHandler";
      undertowEmbeddedServletContainerFactory0.setAccessLogPattern(string0);
      UndertowDeploymentInfoCustomizer[] undertowDeploymentInfoCustomizerArray0 = null;
      // Undeclared exception!
      try { 
        undertowEmbeddedServletContainerFactory0.addDeploymentInfoCustomizers(undertowDeploymentInfoCustomizerArray0);
      } catch(IllegalArgumentException e) {
         //
         // UndertowDeploymentInfoCustomizers must not be null
         //
         verifyException("org.springframework.util.Assert", e);
      }
  }

  @Test(timeout = 11000)
  public void test08()  throws Throwable  {
      int int0 = (-60);
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory(int0);
      Collection<UndertowDeploymentInfoCustomizer> collection0 = undertowEmbeddedServletContainerFactory0.getDeploymentInfoCustomizers();
      Class<Dialog> class0 = Dialog.class;
      ServletContextHandler servletContextHandler0 = new ServletContextHandler(int0);
      Enumeration<String> enumeration0 = AttributesMap.getAttributeNamesCopy(servletContextHandler0);
      List<String> list0 = HttpFields.qualityList(enumeration0);
      NonEmptySequence nonEmptySequence0 = new NonEmptySequence(class0, list0);
      ServletContainer servletContainer0 = Servlets.defaultContainer();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp/undertow-docbase.0.-60");
      boolean boolean0 = FileSystemHandling.createFolder(evoSuiteFile0);
      Iterator iterator0 = nonEmptySequence0.iterator();
      MimeMappings mimeMappings0 = undertowEmbeddedServletContainerFactory0.getMimeMappings();
      undertowEmbeddedServletContainerFactory0.setMimeMappings(mimeMappings0);
      undertowEmbeddedServletContainerFactory0.setBuilderCustomizers(nonEmptySequence0);
      undertowEmbeddedServletContainerFactory0.setWorkerThreads((Integer) servletContextHandler0.DEFAULT_LISTENER_TYPE_INDEX);
      undertowEmbeddedServletContainerFactory0.setIoThreads((Integer) servletContextHandler0.SECURITY);
      String string0 = "?@;R-D0M-*,7/u<` ";
      undertowEmbeddedServletContainerFactory0.setAccessLogPattern(string0);
      Boolean boolean1 = null;
      undertowEmbeddedServletContainerFactory0.setDirectBuffers(boolean1);
      Integer integer0 = Opcodes.LONG;
      undertowEmbeddedServletContainerFactory0.setWorkerThreads(integer0);
      boolean boolean2 = true;
      undertowEmbeddedServletContainerFactory0.setAccessLogEnabled(boolean2);
      ServletContextInitializer[] servletContextInitializerArray0 = new ServletContextInitializer[1];
      FilterRegistrationBean filterRegistrationBean0 = new FilterRegistrationBean();
      servletContextInitializerArray0[0] = (ServletContextInitializer) filterRegistrationBean0;
      // Undeclared exception!
      try { 
        undertowEmbeddedServletContainerFactory0.getEmbeddedServletContainer(servletContextInitializerArray0);
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: Filter must not be null
         //
         verifyException("io.undertow.servlet.core.DeploymentManagerImpl", e);
      }
  }

  @Test(timeout = 11000)
  public void test09()  throws Throwable  {
      String string0 = "";
      int int0 = 2265;
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory(string0, int0);
      String string1 = "(gnxcC7eyv&d";
      undertowEmbeddedServletContainerFactory0.setAccessLogPattern(string1);
  }

  @Test(timeout = 11000)
  public void test10()  throws Throwable  {
      int int0 = 39;
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory(int0);
      Integer integer0 = groovyjarjarasm.asm.Opcodes.INTEGER;
      undertowEmbeddedServletContainerFactory0.setBufferSize(integer0);
  }

  @Test(timeout = 11000)
  public void test11()  throws Throwable  {
      int int0 = 0;
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory(int0);
      boolean boolean0 = false;
      undertowEmbeddedServletContainerFactory0.setAccessLogEnabled(boolean0);
      Integer integer0 = Opcodes.INTEGER;
      undertowEmbeddedServletContainerFactory0.setIoThreads(integer0);
  }

  @Test(timeout = 11000)
  public void test12()  throws Throwable  {
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory();
      Collection<UndertowBuilderCustomizer> collection0 = undertowEmbeddedServletContainerFactory0.getBuilderCustomizers();
      String string0 = null;
      String string1 = null;
      undertowEmbeddedServletContainerFactory0.setDisplayName(string1);
      undertowEmbeddedServletContainerFactory0.setAccessLogPattern(string0);
      Collection<UndertowDeploymentInfoCustomizer> collection1 = undertowEmbeddedServletContainerFactory0.getDeploymentInfoCustomizers();
  }

  @Test(timeout = 11000)
  public void test13()  throws Throwable  {
      int int0 = 1097;
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory(int0);
      GenericApplicationContext genericApplicationContext0 = new GenericApplicationContext();
      undertowEmbeddedServletContainerFactory0.setResourceLoader(genericApplicationContext0);
  }

  @Test(timeout = 11000)
  public void test14()  throws Throwable  {
      int int0 = 0;
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory(int0);
      ErrorPage[] errorPageArray0 = new ErrorPage[9];
      Class<Throwable> class0 = Throwable.class;
      String string0 = "}\\Mfw@7a";
      ErrorPage errorPage0 = new ErrorPage(class0, string0);
      errorPageArray0[0] = errorPage0;
      ErrorPage errorPage1 = new ErrorPage(string0);
      errorPageArray0[1] = errorPage1;
      String string1 = "org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory";
      ErrorPage errorPage2 = new ErrorPage(string1);
      errorPageArray0[2] = errorPage2;
      String string2 = "Stored session ";
      ErrorPage errorPage3 = new ErrorPage(class0, string2);
      errorPageArray0[3] = errorPage3;
      HttpStatus httpStatus0 = HttpStatus.INTERNAL_SERVER_ERROR;
      String string3 = "UndertowDeploymentInfoCustomizers must not be null";
      ErrorPage errorPage4 = new ErrorPage(httpStatus0, string3);
      errorPageArray0[4] = errorPage4;
      String string4 = "";
      ErrorPage errorPage5 = new ErrorPage(class0, string4);
      errorPageArray0[5] = errorPage5;
      HttpStatus httpStatus1 = HttpStatus.MULTIPLE_CHOICES;
      String string5 = null;
      ErrorPage errorPage6 = new ErrorPage(httpStatus1, string5);
      errorPageArray0[6] = errorPage6;
      ErrorPage errorPage7 = new ErrorPage(class0, string1);
      errorPageArray0[7] = errorPage7;
      ErrorPage errorPage8 = new ErrorPage(string2);
      errorPageArray0[8] = errorPage8;
      undertowEmbeddedServletContainerFactory0.addErrorPages(errorPageArray0);
      String string6 = "";
      undertowEmbeddedServletContainerFactory0.setPort(int0);
      undertowEmbeddedServletContainerFactory0.setAccessLogPattern(string6);
      Integer integer0 = JLayeredPane.FRAME_CONTENT_LAYER;
      undertowEmbeddedServletContainerFactory0.setBufferSize(integer0);
      Collection<UndertowDeploymentInfoCustomizer> collection0 = null;
      // Undeclared exception!
      try { 
        undertowEmbeddedServletContainerFactory0.setDeploymentInfoCustomizers(collection0);
      } catch(IllegalArgumentException e) {
         //
         // Customizers must not be null
         //
         verifyException("org.springframework.util.Assert", e);
      }
  }

  @Test(timeout = 11000)
  public void test15()  throws Throwable  {
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory();
      UndertowDeploymentInfoCustomizer[] undertowDeploymentInfoCustomizerArray0 = new UndertowDeploymentInfoCustomizer[0];
      undertowEmbeddedServletContainerFactory0.addDeploymentInfoCustomizers(undertowDeploymentInfoCustomizerArray0);
      Integer integer0 = JLayeredPane.DRAG_LAYER;
      undertowEmbeddedServletContainerFactory0.setBuffersPerRegion(integer0);
  }

  @Test(timeout = 11000)
  public void test16()  throws Throwable  {
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory();
      Integer integer0 = groovyjarjarasm.asm.Opcodes.TOP;
      undertowEmbeddedServletContainerFactory0.setWorkerThreads(integer0);
  }

  @Test(timeout = 11000)
  public void test17()  throws Throwable  {
      String string0 = "@?V%X+[";
      int int0 = (-2356);
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = null;
      try {
        undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory(string0, int0);
      } catch(IllegalArgumentException e) {
         //
         // ContextPath must start with '/' and not end with '/'
         //
         verifyException("org.springframework.boot.context.embedded.AbstractConfigurableEmbeddedServletContainer", e);
      }
  }

  @Test(timeout = 11000)
  public void test18()  throws Throwable  {
      String string0 = "";
      int int0 = (-934610874);
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory(string0, int0);
      LinkedBlockingQueue<UndertowBuilderCustomizer> linkedBlockingQueue0 = new LinkedBlockingQueue<UndertowBuilderCustomizer>();
      undertowEmbeddedServletContainerFactory0.setBuilderCustomizers(linkedBlockingQueue0);
  }

  @Test(timeout = 11000)
  public void test19()  throws Throwable  {
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory();
      boolean boolean0 = true;
      undertowEmbeddedServletContainerFactory0.setUseForwardHeaders(boolean0);
      Subject subject0 = new Subject();
      Class<UndertowDeploymentInfoCustomizer> class0 = UndertowDeploymentInfoCustomizer.class;
      Set<UndertowDeploymentInfoCustomizer> set0 = subject0.getPublicCredentials(class0);
      undertowEmbeddedServletContainerFactory0.setDeploymentInfoCustomizers(set0);
  }

  @Test(timeout = 11000)
  public void test20()  throws Throwable  {
      int int0 = (-1);
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory(int0);
      boolean boolean0 = true;
      String string0 = "VI,";
      undertowEmbeddedServletContainerFactory0.setDisplayName(string0);
      undertowEmbeddedServletContainerFactory0.setUseForwardHeaders(boolean0);
      Collection<UndertowBuilderCustomizer> collection0 = null;
      // Undeclared exception!
      try { 
        undertowEmbeddedServletContainerFactory0.setBuilderCustomizers(collection0);
      } catch(IllegalArgumentException e) {
         //
         // Customizers must not be null
         //
         verifyException("org.springframework.util.Assert", e);
      }
  }

  @Test(timeout = 11000)
  public void test21()  throws Throwable  {
      int int0 = 0;
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory(int0);
      boolean boolean0 = undertowEmbeddedServletContainerFactory0.isAccessLogEnabled();
  }

  @Test(timeout = 11000)
  public void test22()  throws Throwable  {
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory();
      Undertow.Builder undertow_Builder0 = Undertow.builder();
      int int0 = (-899);
      Undertow.Builder undertow_Builder1 = undertow_Builder0.setBufferSize(int0);
      int int1 = 22;
      String string0 = "Mv@tps^y`g";
      HttpHandler httpHandler0 = null;
      Undertow.Builder undertow_Builder2 = undertow_Builder1.addAjpListener(int1, string0, httpHandler0);
      int int2 = 0;
      Undertow.Builder undertow_Builder3 = undertow_Builder2.addAjpListener(int2, string0);
      Undertow.Builder undertow_Builder4 = undertow_Builder3.setIoThreads(int1);
      DeploymentInfo deploymentInfo0 = new DeploymentInfo();
      SynchronousQueue<ServletInfo> synchronousQueue0 = new SynchronousQueue<ServletInfo>();
      DeploymentInfo deploymentInfo1 = deploymentInfo0.addServlets((Collection<ServletInfo>) synchronousQueue0);
      LinkedBlockingDeque<FilterInfo> linkedBlockingDeque0 = new LinkedBlockingDeque<FilterInfo>();
      DeploymentInfo deploymentInfo2 = deploymentInfo1.addFilters((Collection<FilterInfo>) linkedBlockingDeque0);
      ServletContainerImpl servletContainerImpl0 = new ServletContainerImpl();
      DeploymentManagerImpl deploymentManagerImpl0 = new DeploymentManagerImpl(deploymentInfo2, servletContainerImpl0);
      int int3 = 0;
      UndertowEmbeddedServletContainer undertowEmbeddedServletContainer0 = undertowEmbeddedServletContainerFactory0.getUndertowEmbeddedServletContainer(undertow_Builder4, deploymentManagerImpl0, int3);
  }

  @Test(timeout = 11000)
  public void test23()  throws Throwable  {
      int int0 = (-2165);
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory(int0);
      ServletContextInitializer[] servletContextInitializerArray0 = new ServletContextInitializer[3];
      FilterRegistrationBean filterRegistrationBean0 = new FilterRegistrationBean();
      servletContextInitializerArray0[0] = (ServletContextInitializer) filterRegistrationBean0;
      ServletListenerRegistrationBean<JSpinner.DateEditor> servletListenerRegistrationBean0 = new ServletListenerRegistrationBean<JSpinner.DateEditor>();
      servletContextInitializerArray0[1] = (ServletContextInitializer) servletListenerRegistrationBean0;
      FilterRegistrationBean filterRegistrationBean1 = new FilterRegistrationBean();
      String string0 = "^h@]Y-Ah);4e^gS;";
      String string1 = null;
      filterRegistrationBean1.addInitParameter(string0, string1);
      servletContextInitializerArray0[2] = (ServletContextInitializer) filterRegistrationBean1;
      // Undeclared exception!
      try { 
        undertowEmbeddedServletContainerFactory0.getEmbeddedServletContainer(servletContextInitializerArray0);
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: Filter must not be null
         //
         verifyException("io.undertow.servlet.core.DeploymentManagerImpl", e);
      }
  }

  @Test(timeout = 11000)
  public void test24()  throws Throwable  {
      int int0 = 758;
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory(int0);
      JspServlet jspServlet0 = undertowEmbeddedServletContainerFactory0.getJspServlet();
      String string0 = "|2L";
      jspServlet0.setClassName(string0);
      undertowEmbeddedServletContainerFactory0.setJspServlet(jspServlet0);
      undertowEmbeddedServletContainerFactory0.setJspServletClassName(string0);
      Collection<UndertowBuilderCustomizer> collection0 = undertowEmbeddedServletContainerFactory0.getBuilderCustomizers();
      Collection<UndertowDeploymentInfoCustomizer> collection1 = undertowEmbeddedServletContainerFactory0.getDeploymentInfoCustomizers();
      ServletContextInitializer[] servletContextInitializerArray0 = null;
      // Undeclared exception!
      try { 
        undertowEmbeddedServletContainerFactory0.getEmbeddedServletContainer(servletContextInitializerArray0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 11000)
  public void test25()  throws Throwable  {
      int int0 = 1718;
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory(int0);
      XmlWebApplicationContext xmlWebApplicationContext0 = new XmlWebApplicationContext();
      String string0 = "y8Rc b!Rlaql!";
      Undertow.Builder undertow_Builder0 = Undertow.builder();
      ServletContainerImpl servletContainerImpl0 = new ServletContainerImpl();
      String string1 = "";
      DeploymentManager deploymentManager0 = servletContainerImpl0.getDeploymentByPath(string1);
      UndertowEmbeddedServletContainer undertowEmbeddedServletContainer0 = undertowEmbeddedServletContainerFactory0.getUndertowEmbeddedServletContainer(undertow_Builder0, deploymentManager0, int0);
      // Undeclared exception!
      try { 
        xmlWebApplicationContext0.containsLocalBean(string0);
      } catch(IllegalStateException e) {
         //
         // BeanFactory not initialized or already closed - call 'refresh' before accessing beans via the ApplicationContext
         //
         verifyException("org.springframework.context.support.AbstractRefreshableApplicationContext", e);
      }
  }

  @Test(timeout = 11000)
  public void test26()  throws Throwable  {
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory();
      FailedContext failedContext0 = new FailedContext();
      File file0 = failedContext0.getCatalinaBase();
      undertowEmbeddedServletContainerFactory0.setAccessLogDirectory(file0);
      String string0 = "org.apache.tomcat.util.net.JIoEndpoint";
      undertowEmbeddedServletContainerFactory0.setAccessLogPattern(string0);
      Integer integer0 = Opcodes.TOP;
      undertowEmbeddedServletContainerFactory0.setWorkerThreads(integer0);
  }

  @Test(timeout = 11000)
  public void test27()  throws Throwable  {
      int int0 = (-2875);
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory(int0);
      boolean boolean0 = false;
      undertowEmbeddedServletContainerFactory0.setRegisterDefaultServlet(boolean0);
      UndertowBuilderCustomizer[] undertowBuilderCustomizerArray0 = null;
      // Undeclared exception!
      try { 
        undertowEmbeddedServletContainerFactory0.addBuilderCustomizers(undertowBuilderCustomizerArray0);
      } catch(IllegalArgumentException e) {
         //
         // Customizers must not be null
         //
         verifyException("org.springframework.util.Assert", e);
      }
  }

  @Test(timeout = 11000)
  public void test28()  throws Throwable  {
      int int0 = 0;
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory(int0);
      String string0 = "";
      undertowEmbeddedServletContainerFactory0.setJspServletClassName(string0);
      ServletContextInitializer[] servletContextInitializerArray0 = new ServletContextInitializer[0];
      // Undeclared exception!
      try { 
        undertowEmbeddedServletContainerFactory0.getEmbeddedServletContainer(servletContextInitializerArray0);
      } catch(RuntimeException e) {
         //
         // java.security.AccessControlException: access denied (\"java.lang.RuntimePermission\" \"io.undertow.servlet.CREATE_INITIAL_HANDLER\")
         //
         verifyException("io.undertow.servlet.core.DeploymentManagerImpl", e);
      }
  }

  @Test(timeout = 11000)
  public void test29()  throws Throwable  {
      int int0 = (-60);
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory(int0);
      Collection<UndertowDeploymentInfoCustomizer> collection0 = undertowEmbeddedServletContainerFactory0.getDeploymentInfoCustomizers();
      Class<Dialog> class0 = Dialog.class;
      ServletContextHandler servletContextHandler0 = new ServletContextHandler(int0);
      Enumeration<String> enumeration0 = AttributesMap.getAttributeNamesCopy(servletContextHandler0);
      List<String> list0 = HttpFields.qualityList(enumeration0);
      NonEmptySequence nonEmptySequence0 = new NonEmptySequence(class0, list0);
      ServletContainer servletContainer0 = Servlets.defaultContainer();
      Iterator iterator0 = nonEmptySequence0.iterator();
      MimeMappings mimeMappings0 = undertowEmbeddedServletContainerFactory0.getMimeMappings();
      undertowEmbeddedServletContainerFactory0.setMimeMappings(mimeMappings0);
      undertowEmbeddedServletContainerFactory0.setBuilderCustomizers(nonEmptySequence0);
      undertowEmbeddedServletContainerFactory0.setWorkerThreads((Integer) servletContextHandler0.DEFAULT_LISTENER_TYPE_INDEX);
      undertowEmbeddedServletContainerFactory0.setIoThreads((Integer) servletContextHandler0.SECURITY);
      String string0 = "?@;R-D0M-*,7/u<` ";
      undertowEmbeddedServletContainerFactory0.setAccessLogPattern(string0);
      Boolean boolean0 = null;
      undertowEmbeddedServletContainerFactory0.setDirectBuffers(boolean0);
      Integer integer0 = Opcodes.LONG;
      undertowEmbeddedServletContainerFactory0.setWorkerThreads(integer0);
      boolean boolean1 = true;
      undertowEmbeddedServletContainerFactory0.setAccessLogEnabled(boolean1);
      ServletContextInitializer[] servletContextInitializerArray0 = new ServletContextInitializer[1];
      FilterRegistrationBean filterRegistrationBean0 = new FilterRegistrationBean();
      servletContextInitializerArray0[0] = (ServletContextInitializer) filterRegistrationBean0;
      // Undeclared exception!
      try { 
        undertowEmbeddedServletContainerFactory0.getEmbeddedServletContainer(servletContextInitializerArray0);
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: Filter must not be null
         //
         verifyException("io.undertow.servlet.core.DeploymentManagerImpl", e);
      }
  }

  @Test(timeout = 11000)
  public void test30()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      int int0 = 30000;
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory(int0);
      ServletContextInitializer[] servletContextInitializerArray0 = new ServletContextInitializer[3];
      WebXml webXml0 = new WebXml();
      Map<String, String> map0 = webXml0.getMimeMappings();
      InitParameterConfiguringServletContextInitializer initParameterConfiguringServletContextInitializer0 = new InitParameterConfiguringServletContextInitializer(map0);
      servletContextInitializerArray0[0] = (ServletContextInitializer) initParameterConfiguringServletContextInitializer0;
      ServletRegistrationBean servletRegistrationBean0 = new ServletRegistrationBean();
      servletContextInitializerArray0[1] = (ServletContextInitializer) servletRegistrationBean0;
      String string0 = "TBGN*>vt";
      ServletRegistrationBean[] servletRegistrationBeanArray0 = new ServletRegistrationBean[0];
      DelegatingFilterProxyRegistrationBean delegatingFilterProxyRegistrationBean0 = new DelegatingFilterProxyRegistrationBean(string0, servletRegistrationBeanArray0);
      servletContextInitializerArray0[2] = (ServletContextInitializer) delegatingFilterProxyRegistrationBean0;
      // Undeclared exception!
      try { 
        undertowEmbeddedServletContainerFactory0.getEmbeddedServletContainer(servletContextInitializerArray0);
      } catch(RuntimeException e) {
         //
         // Unable to create tempDir. java.io.tmpdir is set to /tmp
         //
         verifyException("org.springframework.boot.context.embedded.AbstractEmbeddedServletContainerFactory", e);
      }
  }

  @Test(timeout = 11000)
  public void test31()  throws Throwable  {
      int int0 = 6;
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory(int0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JspPropertyGroup jspPropertyGroup0 = new JspPropertyGroup();
      UndertowDeploymentInfoCustomizer[] undertowDeploymentInfoCustomizerArray0 = new UndertowDeploymentInfoCustomizer[3];
      UndertowDeploymentInfoCustomizer undertowDeploymentInfoCustomizer0 = mock(UndertowDeploymentInfoCustomizer.class, new ViolatedAssumptionAnswer());
      undertowDeploymentInfoCustomizerArray0[0] = undertowDeploymentInfoCustomizer0;
      undertowDeploymentInfoCustomizerArray0[1] = undertowDeploymentInfoCustomizerArray0[0];
      undertowDeploymentInfoCustomizerArray0[2] = undertowDeploymentInfoCustomizerArray0[1];
      Sequence sequence0 = new Sequence();
      undertowEmbeddedServletContainerFactory0.setInitializers(sequence0);
      undertowEmbeddedServletContainerFactory0.addDeploymentInfoCustomizers(undertowDeploymentInfoCustomizerArray0);
      Boolean boolean0 = jspPropertyGroup0.getTrimWhitespace();
      undertowEmbeddedServletContainerFactory0.setDirectBuffers(boolean0);
      System.setCurrentTimeMillis(int0);
      ServletContextInitializer[] servletContextInitializerArray0 = new ServletContextInitializer[2];
      ServletRegistrationBean servletRegistrationBean0 = new ServletRegistrationBean();
      servletContextInitializerArray0[0] = (ServletContextInitializer) servletRegistrationBean0;
      ServletListenerRegistrationBean<JSpinner.DateEditor> servletListenerRegistrationBean0 = new ServletListenerRegistrationBean<JSpinner.DateEditor>();
      servletContextInitializerArray0[1] = (ServletContextInitializer) servletListenerRegistrationBean0;
      // Undeclared exception!
      try { 
        undertowEmbeddedServletContainerFactory0.getEmbeddedServletContainer(servletContextInitializerArray0);
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: Servlet must not be null
         //
         verifyException("io.undertow.servlet.core.DeploymentManagerImpl", e);
      }
  }
}
