/*
 * This file was automatically generated by EvoSuite
 * Fri May 01 16:16:03 GMT 2020
 */

package org.springframework.boot.context.embedded.undertow;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import groovy.lang.NonEmptySequence;
import groovyjarjarasm.asm.Opcodes;
import io.undertow.Undertow;
import io.undertow.server.HttpHandler;
import io.undertow.servlet.api.DeploymentInfo;
import io.undertow.servlet.api.DeploymentManager;
import io.undertow.servlet.core.DeploymentImpl;
import io.undertow.servlet.core.DeploymentManagerImpl;
import io.undertow.servlet.core.ServletContainerImpl;
import java.io.File;
import java.util.Collection;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Spliterator;
import java.util.concurrent.SynchronousQueue;
import java.util.concurrent.TimeUnit;
import javax.management.remote.JMXPrincipal;
import javax.net.ssl.KeyManager;
import javax.net.ssl.TrustManager;
import javax.net.ssl.X509KeyManager;
import javax.servlet.Servlet;
import javax.swing.JLayeredPane;
import javax.swing.plaf.synth.SynthSpinnerUI;
import org.apache.catalina.core.ApplicationContext;
import org.apache.catalina.core.ApplicationContextFacade;
import org.apache.catalina.core.StandardContext;
import org.apache.catalina.core.StandardEngine;
import org.apache.catalina.core.StandardServer;
import org.apache.catalina.deploy.NamingResourcesImpl;
import org.apache.tomcat.util.descriptor.web.JspPropertyGroup;
import org.apache.tomcat.util.descriptor.web.SessionConfig;
import org.apache.tomcat.util.descriptor.web.WebXml;
import org.dom4j.QName;
import org.dom4j.bean.BeanAttributeList;
import org.dom4j.bean.BeanElement;
import org.dom4j.bean.BeanMetaData;
import org.eclipse.jetty.server.Server;
import org.eclipse.jetty.server.handler.ContextHandler;
import org.eclipse.jetty.servlet.ServletContextHandler;
import org.eclipse.jetty.servlet.ServletHolder;
import org.eclipse.jetty.util.MultiMap;
import org.eclipse.jetty.util.ssl.AliasedX509ExtendedKeyManager;
import org.eclipse.jetty.util.ssl.AliasedX509KeyManager;
import org.eclipse.jetty.webapp.WebAppContext;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.BeanFactory;
import org.springframework.beans.factory.config.BeanFactoryPostProcessor;
import org.springframework.beans.factory.support.DefaultListableBeanFactory;
import org.springframework.boot.context.embedded.DelegatingFilterProxyRegistrationBean;
import org.springframework.boot.context.embedded.EmbeddedServletContainer;
import org.springframework.boot.context.embedded.ErrorPage;
import org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer;
import org.springframework.boot.context.embedded.JspServlet;
import org.springframework.boot.context.embedded.ServletContextInitializer;
import org.springframework.boot.context.embedded.ServletListenerRegistrationBean;
import org.springframework.boot.context.embedded.ServletRegistrationBean;
import org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer;
import org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer;
import org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainer;
import org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory;
import org.springframework.context.annotation.AnnotationConfigApplicationContext;
import org.springframework.http.HttpStatus;
import org.springframework.web.context.support.GenericWebApplicationContext;
import org.springframework.web.cors.CorsConfiguration;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class UndertowEmbeddedServletContainerFactory_ESTest extends UndertowEmbeddedServletContainerFactory_ESTest_scaffolding {

  @Test(timeout = 11000)
  public void test00()  throws Throwable  {
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory();
      boolean boolean0 = true;
      undertowEmbeddedServletContainerFactory0.setUseForwardHeaders(boolean0);
      boolean boolean1 = undertowEmbeddedServletContainerFactory0.isAccessLogEnabled();
      boolean boolean2 = undertowEmbeddedServletContainerFactory0.isAccessLogEnabled();
      ServletContextInitializer[] servletContextInitializerArray0 = new ServletContextInitializer[1];
      ServletRegistrationBean servletRegistrationBean0 = new ServletRegistrationBean();
      int int0 = (-1855);
      servletRegistrationBean0.setLoadOnStartup(int0);
      servletContextInitializerArray0[0] = (ServletContextInitializer) servletRegistrationBean0;
      // Undeclared exception!
      try { 
        undertowEmbeddedServletContainerFactory0.getEmbeddedServletContainer(servletContextInitializerArray0);
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: Servlet must not be null
         //
         verifyException("io.undertow.servlet.core.DeploymentManagerImpl", e);
      }
  }

  @Test(timeout = 11000)
  public void test01()  throws Throwable  {
      String string0 = "";
      int int0 = (-1);
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory(string0, int0);
      Integer integer0 = Opcodes.LONG;
      int int1 = 1;
      Integer integer1 = Integer.getInteger(string0, integer0);
      String string1 = Integer.toUnsignedString(int1);
      undertowEmbeddedServletContainerFactory0.setWorkerThreads(integer0);
      Integer integer2 = groovyjarjarasm.asm.Opcodes.NULL;
      undertowEmbeddedServletContainerFactory0.setBufferSize(integer2);
      Undertow.Builder undertow_Builder0 = Undertow.builder();
      ServletContainerImpl servletContainerImpl0 = new ServletContainerImpl();
      String string2 = "Z)\\Zhz3)qC";
      DeploymentManager deploymentManager0 = servletContainerImpl0.getDeployment(string2);
      UndertowEmbeddedServletContainer undertowEmbeddedServletContainer0 = undertowEmbeddedServletContainerFactory0.getUndertowEmbeddedServletContainer(undertow_Builder0, deploymentManager0, int0);
  }

  @Test(timeout = 11000)
  public void test02()  throws Throwable  {
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory();
      SynchronousQueue<UndertowDeploymentInfoCustomizer> synchronousQueue0 = new SynchronousQueue<UndertowDeploymentInfoCustomizer>();
      UndertowDeploymentInfoCustomizer undertowDeploymentInfoCustomizer0 = synchronousQueue0.poll();
      undertowEmbeddedServletContainerFactory0.setDeploymentInfoCustomizers(synchronousQueue0);
      boolean boolean0 = false;
      undertowEmbeddedServletContainerFactory0.setAccessLogEnabled(boolean0);
      Integer integer0 = JLayeredPane.FRAME_CONTENT_LAYER;
      undertowEmbeddedServletContainerFactory0.setBuffersPerRegion(integer0);
  }

  @Test(timeout = 11000)
  public void test03()  throws Throwable  {
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory();
      String string0 = null;
      undertowEmbeddedServletContainerFactory0.setAccessLogPattern(string0);
      UndertowDeploymentInfoCustomizer[] undertowDeploymentInfoCustomizerArray0 = new UndertowDeploymentInfoCustomizer[4];
      UndertowDeploymentInfoCustomizer undertowDeploymentInfoCustomizer0 = mock(UndertowDeploymentInfoCustomizer.class, new ViolatedAssumptionAnswer());
      undertowDeploymentInfoCustomizerArray0[0] = undertowDeploymentInfoCustomizer0;
      undertowDeploymentInfoCustomizerArray0[1] = undertowDeploymentInfoCustomizerArray0[0];
      JspServlet jspServlet0 = undertowEmbeddedServletContainerFactory0.getJspServlet();
      undertowEmbeddedServletContainerFactory0.setJspServlet(jspServlet0);
      undertowDeploymentInfoCustomizerArray0[2] = undertowDeploymentInfoCustomizerArray0[1];
      undertowDeploymentInfoCustomizerArray0[3] = undertowDeploymentInfoCustomizerArray0[2];
      undertowEmbeddedServletContainerFactory0.addDeploymentInfoCustomizers(undertowDeploymentInfoCustomizerArray0);
      long long0 = 0L;
      System.setCurrentTimeMillis(long0);
  }

  @Test(timeout = 11000)
  public void test04()  throws Throwable  {
      int int0 = 0;
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory(int0);
      CorsConfiguration corsConfiguration0 = new CorsConfiguration();
      CorsConfiguration corsConfiguration1 = new CorsConfiguration(corsConfiguration0);
      Integer integer0 = Opcodes.FLOAT;
      undertowEmbeddedServletContainerFactory0.setBufferSize(integer0);
      List<String> list0 = corsConfiguration0.getAllowedHeaders();
      File file0 = null;
      undertowEmbeddedServletContainerFactory0.setAccessLogDirectory(file0);
      corsConfiguration1.setExposedHeaders(list0);
      Boolean boolean0 = corsConfiguration1.getAllowCredentials();
      undertowEmbeddedServletContainerFactory0.setDirectBuffers(boolean0);
      boolean boolean1 = false;
      undertowEmbeddedServletContainerFactory0.setUseForwardHeaders(boolean1);
  }

  @Test(timeout = 11000)
  public void test05()  throws Throwable  {
      String string0 = "L8=wECdie";
      int int0 = 1068;
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = null;
      try {
        undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory(string0, int0);
      } catch(IllegalArgumentException e) {
         //
         // ContextPath must start with '/' and not end with '/'
         //
         verifyException("org.springframework.boot.context.embedded.AbstractConfigurableEmbeddedServletContainer", e);
      }
  }

  @Test(timeout = 11000)
  public void test06()  throws Throwable  {
      int int0 = 0;
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory(int0);
      Integer integer0 = null;
      undertowEmbeddedServletContainerFactory0.setBufferSize(integer0);
      undertowEmbeddedServletContainerFactory0.setIoThreads(integer0);
      Boolean boolean0 = null;
      undertowEmbeddedServletContainerFactory0.setDirectBuffers(boolean0);
      ServletContextInitializer[] servletContextInitializerArray0 = new ServletContextInitializer[0];
      // Undeclared exception!
      try { 
        undertowEmbeddedServletContainerFactory0.getEmbeddedServletContainer(servletContextInitializerArray0);
      } catch(RuntimeException e) {
         //
         // java.security.AccessControlException: access denied (\"java.lang.RuntimePermission\" \"io.undertow.servlet.CREATE_INITIAL_HANDLER\")
         //
         verifyException("io.undertow.servlet.core.DeploymentManagerImpl", e);
      }
  }

  @Test(timeout = 11000)
  public void test07()  throws Throwable  {
      String string0 = "";
      int int0 = 118;
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory(string0, int0);
      Class<String> class0 = String.class;
      NonEmptySequence nonEmptySequence0 = new NonEmptySequence();
      NonEmptySequence nonEmptySequence1 = new NonEmptySequence(class0, nonEmptySequence0);
      undertowEmbeddedServletContainerFactory0.setBuilderCustomizers(nonEmptySequence1);
      UndertowBuilderCustomizer[] undertowBuilderCustomizerArray0 = new UndertowBuilderCustomizer[5];
      UndertowBuilderCustomizer undertowBuilderCustomizer0 = mock(UndertowBuilderCustomizer.class, new ViolatedAssumptionAnswer());
      undertowBuilderCustomizerArray0[0] = undertowBuilderCustomizer0;
      undertowBuilderCustomizerArray0[1] = undertowBuilderCustomizerArray0[0];
      undertowBuilderCustomizerArray0[2] = undertowBuilderCustomizerArray0[1];
      undertowBuilderCustomizerArray0[3] = undertowBuilderCustomizerArray0[2];
      undertowBuilderCustomizerArray0[4] = undertowBuilderCustomizerArray0[3];
      undertowEmbeddedServletContainerFactory0.addBuilderCustomizers(undertowBuilderCustomizerArray0);
  }

  @Test(timeout = 11000)
  public void test08()  throws Throwable  {
      int int0 = 0;
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory(int0);
      Boolean boolean0 = Boolean.FALSE;
      undertowEmbeddedServletContainerFactory0.setDirectBuffers(boolean0);
      Integer integer0 = groovyjarjarasm.asm.Opcodes.LONG;
      undertowEmbeddedServletContainerFactory0.setIoThreads(integer0);
      BeanFactory beanFactory0 = null;
      DefaultListableBeanFactory defaultListableBeanFactory0 = new DefaultListableBeanFactory(beanFactory0);
      Server server0 = new Server();
      ServletContextHandler servletContextHandler0 = new ServletContextHandler(server0, server0.STOPPING);
      int int1 = 4523;
      ServletContextHandler servletContextHandler1 = new ServletContextHandler(servletContextHandler0, server0.STARTING, int1);
      ContextHandler.Context contextHandler_Context0 = servletContextHandler1.getServletContext();
      GenericWebApplicationContext genericWebApplicationContext0 = new GenericWebApplicationContext(defaultListableBeanFactory0, contextHandler_Context0);
      BeanFactoryPostProcessor beanFactoryPostProcessor0 = null;
      int int2 = (-3326);
      TimeUnit timeUnit0 = TimeUnit.MILLISECONDS;
      undertowEmbeddedServletContainerFactory0.setSessionTimeout(int2, timeUnit0);
      genericWebApplicationContext0.addBeanFactoryPostProcessor(beanFactoryPostProcessor0);
      undertowEmbeddedServletContainerFactory0.setResourceLoader(genericWebApplicationContext0);
  }

  @Test(timeout = 11000)
  public void test09()  throws Throwable  {
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory();
      String string0 = "";
      undertowEmbeddedServletContainerFactory0.setJspServletClassName(string0);
      JspServlet jspServlet0 = new JspServlet();
      undertowEmbeddedServletContainerFactory0.setJspServlet(jspServlet0);
      File file0 = null;
      undertowEmbeddedServletContainerFactory0.setAccessLogDirectory(file0);
      Integer integer0 = Opcodes.NULL;
      undertowEmbeddedServletContainerFactory0.setIoThreads(integer0);
      boolean boolean0 = undertowEmbeddedServletContainerFactory0.isAccessLogEnabled();
  }

  @Test(timeout = 11000)
  public void test10()  throws Throwable  {
      String string0 = null;
      int int0 = 0;
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = null;
      try {
        undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory(string0, int0);
      } catch(IllegalArgumentException e) {
         //
         // ContextPath must not be null
         //
         verifyException("org.springframework.util.Assert", e);
      }
  }

  @Test(timeout = 11000)
  public void test11()  throws Throwable  {
      int int0 = 213;
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory(int0);
      Collection<UndertowDeploymentInfoCustomizer> collection0 = undertowEmbeddedServletContainerFactory0.getDeploymentInfoCustomizers();
      SynchronousQueue<UndertowBuilderCustomizer> synchronousQueue0 = new SynchronousQueue<UndertowBuilderCustomizer>();
      boolean boolean0 = synchronousQueue0.isEmpty();
      Spliterator<UndertowBuilderCustomizer> spliterator0 = synchronousQueue0.spliterator();
      undertowEmbeddedServletContainerFactory0.setBuilderCustomizers(synchronousQueue0);
      UndertowDeploymentInfoCustomizer[] undertowDeploymentInfoCustomizerArray0 = new UndertowDeploymentInfoCustomizer[0];
      undertowEmbeddedServletContainerFactory0.addDeploymentInfoCustomizers(undertowDeploymentInfoCustomizerArray0);
  }

  @Test(timeout = 11000)
  public void test12()  throws Throwable  {
      int int0 = 1565;
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory(int0);
      String string0 = "Failed to create access log directory '";
      undertowEmbeddedServletContainerFactory0.setAccessLogPattern(string0);
  }

  @Test(timeout = 11000)
  public void test13()  throws Throwable  {
      int int0 = 293;
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory(int0);
      Integer integer0 = Opcodes.TOP;
      int int1 = Integer.compare(int0, int0);
      undertowEmbeddedServletContainerFactory0.setWorkerThreads(integer0);
      boolean boolean0 = false;
      undertowEmbeddedServletContainerFactory0.setRegisterDefaultServlet(boolean0);
      boolean boolean1 = undertowEmbeddedServletContainerFactory0.isAccessLogEnabled();
      Integer integer1 = Opcodes.TOP;
      int int2 = Integer.remainderUnsigned(int0, int0);
      undertowEmbeddedServletContainerFactory0.setBuffersPerRegion(integer1);
      Collection<UndertowBuilderCustomizer> collection0 = undertowEmbeddedServletContainerFactory0.getBuilderCustomizers();
      Collection<UndertowBuilderCustomizer> collection1 = undertowEmbeddedServletContainerFactory0.getBuilderCustomizers();
      boolean boolean2 = false;
      undertowEmbeddedServletContainerFactory0.setAccessLogEnabled(boolean2);
      Collection<UndertowDeploymentInfoCustomizer> collection2 = undertowEmbeddedServletContainerFactory0.getDeploymentInfoCustomizers();
  }

  @Test(timeout = 11000)
  public void test14()  throws Throwable  {
      int int0 = 0;
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory(int0);
      Integer integer0 = groovyjarjarasm.asm.Opcodes.UNINITIALIZED_THIS;
      undertowEmbeddedServletContainerFactory0.setIoThreads(integer0);
      Collection<UndertowDeploymentInfoCustomizer> collection0 = undertowEmbeddedServletContainerFactory0.getDeploymentInfoCustomizers();
      DefaultListableBeanFactory defaultListableBeanFactory0 = new DefaultListableBeanFactory();
      Class<Object> class0 = Object.class;
      defaultListableBeanFactory0.registerResolvableDependency(class0, undertowEmbeddedServletContainerFactory0);
      JspServlet jspServlet0 = new JspServlet();
      undertowEmbeddedServletContainerFactory0.setJspServlet(jspServlet0);
      AnnotationConfigApplicationContext annotationConfigApplicationContext0 = new AnnotationConfigApplicationContext(defaultListableBeanFactory0);
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      undertowEmbeddedServletContainerFactory0.setSessionTimeout(int0, timeUnit0);
      undertowEmbeddedServletContainerFactory0.setResourceLoader(annotationConfigApplicationContext0);
      undertowEmbeddedServletContainerFactory0.setBufferSize(integer0);
      undertowEmbeddedServletContainerFactory0.setDeploymentInfoCustomizers(collection0);
      undertowEmbeddedServletContainerFactory0.setBuffersPerRegion(integer0);
      UndertowDeploymentInfoCustomizer[] undertowDeploymentInfoCustomizerArray0 = null;
      // Undeclared exception!
      try { 
        undertowEmbeddedServletContainerFactory0.addDeploymentInfoCustomizers(undertowDeploymentInfoCustomizerArray0);
      } catch(IllegalArgumentException e) {
         //
         // UndertowDeploymentInfoCustomizers must not be null
         //
         verifyException("org.springframework.util.Assert", e);
      }
  }

  @Test(timeout = 11000)
  public void test15()  throws Throwable  {
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory();
      ErrorPage[] errorPageArray0 = new ErrorPage[8];
      String string0 = "?";
      ErrorPage errorPage0 = new ErrorPage(string0);
      errorPageArray0[0] = errorPage0;
      ErrorPage errorPage1 = new ErrorPage(string0);
      errorPageArray0[1] = errorPage1;
      ErrorPage errorPage2 = new ErrorPage(string0);
      errorPageArray0[2] = errorPage2;
      HttpStatus httpStatus0 = HttpStatus.UNAUTHORIZED;
      String string1 = "4K |y\\@h%";
      ErrorPage errorPage3 = new ErrorPage(httpStatus0, string1);
      errorPageArray0[3] = errorPage3;
      Class<Throwable> class0 = Throwable.class;
      ErrorPage errorPage4 = new ErrorPage(class0, string0);
      String string2 = errorPage1.getExceptionName();
      String string3 = errorPage3.getExceptionName();
      errorPageArray0[4] = errorPage4;
      String string4 = "";
      ErrorPage errorPage5 = new ErrorPage(string4);
      errorPageArray0[5] = errorPage5;
      ErrorPage errorPage6 = new ErrorPage(class0, string1);
      errorPageArray0[6] = errorPage6;
      HttpStatus httpStatus1 = HttpStatus.REQUEST_HEADER_FIELDS_TOO_LARGE;
      String string5 = "XNIO000002: Unsupported socket address %s";
      ErrorPage errorPage7 = new ErrorPage(httpStatus1, string5);
      errorPageArray0[7] = errorPage7;
      undertowEmbeddedServletContainerFactory0.addErrorPages(errorPageArray0);
      Collection<UndertowDeploymentInfoCustomizer> collection0 = null;
      // Undeclared exception!
      try { 
        undertowEmbeddedServletContainerFactory0.setDeploymentInfoCustomizers(collection0);
      } catch(IllegalArgumentException e) {
         //
         // Customizers must not be null
         //
         verifyException("org.springframework.util.Assert", e);
      }
  }

  @Test(timeout = 11000)
  public void test16()  throws Throwable  {
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory();
      UndertowBuilderCustomizer[] undertowBuilderCustomizerArray0 = new UndertowBuilderCustomizer[9];
      UndertowBuilderCustomizer undertowBuilderCustomizer0 = mock(UndertowBuilderCustomizer.class, new ViolatedAssumptionAnswer());
      String string0 = "Failed to create access log directory '";
      undertowEmbeddedServletContainerFactory0.setDisplayName(string0);
      undertowBuilderCustomizerArray0[0] = undertowBuilderCustomizer0;
      undertowBuilderCustomizerArray0[1] = undertowBuilderCustomizerArray0[0];
      undertowBuilderCustomizerArray0[2] = undertowBuilderCustomizerArray0[1];
      undertowBuilderCustomizerArray0[3] = undertowBuilderCustomizerArray0[2];
      undertowBuilderCustomizerArray0[4] = undertowBuilderCustomizerArray0[3];
      undertowBuilderCustomizerArray0[5] = undertowBuilderCustomizerArray0[4];
      undertowBuilderCustomizerArray0[6] = undertowBuilderCustomizerArray0[5];
      undertowBuilderCustomizerArray0[7] = undertowBuilderCustomizerArray0[6];
      undertowBuilderCustomizerArray0[8] = undertowBuilderCustomizerArray0[7];
      undertowEmbeddedServletContainerFactory0.addBuilderCustomizers(undertowBuilderCustomizerArray0);
      boolean boolean0 = true;
      undertowEmbeddedServletContainerFactory0.setRegisterJspServlet(boolean0);
      UndertowDeploymentInfoCustomizer[] undertowDeploymentInfoCustomizerArray0 = new UndertowDeploymentInfoCustomizer[0];
      undertowEmbeddedServletContainerFactory0.addDeploymentInfoCustomizers(undertowDeploymentInfoCustomizerArray0);
      ServletContextInitializer[] servletContextInitializerArray0 = new ServletContextInitializer[1];
      ServletRegistrationBean[] servletRegistrationBeanArray0 = new ServletRegistrationBean[3];
      ServletRegistrationBean servletRegistrationBean0 = new ServletRegistrationBean();
      servletRegistrationBeanArray0[0] = servletRegistrationBean0;
      ServletRegistrationBean servletRegistrationBean1 = new ServletRegistrationBean();
      servletRegistrationBeanArray0[1] = servletRegistrationBean1;
      ServletRegistrationBean servletRegistrationBean2 = new ServletRegistrationBean();
      servletRegistrationBeanArray0[2] = servletRegistrationBean2;
      DelegatingFilterProxyRegistrationBean delegatingFilterProxyRegistrationBean0 = new DelegatingFilterProxyRegistrationBean(string0, servletRegistrationBeanArray0);
      servletContextInitializerArray0[0] = (ServletContextInitializer) delegatingFilterProxyRegistrationBean0;
      // Undeclared exception!
      try { 
        undertowEmbeddedServletContainerFactory0.getEmbeddedServletContainer(servletContextInitializerArray0);
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: ApplicationContext be injected
         //
         verifyException("io.undertow.servlet.core.DeploymentManagerImpl", e);
      }
  }

  @Test(timeout = 11000)
  public void test17()  throws Throwable  {
      String string0 = "";
      int int0 = 0;
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory(string0, int0);
      MultiMap<UndertowBuilderCustomizer> multiMap0 = new MultiMap<UndertowBuilderCustomizer>();
      List<UndertowBuilderCustomizer> list0 = null;
      List<UndertowBuilderCustomizer> list1 = multiMap0.putValues(string0, list0);
      // Undeclared exception!
      try { 
        undertowEmbeddedServletContainerFactory0.setBuilderCustomizers(list1);
      } catch(IllegalArgumentException e) {
         //
         // Customizers must not be null
         //
         verifyException("org.springframework.util.Assert", e);
      }
  }

  @Test(timeout = 11000)
  public void test18()  throws Throwable  {
      int int0 = 1;
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory(int0);
      HashSet<UndertowBuilderCustomizer> hashSet0 = new HashSet<UndertowBuilderCustomizer>();
      undertowEmbeddedServletContainerFactory0.setBuilderCustomizers(hashSet0);
      UndertowBuilderCustomizer[] undertowBuilderCustomizerArray0 = new UndertowBuilderCustomizer[0];
      undertowEmbeddedServletContainerFactory0.addBuilderCustomizers(undertowBuilderCustomizerArray0);
      StandardServer standardServer0 = new StandardServer();
      standardServer0.storeConfig();
      StandardContext standardContext0 = new StandardContext();
      NamingResourcesImpl namingResourcesImpl0 = standardContext0.getNamingResources();
      standardServer0.setGlobalNamingResources(namingResourcesImpl0);
      File file0 = standardServer0.getCatalinaHome();
      undertowEmbeddedServletContainerFactory0.setAccessLogDirectory(file0);
      Undertow.Builder undertow_Builder0 = Undertow.builder();
      String string0 = null;
      HttpHandler httpHandler0 = null;
      Undertow.Builder undertow_Builder1 = undertow_Builder0.addAjpListener(int0, string0, httpHandler0);
      DeploymentInfo deploymentInfo0 = new DeploymentInfo();
      DeploymentInfo deploymentInfo1 = deploymentInfo0.setMinorVersion(int0);
      ServletContainerImpl servletContainerImpl0 = new ServletContainerImpl();
      DeploymentManagerImpl deploymentManagerImpl0 = new DeploymentManagerImpl(deploymentInfo1, servletContainerImpl0);
      int int1 = 107;
      UndertowEmbeddedServletContainer undertowEmbeddedServletContainer0 = undertowEmbeddedServletContainerFactory0.getUndertowEmbeddedServletContainer(undertow_Builder1, deploymentManagerImpl0, int1);
      Collection<UndertowBuilderCustomizer> collection0 = undertowEmbeddedServletContainerFactory0.getBuilderCustomizers();
  }

  @Test(timeout = 11000)
  public void test19()  throws Throwable  {
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory();
      JspPropertyGroup jspPropertyGroup0 = new JspPropertyGroup();
      Boolean boolean0 = jspPropertyGroup0.getElIgnored();
      String string0 = "";
      jspPropertyGroup0.setDeferredSyntax(string0);
      String string1 = "";
      String string2 = " stale: ";
      jspPropertyGroup0.setScriptingInvalid(string2);
      boolean boolean1 = Boolean.getBoolean(string1);
      undertowEmbeddedServletContainerFactory0.setDirectBuffers(boolean0);
      ServletContextInitializer[] servletContextInitializerArray0 = null;
      // Undeclared exception!
      try { 
        undertowEmbeddedServletContainerFactory0.getEmbeddedServletContainer(servletContextInitializerArray0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 11000)
  public void test20()  throws Throwable  {
      int int0 = (-2421);
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory(int0);
      String string0 = "";
      MockFile mockFile0 = new MockFile(string0);
      MockFile mockFile1 = new MockFile(mockFile0, string0);
      String string1 = mockFile1.getAbsolutePath();
      undertowEmbeddedServletContainerFactory0.setAccessLogDirectory(mockFile1);
      UndertowBuilderCustomizer[] undertowBuilderCustomizerArray0 = null;
      // Undeclared exception!
      try { 
        undertowEmbeddedServletContainerFactory0.addBuilderCustomizers(undertowBuilderCustomizerArray0);
      } catch(IllegalArgumentException e) {
         //
         // Customizers must not be null
         //
         verifyException("org.springframework.util.Assert", e);
      }
  }

  @Test(timeout = 11000)
  public void test21()  throws Throwable  {
      int int0 = 0;
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory(int0);
      Undertow.Builder undertow_Builder0 = Undertow.builder();
      Undertow.Builder undertow_Builder1 = undertow_Builder0.setBuffersPerRegion(int0);
      int int1 = 165;
      String string0 = "org.apache.coyote.http11.filters.GzipOutputFilter$FakeOutputStream";
      Undertow.Builder undertow_Builder2 = undertow_Builder1.addHttpListener(int1, string0);
      Undertow.Builder undertow_Builder3 = undertow_Builder2.setWorkerThreads(int0);
      KeyManager[] keyManagerArray0 = new KeyManager[3];
      String string1 = "";
      X509KeyManager x509KeyManager0 = mock(X509KeyManager.class, new ViolatedAssumptionAnswer());
      AliasedX509ExtendedKeyManager aliasedX509ExtendedKeyManager0 = new AliasedX509ExtendedKeyManager(string0, x509KeyManager0);
      AliasedX509KeyManager aliasedX509KeyManager0 = new AliasedX509KeyManager(string1, aliasedX509ExtendedKeyManager0);
      keyManagerArray0[0] = (KeyManager) aliasedX509KeyManager0;
      String string2 = "";
      AliasedX509KeyManager aliasedX509KeyManager1 = new AliasedX509KeyManager(string2, aliasedX509KeyManager0);
      keyManagerArray0[1] = (KeyManager) aliasedX509KeyManager1;
      AliasedX509ExtendedKeyManager aliasedX509ExtendedKeyManager1 = new AliasedX509ExtendedKeyManager(string2, aliasedX509KeyManager1);
      keyManagerArray0[2] = (KeyManager) aliasedX509ExtendedKeyManager1;
      TrustManager[] trustManagerArray0 = new TrustManager[0];
      DeploymentManager deploymentManager0 = null;
      DeploymentInfo deploymentInfo0 = new DeploymentInfo();
      ServletContainerImpl servletContainerImpl0 = new ServletContainerImpl();
      DeploymentImpl deploymentImpl0 = new DeploymentImpl(deploymentManager0, deploymentInfo0, servletContainerImpl0);
      HttpHandler httpHandler0 = deploymentImpl0.getHandler();
      Undertow.Builder undertow_Builder4 = undertow_Builder3.addHttpsListener(int0, string0, keyManagerArray0, trustManagerArray0, httpHandler0);
      int int2 = 0;
      UndertowEmbeddedServletContainer undertowEmbeddedServletContainer0 = undertowEmbeddedServletContainerFactory0.getUndertowEmbeddedServletContainer(undertow_Builder4, deploymentManager0, int2);
      UndertowEmbeddedServletContainer undertowEmbeddedServletContainer1 = undertowEmbeddedServletContainerFactory0.getUndertowEmbeddedServletContainer(undertow_Builder3, deploymentManager0, int0);
  }

  @Test(timeout = 11000)
  public void test22()  throws Throwable  {
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory();
      UndertowBuilderCustomizer[] undertowBuilderCustomizerArray0 = new UndertowBuilderCustomizer[9];
      UndertowBuilderCustomizer undertowBuilderCustomizer0 = mock(UndertowBuilderCustomizer.class, new ViolatedAssumptionAnswer());
      String string0 = "Failed to create access log directory '";
      undertowEmbeddedServletContainerFactory0.setDisplayName(string0);
      undertowBuilderCustomizerArray0[0] = undertowBuilderCustomizer0;
      undertowBuilderCustomizerArray0[1] = undertowBuilderCustomizerArray0[0];
      undertowBuilderCustomizerArray0[2] = undertowBuilderCustomizerArray0[1];
      undertowBuilderCustomizerArray0[3] = undertowBuilderCustomizerArray0[2];
      undertowBuilderCustomizerArray0[4] = undertowBuilderCustomizerArray0[3];
      undertowBuilderCustomizerArray0[5] = undertowBuilderCustomizerArray0[4];
      undertowBuilderCustomizerArray0[6] = undertowBuilderCustomizerArray0[5];
      undertowBuilderCustomizerArray0[7] = undertowBuilderCustomizerArray0[6];
      undertowBuilderCustomizerArray0[8] = undertowBuilderCustomizerArray0[7];
      undertowEmbeddedServletContainerFactory0.addBuilderCustomizers(undertowBuilderCustomizerArray0);
      boolean boolean0 = true;
      undertowEmbeddedServletContainerFactory0.setRegisterJspServlet(boolean0);
      UndertowDeploymentInfoCustomizer[] undertowDeploymentInfoCustomizerArray0 = new UndertowDeploymentInfoCustomizer[1];
      undertowEmbeddedServletContainerFactory0.addDeploymentInfoCustomizers(undertowDeploymentInfoCustomizerArray0);
      ServletContextInitializer[] servletContextInitializerArray0 = new ServletContextInitializer[1];
      ServletRegistrationBean[] servletRegistrationBeanArray0 = new ServletRegistrationBean[3];
      ServletRegistrationBean servletRegistrationBean0 = new ServletRegistrationBean();
      servletRegistrationBeanArray0[0] = servletRegistrationBean0;
      ServletRegistrationBean servletRegistrationBean1 = new ServletRegistrationBean();
      servletRegistrationBeanArray0[1] = servletRegistrationBean1;
      ServletRegistrationBean servletRegistrationBean2 = new ServletRegistrationBean();
      servletRegistrationBeanArray0[2] = servletRegistrationBean2;
      DelegatingFilterProxyRegistrationBean delegatingFilterProxyRegistrationBean0 = new DelegatingFilterProxyRegistrationBean(string0, servletRegistrationBeanArray0);
      servletContextInitializerArray0[0] = (ServletContextInitializer) delegatingFilterProxyRegistrationBean0;
      // Undeclared exception!
      try { 
        undertowEmbeddedServletContainerFactory0.getEmbeddedServletContainer(servletContextInitializerArray0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory", e);
      }
  }

  @Test(timeout = 11000)
  public void test23()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      int int0 = 2338;
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory(int0);
      ServletContextInitializer[] servletContextInitializerArray0 = new ServletContextInitializer[0];
      // Undeclared exception!
      try { 
        undertowEmbeddedServletContainerFactory0.getEmbeddedServletContainer(servletContextInitializerArray0);
      } catch(RuntimeException e) {
         //
         // Unable to create tempDir. java.io.tmpdir is set to /tmp
         //
         verifyException("org.springframework.boot.context.embedded.AbstractEmbeddedServletContainerFactory", e);
      }
  }

  @Test(timeout = 11000)
  public void test24()  throws Throwable  {
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory();
      boolean boolean0 = true;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      undertowEmbeddedServletContainerFactory0.setUseForwardHeaders(boolean0);
      boolean boolean1 = undertowEmbeddedServletContainerFactory0.isAccessLogEnabled();
      boolean boolean2 = undertowEmbeddedServletContainerFactory0.isAccessLogEnabled();
      ErrorPage[] errorPageArray0 = new ErrorPage[1];
      Class<Throwable> class0 = Throwable.class;
      String string0 = "0.0.0.0";
      ErrorPage errorPage0 = new ErrorPage(class0, string0);
      errorPageArray0[0] = errorPage0;
      undertowEmbeddedServletContainerFactory0.addErrorPages(errorPageArray0);
      ServletContextInitializer[] servletContextInitializerArray0 = new ServletContextInitializer[1];
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("src/main/webapp");
      String string1 = " (implementation not found in ";
      boolean boolean3 = FileSystemHandling.appendStringToFile(evoSuiteFile0, string1);
      ServletRegistrationBean servletRegistrationBean0 = new ServletRegistrationBean();
      int int0 = (-1855);
      servletRegistrationBean0.setLoadOnStartup(int0);
      servletContextInitializerArray0[0] = (ServletContextInitializer) servletRegistrationBean0;
      // Undeclared exception!
      try { 
        undertowEmbeddedServletContainerFactory0.getEmbeddedServletContainer(servletContextInitializerArray0);
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: Servlet must not be null
         //
         verifyException("io.undertow.servlet.core.DeploymentManagerImpl", e);
      }
  }
}
