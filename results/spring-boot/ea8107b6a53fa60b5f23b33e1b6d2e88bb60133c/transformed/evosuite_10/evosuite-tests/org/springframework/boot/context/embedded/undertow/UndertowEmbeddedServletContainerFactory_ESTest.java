/*
 * This file was automatically generated by EvoSuite
 * Thu Apr 30 03:55:35 GMT 2020
 */

package org.springframework.boot.context.embedded.undertow;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.atomikos.swing.HtmlFrame;
import groovy.lang.GroovyClassLoader;
import groovy.lang.NonEmptySequence;
import groovy.lang.Sequence;
import groovyjarjarasm.asm.Opcodes;
import io.undertow.Undertow;
import io.undertow.security.api.AuthenticationMode;
import io.undertow.security.api.NotificationReceiver;
import io.undertow.security.idm.IdentityManager;
import io.undertow.security.impl.BasicAuthenticationMechanism;
import io.undertow.security.impl.ClientCertAuthenticationMechanism;
import io.undertow.server.HandlerWrapper;
import io.undertow.server.HttpHandler;
import io.undertow.server.JvmRouteHandler;
import io.undertow.server.RoutingHandler;
import io.undertow.server.handlers.ByteRangeHandler;
import io.undertow.server.handlers.accesslog.AccessLogHandler;
import io.undertow.server.handlers.cache.DirectBufferCache;
import io.undertow.server.handlers.resource.CachingResourceManager;
import io.undertow.server.handlers.resource.ClassPathResourceManager;
import io.undertow.server.handlers.resource.FileResourceManager;
import io.undertow.server.handlers.resource.ResourceChangeListener;
import io.undertow.server.handlers.resource.ResourceManager;
import io.undertow.servlet.Servlets;
import io.undertow.servlet.api.ConfidentialPortManager;
import io.undertow.servlet.api.DeploymentInfo;
import io.undertow.servlet.api.DeploymentManager;
import io.undertow.servlet.api.FilterInfo;
import io.undertow.servlet.api.LifecycleInterceptor;
import io.undertow.servlet.api.ListenerInfo;
import io.undertow.servlet.api.MimeMapping;
import io.undertow.servlet.api.SecurityConstraint;
import io.undertow.servlet.api.ServletContainer;
import io.undertow.servlet.api.ServletContainerInitializerInfo;
import io.undertow.servlet.api.ServletInfo;
import io.undertow.servlet.api.ServletSessionConfig;
import io.undertow.servlet.api.ServletStackTraces;
import io.undertow.servlet.api.SessionConfigWrapper;
import io.undertow.servlet.api.WebResourceCollection;
import io.undertow.servlet.core.ContextClassLoaderSetupAction;
import io.undertow.servlet.core.DefaultAuthorizationManager;
import io.undertow.servlet.core.DeploymentImpl;
import io.undertow.servlet.core.DeploymentManagerImpl;
import io.undertow.servlet.core.InMemorySessionManagerFactory;
import io.undertow.servlet.core.ServletContainerImpl;
import io.undertow.servlet.handlers.DefaultServlet;
import io.undertow.servlet.handlers.ServletRequestContext;
import io.undertow.servlet.spec.ServletContextImpl;
import io.undertow.servlet.util.ConstructorInstanceFactory;
import io.undertow.servlet.util.DefaultClassIntrospector;
import io.undertow.servlet.util.InMemorySessionPersistence;
import java.awt.Choice;
import java.awt.GraphicsConfiguration;
import java.awt.Scrollbar;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.PipedOutputStream;
import java.lang.reflect.Constructor;
import java.net.InetAddress;
import java.net.MalformedURLException;
import java.net.URI;
import java.net.URL;
import java.net.URLClassLoader;
import java.nio.ByteBuffer;
import java.nio.channels.ReadableByteChannel;
import java.nio.file.Path;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Map;
import java.util.PriorityQueue;
import java.util.TreeSet;
import java.util.Vector;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.ConcurrentSkipListMap;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.LinkedTransferQueue;
import java.util.concurrent.SynchronousQueue;
import java.util.concurrent.TimeUnit;
import javax.management.remote.JMXPrincipal;
import javax.net.ssl.KeyManager;
import javax.net.ssl.SSLContext;
import javax.net.ssl.TrustManager;
import javax.servlet.DispatcherType;
import javax.servlet.Filter;
import javax.servlet.Servlet;
import javax.servlet.ServletContext;
import javax.swing.JApplet;
import javax.swing.JFrame;
import javax.swing.JLayeredPane;
import liquibase.integration.servlet.LiquibaseStatusServlet;
import org.apache.catalina.core.ApplicationContext;
import org.apache.catalina.core.StandardContext;
import org.apache.catalina.core.StandardEngine;
import org.apache.catalina.core.StandardHost;
import org.apache.catalina.filters.CorsFilter;
import org.apache.catalina.filters.RemoteHostFilter;
import org.apache.catalina.loader.ParallelWebappClassLoader;
import org.apache.catalina.startup.FailedContext;
import org.apache.jasper.servlet.JspCServletContext;
import org.apache.struts.mock.MockServletContext;
import org.apache.tomcat.util.descriptor.web.JspPropertyGroup;
import org.apache.tomcat.util.descriptor.web.ServletDef;
import org.apache.tomcat.util.descriptor.web.SessionConfig;
import org.codehaus.groovy.syntax.SyntaxException;
import org.dom4j.bean.BeanAttributeList;
import org.eclipse.jetty.http.HttpMethod;
import org.eclipse.jetty.security.ConstraintSecurityHandler;
import org.eclipse.jetty.server.HttpChannel;
import org.eclipse.jetty.server.HttpInput;
import org.eclipse.jetty.server.Request;
import org.eclipse.jetty.server.Server;
import org.eclipse.jetty.server.handler.ContextHandler;
import org.eclipse.jetty.server.handler.ErrorHandler;
import org.eclipse.jetty.server.session.HashSessionManager;
import org.eclipse.jetty.server.session.JDBCSessionManager;
import org.eclipse.jetty.server.session.SessionHandler;
import org.eclipse.jetty.servlet.FilterHolder;
import org.eclipse.jetty.servlet.ServletContextHandler;
import org.eclipse.jetty.servlet.ServletHandler;
import org.eclipse.jetty.servlet.ServletHolder;
import org.eclipse.jetty.servlets.CrossOriginFilter;
import org.eclipse.jetty.util.component.Container;
import org.eclipse.jetty.util.resource.ResourceCollection;
import org.eclipse.jetty.webapp.WebAppContext;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.net.MockInetAddress;
import org.evosuite.runtime.mock.java.net.MockInetSocketAddress;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.AnnotatedGenericBeanDefinition;
import org.springframework.beans.factory.support.DefaultListableBeanFactory;
import org.springframework.boot.context.embedded.Compression;
import org.springframework.boot.context.embedded.DelegatingFilterProxyRegistrationBean;
import org.springframework.boot.context.embedded.ErrorPage;
import org.springframework.boot.context.embedded.FilterRegistrationBean;
import org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer;
import org.springframework.boot.context.embedded.JspServlet;
import org.springframework.boot.context.embedded.MimeMappings;
import org.springframework.boot.context.embedded.ServletContextInitializer;
import org.springframework.boot.context.embedded.ServletListenerRegistrationBean;
import org.springframework.boot.context.embedded.ServletRegistrationBean;
import org.springframework.boot.context.embedded.Ssl;
import org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer;
import org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer;
import org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainer;
import org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory;
import org.springframework.context.annotation.AnnotationConfigApplicationContext;
import org.springframework.context.support.ClassPathXmlApplicationContext;
import org.springframework.context.support.FileSystemXmlApplicationContext;
import org.springframework.context.support.GenericApplicationContext;
import org.springframework.context.support.GenericXmlApplicationContext;
import org.springframework.core.io.ClassPathResource;
import org.springframework.core.io.ClassRelativeResourceLoader;
import org.springframework.core.io.FileSystemResource;
import org.springframework.core.io.PathResource;
import org.springframework.core.io.Resource;
import org.springframework.core.io.ResourceLoader;
import org.springframework.core.io.UrlResource;
import org.springframework.core.type.StandardAnnotationMetadata;
import org.springframework.http.HttpStatus;
import org.springframework.web.filter.CharacterEncodingFilter;
import org.springframework.web.filter.HttpPutFormContentFilter;
import org.xnio.BufferAllocator;
import org.xnio.Option;
import org.xnio.SslClientAuthMode;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class UndertowEmbeddedServletContainerFactory_ESTest extends UndertowEmbeddedServletContainerFactory_ESTest_scaffolding {

  @Test(timeout = 11000)
  public void test00()  throws Throwable  {
      int int0 = 1237;
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory(int0);
      boolean boolean0 = true;
      undertowEmbeddedServletContainerFactory0.setAccessLogEnabled(boolean0);
      ClassLoader classLoader0 = undertowEmbeddedServletContainerFactory0.getServletClassLoader();
      Integer integer0 = Opcodes.NULL;
      undertowEmbeddedServletContainerFactory0.setIoThreads(integer0);
      ServletContextInitializer[] servletContextInitializerArray0 = new ServletContextInitializer[9];
      Map<String, String> map0 = null;
      InitParameterConfiguringServletContextInitializer initParameterConfiguringServletContextInitializer0 = new InitParameterConfiguringServletContextInitializer(map0);
      servletContextInitializerArray0[0] = (ServletContextInitializer) initParameterConfiguringServletContextInitializer0;
      InitParameterConfiguringServletContextInitializer initParameterConfiguringServletContextInitializer1 = new InitParameterConfiguringServletContextInitializer(map0);
      servletContextInitializerArray0[1] = (ServletContextInitializer) initParameterConfiguringServletContextInitializer1;
      ServletRegistrationBean servletRegistrationBean0 = new ServletRegistrationBean();
      servletContextInitializerArray0[2] = (ServletContextInitializer) servletRegistrationBean0;
      InitParameterConfiguringServletContextInitializer initParameterConfiguringServletContextInitializer2 = new InitParameterConfiguringServletContextInitializer(map0);
      servletContextInitializerArray0[3] = (ServletContextInitializer) initParameterConfiguringServletContextInitializer2;
      InitParameterConfiguringServletContextInitializer initParameterConfiguringServletContextInitializer3 = new InitParameterConfiguringServletContextInitializer(map0);
      servletContextInitializerArray0[4] = (ServletContextInitializer) initParameterConfiguringServletContextInitializer3;
      HttpPutFormContentFilter httpPutFormContentFilter0 = new HttpPutFormContentFilter();
      ServletRegistrationBean[] servletRegistrationBeanArray0 = new ServletRegistrationBean[5];
      servletRegistrationBeanArray0[0] = servletRegistrationBean0;
      servletRegistrationBeanArray0[1] = servletRegistrationBean0;
      servletRegistrationBeanArray0[2] = servletRegistrationBean0;
      servletRegistrationBeanArray0[3] = servletRegistrationBean0;
      servletRegistrationBeanArray0[4] = servletRegistrationBean0;
      FilterRegistrationBean filterRegistrationBean0 = new FilterRegistrationBean(httpPutFormContentFilter0, servletRegistrationBeanArray0);
      servletContextInitializerArray0[5] = (ServletContextInitializer) filterRegistrationBean0;
      FilterRegistrationBean filterRegistrationBean1 = new FilterRegistrationBean(httpPutFormContentFilter0, servletRegistrationBeanArray0);
      servletContextInitializerArray0[6] = (ServletContextInitializer) filterRegistrationBean1;
      FilterRegistrationBean filterRegistrationBean2 = new FilterRegistrationBean();
      servletContextInitializerArray0[7] = (ServletContextInitializer) filterRegistrationBean2;
      String string0 = "";
      filterRegistrationBean0.addInitParameter(httpPutFormContentFilter0.ALREADY_FILTERED_SUFFIX, string0);
      InitParameterConfiguringServletContextInitializer initParameterConfiguringServletContextInitializer4 = new InitParameterConfiguringServletContextInitializer(map0);
      servletContextInitializerArray0[8] = (ServletContextInitializer) initParameterConfiguringServletContextInitializer4;
      // Undeclared exception!
      try { 
        undertowEmbeddedServletContainerFactory0.createDeploymentManager(servletContextInitializerArray0);
      } catch(RuntimeException e) {
         //
         // java.lang.NullPointerException
         //
         verifyException("io.undertow.servlet.core.DeploymentManagerImpl", e);
      }
  }

  @Test(timeout = 11000)
  public void test01()  throws Throwable  {
      int int0 = (-531);
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory(int0);
      JspPropertyGroup jspPropertyGroup0 = new JspPropertyGroup();
      Boolean boolean0 = jspPropertyGroup0.getScriptingInvalid();
      undertowEmbeddedServletContainerFactory0.setDirectBuffers(boolean0);
      DeploymentInfo deploymentInfo0 = new DeploymentInfo();
      LifecycleInterceptor lifecycleInterceptor0 = mock(LifecycleInterceptor.class, new ViolatedAssumptionAnswer());
      DeploymentInfo deploymentInfo1 = deploymentInfo0.addLifecycleInterceptor(lifecycleInterceptor0);
      LinkedTransferQueue<MimeMapping> linkedTransferQueue0 = new LinkedTransferQueue<MimeMapping>();
      DeploymentInfo deploymentInfo2 = deploymentInfo1.addMimeMappings((Collection<MimeMapping>) linkedTransferQueue0);
      DispatcherType dispatcherType0 = DispatcherType.ASYNC;
      DeploymentInfo deploymentInfo3 = deploymentInfo2.addFilterServletNameMapping(undertowEmbeddedServletContainerFactory0.accessLogPattern, undertowEmbeddedServletContainerFactory0.accessLogPattern, dispatcherType0);
      ByteRangeHandler.Wrapper byteRangeHandler_Wrapper0 = new ByteRangeHandler.Wrapper(undertowEmbeddedServletContainerFactory0.accessLogEnabled);
      DeploymentInfo deploymentInfo4 = deploymentInfo3.addInnerHandlerChainWrapper(byteRangeHandler_Wrapper0);
      ServletContextInitializer[] servletContextInitializerArray0 = new ServletContextInitializer[7];
      MockServletContext mockServletContext0 = new MockServletContext();
      String string0 = "tVJ[H y}}kH";
      // Undeclared exception!
      try { 
        mockServletContext0.getServlet(string0);
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.struts.mock.MockServletContext", e);
      }
  }

  @Test(timeout = 11000)
  public void test02()  throws Throwable  {
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory();
      UndertowBuilderCustomizer[] undertowBuilderCustomizerArray0 = new UndertowBuilderCustomizer[0];
      String string0 = "UndertowDeploymentInfoCustomizers must not be null";
      undertowEmbeddedServletContainerFactory0.setAccessLogPattern(string0);
      undertowEmbeddedServletContainerFactory0.addBuilderCustomizers(undertowBuilderCustomizerArray0);
      Compression compression0 = undertowEmbeddedServletContainerFactory0.getCompression();
      undertowEmbeddedServletContainerFactory0.setCompression(compression0);
      UndertowDeploymentInfoCustomizer[] undertowDeploymentInfoCustomizerArray0 = new UndertowDeploymentInfoCustomizer[0];
      undertowEmbeddedServletContainerFactory0.addDeploymentInfoCustomizers(undertowDeploymentInfoCustomizerArray0);
      Resource[] resourceArray0 = new Resource[9];
      URI uRI0 = null;
      PathResource pathResource0 = null;
      try {
        pathResource0 = new PathResource(uRI0);
      } catch(IllegalArgumentException e) {
         //
         // URI must not be null
         //
         verifyException("org.springframework.util.Assert", e);
      }
  }

  @Test(timeout = 11000)
  public void test03()  throws Throwable  {
      UndertowEmbeddedServletContainerFactory.JarResourceManager undertowEmbeddedServletContainerFactory_JarResourceManager0 = new UndertowEmbeddedServletContainerFactory.JarResourceManager();
      String string0 = "ko(kb.CEtmXv&=";
      try { 
        undertowEmbeddedServletContainerFactory_JarResourceManager0.getResource(string0);
      } catch(MalformedURLException e) {
         //
         // no !/ in spec
         //
         verifyException("java.net.URL", e);
      }
  }

  @Test(timeout = 11000)
  public void test04()  throws Throwable  {
      int int0 = 0;
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory(int0);
      TreeSet<ErrorPage> treeSet0 = new TreeSet<ErrorPage>();
      undertowEmbeddedServletContainerFactory0.setErrorPages(treeSet0);
      ResourceLoader resourceLoader0 = undertowEmbeddedServletContainerFactory0.resourceLoader;
      undertowEmbeddedServletContainerFactory0.setResourceLoader(resourceLoader0);
      Undertow.Builder undertow_Builder0 = undertowEmbeddedServletContainerFactory0.createBuilder(int0);
      String string0 = "";
      UndertowEmbeddedServletContainerFactory.JarResourceManager undertowEmbeddedServletContainerFactory_JarResourceManager0 = new UndertowEmbeddedServletContainerFactory.JarResourceManager(string0);
      undertowEmbeddedServletContainerFactory_JarResourceManager0.close();
      ServletContainerImpl servletContainerImpl0 = new ServletContainerImpl();
      DeploymentManager deploymentManager0 = servletContainerImpl0.getDeployment(string0);
      int int1 = 43;
      UndertowEmbeddedServletContainer undertowEmbeddedServletContainer0 = undertowEmbeddedServletContainerFactory0.getUndertowEmbeddedServletContainer(undertow_Builder0, deploymentManager0, int1);
  }

  @Test(timeout = 11000)
  public void test05()  throws Throwable  {
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory();
      // Undeclared exception!
      try { 
        undertowEmbeddedServletContainerFactory0.getKeyManagers();
      } catch(IllegalStateException e) {
         //
         // java.lang.NullPointerException
         //
         verifyException("org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory", e);
      }
  }

  @Test(timeout = 11000)
  public void test06()  throws Throwable  {
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory();
      boolean boolean0 = false;
      undertowEmbeddedServletContainerFactory0.setUseForwardHeaders(boolean0);
      Undertow.Builder undertow_Builder0 = null;
      ServletContainerImpl servletContainerImpl0 = new ServletContainerImpl();
      DeploymentInfo deploymentInfo0 = new DeploymentInfo();
      int int0 = (-770);
      InMemorySessionManagerFactory inMemorySessionManagerFactory0 = new InMemorySessionManagerFactory(int0);
      DeploymentInfo deploymentInfo1 = deploymentInfo0.setDefaultEncoding(undertowEmbeddedServletContainerFactory0.accessLogPattern);
      SessionConfigWrapper sessionConfigWrapper0 = mock(SessionConfigWrapper.class, new ViolatedAssumptionAnswer());
      DeploymentInfo deploymentInfo2 = deploymentInfo1.setSessionConfigWrapper(sessionConfigWrapper0);
      DeploymentManager deploymentManager0 = servletContainerImpl0.addDeployment(deploymentInfo2);
      servletContainerImpl0.removeDeployment(deploymentInfo2);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp/undertow-docbase.0.8080");
      byte[] byteArray0 = new byte[9];
      byte byte0 = (byte)1;
      byteArray0[0] = byte0;
      byte byte1 = (byte) (-45);
      byteArray0[1] = byte1;
      byte byte2 = (byte)0;
      byteArray0[2] = byte2;
      byte byte3 = (byte)1;
      byteArray0[3] = byte3;
      byte byte4 = (byte)124;
      byteArray0[4] = byte4;
      byte byte5 = (byte)104;
      byteArray0[5] = byte5;
      byte byte6 = (byte) (-124);
      byteArray0[6] = byte6;
      byte byte7 = (byte) (-66);
      byteArray0[7] = byte7;
      byte byte8 = (byte) (-66);
      byteArray0[8] = byte8;
      boolean boolean1 = FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      int int1 = (-1);
      UndertowEmbeddedServletContainer undertowEmbeddedServletContainer0 = undertowEmbeddedServletContainerFactory0.getUndertowEmbeddedServletContainer(undertow_Builder0, deploymentManager0, int1);
      ResourceManager resourceManager0 = undertowEmbeddedServletContainerFactory0.getDocumentRootResourceManager();
      int int2 = (-627);
      Random.setNextRandom(int2);
  }

  @Test(timeout = 11000)
  public void test07()  throws Throwable  {
      int int0 = 0;
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory(int0);
      Class<BeanAttributeList> class0 = BeanAttributeList.class;
      ClassRelativeResourceLoader classRelativeResourceLoader0 = new ClassRelativeResourceLoader(class0);
      undertowEmbeddedServletContainerFactory0.resourceLoader = (ResourceLoader) classRelativeResourceLoader0;
      HttpStatus httpStatus0 = HttpStatus.REQUEST_HEADER_FIELDS_TOO_LARGE;
      ErrorPage errorPage0 = new ErrorPage(httpStatus0, undertowEmbeddedServletContainerFactory0.accessLogPattern);
      io.undertow.servlet.api.ErrorPage errorPage1 = undertowEmbeddedServletContainerFactory0.getUndertowErrorPage(errorPage0);
      boolean boolean0 = true;
      ClassLoader classLoader0 = classRelativeResourceLoader0.getClassLoader();
      undertowEmbeddedServletContainerFactory0.setUseForwardHeaders(boolean0);
      String string0 = undertowEmbeddedServletContainerFactory0.getListenAddress();
      UndertowEmbeddedServletContainerFactory.JarResourceManager undertowEmbeddedServletContainerFactory_JarResourceManager0 = new UndertowEmbeddedServletContainerFactory.JarResourceManager();
      boolean boolean1 = undertowEmbeddedServletContainerFactory_JarResourceManager0.isResourceChangeListenerSupported();
      HashSessionManager hashSessionManager0 = new HashSessionManager();
      File file0 = hashSessionManager0.getStoreDirectory();
      undertowEmbeddedServletContainerFactory0.setAccessLogDirectory(file0);
      DeploymentInfo deploymentInfo0 = null;
      // Undeclared exception!
      try { 
        undertowEmbeddedServletContainerFactory0.configureAccessLog(deploymentInfo0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory", e);
      }
  }

  @Test(timeout = 11000)
  public void test08()  throws Throwable  {
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory();
      boolean boolean0 = false;
      undertowEmbeddedServletContainerFactory0.setUseForwardHeaders(boolean0);
      Undertow.Builder undertow_Builder0 = null;
      ServletContainerImpl servletContainerImpl0 = new ServletContainerImpl();
      DeploymentInfo deploymentInfo0 = new DeploymentInfo();
      int int0 = (-770);
      InMemorySessionManagerFactory inMemorySessionManagerFactory0 = new InMemorySessionManagerFactory(int0);
      DeploymentInfo deploymentInfo1 = deploymentInfo0.setDefaultEncoding(undertowEmbeddedServletContainerFactory0.accessLogPattern);
      SessionConfigWrapper sessionConfigWrapper0 = mock(SessionConfigWrapper.class, new ViolatedAssumptionAnswer());
      DeploymentInfo deploymentInfo2 = deploymentInfo1.setSessionConfigWrapper(sessionConfigWrapper0);
      DeploymentManager deploymentManager0 = servletContainerImpl0.addDeployment(deploymentInfo2);
      int int1 = (-1);
      UndertowEmbeddedServletContainer undertowEmbeddedServletContainer0 = undertowEmbeddedServletContainerFactory0.getUndertowEmbeddedServletContainer(undertow_Builder0, deploymentManager0, int1);
      ResourceManager resourceManager0 = undertowEmbeddedServletContainerFactory0.getDocumentRootResourceManager();
      int int2 = (-627);
      Random.setNextRandom(int2);
      Ssl ssl0 = new Ssl();
      SslClientAuthMode sslClientAuthMode0 = undertowEmbeddedServletContainerFactory0.getSslClientAuthMode(ssl0);
      ServletContextInitializer[] servletContextInitializerArray0 = new ServletContextInitializer[9];
      FilterRegistrationBean filterRegistrationBean0 = new FilterRegistrationBean();
      servletContextInitializerArray0[0] = (ServletContextInitializer) filterRegistrationBean0;
      ServletRegistrationBean servletRegistrationBean0 = new ServletRegistrationBean();
      servletContextInitializerArray0[1] = (ServletContextInitializer) servletRegistrationBean0;
      CrossOriginFilter crossOriginFilter0 = new CrossOriginFilter();
      ServletRegistrationBean[] servletRegistrationBeanArray0 = new ServletRegistrationBean[5];
      servletRegistrationBeanArray0[0] = servletRegistrationBean0;
      servletRegistrationBeanArray0[1] = servletRegistrationBean0;
      servletRegistrationBeanArray0[2] = servletRegistrationBean0;
      servletRegistrationBeanArray0[3] = servletRegistrationBean0;
      servletRegistrationBeanArray0[4] = servletRegistrationBean0;
      servletContextInitializerArray0[2] = (ServletContextInitializer) filterRegistrationBean0;
      String string0 = "G$e| b_+P/JW]=QB";
      DelegatingFilterProxyRegistrationBean delegatingFilterProxyRegistrationBean0 = new DelegatingFilterProxyRegistrationBean(string0, servletRegistrationBeanArray0);
      servletContextInitializerArray0[3] = (ServletContextInitializer) delegatingFilterProxyRegistrationBean0;
      ServletListenerRegistrationBean<HtmlFrame> servletListenerRegistrationBean0 = new ServletListenerRegistrationBean<HtmlFrame>();
      servletContextInitializerArray0[4] = (ServletContextInitializer) servletListenerRegistrationBean0;
      ServletListenerRegistrationBean<HtmlFrame> servletListenerRegistrationBean1 = new ServletListenerRegistrationBean<HtmlFrame>();
      servletContextInitializerArray0[5] = (ServletContextInitializer) servletListenerRegistrationBean1;
      Class<Object> class0 = Object.class;
      ClassPathResource classPathResource0 = new ClassPathResource(crossOriginFilter0.CHAIN_PREFLIGHT_PARAM, class0);
      try { 
        classPathResource0.getURL();
      } catch(FileNotFoundException e) {
         //
         // class path resource [java/lang/chainPreflight] cannot be resolved to URL because it does not exist
         //
         verifyException("org.springframework.core.io.ClassPathResource", e);
      }
  }

  @Test(timeout = 11000)
  public void test09()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          String string0 = "";
          int int0 = (-1);
          UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory(string0, int0);
          Integer integer0 = groovyjarjarasm.asm.Opcodes.UNINITIALIZED_THIS;
          String string1 = "4'TJ*\\1.v#";
          NonEmptySequence nonEmptySequence0 = new NonEmptySequence();
          undertowEmbeddedServletContainerFactory0.builderCustomizers = (List<UndertowBuilderCustomizer>) nonEmptySequence0;
          String string2 = "\\yUa01";
          MockFile mockFile0 = new MockFile(string1, string2);
          undertowEmbeddedServletContainerFactory0.accessLogDirectory = (File) mockFile0;
          String string3 = "q87k";
          Integer integer1 = Integer.getInteger(string3);
          undertowEmbeddedServletContainerFactory0.setBuffersPerRegion(integer0);
          ResourceCollection resourceCollection0 = new ResourceCollection();
          ReadableByteChannel readableByteChannel0 = resourceCollection0.getReadableByteChannel();
          File file0 = resourceCollection0.getFile();
          ClassLoader classLoader0 = undertowEmbeddedServletContainerFactory0.getServletClassLoader();
          undertowEmbeddedServletContainerFactory0.setAccessLogDirectory(file0);
          Undertow.Builder undertow_Builder0 = undertowEmbeddedServletContainerFactory0.createBuilder(int0);
          ClassLoader classLoader1 = undertowEmbeddedServletContainerFactory0.getServletClassLoader();
          // Undeclared exception!
          try { 
            undertowEmbeddedServletContainerFactory0.createWorker();
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.lang.RuntimePermission\" \"createXnioWorker\")
             // java.lang.Thread.getStackTrace(Thread.java:1559)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:434)
             // org.xnio.XnioWorker.<init>(XnioWorker.java:106)
             // org.xnio.nio.NioXnioWorker.<init>(NioXnioWorker.java:74)
             // org.xnio.nio.NioXnio.createWorker(NioXnio.java:202)
             // org.xnio.Xnio.createWorker(Xnio.java:449)
             // org.xnio.Xnio.createWorker(Xnio.java:436)
             // org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.createWorker(UndertowEmbeddedServletContainerFactory.java:316)
             // sun.reflect.GeneratedMethodAccessor72.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:257)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:169)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:220)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:307)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:213)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:55)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:748)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(11000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 11000)
  public void test10()  throws Throwable  {
      int int0 = (-2149);
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory(int0);
      boolean boolean0 = true;
      RoutingHandler routingHandler0 = new RoutingHandler(boolean0);
      // Undeclared exception!
      try { 
        undertowEmbeddedServletContainerFactory0.createAccessLogHandler(routingHandler0);
      } catch(IllegalStateException e) {
         //
         // Access log directory is not set
         //
         verifyException("org.springframework.util.Assert", e);
      }
  }

  @Test(timeout = 11000)
  public void test11()  throws Throwable  {
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory();
      String[] stringArray0 = null;
      String string0 = "";
      MockFile mockFile0 = new MockFile(string0);
      Path path0 = mockFile0.toPath();
      PathResource pathResource0 = new PathResource(path0);
      File file0 = pathResource0.getFile();
      undertowEmbeddedServletContainerFactory0.setSessionStoreDir(file0);
      FileSystemXmlApplicationContext fileSystemXmlApplicationContext0 = new FileSystemXmlApplicationContext(stringArray0);
      DefaultListableBeanFactory defaultListableBeanFactory0 = new DefaultListableBeanFactory(fileSystemXmlApplicationContext0);
      AnnotationConfigApplicationContext annotationConfigApplicationContext0 = new AnnotationConfigApplicationContext(defaultListableBeanFactory0);
      undertowEmbeddedServletContainerFactory0.resourceLoader = (ResourceLoader) annotationConfigApplicationContext0;
      Collection<UndertowBuilderCustomizer> collection0 = undertowEmbeddedServletContainerFactory0.getBuilderCustomizers();
      ResourceManager resourceManager0 = undertowEmbeddedServletContainerFactory0.getDocumentRootResourceManager();
      ErrorPage errorPage0 = new ErrorPage(string0);
      io.undertow.servlet.api.ErrorPage errorPage1 = undertowEmbeddedServletContainerFactory0.getUndertowErrorPage(errorPage0);
      Ssl ssl0 = new Ssl();
      SslClientAuthMode sslClientAuthMode0 = undertowEmbeddedServletContainerFactory0.getSslClientAuthMode(ssl0);
      ServletContextInitializer[] servletContextInitializerArray0 = new ServletContextInitializer[9];
      Servlet servlet0 = null;
      ServletRegistrationBean servletRegistrationBean0 = null;
      try {
        servletRegistrationBean0 = new ServletRegistrationBean(servlet0, stringArray0);
      } catch(IllegalArgumentException e) {
         //
         // Servlet must not be null
         //
         verifyException("org.springframework.util.Assert", e);
      }
  }

  @Test(timeout = 11000)
  public void test12()  throws Throwable  {
      int int0 = 0;
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory(int0);
      UndertowEmbeddedServletContainerFactory.JarResourceManager undertowEmbeddedServletContainerFactory_JarResourceManager0 = new UndertowEmbeddedServletContainerFactory.JarResourceManager();
      Integer integer0 = JLayeredPane.PALETTE_LAYER;
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = "";
      boolean boolean1 = FileSystemHandling.appendStringToFile(evoSuiteFile0, string0);
      undertowEmbeddedServletContainerFactory0.setBufferSize(integer0);
      boolean boolean2 = undertowEmbeddedServletContainerFactory_JarResourceManager0.isResourceChangeListenerSupported();
      // Undeclared exception!
      try { 
        undertowEmbeddedServletContainerFactory0.createAccessLogDirectoryIfNecessary();
      } catch(IllegalStateException e) {
         //
         // Access log directory is not set
         //
         verifyException("org.springframework.util.Assert", e);
      }
  }

  @Test(timeout = 11000)
  public void test13()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = false;
      boolean boolean1 = false;
      boolean boolean2 = FileSystemHandling.setPermissions(evoSuiteFile0, boolean0, boolean1, boolean0);
      int int0 = (-1896);
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory(int0);
      System.setCurrentTimeMillis(int0);
      int int1 = 733;
      Undertow.Builder undertow_Builder0 = undertowEmbeddedServletContainerFactory0.createBuilder(int1);
  }

  @Test(timeout = 11000)
  public void test14()  throws Throwable  {
      int int0 = 0;
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory(int0);
      Ssl ssl0 = new Ssl();
      int int1 = 144;
      Undertow.Builder undertow_Builder0 = Undertow.builder();
      int int2 = 0;
      String string0 = "(*=Mj}dgCA6uMSJs";
      SSLContext sSLContext0 = null;
      RoutingHandler routingHandler0 = new RoutingHandler();
      Undertow.Builder undertow_Builder1 = undertow_Builder0.addHttpsListener(int2, string0, sSLContext0, (HttpHandler) routingHandler0);
      // Undeclared exception!
      try { 
        undertowEmbeddedServletContainerFactory0.configureSsl(ssl0, int1, undertow_Builder1);
      } catch(IllegalStateException e) {
         //
         // java.lang.NullPointerException
         //
         verifyException("org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory", e);
      }
  }

  @Test(timeout = 11000)
  public void test15()  throws Throwable  {
      int int0 = 61;
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory(int0);
      Integer integer0 = groovyjarjarasm.asm.Opcodes.NULL;
      undertowEmbeddedServletContainerFactory0.setBufferSize(integer0);
  }

  @Test(timeout = 11000)
  public void test16()  throws Throwable  {
      String string0 = "yP|X[^)L*5I";
      UndertowEmbeddedServletContainerFactory.JarResourceManager undertowEmbeddedServletContainerFactory_JarResourceManager0 = new UndertowEmbeddedServletContainerFactory.JarResourceManager(string0);
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory();
      RoutingHandler routingHandler0 = new RoutingHandler(undertowEmbeddedServletContainerFactory0.accessLogEnabled);
      // Undeclared exception!
      try { 
        undertowEmbeddedServletContainerFactory0.createAccessLogHandler(routingHandler0);
      } catch(IllegalStateException e) {
         //
         // Access log directory is not set
         //
         verifyException("org.springframework.util.Assert", e);
      }
  }

  @Test(timeout = 11000)
  public void test17()  throws Throwable  {
      String string0 = "+D,CC-k)e^:`@";
      int int0 = 771;
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = null;
      try {
        undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory(string0, int0);
      } catch(IllegalArgumentException e) {
         //
         // ContextPath must start with '/' and not end with '/'
         //
         verifyException("org.springframework.boot.context.embedded.AbstractConfigurableEmbeddedServletContainer", e);
      }
  }

  @Test(timeout = 11000)
  public void test18()  throws Throwable  {
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory();
      LinkedHashSet<UndertowBuilderCustomizer> linkedHashSet0 = new LinkedHashSet<UndertowBuilderCustomizer>();
      UndertowBuilderCustomizer undertowBuilderCustomizer0 = mock(UndertowBuilderCustomizer.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = linkedHashSet0.add(undertowBuilderCustomizer0);
      Iterator<UndertowBuilderCustomizer> iterator0 = linkedHashSet0.iterator();
      undertowEmbeddedServletContainerFactory0.setBuilderCustomizers(linkedHashSet0);
      ResourceManager resourceManager0 = undertowEmbeddedServletContainerFactory0.getDocumentRootResourceManager();
      String string0 = "";
      undertowEmbeddedServletContainerFactory0.setAccessLogPattern(string0);
      UndertowBuilderCustomizer[] undertowBuilderCustomizerArray0 = new UndertowBuilderCustomizer[9];
      undertowBuilderCustomizerArray0[0] = undertowBuilderCustomizer0;
      undertowBuilderCustomizerArray0[1] = undertowBuilderCustomizer0;
      undertowBuilderCustomizerArray0[2] = undertowBuilderCustomizerArray0[1];
      undertowBuilderCustomizerArray0[3] = undertowBuilderCustomizer0;
      undertowBuilderCustomizerArray0[4] = undertowBuilderCustomizer0;
      undertowBuilderCustomizerArray0[5] = undertowBuilderCustomizer0;
      undertowBuilderCustomizerArray0[6] = undertowBuilderCustomizer0;
      undertowBuilderCustomizerArray0[7] = undertowBuilderCustomizer0;
      undertowBuilderCustomizerArray0[8] = undertowBuilderCustomizer0;
      undertowEmbeddedServletContainerFactory0.addBuilderCustomizers(undertowBuilderCustomizerArray0);
  }

  @Test(timeout = 11000)
  public void test19()  throws Throwable  {
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory();
      UndertowBuilderCustomizer[] undertowBuilderCustomizerArray0 = new UndertowBuilderCustomizer[0];
      undertowEmbeddedServletContainerFactory0.addBuilderCustomizers(undertowBuilderCustomizerArray0);
      UndertowDeploymentInfoCustomizer[] undertowDeploymentInfoCustomizerArray0 = new UndertowDeploymentInfoCustomizer[0];
      undertowEmbeddedServletContainerFactory0.addDeploymentInfoCustomizers(undertowDeploymentInfoCustomizerArray0);
      Resource[] resourceArray0 = new Resource[9];
      URI uRI0 = null;
      PathResource pathResource0 = null;
      try {
        pathResource0 = new PathResource(uRI0);
      } catch(IllegalArgumentException e) {
         //
         // URI must not be null
         //
         verifyException("org.springframework.util.Assert", e);
      }
  }

  @Test(timeout = 11000)
  public void test20()  throws Throwable  {
      int int0 = 0;
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory(int0);
      String string0 = undertowEmbeddedServletContainerFactory0.getListenAddress();
      ServletContextInitializer[] servletContextInitializerArray0 = new ServletContextInitializer[0];
      // Undeclared exception!
      try { 
        undertowEmbeddedServletContainerFactory0.getEmbeddedServletContainer(servletContextInitializerArray0);
      } catch(RuntimeException e) {
         //
         // java.security.AccessControlException: access denied (\"java.lang.RuntimePermission\" \"io.undertow.servlet.CREATE_INITIAL_HANDLER\")
         //
         verifyException("io.undertow.servlet.core.DeploymentManagerImpl", e);
      }
  }

  @Test(timeout = 11000)
  public void test21()  throws Throwable  {
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory();
      boolean boolean0 = undertowEmbeddedServletContainerFactory0.isAccessLogEnabled();
      Integer integer0 = null;
      List<UndertowBuilderCustomizer> list0 = null;
      undertowEmbeddedServletContainerFactory0.builderCustomizers = list0;
      undertowEmbeddedServletContainerFactory0.setBufferSize(integer0);
      int int0 = 0;
      ResourceCollection resourceCollection0 = new ResourceCollection();
      File file0 = resourceCollection0.getFile();
      undertowEmbeddedServletContainerFactory0.setSessionStoreDir(file0);
      // Undeclared exception!
      try { 
        undertowEmbeddedServletContainerFactory0.createBuilder(int0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory", e);
      }
  }

  @Test(timeout = 11000)
  public void test22()  throws Throwable  {
      int int0 = (-1);
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory(int0);
      UndertowDeploymentInfoCustomizer[] undertowDeploymentInfoCustomizerArray0 = new UndertowDeploymentInfoCustomizer[3];
      UndertowDeploymentInfoCustomizer undertowDeploymentInfoCustomizer0 = mock(UndertowDeploymentInfoCustomizer.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(undertowDeploymentInfoCustomizer0).toString();
      Class<Integer> class0 = Integer.class;
      Sequence sequence0 = new Sequence(class0, undertowEmbeddedServletContainerFactory0.builderCustomizers);
      undertowEmbeddedServletContainerFactory0.deploymentInfoCustomizers = (List<UndertowDeploymentInfoCustomizer>) sequence0;
      undertowDeploymentInfoCustomizerArray0[0] = undertowDeploymentInfoCustomizer0;
      undertowDeploymentInfoCustomizerArray0[1] = undertowDeploymentInfoCustomizerArray0[0];
      undertowDeploymentInfoCustomizerArray0[2] = undertowDeploymentInfoCustomizerArray0[1];
      // Undeclared exception!
      try { 
        undertowEmbeddedServletContainerFactory0.addDeploymentInfoCustomizers(undertowDeploymentInfoCustomizerArray0);
      } catch(IllegalArgumentException e) {
         //
         // Invalid type of argument for sequence of type: java.lang.Integer cannot add object: Mock for UndertowDeploymentInfoCustomizer, hashCode: 209768232
         //
         verifyException("groovy.lang.Sequence", e);
      }
  }

  @Test(timeout = 11000)
  public void test23()  throws Throwable  {
      int int0 = 2248;
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory(int0);
      ServletContextInitializer[] servletContextInitializerArray0 = new ServletContextInitializer[6];
      FilterRegistrationBean filterRegistrationBean0 = new FilterRegistrationBean();
      servletContextInitializerArray0[0] = (ServletContextInitializer) filterRegistrationBean0;
      ServletRegistrationBean servletRegistrationBean0 = new ServletRegistrationBean();
      servletContextInitializerArray0[1] = (ServletContextInitializer) servletRegistrationBean0;
      String string0 = null;
      String string1 = "N6QY";
      WebAppContext webAppContext0 = new WebAppContext(string0, string1);
      Map<String, String> map0 = webAppContext0.getResourceAliases();
      InitParameterConfiguringServletContextInitializer initParameterConfiguringServletContextInitializer0 = new InitParameterConfiguringServletContextInitializer(map0);
      servletContextInitializerArray0[2] = (ServletContextInitializer) initParameterConfiguringServletContextInitializer0;
      ServletRegistrationBean servletRegistrationBean1 = new ServletRegistrationBean();
      servletContextInitializerArray0[3] = (ServletContextInitializer) servletRegistrationBean1;
      DefaultServlet defaultServlet0 = new DefaultServlet();
      boolean boolean0 = false;
      ServletRegistrationBean servletRegistrationBean2 = new ServletRegistrationBean(defaultServlet0, boolean0, webAppContext0.__dftSystemClasses);
      servletContextInitializerArray0[4] = (ServletContextInitializer) servletRegistrationBean2;
      CorsFilter corsFilter0 = new CorsFilter();
      ServletRegistrationBean[] servletRegistrationBeanArray0 = new ServletRegistrationBean[5];
      ServletRegistrationBean servletRegistrationBean3 = new ServletRegistrationBean(defaultServlet0, boolean0, webAppContext0.__dftSystemClasses);
      servletRegistrationBeanArray0[0] = servletRegistrationBean3;
      servletRegistrationBeanArray0[1] = servletRegistrationBean0;
      servletRegistrationBeanArray0[2] = servletRegistrationBean0;
      servletRegistrationBeanArray0[3] = servletRegistrationBean2;
      servletRegistrationBeanArray0[4] = servletRegistrationBean0;
      FilterRegistrationBean filterRegistrationBean1 = new FilterRegistrationBean(corsFilter0, servletRegistrationBeanArray0);
      servletContextInitializerArray0[5] = (ServletContextInitializer) filterRegistrationBean1;
      // Undeclared exception!
      try { 
        undertowEmbeddedServletContainerFactory0.getEmbeddedServletContainer(servletContextInitializerArray0);
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: Filter must not be null
         //
         verifyException("io.undertow.servlet.core.DeploymentManagerImpl", e);
      }
  }

  @Test(timeout = 11000)
  public void test24()  throws Throwable  {
      String string0 = "&s3w({\",emx*fU'";
      UndertowEmbeddedServletContainerFactory.JarResourceManager undertowEmbeddedServletContainerFactory_JarResourceManager0 = new UndertowEmbeddedServletContainerFactory.JarResourceManager(string0);
      int int0 = 1;
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory(int0);
      undertowEmbeddedServletContainerFactory0.setAccessLogPattern(undertowEmbeddedServletContainerFactory_JarResourceManager0.jarPath);
      String string1 = "Bjmz_wcmL-=Ov%+K";
      // Undeclared exception!
      try { 
        undertowEmbeddedServletContainerFactory0.getKeyManagers();
      } catch(IllegalStateException e) {
         //
         // java.lang.NullPointerException
         //
         verifyException("org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory", e);
      }
  }

  @Test(timeout = 11000)
  public void test25()  throws Throwable  {
      int int0 = 177;
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory(int0);
      File file0 = null;
      undertowEmbeddedServletContainerFactory0.setAccessLogDirectory(file0);
      // Undeclared exception!
      try { 
        undertowEmbeddedServletContainerFactory0.getTrustManagers();
      } catch(IllegalStateException e) {
         //
         // java.lang.NullPointerException
         //
         verifyException("org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory", e);
      }
  }

  @Test(timeout = 11000)
  public void test26()  throws Throwable  {
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory();
      List<UndertowBuilderCustomizer> list0 = undertowEmbeddedServletContainerFactory0.builderCustomizers;
      undertowEmbeddedServletContainerFactory0.builderCustomizers = list0;
      // Undeclared exception!
      try { 
        undertowEmbeddedServletContainerFactory0.getTrustManagers();
      } catch(IllegalStateException e) {
         //
         // java.lang.NullPointerException
         //
         verifyException("org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory", e);
      }
  }

  @Test(timeout = 11000)
  public void test27()  throws Throwable  {
      String string0 = "Customizers must not be null";
      UndertowEmbeddedServletContainerFactory.JarResourceManager undertowEmbeddedServletContainerFactory_JarResourceManager0 = new UndertowEmbeddedServletContainerFactory.JarResourceManager(string0);
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory();
      DeploymentInfo deploymentInfo0 = new DeploymentInfo();
      boolean boolean0 = false;
      DeploymentInfo deploymentInfo1 = deploymentInfo0.setIgnoreFlush(boolean0);
      boolean boolean1 = false;
      ClientCertAuthenticationMechanism clientCertAuthenticationMechanism0 = new ClientCertAuthenticationMechanism(undertowEmbeddedServletContainerFactory0.accessLogPattern, boolean1);
      DeploymentInfo deploymentInfo2 = deploymentInfo1.addFirstAuthenticationMechanism(undertowEmbeddedServletContainerFactory0.accessLogPattern, clientCertAuthenticationMechanism0);
      DefaultClassIntrospector defaultClassIntrospector0 = DefaultClassIntrospector.INSTANCE;
      DeploymentInfo deploymentInfo3 = deploymentInfo2.setClassIntrospecter(defaultClassIntrospector0);
      Map<String, String> map0 = deploymentInfo3.getInitParameters();
      DeploymentInfo deploymentInfo4 = deploymentInfo3.setEagerFilterInit(boolean1);
      undertowEmbeddedServletContainerFactory0.configureMimeMappings(deploymentInfo4);
  }

  @Test(timeout = 11000)
  public void test28()  throws Throwable  {
      StandardHost standardHost0 = new StandardHost();
      File file0 = standardHost0.getConfigBaseFile();
      UndertowEmbeddedServletContainerFactory.JarResourceManager undertowEmbeddedServletContainerFactory_JarResourceManager0 = new UndertowEmbeddedServletContainerFactory.JarResourceManager(file0);
      ResourceChangeListener resourceChangeListener0 = mock(ResourceChangeListener.class, new ViolatedAssumptionAnswer());
      ResourceChangeListener resourceChangeListener1 = mock(ResourceChangeListener.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        undertowEmbeddedServletContainerFactory_JarResourceManager0.registerResourceChangeListener(resourceChangeListener1);
      } catch(IllegalArgumentException e) {
      }
  }

  @Test(timeout = 11000)
  public void test29()  throws Throwable  {
      String string0 = "";
      int int0 = (-7177);
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory(string0, int0);
      Integer integer0 = groovyjarjarasm.asm.Opcodes.NULL;
      undertowEmbeddedServletContainerFactory0.setIoThreads(integer0);
      DeploymentInfo deploymentInfo0 = new DeploymentInfo();
      int int1 = (-1176);
      DeploymentInfo deploymentInfo1 = deploymentInfo0.setMajorVersion(int1);
      DeploymentInfo deploymentInfo2 = deploymentInfo1.setDisplayName(string0);
      int int2 = (-891);
      DeploymentInfo deploymentInfo3 = deploymentInfo0.setMinorVersion(int2);
      String string1 = ">4TK%";
      DispatcherType dispatcherType0 = DispatcherType.ASYNC;
      DeploymentInfo deploymentInfo4 = deploymentInfo2.addFilterServletNameMapping(undertowEmbeddedServletContainerFactory0.accessLogPattern, string1, dispatcherType0);
      String[] stringArray0 = new String[4];
      stringArray0[0] = undertowEmbeddedServletContainerFactory0.accessLogPattern;
      boolean boolean0 = false;
      InMemorySessionPersistence inMemorySessionPersistence0 = new InMemorySessionPersistence();
      DeploymentInfo deploymentInfo5 = deploymentInfo0.setSessionPersistenceManager(inMemorySessionPersistence0);
      undertowEmbeddedServletContainerFactory0.setRegisterDefaultServlet(boolean0);
      stringArray0[1] = string1;
      stringArray0[2] = string1;
      List<HandlerWrapper> list0 = deploymentInfo1.getOuterHandlerChainWrappers();
      String string2 = "of";
      stringArray0[3] = string2;
      SynchronousQueue<FilterInfo> synchronousQueue0 = new SynchronousQueue<FilterInfo>();
      DeploymentInfo deploymentInfo6 = deploymentInfo1.addFilters((Collection<FilterInfo>) synchronousQueue0);
      DeploymentInfo deploymentInfo7 = deploymentInfo4.addWelcomePages(stringArray0);
      undertowEmbeddedServletContainerFactory0.configureErrorPages(deploymentInfo7);
      UndertowEmbeddedServletContainerFactory.JarResourceManager undertowEmbeddedServletContainerFactory_JarResourceManager0 = new UndertowEmbeddedServletContainerFactory.JarResourceManager();
      ResourceChangeListener resourceChangeListener0 = null;
      // Undeclared exception!
      try { 
        undertowEmbeddedServletContainerFactory_JarResourceManager0.removeResourceChangeListener(resourceChangeListener0);
      } catch(IllegalArgumentException e) {
      }
  }

  @Test(timeout = 11000)
  public void test30()  throws Throwable  {
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory();
      String string0 = "";
      PathResource pathResource0 = new PathResource(string0);
      File file0 = pathResource0.getFile();
      undertowEmbeddedServletContainerFactory0.setDocumentRoot(file0);
      ErrorPage errorPage0 = null;
      // Undeclared exception!
      try { 
        undertowEmbeddedServletContainerFactory0.getUndertowErrorPage(errorPage0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory", e);
      }
  }

  @Test(timeout = 11000)
  public void test31()  throws Throwable  {
      int int0 = 108;
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory(int0);
      Undertow.Builder undertow_Builder0 = Undertow.builder();
      Class<HtmlFrame> class0 = HtmlFrame.class;
      String string0 = "";
      Class<String> class1 = String.class;
      Option<String> option0 = Option.simple((Class<?>) class0, string0, class1);
      String string1 = "";
      Undertow.Builder undertow_Builder1 = undertow_Builder0.setSocketOption(option0, string1);
      ServletContextInitializer[] servletContextInitializerArray0 = new ServletContextInitializer[0];
      // Undeclared exception!
      try { 
        undertowEmbeddedServletContainerFactory0.createDeploymentManager(servletContextInitializerArray0);
      } catch(RuntimeException e) {
         //
         // java.security.AccessControlException: access denied (\"java.lang.RuntimePermission\" \"io.undertow.servlet.CREATE_INITIAL_HANDLER\")
         //
         verifyException("io.undertow.servlet.core.DeploymentManagerImpl", e);
      }
  }

  @Test(timeout = 11000)
  public void test32()  throws Throwable  {
      int int0 = 0;
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory(int0);
      Integer integer0 = groovyjarjarasm.asm.Opcodes.LONG;
      undertowEmbeddedServletContainerFactory0.setBuffersPerRegion(integer0);
      undertowEmbeddedServletContainerFactory0.setWorkerThreads(integer0);
      DeploymentInfo deploymentInfo0 = new DeploymentInfo();
      LinkedHashSet<io.undertow.servlet.api.ErrorPage> linkedHashSet0 = new LinkedHashSet<io.undertow.servlet.api.ErrorPage>();
      DeploymentInfo deploymentInfo1 = deploymentInfo0.addErrorPages((Collection<io.undertow.servlet.api.ErrorPage>) linkedHashSet0);
      URL[] uRLArray0 = null;
      // Undeclared exception!
      try { 
        URLClassLoader.newInstance(uRLArray0);
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 11000)
  public void test33()  throws Throwable  {
      int int0 = (-1);
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory(int0);
      Class<SyntaxException> class0 = SyntaxException.class;
      ErrorPage errorPage0 = new ErrorPage(class0, undertowEmbeddedServletContainerFactory0.accessLogPattern);
      io.undertow.servlet.api.ErrorPage errorPage1 = undertowEmbeddedServletContainerFactory0.getUndertowErrorPage(errorPage0);
  }

  @Test(timeout = 11000)
  public void test34()  throws Throwable  {
      UndertowEmbeddedServletContainerFactory.JarResourceManager undertowEmbeddedServletContainerFactory_JarResourceManager0 = new UndertowEmbeddedServletContainerFactory.JarResourceManager();
      boolean boolean0 = undertowEmbeddedServletContainerFactory_JarResourceManager0.isResourceChangeListenerSupported();
      int int0 = (-1983);
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory(int0);
      Class<Throwable> class0 = Throwable.class;
      ErrorPage errorPage0 = new ErrorPage(class0, undertowEmbeddedServletContainerFactory_JarResourceManager0.jarPath);
      io.undertow.servlet.api.ErrorPage errorPage1 = undertowEmbeddedServletContainerFactory0.getUndertowErrorPage(errorPage0);
      // Undeclared exception!
      try { 
        undertowEmbeddedServletContainerFactory0.createAccessLogDirectoryIfNecessary();
      } catch(IllegalStateException e) {
         //
         // Access log directory is not set
         //
         verifyException("org.springframework.util.Assert", e);
      }
  }

  @Test(timeout = 11000)
  public void test35()  throws Throwable  {
      String string0 = ",y``{27tTX";
      PathResource pathResource0 = new PathResource(string0);
      File file0 = pathResource0.getFile();
      UndertowEmbeddedServletContainerFactory.JarResourceManager undertowEmbeddedServletContainerFactory_JarResourceManager0 = new UndertowEmbeddedServletContainerFactory.JarResourceManager(file0);
      try { 
        undertowEmbeddedServletContainerFactory_JarResourceManager0.getResource(string0);
      } catch(MalformedURLException e) {
         //
         // no !/ in spec
         //
         verifyException("java.net.URL", e);
      }
  }

  @Test(timeout = 11000)
  public void test36()  throws Throwable  {
      int int0 = 2113;
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory(int0);
      UndertowBuilderCustomizer[] undertowBuilderCustomizerArray0 = null;
      // Undeclared exception!
      try { 
        undertowEmbeddedServletContainerFactory0.addBuilderCustomizers(undertowBuilderCustomizerArray0);
      } catch(IllegalArgumentException e) {
         //
         // Customizers must not be null
         //
         verifyException("org.springframework.util.Assert", e);
      }
  }

  @Test(timeout = 11000)
  public void test37()  throws Throwable  {
      String string0 = "]@i";
      int int0 = 9;
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory(int0);
      boolean boolean0 = false;
      undertowEmbeddedServletContainerFactory0.setAccessLogEnabled(boolean0);
      UndertowEmbeddedServletContainerFactory.Initializer undertowEmbeddedServletContainerFactory_Initializer0 = new UndertowEmbeddedServletContainerFactory.Initializer();
      DeploymentInfo deploymentInfo0 = new DeploymentInfo();
      ServletContainerImpl servletContainerImpl0 = new ServletContainerImpl();
      DeploymentManagerImpl deploymentManagerImpl0 = new DeploymentManagerImpl(deploymentInfo0, servletContainerImpl0);
      DeploymentImpl deploymentImpl0 = new DeploymentImpl(deploymentManagerImpl0, deploymentInfo0, servletContainerImpl0);
      ServletContextImpl servletContextImpl0 = deploymentImpl0.getServletContext();
      // Undeclared exception!
      try { 
        undertowEmbeddedServletContainerFactory_Initializer0.onStartup(undertowEmbeddedServletContainerFactory0.NO_CLASSES, servletContextImpl0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory$Initializer", e);
      }
  }

  @Test(timeout = 11000)
  public void test38()  throws Throwable  {
      int int0 = 245;
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory(int0);
      DefaultListableBeanFactory defaultListableBeanFactory0 = new DefaultListableBeanFactory();
      GenericApplicationContext genericApplicationContext0 = new GenericApplicationContext(defaultListableBeanFactory0);
      undertowEmbeddedServletContainerFactory0.setResourceLoader(genericApplicationContext0);
  }

  @Test(timeout = 11000)
  public void test39()  throws Throwable  {
      String string0 = "";
      int int0 = (-7177);
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory(string0, int0);
      Integer integer0 = groovyjarjarasm.asm.Opcodes.NULL;
      undertowEmbeddedServletContainerFactory0.setIoThreads(integer0);
      DeploymentInfo deploymentInfo0 = new DeploymentInfo();
      int int1 = (-1176);
      DeploymentInfo deploymentInfo1 = deploymentInfo0.setMajorVersion(int1);
      DeploymentInfo deploymentInfo2 = deploymentInfo1.setDisplayName(string0);
      int int2 = (-891);
      DeploymentInfo deploymentInfo3 = deploymentInfo0.setMinorVersion(int2);
      String string1 = ">4TK%";
      DispatcherType dispatcherType0 = DispatcherType.ASYNC;
      DeploymentInfo deploymentInfo4 = deploymentInfo2.addFilterServletNameMapping(undertowEmbeddedServletContainerFactory0.accessLogPattern, string1, dispatcherType0);
      String[] stringArray0 = new String[4];
      stringArray0[0] = undertowEmbeddedServletContainerFactory0.accessLogPattern;
      boolean boolean0 = false;
      InMemorySessionPersistence inMemorySessionPersistence0 = new InMemorySessionPersistence();
      DeploymentInfo deploymentInfo5 = deploymentInfo0.setSessionPersistenceManager(inMemorySessionPersistence0);
      undertowEmbeddedServletContainerFactory0.setRegisterDefaultServlet(boolean0);
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean1 = FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      stringArray0[1] = string1;
      stringArray0[2] = string1;
      List<HandlerWrapper> list0 = deploymentInfo1.getOuterHandlerChainWrappers();
      String string2 = "of";
      stringArray0[3] = string2;
      SynchronousQueue<FilterInfo> synchronousQueue0 = new SynchronousQueue<FilterInfo>();
      DeploymentInfo deploymentInfo6 = deploymentInfo1.addFilters((Collection<FilterInfo>) synchronousQueue0);
      DeploymentInfo deploymentInfo7 = deploymentInfo4.addWelcomePages(stringArray0);
      undertowEmbeddedServletContainerFactory0.configureErrorPages(deploymentInfo7);
      ResourceChangeListener resourceChangeListener0 = null;
      Undertow.Builder undertow_Builder0 = Undertow.builder();
      ServletContainerImpl servletContainerImpl0 = new ServletContainerImpl();
      DeploymentManager deploymentManager0 = servletContainerImpl0.getDeployment(stringArray0[0]);
      int int3 = 0;
      UndertowEmbeddedServletContainer undertowEmbeddedServletContainer0 = undertowEmbeddedServletContainerFactory0.getUndertowEmbeddedServletContainer(undertow_Builder0, deploymentManager0, int3);
  }

  @Test(timeout = 11000)
  public void test40()  throws Throwable  {
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory();
      boolean boolean0 = false;
      undertowEmbeddedServletContainerFactory0.setUseForwardHeaders(boolean0);
      Undertow.Builder undertow_Builder0 = null;
      ServletContainerImpl servletContainerImpl0 = new ServletContainerImpl();
      DeploymentInfo deploymentInfo0 = new DeploymentInfo();
      int int0 = (-770);
      InMemorySessionManagerFactory inMemorySessionManagerFactory0 = new InMemorySessionManagerFactory(int0);
      DeploymentInfo deploymentInfo1 = deploymentInfo0.setSessionManagerFactory(inMemorySessionManagerFactory0);
      SessionConfigWrapper sessionConfigWrapper0 = mock(SessionConfigWrapper.class, new ViolatedAssumptionAnswer());
      DeploymentInfo deploymentInfo2 = deploymentInfo1.setSessionConfigWrapper(sessionConfigWrapper0);
      DeploymentManager deploymentManager0 = servletContainerImpl0.addDeployment(deploymentInfo2);
      int int1 = (-1);
      UndertowEmbeddedServletContainer undertowEmbeddedServletContainer0 = undertowEmbeddedServletContainerFactory0.getUndertowEmbeddedServletContainer(undertow_Builder0, deploymentManager0, int1);
  }

  @Test(timeout = 11000)
  public void test41()  throws Throwable  {
      File file0 = null;
      int int0 = (-1138);
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory(int0);
      SessionConfig sessionConfig0 = new SessionConfig();
      Boolean boolean0 = sessionConfig0.getCookieSecure();
      undertowEmbeddedServletContainerFactory0.setDirectBuffers(boolean0);
      ArrayList<UndertowDeploymentInfoCustomizer> arrayList0 = new ArrayList<UndertowDeploymentInfoCustomizer>();
      undertowEmbeddedServletContainerFactory0.setDeploymentInfoCustomizers(arrayList0);
  }

  @Test(timeout = 11000)
  public void test42()  throws Throwable  {
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory();
      UndertowDeploymentInfoCustomizer[] undertowDeploymentInfoCustomizerArray0 = null;
      // Undeclared exception!
      try { 
        undertowEmbeddedServletContainerFactory0.addDeploymentInfoCustomizers(undertowDeploymentInfoCustomizerArray0);
      } catch(IllegalArgumentException e) {
         //
         // UndertowDeploymentInfoCustomizers must not be null
         //
         verifyException("org.springframework.util.Assert", e);
      }
  }

  @Test(timeout = 11000)
  public void test43()  throws Throwable  {
      int int0 = 1660;
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory(int0);
      JspServlet jspServlet0 = undertowEmbeddedServletContainerFactory0.getJspServlet();
      ServletDef servletDef0 = new ServletDef();
      String string0 = "0{:]U";
      jspServlet0.setClassName(string0);
      Map<String, String> map0 = servletDef0.getParameterMap();
      jspServlet0.setInitParameters(map0);
      TimeUnit timeUnit0 = TimeUnit.MILLISECONDS;
      undertowEmbeddedServletContainerFactory0.setSessionTimeout(int0, timeUnit0);
      jspServlet0.setInitParameters(map0);
      undertowEmbeddedServletContainerFactory0.setJspServlet(jspServlet0);
      boolean boolean0 = undertowEmbeddedServletContainerFactory0.isAccessLogEnabled();
      Integer integer0 = null;
      undertowEmbeddedServletContainerFactory0.setBuffersPerRegion(integer0);
      undertowEmbeddedServletContainerFactory0.setUseForwardHeaders(boolean0);
      undertowEmbeddedServletContainerFactory0.setUseForwardHeaders(boolean0);
      Ssl ssl0 = undertowEmbeddedServletContainerFactory0.getSsl();
      // Undeclared exception!
      try { 
        undertowEmbeddedServletContainerFactory0.getSslClientAuthMode(ssl0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory", e);
      }
  }

  @Test(timeout = 11000)
  public void test44()  throws Throwable  {
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory();
      UndertowEmbeddedServletContainerFactory.JarResourceManager undertowEmbeddedServletContainerFactory_JarResourceManager0 = new UndertowEmbeddedServletContainerFactory.JarResourceManager();
      boolean boolean0 = undertowEmbeddedServletContainerFactory_JarResourceManager0.isResourceChangeListenerSupported();
      Collection<UndertowDeploymentInfoCustomizer> collection0 = null;
      // Undeclared exception!
      try { 
        undertowEmbeddedServletContainerFactory0.setDeploymentInfoCustomizers(collection0);
      } catch(IllegalArgumentException e) {
         //
         // Customizers must not be null
         //
         verifyException("org.springframework.util.Assert", e);
      }
  }

  @Test(timeout = 11000)
  public void test45()  throws Throwable  {
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory();
      Collection<UndertowDeploymentInfoCustomizer> collection0 = undertowEmbeddedServletContainerFactory0.getDeploymentInfoCustomizers();
      UndertowEmbeddedServletContainerFactory.JarResourceManager undertowEmbeddedServletContainerFactory_JarResourceManager0 = new UndertowEmbeddedServletContainerFactory.JarResourceManager(undertowEmbeddedServletContainerFactory0.accessLogPattern);
      ResourceChangeListener resourceChangeListener0 = mock(ResourceChangeListener.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        undertowEmbeddedServletContainerFactory_JarResourceManager0.registerResourceChangeListener(resourceChangeListener0);
      } catch(IllegalArgumentException e) {
      }
  }

  @Test(timeout = 11000)
  public void test46()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("public");
      boolean boolean0 = FileSystemHandling.createFolder(evoSuiteFile0);
      ResourceChangeListener resourceChangeListener0 = mock(ResourceChangeListener.class, new ViolatedAssumptionAnswer());
      String string0 = "U;+qV0";
      ResourceChangeListener resourceChangeListener1 = null;
      int int0 = 905;
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory(int0);
      Ssl ssl0 = new Ssl();
      String string1 = "h1EFr4c";
      ssl0.setKeyStore(string1);
      SslClientAuthMode sslClientAuthMode0 = undertowEmbeddedServletContainerFactory0.getSslClientAuthMode(ssl0);
      ByteRangeHandler.Wrapper byteRangeHandler_Wrapper0 = new ByteRangeHandler.Wrapper(undertowEmbeddedServletContainerFactory0.accessLogEnabled);
      DeploymentInfo deploymentInfo0 = new DeploymentInfo();
      ServletContainerImpl servletContainerImpl0 = new ServletContainerImpl();
      ResourceManager resourceManager0 = undertowEmbeddedServletContainerFactory0.getDocumentRootResourceManager();
      DeploymentManagerImpl deploymentManagerImpl0 = new DeploymentManagerImpl(deploymentInfo0, servletContainerImpl0);
      DeploymentImpl deploymentImpl0 = new DeploymentImpl(deploymentManagerImpl0, deploymentInfo0, servletContainerImpl0);
      HttpHandler httpHandler0 = deploymentImpl0.getHandler();
      // Undeclared exception!
      try { 
        deploymentManagerImpl0.start();
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.undertow.servlet.core.DeploymentManagerImpl", e);
      }
  }

  @Test(timeout = 11000)
  public void test47()  throws Throwable  {
      int int0 = 6;
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory(int0);
      DeploymentInfo deploymentInfo0 = new DeploymentInfo();
      int int1 = 2755;
      DeploymentInfo deploymentInfo1 = deploymentInfo0.setMinorVersion(int1);
      ServletSessionConfig servletSessionConfig0 = null;
      DeploymentInfo deploymentInfo2 = deploymentInfo1.setServletSessionConfig(servletSessionConfig0);
      AuthenticationMode authenticationMode0 = AuthenticationMode.PRO_ACTIVE;
      DeploymentInfo deploymentInfo3 = deploymentInfo2.setAuthenticationMode(authenticationMode0);
      DeploymentInfo deploymentInfo4 = deploymentInfo3.setDeploymentName(undertowEmbeddedServletContainerFactory0.accessLogPattern);
      undertowEmbeddedServletContainerFactory0.configureAccessLog(deploymentInfo4);
  }

  @Test(timeout = 11000)
  public void test48()  throws Throwable  {
      ResourceChangeListener resourceChangeListener0 = null;
      String string0 = "";
      int int0 = 5;
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory(string0, int0);
      ServletContextInitializer[] servletContextInitializerArray0 = null;
      // Undeclared exception!
      try { 
        undertowEmbeddedServletContainerFactory0.getEmbeddedServletContainer(servletContextInitializerArray0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 11000)
  public void test49()  throws Throwable  {
      int int0 = 0;
      ServletContextInitializer[] servletContextInitializerArray0 = new ServletContextInitializer[0];
      UndertowEmbeddedServletContainerFactory.Initializer undertowEmbeddedServletContainerFactory_Initializer0 = new UndertowEmbeddedServletContainerFactory.Initializer(servletContextInitializerArray0);
      int int1 = 56;
      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress(int1);
      Server server0 = new Server(mockInetSocketAddress0);
      String string0 = null;
      JDBCSessionManager jDBCSessionManager0 = new JDBCSessionManager();
      SessionHandler sessionHandler0 = new SessionHandler(jDBCSessionManager0);
      ConstraintSecurityHandler constraintSecurityHandler0 = new ConstraintSecurityHandler();
      ServletHandler servletHandler0 = new ServletHandler();
      String string1 = null;
      ContextHandler contextHandler0 = null;
      try {
        contextHandler0 = new ContextHandler(sessionHandler0, string1);
      } catch(IllegalArgumentException e) {
         //
         // null contextPath
         //
         verifyException("org.eclipse.jetty.server.handler.ContextHandler", e);
      }
  }

  @Test(timeout = 11000)
  public void test50()  throws Throwable  {
      int int0 = (-531);
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory(int0);
      JspPropertyGroup jspPropertyGroup0 = new JspPropertyGroup();
      undertowEmbeddedServletContainerFactory0.setDirectBuffers((Boolean) undertowEmbeddedServletContainerFactory0.accessLogEnabled);
      DeploymentInfo deploymentInfo0 = new DeploymentInfo();
      LifecycleInterceptor lifecycleInterceptor0 = mock(LifecycleInterceptor.class, new ViolatedAssumptionAnswer());
      DeploymentInfo deploymentInfo1 = deploymentInfo0.addLifecycleInterceptor(lifecycleInterceptor0);
      LinkedTransferQueue<MimeMapping> linkedTransferQueue0 = new LinkedTransferQueue<MimeMapping>();
      DeploymentInfo deploymentInfo2 = deploymentInfo1.addMimeMappings((Collection<MimeMapping>) linkedTransferQueue0);
      DispatcherType dispatcherType0 = DispatcherType.ASYNC;
      DeploymentInfo deploymentInfo3 = deploymentInfo2.addFilterServletNameMapping(undertowEmbeddedServletContainerFactory0.accessLogPattern, undertowEmbeddedServletContainerFactory0.accessLogPattern, dispatcherType0);
      ByteRangeHandler.Wrapper byteRangeHandler_Wrapper0 = new ByteRangeHandler.Wrapper(undertowEmbeddedServletContainerFactory0.accessLogEnabled);
      DeploymentInfo deploymentInfo4 = deploymentInfo3.addInnerHandlerChainWrapper(byteRangeHandler_Wrapper0);
      ServletContextInitializer[] servletContextInitializerArray0 = new ServletContextInitializer[7];
      MockServletContext mockServletContext0 = new MockServletContext();
      String string0 = "tVJ[H y}}kH";
      // Undeclared exception!
      try { 
        mockServletContext0.getServlet(string0);
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.struts.mock.MockServletContext", e);
      }
  }

  @Test(timeout = 11000)
  public void test51()  throws Throwable  {
      String string0 = "";
      int int0 = 506;
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory(string0, int0);
      int int1 = 2596;
      DispatcherType dispatcherType0 = DispatcherType.FORWARD;
      ConcurrentHashMap<String, Object> concurrentHashMap0 = new ConcurrentHashMap<String, Object>();
      Integer integer0 = groovyjarjarasm.asm.Opcodes.FLOAT;
      undertowEmbeddedServletContainerFactory0.setIoThreads(integer0);
      LinkedTransferQueue<ServletInfo> linkedTransferQueue0 = new LinkedTransferQueue<ServletInfo>();
      SynchronousQueue<NotificationReceiver> synchronousQueue0 = new SynchronousQueue<NotificationReceiver>();
      Vector<NotificationReceiver> vector0 = new Vector<NotificationReceiver>(synchronousQueue0);
      String string1 = "JKS";
      undertowEmbeddedServletContainerFactory0.setAccessLogPattern(string1);
      Boolean boolean0 = null;
      undertowEmbeddedServletContainerFactory0.setDirectBuffers(boolean0);
      int int2 = (-1296);
      Undertow.Builder undertow_Builder0 = undertowEmbeddedServletContainerFactory0.createBuilder(int2);
      Undertow.Builder undertow_Builder1 = undertow_Builder0.setDirectBuffers(undertowEmbeddedServletContainerFactory0.accessLogEnabled);
      ServletContainerImpl servletContainerImpl0 = new ServletContainerImpl();
      DeploymentManager deploymentManager0 = servletContainerImpl0.getDeploymentByPath(undertowEmbeddedServletContainerFactory0.accessLogPattern);
      UndertowEmbeddedServletContainer undertowEmbeddedServletContainer0 = undertowEmbeddedServletContainerFactory0.getUndertowEmbeddedServletContainer(undertow_Builder1, deploymentManager0, int2);
      ClassLoader classLoader0 = undertowEmbeddedServletContainerFactory0.getServletClassLoader();
      int int3 = (-627);
      UndertowEmbeddedServletContainer undertowEmbeddedServletContainer1 = undertowEmbeddedServletContainerFactory0.getUndertowEmbeddedServletContainer(undertow_Builder0, deploymentManager0, int3);
  }

  @Test(timeout = 11000)
  public void test52()  throws Throwable  {
      boolean boolean0 = true;
      RoutingHandler routingHandler0 = new RoutingHandler(boolean0);
      int int0 = 2188;
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory(int0);
      Integer integer0 = Opcodes.TOP;
      undertowEmbeddedServletContainerFactory0.setWorkerThreads(integer0);
  }

  @Test(timeout = 11000)
  public void test53()  throws Throwable  {
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory();
      boolean boolean0 = true;
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      undertowEmbeddedServletContainerFactory0.setRegisterDefaultServlet(boolean0);
      // Undeclared exception!
      try { 
        undertowEmbeddedServletContainerFactory0.getDocumentRootResourceManager();
      } catch(RuntimeException e) {
         //
         // Unable to create tempDir. java.io.tmpdir is set to /tmp
         //
         verifyException("org.springframework.boot.context.embedded.AbstractEmbeddedServletContainerFactory", e);
      }
  }

  @Test(timeout = 11000)
  public void test54()  throws Throwable  {
      int int0 = 5957;
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory(int0);
      DeploymentInfo deploymentInfo0 = new DeploymentInfo();
      GroovyClassLoader groovyClassLoader0 = new GroovyClassLoader();
      GroovyClassLoader groovyClassLoader1 = new GroovyClassLoader(groovyClassLoader0);
      DeploymentInfo deploymentInfo1 = deploymentInfo0.setClassLoader(groovyClassLoader1);
      ServletSessionConfig servletSessionConfig0 = new ServletSessionConfig();
      DeploymentInfo deploymentInfo2 = deploymentInfo1.setServletSessionConfig(servletSessionConfig0);
      LifecycleInterceptor lifecycleInterceptor0 = mock(LifecycleInterceptor.class, new ViolatedAssumptionAnswer());
      DeploymentInfo deploymentInfo3 = deploymentInfo2.addLifecycleInterceptor(lifecycleInterceptor0);
      String[] stringArray0 = new String[4];
      stringArray0[0] = undertowEmbeddedServletContainerFactory0.accessLogPattern;
      String string0 = "pfC;>sHR+j";
      stringArray0[1] = string0;
      stringArray0[2] = servletSessionConfig0.DEFAULT_SESSION_ID;
      stringArray0[3] = undertowEmbeddedServletContainerFactory0.accessLogPattern;
      DeploymentInfo deploymentInfo4 = deploymentInfo3.addPrincipalVsRoleMappings(servletSessionConfig0.DEFAULT_SESSION_ID, stringArray0);
      ServletContextInitializer[] servletContextInitializerArray0 = null;
      // Undeclared exception!
      try { 
        undertowEmbeddedServletContainerFactory0.registerServletContainerInitializerToDriveServletContextInitializers(deploymentInfo4, servletContextInitializerArray0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 11000)
  public void test55()  throws Throwable  {
      int int0 = (-531);
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory(int0);
      JspPropertyGroup jspPropertyGroup0 = new JspPropertyGroup();
      Boolean boolean0 = jspPropertyGroup0.getScriptingInvalid();
      undertowEmbeddedServletContainerFactory0.setDirectBuffers(boolean0);
      DeploymentInfo deploymentInfo0 = new DeploymentInfo();
      LifecycleInterceptor lifecycleInterceptor0 = mock(LifecycleInterceptor.class, new ViolatedAssumptionAnswer());
      DeploymentInfo deploymentInfo1 = deploymentInfo0.addLifecycleInterceptor(lifecycleInterceptor0);
      LinkedTransferQueue<MimeMapping> linkedTransferQueue0 = new LinkedTransferQueue<MimeMapping>();
      DeploymentInfo deploymentInfo2 = deploymentInfo1.addMimeMappings((Collection<MimeMapping>) linkedTransferQueue0);
      DispatcherType dispatcherType0 = DispatcherType.ASYNC;
      DeploymentInfo deploymentInfo3 = deploymentInfo2.addFilterServletNameMapping(undertowEmbeddedServletContainerFactory0.accessLogPattern, undertowEmbeddedServletContainerFactory0.accessLogPattern, dispatcherType0);
      ByteRangeHandler.Wrapper byteRangeHandler_Wrapper0 = new ByteRangeHandler.Wrapper(undertowEmbeddedServletContainerFactory0.accessLogEnabled);
      DeploymentInfo deploymentInfo4 = deploymentInfo3.addInnerHandlerChainWrapper(byteRangeHandler_Wrapper0);
      ServletContextInitializer[] servletContextInitializerArray0 = new ServletContextInitializer[7];
      String string0 = "tVJ[H y}}kH";
      String[] stringArray0 = new String[2];
      stringArray0[0] = undertowEmbeddedServletContainerFactory0.accessLogPattern;
      ResourceManager resourceManager0 = undertowEmbeddedServletContainerFactory0.getDocumentRootResourceManager();
      stringArray0[1] = undertowEmbeddedServletContainerFactory0.accessLogPattern;
      boolean boolean1 = false;
      boolean boolean2 = false;
      Map<String, String> map0 = null;
      InitParameterConfiguringServletContextInitializer initParameterConfiguringServletContextInitializer0 = new InitParameterConfiguringServletContextInitializer(map0);
      servletContextInitializerArray0[3] = (ServletContextInitializer) initParameterConfiguringServletContextInitializer0;
      InitParameterConfiguringServletContextInitializer initParameterConfiguringServletContextInitializer1 = new InitParameterConfiguringServletContextInitializer(map0);
      servletContextInitializerArray0[4] = (ServletContextInitializer) initParameterConfiguringServletContextInitializer1;
      FilterRegistrationBean filterRegistrationBean0 = new FilterRegistrationBean();
      servletContextInitializerArray0[5] = (ServletContextInitializer) filterRegistrationBean0;
      undertowEmbeddedServletContainerFactory0.registerServletContainerInitializerToDriveServletContextInitializers(deploymentInfo4, servletContextInitializerArray0);
  }

  @Test(timeout = 11000)
  public void test56()  throws Throwable  {
      int int0 = 0;
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory(int0);
      TreeSet<ErrorPage> treeSet0 = new TreeSet<ErrorPage>();
      undertowEmbeddedServletContainerFactory0.setErrorPages(treeSet0);
      AnnotationConfigApplicationContext annotationConfigApplicationContext0 = new AnnotationConfigApplicationContext();
      undertowEmbeddedServletContainerFactory0.setResourceLoader(annotationConfigApplicationContext0);
      Undertow.Builder undertow_Builder0 = undertowEmbeddedServletContainerFactory0.createBuilder(int0);
      String string0 = "";
      UndertowEmbeddedServletContainerFactory.JarResourceManager undertowEmbeddedServletContainerFactory_JarResourceManager0 = new UndertowEmbeddedServletContainerFactory.JarResourceManager(string0);
      undertowEmbeddedServletContainerFactory_JarResourceManager0.close();
      String string1 = undertowEmbeddedServletContainerFactory0.getListenAddress();
      ClassLoader classLoader0 = undertowEmbeddedServletContainerFactory0.getServletClassLoader();
  }

  @Test(timeout = 11000)
  public void test57()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = FileSystemHandling.createFolder(evoSuiteFile0);
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory();
      Ssl ssl0 = undertowEmbeddedServletContainerFactory0.getSsl();
      int int0 = 2686;
      Undertow.Builder undertow_Builder0 = undertowEmbeddedServletContainerFactory0.createBuilder(int0);
      Undertow.Builder undertow_Builder1 = undertow_Builder0.addAjpListener(int0, undertowEmbeddedServletContainerFactory0.accessLogPattern);
      Undertow.Builder undertow_Builder2 = undertow_Builder1.setDirectBuffers(undertowEmbeddedServletContainerFactory0.useForwardHeaders);
      boolean boolean1 = false;
      Undertow.Builder undertow_Builder3 = undertow_Builder1.setDirectBuffers(boolean1);
      int int1 = (-2329);
      Undertow.Builder undertow_Builder4 = undertow_Builder2.setWorkerThreads(int1);
      // Undeclared exception!
      try { 
        undertowEmbeddedServletContainerFactory0.configureSsl(ssl0, int0, undertow_Builder4);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory", e);
      }
  }

  @Test(timeout = 11000)
  public void test58()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          String string0 = "";
          int int0 = (-1);
          UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory(string0, int0);
          Integer integer0 = groovyjarjarasm.asm.Opcodes.UNINITIALIZED_THIS;
          String string1 = "4'TJ*\\1.v#";
          NonEmptySequence nonEmptySequence0 = new NonEmptySequence();
          undertowEmbeddedServletContainerFactory0.builderCustomizers = (List<UndertowBuilderCustomizer>) nonEmptySequence0;
          String string2 = "\\yUa01";
          MockFile mockFile0 = new MockFile(string1, string2);
          undertowEmbeddedServletContainerFactory0.accessLogDirectory = (File) mockFile0;
          String string3 = "q87k";
          Integer integer1 = Integer.getInteger(string3);
          undertowEmbeddedServletContainerFactory0.setBuffersPerRegion(integer0);
          ResourceCollection resourceCollection0 = new ResourceCollection();
          String string4 = resourceCollection0.toString();
          ReadableByteChannel readableByteChannel0 = resourceCollection0.getReadableByteChannel();
          MockFile mockFile1 = new MockFile(mockFile0, string1);
          ClassLoader classLoader0 = undertowEmbeddedServletContainerFactory0.getServletClassLoader();
          undertowEmbeddedServletContainerFactory0.setAccessLogDirectory(mockFile1);
          Undertow.Builder undertow_Builder0 = undertowEmbeddedServletContainerFactory0.createBuilder(int0);
          ClassLoader classLoader1 = undertowEmbeddedServletContainerFactory0.getServletClassLoader();
          undertowEmbeddedServletContainerFactory0.createAccessLogDirectoryIfNecessary();
          // Undeclared exception!
          try { 
            undertowEmbeddedServletContainerFactory0.createWorker();
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.lang.RuntimePermission\" \"createXnioWorker\")
             // java.lang.Thread.getStackTrace(Thread.java:1559)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:434)
             // org.xnio.XnioWorker.<init>(XnioWorker.java:106)
             // org.xnio.nio.NioXnioWorker.<init>(NioXnioWorker.java:74)
             // org.xnio.nio.NioXnio.createWorker(NioXnio.java:202)
             // org.xnio.Xnio.createWorker(Xnio.java:449)
             // org.xnio.Xnio.createWorker(Xnio.java:436)
             // org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.createWorker(UndertowEmbeddedServletContainerFactory.java:316)
             // sun.reflect.GeneratedMethodAccessor72.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:257)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:169)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:220)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:307)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:213)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:55)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:748)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(11000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 11000)
  public void test59()  throws Throwable  {
      int int0 = 1;
      Random.setNextRandom(int0);
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory();
      Ssl ssl0 = new Ssl();
      SslClientAuthMode sslClientAuthMode0 = undertowEmbeddedServletContainerFactory0.getSslClientAuthMode(ssl0);
      ServletContextInitializer[] servletContextInitializerArray0 = null;
      // Undeclared exception!
      try { 
        undertowEmbeddedServletContainerFactory0.createDeploymentManager(servletContextInitializerArray0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 11000)
  public void test60()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      String string0 = "{SHA}";
      String string1 = "XX{^Z;:'Q~6o]:bH";
      boolean boolean0 = FileSystemHandling.appendLineToFile(evoSuiteFile0, string1);
      boolean boolean1 = FileSystemHandling.appendLineToFile(evoSuiteFile0, string0);
      int int0 = (-2149);
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory(int0);
      boolean boolean2 = false;
      Collection<UndertowBuilderCustomizer> collection0 = null;
      // Undeclared exception!
      try { 
        undertowEmbeddedServletContainerFactory0.setBuilderCustomizers(collection0);
      } catch(IllegalArgumentException e) {
         //
         // Customizers must not be null
         //
         verifyException("org.springframework.util.Assert", e);
      }
  }

  @Test(timeout = 11000)
  public void test61()  throws Throwable  {
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory();
      NonEmptySequence nonEmptySequence0 = new NonEmptySequence();
      undertowEmbeddedServletContainerFactory0.setInitializers(nonEmptySequence0);
      UndertowBuilderCustomizer[] undertowBuilderCustomizerArray0 = new UndertowBuilderCustomizer[0];
      List<UndertowDeploymentInfoCustomizer> list0 = null;
      undertowEmbeddedServletContainerFactory0.deploymentInfoCustomizers = list0;
      undertowEmbeddedServletContainerFactory0.addBuilderCustomizers(undertowBuilderCustomizerArray0);
      UndertowDeploymentInfoCustomizer[] undertowDeploymentInfoCustomizerArray0 = new UndertowDeploymentInfoCustomizer[0];
      // Undeclared exception!
      try { 
        undertowEmbeddedServletContainerFactory0.addDeploymentInfoCustomizers(undertowDeploymentInfoCustomizerArray0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory", e);
      }
  }
}
