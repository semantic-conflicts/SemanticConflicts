/*
 * This file was automatically generated by EvoSuite
 * Thu Apr 30 03:34:32 GMT 2020
 */

package org.springframework.boot.context.embedded.undertow;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import groovy.lang.Sequence;
import groovyjarjarasm.asm.Opcodes;
import io.undertow.Undertow;
import io.undertow.security.api.AuthenticationMode;
import io.undertow.security.idm.IdentityManager;
import io.undertow.security.impl.ClientCertAuthenticationMechanism;
import io.undertow.security.impl.InMemorySingleSignOnManager;
import io.undertow.security.impl.SingleSignOnAuthenticationMechanism;
import io.undertow.server.HandlerWrapper;
import io.undertow.server.HttpHandler;
import io.undertow.server.RoutingHandler;
import io.undertow.server.handlers.ByteRangeHandler;
import io.undertow.server.handlers.resource.Resource;
import io.undertow.server.handlers.resource.ResourceChangeListener;
import io.undertow.server.handlers.resource.ResourceManager;
import io.undertow.server.session.SessionListener;
import io.undertow.servlet.ServletExtension;
import io.undertow.servlet.Servlets;
import io.undertow.servlet.api.DeploymentInfo;
import io.undertow.servlet.api.DeploymentManager;
import io.undertow.servlet.api.ErrorPage;
import io.undertow.servlet.api.LifecycleInterceptor;
import io.undertow.servlet.api.ListenerInfo;
import io.undertow.servlet.api.MetricsCollector;
import io.undertow.servlet.api.MimeMapping;
import io.undertow.servlet.api.SecurityConstraint;
import io.undertow.servlet.api.ServletContainer;
import io.undertow.servlet.api.ServletContainerInitializerInfo;
import io.undertow.servlet.api.ServletStackTraces;
import io.undertow.servlet.core.DefaultAuthorizationManager;
import io.undertow.servlet.core.DeploymentManagerImpl;
import io.undertow.servlet.core.ServletContainerImpl;
import io.undertow.servlet.handlers.DefaultServlet;
import io.undertow.servlet.util.ImmediateInstanceFactory;
import io.undertow.servlet.util.InMemorySessionPersistence;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.OutputStream;
import java.io.PrintStream;
import java.lang.annotation.Annotation;
import java.net.MalformedURLException;
import java.net.URL;
import java.net.URLClassLoader;
import java.nio.file.Path;
import java.security.AccessControlContext;
import java.security.CodeSource;
import java.security.KeyStore;
import java.security.NoSuchAlgorithmException;
import java.security.PermissionCollection;
import java.security.Principal;
import java.security.PrivateKey;
import java.security.ProtectionDomain;
import java.security.Provider;
import java.security.cert.Certificate;
import java.sql.SQLDataException;
import java.sql.SQLTimeoutException;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.ListIterator;
import java.util.Map;
import java.util.Set;
import java.util.Stack;
import java.util.TreeSet;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.LinkedBlockingQueue;
import java.util.concurrent.PriorityBlockingQueue;
import java.util.concurrent.TimeUnit;
import javax.management.remote.JMXPrincipal;
import javax.net.ssl.KeyManager;
import javax.net.ssl.SSLContext;
import javax.net.ssl.TrustManager;
import javax.net.ssl.X509KeyManager;
import javax.persistence.ForeignKey;
import javax.persistence.MapKeyJoinColumn;
import javax.security.auth.Subject;
import javax.servlet.DispatcherType;
import javax.servlet.Filter;
import javax.servlet.Servlet;
import javax.servlet.ServletException;
import javax.swing.JLayeredPane;
import javax.swing.plaf.synth.SynthToolBarUI;
import javax.swing.table.DefaultTableModel;
import liquibase.integration.servlet.LiquibaseStatusServlet;
import org.apache.catalina.AccessLog;
import org.apache.catalina.core.StandardEngine;
import org.apache.catalina.core.StandardServer;
import org.apache.catalina.filters.AddDefaultCharsetFilter;
import org.apache.catalina.filters.CorsFilter;
import org.apache.catalina.filters.SetCharacterEncodingFilter;
import org.apache.catalina.loader.ParallelWebappClassLoader;
import org.apache.catalina.loader.WebappClassLoader;
import org.apache.catalina.startup.FailedContext;
import org.apache.catalina.startup.VersionLoggerListener;
import org.apache.juli.logging.Log;
import org.apache.tomcat.util.descriptor.web.JspPropertyGroup;
import org.apache.tomcat.util.descriptor.web.ServletDef;
import org.dom4j.bean.BeanAttributeList;
import org.dom4j.bean.BeanElement;
import org.dom4j.bean.BeanMetaData;
import org.eclipse.jetty.server.handler.ContextHandler;
import org.eclipse.jetty.server.session.HashSessionManager;
import org.eclipse.jetty.servlet.ServletContextHandler;
import org.eclipse.jetty.util.ssl.AliasedX509ExtendedKeyManager;
import org.eclipse.jetty.util.ssl.AliasedX509KeyManager;
import org.eclipse.jetty.webapp.WebAppContext;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.security.MockSecureRandom;
import org.evosuite.runtime.mock.javax.naming.EvoNamingContext;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.hibernate.cfg.annotations.MapKeyJoinColumnDelegator;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.support.DefaultListableBeanFactory;
import org.springframework.boot.context.embedded.Compression;
import org.springframework.boot.context.embedded.DelegatingFilterProxyRegistrationBean;
import org.springframework.boot.context.embedded.EmbeddedServletContainer;
import org.springframework.boot.context.embedded.FilterRegistrationBean;
import org.springframework.boot.context.embedded.ServletContextInitializer;
import org.springframework.boot.context.embedded.ServletListenerRegistrationBean;
import org.springframework.boot.context.embedded.ServletRegistrationBean;
import org.springframework.boot.context.embedded.Ssl;
import org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer;
import org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer;
import org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainer;
import org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory;
import org.springframework.context.support.FileSystemXmlApplicationContext;
import org.springframework.context.support.GenericApplicationContext;
import org.springframework.context.support.GenericGroovyApplicationContext;
import org.springframework.core.io.ClassPathResource;
import org.springframework.core.io.PathResource;
import org.springframework.http.HttpStatus;
import org.springframework.mock.web.MockServletContext;
import org.springframework.util.LinkedMultiValueMap;
import org.springframework.web.context.support.AnnotationConfigWebApplicationContext;
import org.springframework.web.context.support.StaticWebApplicationContext;
import org.springframework.web.filter.RequestContextFilter;
import org.xnio.Option;
import org.xnio.SslClientAuthMode;
import org.xnio.XnioWorker;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class UndertowEmbeddedServletContainerFactory_ESTest extends UndertowEmbeddedServletContainerFactory_ESTest_scaffolding {

  @Test(timeout = 11000)
  public void test00()  throws Throwable  {
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory();
      Integer integer0 = Opcodes.TOP;
      EvoNamingContext evoNamingContext0 = EvoNamingContext.getInstance();
      Integer integer1 = Opcodes.INTEGER;
      undertowEmbeddedServletContainerFactory0.setBufferSize(integer0);
      ResourceManager resourceManager0 = undertowEmbeddedServletContainerFactory0.getDocumentRootResourceManager();
      ResourceManager resourceManager1 = undertowEmbeddedServletContainerFactory0.getDocumentRootResourceManager();
      String string0 = undertowEmbeddedServletContainerFactory0.getListenAddress();
      int int0 = (-392);
      Undertow.Builder undertow_Builder0 = undertowEmbeddedServletContainerFactory0.createBuilder(int0);
      ServletContextInitializer[] servletContextInitializerArray0 = new ServletContextInitializer[8];
      SynthToolBarUI synthToolBarUI0 = null;
      ServletListenerRegistrationBean<SynthToolBarUI> servletListenerRegistrationBean0 = null;
      try {
        servletListenerRegistrationBean0 = new ServletListenerRegistrationBean<SynthToolBarUI>(synthToolBarUI0);
      } catch(IllegalArgumentException e) {
         //
         // Listener must not be null
         //
         verifyException("org.springframework.util.Assert", e);
      }
  }

  @Test(timeout = 11000)
  public void test01()  throws Throwable  {
      int int0 = 0;
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory(int0);
      Undertow.Builder undertow_Builder0 = null;
      DeploymentInfo deploymentInfo0 = new DeploymentInfo();
      ErrorPage[] errorPageArray0 = new ErrorPage[9];
      org.springframework.boot.context.embedded.ErrorPage errorPage0 = new org.springframework.boot.context.embedded.ErrorPage(undertowEmbeddedServletContainerFactory0.accessLogPattern);
      ErrorPage errorPage1 = undertowEmbeddedServletContainerFactory0.getUndertowErrorPage(errorPage0);
      errorPageArray0[0] = errorPage1;
      String string0 = "[Te?d>Lr>A2W";
      int int1 = 4957;
      ErrorPage errorPage2 = new ErrorPage(string0, int1);
      errorPageArray0[1] = errorPage2;
      String string1 = null;
      Class<Throwable> class0 = Throwable.class;
      ErrorPage errorPage3 = new ErrorPage(string1, class0);
      errorPageArray0[2] = errorPage3;
      int int2 = 0;
      ErrorPage errorPage4 = new ErrorPage(string1, int2);
      errorPageArray0[3] = errorPage4;
      ErrorPage errorPage5 = new ErrorPage(string0);
      errorPageArray0[4] = errorPage5;
      int int3 = 0;
      ErrorPage errorPage6 = new ErrorPage(undertowEmbeddedServletContainerFactory0.accessLogPattern, int3);
      errorPageArray0[5] = errorPage6;
      ErrorPage errorPage7 = undertowEmbeddedServletContainerFactory0.getUndertowErrorPage(errorPage0);
      errorPageArray0[6] = errorPage7;
      String string2 = "";
      ErrorPage errorPage8 = new ErrorPage(string2);
      errorPageArray0[7] = errorPage8;
      ErrorPage errorPage9 = undertowEmbeddedServletContainerFactory0.getUndertowErrorPage(errorPage0);
      errorPageArray0[8] = errorPage9;
      DeploymentInfo deploymentInfo1 = deploymentInfo0.addErrorPages(errorPageArray0);
      boolean boolean0 = true;
      DeploymentInfo deploymentInfo2 = deploymentInfo1.setAllowNonStandardWrappers(boolean0);
      ServletContainerImpl servletContainerImpl0 = new ServletContainerImpl();
      DeploymentManagerImpl deploymentManagerImpl0 = new DeploymentManagerImpl(deploymentInfo2, servletContainerImpl0);
      int int4 = (-1);
      UndertowEmbeddedServletContainer undertowEmbeddedServletContainer0 = undertowEmbeddedServletContainerFactory0.getUndertowEmbeddedServletContainer(undertow_Builder0, deploymentManagerImpl0, int4);
      UndertowEmbeddedServletContainerFactory.Initializer undertowEmbeddedServletContainerFactory_Initializer0 = new UndertowEmbeddedServletContainerFactory.Initializer();
      WebAppContext webAppContext0 = new WebAppContext();
      WebAppContext.Context webAppContext_Context0 = webAppContext0.new Context();
      String string3 = "2\\D}NQF;9{9Ds";
      // Undeclared exception!
      try { 
        webAppContext_Context0.getContext(string3);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.eclipse.jetty.server.handler.ContextHandler$Context", e);
      }
  }

  @Test(timeout = 11000)
  public void test02()  throws Throwable  {
      String string0 = "";
      int int0 = (-3);
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory(string0, int0);
      ClassLoader classLoader0 = undertowEmbeddedServletContainerFactory0.getServletClassLoader();
      Ssl ssl0 = new Ssl();
      SslClientAuthMode sslClientAuthMode0 = undertowEmbeddedServletContainerFactory0.getSslClientAuthMode(ssl0);
      ResourceManager resourceManager0 = undertowEmbeddedServletContainerFactory0.getDocumentRootResourceManager();
      UndertowDeploymentInfoCustomizer[] undertowDeploymentInfoCustomizerArray0 = null;
      // Undeclared exception!
      try { 
        undertowEmbeddedServletContainerFactory0.addDeploymentInfoCustomizers(undertowDeploymentInfoCustomizerArray0);
      } catch(IllegalArgumentException e) {
         //
         // UndertowDeploymentInfoCustomizers must not be null
         //
         verifyException("org.springframework.util.Assert", e);
      }
  }

  @Test(timeout = 11000)
  public void test03()  throws Throwable  {
      UndertowEmbeddedServletContainerFactory.JarResourceManager undertowEmbeddedServletContainerFactory_JarResourceManager0 = new UndertowEmbeddedServletContainerFactory.JarResourceManager();
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory();
      DeploymentInfo deploymentInfo0 = new DeploymentInfo();
      String string0 = "-i(?";
      Class<Throwable> class0 = Throwable.class;
      ErrorPage errorPage0 = new ErrorPage(string0, class0);
      DeploymentInfo deploymentInfo1 = deploymentInfo0.addErrorPage(errorPage0);
      String string1 = "";
      DeploymentInfo deploymentInfo2 = deploymentInfo1.setDisplayName(string1);
      ServletStackTraces servletStackTraces0 = ServletStackTraces.ALL;
      DeploymentInfo deploymentInfo3 = deploymentInfo2.setServletStackTraces(servletStackTraces0);
      boolean boolean0 = true;
      DeploymentInfo deploymentInfo4 = deploymentInfo2.setDenyUncoveredHttpMethods(boolean0);
      List<HandlerWrapper> list0 = deploymentInfo3.getInitialHandlerChainWrappers();
      ByteRangeHandler.Wrapper byteRangeHandler_Wrapper0 = new ByteRangeHandler.Wrapper(undertowEmbeddedServletContainerFactory0.useForwardHeaders);
      DeploymentInfo deploymentInfo5 = deploymentInfo3.addInitialHandlerChainWrapper(byteRangeHandler_Wrapper0);
      String string2 = "vQz;%IlO|^(L~";
      DeploymentInfo deploymentInfo6 = deploymentInfo5.setContextPath(string2);
      LifecycleInterceptor lifecycleInterceptor0 = null;
      DeploymentInfo deploymentInfo7 = deploymentInfo5.addLifecycleInterceptor(lifecycleInterceptor0);
      undertowEmbeddedServletContainerFactory0.configureMimeMappings(deploymentInfo5);
      ResourceManager resourceManager0 = undertowEmbeddedServletContainerFactory0.getDocumentRootResourceManager();
      ClassLoader classLoader0 = undertowEmbeddedServletContainerFactory0.getServletClassLoader();
      StaticWebApplicationContext staticWebApplicationContext0 = new StaticWebApplicationContext();
      undertowEmbeddedServletContainerFactory0.setResourceLoader(staticWebApplicationContext0);
      // Undeclared exception!
      try { 
        undertowEmbeddedServletContainerFactory0.getTrustManagers();
      } catch(IllegalStateException e) {
         //
         // java.lang.NullPointerException
         //
         verifyException("org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory", e);
      }
  }

  @Test(timeout = 11000)
  public void test04()  throws Throwable  {
      int int0 = 0;
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory(int0);
      boolean boolean0 = true;
      undertowEmbeddedServletContainerFactory0.accessLogEnabled = boolean0;
      FailedContext failedContext0 = new FailedContext();
      File file0 = undertowEmbeddedServletContainerFactory0.accessLogDirectory;
      undertowEmbeddedServletContainerFactory0.accessLogDirectory = file0;
      ServletContextInitializer[] servletContextInitializerArray0 = new ServletContextInitializer[0];
      // Undeclared exception!
      try { 
        undertowEmbeddedServletContainerFactory0.getEmbeddedServletContainer(servletContextInitializerArray0);
      } catch(RuntimeException e) {
         //
         // java.security.AccessControlException: access denied (\"java.lang.RuntimePermission\" \"io.undertow.servlet.CREATE_INITIAL_HANDLER\")
         //
         verifyException("io.undertow.servlet.core.DeploymentManagerImpl", e);
      }
  }

  @Test(timeout = 11000)
  public void test05()  throws Throwable  {
      String string0 = "Parent class loader: {} ";
      UndertowEmbeddedServletContainerFactory.JarResourceManager undertowEmbeddedServletContainerFactory_JarResourceManager0 = new UndertowEmbeddedServletContainerFactory.JarResourceManager(string0);
      int int0 = 0;
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory(int0);
      boolean boolean0 = false;
      undertowEmbeddedServletContainerFactory0.setRegisterDefaultServlet(boolean0);
      ServletContainer servletContainer0 = Servlets.defaultContainer();
      // Undeclared exception!
      try { 
        undertowEmbeddedServletContainerFactory0.getKeyManagers();
      } catch(IllegalStateException e) {
         //
         // java.lang.NullPointerException
         //
         verifyException("org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory", e);
      }
  }

  @Test(timeout = 11000)
  public void test06()  throws Throwable  {
      int int0 = 1;
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory(int0);
      Integer integer0 = null;
      undertowEmbeddedServletContainerFactory0.setWorkerThreads(integer0);
      undertowEmbeddedServletContainerFactory0.setIoThreads(integer0);
      String string0 = "O";
      ClassPathResource classPathResource0 = new ClassPathResource(string0);
      try { 
        classPathResource0.getFile();
      } catch(FileNotFoundException e) {
         //
         // class path resource [O] cannot be resolved to URL because it does not exist
         //
         verifyException("org.springframework.core.io.ClassPathResource", e);
      }
  }

  @Test(timeout = 11000)
  public void test07()  throws Throwable  {
      int int0 = 0;
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory(int0);
      Collection<UndertowDeploymentInfoCustomizer> collection0 = undertowEmbeddedServletContainerFactory0.getDeploymentInfoCustomizers();
      Collection<UndertowBuilderCustomizer> collection1 = undertowEmbeddedServletContainerFactory0.getBuilderCustomizers();
      HttpStatus httpStatus0 = HttpStatus.NOT_MODIFIED;
      String string0 = "7[RbGOF/h#a;<5vf3";
      org.springframework.boot.context.embedded.ErrorPage errorPage0 = new org.springframework.boot.context.embedded.ErrorPage(httpStatus0, string0);
      String string1 = errorPage0.getExceptionName();
      ErrorPage errorPage1 = undertowEmbeddedServletContainerFactory0.getUndertowErrorPage(errorPage0);
      UndertowEmbeddedServletContainerFactory.JarResourceManager undertowEmbeddedServletContainerFactory_JarResourceManager0 = new UndertowEmbeddedServletContainerFactory.JarResourceManager(undertowEmbeddedServletContainerFactory0.accessLogPattern);
      undertowEmbeddedServletContainerFactory_JarResourceManager0.close();
      String string2 = undertowEmbeddedServletContainerFactory0.getListenAddress();
      boolean boolean0 = undertowEmbeddedServletContainerFactory0.isAccessLogEnabled();
      Collection<UndertowBuilderCustomizer> collection2 = undertowEmbeddedServletContainerFactory0.getBuilderCustomizers();
      boolean boolean1 = false;
      undertowEmbeddedServletContainerFactory0.setUseForwardHeaders(boolean1);
      ResourceManager resourceManager0 = undertowEmbeddedServletContainerFactory0.getDocumentRootResourceManager();
  }

  @Test(timeout = 11000)
  public void test08()  throws Throwable  {
      int int0 = 0;
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory(int0);
      Collection<UndertowDeploymentInfoCustomizer> collection0 = undertowEmbeddedServletContainerFactory0.getDeploymentInfoCustomizers();
      Collection<UndertowBuilderCustomizer> collection1 = undertowEmbeddedServletContainerFactory0.getBuilderCustomizers();
      HttpStatus httpStatus0 = HttpStatus.NOT_MODIFIED;
      String string0 = "7[RbGOF/h#a;<5vf3";
      HttpStatus httpStatus1 = null;
      org.springframework.boot.context.embedded.ErrorPage errorPage0 = new org.springframework.boot.context.embedded.ErrorPage(httpStatus1, string0);
      String string1 = errorPage0.getExceptionName();
      ErrorPage errorPage1 = undertowEmbeddedServletContainerFactory0.getUndertowErrorPage(errorPage0);
      Integer integer0 = Opcodes.TOP;
      undertowEmbeddedServletContainerFactory0.setBuffersPerRegion(integer0);
      UndertowEmbeddedServletContainerFactory.JarResourceManager undertowEmbeddedServletContainerFactory_JarResourceManager0 = new UndertowEmbeddedServletContainerFactory.JarResourceManager(undertowEmbeddedServletContainerFactory0.accessLogPattern);
      String string2 = "\\1SZ%5n2laYiQR";
      undertowEmbeddedServletContainerFactory_JarResourceManager0.jarPath = string2;
      undertowEmbeddedServletContainerFactory_JarResourceManager0.close();
      String string3 = undertowEmbeddedServletContainerFactory0.getListenAddress();
      boolean boolean0 = undertowEmbeddedServletContainerFactory_JarResourceManager0.isResourceChangeListenerSupported();
      Collection<UndertowBuilderCustomizer> collection2 = undertowEmbeddedServletContainerFactory0.getBuilderCustomizers();
      boolean boolean1 = false;
      undertowEmbeddedServletContainerFactory0.setUseForwardHeaders(boolean1);
      // Undeclared exception!
      try { 
        undertowEmbeddedServletContainerFactory0.createAccessLogDirectoryIfNecessary();
      } catch(IllegalStateException e) {
         //
         // Access log directory is not set
         //
         verifyException("org.springframework.util.Assert", e);
      }
  }

  @Test(timeout = 11000)
  public void test09()  throws Throwable  {
      int int0 = (-1);
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory(int0);
      HttpHandler httpHandler0 = null;
      // Undeclared exception!
      try { 
        undertowEmbeddedServletContainerFactory0.createAccessLogHandler(httpHandler0);
      } catch(IllegalStateException e) {
         //
         // Access log directory is not set
         //
         verifyException("org.springframework.util.Assert", e);
      }
  }

  @Test(timeout = 11000)
  public void test10()  throws Throwable  {
      int int0 = (-2447);
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory(int0);
      FailedContext failedContext0 = new FailedContext();
      File file0 = failedContext0.getCatalinaBase();
      undertowEmbeddedServletContainerFactory0.setAccessLogDirectory(file0);
      Ssl ssl0 = undertowEmbeddedServletContainerFactory0.getSsl();
      int int1 = 810;
      Undertow.Builder undertow_Builder0 = null;
      // Undeclared exception!
      try { 
        undertowEmbeddedServletContainerFactory0.configureSsl(ssl0, int1, undertow_Builder0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory", e);
      }
  }

  @Test(timeout = 11000)
  public void test11()  throws Throwable  {
      String string0 = "";
      UndertowEmbeddedServletContainerFactory.JarResourceManager undertowEmbeddedServletContainerFactory_JarResourceManager0 = new UndertowEmbeddedServletContainerFactory.JarResourceManager(string0);
      String string1 = "*4h.D)y$ %!W~r";
      try { 
        undertowEmbeddedServletContainerFactory_JarResourceManager0.getResource(string1);
      } catch(MalformedURLException e) {
         //
         // no !/ in spec
         //
         verifyException("java.net.URL", e);
      }
  }

  @Test(timeout = 11000)
  public void test12()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          int int0 = (-1);
          UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory(int0);
          // Undeclared exception!
          try { 
            undertowEmbeddedServletContainerFactory0.createWorker();
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.lang.RuntimePermission\" \"createXnioWorker\")
             // java.lang.Thread.getStackTrace(Thread.java:1559)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:434)
             // org.xnio.XnioWorker.<init>(XnioWorker.java:106)
             // org.xnio.nio.NioXnioWorker.<init>(NioXnioWorker.java:74)
             // org.xnio.nio.NioXnio.createWorker(NioXnio.java:202)
             // org.xnio.Xnio.createWorker(Xnio.java:449)
             // org.xnio.Xnio.createWorker(Xnio.java:436)
             // org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.createWorker(UndertowEmbeddedServletContainerFactory.java:316)
             // sun.reflect.GeneratedMethodAccessor63.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:257)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:169)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:220)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:307)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:213)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:55)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:748)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(11000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 11000)
  public void test13()  throws Throwable  {
      String string0 = "";
      int int0 = 0;
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory(string0, int0);
      boolean boolean0 = false;
      undertowEmbeddedServletContainerFactory0.setRegisterJspServlet(boolean0);
      org.springframework.boot.context.embedded.ErrorPage errorPage0 = null;
      // Undeclared exception!
      try { 
        undertowEmbeddedServletContainerFactory0.getUndertowErrorPage(errorPage0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory", e);
      }
  }

  @Test(timeout = 11000)
  public void test14()  throws Throwable  {
      int int0 = 0;
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory(int0);
      DefaultListableBeanFactory defaultListableBeanFactory0 = new DefaultListableBeanFactory();
      String[] stringArray0 = new String[9];
      stringArray0[0] = undertowEmbeddedServletContainerFactory0.accessLogPattern;
      HttpStatus httpStatus0 = HttpStatus.SERVICE_UNAVAILABLE;
      org.springframework.boot.context.embedded.ErrorPage errorPage0 = new org.springframework.boot.context.embedded.ErrorPage(httpStatus0, stringArray0[0]);
      ErrorPage errorPage1 = undertowEmbeddedServletContainerFactory0.getUndertowErrorPage(errorPage0);
      // Undeclared exception!
      try { 
        undertowEmbeddedServletContainerFactory0.getKeyManagers();
      } catch(IllegalStateException e) {
         //
         // java.lang.NullPointerException
         //
         verifyException("org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory", e);
      }
  }

  @Test(timeout = 11000)
  public void test15()  throws Throwable  {
      String string0 = "Customizers must not be null";
      int int0 = 1;
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = null;
      try {
        undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory(string0, int0);
      } catch(IllegalArgumentException e) {
         //
         // ContextPath must start with '/' and not end with '/'
         //
         verifyException("org.springframework.boot.context.embedded.AbstractConfigurableEmbeddedServletContainer", e);
      }
  }

  @Test(timeout = 11000)
  public void test16()  throws Throwable  {
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory();
      int int0 = 236;
      Undertow.Builder undertow_Builder0 = undertowEmbeddedServletContainerFactory0.createBuilder(int0);
  }

  @Test(timeout = 11000)
  public void test17()  throws Throwable  {
      String string0 = "POb4/3:m#";
      UndertowEmbeddedServletContainerFactory.JarResourceManager undertowEmbeddedServletContainerFactory_JarResourceManager0 = new UndertowEmbeddedServletContainerFactory.JarResourceManager(string0);
      boolean boolean0 = undertowEmbeddedServletContainerFactory_JarResourceManager0.isResourceChangeListenerSupported();
  }

  @Test(timeout = 11000)
  public void test18()  throws Throwable  {
      String string0 = "";
      UndertowEmbeddedServletContainerFactory.JarResourceManager undertowEmbeddedServletContainerFactory_JarResourceManager0 = new UndertowEmbeddedServletContainerFactory.JarResourceManager(string0);
      int int0 = (-2430);
      String string1 = "";
      try { 
        undertowEmbeddedServletContainerFactory_JarResourceManager0.getResource(string1);
      } catch(MalformedURLException e) {
         //
         // no !/ in spec
         //
         verifyException("java.net.URL", e);
      }
  }

  @Test(timeout = 11000)
  public void test19()  throws Throwable  {
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory();
      Integer integer0 = undertowEmbeddedServletContainerFactory0.workerThreads;
      undertowEmbeddedServletContainerFactory0.setBuffersPerRegion(integer0);
      ClassLoader classLoader0 = undertowEmbeddedServletContainerFactory0.getServletClassLoader();
  }

  @Test(timeout = 11000)
  public void test20()  throws Throwable  {
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory();
      String string0 = undertowEmbeddedServletContainerFactory0.getListenAddress();
      RoutingHandler routingHandler0 = new RoutingHandler(undertowEmbeddedServletContainerFactory0.useForwardHeaders);
      // Undeclared exception!
      try { 
        undertowEmbeddedServletContainerFactory0.createAccessLogHandler(routingHandler0);
      } catch(IllegalStateException e) {
         //
         // Access log directory is not set
         //
         verifyException("org.springframework.util.Assert", e);
      }
  }

  @Test(timeout = 11000)
  public void test21()  throws Throwable  {
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory();
      LinkedBlockingQueue<UndertowDeploymentInfoCustomizer> linkedBlockingQueue0 = new LinkedBlockingQueue<UndertowDeploymentInfoCustomizer>();
      undertowEmbeddedServletContainerFactory0.setDeploymentInfoCustomizers(linkedBlockingQueue0);
      UndertowDeploymentInfoCustomizer[] undertowDeploymentInfoCustomizerArray0 = new UndertowDeploymentInfoCustomizer[0];
      undertowEmbeddedServletContainerFactory0.addDeploymentInfoCustomizers(undertowDeploymentInfoCustomizerArray0);
  }

  @Test(timeout = 11000)
  public void test22()  throws Throwable  {
      int int0 = 306;
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory(int0);
      ClassLoader classLoader0 = undertowEmbeddedServletContainerFactory0.getServletClassLoader();
      DeploymentInfo deploymentInfo0 = null;
      // Undeclared exception!
      try { 
        undertowEmbeddedServletContainerFactory0.configureMimeMappings(deploymentInfo0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory", e);
      }
  }

  @Test(timeout = 11000)
  public void test23()  throws Throwable  {
      String string0 = null;
      UndertowEmbeddedServletContainerFactory.JarResourceManager undertowEmbeddedServletContainerFactory_JarResourceManager0 = new UndertowEmbeddedServletContainerFactory.JarResourceManager(string0);
      int int0 = (-3099);
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory(int0);
      // Undeclared exception!
      try { 
        undertowEmbeddedServletContainerFactory0.createAccessLogDirectoryIfNecessary();
      } catch(IllegalStateException e) {
         //
         // Access log directory is not set
         //
         verifyException("org.springframework.util.Assert", e);
      }
  }

  @Test(timeout = 11000)
  public void test24()  throws Throwable  {
      String string0 = null;
      int int0 = (-1);
      Collection<UndertowDeploymentInfoCustomizer> collection0 = null;
      UndertowEmbeddedServletContainerFactory.JarResourceManager undertowEmbeddedServletContainerFactory_JarResourceManager0 = new UndertowEmbeddedServletContainerFactory.JarResourceManager();
      String string1 = "9wv42ymLk._";
      try { 
        undertowEmbeddedServletContainerFactory_JarResourceManager0.getResource(string1);
      } catch(MalformedURLException e) {
         //
         // no !/ in spec
         //
         verifyException("java.net.URL", e);
      }
  }

  @Test(timeout = 11000)
  public void test25()  throws Throwable  {
      StandardServer standardServer0 = new StandardServer();
      File file0 = standardServer0.getCatalinaHome();
      UndertowEmbeddedServletContainerFactory.JarResourceManager undertowEmbeddedServletContainerFactory_JarResourceManager0 = null;
      try {
        undertowEmbeddedServletContainerFactory_JarResourceManager0 = new UndertowEmbeddedServletContainerFactory.JarResourceManager(file0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory$JarResourceManager", e);
      }
  }

  @Test(timeout = 11000)
  public void test26()  throws Throwable  {
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory();
      JspPropertyGroup jspPropertyGroup0 = new JspPropertyGroup();
      undertowEmbeddedServletContainerFactory0.setDirectBuffers((Boolean) undertowEmbeddedServletContainerFactory0.accessLogEnabled);
  }

  @Test(timeout = 11000)
  public void test27()  throws Throwable  {
      int int0 = 0;
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory(int0);
      // Undeclared exception!
      try { 
        undertowEmbeddedServletContainerFactory0.getKeyManagers();
      } catch(IllegalStateException e) {
         //
         // java.lang.NullPointerException
         //
         verifyException("org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory", e);
      }
  }

  @Test(timeout = 11000)
  public void test28()  throws Throwable  {
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory();
      boolean boolean0 = true;
      undertowEmbeddedServletContainerFactory0.setAccessLogEnabled(boolean0);
      ServletContextInitializer[] servletContextInitializerArray0 = new ServletContextInitializer[0];
      // Undeclared exception!
      try { 
        undertowEmbeddedServletContainerFactory0.createDeploymentManager(servletContextInitializerArray0);
      } catch(RuntimeException e) {
         //
         // java.security.AccessControlException: access denied (\"java.lang.RuntimePermission\" \"io.undertow.servlet.CREATE_INITIAL_HANDLER\")
         //
         verifyException("io.undertow.servlet.core.DeploymentManagerImpl", e);
      }
  }

  @Test(timeout = 11000)
  public void test29()  throws Throwable  {
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory();
      Integer integer0 = Opcodes.TOP;
      Integer integer1 = Integer.getInteger(undertowEmbeddedServletContainerFactory0.accessLogPattern, undertowEmbeddedServletContainerFactory0.ioThreads);
      undertowEmbeddedServletContainerFactory0.setBufferSize(integer0);
      ResourceManager resourceManager0 = undertowEmbeddedServletContainerFactory0.getDocumentRootResourceManager();
      ResourceManager resourceManager1 = undertowEmbeddedServletContainerFactory0.getDocumentRootResourceManager();
      String string0 = undertowEmbeddedServletContainerFactory0.getListenAddress();
      int int0 = (-359);
      Undertow.Builder undertow_Builder0 = undertowEmbeddedServletContainerFactory0.createBuilder(int0);
      ServletContextInitializer[] servletContextInitializerArray0 = new ServletContextInitializer[8];
      SynthToolBarUI synthToolBarUI0 = null;
      ServletListenerRegistrationBean<SynthToolBarUI> servletListenerRegistrationBean0 = null;
      try {
        servletListenerRegistrationBean0 = new ServletListenerRegistrationBean<SynthToolBarUI>(synthToolBarUI0);
      } catch(IllegalArgumentException e) {
         //
         // Listener must not be null
         //
         verifyException("org.springframework.util.Assert", e);
      }
  }

  @Test(timeout = 11000)
  public void test30()  throws Throwable  {
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory();
      StandardEngine standardEngine0 = new StandardEngine();
      File file0 = standardEngine0.getCatalinaHome();
      undertowEmbeddedServletContainerFactory0.setAccessLogDirectory(file0);
      UndertowBuilderCustomizer[] undertowBuilderCustomizerArray0 = new UndertowBuilderCustomizer[5];
      UndertowBuilderCustomizer undertowBuilderCustomizer0 = mock(UndertowBuilderCustomizer.class, new ViolatedAssumptionAnswer());
      undertowBuilderCustomizerArray0[0] = undertowBuilderCustomizer0;
      undertowBuilderCustomizerArray0[1] = undertowBuilderCustomizerArray0[0];
      undertowBuilderCustomizerArray0[2] = undertowBuilderCustomizerArray0[1];
      undertowBuilderCustomizerArray0[3] = undertowBuilderCustomizerArray0[2];
      undertowBuilderCustomizerArray0[4] = undertowBuilderCustomizerArray0[3];
      undertowEmbeddedServletContainerFactory0.addBuilderCustomizers(undertowBuilderCustomizerArray0);
  }

  @Test(timeout = 11000)
  public void test31()  throws Throwable  {
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory();
      ServletContainer servletContainer0 = Servlets.defaultContainer();
      int int0 = 976;
      ArrayList<ServletContextInitializer> arrayList0 = new ArrayList<ServletContextInitializer>();
      undertowEmbeddedServletContainerFactory0.setInitializers(arrayList0);
      undertowEmbeddedServletContainerFactory0.setSessionTimeout(int0);
      String string0 = "";
      undertowEmbeddedServletContainerFactory0.setAccessLogPattern(string0);
  }

  @Test(timeout = 11000)
  public void test32()  throws Throwable  {
      int int0 = (-3717);
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory(int0);
      ServletContextInitializer[] servletContextInitializerArray0 = null;
      // Undeclared exception!
      try { 
        undertowEmbeddedServletContainerFactory0.createDeploymentManager(servletContextInitializerArray0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 11000)
  public void test33()  throws Throwable  {
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory();
      ServletContextInitializer[] servletContextInitializerArray0 = new ServletContextInitializer[1];
      ServletListenerRegistrationBean<SynthToolBarUI> servletListenerRegistrationBean0 = new ServletListenerRegistrationBean<SynthToolBarUI>();
      servletContextInitializerArray0[0] = (ServletContextInitializer) servletListenerRegistrationBean0;
      // Undeclared exception!
      try { 
        undertowEmbeddedServletContainerFactory0.getEmbeddedServletContainer(servletContextInitializerArray0);
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: Failed to add listener 'null' to servlet context
         //
         verifyException("io.undertow.servlet.core.DeploymentManagerImpl", e);
      }
  }

  @Test(timeout = 11000)
  public void test34()  throws Throwable  {
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory();
      ServletContextInitializer[] servletContextInitializerArray0 = new ServletContextInitializer[0];
      // Undeclared exception!
      try { 
        undertowEmbeddedServletContainerFactory0.createDeploymentManager(servletContextInitializerArray0);
      } catch(RuntimeException e) {
         //
         // java.security.AccessControlException: access denied (\"java.lang.RuntimePermission\" \"io.undertow.servlet.CREATE_INITIAL_HANDLER\")
         //
         verifyException("io.undertow.servlet.core.DeploymentManagerImpl", e);
      }
  }

  @Test(timeout = 11000)
  public void test35()  throws Throwable  {
      String string0 = "";
      int int0 = 0;
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory(string0, int0);
      UndertowDeploymentInfoCustomizer[] undertowDeploymentInfoCustomizerArray0 = null;
      // Undeclared exception!
      try { 
        undertowEmbeddedServletContainerFactory0.addDeploymentInfoCustomizers(undertowDeploymentInfoCustomizerArray0);
      } catch(IllegalArgumentException e) {
         //
         // UndertowDeploymentInfoCustomizers must not be null
         //
         verifyException("org.springframework.util.Assert", e);
      }
  }

  @Test(timeout = 11000)
  public void test36()  throws Throwable  {
      int int0 = 0;
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory(int0);
      Integer integer0 = Opcodes.DOUBLE;
      undertowEmbeddedServletContainerFactory0.setBuffersPerRegion(integer0);
      // Undeclared exception!
      try { 
        undertowEmbeddedServletContainerFactory0.getTrustManagers();
      } catch(IllegalStateException e) {
         //
         // java.lang.NullPointerException
         //
         verifyException("org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory", e);
      }
  }

  @Test(timeout = 11000)
  public void test37()  throws Throwable  {
      int int0 = 4734;
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory(int0);
      Integer integer0 = Opcodes.UNINITIALIZED_THIS;
      int int1 = 0;
      int int2 = 2551;
      int int3 = Integer.max(int1, int2);
      undertowEmbeddedServletContainerFactory0.setWorkerThreads(integer0);
      UndertowEmbeddedServletContainerFactory.Initializer undertowEmbeddedServletContainerFactory_Initializer0 = new UndertowEmbeddedServletContainerFactory.Initializer();
      ServletContainerImpl servletContainerImpl0 = new ServletContainerImpl();
      DeploymentInfo deploymentInfo0 = new DeploymentInfo();
      ListenerInfo[] listenerInfoArray0 = new ListenerInfo[9];
      Class<SynthToolBarUI> class0 = SynthToolBarUI.class;
      Class<SynthToolBarUI> class1 = SynthToolBarUI.class;
      ListenerInfo listenerInfo0 = new ListenerInfo(class1);
      listenerInfoArray0[1] = listenerInfo0;
      Class<SynthToolBarUI> class2 = SynthToolBarUI.class;
      SynthToolBarUI synthToolBarUI0 = new SynthToolBarUI();
      ImmediateInstanceFactory<SynthToolBarUI> immediateInstanceFactory0 = new ImmediateInstanceFactory<SynthToolBarUI>(synthToolBarUI0);
      ListenerInfo listenerInfo1 = null;
      try {
        listenerInfo1 = new ListenerInfo(class2, immediateInstanceFactory0);
      } catch(IllegalArgumentException e) {
      }
  }

  @Test(timeout = 11000)
  public void test38()  throws Throwable  {
      String string0 = "";
      int int0 = 0;
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory(string0, int0);
      boolean boolean0 = true;
      undertowEmbeddedServletContainerFactory0.setUseForwardHeaders(boolean0);
      String string1 = undertowEmbeddedServletContainerFactory0.getListenAddress();
  }

  @Test(timeout = 11000)
  public void test39()  throws Throwable  {
      int int0 = 0;
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory(int0);
      UndertowDeploymentInfoCustomizer[] undertowDeploymentInfoCustomizerArray0 = new UndertowDeploymentInfoCustomizer[1];
      UndertowDeploymentInfoCustomizer undertowDeploymentInfoCustomizer0 = mock(UndertowDeploymentInfoCustomizer.class, new ViolatedAssumptionAnswer());
      undertowDeploymentInfoCustomizerArray0[0] = undertowDeploymentInfoCustomizer0;
      undertowEmbeddedServletContainerFactory0.addDeploymentInfoCustomizers(undertowDeploymentInfoCustomizerArray0);
      Ssl ssl0 = undertowEmbeddedServletContainerFactory0.getSsl();
      int int1 = 24;
      Undertow.Builder undertow_Builder0 = Undertow.builder();
      Undertow.Builder undertow_Builder1 = undertow_Builder0.addHttpListener(int1, undertowEmbeddedServletContainerFactory0.accessLogPattern);
      int int2 = 0;
      Undertow.Builder undertow_Builder2 = undertow_Builder1.setIoThreads(int2);
      int int3 = (-1);
      KeyManager[] keyManagerArray0 = new KeyManager[4];
      String string0 = "Recursive call to appender ";
      X509KeyManager x509KeyManager0 = null;
      AliasedX509ExtendedKeyManager aliasedX509ExtendedKeyManager0 = new AliasedX509ExtendedKeyManager(string0, x509KeyManager0);
      keyManagerArray0[0] = (KeyManager) aliasedX509ExtendedKeyManager0;
      AliasedX509KeyManager aliasedX509KeyManager0 = new AliasedX509KeyManager(string0, aliasedX509ExtendedKeyManager0);
      keyManagerArray0[1] = (KeyManager) aliasedX509KeyManager0;
      String string1 = "oM\"qy,$[*d<|P%+z^'}";
      AliasedX509KeyManager aliasedX509KeyManager1 = new AliasedX509KeyManager(string1, aliasedX509KeyManager0);
      keyManagerArray0[2] = (KeyManager) aliasedX509KeyManager1;
      String string2 = "application/x-sv4crc";
      AliasedX509ExtendedKeyManager aliasedX509ExtendedKeyManager1 = new AliasedX509ExtendedKeyManager(string2, aliasedX509KeyManager1);
      keyManagerArray0[3] = (KeyManager) aliasedX509ExtendedKeyManager1;
      TrustManager[] trustManagerArray0 = null;
      RoutingHandler routingHandler0 = new RoutingHandler();
      Undertow.Builder undertow_Builder3 = undertow_Builder2.addHttpsListener(int3, undertowEmbeddedServletContainerFactory0.accessLogPattern, keyManagerArray0, trustManagerArray0, (HttpHandler) routingHandler0);
      Class<Integer> class0 = Integer.class;
      Class<JMXPrincipal> class1 = JMXPrincipal.class;
      Option<JMXPrincipal> option0 = Option.simple((Class<?>) class0, string1, class1);
      JMXPrincipal jMXPrincipal0 = new JMXPrincipal(string0);
      Undertow.Builder undertow_Builder4 = undertow_Builder3.setWorkerOption(option0, jMXPrincipal0);
      // Undeclared exception!
      try { 
        undertowEmbeddedServletContainerFactory0.configureSsl(ssl0, int1, undertow_Builder4);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory", e);
      }
  }

  @Test(timeout = 11000)
  public void test40()  throws Throwable  {
      UndertowEmbeddedServletContainerFactory.JarResourceManager undertowEmbeddedServletContainerFactory_JarResourceManager0 = new UndertowEmbeddedServletContainerFactory.JarResourceManager();
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory();
      Class<Throwable> class0 = Throwable.class;
      boolean boolean0 = false;
      undertowEmbeddedServletContainerFactory0.accessLogEnabled = boolean0;
      ResourceChangeListener resourceChangeListener0 = null;
      // Undeclared exception!
      try { 
        undertowEmbeddedServletContainerFactory_JarResourceManager0.removeResourceChangeListener(resourceChangeListener0);
      } catch(IllegalArgumentException e) {
      }
  }

  @Test(timeout = 11000)
  public void test41()  throws Throwable  {
      int int0 = 0;
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory(int0);
      Undertow.Builder undertow_Builder0 = Undertow.builder();
      Class<Object> class0 = Object.class;
      String string0 = "java";
      Class<UndertowEmbeddedServletContainerFactory.Initializer> class1 = UndertowEmbeddedServletContainerFactory.Initializer.class;
      Option<UndertowEmbeddedServletContainerFactory.Initializer> option0 = Option.simple((Class<?>) class0, string0, class1);
      ServletContextInitializer[] servletContextInitializerArray0 = null;
      UndertowEmbeddedServletContainerFactory.Initializer undertowEmbeddedServletContainerFactory_Initializer0 = new UndertowEmbeddedServletContainerFactory.Initializer(servletContextInitializerArray0);
      Undertow.Builder undertow_Builder1 = undertow_Builder0.setServerOption(option0, undertowEmbeddedServletContainerFactory_Initializer0);
      ServletContainerImpl servletContainerImpl0 = new ServletContainerImpl();
      Option.SetBuilder option_SetBuilder0 = Option.setBuilder();
      DeploymentManager deploymentManager0 = servletContainerImpl0.getDeployment(string0);
      int int1 = 290;
      UndertowEmbeddedServletContainer undertowEmbeddedServletContainer0 = undertowEmbeddedServletContainerFactory0.getUndertowEmbeddedServletContainer(undertow_Builder1, deploymentManager0, int1);
      DeploymentInfo deploymentInfo0 = new DeploymentInfo();
      AuthenticationMode authenticationMode0 = AuthenticationMode.PRO_ACTIVE;
      DeploymentInfo deploymentInfo1 = deploymentInfo0.setAuthenticationMode(authenticationMode0);
      String string1 = "`<4yy27_[y Ya83";
      DeploymentInfo deploymentInfo2 = deploymentInfo1.setContextPath(string1);
      String[] stringArray0 = new String[3];
      stringArray0[0] = undertowEmbeddedServletContainerFactory0.accessLogPattern;
      stringArray0[1] = string0;
      stringArray0[2] = undertowEmbeddedServletContainerFactory0.accessLogPattern;
      DeploymentInfo deploymentInfo3 = deploymentInfo2.addWelcomePages(stringArray0);
      Collection<String> collection0 = null;
      // Undeclared exception!
      try { 
        deploymentInfo3.addWelcomePages(collection0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 11000)
  public void test42()  throws Throwable  {
      int int0 = 0;
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory(int0);
      Collection<UndertowDeploymentInfoCustomizer> collection0 = null;
      // Undeclared exception!
      try { 
        undertowEmbeddedServletContainerFactory0.setDeploymentInfoCustomizers(collection0);
      } catch(IllegalArgumentException e) {
         //
         // Customizers must not be null
         //
         verifyException("org.springframework.util.Assert", e);
      }
  }

  @Test(timeout = 11000)
  public void test43()  throws Throwable  {
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory();
      Ssl ssl0 = null;
      // Undeclared exception!
      try { 
        undertowEmbeddedServletContainerFactory0.getSslClientAuthMode(ssl0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory", e);
      }
  }

  @Test(timeout = 11000)
  public void test44()  throws Throwable  {
      String string0 = "";
      UndertowEmbeddedServletContainerFactory.JarResourceManager undertowEmbeddedServletContainerFactory_JarResourceManager0 = new UndertowEmbeddedServletContainerFactory.JarResourceManager(string0);
      int int0 = (-1);
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory(string0, int0);
      Collection<UndertowDeploymentInfoCustomizer> collection0 = undertowEmbeddedServletContainerFactory0.getDeploymentInfoCustomizers();
  }

  @Test(timeout = 11000)
  public void test45()  throws Throwable  {
      int int0 = (-728);
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory(int0);
      UndertowEmbeddedServletContainerFactory.JarResourceManager undertowEmbeddedServletContainerFactory_JarResourceManager0 = new UndertowEmbeddedServletContainerFactory.JarResourceManager(undertowEmbeddedServletContainerFactory0.accessLogPattern);
      ResourceChangeListener resourceChangeListener0 = mock(ResourceChangeListener.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        undertowEmbeddedServletContainerFactory_JarResourceManager0.registerResourceChangeListener(resourceChangeListener0);
      } catch(IllegalArgumentException e) {
      }
  }

  @Test(timeout = 11000)
  public void test46()  throws Throwable  {
      int int0 = 0;
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory(int0);
      Compression compression0 = new Compression();
      int int1 = 315;
      compression0.setMinResponseSize(int1);
      undertowEmbeddedServletContainerFactory0.setCompression(compression0);
      Collection<UndertowBuilderCustomizer> collection0 = undertowEmbeddedServletContainerFactory0.getBuilderCustomizers();
      Integer integer0 = groovyjarjarasm.asm.Opcodes.UNINITIALIZED_THIS;
      undertowEmbeddedServletContainerFactory0.setIoThreads(integer0);
      boolean boolean0 = undertowEmbeddedServletContainerFactory0.isAccessLogEnabled();
  }

  @Test(timeout = 11000)
  public void test47()  throws Throwable  {
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory();
      HttpStatus httpStatus0 = HttpStatus.CREATED;
      String string0 = "org.dom4j.dom.DOMCDATA";
      Stack<ServletContextInitializer> stack0 = new Stack<ServletContextInitializer>();
      undertowEmbeddedServletContainerFactory0.setInitializers(stack0);
      org.springframework.boot.context.embedded.ErrorPage errorPage0 = new org.springframework.boot.context.embedded.ErrorPage(httpStatus0, string0);
      String string1 = errorPage0.getExceptionName();
      ServletContextInitializer[] servletContextInitializerArray0 = null;
      // Undeclared exception!
      try { 
        undertowEmbeddedServletContainerFactory0.getEmbeddedServletContainer(servletContextInitializerArray0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 11000)
  public void test48()  throws Throwable  {
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory();
      String string0 = "{'M|lOR";
      MockFile mockFile0 = new MockFile(string0, string0);
      Path path0 = mockFile0.toPath();
      PathResource pathResource0 = new PathResource(path0);
      File file0 = pathResource0.getFile();
      undertowEmbeddedServletContainerFactory0.setAccessLogDirectory(file0);
      Collection<UndertowBuilderCustomizer> collection0 = undertowEmbeddedServletContainerFactory0.getBuilderCustomizers();
      UndertowDeploymentInfoCustomizer[] undertowDeploymentInfoCustomizerArray0 = new UndertowDeploymentInfoCustomizer[1];
      UndertowDeploymentInfoCustomizer undertowDeploymentInfoCustomizer0 = mock(UndertowDeploymentInfoCustomizer.class, new ViolatedAssumptionAnswer());
      undertowDeploymentInfoCustomizerArray0[0] = undertowDeploymentInfoCustomizer0;
      undertowEmbeddedServletContainerFactory0.addDeploymentInfoCustomizers(undertowDeploymentInfoCustomizerArray0);
      ServletContextInitializer[] servletContextInitializerArray0 = new ServletContextInitializer[3];
      ServletRegistrationBean[] servletRegistrationBeanArray0 = new ServletRegistrationBean[1];
      LiquibaseStatusServlet liquibaseStatusServlet0 = new LiquibaseStatusServlet();
      String[] stringArray0 = new String[6];
      stringArray0[0] = undertowEmbeddedServletContainerFactory0.accessLogPattern;
      stringArray0[1] = string0;
      stringArray0[2] = undertowEmbeddedServletContainerFactory0.accessLogPattern;
      stringArray0[3] = undertowEmbeddedServletContainerFactory0.accessLogPattern;
      stringArray0[4] = undertowEmbeddedServletContainerFactory0.accessLogPattern;
      stringArray0[5] = undertowEmbeddedServletContainerFactory0.accessLogPattern;
      ServletRegistrationBean servletRegistrationBean0 = new ServletRegistrationBean(liquibaseStatusServlet0, stringArray0);
      servletRegistrationBeanArray0[0] = servletRegistrationBean0;
      DelegatingFilterProxyRegistrationBean delegatingFilterProxyRegistrationBean0 = new DelegatingFilterProxyRegistrationBean(string0, servletRegistrationBeanArray0);
      servletContextInitializerArray0[0] = (ServletContextInitializer) delegatingFilterProxyRegistrationBean0;
      RequestContextFilter requestContextFilter0 = new RequestContextFilter();
      FilterRegistrationBean filterRegistrationBean0 = new FilterRegistrationBean(requestContextFilter0, servletRegistrationBeanArray0);
      servletContextInitializerArray0[1] = (ServletContextInitializer) filterRegistrationBean0;
      DelegatingFilterProxyRegistrationBean delegatingFilterProxyRegistrationBean1 = null;
      try {
        delegatingFilterProxyRegistrationBean1 = new DelegatingFilterProxyRegistrationBean(undertowEmbeddedServletContainerFactory0.accessLogPattern, servletRegistrationBeanArray0);
      } catch(IllegalArgumentException e) {
         //
         // TargetBeanName must not be null or empty
         //
         verifyException("org.springframework.util.Assert", e);
      }
  }

  @Test(timeout = 11000)
  public void test49()  throws Throwable  {
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory();
      DeploymentInfo deploymentInfo0 = null;
      // Undeclared exception!
      try { 
        undertowEmbeddedServletContainerFactory0.configureAccessLog(deploymentInfo0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory", e);
      }
  }

  @Test(timeout = 11000)
  public void test50()  throws Throwable  {
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory();
      int int0 = (-3154);
      Undertow.Builder undertow_Builder0 = undertowEmbeddedServletContainerFactory0.createBuilder(int0);
      DeploymentInfo deploymentInfo0 = new DeploymentInfo();
      TreeSet<SecurityConstraint> treeSet0 = new TreeSet<SecurityConstraint>();
      DeploymentInfo deploymentInfo1 = deploymentInfo0.addSecurityConstraints((Collection<SecurityConstraint>) treeSet0);
      DeploymentInfo deploymentInfo2 = deploymentInfo1.addWelcomePage(undertowEmbeddedServletContainerFactory0.accessLogPattern);
      LifecycleInterceptor lifecycleInterceptor0 = mock(LifecycleInterceptor.class, new ViolatedAssumptionAnswer());
      List<SessionListener> list0 = deploymentInfo2.getSessionListeners();
      DeploymentInfo deploymentInfo3 = deploymentInfo2.addLifecycleInterceptor(lifecycleInterceptor0);
      DeploymentInfo deploymentInfo4 = deploymentInfo2.clearLoginMethods();
      DeploymentInfo deploymentInfo5 = deploymentInfo4.setContextPath(undertowEmbeddedServletContainerFactory0.accessLogPattern);
      DefaultAuthorizationManager defaultAuthorizationManager0 = DefaultAuthorizationManager.INSTANCE;
      DeploymentInfo deploymentInfo6 = deploymentInfo5.setAuthorizationManager(defaultAuthorizationManager0);
      undertowEmbeddedServletContainerFactory0.configureAccessLog(deploymentInfo5);
      boolean boolean0 = true;
      undertowEmbeddedServletContainerFactory0.setUseForwardHeaders(boolean0);
      Integer integer0 = Opcodes.FLOAT;
      int int1 = (-3047);
      int int2 = Integer.max(int1, int0);
      undertowEmbeddedServletContainerFactory0.setWorkerThreads(integer0);
      StandardEngine standardEngine0 = new StandardEngine();
      File file0 = standardEngine0.getCatalinaHome();
      undertowEmbeddedServletContainerFactory0.setAccessLogDirectory(file0);
      String string0 = "3";
      UndertowEmbeddedServletContainerFactory.JarResourceManager undertowEmbeddedServletContainerFactory_JarResourceManager0 = new UndertowEmbeddedServletContainerFactory.JarResourceManager(string0);
      try { 
        undertowEmbeddedServletContainerFactory_JarResourceManager0.getResource(undertowEmbeddedServletContainerFactory0.accessLogPattern);
      } catch(MalformedURLException e) {
         //
         // no !/ in spec
         //
         verifyException("java.net.URL", e);
      }
  }

  @Test(timeout = 11000)
  public void test51()  throws Throwable  {
      String string0 = "*,h1KD^!|o{";
      String string1 = "2^NP'}`]Lg&=i0";
      StandardEngine standardEngine0 = new StandardEngine();
      File file0 = standardEngine0.getCatalinaBase();
      Log log0 = standardEngine0.getLogger();
      File file1 = MockFile.createTempFile(string0, string1, file0);
      UndertowEmbeddedServletContainerFactory.JarResourceManager undertowEmbeddedServletContainerFactory_JarResourceManager0 = new UndertowEmbeddedServletContainerFactory.JarResourceManager(file1);
      ResourceChangeListener resourceChangeListener0 = mock(ResourceChangeListener.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        undertowEmbeddedServletContainerFactory_JarResourceManager0.removeResourceChangeListener(resourceChangeListener0);
      } catch(IllegalArgumentException e) {
      }
  }

  @Test(timeout = 11000)
  public void test52()  throws Throwable  {
      int int0 = (-124);
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory(int0);
      Collection<UndertowDeploymentInfoCustomizer> collection0 = undertowEmbeddedServletContainerFactory0.getDeploymentInfoCustomizers();
      undertowEmbeddedServletContainerFactory0.setDeploymentInfoCustomizers(collection0);
      LinkedMultiValueMap<Annotation, UndertowBuilderCustomizer> linkedMultiValueMap0 = new LinkedMultiValueMap<Annotation, UndertowBuilderCustomizer>();
      MapKeyJoinColumn mapKeyJoinColumn0 = mock(MapKeyJoinColumn.class, new ViolatedAssumptionAnswer());
      doReturn((ForeignKey) null).when(mapKeyJoinColumn0).foreignKey();
      MapKeyJoinColumnDelegator mapKeyJoinColumnDelegator0 = new MapKeyJoinColumnDelegator(mapKeyJoinColumn0);
      ForeignKey foreignKey0 = mapKeyJoinColumnDelegator0.foreignKey();
      List<UndertowBuilderCustomizer> list0 = linkedMultiValueMap0.put((Annotation) foreignKey0, undertowEmbeddedServletContainerFactory0.builderCustomizers);
      // Undeclared exception!
      try { 
        undertowEmbeddedServletContainerFactory0.setBuilderCustomizers(list0);
      } catch(IllegalArgumentException e) {
         //
         // Customizers must not be null
         //
         verifyException("org.springframework.util.Assert", e);
      }
  }

  @Test(timeout = 11000)
  public void test53()  throws Throwable  {
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory();
      ArrayDeque<UndertowBuilderCustomizer> arrayDeque0 = new ArrayDeque<UndertowBuilderCustomizer>();
      String string0 = "";
      boolean boolean0 = false;
      undertowEmbeddedServletContainerFactory0.setAccessLogEnabled(boolean0);
      UndertowBuilderCustomizer undertowBuilderCustomizer0 = mock(UndertowBuilderCustomizer.class, new ViolatedAssumptionAnswer());
      boolean boolean1 = arrayDeque0.add(undertowBuilderCustomizer0);
      UndertowBuilderCustomizer undertowBuilderCustomizer1 = mock(UndertowBuilderCustomizer.class, new ViolatedAssumptionAnswer());
      UndertowBuilderCustomizer undertowBuilderCustomizer2 = mock(UndertowBuilderCustomizer.class, new ViolatedAssumptionAnswer());
      boolean boolean2 = arrayDeque0.add(undertowBuilderCustomizer2);
      arrayDeque0.addFirst(undertowBuilderCustomizer1);
      undertowEmbeddedServletContainerFactory0.setContextPath(string0);
      undertowEmbeddedServletContainerFactory0.setBuilderCustomizers(arrayDeque0);
      UndertowEmbeddedServletContainerFactory.JarResourceManager undertowEmbeddedServletContainerFactory_JarResourceManager0 = null;
      try {
        undertowEmbeddedServletContainerFactory_JarResourceManager0 = new UndertowEmbeddedServletContainerFactory.JarResourceManager(undertowEmbeddedServletContainerFactory0.accessLogDirectory);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory$JarResourceManager", e);
      }
  }

  @Test(timeout = 11000)
  public void test54()  throws Throwable  {
      ServletContextInitializer[] servletContextInitializerArray0 = new ServletContextInitializer[0];
      UndertowEmbeddedServletContainerFactory.Initializer undertowEmbeddedServletContainerFactory_Initializer0 = new UndertowEmbeddedServletContainerFactory.Initializer(servletContextInitializerArray0);
      String string0 = "";
      int int0 = 81;
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory(string0, int0);
      ResourceManager resourceManager0 = undertowEmbeddedServletContainerFactory0.getDocumentRootResourceManager();
      ServletDef servletDef0 = new ServletDef();
      Boolean boolean0 = servletDef0.getAsyncSupported();
      undertowEmbeddedServletContainerFactory0.setDirectBuffers(boolean0);
      DeploymentInfo deploymentInfo0 = null;
      ServletContextInitializer[] servletContextInitializerArray1 = new ServletContextInitializer[2];
      ServletRegistrationBean servletRegistrationBean0 = new ServletRegistrationBean();
      servletContextInitializerArray1[0] = (ServletContextInitializer) servletRegistrationBean0;
      ServletListenerRegistrationBean<SynthToolBarUI> servletListenerRegistrationBean0 = new ServletListenerRegistrationBean<SynthToolBarUI>();
      servletContextInitializerArray1[1] = (ServletContextInitializer) servletListenerRegistrationBean0;
      // Undeclared exception!
      try { 
        undertowEmbeddedServletContainerFactory0.registerServletContainerInitializerToDriveServletContextInitializers(deploymentInfo0, servletContextInitializerArray1);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory", e);
      }
  }

  @Test(timeout = 11000)
  public void test55()  throws Throwable  {
      String string0 = "x{jgAh6h;|";
      UndertowEmbeddedServletContainerFactory.JarResourceManager undertowEmbeddedServletContainerFactory_JarResourceManager0 = new UndertowEmbeddedServletContainerFactory.JarResourceManager(string0);
      undertowEmbeddedServletContainerFactory_JarResourceManager0.close();
  }

  @Test(timeout = 11000)
  public void test56()  throws Throwable  {
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory();
      Integer integer0 = Opcodes.NULL;
      int int0 = (-2683);
      int int1 = (-1049);
      int int2 = 575;
      int int3 = Integer.compareUnsigned(int1, int2);
      Undertow.Builder undertow_Builder0 = undertowEmbeddedServletContainerFactory0.createBuilder(int0);
      undertowEmbeddedServletContainerFactory0.setBufferSize(integer0);
      undertowEmbeddedServletContainerFactory0.setBuffersPerRegion(integer0);
      ServletContextInitializer[] servletContextInitializerArray0 = new ServletContextInitializer[0];
      UndertowEmbeddedServletContainerFactory.Initializer undertowEmbeddedServletContainerFactory_Initializer0 = new UndertowEmbeddedServletContainerFactory.Initializer(servletContextInitializerArray0);
      ContextHandler.Context contextHandler_Context0 = ContextHandler.getCurrentContext();
      ContextHandler contextHandler0 = ContextHandler.getContextHandler(contextHandler_Context0);
      String string0 = "application/vnd.wap.wmlc";
      ServletContextHandler servletContextHandler0 = new ServletContextHandler(contextHandler0, string0, int1);
      ServletContextHandler.Context servletContextHandler_Context0 = servletContextHandler0.new Context();
      undertowEmbeddedServletContainerFactory_Initializer0.onStartup(undertowEmbeddedServletContainerFactory0.NO_CLASSES, servletContextHandler_Context0);
      ProtectionDomain[] protectionDomainArray0 = new ProtectionDomain[9];
      URL uRL0 = null;
      Certificate[] certificateArray0 = new Certificate[6];
      String string1 = "zLW[4^9w`u";
      long long0 = (-2490L);
      MockSecureRandom mockSecureRandom0 = new MockSecureRandom(long0);
      Provider provider0 = mockSecureRandom0.getProvider();
      try { 
        SSLContext.getInstance(string1, provider0);
      } catch(NoSuchAlgorithmException e) {
      }
  }

  @Test(timeout = 11000)
  public void test57()  throws Throwable  {
      int int0 = 0;
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory(int0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      UndertowBuilderCustomizer[] undertowBuilderCustomizerArray0 = null;
      // Undeclared exception!
      try { 
        undertowEmbeddedServletContainerFactory0.addBuilderCustomizers(undertowBuilderCustomizerArray0);
      } catch(IllegalArgumentException e) {
         //
         // Customizers must not be null
         //
         verifyException("org.springframework.util.Assert", e);
      }
  }

  @Test(timeout = 11000)
  public void test58()  throws Throwable  {
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory();
      ResourceManager resourceManager0 = undertowEmbeddedServletContainerFactory0.getDocumentRootResourceManager();
      DeploymentInfo deploymentInfo0 = new DeploymentInfo();
      InMemorySessionPersistence inMemorySessionPersistence0 = new InMemorySessionPersistence();
      DeploymentInfo deploymentInfo1 = deploymentInfo0.setSessionPersistenceManager(inMemorySessionPersistence0);
      CorsFilter corsFilter0 = new CorsFilter();
      Collection<String> collection0 = corsFilter0.getAllowedHttpMethods();
      String[] stringArray0 = new String[3];
      stringArray0[0] = corsFilter0.HTTP_REQUEST_ATTRIBUTE_REQUEST_HEADERS;
      stringArray0[1] = corsFilter0.DEFAULT_SUPPORTS_CREDENTIALS;
      stringArray0[2] = corsFilter0.PARAM_CORS_REQUEST_DECORATE;
      DeploymentInfo deploymentInfo2 = deploymentInfo0.addSecurityRoles(stringArray0);
      DeploymentInfo deploymentInfo3 = deploymentInfo1.addPrincipalVsRoleMappings(undertowEmbeddedServletContainerFactory0.accessLogPattern, collection0);
      MimeMapping mimeMapping0 = null;
      DeploymentInfo deploymentInfo4 = deploymentInfo3.addMimeMapping(mimeMapping0);
      AuthenticationMode authenticationMode0 = AuthenticationMode.CONSTRAINT_DRIVEN;
      DeploymentInfo deploymentInfo5 = deploymentInfo4.setAuthenticationMode(authenticationMode0);
      undertowEmbeddedServletContainerFactory0.configureErrorPages(deploymentInfo5);
      int int0 = (-464);
      Undertow.Builder undertow_Builder0 = undertowEmbeddedServletContainerFactory0.createBuilder(int0);
      ClassLoader classLoader0 = undertowEmbeddedServletContainerFactory0.getServletClassLoader();
  }

  @Test(timeout = 11000)
  public void test59()  throws Throwable  {
      String string0 = "";
      int int0 = (-1462);
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory(string0, int0);
      Integer integer0 = JLayeredPane.MODAL_LAYER;
      undertowEmbeddedServletContainerFactory0.setWorkerThreads(integer0);
      Undertow.Builder undertow_Builder0 = undertowEmbeddedServletContainerFactory0.createBuilder(int0);
  }

  @Test(timeout = 11000)
  public void test60()  throws Throwable  {
      String string0 = "";
      Ssl ssl0 = new Ssl();
      DeploymentInfo deploymentInfo0 = null;
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory();
      String string1 = undertowEmbeddedServletContainerFactory0.getListenAddress();
      int int0 = 0;
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new UndertowEmbeddedServletContainerFactory(int0);
      Class<Throwable> class0 = Throwable.class;
      org.springframework.boot.context.embedded.ErrorPage errorPage0 = new org.springframework.boot.context.embedded.ErrorPage(class0, string0);
      ErrorPage errorPage1 = undertowEmbeddedServletContainerFactory1.getUndertowErrorPage(errorPage0);
  }

  @Test(timeout = 11000)
  public void test61()  throws Throwable  {
      int int0 = 3201;
      ServletContextInitializer[] servletContextInitializerArray0 = new ServletContextInitializer[5];
      WebAppContext webAppContext0 = new WebAppContext();
      WebAppContext.Context webAppContext_Context0 = webAppContext0.new Context();
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory(webAppContext0.SERVLET_MINOR_VERSION);
      Undertow.Builder undertow_Builder0 = undertowEmbeddedServletContainerFactory0.createBuilder(webAppContext0.SERVLET_MINOR_VERSION);
      int int1 = (-1);
      Undertow.Builder undertow_Builder1 = undertow_Builder0.setBufferSize(int1);
      int int2 = 1079;
      Undertow.Builder undertow_Builder2 = undertow_Builder1.setWorkerThreads(int2);
      DeploymentInfo deploymentInfo0 = new DeploymentInfo();
      boolean boolean0 = true;
      DeploymentInfo deploymentInfo1 = deploymentInfo0.setEagerFilterInit(boolean0);
      DeploymentInfo deploymentInfo2 = deploymentInfo1.setSendCustomReasonPhraseOnError(undertowEmbeddedServletContainerFactory0.useForwardHeaders);
      ServletContainerImpl servletContainerImpl0 = new ServletContainerImpl();
      DeploymentManagerImpl deploymentManagerImpl0 = new DeploymentManagerImpl(deploymentInfo2, servletContainerImpl0);
      UndertowEmbeddedServletContainer undertowEmbeddedServletContainer0 = undertowEmbeddedServletContainerFactory0.getUndertowEmbeddedServletContainer(undertow_Builder2, deploymentManagerImpl0, webAppContext0.NO_SECURITY);
      Class<Servlet> class0 = Servlet.class;
      try { 
        webAppContext_Context0.createServlet(class0);
      } catch(ServletException e) {
         //
         // java.lang.InstantiationException: javax.servlet.Servlet
         //
         verifyException("org.eclipse.jetty.servlet.ServletContextHandler$Context", e);
      }
  }

  @Test(timeout = 11000)
  public void test62()  throws Throwable  {
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory();
      Integer integer0 = Opcodes.TOP;
      Integer integer1 = Integer.getInteger(undertowEmbeddedServletContainerFactory0.accessLogPattern, undertowEmbeddedServletContainerFactory0.ioThreads);
      undertowEmbeddedServletContainerFactory0.setBufferSize(integer0);
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        undertowEmbeddedServletContainerFactory0.getDocumentRootResourceManager();
      } catch(RuntimeException e) {
         //
         // Unable to create tempDir. java.io.tmpdir is set to /tmp
         //
         verifyException("org.springframework.boot.context.embedded.AbstractEmbeddedServletContainerFactory", e);
      }
  }

  @Test(timeout = 11000)
  public void test63()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("static");
      boolean boolean0 = FileSystemHandling.createFolder(evoSuiteFile0);
      int int0 = 0;
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory(int0);
      boolean boolean1 = true;
      undertowEmbeddedServletContainerFactory0.accessLogEnabled = boolean1;
      FailedContext failedContext0 = new FailedContext();
      File file0 = failedContext0.getCatalinaHome();
      undertowEmbeddedServletContainerFactory0.accessLogDirectory = file0;
      ServletContextInitializer[] servletContextInitializerArray0 = new ServletContextInitializer[0];
      // Undeclared exception!
      try { 
        undertowEmbeddedServletContainerFactory0.getEmbeddedServletContainer(servletContextInitializerArray0);
      } catch(RuntimeException e) {
         //
         // java.security.AccessControlException: access denied (\"java.lang.RuntimePermission\" \"io.undertow.servlet.CREATE_INITIAL_HANDLER\")
         //
         verifyException("io.undertow.servlet.core.DeploymentManagerImpl", e);
      }
  }

  @Test(timeout = 11000)
  public void test64()  throws Throwable  {
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory();
      Integer integer0 = Opcodes.TOP;
      EvoNamingContext evoNamingContext0 = EvoNamingContext.getInstance();
      int int0 = 134;
      int int1 = 1213;
      int int2 = Integer.remainderUnsigned(int0, int1);
      Integer integer1 = Opcodes.INTEGER;
      undertowEmbeddedServletContainerFactory0.setBufferSize(integer0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp/undertow-docbase.1.8080");
      String string0 = "/;~5b";
      boolean boolean0 = FileSystemHandling.appendLineToFile(evoSuiteFile0, string0);
      ResourceManager resourceManager0 = undertowEmbeddedServletContainerFactory0.getDocumentRootResourceManager();
      ResourceManager resourceManager1 = undertowEmbeddedServletContainerFactory0.getDocumentRootResourceManager();
      String string1 = undertowEmbeddedServletContainerFactory0.getListenAddress();
      int int3 = (-392);
      Undertow.Builder undertow_Builder0 = undertowEmbeddedServletContainerFactory0.createBuilder(int3);
      ServletContextInitializer[] servletContextInitializerArray0 = new ServletContextInitializer[8];
      SynthToolBarUI synthToolBarUI0 = null;
      ServletListenerRegistrationBean<SynthToolBarUI> servletListenerRegistrationBean0 = null;
      try {
        servletListenerRegistrationBean0 = new ServletListenerRegistrationBean<SynthToolBarUI>(synthToolBarUI0);
      } catch(IllegalArgumentException e) {
         //
         // Listener must not be null
         //
         verifyException("org.springframework.util.Assert", e);
      }
  }

  @Test(timeout = 11000)
  public void test65()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      int int0 = 0;
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory(int0);
      boolean boolean1 = true;
      undertowEmbeddedServletContainerFactory0.accessLogEnabled = boolean1;
      FailedContext failedContext0 = new FailedContext();
      File file0 = undertowEmbeddedServletContainerFactory0.accessLogDirectory;
      undertowEmbeddedServletContainerFactory0.accessLogDirectory = file0;
      ServletContextInitializer[] servletContextInitializerArray0 = new ServletContextInitializer[0];
      // Undeclared exception!
      try { 
        undertowEmbeddedServletContainerFactory0.getEmbeddedServletContainer(servletContextInitializerArray0);
      } catch(RuntimeException e) {
         //
         // Unable to create tempDir. java.io.tmpdir is set to /tmp
         //
         verifyException("org.springframework.boot.context.embedded.AbstractEmbeddedServletContainerFactory", e);
      }
  }

  @Test(timeout = 11000)
  public void test66()  throws Throwable  {
      int int0 = 0;
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory(int0);
      Collection<UndertowDeploymentInfoCustomizer> collection0 = undertowEmbeddedServletContainerFactory0.getDeploymentInfoCustomizers();
      Collection<UndertowBuilderCustomizer> collection1 = undertowEmbeddedServletContainerFactory0.getBuilderCustomizers();
      HttpStatus httpStatus0 = HttpStatus.NOT_MODIFIED;
      String string0 = "7[RbGOF/h#a;<5vf3";
      HttpStatus httpStatus1 = null;
      org.springframework.boot.context.embedded.ErrorPage errorPage0 = new org.springframework.boot.context.embedded.ErrorPage(httpStatus1, string0);
      String string1 = errorPage0.getExceptionName();
      String string2 = errorPage0.getExceptionName();
      ErrorPage errorPage1 = undertowEmbeddedServletContainerFactory0.getUndertowErrorPage(errorPage0);
      Integer integer0 = Opcodes.TOP;
      undertowEmbeddedServletContainerFactory0.setBuffersPerRegion(integer0);
      UndertowEmbeddedServletContainerFactory.JarResourceManager undertowEmbeddedServletContainerFactory_JarResourceManager0 = new UndertowEmbeddedServletContainerFactory.JarResourceManager(undertowEmbeddedServletContainerFactory0.accessLogPattern);
      String string3 = "\\1SZ%5n2laYiQR";
      undertowEmbeddedServletContainerFactory_JarResourceManager0.jarPath = string3;
      undertowEmbeddedServletContainerFactory_JarResourceManager0.close();
      String string4 = undertowEmbeddedServletContainerFactory0.getListenAddress();
      boolean boolean0 = undertowEmbeddedServletContainerFactory_JarResourceManager0.isResourceChangeListenerSupported();
      Collection<UndertowBuilderCustomizer> collection2 = undertowEmbeddedServletContainerFactory0.getBuilderCustomizers();
      boolean boolean1 = false;
      undertowEmbeddedServletContainerFactory0.setUseForwardHeaders(boolean1);
      Undertow.Builder undertow_Builder0 = undertowEmbeddedServletContainerFactory0.createBuilder(int0);
      // Undeclared exception!
      try { 
        undertowEmbeddedServletContainerFactory0.createAccessLogDirectoryIfNecessary();
      } catch(IllegalStateException e) {
         //
         // Access log directory is not set
         //
         verifyException("org.springframework.util.Assert", e);
      }
  }
}
