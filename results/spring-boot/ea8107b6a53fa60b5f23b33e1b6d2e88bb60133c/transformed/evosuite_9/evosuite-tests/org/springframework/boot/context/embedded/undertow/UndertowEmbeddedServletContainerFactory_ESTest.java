/*
 * This file was automatically generated by EvoSuite
 * Thu Apr 30 03:53:55 GMT 2020
 */

package org.springframework.boot.context.embedded.undertow;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import groovy.lang.NonEmptySequence;
import groovy.lang.Sequence;
import groovyjarjarasm.asm.Opcodes;
import io.undertow.Undertow;
import io.undertow.security.api.AuthenticationMode;
import io.undertow.security.api.NotificationReceiver;
import io.undertow.server.HttpHandler;
import io.undertow.server.JvmRouteHandler;
import io.undertow.server.RoutingHandler;
import io.undertow.server.handlers.ByteRangeHandler;
import io.undertow.server.handlers.accesslog.AccessLogHandler;
import io.undertow.server.handlers.resource.Resource;
import io.undertow.server.handlers.resource.ResourceChangeListener;
import io.undertow.server.handlers.resource.ResourceManager;
import io.undertow.server.session.SessionListener;
import io.undertow.servlet.ServletExtension;
import io.undertow.servlet.Servlets;
import io.undertow.servlet.api.DeploymentInfo;
import io.undertow.servlet.api.DeploymentManager;
import io.undertow.servlet.api.InstanceFactory;
import io.undertow.servlet.api.LifecycleInterceptor;
import io.undertow.servlet.api.ListenerInfo;
import io.undertow.servlet.api.LoginConfig;
import io.undertow.servlet.api.MetricsCollector;
import io.undertow.servlet.api.ServletContainer;
import io.undertow.servlet.api.ServletContainerInitializerInfo;
import io.undertow.servlet.api.ServletInfo;
import io.undertow.servlet.api.ServletSessionConfig;
import io.undertow.servlet.api.ServletStackTraces;
import io.undertow.servlet.core.DefaultAuthorizationManager;
import io.undertow.servlet.core.DeploymentImpl;
import io.undertow.servlet.core.DeploymentManagerImpl;
import io.undertow.servlet.core.ServletContainerImpl;
import io.undertow.servlet.handlers.DefaultServlet;
import io.undertow.servlet.util.DefaultClassIntrospector;
import io.undertow.servlet.util.ImmediateInstanceFactory;
import java.io.File;
import java.net.InetAddress;
import java.net.MalformedURLException;
import java.net.StandardProtocolFamily;
import java.net.URL;
import java.sql.SQLTransientConnectionException;
import java.util.Collection;
import java.util.Comparator;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Hashtable;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.SortedSet;
import java.util.Stack;
import java.util.TreeSet;
import java.util.Vector;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.LinkedBlockingQueue;
import java.util.concurrent.TimeUnit;
import java.util.function.Consumer;
import javax.management.MBeanServer;
import javax.management.ObjectName;
import javax.management.relation.RelationService;
import javax.management.remote.JMXPrincipal;
import javax.net.ssl.KeyManager;
import javax.net.ssl.SSLContext;
import javax.net.ssl.TrustManager;
import javax.servlet.Filter;
import javax.servlet.Servlet;
import javax.servlet.ServletContext;
import javax.servlet.descriptor.JspConfigDescriptor;
import javax.swing.JLayeredPane;
import javax.swing.plaf.synth.SynthOptionPaneUI;
import liquibase.integration.servlet.LiquibaseStatusServlet;
import org.apache.catalina.core.ApplicationContext;
import org.apache.catalina.core.StandardContext;
import org.apache.catalina.core.StandardEngine;
import org.apache.catalina.core.StandardHost;
import org.apache.catalina.core.StandardServer;
import org.apache.catalina.filters.CorsFilter;
import org.apache.catalina.session.StandardManager;
import org.apache.catalina.session.StandardSession;
import org.apache.catalina.startup.FailedContext;
import org.apache.struts.mock.MockServletContext;
import org.apache.tomcat.util.descriptor.web.JspPropertyGroup;
import org.apache.tomcat.util.descriptor.web.WebXml;
import org.apache.tomcat.util.net.Nio2Endpoint;
import org.codehaus.groovy.control.CompilerConfiguration;
import org.codehaus.groovy.control.customizers.SecureASTCustomizer;
import org.eclipse.jetty.security.SecurityHandler;
import org.eclipse.jetty.server.handler.ContextHandler;
import org.eclipse.jetty.server.handler.ErrorHandler;
import org.eclipse.jetty.server.session.HashSessionManager;
import org.eclipse.jetty.server.session.SessionHandler;
import org.eclipse.jetty.servlet.ServletContextHandler;
import org.eclipse.jetty.servlet.ServletHandler;
import org.eclipse.jetty.util.AttributesMap;
import org.eclipse.jetty.util.resource.FileResource;
import org.eclipse.jetty.util.resource.PathResource;
import org.eclipse.jetty.webapp.FragmentDescriptor;
import org.eclipse.jetty.webapp.MetaData;
import org.eclipse.jetty.webapp.WebAppContext;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.evosuite.runtime.mock.java.net.MockInetAddress;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import org.springframework.boot.context.embedded.Compression;
import org.springframework.boot.context.embedded.DelegatingFilterProxyRegistrationBean;
import org.springframework.boot.context.embedded.EmbeddedServletContainer;
import org.springframework.boot.context.embedded.ErrorPage;
import org.springframework.boot.context.embedded.FilterRegistrationBean;
import org.springframework.boot.context.embedded.InitParameterConfiguringServletContextInitializer;
import org.springframework.boot.context.embedded.JspServlet;
import org.springframework.boot.context.embedded.MimeMappings;
import org.springframework.boot.context.embedded.ServletContextInitializer;
import org.springframework.boot.context.embedded.ServletListenerRegistrationBean;
import org.springframework.boot.context.embedded.ServletRegistrationBean;
import org.springframework.boot.context.embedded.Ssl;
import org.springframework.boot.context.embedded.undertow.UndertowBuilderCustomizer;
import org.springframework.boot.context.embedded.undertow.UndertowDeploymentInfoCustomizer;
import org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainer;
import org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory;
import org.springframework.context.support.ClassPathXmlApplicationContext;
import org.springframework.context.support.FileSystemXmlApplicationContext;
import org.springframework.context.support.GenericXmlApplicationContext;
import org.springframework.context.support.StaticApplicationContext;
import org.springframework.core.io.ResourceLoader;
import org.springframework.http.HttpStatus;
import org.springframework.web.context.support.AnnotationConfigWebApplicationContext;
import org.springframework.web.context.support.GenericWebApplicationContext;
import org.springframework.web.filter.CharacterEncodingFilter;
import org.xnio.Option;
import org.xnio.SslClientAuthMode;
import org.xnio.XnioWorker;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class UndertowEmbeddedServletContainerFactory_ESTest extends UndertowEmbeddedServletContainerFactory_ESTest_scaffolding {

  @Test(timeout = 11000)
  public void test00()  throws Throwable  {
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory();
      ServletContextInitializer[] servletContextInitializerArray0 = new ServletContextInitializer[3];
      Integer integer0 = JLayeredPane.FRAME_CONTENT_LAYER;
      undertowEmbeddedServletContainerFactory0.setIoThreads(integer0);
      FilterRegistrationBean filterRegistrationBean0 = new FilterRegistrationBean();
      servletContextInitializerArray0[1] = (ServletContextInitializer) filterRegistrationBean0;
      ServletContainerImpl servletContainerImpl0 = new ServletContainerImpl();
      DeploymentInfo deploymentInfo0 = null;
      String string0 = null;
      String[] stringArray0 = new String[4];
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp/undertow-docbase.0.8080");
      byte[] byteArray0 = new byte[3];
      byte byte0 = (byte) (-108);
      byteArray0[0] = byte0;
      byte byte1 = (byte)11;
      byteArray0[1] = byte1;
      byte byte2 = (byte) (-64);
      byteArray0[2] = byte2;
      boolean boolean0 = FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      stringArray0[0] = undertowEmbeddedServletContainerFactory0.accessLogPattern;
      stringArray0[1] = string0;
      stringArray0[2] = undertowEmbeddedServletContainerFactory0.accessLogPattern;
      stringArray0[3] = string0;
      // Undeclared exception!
      try { 
        undertowEmbeddedServletContainerFactory0.createDeploymentManager(servletContextInitializerArray0);
      } catch(RuntimeException e) {
         //
         // java.lang.NullPointerException
         //
         verifyException("io.undertow.servlet.core.DeploymentManagerImpl", e);
      }
  }

  @Test(timeout = 11000)
  public void test01()  throws Throwable  {
      String string0 = "";
      int int0 = (-2071);
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory(string0, int0);
      Integer integer0 = null;
      undertowEmbeddedServletContainerFactory0.setBufferSize(integer0);
      Integer integer1 = Opcodes.LONG;
      undertowEmbeddedServletContainerFactory0.setBufferSize(integer1);
      StandardContext standardContext0 = new StandardContext();
      File file0 = standardContext0.getCatalinaBase();
      undertowEmbeddedServletContainerFactory0.setAccessLogDirectory(file0);
      UndertowBuilderCustomizer[] undertowBuilderCustomizerArray0 = new UndertowBuilderCustomizer[7];
      UndertowBuilderCustomizer undertowBuilderCustomizer0 = mock(UndertowBuilderCustomizer.class, new ViolatedAssumptionAnswer());
      undertowBuilderCustomizerArray0[0] = undertowBuilderCustomizer0;
      undertowBuilderCustomizerArray0[1] = undertowBuilderCustomizerArray0[0];
      undertowBuilderCustomizerArray0[2] = undertowBuilderCustomizerArray0[1];
      undertowBuilderCustomizerArray0[3] = undertowBuilderCustomizerArray0[2];
      undertowBuilderCustomizerArray0[4] = undertowBuilderCustomizerArray0[3];
      undertowBuilderCustomizerArray0[5] = undertowBuilderCustomizerArray0[4];
      undertowBuilderCustomizerArray0[6] = undertowBuilderCustomizerArray0[5];
      undertowEmbeddedServletContainerFactory0.addBuilderCustomizers(undertowBuilderCustomizerArray0);
      Ssl ssl0 = new Ssl();
      SslClientAuthMode sslClientAuthMode0 = undertowEmbeddedServletContainerFactory0.getSslClientAuthMode(ssl0);
  }

  @Test(timeout = 11000)
  public void test02()  throws Throwable  {
      String string0 = "CmlB.\"CGi";
      UndertowEmbeddedServletContainerFactory.JarResourceManager undertowEmbeddedServletContainerFactory_JarResourceManager0 = new UndertowEmbeddedServletContainerFactory.JarResourceManager(string0);
      String string1 = "";
      int int0 = 0;
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory(string1, int0);
      WebAppContext webAppContext0 = new WebAppContext();
      WebAppContext.Context webAppContext_Context0 = webAppContext0.new Context();
      Enumeration<String> enumeration0 = AttributesMap.getAttributeNamesCopy(webAppContext0);
      UndertowDeploymentInfoCustomizer[] undertowDeploymentInfoCustomizerArray0 = new UndertowDeploymentInfoCustomizer[8];
      UndertowDeploymentInfoCustomizer undertowDeploymentInfoCustomizer0 = mock(UndertowDeploymentInfoCustomizer.class, new ViolatedAssumptionAnswer());
      undertowDeploymentInfoCustomizerArray0[0] = undertowDeploymentInfoCustomizer0;
      undertowDeploymentInfoCustomizerArray0[1] = undertowDeploymentInfoCustomizerArray0[0];
      undertowDeploymentInfoCustomizerArray0[2] = undertowDeploymentInfoCustomizerArray0[1];
      undertowDeploymentInfoCustomizerArray0[3] = undertowDeploymentInfoCustomizerArray0[2];
      undertowDeploymentInfoCustomizerArray0[4] = undertowDeploymentInfoCustomizerArray0[3];
      undertowDeploymentInfoCustomizerArray0[5] = undertowDeploymentInfoCustomizerArray0[4];
      undertowDeploymentInfoCustomizerArray0[6] = undertowDeploymentInfoCustomizerArray0[5];
      undertowDeploymentInfoCustomizerArray0[7] = undertowDeploymentInfoCustomizerArray0[6];
      undertowEmbeddedServletContainerFactory0.addDeploymentInfoCustomizers(undertowDeploymentInfoCustomizerArray0);
      try { 
        webAppContext_Context0.getResource(webAppContext0.STARTED);
      } catch(MalformedURLException e) {
         //
         // STARTED
         //
         verifyException("org.eclipse.jetty.webapp.WebAppContext", e);
      }
  }

  @Test(timeout = 11000)
  public void test03()  throws Throwable  {
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory();
      JspServlet jspServlet0 = undertowEmbeddedServletContainerFactory0.getJspServlet();
      undertowEmbeddedServletContainerFactory0.setJspServlet(jspServlet0);
      Collection<UndertowDeploymentInfoCustomizer> collection0 = undertowEmbeddedServletContainerFactory0.getDeploymentInfoCustomizers();
      HttpStatus httpStatus0 = HttpStatus.I_AM_A_TEAPOT;
      ErrorPage errorPage0 = new ErrorPage(undertowEmbeddedServletContainerFactory0.accessLogPattern);
      String string0 = errorPage0.getExceptionName();
      boolean boolean0 = errorPage0.equals(jspServlet0);
      io.undertow.servlet.api.ErrorPage errorPage1 = undertowEmbeddedServletContainerFactory0.getUndertowErrorPage(errorPage0);
      Integer integer0 = JLayeredPane.FRAME_CONTENT_LAYER;
      undertowEmbeddedServletContainerFactory0.setBuffersPerRegion(integer0);
      UndertowEmbeddedServletContainerFactory.JarResourceManager undertowEmbeddedServletContainerFactory_JarResourceManager0 = new UndertowEmbeddedServletContainerFactory.JarResourceManager();
      int int0 = (-4126);
      Integer integer1 = Integer.getInteger(undertowEmbeddedServletContainerFactory0.accessLogPattern, undertowEmbeddedServletContainerFactory0.ioThreads);
      long long0 = Integer.toUnsignedLong(int0);
      undertowEmbeddedServletContainerFactory_JarResourceManager0.close();
      // Undeclared exception!
      try { 
        undertowEmbeddedServletContainerFactory0.getTrustManagers();
      } catch(IllegalStateException e) {
         //
         // java.lang.NullPointerException
         //
         verifyException("org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory", e);
      }
  }

  @Test(timeout = 11000)
  public void test04()  throws Throwable  {
      StandardContext standardContext0 = new StandardContext();
      int int0 = 0;
      UndertowDeploymentInfoCustomizer[] undertowDeploymentInfoCustomizerArray0 = new UndertowDeploymentInfoCustomizer[4];
      UndertowDeploymentInfoCustomizer undertowDeploymentInfoCustomizer0 = mock(UndertowDeploymentInfoCustomizer.class, new ViolatedAssumptionAnswer());
      undertowDeploymentInfoCustomizerArray0[0] = undertowDeploymentInfoCustomizer0;
      undertowDeploymentInfoCustomizerArray0[1] = undertowDeploymentInfoCustomizerArray0[0];
      undertowDeploymentInfoCustomizerArray0[2] = undertowDeploymentInfoCustomizerArray0[1];
      undertowDeploymentInfoCustomizerArray0[3] = undertowDeploymentInfoCustomizerArray0[2];
      RoutingHandler routingHandler0 = new RoutingHandler();
      String string0 = "";
      String string1 = "%l";
      JvmRouteHandler jvmRouteHandler0 = new JvmRouteHandler(routingHandler0, string0, string1);
      UndertowBuilderCustomizer[] undertowBuilderCustomizerArray0 = new UndertowBuilderCustomizer[0];
      ResourceChangeListener resourceChangeListener0 = mock(ResourceChangeListener.class, new ViolatedAssumptionAnswer());
  }

  @Test(timeout = 11000)
  public void test05()  throws Throwable  {
      int int0 = 0;
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory(int0);
      TimeUnit timeUnit0 = TimeUnit.DAYS;
      undertowEmbeddedServletContainerFactory0.setSessionTimeout(int0, timeUnit0);
      Integer integer0 = Opcodes.NULL;
      undertowEmbeddedServletContainerFactory0.setWorkerThreads(integer0);
      ServletContextInitializer[] servletContextInitializerArray0 = new ServletContextInitializer[0];
      UndertowEmbeddedServletContainerFactory.Initializer undertowEmbeddedServletContainerFactory_Initializer0 = new UndertowEmbeddedServletContainerFactory.Initializer(servletContextInitializerArray0);
      HashSessionManager hashSessionManager0 = new HashSessionManager();
      int int1 = 0;
      hashSessionManager0.setRefreshCookieAge(int1);
      ContextHandler.Context contextHandler_Context0 = hashSessionManager0.getContext();
      undertowEmbeddedServletContainerFactory_Initializer0.onStartup(undertowEmbeddedServletContainerFactory0.NO_CLASSES, contextHandler_Context0);
      GenericWebApplicationContext genericWebApplicationContext0 = new GenericWebApplicationContext(contextHandler_Context0);
      undertowEmbeddedServletContainerFactory0.setResourceLoader(genericWebApplicationContext0);
      UndertowEmbeddedServletContainerFactory.JarResourceManager undertowEmbeddedServletContainerFactory_JarResourceManager0 = new UndertowEmbeddedServletContainerFactory.JarResourceManager(genericWebApplicationContext0.MESSAGE_SOURCE_BEAN_NAME);
      ResourceChangeListener resourceChangeListener0 = mock(ResourceChangeListener.class, new ViolatedAssumptionAnswer());
      int int2 = (-3170);
      hashSessionManager0.setScavengePeriod(int2);
      // Undeclared exception!
      try { 
        undertowEmbeddedServletContainerFactory_JarResourceManager0.removeResourceChangeListener(resourceChangeListener0);
      } catch(IllegalArgumentException e) {
      }
  }

  @Test(timeout = 11000)
  public void test06()  throws Throwable  {
      ServletContextInitializer[] servletContextInitializerArray0 = new ServletContextInitializer[1];
      WebXml webXml0 = new WebXml();
      Map<String, String> map0 = webXml0.getTaglibs();
      InitParameterConfiguringServletContextInitializer initParameterConfiguringServletContextInitializer0 = new InitParameterConfiguringServletContextInitializer(map0);
      servletContextInitializerArray0[0] = (ServletContextInitializer) initParameterConfiguringServletContextInitializer0;
      int int0 = (-1544);
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory();
      boolean boolean0 = true;
      undertowEmbeddedServletContainerFactory0.setAccessLogEnabled(boolean0);
      // Undeclared exception!
      try { 
        undertowEmbeddedServletContainerFactory0.getEmbeddedServletContainer(servletContextInitializerArray0);
      } catch(RuntimeException e) {
         //
         // java.security.AccessControlException: access denied (\"java.lang.RuntimePermission\" \"io.undertow.servlet.CREATE_INITIAL_HANDLER\")
         //
         verifyException("io.undertow.servlet.core.DeploymentManagerImpl", e);
      }
  }

  @Test(timeout = 11000)
  public void test07()  throws Throwable  {
      ServletContextInitializer[] servletContextInitializerArray0 = new ServletContextInitializer[1];
      WebXml webXml0 = new WebXml();
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      InitParameterConfiguringServletContextInitializer initParameterConfiguringServletContextInitializer0 = new InitParameterConfiguringServletContextInitializer(concurrentHashMap0);
      servletContextInitializerArray0[0] = (ServletContextInitializer) initParameterConfiguringServletContextInitializer0;
      UndertowEmbeddedServletContainerFactory.JarResourceManager undertowEmbeddedServletContainerFactory_JarResourceManager0 = new UndertowEmbeddedServletContainerFactory.JarResourceManager();
      String string0 = null;
      try { 
        undertowEmbeddedServletContainerFactory_JarResourceManager0.getResource(string0);
      } catch(MalformedURLException e) {
         //
         // no !/ in spec
         //
         verifyException("java.net.URL", e);
      }
  }

  @Test(timeout = 11000)
  public void test08()  throws Throwable  {
      int int0 = 268435456;
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory(int0);
      Compression compression0 = null;
      ErrorPage[] errorPageArray0 = new ErrorPage[1];
      String string0 = "DX2d<_=tqI@ 8T";
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ErrorPage errorPage0 = new ErrorPage(string0);
      undertowEmbeddedServletContainerFactory0.setAccessLogPattern(string0);
      MimeMappings mimeMappings0 = undertowEmbeddedServletContainerFactory0.getMimeMappings();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      mimeMappings0.forEach(consumer0);
      MimeMappings mimeMappings1 = new MimeMappings(mimeMappings0);
      undertowEmbeddedServletContainerFactory0.setMimeMappings(mimeMappings1);
      HttpHandler httpHandler0 = null;
      // Undeclared exception!
      try { 
        undertowEmbeddedServletContainerFactory0.createAccessLogHandler(httpHandler0);
      } catch(IllegalStateException e) {
         //
         // Access log directory is not set
         //
         verifyException("org.springframework.util.Assert", e);
      }
  }

  @Test(timeout = 11000)
  public void test09()  throws Throwable  {
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory();
      int int0 = (-1540);
      List<UndertowBuilderCustomizer> list0 = undertowEmbeddedServletContainerFactory0.builderCustomizers;
      undertowEmbeddedServletContainerFactory0.setBuilderCustomizers(list0);
      Undertow.Builder undertow_Builder0 = undertowEmbeddedServletContainerFactory0.createBuilder(int0);
      Undertow undertow0 = undertow_Builder0.build();
      EvoSuiteFile evoSuiteFile0 = null;
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte)66;
      byteArray0[0] = byte0;
      byte byte1 = (byte)23;
      byteArray0[1] = byte1;
      boolean boolean0 = FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      boolean boolean1 = false;
      undertowEmbeddedServletContainerFactory0.setPersistSession(boolean1);
      Ssl ssl0 = new Ssl();
      String string0 = "3WVG1wX:'@keMo";
      ssl0.setKeyPassword(string0);
      // Undeclared exception!
      try { 
        undertowEmbeddedServletContainerFactory0.configureSsl(ssl0, int0, undertow_Builder0);
      } catch(IllegalStateException e) {
         //
         // java.lang.NullPointerException
         //
         verifyException("org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory", e);
      }
  }

  @Test(timeout = 11000)
  public void test10()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          int int0 = 1747;
          UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory(int0);
          Class<SQLTransientConnectionException> class0 = SQLTransientConnectionException.class;
          ErrorPage errorPage0 = new ErrorPage(class0, undertowEmbeddedServletContainerFactory0.accessLogPattern);
          io.undertow.servlet.api.ErrorPage errorPage1 = undertowEmbeddedServletContainerFactory0.getUndertowErrorPage(errorPage0);
          ServletContainer servletContainer0 = Servlets.defaultContainer();
          Integer integer0 = JLayeredPane.POPUP_LAYER;
          undertowEmbeddedServletContainerFactory0.setWorkerThreads(integer0);
          TimeUnit timeUnit0 = TimeUnit.MINUTES;
          undertowEmbeddedServletContainerFactory0.setSessionTimeout(int0, timeUnit0);
          // Undeclared exception!
          try { 
            undertowEmbeddedServletContainerFactory0.createWorker();
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.lang.RuntimePermission\" \"createXnioWorker\")
             // java.lang.Thread.getStackTrace(Thread.java:1559)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:434)
             // org.xnio.XnioWorker.<init>(XnioWorker.java:106)
             // org.xnio.nio.NioXnioWorker.<init>(NioXnioWorker.java:74)
             // org.xnio.nio.NioXnio.createWorker(NioXnio.java:202)
             // org.xnio.Xnio.createWorker(Xnio.java:449)
             // org.xnio.Xnio.createWorker(Xnio.java:436)
             // org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.createWorker(UndertowEmbeddedServletContainerFactory.java:316)
             // sun.reflect.GeneratedMethodAccessor74.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:257)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:169)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:220)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:307)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:213)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:55)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:748)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(11000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 11000)
  public void test11()  throws Throwable  {
      String string0 = null;
      UndertowEmbeddedServletContainerFactory.JarResourceManager undertowEmbeddedServletContainerFactory_JarResourceManager0 = new UndertowEmbeddedServletContainerFactory.JarResourceManager(string0);
      int int0 = 3681;
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory(int0);
      JspPropertyGroup jspPropertyGroup0 = new JspPropertyGroup();
      Boolean boolean0 = jspPropertyGroup0.getElIgnored();
      undertowEmbeddedServletContainerFactory0.setDirectBuffers(boolean0);
      String string1 = "";
      ErrorPage errorPage0 = new ErrorPage(string1);
      io.undertow.servlet.api.ErrorPage errorPage1 = undertowEmbeddedServletContainerFactory0.getUndertowErrorPage(errorPage0);
  }

  @Test(timeout = 11000)
  public void test12()  throws Throwable  {
      UndertowEmbeddedServletContainerFactory.Initializer undertowEmbeddedServletContainerFactory_Initializer0 = new UndertowEmbeddedServletContainerFactory.Initializer();
      int int0 = (-256);
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory(int0);
      undertowEmbeddedServletContainerFactory0.setPort(int0);
      Ssl ssl0 = new Ssl();
      String[] stringArray0 = new String[0];
      ssl0.setCiphers(stringArray0);
      SslClientAuthMode sslClientAuthMode0 = undertowEmbeddedServletContainerFactory0.getSslClientAuthMode(ssl0);
      UndertowEmbeddedServletContainerFactory.JarResourceManager undertowEmbeddedServletContainerFactory_JarResourceManager0 = new UndertowEmbeddedServletContainerFactory.JarResourceManager(undertowEmbeddedServletContainerFactory0.accessLogPattern);
      boolean boolean0 = undertowEmbeddedServletContainerFactory_JarResourceManager0.isResourceChangeListenerSupported();
      // Undeclared exception!
      try { 
        undertowEmbeddedServletContainerFactory0.getTrustManagers();
      } catch(IllegalStateException e) {
         //
         // java.lang.NullPointerException
         //
         verifyException("org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory", e);
      }
  }

  @Test(timeout = 11000)
  public void test13()  throws Throwable  {
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory();
      // Undeclared exception!
      try { 
        undertowEmbeddedServletContainerFactory0.getKeyManagers();
      } catch(IllegalStateException e) {
         //
         // java.lang.NullPointerException
         //
         verifyException("org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory", e);
      }
  }

  @Test(timeout = 11000)
  public void test14()  throws Throwable  {
      String string0 = "";
      UndertowEmbeddedServletContainerFactory.JarResourceManager undertowEmbeddedServletContainerFactory_JarResourceManager0 = new UndertowEmbeddedServletContainerFactory.JarResourceManager(string0);
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory();
      String string1 = "";
      undertowEmbeddedServletContainerFactory0.setContextPath(string1);
      String string2 = undertowEmbeddedServletContainerFactory0.getListenAddress();
      Integer integer0 = JLayeredPane.DRAG_LAYER;
      undertowEmbeddedServletContainerFactory0.setWorkerThreads(integer0);
  }

  @Test(timeout = 11000)
  public void test15()  throws Throwable  {
      String string0 = "";
      int int0 = 0;
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory(string0, int0);
      undertowEmbeddedServletContainerFactory0.setAccessLogPattern(string0);
  }

  @Test(timeout = 11000)
  public void test16()  throws Throwable  {
      String string0 = "";
      int int0 = 1709;
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory(string0, int0);
      byte[] byteArray0 = new byte[4];
      byte byte0 = (byte) (-124);
      byteArray0[0] = byte0;
      byte byte1 = (byte)88;
      byteArray0[1] = byte1;
      byte byte2 = (byte)1;
      byteArray0[2] = byte2;
      byte byte3 = (byte)4;
      byteArray0[3] = byte3;
      InetAddress inetAddress0 = MockInetAddress.getByAddress(byteArray0);
      undertowEmbeddedServletContainerFactory0.setAddress(inetAddress0);
      Collection<UndertowDeploymentInfoCustomizer> collection0 = undertowEmbeddedServletContainerFactory0.getDeploymentInfoCustomizers();
      // Undeclared exception!
      try { 
        undertowEmbeddedServletContainerFactory0.getTrustManagers();
      } catch(IllegalStateException e) {
         //
         // java.lang.NullPointerException
         //
         verifyException("org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory", e);
      }
  }

  @Test(timeout = 11000)
  public void test17()  throws Throwable  {
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory();
      HttpStatus httpStatus0 = HttpStatus.MOVED_TEMPORARILY;
      String string0 = "";
      ErrorPage errorPage0 = new ErrorPage(httpStatus0, string0);
      io.undertow.servlet.api.ErrorPage errorPage1 = undertowEmbeddedServletContainerFactory0.getUndertowErrorPage(errorPage0);
  }

  @Test(timeout = 11000)
  public void test18()  throws Throwable  {
      int int0 = 1972;
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory(int0);
      Class<Throwable> class0 = Throwable.class;
      String string0 = "amJyBUE)5pM4pw][";
      ErrorPage errorPage0 = new ErrorPage(class0, string0);
      boolean boolean0 = errorPage0.equals(class0);
      io.undertow.servlet.api.ErrorPage errorPage1 = undertowEmbeddedServletContainerFactory0.getUndertowErrorPage(errorPage0);
      String string1 = "";
      undertowEmbeddedServletContainerFactory0.setDisplayName(string1);
      String string2 = undertowEmbeddedServletContainerFactory0.getListenAddress();
      boolean boolean1 = true;
      undertowEmbeddedServletContainerFactory0.setPersistSession(boolean1);
      Integer integer0 = Opcodes.UNINITIALIZED_THIS;
      int int1 = 789;
      String string3 = Integer.toUnsignedString(int1);
      undertowEmbeddedServletContainerFactory0.setBuffersPerRegion(integer0);
      undertowEmbeddedServletContainerFactory0.setIoThreads(integer0);
      String string4 = undertowEmbeddedServletContainerFactory0.getListenAddress();
      String string5 = "Category option \"";
      UndertowEmbeddedServletContainerFactory.JarResourceManager undertowEmbeddedServletContainerFactory_JarResourceManager0 = new UndertowEmbeddedServletContainerFactory.JarResourceManager(string5);
      undertowEmbeddedServletContainerFactory_JarResourceManager0.close();
  }

  @Test(timeout = 11000)
  public void test19()  throws Throwable  {
      int int0 = 295;
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory(int0);
      int int1 = (-2870);
      Undertow.Builder undertow_Builder0 = undertowEmbeddedServletContainerFactory0.createBuilder(int1);
      ServletContainerImpl servletContainerImpl0 = new ServletContainerImpl();
      DeploymentManager deploymentManager0 = servletContainerImpl0.getDeployment(undertowEmbeddedServletContainerFactory0.accessLogPattern);
      int int2 = 0;
      UndertowEmbeddedServletContainer undertowEmbeddedServletContainer0 = undertowEmbeddedServletContainerFactory0.getUndertowEmbeddedServletContainer(undertow_Builder0, deploymentManager0, int2);
      UndertowEmbeddedServletContainerFactory.JarResourceManager undertowEmbeddedServletContainerFactory_JarResourceManager0 = new UndertowEmbeddedServletContainerFactory.JarResourceManager();
      undertowEmbeddedServletContainerFactory_JarResourceManager0.close();
      ServletContextInitializer[] servletContextInitializerArray0 = new ServletContextInitializer[7];
      Filter filter0 = null;
      ServletRegistrationBean[] servletRegistrationBeanArray0 = null;
      FilterRegistrationBean filterRegistrationBean0 = null;
      try {
        filterRegistrationBean0 = new FilterRegistrationBean(filter0, servletRegistrationBeanArray0);
      } catch(IllegalArgumentException e) {
         //
         // ServletRegistrationBeans must not be null
         //
         verifyException("org.springframework.util.Assert", e);
      }
  }

  @Test(timeout = 11000)
  public void test20()  throws Throwable  {
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory();
      JspServlet jspServlet0 = undertowEmbeddedServletContainerFactory0.getJspServlet();
      undertowEmbeddedServletContainerFactory0.setJspServlet(jspServlet0);
      Collection<UndertowDeploymentInfoCustomizer> collection0 = undertowEmbeddedServletContainerFactory0.getDeploymentInfoCustomizers();
      HttpStatus httpStatus0 = HttpStatus.I_AM_A_TEAPOT;
      ErrorPage errorPage0 = new ErrorPage(httpStatus0, undertowEmbeddedServletContainerFactory0.accessLogPattern);
      String string0 = errorPage0.getExceptionName();
      boolean boolean0 = errorPage0.equals(jspServlet0);
      io.undertow.servlet.api.ErrorPage errorPage1 = undertowEmbeddedServletContainerFactory0.getUndertowErrorPage(errorPage0);
      Integer integer0 = JLayeredPane.FRAME_CONTENT_LAYER;
      undertowEmbeddedServletContainerFactory0.setBuffersPerRegion(integer0);
      UndertowEmbeddedServletContainerFactory.JarResourceManager undertowEmbeddedServletContainerFactory_JarResourceManager0 = new UndertowEmbeddedServletContainerFactory.JarResourceManager();
      int int0 = (-4126);
      Integer integer1 = Integer.getInteger(undertowEmbeddedServletContainerFactory0.accessLogPattern, undertowEmbeddedServletContainerFactory0.ioThreads);
      long long0 = Integer.toUnsignedLong(int0);
      undertowEmbeddedServletContainerFactory_JarResourceManager0.close();
      // Undeclared exception!
      try { 
        undertowEmbeddedServletContainerFactory0.getTrustManagers();
      } catch(IllegalStateException e) {
         //
         // java.lang.NullPointerException
         //
         verifyException("org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory", e);
      }
  }

  @Test(timeout = 11000)
  public void test21()  throws Throwable  {
      String string0 = "A\\.!y5r7=5e*UtJR;b/";
      int int0 = 1379;
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = null;
      try {
        undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory(string0, int0);
      } catch(IllegalArgumentException e) {
         //
         // ContextPath must start with '/' and not end with '/'
         //
         verifyException("org.springframework.boot.context.embedded.AbstractConfigurableEmbeddedServletContainer", e);
      }
  }

  @Test(timeout = 11000)
  public void test22()  throws Throwable  {
      StandardEngine standardEngine0 = new StandardEngine();
      File file0 = standardEngine0.getCatalinaBase();
      standardEngine0.destroy();
      UndertowEmbeddedServletContainerFactory.JarResourceManager undertowEmbeddedServletContainerFactory_JarResourceManager0 = null;
      try {
        undertowEmbeddedServletContainerFactory_JarResourceManager0 = new UndertowEmbeddedServletContainerFactory.JarResourceManager(file0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory$JarResourceManager", e);
      }
  }

  @Test(timeout = 11000)
  public void test23()  throws Throwable  {
      String string0 = "";
      int int0 = 0;
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory(string0, int0);
      UndertowBuilderCustomizer[] undertowBuilderCustomizerArray0 = new UndertowBuilderCustomizer[6];
      UndertowBuilderCustomizer undertowBuilderCustomizer0 = mock(UndertowBuilderCustomizer.class, new ViolatedAssumptionAnswer());
      undertowBuilderCustomizerArray0[0] = undertowBuilderCustomizer0;
      undertowBuilderCustomizerArray0[1] = undertowBuilderCustomizerArray0[0];
      undertowBuilderCustomizerArray0[2] = undertowBuilderCustomizerArray0[1];
      undertowBuilderCustomizerArray0[3] = undertowBuilderCustomizerArray0[2];
      undertowBuilderCustomizerArray0[4] = undertowBuilderCustomizerArray0[3];
      undertowBuilderCustomizerArray0[5] = undertowBuilderCustomizerArray0[4];
      undertowEmbeddedServletContainerFactory0.addBuilderCustomizers(undertowBuilderCustomizerArray0);
  }

  @Test(timeout = 11000)
  public void test24()  throws Throwable  {
      String string0 = "";
      int int0 = 0;
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory(string0, int0);
      boolean boolean0 = true;
      undertowEmbeddedServletContainerFactory0.setRegisterDefaultServlet(boolean0);
      ClassLoader classLoader0 = undertowEmbeddedServletContainerFactory0.getServletClassLoader();
      // Undeclared exception!
      try { 
        undertowEmbeddedServletContainerFactory0.getTrustManagers();
      } catch(IllegalStateException e) {
         //
         // java.lang.NullPointerException
         //
         verifyException("org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory", e);
      }
  }

  @Test(timeout = 11000)
  public void test25()  throws Throwable  {
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory();
      boolean boolean0 = true;
      undertowEmbeddedServletContainerFactory0.setAccessLogEnabled(boolean0);
      StandardContext standardContext0 = new StandardContext();
      Boolean boolean1 = standardContext0.getFailCtxIfServletStartFails();
      undertowEmbeddedServletContainerFactory0.setDirectBuffers(boolean1);
  }

  @Test(timeout = 11000)
  public void test26()  throws Throwable  {
      int int0 = 160;
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory(int0);
      ClassLoader classLoader0 = undertowEmbeddedServletContainerFactory0.getServletClassLoader();
      String string0 = "vYJ[J2.tDI0UO[c";
      File file0 = MockFile.createTempFile(string0, undertowEmbeddedServletContainerFactory0.accessLogPattern, undertowEmbeddedServletContainerFactory0.accessLogDirectory);
      undertowEmbeddedServletContainerFactory0.accessLogDirectory = file0;
      boolean boolean0 = true;
      undertowEmbeddedServletContainerFactory0.setAccessLogEnabled(boolean0);
      UndertowBuilderCustomizer[] undertowBuilderCustomizerArray0 = new UndertowBuilderCustomizer[0];
      undertowEmbeddedServletContainerFactory0.addBuilderCustomizers(undertowBuilderCustomizerArray0);
      String string1 = null;
      UndertowEmbeddedServletContainerFactory.JarResourceManager undertowEmbeddedServletContainerFactory_JarResourceManager0 = new UndertowEmbeddedServletContainerFactory.JarResourceManager(string1);
      ResourceChangeListener resourceChangeListener0 = mock(ResourceChangeListener.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        undertowEmbeddedServletContainerFactory_JarResourceManager0.registerResourceChangeListener(resourceChangeListener0);
      } catch(IllegalArgumentException e) {
      }
  }

  @Test(timeout = 11000)
  public void test27()  throws Throwable  {
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory();
      ByteRangeHandler.Wrapper byteRangeHandler_Wrapper0 = new ByteRangeHandler.Wrapper(undertowEmbeddedServletContainerFactory0.accessLogEnabled);
      DeploymentInfo deploymentInfo0 = new DeploymentInfo();
      ServletContainerImpl servletContainerImpl0 = new ServletContainerImpl();
      DeploymentManagerImpl deploymentManagerImpl0 = new DeploymentManagerImpl(deploymentInfo0, servletContainerImpl0);
      DeploymentImpl deploymentImpl0 = new DeploymentImpl(deploymentManagerImpl0, deploymentInfo0, servletContainerImpl0);
      HttpHandler httpHandler0 = deploymentImpl0.getHandler();
      HttpHandler httpHandler1 = byteRangeHandler_Wrapper0.wrap(httpHandler0);
      // Undeclared exception!
      try { 
        undertowEmbeddedServletContainerFactory0.createAccessLogHandler(httpHandler1);
      } catch(IllegalStateException e) {
         //
         // Access log directory is not set
         //
         verifyException("org.springframework.util.Assert", e);
      }
  }

  @Test(timeout = 11000)
  public void test28()  throws Throwable  {
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory();
      boolean boolean0 = false;
      undertowEmbeddedServletContainerFactory0.accessLogEnabled = boolean0;
      boolean boolean1 = false;
      undertowEmbeddedServletContainerFactory0.setAccessLogEnabled(boolean1);
      ServletContextInitializer[] servletContextInitializerArray0 = new ServletContextInitializer[0];
      // Undeclared exception!
      try { 
        undertowEmbeddedServletContainerFactory0.getEmbeddedServletContainer(servletContextInitializerArray0);
      } catch(RuntimeException e) {
         //
         // java.security.AccessControlException: access denied (\"java.lang.RuntimePermission\" \"io.undertow.servlet.CREATE_INITIAL_HANDLER\")
         //
         verifyException("io.undertow.servlet.core.DeploymentManagerImpl", e);
      }
  }

  @Test(timeout = 11000)
  public void test29()  throws Throwable  {
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory();
      LinkedBlockingQueue<UndertowDeploymentInfoCustomizer> linkedBlockingQueue0 = new LinkedBlockingQueue<UndertowDeploymentInfoCustomizer>();
      undertowEmbeddedServletContainerFactory0.setDeploymentInfoCustomizers(linkedBlockingQueue0);
  }

  @Test(timeout = 11000)
  public void test30()  throws Throwable  {
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory();
      Ssl ssl0 = null;
      int int0 = 0;
      Undertow.Builder undertow_Builder0 = undertowEmbeddedServletContainerFactory0.createBuilder(int0);
      int int1 = 470;
      Undertow.Builder undertow_Builder1 = undertow_Builder0.setBufferSize(int1);
      // Undeclared exception!
      try { 
        undertowEmbeddedServletContainerFactory0.configureSsl(ssl0, int0, undertow_Builder0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory", e);
      }
  }

  @Test(timeout = 11000)
  public void test31()  throws Throwable  {
      int int0 = 20;
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory(int0);
      ServletContainer servletContainer0 = Servlets.defaultContainer();
      String string0 = "";
      MockFile mockFile0 = new MockFile(undertowEmbeddedServletContainerFactory0.accessLogDirectory, string0);
      undertowEmbeddedServletContainerFactory0.setDocumentRoot(mockFile0);
      RoutingHandler routingHandler0 = new RoutingHandler(undertowEmbeddedServletContainerFactory0.useForwardHeaders);
      // Undeclared exception!
      try { 
        undertowEmbeddedServletContainerFactory0.createAccessLogHandler(routingHandler0);
      } catch(IllegalStateException e) {
         //
         // Access log directory is not set
         //
         verifyException("org.springframework.util.Assert", e);
      }
  }

  @Test(timeout = 11000)
  public void test32()  throws Throwable  {
      int int0 = 130;
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory(int0);
      Stack<UndertowDeploymentInfoCustomizer> stack0 = new Stack<UndertowDeploymentInfoCustomizer>();
      TimeUnit timeUnit0 = TimeUnit.MINUTES;
      undertowEmbeddedServletContainerFactory0.setSessionTimeout(int0, timeUnit0);
      undertowEmbeddedServletContainerFactory0.setDeploymentInfoCustomizers(stack0);
      Ssl ssl0 = undertowEmbeddedServletContainerFactory0.getSsl();
      Undertow.Builder undertow_Builder0 = undertowEmbeddedServletContainerFactory0.createBuilder(int0);
      int int1 = 1;
      String string0 = "/display-name";
      Class<UndertowEmbeddedServletContainerFactory.Initializer> class0 = UndertowEmbeddedServletContainerFactory.Initializer.class;
      Class<Object> class1 = Object.class;
      Option<Object> option0 = Option.simple((Class<?>) class0, string0, class1);
      Undertow.Builder undertow_Builder1 = undertow_Builder0.setServerOption(option0, (Object) timeUnit0);
      Undertow.Builder undertow_Builder2 = undertow_Builder0.addAjpListener(int1, string0);
      // Undeclared exception!
      try { 
        undertowEmbeddedServletContainerFactory0.configureSsl(ssl0, int0, undertow_Builder2);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory", e);
      }
  }

  @Test(timeout = 11000)
  public void test33()  throws Throwable  {
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory();
      boolean boolean0 = true;
      undertowEmbeddedServletContainerFactory0.setUseForwardHeaders(boolean0);
  }

  @Test(timeout = 11000)
  public void test34()  throws Throwable  {
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory();
      UndertowBuilderCustomizer[] undertowBuilderCustomizerArray0 = new UndertowBuilderCustomizer[1];
      // Undeclared exception!
      try { 
        undertowEmbeddedServletContainerFactory0.createAccessLogDirectoryIfNecessary();
      } catch(IllegalStateException e) {
         //
         // Access log directory is not set
         //
         verifyException("org.springframework.util.Assert", e);
      }
  }

  @Test(timeout = 11000)
  public void test35()  throws Throwable  {
      int int0 = 0;
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory(int0);
      Collection<UndertowDeploymentInfoCustomizer> collection0 = null;
      // Undeclared exception!
      try { 
        undertowEmbeddedServletContainerFactory0.setDeploymentInfoCustomizers(collection0);
      } catch(IllegalArgumentException e) {
         //
         // Customizers must not be null
         //
         verifyException("org.springframework.util.Assert", e);
      }
  }

  @Test(timeout = 11000)
  public void test36()  throws Throwable  {
      String string0 = "";
      UndertowEmbeddedServletContainerFactory.JarResourceManager undertowEmbeddedServletContainerFactory_JarResourceManager0 = new UndertowEmbeddedServletContainerFactory.JarResourceManager(string0);
      try { 
        undertowEmbeddedServletContainerFactory_JarResourceManager0.getResource(string0);
      } catch(MalformedURLException e) {
         //
         // no !/ in spec
         //
         verifyException("java.net.URL", e);
      }
  }

  @Test(timeout = 11000)
  public void test37()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          int int0 = 1747;
          UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory(int0);
          Integer integer0 = JLayeredPane.POPUP_LAYER;
          undertowEmbeddedServletContainerFactory0.setWorkerThreads(integer0);
          TimeUnit timeUnit0 = TimeUnit.MINUTES;
          undertowEmbeddedServletContainerFactory0.setSessionTimeout(int0, timeUnit0);
          // Undeclared exception!
          try { 
            undertowEmbeddedServletContainerFactory0.createWorker();
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.lang.RuntimePermission\" \"createXnioWorker\")
             // java.lang.Thread.getStackTrace(Thread.java:1559)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:434)
             // org.xnio.XnioWorker.<init>(XnioWorker.java:106)
             // org.xnio.nio.NioXnioWorker.<init>(NioXnioWorker.java:74)
             // org.xnio.nio.NioXnio.createWorker(NioXnio.java:202)
             // org.xnio.Xnio.createWorker(Xnio.java:449)
             // org.xnio.Xnio.createWorker(Xnio.java:436)
             // org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.createWorker(UndertowEmbeddedServletContainerFactory.java:316)
             // sun.reflect.GeneratedMethodAccessor74.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:257)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:169)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:220)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:307)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:213)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:55)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:748)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(11000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 11000)
  public void test38()  throws Throwable  {
      ServletContextInitializer[] servletContextInitializerArray0 = new ServletContextInitializer[0];
      UndertowEmbeddedServletContainerFactory.Initializer undertowEmbeddedServletContainerFactory_Initializer0 = new UndertowEmbeddedServletContainerFactory.Initializer(servletContextInitializerArray0);
      UndertowEmbeddedServletContainerFactory.JarResourceManager undertowEmbeddedServletContainerFactory_JarResourceManager0 = new UndertowEmbeddedServletContainerFactory.JarResourceManager();
      String string0 = "";
      try { 
        undertowEmbeddedServletContainerFactory_JarResourceManager0.getResource(string0);
      } catch(MalformedURLException e) {
         //
         // no !/ in spec
         //
         verifyException("java.net.URL", e);
      }
  }

  @Test(timeout = 11000)
  public void test39()  throws Throwable  {
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory();
      HashMap<ErrorPage, StandardProtocolFamily> hashMap0 = new HashMap<ErrorPage, StandardProtocolFamily>();
      Set<ErrorPage> set0 = hashMap0.keySet();
      undertowEmbeddedServletContainerFactory0.setErrorPages(set0);
      boolean boolean0 = undertowEmbeddedServletContainerFactory0.isAccessLogEnabled();
      Vector<UndertowBuilderCustomizer> vector0 = new Vector<UndertowBuilderCustomizer>();
      UndertowBuilderCustomizer undertowBuilderCustomizer0 = mock(UndertowBuilderCustomizer.class, new ViolatedAssumptionAnswer());
      boolean boolean1 = vector0.add(undertowBuilderCustomizer0);
      boolean boolean2 = vector0.remove((Object) undertowEmbeddedServletContainerFactory0);
      undertowEmbeddedServletContainerFactory0.setBuilderCustomizers(vector0);
      RoutingHandler routingHandler0 = new RoutingHandler();
      // Undeclared exception!
      try { 
        undertowEmbeddedServletContainerFactory0.createAccessLogHandler(routingHandler0);
      } catch(IllegalStateException e) {
         //
         // Access log directory is not set
         //
         verifyException("org.springframework.util.Assert", e);
      }
  }

  @Test(timeout = 11000)
  public void test40()  throws Throwable  {
      int int0 = 0;
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory(int0);
      Collection<UndertowBuilderCustomizer> collection0 = null;
      // Undeclared exception!
      try { 
        undertowEmbeddedServletContainerFactory0.setBuilderCustomizers(collection0);
      } catch(IllegalArgumentException e) {
         //
         // Customizers must not be null
         //
         verifyException("org.springframework.util.Assert", e);
      }
  }

  @Test(timeout = 11000)
  public void test41()  throws Throwable  {
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory();
      String string0 = "<e";
      undertowEmbeddedServletContainerFactory0.setAccessLogPattern(string0);
      String[] stringArray0 = null;
      boolean boolean0 = false;
      ClassPathXmlApplicationContext classPathXmlApplicationContext0 = new ClassPathXmlApplicationContext(stringArray0, boolean0);
      undertowEmbeddedServletContainerFactory0.resourceLoader = (ResourceLoader) classPathXmlApplicationContext0;
      ServletContextInitializer[] servletContextInitializerArray0 = null;
      // Undeclared exception!
      try { 
        undertowEmbeddedServletContainerFactory0.getEmbeddedServletContainer(servletContextInitializerArray0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 11000)
  public void test42()  throws Throwable  {
      int int0 = 0;
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory(int0);
      Class<ErrorPage> class0 = ErrorPage.class;
      ResourceManager resourceManager0 = undertowEmbeddedServletContainerFactory0.getDocumentRootResourceManager();
      UndertowDeploymentInfoCustomizer[] undertowDeploymentInfoCustomizerArray0 = null;
      // Undeclared exception!
      try { 
        undertowEmbeddedServletContainerFactory0.addDeploymentInfoCustomizers(undertowDeploymentInfoCustomizerArray0);
      } catch(IllegalArgumentException e) {
         //
         // UndertowDeploymentInfoCustomizers must not be null
         //
         verifyException("org.springframework.util.Assert", e);
      }
  }

  @Test(timeout = 11000)
  public void test43()  throws Throwable  {
      int int0 = 1;
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory(int0);
      Integer integer0 = Opcodes.DOUBLE;
      undertowEmbeddedServletContainerFactory0.setIoThreads(integer0);
      // Undeclared exception!
      try { 
        undertowEmbeddedServletContainerFactory0.getTrustManagers();
      } catch(IllegalStateException e) {
         //
         // java.lang.NullPointerException
         //
         verifyException("org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory", e);
      }
  }

  @Test(timeout = 11000)
  public void test44()  throws Throwable  {
      String string0 = "";
      int int0 = (-1);
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory(string0, int0);
      Collection<UndertowBuilderCustomizer> collection0 = undertowEmbeddedServletContainerFactory0.getBuilderCustomizers();
      DeploymentInfo deploymentInfo0 = null;
      // Undeclared exception!
      try { 
        undertowEmbeddedServletContainerFactory0.configureAccessLog(deploymentInfo0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory", e);
      }
  }

  @Test(timeout = 11000)
  public void test45()  throws Throwable  {
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory();
      int int0 = 0;
      Undertow.Builder undertow_Builder0 = undertowEmbeddedServletContainerFactory0.createBuilder(int0);
      // Undeclared exception!
      try { 
        undertowEmbeddedServletContainerFactory0.getKeyManagers();
      } catch(IllegalStateException e) {
         //
         // java.lang.NullPointerException
         //
         verifyException("org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory", e);
      }
  }

  @Test(timeout = 11000)
  public void test46()  throws Throwable  {
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory();
      StandardEngine standardEngine0 = new StandardEngine();
      File file0 = standardEngine0.getCatalinaBase();
      undertowEmbeddedServletContainerFactory0.accessLogDirectory = file0;
      boolean boolean0 = true;
      undertowEmbeddedServletContainerFactory0.setUseForwardHeaders(boolean0);
      boolean boolean1 = undertowEmbeddedServletContainerFactory0.isAccessLogEnabled();
  }

  @Test(timeout = 11000)
  public void test47()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          int int0 = 0;
          UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory(int0);
          DeploymentInfo deploymentInfo0 = new DeploymentInfo();
          Class<String> class0 = String.class;
          Sequence sequence0 = new Sequence(class0, undertowEmbeddedServletContainerFactory0.builderCustomizers);
          DeploymentInfo deploymentInfo1 = deploymentInfo0.addListeners((Collection<ListenerInfo>) sequence0);
          MetricsCollector metricsCollector0 = mock(MetricsCollector.class, new ViolatedAssumptionAnswer());
          DeploymentInfo deploymentInfo2 = deploymentInfo1.setMetricsCollector(metricsCollector0);
          DeploymentInfo deploymentInfo3 = deploymentInfo2.addServlets((Collection<ServletInfo>) sequence0);
          String string0 = "";
          DeploymentInfo deploymentInfo4 = deploymentInfo3.setHostName(string0);
          DeploymentInfo deploymentInfo5 = deploymentInfo3.clone();
          undertowEmbeddedServletContainerFactory0.configureErrorPages(deploymentInfo5);
          // Undeclared exception!
          try { 
            undertowEmbeddedServletContainerFactory0.createWorker();
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.lang.RuntimePermission\" \"createXnioWorker\")
             // java.lang.Thread.getStackTrace(Thread.java:1559)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:434)
             // org.xnio.XnioWorker.<init>(XnioWorker.java:106)
             // org.xnio.nio.NioXnioWorker.<init>(NioXnioWorker.java:74)
             // org.xnio.nio.NioXnio.createWorker(NioXnio.java:202)
             // org.xnio.Xnio.createWorker(Xnio.java:449)
             // org.xnio.Xnio.createWorker(Xnio.java:436)
             // org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory.createWorker(UndertowEmbeddedServletContainerFactory.java:316)
             // sun.reflect.GeneratedMethodAccessor74.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:257)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:169)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:220)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:307)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:213)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:55)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:748)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(11000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 11000)
  public void test48()  throws Throwable  {
      int int0 = (-415);
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory(int0);
      UndertowDeploymentInfoCustomizer[] undertowDeploymentInfoCustomizerArray0 = new UndertowDeploymentInfoCustomizer[5];
      UndertowDeploymentInfoCustomizer undertowDeploymentInfoCustomizer0 = mock(UndertowDeploymentInfoCustomizer.class, new ViolatedAssumptionAnswer());
      undertowDeploymentInfoCustomizerArray0[0] = undertowDeploymentInfoCustomizer0;
      undertowDeploymentInfoCustomizerArray0[1] = undertowDeploymentInfoCustomizerArray0[0];
      undertowDeploymentInfoCustomizerArray0[2] = undertowDeploymentInfoCustomizerArray0[1];
      undertowDeploymentInfoCustomizerArray0[3] = undertowDeploymentInfoCustomizerArray0[2];
      undertowDeploymentInfoCustomizerArray0[4] = undertowDeploymentInfoCustomizerArray0[3];
      undertowEmbeddedServletContainerFactory0.addDeploymentInfoCustomizers(undertowDeploymentInfoCustomizerArray0);
  }

  @Test(timeout = 11000)
  public void test49()  throws Throwable  {
      int int0 = 0;
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory(int0);
      HttpStatus httpStatus0 = HttpStatus.MULTI_STATUS;
      ErrorPage errorPage0 = new ErrorPage(httpStatus0, undertowEmbeddedServletContainerFactory0.accessLogPattern);
      io.undertow.servlet.api.ErrorPage errorPage1 = undertowEmbeddedServletContainerFactory0.getUndertowErrorPage(errorPage0);
      Stack<ServletContextInitializer> stack0 = new Stack<ServletContextInitializer>();
      undertowEmbeddedServletContainerFactory0.setInitializers(stack0);
      ServletContainer servletContainer0 = Servlets.defaultContainer();
      Ssl ssl0 = undertowEmbeddedServletContainerFactory0.getSsl();
      // Undeclared exception!
      try { 
        undertowEmbeddedServletContainerFactory0.getSslClientAuthMode(ssl0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory", e);
      }
  }

  @Test(timeout = 11000)
  public void test50()  throws Throwable  {
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory();
      ServletContextInitializer[] servletContextInitializerArray0 = new ServletContextInitializer[3];
      FilterRegistrationBean filterRegistrationBean0 = new FilterRegistrationBean();
      servletContextInitializerArray0[1] = (ServletContextInitializer) filterRegistrationBean0;
      ServletContainerImpl servletContainerImpl0 = new ServletContainerImpl();
      DeploymentInfo deploymentInfo0 = null;
      String string0 = null;
      boolean boolean0 = true;
      String[] stringArray0 = new String[4];
      stringArray0[0] = undertowEmbeddedServletContainerFactory0.accessLogPattern;
      stringArray0[1] = string0;
      stringArray0[2] = undertowEmbeddedServletContainerFactory0.accessLogPattern;
      stringArray0[3] = string0;
      // Undeclared exception!
      try { 
        undertowEmbeddedServletContainerFactory0.createDeploymentManager(servletContextInitializerArray0);
      } catch(RuntimeException e) {
         //
         // java.lang.NullPointerException
         //
         verifyException("io.undertow.servlet.core.DeploymentManagerImpl", e);
      }
  }

  @Test(timeout = 11000)
  public void test51()  throws Throwable  {
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory();
      ServletContextInitializer[] servletContextInitializerArray0 = new ServletContextInitializer[6];
      LiquibaseStatusServlet liquibaseStatusServlet0 = new LiquibaseStatusServlet();
      String[] stringArray0 = new String[7];
      stringArray0[0] = undertowEmbeddedServletContainerFactory0.accessLogPattern;
      stringArray0[1] = undertowEmbeddedServletContainerFactory0.accessLogPattern;
      stringArray0[2] = undertowEmbeddedServletContainerFactory0.accessLogPattern;
      stringArray0[3] = undertowEmbeddedServletContainerFactory0.accessLogPattern;
      stringArray0[4] = undertowEmbeddedServletContainerFactory0.accessLogPattern;
      stringArray0[5] = undertowEmbeddedServletContainerFactory0.accessLogPattern;
      String string0 = "";
      stringArray0[6] = string0;
      ServletRegistrationBean servletRegistrationBean0 = new ServletRegistrationBean(liquibaseStatusServlet0, stringArray0);
      servletContextInitializerArray0[0] = (ServletContextInitializer) servletRegistrationBean0;
      ServletListenerRegistrationBean<SynthOptionPaneUI> servletListenerRegistrationBean0 = new ServletListenerRegistrationBean<SynthOptionPaneUI>();
      servletContextInitializerArray0[1] = (ServletContextInitializer) servletListenerRegistrationBean0;
      boolean boolean0 = false;
      ServletRegistrationBean servletRegistrationBean1 = new ServletRegistrationBean(liquibaseStatusServlet0, boolean0, stringArray0);
      servletContextInitializerArray0[2] = (ServletContextInitializer) servletRegistrationBean1;
      ServletListenerRegistrationBean<SynthOptionPaneUI> servletListenerRegistrationBean1 = new ServletListenerRegistrationBean<SynthOptionPaneUI>();
      servletContextInitializerArray0[3] = (ServletContextInitializer) servletListenerRegistrationBean1;
      String string1 = ".mA9I3zka,</wF/'";
      ServletRegistrationBean[] servletRegistrationBeanArray0 = new ServletRegistrationBean[8];
      servletRegistrationBeanArray0[0] = servletRegistrationBean0;
      servletRegistrationBeanArray0[1] = servletRegistrationBean0;
      servletRegistrationBeanArray0[2] = servletRegistrationBean0;
      servletRegistrationBeanArray0[3] = servletRegistrationBean1;
      servletRegistrationBeanArray0[4] = servletRegistrationBean1;
      ServletRegistrationBean servletRegistrationBean2 = new ServletRegistrationBean(liquibaseStatusServlet0, boolean0, stringArray0);
      servletRegistrationBeanArray0[5] = servletRegistrationBean2;
      servletRegistrationBeanArray0[6] = servletRegistrationBean0;
      servletRegistrationBeanArray0[7] = servletRegistrationBean0;
      DelegatingFilterProxyRegistrationBean delegatingFilterProxyRegistrationBean0 = new DelegatingFilterProxyRegistrationBean(string1, servletRegistrationBeanArray0);
      servletContextInitializerArray0[4] = (ServletContextInitializer) delegatingFilterProxyRegistrationBean0;
      String string2 = "K";
      DelegatingFilterProxyRegistrationBean delegatingFilterProxyRegistrationBean1 = new DelegatingFilterProxyRegistrationBean(string2, servletRegistrationBeanArray0);
      servletContextInitializerArray0[5] = (ServletContextInitializer) delegatingFilterProxyRegistrationBean1;
      // Undeclared exception!
      try { 
        undertowEmbeddedServletContainerFactory0.createDeploymentManager(servletContextInitializerArray0);
      } catch(RuntimeException e) {
         //
         // java.lang.NullPointerException
         //
         verifyException("io.undertow.servlet.core.DeploymentManagerImpl", e);
      }
  }

  @Test(timeout = 11000)
  public void test52()  throws Throwable  {
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory();
      String string0 = "";
      undertowEmbeddedServletContainerFactory0.setDisplayName(string0);
      int int0 = (-1);
      undertowEmbeddedServletContainerFactory0.setSessionTimeout(int0);
      Integer integer0 = groovyjarjarasm.asm.Opcodes.TOP;
      undertowEmbeddedServletContainerFactory0.setBufferSize(integer0);
  }

  @Test(timeout = 11000)
  public void test53()  throws Throwable  {
      UndertowEmbeddedServletContainerFactory.Initializer undertowEmbeddedServletContainerFactory_Initializer0 = new UndertowEmbeddedServletContainerFactory.Initializer();
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory();
      Class<SQLTransientConnectionException> class0 = SQLTransientConnectionException.class;
      ErrorPage errorPage0 = new ErrorPage(class0, undertowEmbeddedServletContainerFactory0.accessLogPattern);
      io.undertow.servlet.api.ErrorPage errorPage1 = undertowEmbeddedServletContainerFactory0.getUndertowErrorPage(errorPage0);
      ServletContainer servletContainer0 = Servlets.defaultContainer();
      int int0 = (-1686);
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory1 = new UndertowEmbeddedServletContainerFactory(int0);
      Integer integer0 = undertowEmbeddedServletContainerFactory1.workerThreads;
      Integer integer1 = Integer.getInteger(undertowEmbeddedServletContainerFactory0.accessLogPattern);
      undertowEmbeddedServletContainerFactory0.accessLogDirectory = undertowEmbeddedServletContainerFactory1.accessLogDirectory;
      undertowEmbeddedServletContainerFactory0.setBufferSize(integer0);
      MimeMappings mimeMappings0 = new MimeMappings();
      String string0 = mimeMappings0.remove(undertowEmbeddedServletContainerFactory1.accessLogPattern);
      undertowEmbeddedServletContainerFactory0.setMimeMappings(mimeMappings0);
      // Undeclared exception!
      try { 
        undertowEmbeddedServletContainerFactory0.createDeploymentManager(undertowEmbeddedServletContainerFactory_Initializer0.initializers);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 11000)
  public void test54()  throws Throwable  {
      int int0 = 0;
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory(int0);
      DeploymentInfo deploymentInfo0 = new DeploymentInfo();
      ServletStackTraces servletStackTraces0 = ServletStackTraces.NONE;
      DeploymentInfo deploymentInfo1 = deploymentInfo0.setServletStackTraces(servletStackTraces0);
      Class<UndertowEmbeddedServletContainerFactory.Initializer> class0 = UndertowEmbeddedServletContainerFactory.Initializer.class;
      ServletContextInitializer[] servletContextInitializerArray0 = new ServletContextInitializer[3];
      FilterRegistrationBean filterRegistrationBean0 = new FilterRegistrationBean();
      servletContextInitializerArray0[0] = (ServletContextInitializer) filterRegistrationBean0;
      SecurityHandler securityHandler0 = SecurityHandler.getCurrentSecurityHandler();
      SessionHandler sessionHandler0 = null;
      ServletHandler servletHandler0 = new ServletHandler();
      ErrorHandler errorHandler0 = new ErrorHandler();
      int int1 = 4436;
      ServletContextHandler servletContextHandler0 = new ServletContextHandler(securityHandler0, securityHandler0.RUNNING, sessionHandler0, securityHandler0, servletHandler0, errorHandler0, int1);
      Map<String, String> map0 = servletContextHandler0.getInitParams();
      InitParameterConfiguringServletContextInitializer initParameterConfiguringServletContextInitializer0 = new InitParameterConfiguringServletContextInitializer(map0);
      servletContextInitializerArray0[1] = (ServletContextInitializer) initParameterConfiguringServletContextInitializer0;
      ServletListenerRegistrationBean<SynthOptionPaneUI> servletListenerRegistrationBean0 = new ServletListenerRegistrationBean<SynthOptionPaneUI>();
      servletContextInitializerArray0[2] = (ServletContextInitializer) servletListenerRegistrationBean0;
      UndertowEmbeddedServletContainerFactory.Initializer undertowEmbeddedServletContainerFactory_Initializer0 = new UndertowEmbeddedServletContainerFactory.Initializer(servletContextInitializerArray0);
      ImmediateInstanceFactory<UndertowEmbeddedServletContainerFactory.Initializer> immediateInstanceFactory0 = new ImmediateInstanceFactory<UndertowEmbeddedServletContainerFactory.Initializer>(undertowEmbeddedServletContainerFactory_Initializer0);
      ServletContainerInitializerInfo servletContainerInitializerInfo0 = new ServletContainerInitializerInfo(class0, immediateInstanceFactory0, undertowEmbeddedServletContainerFactory0.NO_CLASSES);
      DeploymentInfo deploymentInfo2 = deploymentInfo1.addServletContainerInitalizer(servletContainerInitializerInfo0);
      DeploymentInfo deploymentInfo3 = deploymentInfo2.clearLoginMethods();
      DeploymentInfo deploymentInfo4 = deploymentInfo3.setDisplayName(servletHandler0.STOPPING);
      undertowEmbeddedServletContainerFactory0.registerServletContainerInitializerToDriveServletContextInitializers(deploymentInfo4, servletContextInitializerArray0);
  }

  @Test(timeout = 11000)
  public void test55()  throws Throwable  {
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory();
      Integer integer0 = JLayeredPane.POPUP_LAYER;
      undertowEmbeddedServletContainerFactory0.setBuffersPerRegion(integer0);
      Boolean boolean0 = new Boolean(undertowEmbeddedServletContainerFactory0.accessLogPattern);
      boolean boolean1 = Boolean.getBoolean(undertowEmbeddedServletContainerFactory0.accessLogPattern);
      undertowEmbeddedServletContainerFactory0.setDirectBuffers(boolean0);
      Undertow.Builder undertow_Builder0 = null;
      ServletContainerImpl servletContainerImpl0 = new ServletContainerImpl();
      // Undeclared exception!
      try { 
        servletContainerImpl0.getDeploymentByPath(undertowEmbeddedServletContainerFactory0.accessLogPattern);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("io.undertow.servlet.core.ServletContainerImpl", e);
      }
  }

  @Test(timeout = 11000)
  public void test56()  throws Throwable  {
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory();
      Vector<UndertowDeploymentInfoCustomizer> vector0 = new Vector<UndertowDeploymentInfoCustomizer>();
      undertowEmbeddedServletContainerFactory0.setDeploymentInfoCustomizers(vector0);
      Undertow.Builder undertow_Builder0 = Undertow.builder();
      ServletContainerImpl servletContainerImpl0 = new ServletContainerImpl();
      DeploymentInfo deploymentInfo0 = new DeploymentInfo();
      String string0 = "ljo^lyM=Vc]Is0";
      DeploymentInfo deploymentInfo1 = deploymentInfo0.setDefaultEncoding(string0);
      String string1 = "~sdk/rNLmkn.|";
      LoginConfig loginConfig0 = new LoginConfig(string1);
      DeploymentInfo deploymentInfo2 = deploymentInfo1.setLoginConfig(loginConfig0);
      DeploymentManager deploymentManager0 = servletContainerImpl0.addDeployment(deploymentInfo2);
      int int0 = 1619;
      UndertowEmbeddedServletContainer undertowEmbeddedServletContainer0 = undertowEmbeddedServletContainerFactory0.getUndertowEmbeddedServletContainer(undertow_Builder0, deploymentManager0, int0);
      UndertowEmbeddedServletContainerFactory.JarResourceManager undertowEmbeddedServletContainerFactory_JarResourceManager0 = new UndertowEmbeddedServletContainerFactory.JarResourceManager();
      ResourceChangeListener resourceChangeListener0 = mock(ResourceChangeListener.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        undertowEmbeddedServletContainerFactory_JarResourceManager0.registerResourceChangeListener(resourceChangeListener0);
      } catch(IllegalArgumentException e) {
      }
  }

  @Test(timeout = 11000)
  public void test57()  throws Throwable  {
      int int0 = (-4094);
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory(int0);
      ErrorPage errorPage0 = null;
      // Undeclared exception!
      try { 
        undertowEmbeddedServletContainerFactory0.getUndertowErrorPage(errorPage0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory", e);
      }
  }

  @Test(timeout = 11000)
  public void test58()  throws Throwable  {
      int int0 = 2460;
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory(int0);
      DeploymentInfo deploymentInfo0 = null;
      // Undeclared exception!
      try { 
        undertowEmbeddedServletContainerFactory0.configureAccessLog(deploymentInfo0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory", e);
      }
  }

  @Test(timeout = 11000)
  public void test59()  throws Throwable  {
      String string0 = "+PI";
      FailedContext failedContext0 = new FailedContext();
      File file0 = failedContext0.getCatalinaBase();
      File file1 = MockFile.createTempFile(string0, string0, file0);
      UndertowEmbeddedServletContainerFactory.JarResourceManager undertowEmbeddedServletContainerFactory_JarResourceManager0 = new UndertowEmbeddedServletContainerFactory.JarResourceManager(file1);
      String string1 = "";
      undertowEmbeddedServletContainerFactory_JarResourceManager0.jarPath = string1;
      try { 
        undertowEmbeddedServletContainerFactory_JarResourceManager0.getResource(string0);
      } catch(MalformedURLException e) {
         //
         // no !/ in spec
         //
         verifyException("java.net.URL", e);
      }
  }

  @Test(timeout = 11000)
  public void test60()  throws Throwable  {
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory();
      Integer integer0 = groovyjarjarasm.asm.Opcodes.FLOAT;
      int int0 = 246;
      String string0 = Integer.toUnsignedString(int0);
      undertowEmbeddedServletContainerFactory0.setIoThreads(integer0);
      File file0 = null;
      undertowEmbeddedServletContainerFactory0.setAccessLogDirectory(file0);
      // Undeclared exception!
      try { 
        undertowEmbeddedServletContainerFactory0.getTrustManagers();
      } catch(IllegalStateException e) {
         //
         // java.lang.NullPointerException
         //
         verifyException("org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory", e);
      }
  }

  @Test(timeout = 11000)
  public void test61()  throws Throwable  {
      String string0 = "";
      int int0 = 0;
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory(string0, int0);
      DeploymentInfo deploymentInfo0 = new DeploymentInfo();
      String string1 = "";
      io.undertow.servlet.api.ErrorPage errorPage0 = new io.undertow.servlet.api.ErrorPage(string1);
      DeploymentInfo deploymentInfo1 = deploymentInfo0.addErrorPage(errorPage0);
      AuthenticationMode authenticationMode0 = AuthenticationMode.CONSTRAINT_DRIVEN;
      DeploymentInfo deploymentInfo2 = deploymentInfo1.setAuthenticationMode(authenticationMode0);
      SessionListener sessionListener0 = null;
      DeploymentInfo deploymentInfo3 = deploymentInfo2.addSessionListener(sessionListener0);
      ErrorPage[] errorPageArray0 = new ErrorPage[3];
      HttpStatus httpStatus0 = HttpStatus.NETWORK_AUTHENTICATION_REQUIRED;
      ErrorPage errorPage1 = new ErrorPage(httpStatus0, string1);
      errorPageArray0[0] = errorPage1;
      HttpStatus httpStatus1 = HttpStatus.GATEWAY_TIMEOUT;
      ErrorPage errorPage2 = new ErrorPage(httpStatus1, undertowEmbeddedServletContainerFactory0.accessLogPattern);
      errorPageArray0[1] = errorPage2;
      Class<Throwable> class0 = Throwable.class;
      ErrorPage errorPage3 = new ErrorPage(class0, undertowEmbeddedServletContainerFactory0.accessLogPattern);
      errorPageArray0[2] = errorPage3;
      undertowEmbeddedServletContainerFactory0.addErrorPages(errorPageArray0);
      DeploymentInfo deploymentInfo4 = deploymentInfo3.setDeploymentName(undertowEmbeddedServletContainerFactory0.accessLogPattern);
      List<NotificationReceiver> list0 = deploymentInfo4.getNotificationReceivers();
      undertowEmbeddedServletContainerFactory0.configureErrorPages(deploymentInfo4);
      LinkedHashSet<UndertowBuilderCustomizer> linkedHashSet0 = new LinkedHashSet<UndertowBuilderCustomizer>();
      undertowEmbeddedServletContainerFactory0.setBuilderCustomizers(linkedHashSet0);
      DeploymentInfo deploymentInfo5 = null;
      // Undeclared exception!
      try { 
        undertowEmbeddedServletContainerFactory0.configureMimeMappings(deploymentInfo5);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory", e);
      }
  }

  @Test(timeout = 11000)
  public void test62()  throws Throwable  {
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory();
      HashSet<ErrorPage> hashSet0 = new HashSet<ErrorPage>();
      undertowEmbeddedServletContainerFactory0.setErrorPages(hashSet0);
      String string0 = "6)5MB`.V,VZ[&";
      undertowEmbeddedServletContainerFactory0.setJspServletClassName(string0);
      boolean boolean0 = undertowEmbeddedServletContainerFactory0.isAccessLogEnabled();
      CompilerConfiguration compilerConfiguration0 = new CompilerConfiguration();
      File file0 = compilerConfiguration0.getTargetDirectory();
      undertowEmbeddedServletContainerFactory0.setAccessLogDirectory(file0);
      DeploymentInfo deploymentInfo0 = new DeploymentInfo();
      LifecycleInterceptor lifecycleInterceptor0 = mock(LifecycleInterceptor.class, new ViolatedAssumptionAnswer());
      DeploymentInfo deploymentInfo1 = deploymentInfo0.addLifecycleInterceptor(lifecycleInterceptor0);
      String[] stringArray0 = new String[8];
      stringArray0[0] = string0;
      String string1 = "6\"m`NL3u9%";
      stringArray0[1] = string1;
      stringArray0[2] = string0;
      stringArray0[3] = undertowEmbeddedServletContainerFactory0.accessLogPattern;
      String string2 = "";
      stringArray0[4] = string2;
      stringArray0[5] = string0;
      stringArray0[6] = undertowEmbeddedServletContainerFactory0.accessLogPattern;
      stringArray0[7] = undertowEmbeddedServletContainerFactory0.accessLogPattern;
      DeploymentInfo deploymentInfo2 = deploymentInfo1.addWelcomePages(stringArray0);
      DefaultClassIntrospector defaultClassIntrospector0 = DefaultClassIntrospector.INSTANCE;
      DeploymentInfo deploymentInfo3 = deploymentInfo2.setClassIntrospecter(defaultClassIntrospector0);
      boolean boolean1 = false;
      DeploymentInfo deploymentInfo4 = deploymentInfo3.setInvalidateSessionOnLogout(boolean1);
      undertowEmbeddedServletContainerFactory0.configureMimeMappings(deploymentInfo4);
  }

  @Test(timeout = 11000)
  public void test63()  throws Throwable  {
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory();
      Collection<UndertowDeploymentInfoCustomizer> collection0 = undertowEmbeddedServletContainerFactory0.getDeploymentInfoCustomizers();
      Integer integer0 = null;
      undertowEmbeddedServletContainerFactory0.setIoThreads(integer0);
      Ssl ssl0 = new Ssl();
      ssl0.setTrustStoreType(undertowEmbeddedServletContainerFactory0.accessLogPattern);
      String string0 = "spring-boot";
      ssl0.setTrustStore(string0);
      String[] stringArray0 = new String[2];
      stringArray0[0] = string0;
      UndertowDeploymentInfoCustomizer[] undertowDeploymentInfoCustomizerArray0 = new UndertowDeploymentInfoCustomizer[6];
      UndertowDeploymentInfoCustomizer undertowDeploymentInfoCustomizer0 = mock(UndertowDeploymentInfoCustomizer.class, new ViolatedAssumptionAnswer());
      undertowDeploymentInfoCustomizerArray0[0] = undertowDeploymentInfoCustomizer0;
      undertowDeploymentInfoCustomizerArray0[1] = undertowDeploymentInfoCustomizerArray0[0];
      undertowDeploymentInfoCustomizerArray0[2] = undertowDeploymentInfoCustomizerArray0[1];
      undertowDeploymentInfoCustomizerArray0[3] = undertowDeploymentInfoCustomizerArray0[2];
      undertowDeploymentInfoCustomizerArray0[4] = undertowDeploymentInfoCustomizerArray0[3];
      undertowDeploymentInfoCustomizerArray0[5] = undertowDeploymentInfoCustomizerArray0[4];
      undertowEmbeddedServletContainerFactory0.addDeploymentInfoCustomizers(undertowDeploymentInfoCustomizerArray0);
      String string1 = "";
      stringArray0[1] = string1;
      ssl0.setCiphers(stringArray0);
      Class<MimeMappings.Mapping> class0 = MimeMappings.Mapping.class;
      NonEmptySequence nonEmptySequence0 = new NonEmptySequence(class0);
      undertowEmbeddedServletContainerFactory0.deploymentInfoCustomizers = (List<UndertowDeploymentInfoCustomizer>) nonEmptySequence0;
      int int0 = 228;
      ssl0.setKeyStorePassword(string1);
      Undertow.Builder undertow_Builder0 = null;
      // Undeclared exception!
      try { 
        undertowEmbeddedServletContainerFactory0.configureSsl(ssl0, int0, undertow_Builder0);
      } catch(IllegalStateException e) {
         //
         // java.lang.NullPointerException
         //
         verifyException("org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory", e);
      }
  }

  @Test(timeout = 11000)
  public void test64()  throws Throwable  {
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory();
      HashMap<ErrorPage, StandardProtocolFamily> hashMap0 = new HashMap<ErrorPage, StandardProtocolFamily>();
      Set<ErrorPage> set0 = hashMap0.keySet();
      undertowEmbeddedServletContainerFactory0.setErrorPages(set0);
      boolean boolean0 = undertowEmbeddedServletContainerFactory0.isAccessLogEnabled();
      UndertowBuilderCustomizer undertowBuilderCustomizer0 = mock(UndertowBuilderCustomizer.class, new ViolatedAssumptionAnswer());
      DeploymentInfo deploymentInfo0 = new DeploymentInfo();
      boolean boolean1 = false;
      DeploymentInfo deploymentInfo1 = deploymentInfo0.setSendCustomReasonPhraseOnError(boolean1);
      String string0 = "{} created new ZMQ PUB socket {}";
      DeploymentInfo deploymentInfo2 = deploymentInfo1.setUrlEncoding(string0);
      DeploymentInfo deploymentInfo3 = deploymentInfo2.setHostName(string0);
      undertowEmbeddedServletContainerFactory0.configureAccessLog(deploymentInfo2);
      DefaultClassIntrospector defaultClassIntrospector0 = DefaultClassIntrospector.INSTANCE;
      DeploymentInfo deploymentInfo4 = deploymentInfo3.setClassIntrospecter(defaultClassIntrospector0);
      undertowEmbeddedServletContainerFactory0.configureAccessLog(deploymentInfo4);
  }

  @Test(timeout = 11000)
  public void test65()  throws Throwable  {
      long long0 = 0L;
      System.setCurrentTimeMillis(long0);
      UndertowEmbeddedServletContainerFactory.Initializer undertowEmbeddedServletContainerFactory_Initializer0 = new UndertowEmbeddedServletContainerFactory.Initializer();
      String string0 = "";
      int int0 = 1075;
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory(string0, int0);
      Undertow.Builder undertow_Builder0 = Undertow.builder();
      ServletContainerImpl servletContainerImpl0 = new ServletContainerImpl();
      DeploymentInfo deploymentInfo0 = new DeploymentInfo();
      boolean boolean0 = false;
      DeploymentInfo deploymentInfo1 = deploymentInfo0.setSendCustomReasonPhraseOnError(boolean0);
      Class<UndertowEmbeddedServletContainerFactory.Initializer> class0 = UndertowEmbeddedServletContainerFactory.Initializer.class;
      ServletContainerInitializerInfo servletContainerInitializerInfo0 = new ServletContainerInitializerInfo(class0, undertowEmbeddedServletContainerFactory0.NO_CLASSES);
      DeploymentInfo deploymentInfo2 = deploymentInfo1.addServletContainerInitalizer(servletContainerInitializerInfo0);
      DeploymentManager deploymentManager0 = servletContainerImpl0.addDeployment(deploymentInfo2);
      int int1 = (-856);
      UndertowEmbeddedServletContainer undertowEmbeddedServletContainer0 = undertowEmbeddedServletContainerFactory0.getUndertowEmbeddedServletContainer(undertow_Builder0, deploymentManager0, int1);
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      JspServlet jspServlet0 = new JspServlet();
      jspServlet0.setRegistered(boolean1);
      EvoSuiteFile evoSuiteFile0 = null;
      String string1 = "";
      boolean boolean2 = FileSystemHandling.appendStringToFile(evoSuiteFile0, string1);
      String string2 = ",#\\fX-9{4";
      jspServlet0.setClassName(string2);
      jspServlet0.setRegistered(undertowEmbeddedServletContainerFactory0.useForwardHeaders);
      undertowEmbeddedServletContainerFactory0.setJspServlet(jspServlet0);
      int int2 = (-2209);
      undertowEmbeddedServletContainerFactory0.setPort(int2);
      // Undeclared exception!
      try { 
        undertowEmbeddedServletContainerFactory0.getTrustManagers();
      } catch(IllegalStateException e) {
         //
         // java.lang.NullPointerException
         //
         verifyException("org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory", e);
      }
  }

  @Test(timeout = 11000)
  public void test66()  throws Throwable  {
      String string0 = "";
      int int0 = (-2071);
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory(string0, int0);
      Integer integer0 = null;
      undertowEmbeddedServletContainerFactory0.setBufferSize(integer0);
      Integer integer1 = Opcodes.LONG;
      undertowEmbeddedServletContainerFactory0.setBufferSize(integer1);
      StandardContext standardContext0 = new StandardContext();
      File file0 = standardContext0.getCatalinaBase();
      undertowEmbeddedServletContainerFactory0.setAccessLogDirectory(file0);
      UndertowBuilderCustomizer[] undertowBuilderCustomizerArray0 = new UndertowBuilderCustomizer[7];
      UndertowBuilderCustomizer undertowBuilderCustomizer0 = mock(UndertowBuilderCustomizer.class, new ViolatedAssumptionAnswer());
      undertowBuilderCustomizerArray0[0] = undertowBuilderCustomizer0;
      undertowBuilderCustomizerArray0[1] = undertowBuilderCustomizerArray0[0];
      undertowBuilderCustomizerArray0[2] = undertowBuilderCustomizerArray0[1];
      undertowBuilderCustomizerArray0[3] = undertowBuilderCustomizerArray0[2];
      undertowBuilderCustomizerArray0[4] = undertowBuilderCustomizerArray0[3];
      undertowBuilderCustomizerArray0[5] = undertowBuilderCustomizerArray0[4];
      undertowBuilderCustomizerArray0[6] = undertowBuilderCustomizerArray0[5];
      undertowEmbeddedServletContainerFactory0.addBuilderCustomizers(undertowBuilderCustomizerArray0);
      int int1 = 1;
      Undertow.Builder undertow_Builder0 = undertowEmbeddedServletContainerFactory0.createBuilder(int1);
  }

  @Test(timeout = 11000)
  public void test67()  throws Throwable  {
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory();
      ServletContextInitializer[] servletContextInitializerArray0 = new ServletContextInitializer[3];
      FilterRegistrationBean filterRegistrationBean0 = new FilterRegistrationBean();
      servletContextInitializerArray0[1] = (ServletContextInitializer) filterRegistrationBean0;
      ServletContainerImpl servletContainerImpl0 = new ServletContainerImpl();
      DeploymentInfo deploymentInfo0 = null;
      String string0 = null;
      boolean boolean0 = true;
      String[] stringArray0 = new String[4];
      stringArray0[0] = undertowEmbeddedServletContainerFactory0.accessLogPattern;
      stringArray0[1] = string0;
      stringArray0[2] = undertowEmbeddedServletContainerFactory0.accessLogPattern;
      boolean boolean1 = true;
      undertowEmbeddedServletContainerFactory0.setPersistSession(boolean1);
      stringArray0[3] = string0;
      // Undeclared exception!
      try { 
        undertowEmbeddedServletContainerFactory0.createDeploymentManager(servletContextInitializerArray0);
      } catch(RuntimeException e) {
         //
         // java.lang.NullPointerException
         //
         verifyException("io.undertow.servlet.core.DeploymentManagerImpl", e);
      }
  }

  @Test(timeout = 11000)
  public void test68()  throws Throwable  {
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory();
      ServletContextInitializer[] servletContextInitializerArray0 = new ServletContextInitializer[2];
      FilterRegistrationBean filterRegistrationBean0 = new FilterRegistrationBean();
      servletContextInitializerArray0[1] = (ServletContextInitializer) filterRegistrationBean0;
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp/undertow-docbase.0.8080");
      boolean boolean0 = FileSystemHandling.createFolder(evoSuiteFile0);
      CorsFilter corsFilter0 = new CorsFilter();
      filterRegistrationBean0.setFilter(corsFilter0);
      ServletContainerImpl servletContainerImpl0 = new ServletContainerImpl();
      DeploymentInfo deploymentInfo0 = null;
      String string0 = null;
      boolean boolean1 = true;
      String[] stringArray0 = new String[4];
      stringArray0[0] = undertowEmbeddedServletContainerFactory0.accessLogPattern;
      stringArray0[2] = undertowEmbeddedServletContainerFactory0.accessLogPattern;
      stringArray0[3] = string0;
      // Undeclared exception!
      try { 
        undertowEmbeddedServletContainerFactory0.createDeploymentManager(servletContextInitializerArray0);
      } catch(RuntimeException e) {
         //
         // java.lang.NullPointerException
         //
         verifyException("io.undertow.servlet.core.DeploymentManagerImpl", e);
      }
  }

  @Test(timeout = 11000)
  public void test69()  throws Throwable  {
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory();
      ServletContextInitializer[] servletContextInitializerArray0 = new ServletContextInitializer[3];
      FilterRegistrationBean filterRegistrationBean0 = new FilterRegistrationBean();
      servletContextInitializerArray0[1] = (ServletContextInitializer) filterRegistrationBean0;
      ServletContainerImpl servletContainerImpl0 = new ServletContainerImpl();
      DeploymentInfo deploymentInfo0 = null;
      StaticApplicationContext staticApplicationContext0 = new StaticApplicationContext();
      undertowEmbeddedServletContainerFactory0.setResourceLoader(staticApplicationContext0);
      String string0 = null;
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        undertowEmbeddedServletContainerFactory0.createDeploymentManager(servletContextInitializerArray0);
      } catch(RuntimeException e) {
         //
         // java.lang.NullPointerException
         //
         verifyException("io.undertow.servlet.core.DeploymentManagerImpl", e);
      }
  }

  @Test(timeout = 11000)
  public void test70()  throws Throwable  {
      String string0 = "CmlB.\"CGi";
      UndertowEmbeddedServletContainerFactory.JarResourceManager undertowEmbeddedServletContainerFactory_JarResourceManager0 = new UndertowEmbeddedServletContainerFactory.JarResourceManager(string0);
      String string1 = "";
      int int0 = 0;
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory(string1, int0);
      InetAddress inetAddress0 = MockInetAddress.getLocalHost();
      undertowEmbeddedServletContainerFactory0.setAddress(inetAddress0);
      WebAppContext webAppContext0 = new WebAppContext();
      ErrorPage[] errorPageArray0 = new ErrorPage[5];
      String string2 = "3f>*!}?~R";
      ErrorPage errorPage0 = new ErrorPage(string2);
      errorPageArray0[0] = errorPage0;
      Class<Throwable> class0 = Throwable.class;
      String string3 = "";
      ErrorPage errorPage1 = new ErrorPage(class0, string3);
      errorPageArray0[1] = errorPage1;
      HttpStatus httpStatus0 = HttpStatus.FAILED_DEPENDENCY;
      ErrorPage errorPage2 = new ErrorPage(httpStatus0, webAppContext0.MANAGED_ATTRIBUTES);
      errorPageArray0[2] = errorPage2;
      String string4 = null;
      ErrorPage errorPage3 = new ErrorPage(class0, string4);
      errorPageArray0[3] = errorPage3;
      String string5 = "";
      ErrorPage errorPage4 = new ErrorPage(string5);
      errorPageArray0[4] = errorPage4;
      undertowEmbeddedServletContainerFactory0.addErrorPages(errorPageArray0);
      String string6 = "~}dq!m@;/{";
      String string7 = undertowEmbeddedServletContainerFactory0.getListenAddress();
  }

  @Test(timeout = 11000)
  public void test71()  throws Throwable  {
      String string0 = "";
      int int0 = (-2071);
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory(string0, int0);
      Integer integer0 = null;
      undertowEmbeddedServletContainerFactory0.setBufferSize(integer0);
      Integer integer1 = Opcodes.LONG;
      undertowEmbeddedServletContainerFactory0.setBufferSize(integer1);
      StandardContext standardContext0 = new StandardContext();
      File file0 = standardContext0.getCatalinaBase();
      undertowEmbeddedServletContainerFactory0.setAccessLogDirectory(file0);
      UndertowBuilderCustomizer[] undertowBuilderCustomizerArray0 = new UndertowBuilderCustomizer[7];
      UndertowBuilderCustomizer undertowBuilderCustomizer0 = mock(UndertowBuilderCustomizer.class, new ViolatedAssumptionAnswer());
      undertowBuilderCustomizerArray0[0] = undertowBuilderCustomizer0;
      undertowBuilderCustomizerArray0[1] = undertowBuilderCustomizerArray0[0];
      undertowBuilderCustomizerArray0[2] = undertowBuilderCustomizerArray0[1];
      undertowBuilderCustomizerArray0[0] = undertowBuilderCustomizerArray0[2];
      undertowBuilderCustomizerArray0[4] = undertowBuilderCustomizerArray0[3];
      undertowBuilderCustomizerArray0[5] = undertowBuilderCustomizerArray0[4];
      undertowBuilderCustomizerArray0[6] = undertowBuilderCustomizerArray0[5];
      undertowEmbeddedServletContainerFactory0.addBuilderCustomizers(undertowBuilderCustomizerArray0);
      Ssl ssl0 = new Ssl();
      SslClientAuthMode sslClientAuthMode0 = undertowEmbeddedServletContainerFactory0.getSslClientAuthMode(ssl0);
      // Undeclared exception!
      try { 
        undertowEmbeddedServletContainerFactory0.createBuilder(int0);
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory", e);
      }
  }

  @Test(timeout = 11000)
  public void test72()  throws Throwable  {
      ServletContextInitializer[] servletContextInitializerArray0 = new ServletContextInitializer[1];
      WebXml webXml0 = new WebXml();
      ConcurrentHashMap<String, String> concurrentHashMap0 = new ConcurrentHashMap<String, String>();
      InitParameterConfiguringServletContextInitializer initParameterConfiguringServletContextInitializer0 = new InitParameterConfiguringServletContextInitializer(concurrentHashMap0);
      servletContextInitializerArray0[0] = (ServletContextInitializer) initParameterConfiguringServletContextInitializer0;
      String string0 = null;
      String string1 = "0{";
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory();
      StandardHost standardHost0 = new StandardHost();
      File file0 = standardHost0.getAppBaseFile();
      undertowEmbeddedServletContainerFactory0.setAccessLogDirectory(file0);
  }

  @Test(timeout = 11000)
  public void test73()  throws Throwable  {
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory();
      ServletContextInitializer[] servletContextInitializerArray0 = new ServletContextInitializer[3];
      FilterRegistrationBean filterRegistrationBean0 = new FilterRegistrationBean();
      servletContextInitializerArray0[1] = (ServletContextInitializer) filterRegistrationBean0;
      ServletContainerImpl servletContainerImpl0 = new ServletContainerImpl();
      DeploymentInfo deploymentInfo0 = null;
      String string0 = null;
      String[] stringArray0 = new String[4];
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp/undertow-docbase.0.8080");
      byte[] byteArray0 = new byte[3];
      byte byte0 = (byte) (-108);
      byteArray0[0] = byte0;
      byte byte1 = (byte)11;
      byteArray0[1] = byte1;
      byteArray0[2] = byteArray0[1];
      boolean boolean0 = FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      stringArray0[1] = string0;
      EvoSuiteFile evoSuiteFile1 = new EvoSuiteFile("public");
      boolean boolean1 = FileSystemHandling.createFolder(evoSuiteFile1);
      stringArray0[2] = undertowEmbeddedServletContainerFactory0.accessLogPattern;
      // Undeclared exception!
      try { 
        undertowEmbeddedServletContainerFactory0.createDeploymentManager(servletContextInitializerArray0);
      } catch(RuntimeException e) {
         //
         // java.lang.NullPointerException
         //
         verifyException("io.undertow.servlet.core.DeploymentManagerImpl", e);
      }
  }

  @Test(timeout = 11000)
  public void test74()  throws Throwable  {
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory();
      ServletContextInitializer[] servletContextInitializerArray0 = new ServletContextInitializer[3];
      FilterRegistrationBean filterRegistrationBean0 = new FilterRegistrationBean();
      servletContextInitializerArray0[1] = (ServletContextInitializer) filterRegistrationBean0;
      ServletContainerImpl servletContainerImpl0 = new ServletContainerImpl();
      DeploymentInfo deploymentInfo0 = null;
      String string0 = null;
      String[] stringArray0 = new String[4];
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp/undertow-docbase.0.8080");
      byte[] byteArray0 = new byte[3];
      byte byte0 = (byte) (-108);
      byteArray0[0] = byte0;
      byte byte1 = (byte)11;
      byteArray0[1] = byte1;
      byteArray0[2] = byteArray0[1];
      boolean boolean0 = FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      stringArray0[0] = undertowEmbeddedServletContainerFactory0.accessLogPattern;
      stringArray0[1] = string0;
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      stringArray0[2] = undertowEmbeddedServletContainerFactory0.accessLogPattern;
      stringArray0[3] = string0;
      // Undeclared exception!
      try { 
        undertowEmbeddedServletContainerFactory0.createDeploymentManager(servletContextInitializerArray0);
      } catch(RuntimeException e) {
         //
         // Unable to create tempDir. java.io.tmpdir is set to /tmp
         //
         verifyException("org.springframework.boot.context.embedded.AbstractEmbeddedServletContainerFactory", e);
      }
  }

  @Test(timeout = 11000)
  public void test75()  throws Throwable  {
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory();
      JspServlet jspServlet0 = undertowEmbeddedServletContainerFactory0.getJspServlet();
      undertowEmbeddedServletContainerFactory0.setJspServlet(jspServlet0);
      Collection<UndertowDeploymentInfoCustomizer> collection0 = undertowEmbeddedServletContainerFactory0.getDeploymentInfoCustomizers();
      HttpStatus httpStatus0 = HttpStatus.I_AM_A_TEAPOT;
      ErrorPage errorPage0 = new ErrorPage(undertowEmbeddedServletContainerFactory0.accessLogPattern);
      String string0 = errorPage0.getExceptionName();
      boolean boolean0 = errorPage0.equals(jspServlet0);
      io.undertow.servlet.api.ErrorPage errorPage1 = undertowEmbeddedServletContainerFactory0.getUndertowErrorPage(errorPage0);
      Integer integer0 = JLayeredPane.FRAME_CONTENT_LAYER;
      undertowEmbeddedServletContainerFactory0.setBuffersPerRegion(integer0);
      UndertowEmbeddedServletContainerFactory.JarResourceManager undertowEmbeddedServletContainerFactory_JarResourceManager0 = new UndertowEmbeddedServletContainerFactory.JarResourceManager();
      MimeMappings mimeMappings0 = MimeMappings.DEFAULT;
      undertowEmbeddedServletContainerFactory0.setMimeMappings(mimeMappings0);
      int int0 = (-4126);
      Integer integer1 = Integer.getInteger(undertowEmbeddedServletContainerFactory0.accessLogPattern, undertowEmbeddedServletContainerFactory0.ioThreads);
      long long0 = Integer.toUnsignedLong(int0);
      int int1 = 1198;
      Undertow.Builder undertow_Builder0 = undertowEmbeddedServletContainerFactory0.createBuilder(int1);
      undertowEmbeddedServletContainerFactory_JarResourceManager0.close();
      // Undeclared exception!
      try { 
        undertowEmbeddedServletContainerFactory0.getTrustManagers();
      } catch(IllegalStateException e) {
         //
         // java.lang.NullPointerException
         //
         verifyException("org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory", e);
      }
  }

  @Test(timeout = 11000)
  public void test76()  throws Throwable  {
      String string0 = "";
      int int0 = (-2071);
      UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory0 = new UndertowEmbeddedServletContainerFactory(string0, int0);
      Integer integer0 = null;
      undertowEmbeddedServletContainerFactory0.setBufferSize(integer0);
      Integer integer1 = Opcodes.LONG;
      undertowEmbeddedServletContainerFactory0.setBufferSize(integer1);
      StandardContext standardContext0 = new StandardContext();
      File file0 = standardContext0.getCatalinaBase();
      undertowEmbeddedServletContainerFactory0.setAccessLogDirectory(file0);
      UndertowBuilderCustomizer[] undertowBuilderCustomizerArray0 = new UndertowBuilderCustomizer[7];
      UndertowBuilderCustomizer undertowBuilderCustomizer0 = mock(UndertowBuilderCustomizer.class, new ViolatedAssumptionAnswer());
      undertowBuilderCustomizerArray0[0] = undertowBuilderCustomizer0;
      undertowBuilderCustomizerArray0[1] = undertowBuilderCustomizerArray0[0];
      undertowBuilderCustomizerArray0[2] = undertowBuilderCustomizerArray0[1];
      undertowBuilderCustomizerArray0[3] = undertowBuilderCustomizerArray0[2];
      undertowBuilderCustomizerArray0[4] = undertowBuilderCustomizerArray0[3];
      undertowBuilderCustomizerArray0[5] = undertowBuilderCustomizerArray0[4];
      undertowBuilderCustomizerArray0[6] = undertowBuilderCustomizerArray0[5];
      undertowEmbeddedServletContainerFactory0.addBuilderCustomizers(undertowBuilderCustomizerArray0);
      Ssl ssl0 = new Ssl();
      Ssl.ClientAuth ssl_ClientAuth0 = Ssl.ClientAuth.NEED;
      ssl0.setClientAuth(ssl_ClientAuth0);
      SslClientAuthMode sslClientAuthMode0 = undertowEmbeddedServletContainerFactory0.getSslClientAuthMode(ssl0);
      String string1 = "spring-boot";
      UndertowEmbeddedServletContainerFactory.JarResourceManager undertowEmbeddedServletContainerFactory_JarResourceManager0 = new UndertowEmbeddedServletContainerFactory.JarResourceManager(string1);
      String string2 = "";
      try { 
        undertowEmbeddedServletContainerFactory_JarResourceManager0.getResource(string2);
      } catch(MalformedURLException e) {
         //
         // no !/ in spec
         //
         verifyException("java.net.URL", e);
      }
  }
}
